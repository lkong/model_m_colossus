   1               		.file	"action_macro.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.action_macro_play,"ax",@progbits
  12               	.global	action_macro_play
  14               	action_macro_play:
  15               	.LFB10:
  16               		.file 1 "../../../../tmk_core/common/action_macro.c"
   1:../../../../tmk_core/common/action_macro.c **** /*
   2:../../../../tmk_core/common/action_macro.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../../../tmk_core/common/action_macro.c **** 
   4:../../../../tmk_core/common/action_macro.c **** This program is free software: you can redistribute it and/or modify
   5:../../../../tmk_core/common/action_macro.c **** it under the terms of the GNU General Public License as published by
   6:../../../../tmk_core/common/action_macro.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../../../tmk_core/common/action_macro.c **** (at your option) any later version.
   8:../../../../tmk_core/common/action_macro.c **** 
   9:../../../../tmk_core/common/action_macro.c **** This program is distributed in the hope that it will be useful,
  10:../../../../tmk_core/common/action_macro.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../../../tmk_core/common/action_macro.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../../../tmk_core/common/action_macro.c **** GNU General Public License for more details.
  13:../../../../tmk_core/common/action_macro.c **** 
  14:../../../../tmk_core/common/action_macro.c **** You should have received a copy of the GNU General Public License
  15:../../../../tmk_core/common/action_macro.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../../../tmk_core/common/action_macro.c **** */
  17:../../../../tmk_core/common/action_macro.c **** #include "action.h"
  18:../../../../tmk_core/common/action_macro.c **** #include "action_util.h"
  19:../../../../tmk_core/common/action_macro.c **** #include "action_macro.h"
  20:../../../../tmk_core/common/action_macro.c **** #include "wait.h"
  21:../../../../tmk_core/common/action_macro.c **** 
  22:../../../../tmk_core/common/action_macro.c **** #ifdef DEBUG_ACTION
  23:../../../../tmk_core/common/action_macro.c **** #include "debug.h"
  24:../../../../tmk_core/common/action_macro.c **** #else
  25:../../../../tmk_core/common/action_macro.c **** #include "nodebug.h"
  26:../../../../tmk_core/common/action_macro.c **** #endif
  27:../../../../tmk_core/common/action_macro.c **** 
  28:../../../../tmk_core/common/action_macro.c **** 
  29:../../../../tmk_core/common/action_macro.c **** #ifndef NO_ACTION_MACRO
  30:../../../../tmk_core/common/action_macro.c **** 
  31:../../../../tmk_core/common/action_macro.c **** #define MACRO_READ()  (macro = MACRO_GET(macro_p++))
  32:../../../../tmk_core/common/action_macro.c **** void action_macro_play(const macro_t *macro_p)
  33:../../../../tmk_core/common/action_macro.c **** {
  17               		.loc 1 33 0
  18               		.cfi_startproc
  19               	.LVL0:
  20 0000 CF92      		push r12
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 12, -2
  24 0002 DF92      		push r13
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 13, -3
  28 0004 EF92      		push r14
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 14, -4
  32 0006 FF92      		push r15
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 15, -5
  36 0008 CF93      		push r28
  37               	.LCFI4:
  38               		.cfi_def_cfa_offset 7
  39               		.cfi_offset 28, -6
  40 000a DF93      		push r29
  41               	.LCFI5:
  42               		.cfi_def_cfa_offset 8
  43               		.cfi_offset 29, -7
  44               	/* prologue: function */
  45               	/* frame size = 0 */
  46               	/* stack size = 6 */
  47               	.L__stack_usage = 6
  48 000c 9C01      		movw r18,r24
  49               	.LVL1:
  34:../../../../tmk_core/common/action_macro.c ****     macro_t macro = END;
  35:../../../../tmk_core/common/action_macro.c ****     uint8_t interval = 0;
  36:../../../../tmk_core/common/action_macro.c **** 
  37:../../../../tmk_core/common/action_macro.c ****     uint8_t mod_storage = 0;
  38:../../../../tmk_core/common/action_macro.c **** 
  39:../../../../tmk_core/common/action_macro.c ****     if (!macro_p) return;
  50               		.loc 1 39 0
  51 000e 0097      		sbiw r24,0
  52 0010 01F4      		brne .+2
  53 0012 00C0      		rjmp .L1
  54 0014 D0E0      		ldi r29,0
  55 0016 C0E0      		ldi r28,0
  40:../../../../tmk_core/common/action_macro.c ****     while (true) {
  41:../../../../tmk_core/common/action_macro.c ****         switch (MACRO_READ()) {
  42:../../../../tmk_core/common/action_macro.c ****             case KEY_DOWN:
  43:../../../../tmk_core/common/action_macro.c ****                 MACRO_READ();
  44:../../../../tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
  45:../../../../tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  46:../../../../tmk_core/common/action_macro.c ****                     add_weak_mods(MOD_BIT(macro));
  56               		.loc 1 46 0
  57 0018 CC24      		clr r12
  58 001a C394      		inc r12
  59 001c D12C      		mov r13,__zero_reg__
  60               	.LVL2:
  61               	.L21:
  62               	.LBB13:
  41:../../../../tmk_core/common/action_macro.c ****         switch (MACRO_READ()) {
  63               		.loc 1 41 0
  64 001e 7901      		movw r14,r18
  65 0020 8FEF      		ldi r24,-1
  66 0022 E81A      		sub r14,r24
  67 0024 F80A      		sbc r15,r24
  68               	.LVL3:
  69 0026 F901      		movw r30,r18
  70               	/* #APP */
  71               	 ;  41 "../../../../tmk_core/common/action_macro.c" 1
  72 0028 8491      		lpm r24, Z
  73               		
  74               	 ;  0 "" 2
  75               	.LVL4:
  76               	/* #NOAPP */
  77               	.LBE13:
  78 002a 8537      		cpi r24,lo8(117)
  79 002c 01F4      		brne .+2
  80 002e 00C0      		rjmp .L7
  81 0030 00F4      		brsh .L12
  82 0032 8437      		cpi r24,lo8(116)
  83 0034 00F0      		brlo .+2
  84 0036 00C0      		rjmp .L6
  85 0038 8430      		cpi r24,lo8(4)
  86 003a 00F0      		brlo .+2
  87 003c 00C0      		rjmp .L5
  88 003e 8130      		cpi r24,lo8(1)
  89 0040 01F0      		breq .L3
  90 0042 8230      		cpi r24,lo8(2)
  91 0044 01F0      		breq .+2
  92 0046 00C0      		rjmp .L1
  93 0048 00C0      		rjmp .L4
  94               	.L12:
  95 004a 8837      		cpi r24,lo8(120)
  96 004c 01F4      		brne .+2
  97 004e 00C0      		rjmp .L10
  98 0050 00F4      		brsh .L13
  99 0052 8637      		cpi r24,lo8(118)
 100 0054 01F4      		brne .+2
 101 0056 00C0      		rjmp .L8
 102 0058 8737      		cpi r24,lo8(119)
 103 005a 01F0      		breq .+2
 104 005c 00C0      		rjmp .L1
 105 005e 00C0      		rjmp .L9
 106               	.L13:
 107 0060 982F      		mov r25,r24
 108 0062 9458      		subi r25,lo8(-(124))
 109 0064 9037      		cpi r25,lo8(112)
 110 0066 00F0      		brlo .+2
 111 0068 00C0      		rjmp .L1
 112 006a 00C0      		rjmp .L25
 113               	.L3:
 114               	.LBB14:
  43:../../../../tmk_core/common/action_macro.c ****                 MACRO_READ();
 115               		.loc 1 43 0
 116 006c F701      		movw r30,r14
 117               	.LVL5:
 118 006e 7901      		movw r14,r18
 119               	.LVL6:
 120 0070 82E0      		ldi r24,2
 121 0072 E80E      		add r14,r24
 122 0074 F11C      		adc r15,__zero_reg__
 123               	.LVL7:
 124               	/* #APP */
 125               	 ;  43 "../../../../tmk_core/common/action_macro.c" 1
 126 0076 E491      		lpm r30, Z
 127               		
 128               	 ;  0 "" 2
 129               	.LVL8:
 130               	/* #NOAPP */
 131               	.LBE14:
  45:../../../../tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
 132               		.loc 1 45 0
 133 0078 8E2F      		mov r24,r30
 134 007a 805E      		subi r24,lo8(-(32))
 135 007c 8830      		cpi r24,lo8(8)
 136 007e 00F4      		brsh .L14
 137               		.loc 1 46 0
 138 0080 E770      		andi r30,lo8(7)
 139               	.LVL9:
 140 0082 8C2D      		mov r24,r12
 141               	.LVL10:
 142 0084 00C0      		rjmp 2f
 143               		1:
 144 0086 880F      		lsl r24
 145               		2:
 146 0088 EA95      		dec r30
 147 008a 02F4      		brpl 1b
 148 008c 0E94 0000 		call add_weak_mods
 149               	.LVL11:
 150 0090 00C0      		rjmp .L26
 151               	.LVL12:
 152               	.L14:
  47:../../../../tmk_core/common/action_macro.c ****                     send_keyboard_report();
  48:../../../../tmk_core/common/action_macro.c ****                 } else {
  49:../../../../tmk_core/common/action_macro.c ****                     register_code(macro);
 153               		.loc 1 49 0
 154 0092 8E2F      		mov r24,r30
 155 0094 00C0      		rjmp .L5
 156               	.LVL13:
 157               	.L4:
 158               	.LBB15:
  50:../../../../tmk_core/common/action_macro.c ****                 }
  51:../../../../tmk_core/common/action_macro.c ****                 break;
  52:../../../../tmk_core/common/action_macro.c ****             case KEY_UP:
  53:../../../../tmk_core/common/action_macro.c ****                 MACRO_READ();
 159               		.loc 1 53 0
 160 0096 F701      		movw r30,r14
 161               	.LVL14:
 162 0098 7901      		movw r14,r18
 163               	.LVL15:
 164 009a 82E0      		ldi r24,2
 165 009c E80E      		add r14,r24
 166 009e F11C      		adc r15,__zero_reg__
 167               	.LVL16:
 168               	/* #APP */
 169               	 ;  53 "../../../../tmk_core/common/action_macro.c" 1
 170 00a0 E491      		lpm r30, Z
 171               		
 172               	 ;  0 "" 2
 173               	.LVL17:
 174               	/* #NOAPP */
 175               	.LBE15:
  54:../../../../tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
  55:../../../../tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
 176               		.loc 1 55 0
 177 00a2 8E2F      		mov r24,r30
 178 00a4 805E      		subi r24,lo8(-(32))
 179 00a6 8830      		cpi r24,lo8(8)
 180 00a8 00F4      		brsh .L16
  56:../../../../tmk_core/common/action_macro.c ****                     del_weak_mods(MOD_BIT(macro));
 181               		.loc 1 56 0
 182 00aa E770      		andi r30,lo8(7)
 183               	.LVL18:
 184 00ac 8C2D      		mov r24,r12
 185               	.LVL19:
 186 00ae 00C0      		rjmp 2f
 187               		1:
 188 00b0 880F      		lsl r24
 189               		2:
 190 00b2 EA95      		dec r30
 191 00b4 02F4      		brpl 1b
 192 00b6 0E94 0000 		call del_weak_mods
 193               	.LVL20:
 194               	.L26:
  57:../../../../tmk_core/common/action_macro.c ****                     send_keyboard_report();
 195               		.loc 1 57 0
 196 00ba 0E94 0000 		call send_keyboard_report
 197               	.LVL21:
 198 00be 00C0      		rjmp .L15
 199               	.LVL22:
 200               	.L16:
  58:../../../../tmk_core/common/action_macro.c ****                 } else {
  59:../../../../tmk_core/common/action_macro.c ****                     unregister_code(macro);
 201               		.loc 1 59 0
 202 00c0 8E2F      		mov r24,r30
 203 00c2 00C0      		rjmp .L27
 204               	.LVL23:
 205               	.L6:
 206               	.LBB16:
  60:../../../../tmk_core/common/action_macro.c ****                 }
  61:../../../../tmk_core/common/action_macro.c ****                 break;
  62:../../../../tmk_core/common/action_macro.c ****             case WAIT:
  63:../../../../tmk_core/common/action_macro.c ****                 MACRO_READ();
 207               		.loc 1 63 0
 208 00c4 F701      		movw r30,r14
 209               	.LVL24:
 210 00c6 7901      		movw r14,r18
 211               	.LVL25:
 212 00c8 82E0      		ldi r24,2
 213 00ca E80E      		add r14,r24
 214 00cc F11C      		adc r15,__zero_reg__
 215               	.LVL26:
 216               	/* #APP */
 217               	 ;  63 "../../../../tmk_core/common/action_macro.c" 1
 218 00ce 9491      		lpm r25, Z
 219               		
 220               	 ;  0 "" 2
 221               	.LVL27:
 222               	/* #NOAPP */
 223               	.LBE16:
 224               	.LBB17:
  64:../../../../tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
  65:../../../../tmk_core/common/action_macro.c ****                 { uint8_t ms = macro; while (ms--) wait_ms(1); }
 225               		.loc 1 65 0
 226 00d0 00C0      		rjmp .L17
 227               	.LVL28:
 228               	.L18:
 229               	.LBB18:
 230               	.LBB19:
 231               		.file 2 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h"
   1:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
   6:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
   9:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  12:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  17:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  21:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  33:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  35:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  38:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  41:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  42:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  46:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \code
  49:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  54:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     used.
  58:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  59:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  68:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  77:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  81:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** */
  82:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  83:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  87:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  88:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  93:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  94:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  97:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  98:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
 103:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 104:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /**
 105:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 107:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 109:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 112:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 114:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 120:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 125:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 129:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 132:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 140:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****  */
 141:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** void
 142:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** {
 144:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 153:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 156:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 159:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 164:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 232               		.loc 2 164 0
 233 00d2 EFE9      		ldi r30,lo8(3999)
 234 00d4 FFE0      		ldi r31,hi8(3999)
 235 00d6 3197      		1: sbiw r30,1
 236 00d8 01F4      		brne 1b
 237 00da 00C0      		rjmp .
 238 00dc 0000      		nop
 239 00de 9150      		subi r25,lo8(-(-1))
 240               	.LVL29:
 241               	.L17:
 242               	.LBE19:
 243               	.LBE18:
 244               		.loc 1 65 0 discriminator 1
 245 00e0 9111      		cpse r25,__zero_reg__
 246 00e2 00C0      		rjmp .L18
 247 00e4 00C0      		rjmp .L15
 248               	.LVL30:
 249               	.L7:
 250               	.LBE17:
 251               	.LBB20:
  66:../../../../tmk_core/common/action_macro.c ****                 break;
  67:../../../../tmk_core/common/action_macro.c ****             case INTERVAL:
  68:../../../../tmk_core/common/action_macro.c ****                 interval = MACRO_READ();
 252               		.loc 1 68 0
 253 00e6 F701      		movw r30,r14
 254               	.LVL31:
 255 00e8 7901      		movw r14,r18
 256               	.LVL32:
 257 00ea 82E0      		ldi r24,2
 258 00ec E80E      		add r14,r24
 259 00ee F11C      		adc r15,__zero_reg__
 260               	.LVL33:
 261               	/* #APP */
 262               	 ;  68 "../../../../tmk_core/common/action_macro.c" 1
 263 00f0 C491      		lpm r28, Z
 264               		
 265               	 ;  0 "" 2
 266               	.LVL34:
 267               	/* #NOAPP */
 268               	.LBE20:
  69:../../../../tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
  70:../../../../tmk_core/common/action_macro.c ****                 break;
 269               		.loc 1 70 0
 270 00f2 00C0      		rjmp .L15
 271               	.LVL35:
 272               	.L8:
  71:../../../../tmk_core/common/action_macro.c ****             case MOD_STORE:
  72:../../../../tmk_core/common/action_macro.c ****                 mod_storage = get_mods();
 273               		.loc 1 72 0
 274 00f4 0E94 0000 		call get_mods
 275               	.LVL36:
 276 00f8 D82F      		mov r29,r24
 277               	.LVL37:
  73:../../../../tmk_core/common/action_macro.c ****                 break;
 278               		.loc 1 73 0
 279 00fa 00C0      		rjmp .L15
 280               	.LVL38:
 281               	.L9:
  74:../../../../tmk_core/common/action_macro.c ****             case MOD_RESTORE:
  75:../../../../tmk_core/common/action_macro.c ****                 set_mods(mod_storage);
 282               		.loc 1 75 0
 283 00fc 8D2F      		mov r24,r29
 284               	.LVL39:
 285 00fe 0E94 0000 		call set_mods
 286               	.LVL40:
 287 0102 00C0      		rjmp .L26
 288               	.LVL41:
 289               	.L10:
  76:../../../../tmk_core/common/action_macro.c ****                 send_keyboard_report();
  77:../../../../tmk_core/common/action_macro.c ****                 break;
  78:../../../../tmk_core/common/action_macro.c ****             case MOD_CLEAR:
  79:../../../../tmk_core/common/action_macro.c ****                 clear_mods();
 290               		.loc 1 79 0
 291 0104 0E94 0000 		call clear_mods
 292               	.LVL42:
 293 0108 00C0      		rjmp .L26
 294               	.LVL43:
 295               	.L5:
  80:../../../../tmk_core/common/action_macro.c ****                 send_keyboard_report();
  81:../../../../tmk_core/common/action_macro.c ****                 break;
  82:../../../../tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
  83:../../../../tmk_core/common/action_macro.c ****                 dprintf("DOWN(%02X)\n", macro);
  84:../../../../tmk_core/common/action_macro.c ****                 register_code(macro);
 296               		.loc 1 84 0
 297 010a 0E94 0000 		call register_code
 298               	.LVL44:
  85:../../../../tmk_core/common/action_macro.c ****                 break;
 299               		.loc 1 85 0
 300 010e 00C0      		rjmp .L15
 301               	.LVL45:
 302               	.L25:
  86:../../../../tmk_core/common/action_macro.c ****             case 0x84 ... 0xF3:
  87:../../../../tmk_core/common/action_macro.c ****                 dprintf("UP(%02X)\n", macro);
  88:../../../../tmk_core/common/action_macro.c ****                 unregister_code(macro&0x7F);
 303               		.loc 1 88 0
 304 0110 8F77      		andi r24,lo8(127)
 305               	.LVL46:
 306               	.L27:
 307 0112 0E94 0000 		call unregister_code
 308               	.LVL47:
 309               	.L15:
 310               	.LBB21:
  89:../../../../tmk_core/common/action_macro.c ****                 break;
  90:../../../../tmk_core/common/action_macro.c ****             case END:
  91:../../../../tmk_core/common/action_macro.c ****             default:
  92:../../../../tmk_core/common/action_macro.c ****                 return;
  93:../../../../tmk_core/common/action_macro.c ****         }
  94:../../../../tmk_core/common/action_macro.c ****         // interval
  95:../../../../tmk_core/common/action_macro.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
 311               		.loc 1 95 0
 312 0116 9C2F      		mov r25,r28
 313 0118 00C0      		rjmp .L19
 314               	.LVL48:
 315               	.L20:
 316 011a 9150      		subi r25,lo8(-(-1))
 317               	.LVL49:
 318               	.LBB22:
 319               	.LBB23:
 320               		.loc 2 164 0
 321 011c EFE9      		ldi r30,lo8(3999)
 322 011e FFE0      		ldi r31,hi8(3999)
 323 0120 3197      		1: sbiw r30,1
 324 0122 01F4      		brne 1b
 325 0124 00C0      		rjmp .
 326 0126 0000      		nop
 327               	.LVL50:
 328               	.L19:
 329               	.LBE23:
 330               	.LBE22:
 331               		.loc 1 95 0 discriminator 1
 332 0128 9111      		cpse r25,__zero_reg__
 333 012a 00C0      		rjmp .L20
 334               		.loc 1 95 0 is_stmt 0
 335 012c 9701      		movw r18,r14
 336 012e 00C0      		rjmp .L21
 337               	.LVL51:
 338               	.L1:
 339               	/* epilogue start */
 340               	.LBE21:
  96:../../../../tmk_core/common/action_macro.c ****     }
  97:../../../../tmk_core/common/action_macro.c **** }
 341               		.loc 1 97 0 is_stmt 1
 342 0130 DF91      		pop r29
 343 0132 CF91      		pop r28
 344 0134 FF90      		pop r15
 345 0136 EF90      		pop r14
 346 0138 DF90      		pop r13
 347 013a CF90      		pop r12
 348 013c 0895      		ret
 349               		.cfi_endproc
 350               	.LFE10:
 352               		.text
 353               	.Letext0:
 354               		.file 3 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/stdint.h"
 355               		.file 4 "../../../../tmk_core/common/action_macro.h"
 356               		.file 5 "../../../../tmk_core/common/keycode.h"
 357               		.file 6 "../../../../tmk_core/common/action_util.h"
 358               		.file 7 "../../../../tmk_core/common/action.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_macro.c
     /tmp/ccOM2Jhh.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccOM2Jhh.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccOM2Jhh.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccOM2Jhh.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccOM2Jhh.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccOM2Jhh.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccOM2Jhh.s:14     .text.action_macro_play:0000000000000000 action_macro_play

UNDEFINED SYMBOLS
add_weak_mods
del_weak_mods
send_keyboard_report
get_mods
set_mods
clear_mods
register_code
unregister_code
