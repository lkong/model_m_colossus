
colossus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00005b8e  00005c22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005b8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c7  0080013c  0080013c  00005c5e  2**0
                  ALLOC
  3 .noinit       00000004  00800303  00800303  00005c5e  2**0
                  ALLOC
  4 .stab         00002964  00000000  00000000  00005c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000004fb  00000000  00000000  000085c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00008abf  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000ac0  00000000  00000000  00008ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000110af  00000000  00000000  00009590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000044c0  00000000  00000000  0001a63f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005ff6  00000000  00000000  0001eaff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001ee0  00000000  00000000  00024af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004794  00000000  00000000  000269d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000088e5  00000000  00000000  0002b16c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c68  00000000  00000000  00033a51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__ctors_end>
       4:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
       8:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
       c:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      10:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      14:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      18:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      1c:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      20:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      24:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      28:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__vector_10>
      2c:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__vector_11>
      30:	0c 94 1b 22 	jmp	0x4436	; 0x4436 <__vector_12>
      34:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      38:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      3c:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      40:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      44:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      48:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      4c:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      50:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      54:	0c 94 9a 22 	jmp	0x4534	; 0x4534 <__vector_21>
      58:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      5c:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      60:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      64:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__vector_25>

	ParserData->TotalDeviceReports = 1;
      68:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      6c:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      70:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      74:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      78:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      7c:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      80:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      84:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      88:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      8c:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      90:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>
      94:	0c 94 56 07 	jmp	0xeac	; 0xeac <__bad_interrupt>

00000098 <fn_actions>:
      98:	00 f0 01 f0 02 f0 39 a3 f1 a4 03 f0                 ......9.....

000000a4 <keymaps>:
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      a4:	00 00 00 00 00 05 2c 11 e5 00 38 51 4f 00 50 e6     ......,...8QO.P.

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b4:	e4 e5 1d 1b 06 19 28 10 36 37 31 00 00 00 48 00     ......(.671...H.

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
      c4:	00 00 04 16 07 09 31 0d 0e 0f 33 00 00 00 00 00     ......1...3.....
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      d4:	00 00 14 1a 08 15 31 18 0c 12 13 00 00 00 00 c0     ......1.........
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      e4:	00 00 1e 1f 20 21 43 24 25 26 27 44 45 4e 4d 46     .... !C$%&'DENMF
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
      f4:	e0 00 35 3a 3b 22 42 23 2e 41 2d 4c 49 c2 4a 00     ..5:;"B#.A-LI.J.
     104:	00 e1 2b c3 3c 17 2a 1c 30 40 2f 00 00 00 00 00     ..+.<.*.0@/.....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     114:	00 00 29 64 3d 0a 3e 0b 3f 00 34 00 00 00 52 e2     ..)d=.>.?.4...R.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     124:	00 00 00 00 00 01 01 01 01 00 54 01 01 00 01 01     ..........T.....
     134:	01 01 01 01 01 01 58 62 85 63 01 00 00 00 01 00     ......Xb.c......
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
				break;
     144:	00 00 01 01 01 01 01 59 5a 5b 55 00 00 00 00 00     .......YZ[U.....

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     154:	00 00 01 01 01 01 01 5c 5d 5e 01 00 00 00 00 c1     .......\]^......
     164:	00 00 01 01 01 01 01 5f 60 61 01 01 01 01 01 01     ......._`a......
				ReportSize     -= 2;
				ReportData     += 2;
				break;
     174:	01 00 01 01 01 01 01 01 57 01 56 01 01 01 01 00     ........W.V.....

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
				ReportSize     -= 1;
     184:	00 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     194:	00 00 01 01 01 01 01 01 01 00 01 00 00 00 01 01     ................
     1a4:	00 00 00 00 00 01 01 01 01 00 01 01 01 00 01 01     ................
     1b4:	c4 01 01 01 01 01 01 01 01 01 01 00 00 00 01 00     ................
     1c4:	00 00 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
     1d4:	00 00 01 01 01 01 01 01 01 01 01 00 00 00 00 01     ................
     1e4:	00 00 01 01 01 01 01 01 01 01 01 01 01 f3 f1 01     ................
     1f4:	01 00 01 01 01 01 01 01 01 01 01 f2 f4 f5 f0 00     ................
     204:	00 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
     214:	00 00 01 01 01 01 01 01 01 00 01 00 00 00 01 01     ................
     224:	00 00 00 00 00 01 01 01 01 00 01 a8 a9 00 aa e7     ................
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     234:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 c5 00     ................
     244:	00 00 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     254:	00 00 01 01 01 01 01 01 01 01 01 00 00 00 00 01     ................

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     264:	00 00 01 01 01 01 ae 01 01 01 01 ac ab 01 01 01     ................
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
				break;
     274:	01 00 01 01 01 01 01 01 01 01 01 01 01 01 01 00     ................

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
				break;
     284:	00 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     294:	00 00 01 01 01 01 01 01 01 00 01 00 00 00 01 e3     ................
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     2a4:	00 00 00 00 00 01 01 01 01 00 01 01 01 00 01 01     ................
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2b4:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 01 00     ................
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
     2c4:	00 00 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     2d4:	00 00 01 01 01 01 01 01 01 01 01 00 00 00 00 01     ................
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2e4:	00 00 01 01 01 01 01 01 01 01 01 01 01 01 fa 01     ................
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2f4:	01 00 01 01 01 01 01 01 01 01 01 01 01 01 f9 00     ................
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     304:	00 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     314:	00 00 01 01 01 01 01 01 01 00 01 00 00 00 01 01     ................

00000324 <__c.2281>:
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     324:	50 00                                               P.

00000326 <__c.2283>:
     326:	52 00                                               R.

00000328 <__c.2285>:
     328:	69 00                                               i.

0000032a <__c.1778>:
     32a:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000334 <__c.1780>:
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     334:	25 30 32 58 00                                      %02X.

00000339 <__c.1782>:
     339:	0a 00                                               ..

0000033b <__c.1804>:
     33b:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
					}
				}

				ParserData->UsingReportIDs = true;

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     34b:	42 43 44 45 46 0a 00                                BCDEF..

00000352 <__c.1807>:
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     352:	25 30 32 58 00                                      %02X.

00000357 <__c.1809>:
     357:	3a 20 00                                            : .

0000035a <__c.1811>:
     35a:	25 30 31 36 62 00                                   %016b.

00000360 <__c.1813>:
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     360:	0a 00                                               ..

00000362 <__c.4352>:
     362:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 6b 65 79     Initializing key
     372:	62 6f 61 72 64 2e 2e 2e 0a 00                       board.....

0000037c <__c.4355>:
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     37c:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 6b 65 79     Initializing key

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     38c:	62 6f 61 72 64 2e 2e 2e 0a 00                       board.....

00000396 <__c.4357>:
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     396:	53 65 74 74 69 6e 67 20 68 6f 73 74 20 64 72 69     Setting host dri

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3a6:	76 65 72 20 74 6f 20 4c 55 46 41 2e 2e 2e 0a 00     ver to LUFA.....

000003b6 <__c.4359>:
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3b6:	55 53 42 20 70 6c 75 67 67 65 64 20 69 6e 2c 20     USB plugged in, 
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
				}

				CurrCollectionPath->Type       = ReportItemData;
     3c6:	62 75 74 20 6e 6f 74 20 63 6f 6e 66 69 67 75 72     but not configur
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     3d6:	65 64 3a 20 61 73 73 75 6d 69 6e 67 20 63 68 61     ed: assuming cha

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     3e6:	72 67 65 72 2e 0a 00                                rger...

000003ed <__c.4361>:
     3ed:	4d 61 69 6e 20 6c 6f 6f 70 00                       Main loop.

000003f7 <__c.2119>:
     3f7:	0a 44 61 74 61 3a 20 00                             .Data: .

000003ff <__c.2121>:

					for (uint8_t i = 1; i < UsageListSize; i++)
					  UsageList[i - 1] = UsageList[i];
     3ff:	25 30 34 58 00                                      %04X.

00000404 <__c.2123>:

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     404:	3b 20 62 69 74 6d 61 70 3a 20 00                    ; bitmap: .

0000040f <__c.2125>:
     40f:	25 30 34 58 00                                      %04X.

00000414 <__c.2127>:
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     414:	0a 00                                               ..

00000416 <__c.2064>:
     416:	2b 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     +---------------
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     426:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     436:	2d 2d 2d 2d 2d 2b 0a 00                             -----+..

0000043e <__c.2066>:
     43e:	7c 20 48 49 44 20 72 65 70 6f 72 74 20 74 6f 20     | HID report to 
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     44e:	42 6c 75 65 66 72 75 69 74 20 76 69 61 20 73 65     Bluefruit via se
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     45e:	72 69 61 6c 20 7c 0a 00                             rial |..

00000466 <__c.2068>:
     466:	2b 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     +---------------
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     476:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------

					if (UsageListSize)
     486:	2d 2d 2d 2d 2d 2b 0a 7c 00                          -----+.|.

0000048f <__c.2078>:
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     48f:	20 00                                                .

00000491 <__c.2080>:
     491:	25 30 32 58 00                                      %02X.

00000496 <__c.2082>:
     496:	20 00                                                .

00000498 <__c.2073>:
     498:	7c 0a 2b 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     |.+-------------

						for (uint8_t i = 1; i < UsageListSize; i++)
						  UsageList[i - 1] = UsageList[i];
     4a8:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------

						UsageListSize--;
     4b8:	2d 2d 2d 2d 2d 2d 2d 2b 0a 0a 00                    -------+...

000004c3 <__c.4538>:
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4c3:	5b 43 5d 00                                         [C].

000004c7 <__c.4543>:
     4c7:	5b 44 5d 00                                         [D].

000004cb <__c.4548>:
     4cb:	5b 52 5d 00                                         [R].

000004cf <__c.4552>:
     4cf:	5b 53 5d 00                                         [S].

000004d3 <__c.4556>:
     4d3:	5b 57 5d 00                                         [W].

000004d7 <ProductString>:
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     4d7:	14 03 4d 00 6f 00 64 00 65 00 6c 00 4d 00 53 00     ..M.o.d.e.l.M.S.
     4e7:	53 00 4b 00 00 00                                   S.K...

000004ed <ManufacturerString>:
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     4ed:	1a 03 50 00 68 00 6f 00 73 00 70 00 68 00 6f 00     ..P.h.o.s.p.h.o.
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     4fd:	72 00 47 00 6c 00 6f 00 77 00 00 00                 r.G.l.o.w...

00000509 <LanguageString>:

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     509:	04 03 09 04                                         ....

0000050d <ConfigurationDescriptor>:
     50d:	09 02 74 00 04 01 00 a0 32 09 04 00 00 01 03 01     ..t.....2.......

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     51d:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     52d:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     53d:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     54d:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     55d:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     56d:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
     57d:	03 20 00 01                                         . ..

00000581 <DeviceDescriptor>:
     581:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     591:	00 01                                               ..

00000593 <ConsoleReport>:
     593:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     5a3:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

000005b3 <ExtrakeyReport>:
     5b3:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     5c3:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     5d3:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     5e3:	10 95 01 81 00 c0                                   ......

000005e9 <MouseReport>:
     5e9:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     5f9:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     609:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     619:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
					  ParserData->TotalReportItems++;
     629:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000636 <KeyboardReport>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     636:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     646:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     656:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     666:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

00000675 <__c.1908>:
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     675:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     685:	20 00                                                .

00000687 <__c.1911>:
     687:	25 30 32 58 20 00                                   %02X .

0000068d <__c.1916>:
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     68d:	0a 00                                               ..

0000068f <__c.2262>:
     68f:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     69f:	3a 20 00                                            : .

000006a2 <__c.2264>:
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6a2:	25 30 32 58 00                                      %02X.

000006a7 <__c.2266>:
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6a7:	0a 00                                               ..

000006a9 <__c.2318>:

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6a9:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     6b9:	2e 2e 2e 20 00                                      ... .

000006be <__c.2324>:

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6be:	64 6f 6e 65 2e 0a 00                                done...

000006c5 <__c.1961>:
     6c5:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     6d5:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     6e5:	20 5b 00                                             [.

000006e8 <__c.1963>:
     6e8:	25 30 32 58 00                                      %02X.

000006ed <__c.1965>:
     6ed:	7c 00                                               |.

000006ef <__c.1967>:
     6ef:	25 64 00                                            %d.

000006f2 <__c.1969>:
     6f2:	20 00                                                .

000006f4 <__c.1971>:
     6f4:	25 64 00                                            %d.

000006f7 <__c.1973>:
     6f7:	20 00                                                .

000006f9 <__c.1975>:
     6f9:	25 64 00                                            %d.

000006fc <__c.1977>:
     6fc:	20 00                                                .

000006fe <__c.1979>:
     6fe:	25 64 00                                            %d.

00000701 <__c.1981>:
     701:	5d 28 00                                            ](.

00000704 <__c.1983>:
     704:	25 75 00                                            %u.

00000707 <__c.1985>:
     707:	2f 00                                               /.

00000709 <__c.1987>:
     709:	25 75 00                                            %u.

0000070c <__c.1989>:
     70c:	29 0a 00                                            )..

0000070f <__c.2535>:
     70f:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

0000071a <__c.2541>:
     71a:	43 3e 20 00                                         C> .

0000071e <__c.2544>:
     71e:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     72e:	00                                                  .

0000072f <__c.2547>:
     72f:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

0000073c <__c.2549>:
     73c:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000748 <__c.2552>:
     748:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000755 <__c.2554>:
     755:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000763 <__c.2557>:
     763:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000772 <__c.2559>:
     772:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000782 <__c.2562>:
     782:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

0000078e <__c.2564>:
     78e:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

0000079b <__c.2567>:
     79b:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

000007aa <__c.2569>:
     7aa:	44 45 53 43 3a 20 43 6f 6c 6f 73 73 75 73 20 4d     DESC: Colossus M
     7ba:	6f 64 65 6c 20 4d 20 43 6f 6e 74 72 6f 6c 6c 65     odel M Controlle
     7ca:	72 0a 00                                            r..

000007cd <__c.2571>:
     7cd:	56 49 44 3a 20 30 78 46 45 45 44 28 50 68 6f 73     VID: 0xFEED(Phos
     7dd:	70 68 6f 72 47 6c 6f 77 29 20 50 49 44 3a 20 30     phorGlow) PID: 0
     7ed:	78 36 30 36 30 28 4d 6f 64 65 6c 4d 53 53 4b 29     x6060(ModelMSSK)
     7fd:	20 56 45 52 3a 20 30 78 30 30 30 31 0a 00            VER: 0x0001..

0000080b <__c.2573>:
     80b:	42 55 49 4c 44 3a 20 39 66 65 35 66 66 38 2d 64     BUILD: 9fe5ff8-d
     81b:	69 72 74 79 20 28 32 31 3a 31 38 3a 33 31 20 4d     irty (21:18:31 M
     82b:	61 79 20 31 36 20 32 30 31 36 29 0a 00              ay 16 2016)..

00000838 <__c.2575>:
     838:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     848:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     858:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     868:	45 20 43 4f 4d 4d 41 4e 44 20 38 31 39 32 0a 00     E COMMAND 8192..

00000878 <__c.2577>:
     878:	47 43 43 3a 20 34 2e 37 2e 31 20 41 56 52 2d 4c     GCC: 4.7.1 AVR-L
     888:	49 42 43 3a 20 31 2e 38 2e 30 20 41 56 52 5f 41     IBC: 1.8.0 AVR_A
     898:	52 43 48 3a 20 61 76 72 35 31 0a 00                 RCH: avr51..

000008a4 <__c.2580>:
     8a4:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

000008b2 <__c.2582>:
     8b2:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     8c2:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

000008cc <__c.2584>:
     8cc:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     8dc:	6c 3a 20 25 58 0a 00                                l: %X..

000008e3 <__c.2586>:
     8e3:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     8f3:	58 0a 00                                            X..

000008f6 <__c.2588>:
     8f6:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     906:	25 30 34 6c 58 0a 00                                %04lX..

0000090d <__c.2597>:
     90d:	3f 00                                               ?.

0000090f <__c.2439>:
     90f:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

0000091f <__c.2441>:
     91f:	25 75 00                                            %u.

00000922 <__c.2443>:
     922:	0a 00                                               ..

00000924 <__c.2446>:
     924:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     934:	3a 20 00                                            : .

00000937 <__c.2448>:
     937:	25 30 32 58 00                                      %02X.

0000093c <__c.2450>:
     93c:	0a 00                                               ..

0000093e <__c.2452>:
     93e:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000948 <__c.2454>:
     948:	25 75 00                                            %u.

0000094b <__c.2456>:
     94b:	0a 00                                               ..

0000094d <__c.2458>:
     94d:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000957 <__c.2460>:
     957:	25 75 00                                            %u.

0000095a <__c.2462>:
     95a:	0a 00                                               ..

0000095c <__c.2464>:
     95c:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000968 <__c.2466>:
     968:	25 75 00                                            %u.

0000096b <__c.2468>:
     96b:	0a 00                                               ..

0000096d <__c.2470>:
     96d:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000976 <__c.2472>:
     976:	25 75 00                                            %u.

00000979 <__c.2474>:
     979:	0a 00                                               ..

0000097b <__c.2477>:
     97b:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     98b:	77 3a 20 00                                         w: .

0000098f <__c.2479>:
     98f:	25 30 32 58 00                                      %02X.

00000994 <__c.2481>:
     994:	0a 00                                               ..

00000996 <__c.2483>:
     996:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     9a6:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

000009af <__c.2485>:
     9af:	25 75 00                                            %u.

000009b2 <__c.2487>:
     9b2:	0a 00                                               ..

000009b4 <__c.2489>:
     9b4:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     9c4:	74 72 6f 6c 3a 20 00                                trol: .

000009cb <__c.2491>:
     9cb:	25 75 00                                            %u.

000009ce <__c.2493>:
     9ce:	0a 00                                               ..

000009d0 <__c.2495>:
     9d0:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     9e0:	20 00                                                .

000009e2 <__c.2497>:
     9e2:	25 75 00                                            %u.

000009e5 <__c.2499>:
     9e5:	0a 00                                               ..

000009e7 <__c.2501>:
     9e7:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     9f7:	20 00                                                .

000009f9 <__c.2503>:
     9f9:	25 75 00                                            %u.

000009fc <__c.2505>:
     9fc:	0a 00                                               ..

000009fe <__c.2507>:
     9fe:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000a08 <__c.2509>:
     a08:	25 75 00                                            %u.

00000a0b <__c.2511>:
     a0b:	0a 00                                               ..

00000a0d <__c.2513>:
     a0d:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     a1d:	20 00                                                .

00000a1f <__c.2515>:
     a1f:	25 75 00                                            %u.

00000a22 <__c.2517>:
     a22:	0a 00                                               ..

00000a24 <__c.2519>:
     a24:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     a34:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000a40 <__c.2521>:
     a40:	25 75 00                                            %u.

00000a43 <__c.2523>:
     a43:	0a 00                                               ..

00000a45 <__c.2525>:
     a45:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000a4d <__c.2527>:
     a4d:	25 75 00                                            %u.

00000a50 <__c.2529>:
     a50:	0a 00                                               ..

00000a52 <__c.2434>:
     a52:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     a62:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     a72:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     a82:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     a92:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     aa2:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     ab2:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     ac2:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     ad2:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     ae2:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 00              r.e:.eeprom..

00000aef <__c.2602>:
     aef:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     aff:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     b0f:	73 65 6b 65 79 0a 00                                sekey..

00000b16 <__c.2762>:
     b16:	4c 25 64 0a 00                                      L%d..

00000b1b <__c.2618>:
     b1b:	43 3e 20 00                                         C> .

00000b1f <__c.2613>:
     b1f:	4d 3e 20 00                                         M> .

00000b23 <__c.2616>:
     b23:	3f 00                                               ?.

00000b25 <__c.2711>:
     b25:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     b35:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     b45:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     b55:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     b65:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     b75:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     b85:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     b95:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     ba5:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     bb5:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     bc5:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     bd5:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     be5:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     bf5:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     c05:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     c15:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000c20 <__c.2713>:
     c20:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     c30:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     c40:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     c50:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     c60:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000c6e <__c.2723>:
     c6e:	43 3e 20 00                                         C> .

00000c72 <__c.2737>:
     c72:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000c7f <__c.2740>:
     c7f:	3f 00                                               ?.

00000c81 <__c.2742>:
     c81:	4d 25 64 3e 20 00                                   M%d> .

00000c87 <__c.2744>:
     c87:	4d 3e 00                                            M>.

00000c8a <__c.2624>:
     c8a:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

00000c98 <__c.2626>:
     c98:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     ca8:	20 00                                                .

00000caa <__c.2628>:
     caa:	25 75 00                                            %u.

00000cad <__c.2630>:
     cad:	0a 00                                               ..

00000caf <__c.2632>:
     caf:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     cbf:	20 00                                                .

00000cc1 <__c.2634>:
     cc1:	25 75 00                                            %u.

00000cc4 <__c.2636>:
     cc4:	0a 00                                               ..

00000cc6 <__c.2638>:
     cc6:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000cd5 <__c.2640>:
     cd5:	25 75 00                                            %u.

00000cd8 <__c.2642>:
     cd8:	0a 00                                               ..

00000cda <__c.2644>:
     cda:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     cea:	00                                                  .

00000ceb <__c.2646>:
     ceb:	25 75 00                                            %u.

00000cee <__c.2648>:
     cee:	0a 00                                               ..

00000cf0 <__c.2650>:
     cf0:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     d00:	65 64 3a 20 00                                      ed: .

00000d05 <__c.2652>:
     d05:	25 75 00                                            %u.

00000d08 <__c.2654>:
     d08:	0a 00                                               ..

00000d0a <__c.2656>:
     d0a:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     d1a:	5f 6d 61 78 3a 20 00                                _max: .

00000d21 <__c.2658>:
     d21:	25 75 00                                            %u.

00000d24 <__c.2660>:
     d24:	0a 00                                               ..

00000d26 <__c.2667>:
     d26:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000d35 <__c.2671>:
     d35:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     d45:	0a 00                                               ..

00000d47 <__c.2674>:
     d47:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     d57:	64 0a 00                                            d..

00000d5a <__c.2677>:
     d5a:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     d6a:	20 25 64 0a 00                                       %d..

00000d6f <__c.2680>:
     d6f:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     d7f:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000d88 <__c.2683>:
     d88:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     d98:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000da3 <__c.2690>:
     da3:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000db2 <__c.2694>:
     db2:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     dc2:	0a 00                                               ..

00000dc4 <__c.2697>:
     dc4:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     dd4:	64 0a 00                                            d..

00000dd7 <__c.2700>:
     dd7:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     de7:	20 25 64 0a 00                                       %d..

00000dec <__c.2703>:
     dec:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     dfc:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000e05 <__c.2706>:
     e05:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     e15:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000e20 <__ctors_end>:
     e20:	11 24       	eor	r1, r1
     e22:	1f be       	out	0x3f, r1	; 63
     e24:	cf ef       	ldi	r28, 0xFF	; 255
     e26:	d0 e2       	ldi	r29, 0x20	; 32
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	cd bf       	out	0x3d, r28	; 61

00000e2c <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     e2c:	04 b6       	in	r0, 0x34	; 52
     e2e:	03 fe       	sbrs	r0, 3
     e30:	24 c0       	rjmp	.+72     	; 0xe7a <__do_copy_data>
     e32:	80 91 03 03 	lds	r24, 0x0303
     e36:	90 91 04 03 	lds	r25, 0x0304
     e3a:	a0 91 05 03 	lds	r26, 0x0305
     e3e:	b0 91 06 03 	lds	r27, 0x0306
     e42:	87 30       	cpi	r24, 0x07	; 7
     e44:	90 4b       	sbci	r25, 0xB0	; 176
     e46:	a7 40       	sbci	r26, 0x07	; 7
     e48:	b0 4b       	sbci	r27, 0xB0	; 176
     e4a:	b9 f4       	brne	.+46     	; 0xe7a <__do_copy_data>
        reset_key = 0;
     e4c:	10 92 03 03 	sts	0x0303, r1
     e50:	10 92 04 03 	sts	0x0304, r1
     e54:	10 92 05 03 	sts	0x0305, r1
     e58:	10 92 06 03 	sts	0x0306, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     e5c:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     e5e:	84 b7       	in	r24, 0x34	; 52
     e60:	87 7f       	andi	r24, 0xF7	; 247
     e62:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     e64:	88 e1       	ldi	r24, 0x18	; 24
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	80 93 60 00 	sts	0x0060, r24
     e6e:	10 92 60 00 	sts	0x0060, r1
     e72:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     e74:	e0 e0       	ldi	r30, 0x00	; 0
     e76:	f0 ef       	ldi	r31, 0xF0	; 240
     e78:	09 95       	icall

00000e7a <__do_copy_data>:
     e7a:	11 e0       	ldi	r17, 0x01	; 1
     e7c:	a0 e0       	ldi	r26, 0x00	; 0
     e7e:	b1 e0       	ldi	r27, 0x01	; 1
     e80:	ee e8       	ldi	r30, 0x8E	; 142
     e82:	fb e5       	ldi	r31, 0x5B	; 91
     e84:	00 e0       	ldi	r16, 0x00	; 0
     e86:	0b bf       	out	0x3b, r16	; 59
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <__do_copy_data+0x14>
     e8a:	07 90       	elpm	r0, Z+
     e8c:	0d 92       	st	X+, r0
     e8e:	ac 33       	cpi	r26, 0x3C	; 60
     e90:	b1 07       	cpc	r27, r17
     e92:	d9 f7       	brne	.-10     	; 0xe8a <__do_copy_data+0x10>

00000e94 <__do_clear_bss>:
     e94:	13 e0       	ldi	r17, 0x03	; 3
     e96:	ac e3       	ldi	r26, 0x3C	; 60
     e98:	b1 e0       	ldi	r27, 0x01	; 1
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <.do_clear_bss_start>

00000e9c <.do_clear_bss_loop>:
     e9c:	1d 92       	st	X+, r1

00000e9e <.do_clear_bss_start>:
     e9e:	a3 30       	cpi	r26, 0x03	; 3
     ea0:	b1 07       	cpc	r27, r17
     ea2:	e1 f7       	brne	.-8      	; 0xe9c <.do_clear_bss_loop>
     ea4:	0e 94 b2 0a 	call	0x1564	; 0x1564 <main>
     ea8:	0c 94 c5 2d 	jmp	0x5b8a	; 0x5b8a <_exit>

00000eac <__bad_interrupt>:
     eac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000eb0 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     eb0:	ff 93       	push	r31
	push	ZL
     eb2:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     eb4:	e0 91 3c 01 	lds	r30, 0x013C
	lds	ZH, xfunc_out+1	;/
     eb8:	f0 91 3d 01 	lds	r31, 0x013D
	sbiw	ZL, 0		;Skip if null
     ebc:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     ebe:	09 f0       	breq	.+2      	; 0xec2 <xputc+0x12>
	icall
     ec0:	09 95       	icall
2:	pop	ZL
     ec2:	ef 91       	pop	r30
	pop	ZH
     ec4:	ff 91       	pop	r31
	ret
     ec6:	08 95       	ret

00000ec8 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     ec8:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     eca:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     ecc:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     ece:	11 f0       	breq	.+4      	; 0xed4 <xputs+0xc>
	rcall	xputc
     ed0:	ef df       	rcall	.-34     	; 0xeb0 <xputc>
	rjmp	1b
     ed2:	fb cf       	rjmp	.-10     	; 0xeca <xputs+0x2>
2:	ret
     ed4:	08 95       	ret

00000ed6 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     ed6:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     ed8:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     eda:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     edc:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     ede:	0c c0       	rjmp	.+24     	; 0xef8 <xitoa+0x22>
	neg	r20		;
     ee0:	41 95       	neg	r20
	sbrs	r25, 7		;
     ee2:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     ee4:	09 c0       	rjmp	.+18     	; 0xef8 <xitoa+0x22>
	ldi	r30, '-'	;
     ee6:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     ee8:	60 95       	com	r22
	com	r23		;
     eea:	70 95       	com	r23
	com	r24		;
     eec:	80 95       	com	r24
	com	r25		;
     eee:	90 95       	com	r25
	adc	r22, r1		;
     ef0:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     ef2:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     ef4:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     ef6:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     ef8:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <xitoa+0x2a>
	neg	r18		;
     efc:	21 95       	neg	r18
	ldi	r19, '0'	;/
     efe:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     f00:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     f02:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     f04:	66 0f       	add	r22, r22
	rol	r23		;
     f06:	77 1f       	adc	r23, r23
	rol	r24		;
     f08:	88 1f       	adc	r24, r24
	rol	r25		;
     f0a:	99 1f       	adc	r25, r25
	rol	r26		;
     f0c:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     f0e:	a4 17       	cp	r26, r20
	brcs	3f		;
     f10:	10 f0       	brcs	.+4      	; 0xf16 <xitoa+0x40>
	sub	r26, r20	;
     f12:	a4 1b       	sub	r26, r20
	inc	r22		;
     f14:	63 95       	inc	r22
3:	dec	r21		;
     f16:	5a 95       	dec	r21
	brne	2b		;/
     f18:	a9 f7       	brne	.-22     	; 0xf04 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     f1a:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     f1c:	08 f0       	brcs	.+2      	; 0xf20 <xitoa+0x4a>
	subi	r26, -7		;
     f1e:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     f20:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     f22:	af 93       	push	r26
	inc	r31		;/
     f24:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     f26:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     f28:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     f2a:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     f2c:	91 05       	cpc	r25, r1
	brne	1b		;/
     f2e:	41 f7       	brne	.-48     	; 0xf00 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     f30:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     f32:	11 f4       	brne	.+4      	; 0xf38 <xitoa+0x62>
	push	r30		;
     f34:	ef 93       	push	r30
	inc	r31		;/
     f36:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     f38:	f2 17       	cp	r31, r18
	brcc	6f		;
     f3a:	18 f4       	brcc	.+6      	; 0xf42 <xitoa+0x6c>
	push	r19		;
     f3c:	3f 93       	push	r19
	inc	r31		;
     f3e:	f3 95       	inc	r31
	rjmp	5b		;/
     f40:	fb cf       	rjmp	.-10     	; 0xf38 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     f42:	8f 91       	pop	r24
	rcall	xputc		;
     f44:	b5 df       	rcall	.-150    	; 0xeb0 <xputc>
	dec	r31		;
     f46:	fa 95       	dec	r31
	brne	6b		;/
     f48:	e1 f7       	brne	.-8      	; 0xf42 <xitoa+0x6c>

	ret
     f4a:	08 95       	ret

00000f4c <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     f4c:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     f4e:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     f50:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     f52:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     f54:	21 f0       	breq	.+8      	; 0xf5e <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     f56:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     f58:	19 f0       	breq	.+6      	; 0xf60 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     f5a:	aa df       	rcall	.-172    	; 0xeb0 <xputc>
	rjmp	0b		;/
     f5c:	f9 cf       	rjmp	.-14     	; 0xf50 <xvprintf+0x4>
90:	ret
     f5e:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     f60:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     f62:	e8 94       	clt
	_LPMI	r21		;Get flags
     f64:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     f66:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     f68:	c1 f3       	breq	.-16     	; 0xf5a <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     f6a:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     f6c:	11 f4       	brne	.+4      	; 0xf72 <xvprintf+0x26>
	set			;/
     f6e:	68 94       	set
22:	_LPMI	r21		;Get width
     f70:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     f72:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     f74:	48 f4       	brcc	.+18     	; 0xf88 <xvprintf+0x3c>
	subi	r21, '0'	;
     f76:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     f78:	90 f3       	brcs	.-28     	; 0xf5e <xvprintf+0x12>
	lsl	r18		;
     f7a:	22 0f       	add	r18, r18
	mov	r0, r18		;
     f7c:	02 2e       	mov	r0, r18
	lsl	r18		;
     f7e:	22 0f       	add	r18, r18
	lsl	r18		;
     f80:	22 0f       	add	r18, r18
	add	r18, r0		;
     f82:	20 0d       	add	r18, r0
	add	r18, r21	;
     f84:	25 0f       	add	r18, r21
	rjmp	22b		;/
     f86:	f4 cf       	rjmp	.-24     	; 0xf70 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     f88:	0e f4       	brtc	.+2      	; 0xf8c <xvprintf+0x40>
	neg	r18		;
     f8a:	21 95       	neg	r18
25:	ld	r24, Y+		;
     f8c:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     f8e:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     f90:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     f92:	19 f3       	breq	.-58     	; 0xf5a <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     f94:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     f96:	29 f1       	breq	.+74     	; 0xfe2 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     f98:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     f9a:	59 f1       	breq	.+86     	; 0xff2 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     f9c:	bc 01       	movw	r22, r24
	clr	r24		;
     f9e:	88 27       	eor	r24, r24
	clr	r25		;
     fa0:	99 27       	eor	r25, r25
	clt			;/
     fa2:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     fa4:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     fa6:	21 f4       	brne	.+8      	; 0xfb0 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     fa8:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     faa:	99 91       	ld	r25, Y+
	set			;
     fac:	68 94       	set
	_LPMI	r21		;/
     fae:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     fb0:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <xvprintf+0x76>
	ldi	r20, -10	;
     fb4:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     fb6:	7e f0       	brts	.+30     	; 0xfd6 <xvprintf+0x8a>
	sbrs	r23, 7		;
     fb8:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     fba:	0d c0       	rjmp	.+26     	; 0xfd6 <xvprintf+0x8a>
	ldi	r24, -1		;
     fbc:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     fbe:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     fc0:	0a c0       	rjmp	.+20     	; 0xfd6 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     fc2:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     fc4:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     fc6:	39 f0       	breq	.+14     	; 0xfd6 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     fc8:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     fca:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     fcc:	21 f0       	breq	.+8      	; 0xfd6 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     fce:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     fd0:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <xvprintf+0x8a>
	ret			;abort
     fd4:	08 95       	ret
40:	push	ZH		;Output the value
     fd6:	ff 93       	push	r31
	push	ZL		;
     fd8:	ef 93       	push	r30
	rcall	xitoa		;
     fda:	7d df       	rcall	.-262    	; 0xed6 <xitoa>
42:	pop	ZL		;
     fdc:	ef 91       	pop	r30
	pop	ZH		;
     fde:	ff 91       	pop	r31
	rjmp	0b		;/
     fe0:	b7 cf       	rjmp	.-146    	; 0xf50 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     fe2:	ff 93       	push	r31
	push	ZL
     fe4:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     fe6:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     fe8:	81 91       	ld	r24, Z+
	cpi	r24, 0
     fea:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     fec:	b9 f3       	breq	.-18     	; 0xfdc <xvprintf+0x90>
	rcall	xputc
     fee:	60 df       	rcall	.-320    	; 0xeb0 <xputc>
	rjmp	51b
     ff0:	fb cf       	rjmp	.-10     	; 0xfe8 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     ff2:	ff 93       	push	r31
	push	ZL
     ff4:	ef 93       	push	r30
	rcall	xputs
     ff6:	68 df       	rcall	.-304    	; 0xec8 <xputs>
	rjmp	42b
     ff8:	f1 cf       	rjmp	.-30     	; 0xfdc <xvprintf+0x90>

00000ffa <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     ffa:	df 93       	push	r29
	push	YL
     ffc:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     ffe:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    1000:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
    1002:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
    1004:	a3 df       	rcall	.-186    	; 0xf4c <xvprintf>
	pop	YL
    1006:	cf 91       	pop	r28
	pop	YH
    1008:	df 91       	pop	r29
	ret
    100a:	08 95       	ret

0000100c <action_function>:
    BTPAIR, // LCTRL + RCTRL + PGUP -> BT Pair
    PAUS_BOOT, // Caps Lock + Right Shift + Pause = DFU
};

void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    100c:	ef 92       	push	r14
    100e:	ff 92       	push	r15
    1010:	cf 93       	push	r28
    1012:	7c 01       	movw	r14, r24
    1014:	c6 2f       	mov	r28, r22
    if (record->event.pressed) dprint("P"); else dprint("R");
    1016:	fc 01       	movw	r30, r24
    1018:	92 81       	ldd	r25, Z+2	; 0x02
    101a:	80 91 e4 02 	lds	r24, 0x02E4
    101e:	99 23       	and	r25, r25
    1020:	29 f0       	breq	.+10     	; 0x102c <action_function+0x20>
    1022:	80 ff       	sbrs	r24, 0
    1024:	09 c0       	rjmp	.+18     	; 0x1038 <action_function+0x2c>
    1026:	84 e2       	ldi	r24, 0x24	; 36
    1028:	93 e0       	ldi	r25, 0x03	; 3
    102a:	04 c0       	rjmp	.+8      	; 0x1034 <action_function+0x28>
    102c:	80 ff       	sbrs	r24, 0
    102e:	04 c0       	rjmp	.+8      	; 0x1038 <action_function+0x2c>
    1030:	86 e2       	ldi	r24, 0x26	; 38
    1032:	93 e0       	ldi	r25, 0x03	; 3
    1034:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    if (record->tap.interrupted) dprint("i");
    1038:	f7 01       	movw	r30, r14
    103a:	85 81       	ldd	r24, Z+5	; 0x05
    103c:	80 ff       	sbrs	r24, 0
    103e:	08 c0       	rjmp	.+16     	; 0x1050 <action_function+0x44>
    1040:	80 91 e4 02 	lds	r24, 0x02E4
    1044:	80 ff       	sbrs	r24, 0
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <action_function+0x44>
    1048:	88 e2       	ldi	r24, 0x28	; 40
    104a:	93 e0       	ldi	r25, 0x03	; 3
    104c:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
#   define MODS_RCTRL_MASK   (MOD_BIT(KC_RCTRL))
    static uint8_t rctrl_mod;    
#   define MODS_MASK_1   (MOD_BIT(KC_RSHIFT))
    static uint8_t r_shift_mod;
    
    switch (id) {
    1050:	c1 30       	cpi	r28, 0x01	; 1
    1052:	e9 f0       	breq	.+58     	; 0x108e <action_function+0x82>
    1054:	38 f0       	brcs	.+14     	; 0x1064 <action_function+0x58>
    1056:	c2 30       	cpi	r28, 0x02	; 2
    1058:	09 f4       	brne	.+2      	; 0x105c <action_function+0x50>
    105a:	42 c0       	rjmp	.+132    	; 0x10e0 <action_function+0xd4>
    105c:	c3 30       	cpi	r28, 0x03	; 3
    105e:	09 f0       	breq	.+2      	; 0x1062 <action_function+0x56>
    1060:	84 c0       	rjmp	.+264    	; 0x116a <action_function+0x15e>
    1062:	66 c0       	rjmp	.+204    	; 0x1130 <action_function+0x124>
        // Shift + Scroll Lock -> Number Pad Layer On
        case SHIFT_NUM:
            shift_mod = get_mods()&MODS_SHIFT_MASK;
    1064:	0e 94 09 20 	call	0x4012	; 0x4012 <get_mods>
    1068:	82 72       	andi	r24, 0x22	; 34
    106a:	99 27       	eor	r25, r25
    106c:	80 93 3e 01 	sts	0x013E, r24
            if (record->event.pressed) {
    1070:	f7 01       	movw	r30, r14
    1072:	32 81       	ldd	r19, Z+2	; 0x02
    1074:	33 23       	and	r19, r19
    1076:	41 f0       	breq	.+16     	; 0x1088 <action_function+0x7c>
                if (shift_mod) {
    1078:	81 11       	cpse	r24, r1
    107a:	15 c0       	rjmp	.+42     	; 0x10a6 <action_function+0x9a>
		    layer_invert(1); // toggle number pad layer
		    DDR_NUMLAYER ^= (1<<BIT_NUMLAYER);	    
                } else {
                    del_mods(shift_mod); // remove shift
    107c:	0e 94 12 20 	call	0x4024	; 0x4024 <del_mods>
                    layer_invert(2); // toggle number pad layer
    1080:	82 e0       	ldi	r24, 0x02	; 2
    1082:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <layer_invert>
    1086:	1f c0       	rjmp	.+62     	; 0x10c6 <action_function+0xba>
		    //add_key(KC_SLCK);
                    //send_keyboard_report(); // send Scroll Lock
                    add_mods(shift_mod); // return shift but not sent
                }
            } else {
                if (shift_mod) {
    1088:	81 11       	cpse	r24, r1
    108a:	6f c0       	rjmp	.+222    	; 0x116a <action_function+0x15e>
    108c:	69 c0       	rjmp	.+210    	; 0x1160 <action_function+0x154>
            }
            break;
	    
	// Shift + Scroll Lock -> Number Pad Layer Off
        case SHIFT_NUM1:
            shift_mod = get_mods()&MODS_SHIFT_MASK;
    108e:	0e 94 09 20 	call	0x4012	; 0x4012 <get_mods>
    1092:	82 72       	andi	r24, 0x22	; 34
    1094:	99 27       	eor	r25, r25
    1096:	80 93 3e 01 	sts	0x013E, r24
            if (record->event.pressed) {
    109a:	f7 01       	movw	r30, r14
    109c:	32 81       	ldd	r19, Z+2	; 0x02
    109e:	33 23       	and	r19, r19
    10a0:	d1 f0       	breq	.+52     	; 0x10d6 <action_function+0xca>
                if (shift_mod) {
    10a2:	88 23       	and	r24, r24
    10a4:	41 f0       	breq	.+16     	; 0x10b6 <action_function+0xaa>
		    layer_invert(1); // toggle number pad layer
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <layer_invert>
		    DDR_NUMLAYER ^= (1<<BIT_NUMLAYER);
    10ac:	84 b1       	in	r24, 0x04	; 4
    10ae:	98 e0       	ldi	r25, 0x08	; 8
    10b0:	89 27       	eor	r24, r25
    10b2:	84 b9       	out	0x04, r24	; 4
    10b4:	5a c0       	rjmp	.+180    	; 0x116a <action_function+0x15e>
                } else {
                    del_mods(shift_mod); // remove shift
    10b6:	0e 94 12 20 	call	0x4024	; 0x4024 <del_mods>
                    add_key(KC_NLCK);
    10ba:	83 e5       	ldi	r24, 0x53	; 83
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <add_key>
                    send_keyboard_report(); // send Num Lock (toggles number pad in OS between numbers and cursors)
    10c2:	0e 94 48 20 	call	0x4090	; 0x4090 <send_keyboard_report>
                    add_mods(shift_mod); // return shift but not sent
    10c6:	80 91 3e 01 	lds	r24, 0x013E
    10ca:	90 e0       	ldi	r25, 0x00	; 0
                    send_keyboard_report();
                }
            }
            break;	    
    }
};
    10cc:	cf 91       	pop	r28
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
		    DDR_NUMLAYER ^= (1<<BIT_NUMLAYER);
                } else {
                    del_mods(shift_mod); // remove shift
                    add_key(KC_NLCK);
                    send_keyboard_report(); // send Num Lock (toggles number pad in OS between numbers and cursors)
                    add_mods(shift_mod); // return shift but not sent
    10d2:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <add_mods>
                }
            } else {
                if (shift_mod) {
    10d6:	81 11       	cpse	r24, r1
    10d8:	48 c0       	rjmp	.+144    	; 0x116a <action_function+0x15e>
                } else {
                    del_key(KC_NLCK);
    10da:	83 e5       	ldi	r24, 0x53	; 83
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	3e c0       	rjmp	.+124    	; 0x115c <action_function+0x150>
            }
            break;

	// RCtrl + Page Up -> BT Pair
        case BTPAIR:
            rctrl_mod = get_mods()&MODS_RCTRL_MASK;
    10e0:	0e 94 09 20 	call	0x4012	; 0x4012 <get_mods>
    10e4:	80 71       	andi	r24, 0x10	; 16
    10e6:	99 27       	eor	r25, r25
    10e8:	80 93 3f 01 	sts	0x013F, r24
            if (record->event.pressed) {
    10ec:	f7 01       	movw	r30, r14
    10ee:	32 81       	ldd	r19, Z+2	; 0x02
    10f0:	33 23       	and	r19, r19
    10f2:	d9 f0       	breq	.+54     	; 0x112a <action_function+0x11e>
                if (rctrl_mod) {
    10f4:	88 23       	and	r24, r24
    10f6:	71 f0       	breq	.+28     	; 0x1114 <action_function+0x108>
		      // 3V to pair pin on bluefruit for 5 seconds.
		      DDR_BF_PAIRB |= (1<<BIT_BF_PAIRB);
    10f8:	56 9a       	sbi	0x0a, 6	; 10
		      PORT_BF_PAIRB |= (1<<BIT_BF_PAIRB);
    10fa:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10fc:	ff ef       	ldi	r31, 0xFF	; 255
    10fe:	21 e1       	ldi	r18, 0x11	; 17
    1100:	8a e7       	ldi	r24, 0x7A	; 122
    1102:	f1 50       	subi	r31, 0x01	; 1
    1104:	20 40       	sbci	r18, 0x00	; 0
    1106:	80 40       	sbci	r24, 0x00	; 0
    1108:	e1 f7       	brne	.-8      	; 0x1102 <action_function+0xf6>
    110a:	00 c0       	rjmp	.+0      	; 0x110c <action_function+0x100>
    110c:	00 00       	nop
		      _delay_ms(5000);
		      DDR_BF_PAIRB &= ~(1<<BIT_BF_PAIRB);
    110e:	56 98       	cbi	0x0a, 6	; 10
		      PORT_BF_PAIRB &= ~(1<<BIT_BF_PAIRB);
    1110:	5e 98       	cbi	0x0b, 6	; 11
    1112:	2b c0       	rjmp	.+86     	; 0x116a <action_function+0x15e>
                } else {
                    del_mods(rctrl_mod); // remove shift
    1114:	0e 94 12 20 	call	0x4024	; 0x4024 <del_mods>
                    add_key(KC_PGUP);
    1118:	8b e4       	ldi	r24, 0x4B	; 75
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <add_key>
                    send_keyboard_report(); // send Page Up
    1120:	0e 94 48 20 	call	0x4090	; 0x4090 <send_keyboard_report>
                    add_mods(rctrl_mod); // return shift but not sent
    1124:	80 91 3f 01 	lds	r24, 0x013F
    1128:	d0 cf       	rjmp	.-96     	; 0x10ca <action_function+0xbe>
                }
            } else {
                if (rctrl_mod) {
		    del_key(KC_PGUP);
    112a:	8b e4       	ldi	r24, 0x4B	; 75
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	16 c0       	rjmp	.+44     	; 0x115c <action_function+0x150>
            }
            break;
	    
        // Caps Lock + Right Shift + Pause = DFU
        case PAUS_BOOT:
            r_shift_mod = get_mods()&MODS_MASK_1;
    1130:	0e 94 09 20 	call	0x4012	; 0x4012 <get_mods>
    1134:	80 72       	andi	r24, 0x20	; 32
    1136:	99 27       	eor	r25, r25
    1138:	98 2f       	mov	r25, r24
    113a:	80 93 40 01 	sts	0x0140, r24
            if (record->event.pressed) {
    113e:	f7 01       	movw	r30, r14
    1140:	82 81       	ldd	r24, Z+2	; 0x02
    1142:	88 23       	and	r24, r24
    1144:	39 f0       	breq	.+14     	; 0x1154 <action_function+0x148>
                if (r_shift_mod) {
    1146:	99 23       	and	r25, r25
    1148:	81 f0       	breq	.+32     	; 0x116a <action_function+0x15e>
                    send_keyboard_report();
                }
            }
            break;	    
    }
};
    114a:	cf 91       	pop	r28
    114c:	ff 90       	pop	r15
    114e:	ef 90       	pop	r14
        // Caps Lock + Right Shift + Pause = DFU
        case PAUS_BOOT:
            r_shift_mod = get_mods()&MODS_MASK_1;
            if (record->event.pressed) {
                if (r_shift_mod) {
		    bootloader_jump(); // JUMP TO DFU BOOTLOADER
    1150:	0c 94 bf 22 	jmp	0x457e	; 0x457e <bootloader_jump>
                } else {
                }
            } else {
                if (r_shift_mod) {                   
    1154:	91 11       	cpse	r25, r1
    1156:	09 c0       	rjmp	.+18     	; 0x116a <action_function+0x15e>
                } else {
                    del_key(KC_PAUS);
    1158:	88 e4       	ldi	r24, 0x48	; 72
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <del_key>
                    send_keyboard_report();
                }
            }
            break;	    
    }
};
    1160:	cf 91       	pop	r28
    1162:	ff 90       	pop	r15
    1164:	ef 90       	pop	r14
                }
            } else {
                if (r_shift_mod) {                   
                } else {
                    del_key(KC_PAUS);
                    send_keyboard_report();
    1166:	0c 94 48 20 	jmp	0x4090	; 0x4090 <send_keyboard_report>
                }
            }
            break;	    
    }
};
    116a:	cf 91       	pop	r28
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	08 95       	ret

00001172 <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    1172:	e7 2f       	mov	r30, r23
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	98 e0       	ldi	r25, 0x08	; 8
    1178:	89 9f       	mul	r24, r25
    117a:	e0 0d       	add	r30, r0
    117c:	f1 1d       	adc	r31, r1
    117e:	11 24       	eor	r1, r1
    1180:	84 e0       	ldi	r24, 0x04	; 4
    1182:	ee 0f       	add	r30, r30
    1184:	ff 1f       	adc	r31, r31
    1186:	8a 95       	dec	r24
    1188:	e1 f7       	brne	.-8      	; 0x1182 <keymap_key_to_keycode+0x10>
    118a:	e6 0f       	add	r30, r22
    118c:	f1 1d       	adc	r31, r1
    118e:	ec 55       	subi	r30, 0x5C	; 92
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	84 91       	lpm	r24, Z
}
    1194:	08 95       	ret

00001196 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
    1196:	e8 2f       	mov	r30, r24
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	ee 0f       	add	r30, r30
    119c:	ff 1f       	adc	r31, r31
    119e:	e8 5e       	subi	r30, 0xE8	; 232
    11a0:	f0 40       	sbci	r31, 0x00	; 0
    11a2:	25 91       	lpm	r18, Z+
    11a4:	34 91       	lpm	r19, Z
}
    11a6:	c9 01       	movw	r24, r18
    11a8:	08 95       	ret

000011aa <unselect_rows>:
 */

static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRB  &= ~0b11100000;
    11aa:	84 b1       	in	r24, 0x04	; 4
    11ac:	8f 71       	andi	r24, 0x1F	; 31
    11ae:	84 b9       	out	0x04, r24	; 4
    PORTB &= ~0b11100000;
    11b0:	85 b1       	in	r24, 0x05	; 5
    11b2:	8f 71       	andi	r24, 0x1F	; 31
    11b4:	85 b9       	out	0x05, r24	; 5
    DDRE  &= ~0b00110000;
    11b6:	8d b1       	in	r24, 0x0d	; 13
    11b8:	8f 7c       	andi	r24, 0xCF	; 207
    11ba:	8d b9       	out	0x0d, r24	; 13
    PORTE &= ~0b00110000;
    11bc:	8e b1       	in	r24, 0x0e	; 14
    11be:	8f 7c       	andi	r24, 0xCF	; 207
    11c0:	8e b9       	out	0x0e, r24	; 14
    DDRD  &= ~0b00010011;
    11c2:	8a b1       	in	r24, 0x0a	; 10
    11c4:	8c 7e       	andi	r24, 0xEC	; 236
    11c6:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b00010011;
    11c8:	8b b1       	in	r24, 0x0b	; 11
    11ca:	8c 7e       	andi	r24, 0xEC	; 236
    11cc:	8b b9       	out	0x0b, r24	; 11
    11ce:	08 95       	ret

000011d0 <matrix_init>:
}

void matrix_init(void)
{
    // JTAG disable for PORT F. write JTD bit twice within four cycles.
    MCUCR |= (1<<JTD);
    11d0:	85 b7       	in	r24, 0x35	; 53
    11d2:	80 68       	ori	r24, 0x80	; 128
    11d4:	85 bf       	out	0x35, r24	; 53
    MCUCR |= (1<<JTD);
    11d6:	85 b7       	in	r24, 0x35	; 53
    11d8:	80 68       	ori	r24, 0x80	; 128
    11da:	85 bf       	out	0x35, r24	; 53

    // initialize row and col
    unselect_rows();
    11dc:	0e 94 d5 08 	call	0x11aa	; 0x11aa <unselect_rows>
 * pin: a4  a5  a6  a7  c7  c6  c5  c4  c3  c2  c1  c0  e1  e0  d7  d5	
 */
 static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRA  &= ~(1<<4 | 1<<5 | 1<<6 | 1<<7);
    11e0:	81 b1       	in	r24, 0x01	; 1
    11e2:	8f 70       	andi	r24, 0x0F	; 15
    11e4:	81 b9       	out	0x01, r24	; 1
    PORTA |=  (1<<4 | 1<<5 | 1<<6 | 1<<7);
    11e6:	82 b1       	in	r24, 0x02	; 2
    11e8:	80 6f       	ori	r24, 0xF0	; 240
    11ea:	82 b9       	out	0x02, r24	; 2
    DDRC  &= ~(1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
    11ec:	87 b1       	in	r24, 0x07	; 7
    11ee:	17 b8       	out	0x07, r1	; 7
    PORTC |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
    11f0:	88 b1       	in	r24, 0x08	; 8
    11f2:	8f ef       	ldi	r24, 0xFF	; 255
    11f4:	88 b9       	out	0x08, r24	; 8
    DDRE  &= ~(1<<1 | 1<<0);
    11f6:	8d b1       	in	r24, 0x0d	; 13
    11f8:	8c 7f       	andi	r24, 0xFC	; 252
    11fa:	8d b9       	out	0x0d, r24	; 13
    PORTE |=  (1<<1 | 1<<0);
    11fc:	8e b1       	in	r24, 0x0e	; 14
    11fe:	83 60       	ori	r24, 0x03	; 3
    1200:	8e b9       	out	0x0e, r24	; 14
    DDRD  &= ~(1<<7 | 1<<5);
    1202:	8a b1       	in	r24, 0x0a	; 10
    1204:	8f 75       	andi	r24, 0x5F	; 95
    1206:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<7 | 1<<5);  
    1208:	8b b1       	in	r24, 0x0b	; 11
    120a:	80 6a       	ori	r24, 0xA0	; 160
    120c:	8b b9       	out	0x0b, r24	; 11
    120e:	e1 e4       	ldi	r30, 0x41	; 65
    1210:	f1 e0       	ldi	r31, 0x01	; 1
    1212:	a1 e5       	ldi	r26, 0x51	; 81
    1214:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    1216:	11 92       	st	Z+, r1
    1218:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
    121a:	1d 92       	st	X+, r1
    121c:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	e1 35       	cpi	r30, 0x51	; 81
    1222:	f8 07       	cpc	r31, r24
    1224:	c1 f7       	brne	.-16     	; 0x1216 <matrix_init+0x46>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
    1226:	08 95       	ret

00001228 <matrix_scan>:

uint8_t matrix_scan(void)
{
    1228:	af 92       	push	r10
    122a:	bf 92       	push	r11
    122c:	cf 92       	push	r12
    122e:	df 92       	push	r13
    1230:	ef 92       	push	r14
    1232:	ff 92       	push	r15
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	a1 e5       	ldi	r26, 0x51	; 81
    123c:	ca 2e       	mov	r12, r26
    123e:	a1 e0       	ldi	r26, 0x01	; 1
    1240:	da 2e       	mov	r13, r26
    1242:	76 01       	movw	r14, r12
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1244:	10 e0       	ldi	r17, 0x00	; 0
    PORTD |=  (1<<7 | 1<<5);  
}

static matrix_row_t read_cols(void)
{
    return (PINA&(1<<4) ? 0 : (1<<0)) |
    1246:	c1 e0       	ldi	r28, 0x01	; 1
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
    1248:	d5 e0       	ldi	r29, 0x05	; 5
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
    124a:	14 30       	cpi	r17, 0x04	; 4
    124c:	a9 f0       	breq	.+42     	; 0x1278 <matrix_scan+0x50>
    124e:	30 f4       	brcc	.+12     	; 0x125c <matrix_scan+0x34>
    1250:	12 30       	cpi	r17, 0x02	; 2
    1252:	c1 f0       	breq	.+48     	; 0x1284 <matrix_scan+0x5c>
    1254:	a0 f4       	brcc	.+40     	; 0x127e <matrix_scan+0x56>
    1256:	11 30       	cpi	r17, 0x01	; 1
    1258:	d9 f4       	brne	.+54     	; 0x1290 <matrix_scan+0x68>
    125a:	17 c0       	rjmp	.+46     	; 0x128a <matrix_scan+0x62>
    125c:	16 30       	cpi	r17, 0x06	; 6
    125e:	31 f0       	breq	.+12     	; 0x126c <matrix_scan+0x44>
    1260:	40 f0       	brcs	.+16     	; 0x1272 <matrix_scan+0x4a>
    1262:	17 30       	cpi	r17, 0x07	; 7
    1264:	a9 f4       	brne	.+42     	; 0x1290 <matrix_scan+0x68>
        case 7:
            DDRD  |= (1<<4);
    1266:	54 9a       	sbi	0x0a, 4	; 10
            PORTD &= ~(1<<4);
    1268:	5c 98       	cbi	0x0b, 4	; 11
    126a:	14 c0       	rjmp	.+40     	; 0x1294 <matrix_scan+0x6c>
            break;
        case 6:
            DDRD  |= (1<<1);
    126c:	51 9a       	sbi	0x0a, 1	; 10
            PORTD &= ~(1<<1);
    126e:	59 98       	cbi	0x0b, 1	; 11
    1270:	11 c0       	rjmp	.+34     	; 0x1294 <matrix_scan+0x6c>
            break;
        case 5:
            DDRD  |= (1<<0);
    1272:	50 9a       	sbi	0x0a, 0	; 10
            PORTD &= ~(1<<0);
    1274:	58 98       	cbi	0x0b, 0	; 11
    1276:	0e c0       	rjmp	.+28     	; 0x1294 <matrix_scan+0x6c>
            break;
        case 4:
            DDRE  |= (1<<5);
    1278:	6d 9a       	sbi	0x0d, 5	; 13
            PORTE &= ~(1<<5);
    127a:	75 98       	cbi	0x0e, 5	; 14
    127c:	0b c0       	rjmp	.+22     	; 0x1294 <matrix_scan+0x6c>
            break;
        case 3:
            DDRE  |= (1<<4);
    127e:	6c 9a       	sbi	0x0d, 4	; 13
            PORTE &= ~(1<<4);
    1280:	74 98       	cbi	0x0e, 4	; 14
    1282:	08 c0       	rjmp	.+16     	; 0x1294 <matrix_scan+0x6c>
            break;
        case 2:
            DDRB  |= (1<<7);
    1284:	27 9a       	sbi	0x04, 7	; 4
            PORTB &= ~(1<<7);
    1286:	2f 98       	cbi	0x05, 7	; 5
    1288:	05 c0       	rjmp	.+10     	; 0x1294 <matrix_scan+0x6c>
            break;
        case 1:
            DDRB  |= (1<<6);
    128a:	26 9a       	sbi	0x04, 6	; 4
            PORTB &= ~(1<<6);
    128c:	2e 98       	cbi	0x05, 6	; 5
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <matrix_scan+0x6c>
            break;
        case 0:
            DDRB  |= (1<<5);
    1290:	25 9a       	sbi	0x04, 5	; 4
            PORTB &= ~(1<<5);
    1292:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1294:	80 e5       	ldi	r24, 0x50	; 80
    1296:	8a 95       	dec	r24
    1298:	f1 f7       	brne	.-4      	; 0x1296 <matrix_scan+0x6e>
    PORTD |=  (1<<7 | 1<<5);  
}

static matrix_row_t read_cols(void)
{
    return (PINA&(1<<4) ? 0 : (1<<0)) |
    129a:	80 b1       	in	r24, 0x00	; 0
    129c:	82 95       	swap	r24
    129e:	8f 70       	andi	r24, 0x0F	; 15
    12a0:	8c 27       	eor	r24, r28
    12a2:	80 fb       	bst	r24, 0
    12a4:	aa 24       	eor	r10, r10
    12a6:	a0 f8       	bld	r10, 0
    12a8:	b1 2c       	mov	r11, r1
           (PINA&(1<<5) ? 0 : (1<<1)) |
    12aa:	05 9b       	sbis	0x00, 5	; 0
    12ac:	03 c0       	rjmp	.+6      	; 0x12b4 <matrix_scan+0x8c>
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <matrix_scan+0x90>
    12b4:	22 e0       	ldi	r18, 0x02	; 2
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    PORTD |=  (1<<7 | 1<<5);  
}

static matrix_row_t read_cols(void)
{
    return (PINA&(1<<4) ? 0 : (1<<0)) |
    12b8:	2a 29       	or	r18, r10
    12ba:	3b 29       	or	r19, r11
           (PINA&(1<<5) ? 0 : (1<<1)) |
           (PINA&(1<<6) ? 0 : (1<<2)) |
    12bc:	06 9b       	sbis	0x00, 6	; 0
    12be:	03 c0       	rjmp	.+6      	; 0x12c6 <matrix_scan+0x9e>
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <matrix_scan+0xa2>
    12c6:	84 e0       	ldi	r24, 0x04	; 4
    12c8:	90 e0       	ldi	r25, 0x00	; 0
}

static matrix_row_t read_cols(void)
{
    return (PINA&(1<<4) ? 0 : (1<<0)) |
           (PINA&(1<<5) ? 0 : (1<<1)) |
    12ca:	28 2b       	or	r18, r24
    12cc:	39 2b       	or	r19, r25
           (PINA&(1<<6) ? 0 : (1<<2)) |
           (PINA&(1<<7) ? 0 : (1<<3)) |
    12ce:	80 b1       	in	r24, 0x00	; 0
    12d0:	99 27       	eor	r25, r25
    12d2:	87 fd       	sbrc	r24, 7
    12d4:	90 95       	com	r25
    12d6:	80 95       	com	r24
    12d8:	90 95       	com	r25
    12da:	88 27       	eor	r24, r24
    12dc:	99 0f       	add	r25, r25
    12de:	88 1f       	adc	r24, r24
    12e0:	99 27       	eor	r25, r25
    12e2:	73 e0       	ldi	r23, 0x03	; 3
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	7a 95       	dec	r23
    12ea:	e1 f7       	brne	.-8      	; 0x12e4 <matrix_scan+0xbc>

static matrix_row_t read_cols(void)
{
    return (PINA&(1<<4) ? 0 : (1<<0)) |
           (PINA&(1<<5) ? 0 : (1<<1)) |
           (PINA&(1<<6) ? 0 : (1<<2)) |
    12ec:	28 2b       	or	r18, r24
    12ee:	39 2b       	or	r19, r25
           (PINA&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<7) ? 0 : (1<<4)) |
    12f0:	86 b1       	in	r24, 0x06	; 6
    12f2:	99 27       	eor	r25, r25
    12f4:	87 fd       	sbrc	r24, 7
    12f6:	90 95       	com	r25
    12f8:	80 95       	com	r24
    12fa:	90 95       	com	r25
    12fc:	88 27       	eor	r24, r24
    12fe:	99 0f       	add	r25, r25
    1300:	88 1f       	adc	r24, r24
    1302:	99 27       	eor	r25, r25
    1304:	f4 e0       	ldi	r31, 0x04	; 4
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	fa 95       	dec	r31
    130c:	e1 f7       	brne	.-8      	; 0x1306 <matrix_scan+0xde>
static matrix_row_t read_cols(void)
{
    return (PINA&(1<<4) ? 0 : (1<<0)) |
           (PINA&(1<<5) ? 0 : (1<<1)) |
           (PINA&(1<<6) ? 0 : (1<<2)) |
           (PINA&(1<<7) ? 0 : (1<<3)) |
    130e:	28 2b       	or	r18, r24
    1310:	39 2b       	or	r19, r25
           (PINC&(1<<7) ? 0 : (1<<4)) |
           (PINC&(1<<6) ? 0 : (1<<5)) |
    1312:	36 9b       	sbis	0x06, 6	; 6
    1314:	03 c0       	rjmp	.+6      	; 0x131c <matrix_scan+0xf4>
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <matrix_scan+0xf8>
    131c:	80 e2       	ldi	r24, 0x20	; 32
    131e:	90 e0       	ldi	r25, 0x00	; 0
{
    return (PINA&(1<<4) ? 0 : (1<<0)) |
           (PINA&(1<<5) ? 0 : (1<<1)) |
           (PINA&(1<<6) ? 0 : (1<<2)) |
           (PINA&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<7) ? 0 : (1<<4)) |
    1320:	28 2b       	or	r18, r24
    1322:	39 2b       	or	r19, r25
           (PINC&(1<<6) ? 0 : (1<<5)) |
           (PINC&(1<<5) ? 0 : (1<<6)) |
    1324:	35 9b       	sbis	0x06, 5	; 6
    1326:	03 c0       	rjmp	.+6      	; 0x132e <matrix_scan+0x106>
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <matrix_scan+0x10a>
    132e:	80 e4       	ldi	r24, 0x40	; 64
    1330:	90 e0       	ldi	r25, 0x00	; 0
    return (PINA&(1<<4) ? 0 : (1<<0)) |
           (PINA&(1<<5) ? 0 : (1<<1)) |
           (PINA&(1<<6) ? 0 : (1<<2)) |
           (PINA&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<7) ? 0 : (1<<4)) |
           (PINC&(1<<6) ? 0 : (1<<5)) |
    1332:	28 2b       	or	r18, r24
    1334:	39 2b       	or	r19, r25
           (PINC&(1<<5) ? 0 : (1<<6)) |
           (PINC&(1<<4) ? 0 : (1<<7)) |
    1336:	34 9b       	sbis	0x06, 4	; 6
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <matrix_scan+0x118>
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <matrix_scan+0x11c>
    1340:	60 e8       	ldi	r22, 0x80	; 128
    1342:	70 e0       	ldi	r23, 0x00	; 0
           (PINA&(1<<5) ? 0 : (1<<1)) |
           (PINA&(1<<6) ? 0 : (1<<2)) |
           (PINA&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<7) ? 0 : (1<<4)) |
           (PINC&(1<<6) ? 0 : (1<<5)) |
           (PINC&(1<<5) ? 0 : (1<<6)) |
    1344:	26 2b       	or	r18, r22
    1346:	37 2b       	or	r19, r23
           (PINC&(1<<4) ? 0 : (1<<7)) |
           (PINC&(1<<3) ? 0 : (1<<8)) |
    1348:	33 9b       	sbis	0x06, 3	; 6
    134a:	03 c0       	rjmp	.+6      	; 0x1352 <matrix_scan+0x12a>
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <matrix_scan+0x12e>
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	51 e0       	ldi	r21, 0x01	; 1
           (PINA&(1<<6) ? 0 : (1<<2)) |
           (PINA&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<7) ? 0 : (1<<4)) |
           (PINC&(1<<6) ? 0 : (1<<5)) |
           (PINC&(1<<5) ? 0 : (1<<6)) |
           (PINC&(1<<4) ? 0 : (1<<7)) |
    1356:	24 2b       	or	r18, r20
    1358:	35 2b       	or	r19, r21
           (PINC&(1<<3) ? 0 : (1<<8)) |
           (PINC&(1<<2) ? 0 : (1<<9)) |
    135a:	32 9b       	sbis	0x06, 2	; 6
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <matrix_scan+0x13c>
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <matrix_scan+0x140>
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	92 e0       	ldi	r25, 0x02	; 2
           (PINA&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<7) ? 0 : (1<<4)) |
           (PINC&(1<<6) ? 0 : (1<<5)) |
           (PINC&(1<<5) ? 0 : (1<<6)) |
           (PINC&(1<<4) ? 0 : (1<<7)) |
           (PINC&(1<<3) ? 0 : (1<<8)) |
    1368:	28 2b       	or	r18, r24
    136a:	39 2b       	or	r19, r25
           (PINC&(1<<2) ? 0 : (1<<9)) |
           (PINC&(1<<1) ? 0 : (1<<10)) |
    136c:	31 9b       	sbis	0x06, 1	; 6
    136e:	03 c0       	rjmp	.+6      	; 0x1376 <matrix_scan+0x14e>
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	02 c0       	rjmp	.+4      	; 0x137a <matrix_scan+0x152>
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	74 e0       	ldi	r23, 0x04	; 4
           (PINC&(1<<7) ? 0 : (1<<4)) |
           (PINC&(1<<6) ? 0 : (1<<5)) |
           (PINC&(1<<5) ? 0 : (1<<6)) |
           (PINC&(1<<4) ? 0 : (1<<7)) |
           (PINC&(1<<3) ? 0 : (1<<8)) |
           (PINC&(1<<2) ? 0 : (1<<9)) |
    137a:	26 2b       	or	r18, r22
    137c:	37 2b       	or	r19, r23
           (PINC&(1<<1) ? 0 : (1<<10)) |
           (PINC&(1<<0) ? 0 : (1<<11)) |
    137e:	30 9b       	sbis	0x06, 0	; 6
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <matrix_scan+0x160>
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	02 c0       	rjmp	.+4      	; 0x138c <matrix_scan+0x164>
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	58 e0       	ldi	r21, 0x08	; 8
           (PINC&(1<<6) ? 0 : (1<<5)) |
           (PINC&(1<<5) ? 0 : (1<<6)) |
           (PINC&(1<<4) ? 0 : (1<<7)) |
           (PINC&(1<<3) ? 0 : (1<<8)) |
           (PINC&(1<<2) ? 0 : (1<<9)) |
           (PINC&(1<<1) ? 0 : (1<<10)) |
    138c:	24 2b       	or	r18, r20
    138e:	35 2b       	or	r19, r21
           (PINC&(1<<0) ? 0 : (1<<11)) |
           (PINE&(1<<1) ? 0 : (1<<12)) |
    1390:	61 9b       	sbis	0x0c, 1	; 12
    1392:	03 c0       	rjmp	.+6      	; 0x139a <matrix_scan+0x172>
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 c0       	rjmp	.+4      	; 0x139e <matrix_scan+0x176>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e1       	ldi	r25, 0x10	; 16
           (PINC&(1<<5) ? 0 : (1<<6)) |
           (PINC&(1<<4) ? 0 : (1<<7)) |
           (PINC&(1<<3) ? 0 : (1<<8)) |
           (PINC&(1<<2) ? 0 : (1<<9)) |
           (PINC&(1<<1) ? 0 : (1<<10)) |
           (PINC&(1<<0) ? 0 : (1<<11)) |
    139e:	28 2b       	or	r18, r24
    13a0:	39 2b       	or	r19, r25
           (PINE&(1<<1) ? 0 : (1<<12)) |
           (PINE&(1<<0) ? 0 : (1<<13)) |
    13a2:	60 9b       	sbis	0x0c, 0	; 12
    13a4:	03 c0       	rjmp	.+6      	; 0x13ac <matrix_scan+0x184>
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <matrix_scan+0x188>
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e2       	ldi	r25, 0x20	; 32
           (PINC&(1<<4) ? 0 : (1<<7)) |
           (PINC&(1<<3) ? 0 : (1<<8)) |
           (PINC&(1<<2) ? 0 : (1<<9)) |
           (PINC&(1<<1) ? 0 : (1<<10)) |
           (PINC&(1<<0) ? 0 : (1<<11)) |
           (PINE&(1<<1) ? 0 : (1<<12)) |
    13b0:	28 2b       	or	r18, r24
    13b2:	39 2b       	or	r19, r25
           (PINE&(1<<0) ? 0 : (1<<13)) |
           (PIND&(1<<7) ? 0 : (1<<14)) |
    13b4:	89 b1       	in	r24, 0x09	; 9
    13b6:	99 27       	eor	r25, r25
    13b8:	87 fd       	sbrc	r24, 7
    13ba:	90 95       	com	r25
    13bc:	80 95       	com	r24
    13be:	90 95       	com	r25
    13c0:	88 27       	eor	r24, r24
    13c2:	99 0f       	add	r25, r25
    13c4:	88 1f       	adc	r24, r24
    13c6:	99 27       	eor	r25, r25
    13c8:	90 e4       	ldi	r25, 0x40	; 64
    13ca:	89 9f       	mul	r24, r25
    13cc:	90 2d       	mov	r25, r0
    13ce:	88 27       	eor	r24, r24
    13d0:	11 24       	eor	r1, r1
           (PINC&(1<<3) ? 0 : (1<<8)) |
           (PINC&(1<<2) ? 0 : (1<<9)) |
           (PINC&(1<<1) ? 0 : (1<<10)) |
           (PINC&(1<<0) ? 0 : (1<<11)) |
           (PINE&(1<<1) ? 0 : (1<<12)) |
           (PINE&(1<<0) ? 0 : (1<<13)) |
    13d2:	28 2b       	or	r18, r24
    13d4:	39 2b       	or	r19, r25
           (PIND&(1<<7) ? 0 : (1<<14)) |
           (PIND&(1<<5) ? 0 : (1<<15));
    13d6:	4d 9b       	sbis	0x09, 5	; 9
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <matrix_scan+0x1b8>
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <matrix_scan+0x1bc>
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e8       	ldi	r25, 0x80	; 128
           (PINC&(1<<2) ? 0 : (1<<9)) |
           (PINC&(1<<1) ? 0 : (1<<10)) |
           (PINC&(1<<0) ? 0 : (1<<11)) |
           (PINE&(1<<1) ? 0 : (1<<12)) |
           (PINE&(1<<0) ? 0 : (1<<13)) |
           (PIND&(1<<7) ? 0 : (1<<14)) |
    13e4:	28 2b       	or	r18, r24
    13e6:	39 2b       	or	r19, r25
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    13e8:	d7 01       	movw	r26, r14
    13ea:	8d 91       	ld	r24, X+
    13ec:	9c 91       	ld	r25, X
    13ee:	11 97       	sbiw	r26, 0x01	; 1
    13f0:	82 17       	cp	r24, r18
    13f2:	93 07       	cpc	r25, r19
    13f4:	51 f1       	breq	.+84     	; 0x144a <matrix_scan+0x222>
            matrix_debouncing[i] = cols;
    13f6:	2d 93       	st	X+, r18
    13f8:	3c 93       	st	X, r19
            if (debouncing) {
    13fa:	80 91 00 01 	lds	r24, 0x0100
    13fe:	88 23       	and	r24, r24
    1400:	11 f1       	breq	.+68     	; 0x1446 <matrix_scan+0x21e>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1402:	80 91 e4 02 	lds	r24, 0x02E4
    1406:	80 ff       	sbrs	r24, 0
    1408:	04 c0       	rjmp	.+8      	; 0x1412 <matrix_scan+0x1ea>
    140a:	8a e2       	ldi	r24, 0x2A	; 42
    140c:	93 e0       	ldi	r25, 0x03	; 3
    140e:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    1412:	80 91 e4 02 	lds	r24, 0x02E4
    1416:	80 ff       	sbrs	r24, 0
    1418:	0e c0       	rjmp	.+28     	; 0x1436 <matrix_scan+0x20e>
    141a:	80 91 00 01 	lds	r24, 0x0100
    141e:	1f 92       	push	r1
    1420:	8f 93       	push	r24
    1422:	84 e3       	ldi	r24, 0x34	; 52
    1424:	93 e0       	ldi	r25, 0x03	; 3
    1426:	9f 93       	push	r25
    1428:	8f 93       	push	r24
    142a:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	80 91 e4 02 	lds	r24, 0x02E4
    143a:	80 ff       	sbrs	r24, 0
    143c:	04 c0       	rjmp	.+8      	; 0x1446 <matrix_scan+0x21e>
    143e:	89 e3       	ldi	r24, 0x39	; 57
    1440:	93 e0       	ldi	r25, 0x03	; 3
    1442:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
            }
            debouncing = DEBOUNCE;
    1446:	d0 93 00 01 	sts	0x0100, r29
        }
        unselect_rows();
    144a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    144e:	1f 5f       	subi	r17, 0xFF	; 255
    1450:	b2 e0       	ldi	r27, 0x02	; 2
    1452:	eb 0e       	add	r14, r27
    1454:	f1 1c       	adc	r15, r1
    1456:	18 30       	cpi	r17, 0x08	; 8
    1458:	09 f0       	breq	.+2      	; 0x145c <matrix_scan+0x234>
    145a:	f7 ce       	rjmp	.-530    	; 0x124a <matrix_scan+0x22>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    145c:	80 91 00 01 	lds	r24, 0x0100
    1460:	88 23       	and	r24, r24
    1462:	c9 f0       	breq	.+50     	; 0x1496 <matrix_scan+0x26e>
        if (--debouncing) {
    1464:	81 50       	subi	r24, 0x01	; 1
    1466:	80 93 00 01 	sts	0x0100, r24
    146a:	88 23       	and	r24, r24
    146c:	39 f0       	breq	.+14     	; 0x147c <matrix_scan+0x254>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    146e:	ef ec       	ldi	r30, 0xCF	; 207
    1470:	f7 e0       	ldi	r31, 0x07	; 7
    1472:	31 97       	sbiw	r30, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <matrix_scan+0x24a>
    1476:	00 c0       	rjmp	.+0      	; 0x1478 <matrix_scan+0x250>
    1478:	00 00       	nop
    147a:	0d c0       	rjmp	.+26     	; 0x1496 <matrix_scan+0x26e>
    147c:	e1 e4       	ldi	r30, 0x41	; 65
    147e:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    1480:	d6 01       	movw	r26, r12
    1482:	8d 91       	ld	r24, X+
    1484:	9d 91       	ld	r25, X+
    1486:	6d 01       	movw	r12, r26
    1488:	81 93       	st	Z+, r24
    148a:	91 93       	st	Z+, r25

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    148c:	b1 e6       	ldi	r27, 0x61	; 97
    148e:	cb 16       	cp	r12, r27
    1490:	b1 e0       	ldi	r27, 0x01	; 1
    1492:	db 06       	cpc	r13, r27
    1494:	a9 f7       	brne	.-22     	; 0x1480 <matrix_scan+0x258>
            }
        }
    }

    return 1;
}
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	1f 91       	pop	r17
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	df 90       	pop	r13
    14a4:	cf 90       	pop	r12
    14a6:	bf 90       	pop	r11
    14a8:	af 90       	pop	r10
    14aa:	08 95       	ret

000014ac <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    14ac:	e8 2f       	mov	r30, r24
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	ee 0f       	add	r30, r30
    14b2:	ff 1f       	adc	r31, r31
    14b4:	ef 5b       	subi	r30, 0xBF	; 191
    14b6:	fe 4f       	sbci	r31, 0xFE	; 254
}
    14b8:	80 81       	ld	r24, Z
    14ba:	91 81       	ldd	r25, Z+1	; 0x01
    14bc:	08 95       	ret

000014be <matrix_print>:

void matrix_print(void)
{
    14be:	8f 92       	push	r8
    14c0:	9f 92       	push	r9
    14c2:	af 92       	push	r10
    14c4:	bf 92       	push	r11
    14c6:	cf 92       	push	r12
    14c8:	df 92       	push	r13
    14ca:	ef 92       	push	r14
    14cc:	ff 92       	push	r15
    print("\nr/c 0123456789ABCDEF\n");
    14ce:	8b e3       	ldi	r24, 0x3B	; 59
    14d0:	93 e0       	ldi	r25, 0x03	; 3
    14d2:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    14d6:	91 e4       	ldi	r25, 0x41	; 65
    14d8:	a9 2e       	mov	r10, r25
    14da:	91 e0       	ldi	r25, 0x01	; 1
    14dc:	b9 2e       	mov	r11, r25
    14de:	e1 2c       	mov	r14, r1
    14e0:	f1 2c       	mov	r15, r1
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    14e2:	22 e5       	ldi	r18, 0x52	; 82
    14e4:	82 2e       	mov	r8, r18
    14e6:	23 e0       	ldi	r18, 0x03	; 3
    14e8:	92 2e       	mov	r9, r18
        pbin_reverse16(matrix_get_row(row));
    14ea:	3a e5       	ldi	r19, 0x5A	; 90
    14ec:	c3 2e       	mov	r12, r19
    14ee:	33 e0       	ldi	r19, 0x03	; 3
    14f0:	d3 2e       	mov	r13, r19

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    14f2:	ff 92       	push	r15
    14f4:	ef 92       	push	r14
    14f6:	9f 92       	push	r9
    14f8:	8f 92       	push	r8
    14fa:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    14fe:	87 e5       	ldi	r24, 0x57	; 87
    1500:	93 e0       	ldi	r25, 0x03	; 3
    1502:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
        pbin_reverse16(matrix_get_row(row));
    1506:	f5 01       	movw	r30, r10
    1508:	81 91       	ld	r24, Z+
    150a:	91 91       	ld	r25, Z+
    150c:	5f 01       	movw	r10, r30
    150e:	0e 94 c5 21 	call	0x438a	; 0x438a <bitrev16>
    1512:	9f 93       	push	r25
    1514:	8f 93       	push	r24
    1516:	df 92       	push	r13
    1518:	cf 92       	push	r12
    151a:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
        print("\n");
    151e:	80 e6       	ldi	r24, 0x60	; 96
    1520:	93 e0       	ldi	r25, 0x03	; 3
    1522:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    1526:	ff ef       	ldi	r31, 0xFF	; 255
    1528:	ef 1a       	sub	r14, r31
    152a:	ff 0a       	sbc	r15, r31
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    152c:	8d b7       	in	r24, 0x3d	; 61
    152e:	9e b7       	in	r25, 0x3e	; 62
    1530:	08 96       	adiw	r24, 0x08	; 8
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	9e bf       	out	0x3e, r25	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	8d bf       	out	0x3d, r24	; 61
    153c:	98 e0       	ldi	r25, 0x08	; 8
    153e:	e9 16       	cp	r14, r25
    1540:	f1 04       	cpc	r15, r1
    1542:	b9 f6       	brne	.-82     	; 0x14f2 <matrix_print+0x34>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	df 90       	pop	r13
    154a:	cf 90       	pop	r12
    154c:	bf 90       	pop	r11
    154e:	af 90       	pop	r10
    1550:	9f 90       	pop	r9
    1552:	8f 90       	pop	r8
    1554:	08 95       	ret

00001556 <led_set>:
 * 
 */

 void led_set(uint8_t usb_led)
{
    DDR_CAPSLCK |= (1<<BIT_CAPSLCK);
    1556:	24 9a       	sbi	0x04, 4	; 4

    if (usb_led & (1<<USB_LED_CAPS_LOCK))
    1558:	81 ff       	sbrs	r24, 1
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <led_set+0xa>
    {
        
        PORT_CAPSLCK &= ~(1<<BIT_CAPSLCK);
    155c:	2c 98       	cbi	0x05, 4	; 5
    155e:	08 95       	ret
    }
    else
    {
        PORT_CAPSLCK |= (1<<BIT_CAPSLCK);
    1560:	2c 9a       	sbi	0x05, 4	; 5
    1562:	08 95       	ret

00001564 <main>:
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	80 e8       	ldi	r24, 0x80	; 128
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	80 93 61 00 	sts	0x0061, r24
    1570:	90 93 61 00 	sts	0x0061, r25
    1574:	0f be       	out	0x3f, r0	; 63
#include "bluefruit.h"

int main(void)
{   
    clock_prescale_set(clock_div_1);
    bluefruit_pins_init();  // bluefruit & battery special pins
    1576:	0e 94 c3 0c 	call	0x1986	; 0x1986 <bluefruit_pins_init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    157a:	80 91 e2 00 	lds	r24, 0x00E2
    157e:	84 60       	ori	r24, 0x04	; 4
    1580:	80 93 e2 00 	sts	0x00E2, r24
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar); // set sendchar function for print.
    1584:	8e e0       	ldi	r24, 0x0E	; 14
    1586:	9d e0       	ldi	r25, 0x0D	; 13
    1588:	0e 94 ae 21 	call	0x435c	; 0x435c <print_set_sendchar>
    //debug_keyboard = true;
    //debug_mouse = true;
    /* Disable watchdog if enabled by bootloader/fuses */
    //MCUSR &= ~(1 << WDRF);

    sei(); // interrupt enable?
    158c:	78 94       	sei
    158e:	2f ef       	ldi	r18, 0xFF	; 255
    1590:	8d e3       	ldi	r24, 0x3D	; 61
    1592:	99 e4       	ldi	r25, 0x49	; 73
    1594:	21 50       	subi	r18, 0x01	; 1
    1596:	80 40       	sbci	r24, 0x00	; 0
    1598:	90 40       	sbci	r25, 0x00	; 0
    159a:	e1 f7       	brne	.-8      	; 0x1594 <main+0x30>
    159c:	00 c0       	rjmp	.+0      	; 0x159e <main+0x3a>
    159e:	00 00       	nop
    // PF0 runs through a 10k resistor to USB 5V. If USB 5V is not
    // present, PF0 gets pulled down to ground through the 10k and a 40k resistor.
    
    _delay_ms(3000); // this delay is only here at the moment because of a stupid hardware decision.
    
    if (!(PINF & (1<<3))) {
    15a0:	7b 99       	sbic	0x0f, 3	; 15
    15a2:	1d c0       	rjmp	.+58     	; 0x15de <main+0x7a>
      
	USB_Init();
    15a4:	0e 94 d7 11 	call	0x23ae	; 0x23ae <USB_Init>
    15a8:	2f ef       	ldi	r18, 0xFF	; 255
    15aa:	89 e6       	ldi	r24, 0x69	; 105
    15ac:	98 e1       	ldi	r25, 0x18	; 24
    15ae:	21 50       	subi	r18, 0x01	; 1
    15b0:	80 40       	sbci	r24, 0x00	; 0
    15b2:	90 40       	sbci	r25, 0x00	; 0
    15b4:	e1 f7       	brne	.-8      	; 0x15ae <main+0x4a>
    15b6:	00 c0       	rjmp	.+0      	; 0x15b8 <main+0x54>
    15b8:	00 00       	nop
    
	_delay_ms(1000); 

	keyboard_init();
    15ba:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <keyboard_init>

	print("Initializing keyboard...\n"); 
    15be:	82 e6       	ldi	r24, 0x62	; 98
    15c0:	93 e0       	ldi	r25, 0x03	; 3
    15c2:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
      
    // Turn on Bluefruit using a transistor
        DDRB   = _BV(PB0);
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	84 b9       	out	0x04, r24	; 4
        PORTB |= _BV(PB0);
    15ca:	28 9a       	sbi	0x05, 0	; 5
	 
        host_set_driver(bluefruit_driver());
    15cc:	0e 94 c6 0c 	call	0x198c	; 0x198c <bluefruit_driver>
    15d0:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <host_set_driver>
	
	serial_init();
    15d4:	0e 94 c9 0c 	call	0x1992	; 0x1992 <serial_init>

        while (1) {
            keyboard_task();
    15d8:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <keyboard_task>
    15dc:	fd cf       	rjmp	.-6      	; 0x15d8 <main+0x74>
        }

    } else {
      
    USB_Init();
    15de:	0e 94 d7 11 	call	0x23ae	; 0x23ae <USB_Init>
    15e2:	2f ef       	ldi	r18, 0xFF	; 255
    15e4:	89 e6       	ldi	r24, 0x69	; 105
    15e6:	98 e1       	ldi	r25, 0x18	; 24
    15e8:	21 50       	subi	r18, 0x01	; 1
    15ea:	80 40       	sbci	r24, 0x00	; 0
    15ec:	90 40       	sbci	r25, 0x00	; 0
    15ee:	e1 f7       	brne	.-8      	; 0x15e8 <main+0x84>
    15f0:	00 c0       	rjmp	.+0      	; 0x15f2 <main+0x8e>
    15f2:	00 00       	nop
    
    _delay_ms(1000);

    print("Initializing keyboard...\n");
    15f4:	8c e7       	ldi	r24, 0x7C	; 124
    15f6:	93 e0       	ldi	r25, 0x03	; 3
    15f8:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    keyboard_init();   
    15fc:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <keyboard_init>
    print("Setting host driver to LUFA...\n");
    1600:	86 e9       	ldi	r24, 0x96	; 150
    1602:	93 e0       	ldi	r25, 0x03	; 3
    1604:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    host_set_driver(&lufa_driver);
    1608:	8b e0       	ldi	r24, 0x0B	; 11
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <host_set_driver>
    keyboard_task();
    1610:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <keyboard_task>
    if (USB_DeviceState != DEVICE_STATE_Configured) {
    1614:	80 91 f9 02 	lds	r24, 0x02F9
    1618:	84 30       	cpi	r24, 0x04	; 4
    161a:	41 f0       	breq	.+16     	; 0x162c <main+0xc8>
	  DDR_EXTRA_LAYER ^= (1<<BIT_EXTRA_LAYER);
    161c:	84 b1       	in	r24, 0x04	; 4
    161e:	94 e0       	ldi	r25, 0x04	; 4
    1620:	89 27       	eor	r24, r25
    1622:	84 b9       	out	0x04, r24	; 4
	  print("USB plugged in, but not configured: assuming charger.\n");
    1624:	86 eb       	ldi	r24, 0xB6	; 182
    1626:	93 e0       	ldi	r25, 0x03	; 3
    1628:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    162c:	2f ef       	ldi	r18, 0xFF	; 255
    162e:	89 e6       	ldi	r24, 0x69	; 105
    1630:	98 e1       	ldi	r25, 0x18	; 24
    1632:	21 50       	subi	r18, 0x01	; 1
    1634:	80 40       	sbci	r24, 0x00	; 0
    1636:	90 40       	sbci	r25, 0x00	; 0
    1638:	e1 f7       	brne	.-8      	; 0x1632 <main+0xce>
    163a:	00 c0       	rjmp	.+0      	; 0x163c <main+0xd8>
    163c:	00 00       	nop
        // wait an extra second for the PC's operating system
        // to load drivers and do whatever it does to actually
        // be ready for input
        
	_delay_ms(1000);
        print("Main loop");
    163e:	8d ee       	ldi	r24, 0xED	; 237
    1640:	93 e0       	ldi	r25, 0x03	; 3
    1642:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    1646:	0b c0       	rjmp	.+22     	; 0x165e <main+0xfa>
        while (1) {
            while (USB_DeviceState == DEVICE_STATE_Suspended) {
                suspend_power_down();
    1648:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <suspend_power_down>
                if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    164c:	80 91 f7 02 	lds	r24, 0x02F7
    1650:	88 23       	and	r24, r24
    1652:	29 f0       	breq	.+10     	; 0x165e <main+0xfa>
    1654:	0e 94 04 22 	call	0x4408	; 0x4408 <suspend_wakeup_condition>
    1658:	81 11       	cpse	r24, r1
                    USB_Device_SendRemoteWakeup();
    165a:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <USB_Device_SendRemoteWakeup>
        // be ready for input
        
	_delay_ms(1000);
        print("Main loop");
        while (1) {
            while (USB_DeviceState == DEVICE_STATE_Suspended) {
    165e:	80 91 f9 02 	lds	r24, 0x02F9
    1662:	85 30       	cpi	r24, 0x05	; 5
    1664:	89 f3       	breq	.-30     	; 0x1648 <main+0xe4>
                suspend_power_down();
                if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
                    USB_Device_SendRemoteWakeup();
                }
            }
            keyboard_task(); 
    1666:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <keyboard_task>
        }
    166a:	f9 cf       	rjmp	.-14     	; 0x165e <main+0xfa>

0000166c <keyboard_leds>:
    return &driver;
}

static uint8_t keyboard_leds(void) {
    return bluefruit_keyboard_leds;
}
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	08 95       	ret

00001670 <send_system>:
    bluefruit_trace_footer();
#endif
}

static void send_system(uint16_t data)
{
    1670:	08 95       	ret

00001672 <bluefruit_trace_header>:
}

#ifdef BLUEFRUIT_TRACE_SERIAL
static void bluefruit_trace_header(void)
{
    dprintf("+------------------------------------+\n");
    1672:	80 91 e4 02 	lds	r24, 0x02E4
    1676:	80 ff       	sbrs	r24, 0
    1678:	08 c0       	rjmp	.+16     	; 0x168a <bluefruit_trace_header+0x18>
    167a:	86 e1       	ldi	r24, 0x16	; 22
    167c:	94 e0       	ldi	r25, 0x04	; 4
    167e:	9f 93       	push	r25
    1680:	8f 93       	push	r24
    1682:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    dprintf("| HID report to Bluefruit via serial |\n");
    168a:	80 91 e4 02 	lds	r24, 0x02E4
    168e:	80 ff       	sbrs	r24, 0
    1690:	08 c0       	rjmp	.+16     	; 0x16a2 <bluefruit_trace_header+0x30>
    1692:	8e e3       	ldi	r24, 0x3E	; 62
    1694:	94 e0       	ldi	r25, 0x04	; 4
    1696:	9f 93       	push	r25
    1698:	8f 93       	push	r24
    169a:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    dprintf("+------------------------------------+\n|");
    16a2:	80 91 e4 02 	lds	r24, 0x02E4
    16a6:	80 ff       	sbrs	r24, 0
    16a8:	08 c0       	rjmp	.+16     	; 0x16ba <bluefruit_trace_header+0x48>
    16aa:	86 e6       	ldi	r24, 0x66	; 102
    16ac:	94 e0       	ldi	r25, 0x04	; 4
    16ae:	9f 93       	push	r25
    16b0:	8f 93       	push	r24
    16b2:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	08 95       	ret

000016bc <bluefruit_trace_footer>:
}

static void bluefruit_trace_footer(void)
{
    dprintf("|\n+------------------------------------+\n\n");
    16bc:	80 91 e4 02 	lds	r24, 0x02E4
    16c0:	80 ff       	sbrs	r24, 0
    16c2:	08 c0       	rjmp	.+16     	; 0x16d4 <bluefruit_trace_footer+0x18>
    16c4:	88 e9       	ldi	r24, 0x98	; 152
    16c6:	94 e0       	ldi	r25, 0x04	; 4
    16c8:	9f 93       	push	r25
    16ca:	8f 93       	push	r24
    16cc:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	08 95       	ret

000016d6 <bluefruit_serial_send>:
}
#endif

static void bluefruit_serial_send(uint8_t data)
{
    16d6:	cf 93       	push	r28
    16d8:	c8 2f       	mov	r28, r24
#ifdef BLUEFRUIT_TRACE_SERIAL
    dprintf(" ");
    16da:	80 91 e4 02 	lds	r24, 0x02E4
    16de:	80 ff       	sbrs	r24, 0
    16e0:	08 c0       	rjmp	.+16     	; 0x16f2 <bluefruit_serial_send+0x1c>
    16e2:	2f e8       	ldi	r18, 0x8F	; 143
    16e4:	34 e0       	ldi	r19, 0x04	; 4
    16e6:	3f 93       	push	r19
    16e8:	2f 93       	push	r18
    16ea:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    debug_hex8(data);
    16f2:	80 91 e4 02 	lds	r24, 0x02E4
    16f6:	80 ff       	sbrs	r24, 0
    16f8:	0c c0       	rjmp	.+24     	; 0x1712 <bluefruit_serial_send+0x3c>
    16fa:	1f 92       	push	r1
    16fc:	cf 93       	push	r28
    16fe:	21 e9       	ldi	r18, 0x91	; 145
    1700:	34 e0       	ldi	r19, 0x04	; 4
    1702:	3f 93       	push	r19
    1704:	2f 93       	push	r18
    1706:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    dprintf(" ");
    1712:	80 91 e4 02 	lds	r24, 0x02E4
    1716:	80 ff       	sbrs	r24, 0
    1718:	08 c0       	rjmp	.+16     	; 0x172a <bluefruit_serial_send+0x54>
    171a:	26 e9       	ldi	r18, 0x96	; 150
    171c:	34 e0       	ldi	r19, 0x04	; 4
    171e:	3f 93       	push	r19
    1720:	2f 93       	push	r18
    1722:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
#endif
    serial_send(data);
    172a:	8c 2f       	mov	r24, r28
}
    172c:	cf 91       	pop	r28
#ifdef BLUEFRUIT_TRACE_SERIAL
    dprintf(" ");
    debug_hex8(data);
    dprintf(" ");
#endif
    serial_send(data);
    172e:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <serial_send>

00001732 <send_consumer>:
    (usage == AC_STOP              ? 0x0000  : \
    (usage == AC_REFRESH           ? 0x0000  : \
    (usage == AC_BOOKMARKS         ? 0x0000  : 0)))))))))))))))))))

static void send_consumer(uint16_t data)
{
    1732:	cf 92       	push	r12
    1734:	df 92       	push	r13
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	6c 01       	movw	r12, r24
    static uint16_t last_data = 0;
    if (data == last_data) return;
    173c:	80 91 61 01 	lds	r24, 0x0161
    1740:	90 91 62 01 	lds	r25, 0x0162
    1744:	c8 16       	cp	r12, r24
    1746:	d9 06       	cpc	r13, r25
    1748:	09 f4       	brne	.+2      	; 0x174c <send_consumer+0x1a>
    174a:	cd c0       	rjmp	.+410    	; 0x18e6 <send_consumer+0x1b4>
    last_data = data;
    174c:	d0 92 62 01 	sts	0x0162, r13
    1750:	c0 92 61 01 	sts	0x0161, r12
    
    uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
    1754:	82 ee       	ldi	r24, 0xE2	; 226
    1756:	c8 16       	cp	r12, r24
    1758:	d1 04       	cpc	r13, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <send_consumer+0x2c>
    175c:	53 c0       	rjmp	.+166    	; 0x1804 <send_consumer+0xd2>
    175e:	89 ee       	ldi	r24, 0xE9	; 233
    1760:	c8 16       	cp	r12, r24
    1762:	d1 04       	cpc	r13, r1
    1764:	b9 f1       	breq	.+110    	; 0x17d4 <send_consumer+0xa2>
    1766:	8a ee       	ldi	r24, 0xEA	; 234
    1768:	c8 16       	cp	r12, r24
    176a:	d1 04       	cpc	r13, r1
    176c:	b9 f1       	breq	.+110    	; 0x17dc <send_consumer+0xaa>
    176e:	85 eb       	ldi	r24, 0xB5	; 181
    1770:	c8 16       	cp	r12, r24
    1772:	d1 04       	cpc	r13, r1
    1774:	b9 f1       	breq	.+110    	; 0x17e4 <send_consumer+0xb2>
    1776:	86 eb       	ldi	r24, 0xB6	; 182
    1778:	c8 16       	cp	r12, r24
    177a:	d1 04       	cpc	r13, r1
    177c:	b9 f1       	breq	.+110    	; 0x17ec <send_consumer+0xba>
    177e:	87 eb       	ldi	r24, 0xB7	; 183
    1780:	c8 16       	cp	r12, r24
    1782:	d1 04       	cpc	r13, r1
    1784:	b9 f1       	breq	.+110    	; 0x17f4 <send_consumer+0xc2>
    1786:	8c ec       	ldi	r24, 0xCC	; 204
    1788:	c8 16       	cp	r12, r24
    178a:	d1 04       	cpc	r13, r1
    178c:	d9 f1       	breq	.+118    	; 0x1804 <send_consumer+0xd2>
    178e:	8d ec       	ldi	r24, 0xCD	; 205
    1790:	c8 16       	cp	r12, r24
    1792:	d1 04       	cpc	r13, r1
    1794:	99 f1       	breq	.+102    	; 0x17fc <send_consumer+0xca>
    1796:	83 e8       	ldi	r24, 0x83	; 131
    1798:	c8 16       	cp	r12, r24
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	d8 06       	cpc	r13, r24
    179e:	91 f1       	breq	.+100    	; 0x1804 <send_consumer+0xd2>
    17a0:	8a e8       	ldi	r24, 0x8A	; 138
    17a2:	c8 16       	cp	r12, r24
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	d8 06       	cpc	r13, r24
    17a8:	69 f1       	breq	.+90     	; 0x1804 <send_consumer+0xd2>
    17aa:	82 e9       	ldi	r24, 0x92	; 146
    17ac:	c8 16       	cp	r12, r24
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	d8 06       	cpc	r13, r24
    17b2:	41 f1       	breq	.+80     	; 0x1804 <send_consumer+0xd2>
    17b4:	84 e9       	ldi	r24, 0x94	; 148
    17b6:	c8 16       	cp	r12, r24
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	d8 06       	cpc	r13, r24
    17bc:	19 f1       	breq	.+70     	; 0x1804 <send_consumer+0xd2>
    17be:	81 e2       	ldi	r24, 0x21	; 33
    17c0:	c8 16       	cp	r12, r24
    17c2:	82 e0       	ldi	r24, 0x02	; 2
    17c4:	d8 06       	cpc	r13, r24
    17c6:	09 f1       	breq	.+66     	; 0x180a <send_consumer+0xd8>
    17c8:	83 e2       	ldi	r24, 0x23	; 35
    17ca:	c8 16       	cp	r12, r24
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	d8 06       	cpc	r13, r24
    17d0:	01 f1       	breq	.+64     	; 0x1812 <send_consumer+0xe0>
    17d2:	18 c0       	rjmp	.+48     	; 0x1804 <send_consumer+0xd2>
    17d4:	e1 2c       	mov	r14, r1
    17d6:	70 e1       	ldi	r23, 0x10	; 16
    17d8:	f7 2e       	mov	r15, r23
    17da:	1e c0       	rjmp	.+60     	; 0x1818 <send_consumer+0xe6>
    17dc:	e1 2c       	mov	r14, r1
    17de:	60 e2       	ldi	r22, 0x20	; 32
    17e0:	f6 2e       	mov	r15, r22
    17e2:	1a c0       	rjmp	.+52     	; 0x1818 <send_consumer+0xe6>
    17e4:	52 e0       	ldi	r21, 0x02	; 2
    17e6:	e5 2e       	mov	r14, r21
    17e8:	f1 2c       	mov	r15, r1
    17ea:	16 c0       	rjmp	.+44     	; 0x1818 <send_consumer+0xe6>
    17ec:	44 e0       	ldi	r20, 0x04	; 4
    17ee:	e4 2e       	mov	r14, r20
    17f0:	f1 2c       	mov	r15, r1
    17f2:	12 c0       	rjmp	.+36     	; 0x1818 <send_consumer+0xe6>
    17f4:	30 e1       	ldi	r19, 0x10	; 16
    17f6:	e3 2e       	mov	r14, r19
    17f8:	f1 2c       	mov	r15, r1
    17fa:	0e c0       	rjmp	.+28     	; 0x1818 <send_consumer+0xe6>
    17fc:	e1 2c       	mov	r14, r1
    17fe:	20 e4       	ldi	r18, 0x40	; 64
    1800:	f2 2e       	mov	r15, r18
    1802:	0a c0       	rjmp	.+20     	; 0x1818 <send_consumer+0xe6>
    1804:	e1 2c       	mov	r14, r1
    1806:	f1 2c       	mov	r15, r1
    1808:	07 c0       	rjmp	.+14     	; 0x1818 <send_consumer+0xe6>
    180a:	e1 2c       	mov	r14, r1
    180c:	94 e0       	ldi	r25, 0x04	; 4
    180e:	f9 2e       	mov	r15, r25
    1810:	03 c0       	rjmp	.+6      	; 0x1818 <send_consumer+0xe6>
    1812:	e1 2c       	mov	r14, r1
    1814:	ff 24       	eor	r15, r15
    1816:	f3 94       	inc	r15
    
#ifdef BLUEFRUIT_TRACE_SERIAL   
    dprintf("\nData: "); 
    1818:	80 91 e4 02 	lds	r24, 0x02E4
    181c:	80 ff       	sbrs	r24, 0
    181e:	08 c0       	rjmp	.+16     	; 0x1830 <send_consumer+0xfe>
    1820:	87 ef       	ldi	r24, 0xF7	; 247
    1822:	93 e0       	ldi	r25, 0x03	; 3
    1824:	9f 93       	push	r25
    1826:	8f 93       	push	r24
    1828:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    debug_hex16(data); 
    1830:	80 91 e4 02 	lds	r24, 0x02E4
    1834:	80 ff       	sbrs	r24, 0
    1836:	0c c0       	rjmp	.+24     	; 0x1850 <send_consumer+0x11e>
    1838:	df 92       	push	r13
    183a:	cf 92       	push	r12
    183c:	8f ef       	ldi	r24, 0xFF	; 255
    183e:	93 e0       	ldi	r25, 0x03	; 3
    1840:	9f 93       	push	r25
    1842:	8f 93       	push	r24
    1844:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    dprintf("; bitmap: "); 
    1850:	80 91 e4 02 	lds	r24, 0x02E4
    1854:	80 ff       	sbrs	r24, 0
    1856:	08 c0       	rjmp	.+16     	; 0x1868 <send_consumer+0x136>
    1858:	84 e0       	ldi	r24, 0x04	; 4
    185a:	94 e0       	ldi	r25, 0x04	; 4
    185c:	9f 93       	push	r25
    185e:	8f 93       	push	r24
    1860:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    debug_hex16(bitmap); 
    1868:	80 91 e4 02 	lds	r24, 0x02E4
    186c:	80 ff       	sbrs	r24, 0
    186e:	0c c0       	rjmp	.+24     	; 0x1888 <send_consumer+0x156>
    1870:	ff 92       	push	r15
    1872:	ef 92       	push	r14
    1874:	8f e0       	ldi	r24, 0x0F	; 15
    1876:	94 e0       	ldi	r25, 0x04	; 4
    1878:	9f 93       	push	r25
    187a:	8f 93       	push	r24
    187c:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    dprintf("\n");
    1888:	80 91 e4 02 	lds	r24, 0x02E4
    188c:	80 ff       	sbrs	r24, 0
    188e:	08 c0       	rjmp	.+16     	; 0x18a0 <send_consumer+0x16e>
    1890:	84 e1       	ldi	r24, 0x14	; 20
    1892:	94 e0       	ldi	r25, 0x04	; 4
    1894:	9f 93       	push	r25
    1896:	8f 93       	push	r24
    1898:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    bluefruit_trace_header();
    18a0:	0e 94 39 0b 	call	0x1672	; 0x1672 <bluefruit_trace_header>
#endif
    bluefruit_serial_send(0xFD);
    18a4:	8d ef       	ldi	r24, 0xFD	; 253
    18a6:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    bluefruit_serial_send(0x00);
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    bluefruit_serial_send(0x02);
    18b0:	82 e0       	ldi	r24, 0x02	; 2
    18b2:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    bluefruit_serial_send((bitmap>>8)&0xFF);
    18b6:	8f 2d       	mov	r24, r15
    18b8:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    bluefruit_serial_send(bitmap&0xFF); 
    18bc:	8e 2d       	mov	r24, r14
    18be:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    bluefruit_serial_send(0x00);
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    bluefruit_serial_send(0x00);
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    bluefruit_serial_send(0x00);
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    bluefruit_serial_send(0x00);
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
#ifdef BLUEFRUIT_TRACE_SERIAL
    bluefruit_trace_footer();
#endif
}
    18da:	ff 90       	pop	r15
    18dc:	ef 90       	pop	r14
    18de:	df 90       	pop	r13
    18e0:	cf 90       	pop	r12
    bluefruit_serial_send(0x00);
    bluefruit_serial_send(0x00);
    bluefruit_serial_send(0x00);
    bluefruit_serial_send(0x00);
#ifdef BLUEFRUIT_TRACE_SERIAL
    bluefruit_trace_footer();
    18e2:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <bluefruit_trace_footer>
#endif
}
    18e6:	ff 90       	pop	r15
    18e8:	ef 90       	pop	r14
    18ea:	df 90       	pop	r13
    18ec:	cf 90       	pop	r12
    18ee:	08 95       	ret

000018f0 <send_mouse>:
    bluefruit_trace_footer();   
#endif
}

static void send_mouse(report_mouse_t *report)
{
    18f0:	ef 92       	push	r14
    18f2:	ff 92       	push	r15
    18f4:	7c 01       	movw	r14, r24
#ifdef BLUEFRUIT_TRACE_SERIAL   
    bluefruit_trace_header();
    18f6:	0e 94 39 0b 	call	0x1672	; 0x1672 <bluefruit_trace_header>
#endif
    bluefruit_serial_send(0xFD);
    18fa:	8d ef       	ldi	r24, 0xFD	; 253
    18fc:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    bluefruit_serial_send(0x00);
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    bluefruit_serial_send(0x03);
    1906:	83 e0       	ldi	r24, 0x03	; 3
    1908:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    bluefruit_serial_send(report->buttons);
    190c:	f7 01       	movw	r30, r14
    190e:	80 81       	ld	r24, Z
    1910:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    bluefruit_serial_send(report->x);
    1914:	f7 01       	movw	r30, r14
    1916:	81 81       	ldd	r24, Z+1	; 0x01
    1918:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    bluefruit_serial_send(report->y);
    191c:	f7 01       	movw	r30, r14
    191e:	82 81       	ldd	r24, Z+2	; 0x02
    1920:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    bluefruit_serial_send(report->v); // should try sending the wheel v here
    1924:	f7 01       	movw	r30, r14
    1926:	83 81       	ldd	r24, Z+3	; 0x03
    1928:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    bluefruit_serial_send(report->h); // should try sending the wheel h here
    192c:	f7 01       	movw	r30, r14
    192e:	84 81       	ldd	r24, Z+4	; 0x04
    1930:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    bluefruit_serial_send(0x00);
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
#ifdef BLUEFRUIT_TRACE_SERIAL
    bluefruit_trace_footer();
#endif
}
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    bluefruit_serial_send(report->y);
    bluefruit_serial_send(report->v); // should try sending the wheel v here
    bluefruit_serial_send(report->h); // should try sending the wheel h here
    bluefruit_serial_send(0x00);
#ifdef BLUEFRUIT_TRACE_SERIAL
    bluefruit_trace_footer();
    193e:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <bluefruit_trace_footer>

00001942 <send_keyboard>:
static uint8_t keyboard_leds(void) {
    return bluefruit_keyboard_leds;
}

static void send_keyboard(report_keyboard_t *report)
{
    1942:	ef 92       	push	r14
    1944:	ff 92       	push	r15
    1946:	1f 93       	push	r17
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	1f 92       	push	r1
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	18 2f       	mov	r17, r24
#ifdef BLUEFRUIT_TRACE_SERIAL   
    bluefruit_trace_header();
    1954:	99 83       	std	Y+1, r25	; 0x01
    1956:	0e 94 39 0b 	call	0x1672	; 0x1672 <bluefruit_trace_header>
#endif
    bluefruit_serial_send(0xFD);
    195a:	8d ef       	ldi	r24, 0xFD	; 253
    195c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    1960:	e1 2e       	mov	r14, r17
    1962:	99 81       	ldd	r25, Y+1	; 0x01
    1964:	f9 2e       	mov	r15, r25
    1966:	18 e0       	ldi	r17, 0x08	; 8
    for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
        bluefruit_serial_send(report->raw[i]);
    1968:	f7 01       	movw	r30, r14
    196a:	81 91       	ld	r24, Z+
    196c:	7f 01       	movw	r14, r30
    196e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <bluefruit_serial_send>
    1972:	11 50       	subi	r17, 0x01	; 1
{
#ifdef BLUEFRUIT_TRACE_SERIAL   
    bluefruit_trace_header();
#endif
    bluefruit_serial_send(0xFD);
    for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    1974:	c9 f7       	brne	.-14     	; 0x1968 <send_keyboard+0x26>
        bluefruit_serial_send(report->raw[i]);
    }
#ifdef BLUEFRUIT_TRACE_SERIAL   
    bluefruit_trace_footer();   
#endif
}
    1976:	0f 90       	pop	r0
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	1f 91       	pop	r17
    197e:	ff 90       	pop	r15
    1980:	ef 90       	pop	r14
    bluefruit_serial_send(0xFD);
    for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
        bluefruit_serial_send(report->raw[i]);
    }
#ifdef BLUEFRUIT_TRACE_SERIAL   
    bluefruit_trace_footer();   
    1982:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <bluefruit_trace_footer>

00001986 <bluefruit_pins_init>:
    /* Bluefruit reset button (active high): initial Input / Hi-Z */
//    DDR_BF_RESET &= ~(1<<BIT_BF_RESET);
//    PORT_BF_RESET &= ~(1<<BIT_BF_RESET);

    /* Bluefruit pairing button (active low): initial Input / Hi-Z */
    DDR_BF_PAIRB &= ~(1<<BIT_BF_PAIRB);
    1986:	56 98       	cbi	0x0a, 6	; 10
    PORT_BF_PAIRB &= ~(1<<BIT_BF_PAIRB);
    1988:	5e 98       	cbi	0x0b, 6	; 11
    198a:	08 95       	ret

0000198c <bluefruit_driver>:
};

host_driver_t *bluefruit_driver(void)
{
    return &driver;
}
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	91 e0       	ldi	r25, 0x01	; 1
    1990:	08 95       	ret

00001992 <serial_init>:
#endif


void serial_init(void)
{
    SERIAL_UART_INIT();
    1992:	83 e3       	ldi	r24, 0x33	; 51
    1994:	80 93 cc 00 	sts	0x00CC, r24
    1998:	10 92 cd 00 	sts	0x00CD, r1
    199c:	88 e0       	ldi	r24, 0x08	; 8
    199e:	80 93 c9 00 	sts	0x00C9, r24
    19a2:	86 e0       	ldi	r24, 0x06	; 6
    19a4:	80 93 ca 00 	sts	0x00CA, r24
    19a8:	78 94       	sei
    19aa:	08 95       	ret

000019ac <serial_send>:
    return data;
}

void serial_send(uint8_t data)
{
    while (!SERIAL_UART_TXD_READY) ;
    19ac:	90 91 c8 00 	lds	r25, 0x00C8
    19b0:	95 ff       	sbrs	r25, 5
    19b2:	fc cf       	rjmp	.-8      	; 0x19ac <serial_send>
    SERIAL_UART_DATA = data;
    19b4:	80 93 ce 00 	sts	0x00CE, r24
    19b8:	08 95       	ret

000019ba <__vector_25>:
}

// USART RX complete interrupt
ISR(SERIAL_UART_RXD_VECT)
{
    19ba:	1f 92       	push	r1
    19bc:	0f 92       	push	r0
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	0f 92       	push	r0
    19c2:	11 24       	eor	r1, r1
    19c4:	0b b6       	in	r0, 0x3b	; 59
    19c6:	0f 92       	push	r0
    19c8:	2f 93       	push	r18
    19ca:	3f 93       	push	r19
    19cc:	4f 93       	push	r20
    19ce:	8f 93       	push	r24
    19d0:	9f 93       	push	r25
    19d2:	ef 93       	push	r30
    19d4:	ff 93       	push	r31
    uint8_t next = (rbuf_head + 1) % RBUF_SIZE;
    19d6:	20 91 63 01 	lds	r18, 0x0163
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	c9 01       	movw	r24, r18
    19de:	01 96       	adiw	r24, 0x01	; 1
    19e0:	99 27       	eor	r25, r25
    if (next != rbuf_tail) {
    19e2:	40 91 64 01 	lds	r20, 0x0164
    19e6:	48 17       	cp	r20, r24
    19e8:	41 f0       	breq	.+16     	; 0x19fa <__vector_25+0x40>
        rbuf[rbuf_head] = SERIAL_UART_DATA;
    19ea:	90 91 ce 00 	lds	r25, 0x00CE
    19ee:	f9 01       	movw	r30, r18
    19f0:	eb 59       	subi	r30, 0x9B	; 155
    19f2:	fe 4f       	sbci	r31, 0xFE	; 254
    19f4:	90 83       	st	Z, r25
        rbuf_head = next;
    19f6:	80 93 63 01 	sts	0x0163, r24
    }
    rbuf_check_rts_hi();
}
    19fa:	ff 91       	pop	r31
    19fc:	ef 91       	pop	r30
    19fe:	9f 91       	pop	r25
    1a00:	8f 91       	pop	r24
    1a02:	4f 91       	pop	r20
    1a04:	3f 91       	pop	r19
    1a06:	2f 91       	pop	r18
    1a08:	0f 90       	pop	r0
    1a0a:	0b be       	out	0x3b, r0	; 59
    1a0c:	0f 90       	pop	r0
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	0f 90       	pop	r0
    1a12:	1f 90       	pop	r1
    1a14:	18 95       	reti

00001a16 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1a16:	80 91 6e 02 	lds	r24, 0x026E
    1a1a:	08 95       	ret

00001a1c <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    1a1c:	9f b7       	in	r25, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	10 92 70 02 	sts	0x0270, r1
    1a24:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1a26:	90 91 f9 02 	lds	r25, 0x02F9
    1a2a:	94 30       	cpi	r25, 0x04	; 4
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <sendchar+0x14>
    1a2e:	58 c0       	rjmp	.+176    	; 0x1ae0 <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1a30:	90 91 e9 00 	lds	r25, 0x00E9
    1a34:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a36:	20 91 ec 00 	lds	r18, 0x00EC
    1a3a:	20 ff       	sbrs	r18, 0
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <sendchar+0x26>
    1a3e:	20 e8       	ldi	r18, 0x80	; 128
    1a40:	01 c0       	rjmp	.+2      	; 0x1a44 <sendchar+0x28>
    1a42:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1a44:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a46:	94 e0       	ldi	r25, 0x04	; 4
    1a48:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1a4c:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1a50:	90 ff       	sbrs	r25, 0
    1a52:	43 c0       	rjmp	.+134    	; 0x1ada <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1a54:	90 91 ee 00 	lds	r25, 0x00EE
    1a58:	97 ff       	sbrs	r25, 7
    1a5a:	3f c0       	rjmp	.+126    	; 0x1ada <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1a5c:	90 91 71 02 	lds	r25, 0x0271
    1a60:	99 23       	and	r25, r25
    1a62:	21 f0       	breq	.+8      	; 0x1a6c <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a64:	90 91 e8 00 	lds	r25, 0x00E8
    1a68:	95 ff       	sbrs	r25, 5
    1a6a:	37 c0       	rjmp	.+110    	; 0x1ada <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1a6c:	10 92 71 02 	sts	0x0271, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1a70:	96 e0       	ldi	r25, 0x06	; 6
    1a72:	14 c0       	rjmp	.+40     	; 0x1a9c <sendchar+0x80>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    1a74:	30 91 f9 02 	lds	r19, 0x02F9
    1a78:	34 30       	cpi	r19, 0x04	; 4
    1a7a:	79 f5       	brne	.+94     	; 0x1ada <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1a7c:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    1a80:	35 fd       	sbrc	r19, 5
    1a82:	2b c0       	rjmp	.+86     	; 0x1ada <sendchar+0xbe>
    1a84:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    1a86:	21 f4       	brne	.+8      	; 0x1a90 <sendchar+0x74>
            timeouted = true;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	80 93 71 02 	sts	0x0271, r24
            goto ERROR_EXIT;
    1a8e:	25 c0       	rjmp	.+74     	; 0x1ada <sendchar+0xbe>
    1a90:	ef ec       	ldi	r30, 0xCF	; 207
    1a92:	f7 e0       	ldi	r31, 0x07	; 7
    1a94:	31 97       	sbiw	r30, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <sendchar+0x78>
    1a98:	00 c0       	rjmp	.+0      	; 0x1a9a <sendchar+0x7e>
    1a9a:	00 00       	nop
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a9c:	30 91 e8 00 	lds	r19, 0x00E8
    }

    timeouted = false;

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1aa0:	35 ff       	sbrs	r19, 5
    1aa2:	e8 cf       	rjmp	.-48     	; 0x1a74 <sendchar+0x58>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1aa4:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1aa8:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    1aac:	85 fd       	sbrc	r24, 5
    1aae:	0a c0       	rjmp	.+20     	; 0x1ac4 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ab0:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    1ab4:	80 ff       	sbrs	r24, 0
    1ab6:	fc cf       	rjmp	.-8      	; 0x1ab0 <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ab8:	80 91 e8 00 	lds	r24, 0x00E8
    1abc:	8e 77       	andi	r24, 0x7E	; 126
    1abe:	80 93 e8 00 	sts	0x00E8, r24
    1ac2:	06 c0       	rjmp	.+12     	; 0x1ad0 <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    1ac4:	8f b7       	in	r24, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	91 e0       	ldi	r25, 0x01	; 1
    1aca:	90 93 70 02 	sts	0x0270, r25
    1ace:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ad0:	2f 70       	andi	r18, 0x0F	; 15
    1ad2:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	08 95       	ret
    1ada:	2f 70       	andi	r18, 0x0F	; 15
    1adc:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1ae2:	08 95       	ret

00001ae4 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <send_consumer+0x6>
    1aea:	1f 92       	push	r1
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1af0:	20 91 f9 02 	lds	r18, 0x02F9
    1af4:	24 30       	cpi	r18, 0x04	; 4
    1af6:	21 f5       	brne	.+72     	; 0x1b40 <send_consumer+0x5c>
        return;

    report_extra_t r = {
    1af8:	23 e0       	ldi	r18, 0x03	; 3
    1afa:	29 83       	std	Y+1, r18	; 0x01
    1afc:	9b 83       	std	Y+3, r25	; 0x03
    1afe:	8a 83       	std	Y+2, r24	; 0x02
    1b00:	20 93 e9 00 	sts	0x00E9, r18
    1b04:	8f ef       	ldi	r24, 0xFF	; 255
    1b06:	06 c0       	rjmp	.+12     	; 0x1b14 <send_consumer+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b08:	9a e6       	ldi	r25, 0x6A	; 106
    1b0a:	9a 95       	dec	r25
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <send_consumer+0x26>
    1b0e:	00 c0       	rjmp	.+0      	; 0x1b10 <send_consumer+0x2c>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1b10:	88 23       	and	r24, r24
    1b12:	29 f0       	breq	.+10     	; 0x1b1e <send_consumer+0x3a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1b14:	90 91 e8 00 	lds	r25, 0x00E8
    1b18:	81 50       	subi	r24, 0x01	; 1
    1b1a:	95 ff       	sbrs	r25, 5
    1b1c:	f5 cf       	rjmp	.-22     	; 0x1b08 <send_consumer+0x24>
    1b1e:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1b22:	85 ff       	sbrs	r24, 5
    1b24:	0d c0       	rjmp	.+26     	; 0x1b40 <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1b26:	40 e0       	ldi	r20, 0x00	; 0
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	63 e0       	ldi	r22, 0x03	; 3
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	ce 01       	movw	r24, r28
    1b30:	01 96       	adiw	r24, 0x01	; 1
    1b32:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b36:	80 91 e8 00 	lds	r24, 0x00E8
    1b3a:	8e 77       	andi	r24, 0x7E	; 126
    1b3c:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	08 95       	ret

00001b4c <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <send_system+0x6>
    1b52:	1f 92       	push	r1
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1b58:	20 91 f9 02 	lds	r18, 0x02F9
    1b5c:	24 30       	cpi	r18, 0x04	; 4
    1b5e:	29 f5       	brne	.+74     	; 0x1baa <send_system+0x5e>
        return;

    report_extra_t r = {
    1b60:	22 e0       	ldi	r18, 0x02	; 2
    1b62:	29 83       	std	Y+1, r18	; 0x01
    1b64:	9b 83       	std	Y+3, r25	; 0x03
    1b66:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b68:	83 e0       	ldi	r24, 0x03	; 3
    1b6a:	80 93 e9 00 	sts	0x00E9, r24
    1b6e:	8f ef       	ldi	r24, 0xFF	; 255
    1b70:	06 c0       	rjmp	.+12     	; 0x1b7e <send_system+0x32>
    1b72:	9a e6       	ldi	r25, 0x6A	; 106
    1b74:	9a 95       	dec	r25
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <send_system+0x28>
    1b78:	00 c0       	rjmp	.+0      	; 0x1b7a <send_system+0x2e>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1b7a:	88 23       	and	r24, r24
    1b7c:	29 f0       	breq	.+10     	; 0x1b88 <send_system+0x3c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1b7e:	90 91 e8 00 	lds	r25, 0x00E8
    1b82:	81 50       	subi	r24, 0x01	; 1
    1b84:	95 ff       	sbrs	r25, 5
    1b86:	f5 cf       	rjmp	.-22     	; 0x1b72 <send_system+0x26>
    1b88:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1b8c:	85 ff       	sbrs	r24, 5
    1b8e:	0d c0       	rjmp	.+26     	; 0x1baa <send_system+0x5e>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	50 e0       	ldi	r21, 0x00	; 0
    1b94:	63 e0       	ldi	r22, 0x03	; 3
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	ce 01       	movw	r24, r28
    1b9a:	01 96       	adiw	r24, 0x01	; 1
    1b9c:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ba0:	80 91 e8 00 	lds	r24, 0x00E8
    1ba4:	8e 77       	andi	r24, 0x7E	; 126
    1ba6:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1bb6:	20 91 f9 02 	lds	r18, 0x02F9
    1bba:	24 30       	cpi	r18, 0x04	; 4
    1bbc:	f9 f4       	brne	.+62     	; 0x1bfc <send_mouse+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bbe:	22 e0       	ldi	r18, 0x02	; 2
    1bc0:	20 93 e9 00 	sts	0x00E9, r18
    1bc4:	2f ef       	ldi	r18, 0xFF	; 255
    1bc6:	06 c0       	rjmp	.+12     	; 0x1bd4 <send_mouse+0x1e>
    1bc8:	3a e6       	ldi	r19, 0x6A	; 106
    1bca:	3a 95       	dec	r19
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <send_mouse+0x14>
    1bce:	00 c0       	rjmp	.+0      	; 0x1bd0 <send_mouse+0x1a>

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1bd0:	22 23       	and	r18, r18
    1bd2:	29 f0       	breq	.+10     	; 0x1bde <send_mouse+0x28>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1bd4:	30 91 e8 00 	lds	r19, 0x00E8
    1bd8:	21 50       	subi	r18, 0x01	; 1
    1bda:	35 ff       	sbrs	r19, 5
    1bdc:	f5 cf       	rjmp	.-22     	; 0x1bc8 <send_mouse+0x12>
    1bde:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1be2:	25 ff       	sbrs	r18, 5
    1be4:	0b c0       	rjmp	.+22     	; 0x1bfc <send_mouse+0x46>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	65 e0       	ldi	r22, 0x05	; 5
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bf2:	80 91 e8 00 	lds	r24, 0x00E8
    1bf6:	8e 77       	andi	r24, 0x7E	; 126
    1bf8:	80 93 e8 00 	sts	0x00E8, r24
    1bfc:	08 95       	ret

00001bfe <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1bfe:	ef 92       	push	r14
    1c00:	ff 92       	push	r15
    1c02:	7c 01       	movw	r14, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1c04:	80 91 f9 02 	lds	r24, 0x02F9
    1c08:	84 30       	cpi	r24, 0x04	; 4
    1c0a:	41 f5       	brne	.+80     	; 0x1c5c <send_keyboard+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	80 93 e9 00 	sts	0x00E9, r24
    1c12:	8f ef       	ldi	r24, 0xFF	; 255
    1c14:	06 c0       	rjmp	.+12     	; 0x1c22 <send_keyboard+0x24>
    1c16:	9a e6       	ldi	r25, 0x6A	; 106
    1c18:	9a 95       	dec	r25
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <send_keyboard+0x1a>
    1c1c:	00 c0       	rjmp	.+0      	; 0x1c1e <send_keyboard+0x20>
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1c1e:	88 23       	and	r24, r24
    1c20:	29 f0       	breq	.+10     	; 0x1c2c <send_keyboard+0x2e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c22:	90 91 e8 00 	lds	r25, 0x00E8
    1c26:	81 50       	subi	r24, 0x01	; 1
    1c28:	95 ff       	sbrs	r25, 5
    1c2a:	f5 cf       	rjmp	.-22     	; 0x1c16 <send_keyboard+0x18>
    1c2c:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1c30:	85 ff       	sbrs	r24, 5
    1c32:	14 c0       	rjmp	.+40     	; 0x1c5c <send_keyboard+0x5e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	50 e0       	ldi	r21, 0x00	; 0
    1c38:	68 e0       	ldi	r22, 0x08	; 8
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	c7 01       	movw	r24, r14
    1c3e:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c42:	80 91 e8 00 	lds	r24, 0x00E8
    1c46:	8e 77       	andi	r24, 0x7E	; 126
    1c48:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1c4c:	88 e0       	ldi	r24, 0x08	; 8
    1c4e:	f7 01       	movw	r30, r14
    1c50:	a6 e6       	ldi	r26, 0x66	; 102
    1c52:	b2 e0       	ldi	r27, 0x02	; 2
    1c54:	01 90       	ld	r0, Z+
    1c56:	0d 92       	st	X+, r0
    1c58:	8a 95       	dec	r24
    1c5a:	e1 f7       	brne	.-8      	; 0x1c54 <send_keyboard+0x56>
}
    1c5c:	ff 90       	pop	r15
    1c5e:	ef 90       	pop	r14
    1c60:	08 95       	ret

00001c62 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    1c62:	83 ec       	ldi	r24, 0xC3	; 195
    1c64:	94 e0       	ldi	r25, 0x04	; 4
    1c66:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    1c6a:	80 91 f8 02 	lds	r24, 0x02F8
    1c6e:	81 11       	cpse	r24, r1
    1c70:	09 c0       	rjmp	.+18     	; 0x1c84 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    1c72:	0e 94 70 11 	call	0x22e0	; 0x22e0 <USB_Disable>
        USB_Init();
    1c76:	0e 94 d7 11 	call	0x23ae	; 0x23ae <USB_Init>
    1c7a:	80 91 e2 00 	lds	r24, 0x00E2
    1c7e:	84 60       	ori	r24, 0x04	; 4
    1c80:	80 93 e2 00 	sts	0x00E2, r24
    1c84:	08 95       	ret

00001c86 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    1c86:	87 ec       	ldi	r24, 0xC7	; 199
    1c88:	94 e0       	ldi	r25, 0x04	; 4
    1c8a:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    1c8e:	10 92 f8 02 	sts	0x02F8, r1
    1c92:	08 95       	ret

00001c94 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    1c94:	8b ec       	ldi	r24, 0xCB	; 203
    1c96:	94 e0       	ldi	r25, 0x04	; 4
    1c98:	0c 94 64 07 	jmp	0xec8	; 0xec8 <xputs>

00001c9c <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    1c9c:	8f ec       	ldi	r24, 0xCF	; 207
    1c9e:	94 e0       	ldi	r25, 0x04	; 4
    1ca0:	0c 94 64 07 	jmp	0xec8	; 0xec8 <xputs>

00001ca4 <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    1ca4:	83 ed       	ldi	r24, 0xD3	; 211
    1ca6:	94 e0       	ldi	r25, 0x04	; 4
    1ca8:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    suspend_wakeup_init();
    1cac:	0c 94 19 22 	jmp	0x4432	; 0x4432 <suspend_wakeup_init>

00001cb0 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    1cb0:	80 91 6f 02 	lds	r24, 0x026F
    1cb4:	8f 5f       	subi	r24, 0xFF	; 255
    1cb6:	80 93 6f 02 	sts	0x026F, r24
    1cba:	62 e3       	ldi	r22, 0x32	; 50
    1cbc:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodqi4>
    1cc0:	91 11       	cpse	r25, r1
    1cc2:	35 c0       	rjmp	.+106    	; 0x1d2e <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    1cc4:	10 92 6f 02 	sts	0x026F, r1

    if (!console_flush) return;
    1cc8:	80 91 70 02 	lds	r24, 0x0270
    1ccc:	88 23       	and	r24, r24
    1cce:	79 f1       	breq	.+94     	; 0x1d2e <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1cd0:	80 91 f9 02 	lds	r24, 0x02F9
    1cd4:	84 30       	cpi	r24, 0x04	; 4
    1cd6:	49 f5       	brne	.+82     	; 0x1d2a <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1cd8:	80 91 e9 00 	lds	r24, 0x00E9
    1cdc:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1cde:	90 91 ec 00 	lds	r25, 0x00EC
    1ce2:	90 ff       	sbrs	r25, 0
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <EVENT_USB_Device_StartOfFrame+0x3a>
    1ce6:	90 e8       	ldi	r25, 0x80	; 128
    1ce8:	01 c0       	rjmp	.+2      	; 0x1cec <EVENT_USB_Device_StartOfFrame+0x3c>
    1cea:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1cec:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1cee:	84 e0       	ldi	r24, 0x04	; 4
    1cf0:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1cf4:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1cf8:	80 ff       	sbrs	r24, 0
    1cfa:	14 c0       	rjmp	.+40     	; 0x1d24 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1cfc:	80 91 ee 00 	lds	r24, 0x00EE
    1d00:	87 fd       	sbrc	r24, 7
    1d02:	03 c0       	rjmp	.+6      	; 0x1d0a <EVENT_USB_Device_StartOfFrame+0x5a>
    1d04:	0f c0       	rjmp	.+30     	; 0x1d24 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d06:	10 92 f1 00 	sts	0x00F1, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1d0a:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    1d0e:	85 fd       	sbrc	r24, 5
    1d10:	fa cf       	rjmp	.-12     	; 0x1d06 <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d12:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1d16:	80 ff       	sbrs	r24, 0
    1d18:	05 c0       	rjmp	.+10     	; 0x1d24 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d1a:	80 91 e8 00 	lds	r24, 0x00E8
    1d1e:	8e 77       	andi	r24, 0x7E	; 126
    1d20:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d24:	9f 70       	andi	r25, 0x0F	; 15
    1d26:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    1d2a:	10 92 70 02 	sts	0x0270, r1
    1d2e:	08 95       	ret

00001d30 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d30:	42 e0       	ldi	r20, 0x02	; 2
    1d32:	61 ec       	ldi	r22, 0xC1	; 193
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	0e 94 e6 10 	call	0x21cc	; 0x21cc <Endpoint_ConfigureEndpoint_Prv>
    1d3a:	42 e0       	ldi	r20, 0x02	; 2
    1d3c:	61 ec       	ldi	r22, 0xC1	; 193
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	0e 94 e6 10 	call	0x21cc	; 0x21cc <Endpoint_ConfigureEndpoint_Prv>
    1d44:	42 e0       	ldi	r20, 0x02	; 2
    1d46:	61 ec       	ldi	r22, 0xC1	; 193
    1d48:	83 e0       	ldi	r24, 0x03	; 3
    1d4a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <Endpoint_ConfigureEndpoint_Prv>
    1d4e:	42 e2       	ldi	r20, 0x22	; 34
    1d50:	61 ec       	ldi	r22, 0xC1	; 193
    1d52:	84 e0       	ldi	r24, 0x04	; 4
    1d54:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <Endpoint_ConfigureEndpoint_Prv>

00001d58 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    1d58:	80 91 fb 02 	lds	r24, 0x02FB
    1d5c:	83 30       	cpi	r24, 0x03	; 3
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <EVENT_USB_Device_ControlRequest+0xa>
    1d60:	54 c0       	rjmp	.+168    	; 0x1e0a <EVENT_USB_Device_ControlRequest+0xb2>
    1d62:	30 f4       	brcc	.+12     	; 0x1d70 <EVENT_USB_Device_ControlRequest+0x18>
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	71 f0       	breq	.+28     	; 0x1d84 <EVENT_USB_Device_ControlRequest+0x2c>
    1d68:	82 30       	cpi	r24, 0x02	; 2
    1d6a:	09 f0       	breq	.+2      	; 0x1d6e <EVENT_USB_Device_ControlRequest+0x16>
    1d6c:	a5 c0       	rjmp	.+330    	; 0x1eb8 <EVENT_USB_Device_ControlRequest+0x160>
    1d6e:	8c c0       	rjmp	.+280    	; 0x1e88 <EVENT_USB_Device_ControlRequest+0x130>
    1d70:	8a 30       	cpi	r24, 0x0A	; 10
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <EVENT_USB_Device_ControlRequest+0x1e>
    1d74:	79 c0       	rjmp	.+242    	; 0x1e68 <EVENT_USB_Device_ControlRequest+0x110>
    1d76:	8b 30       	cpi	r24, 0x0B	; 11
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <EVENT_USB_Device_ControlRequest+0x24>
    1d7a:	5f c0       	rjmp	.+190    	; 0x1e3a <EVENT_USB_Device_ControlRequest+0xe2>
    1d7c:	89 30       	cpi	r24, 0x09	; 9
    1d7e:	09 f0       	breq	.+2      	; 0x1d82 <EVENT_USB_Device_ControlRequest+0x2a>
    1d80:	9b c0       	rjmp	.+310    	; 0x1eb8 <EVENT_USB_Device_ControlRequest+0x160>
    1d82:	20 c0       	rjmp	.+64     	; 0x1dc4 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1d84:	80 91 fa 02 	lds	r24, 0x02FA
    1d88:	81 3a       	cpi	r24, 0xA1	; 161
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <EVENT_USB_Device_ControlRequest+0x36>
    1d8c:	95 c0       	rjmp	.+298    	; 0x1eb8 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d8e:	80 91 e8 00 	lds	r24, 0x00E8
    1d92:	87 7f       	andi	r24, 0xF7	; 247
    1d94:	80 93 e8 00 	sts	0x00E8, r24
    1d98:	80 91 fe 02 	lds	r24, 0x02FE
    1d9c:	90 91 ff 02 	lds	r25, 0x02FF
    1da0:	89 2b       	or	r24, r25
    1da2:	21 f0       	breq	.+8      	; 0x1dac <EVENT_USB_Device_ControlRequest+0x54>
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1da4:	60 e0       	ldi	r22, 0x00	; 0
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	03 c0       	rjmp	.+6      	; 0x1db2 <EVENT_USB_Device_ControlRequest+0x5a>
    1dac:	68 e0       	ldi	r22, 0x08	; 8
    1dae:	86 e6       	ldi	r24, 0x66	; 102
    1db0:	92 e0       	ldi	r25, 0x02	; 2
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	0e 94 2b 10 	call	0x2056	; 0x2056 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1db8:	80 91 e8 00 	lds	r24, 0x00E8
    1dbc:	8b 77       	andi	r24, 0x7B	; 123
    1dbe:	80 93 e8 00 	sts	0x00E8, r24
    1dc2:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1dc4:	80 91 fa 02 	lds	r24, 0x02FA
    1dc8:	81 32       	cpi	r24, 0x21	; 33
    1dca:	09 f0       	breq	.+2      	; 0x1dce <EVENT_USB_Device_ControlRequest+0x76>
    1dcc:	75 c0       	rjmp	.+234    	; 0x1eb8 <EVENT_USB_Device_ControlRequest+0x160>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1dce:	80 91 fe 02 	lds	r24, 0x02FE
    1dd2:	90 91 ff 02 	lds	r25, 0x02FF
    1dd6:	89 2b       	or	r24, r25
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <EVENT_USB_Device_ControlRequest+0x84>
    1dda:	6e c0       	rjmp	.+220    	; 0x1eb8 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ddc:	80 91 e8 00 	lds	r24, 0x00E8
    1de0:	87 7f       	andi	r24, 0xF7	; 247
    1de2:	80 93 e8 00 	sts	0x00E8, r24
    1de6:	05 c0       	rjmp	.+10     	; 0x1df2 <EVENT_USB_Device_ControlRequest+0x9a>
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1de8:	80 91 f9 02 	lds	r24, 0x02F9
    1dec:	88 23       	and	r24, r24
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <EVENT_USB_Device_ControlRequest+0x9a>
    1df0:	63 c0       	rjmp	.+198    	; 0x1eb8 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1df2:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1df6:	82 ff       	sbrs	r24, 2
    1df8:	f7 cf       	rjmp	.-18     	; 0x1de8 <EVENT_USB_Device_ControlRequest+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1dfa:	80 91 f1 00 	lds	r24, 0x00F1
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1dfe:	80 93 6e 02 	sts	0x026E, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1e02:	80 91 e8 00 	lds	r24, 0x00E8
    1e06:	8b 77       	andi	r24, 0x7B	; 123
    1e08:	53 c0       	rjmp	.+166    	; 0x1eb0 <EVENT_USB_Device_ControlRequest+0x158>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1e0a:	80 91 fa 02 	lds	r24, 0x02FA
    1e0e:	81 3a       	cpi	r24, 0xA1	; 161
    1e10:	09 f0       	breq	.+2      	; 0x1e14 <EVENT_USB_Device_ControlRequest+0xbc>
    1e12:	52 c0       	rjmp	.+164    	; 0x1eb8 <EVENT_USB_Device_ControlRequest+0x160>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1e14:	80 91 fe 02 	lds	r24, 0x02FE
    1e18:	90 91 ff 02 	lds	r25, 0x02FF
    1e1c:	89 2b       	or	r24, r25
    1e1e:	09 f0       	breq	.+2      	; 0x1e22 <EVENT_USB_Device_ControlRequest+0xca>
    1e20:	4b c0       	rjmp	.+150    	; 0x1eb8 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e22:	80 91 e8 00 	lds	r24, 0x00E8
    1e26:	87 7f       	andi	r24, 0xF7	; 247
    1e28:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e2c:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1e30:	80 ff       	sbrs	r24, 0
    1e32:	fc cf       	rjmp	.-8      	; 0x1e2c <EVENT_USB_Device_ControlRequest+0xd4>
                    Endpoint_Write_8(keyboard_protocol);
    1e34:	80 91 15 01 	lds	r24, 0x0115
    1e38:	36 c0       	rjmp	.+108    	; 0x1ea6 <EVENT_USB_Device_ControlRequest+0x14e>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1e3a:	80 91 fa 02 	lds	r24, 0x02FA
    1e3e:	81 32       	cpi	r24, 0x21	; 33
    1e40:	d9 f5       	brne	.+118    	; 0x1eb8 <EVENT_USB_Device_ControlRequest+0x160>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1e42:	80 91 fe 02 	lds	r24, 0x02FE
    1e46:	90 91 ff 02 	lds	r25, 0x02FF
    1e4a:	89 2b       	or	r24, r25
    1e4c:	a9 f5       	brne	.+106    	; 0x1eb8 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e4e:	80 91 e8 00 	lds	r24, 0x00E8
    1e52:	87 7f       	andi	r24, 0xF7	; 247
    1e54:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1e58:	0e 94 1d 11 	call	0x223a	; 0x223a <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    1e5c:	80 91 fc 02 	lds	r24, 0x02FC
    1e60:	80 93 15 01 	sts	0x0115, r24
                    clear_keyboard();
    1e64:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1e68:	80 91 fa 02 	lds	r24, 0x02FA
    1e6c:	81 32       	cpi	r24, 0x21	; 33
    1e6e:	21 f5       	brne	.+72     	; 0x1eb8 <EVENT_USB_Device_ControlRequest+0x160>
    1e70:	80 91 e8 00 	lds	r24, 0x00E8
    1e74:	87 7f       	andi	r24, 0xF7	; 247
    1e76:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    1e7a:	0e 94 1d 11 	call	0x223a	; 0x223a <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1e7e:	80 91 fd 02 	lds	r24, 0x02FD
    1e82:	80 93 65 02 	sts	0x0265, r24
    1e86:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1e88:	80 91 fa 02 	lds	r24, 0x02FA
    1e8c:	81 3a       	cpi	r24, 0xA1	; 161
    1e8e:	a1 f4       	brne	.+40     	; 0x1eb8 <EVENT_USB_Device_ControlRequest+0x160>
    1e90:	80 91 e8 00 	lds	r24, 0x00E8
    1e94:	87 7f       	andi	r24, 0xF7	; 247
    1e96:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e9a:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    1e9e:	80 ff       	sbrs	r24, 0
    1ea0:	fc cf       	rjmp	.-8      	; 0x1e9a <EVENT_USB_Device_ControlRequest+0x142>
                Endpoint_Write_8(keyboard_idle);
    1ea2:	80 91 65 02 	lds	r24, 0x0265
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ea6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1eaa:	80 91 e8 00 	lds	r24, 0x00E8
    1eae:	8e 77       	andi	r24, 0x7E	; 126
    1eb0:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1eb4:	0c 94 1d 11 	jmp	0x223a	; 0x223a <Endpoint_ClearStatusStage>
    1eb8:	08 95       	ret

00001eba <CALLBACK_USB_GetDescriptor>:
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
    1eba:	29 2f       	mov	r18, r25
    1ebc:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1ebe:	23 30       	cpi	r18, 0x03	; 3
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	b1 f0       	breq	.+44     	; 0x1ef0 <CALLBACK_USB_GetDescriptor+0x36>
    1ec4:	4c f4       	brge	.+18     	; 0x1ed8 <CALLBACK_USB_GetDescriptor+0x1e>
    1ec6:	21 30       	cpi	r18, 0x01	; 1
    1ec8:	31 05       	cpc	r19, r1
    1eca:	09 f4       	brne	.+2      	; 0x1ece <CALLBACK_USB_GetDescriptor+0x14>
    1ecc:	4d c0       	rjmp	.+154    	; 0x1f68 <CALLBACK_USB_GetDescriptor+0xae>
    1ece:	22 30       	cpi	r18, 0x02	; 2
    1ed0:	31 05       	cpc	r19, r1
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <CALLBACK_USB_GetDescriptor+0x1c>
    1ed4:	4e c0       	rjmp	.+156    	; 0x1f72 <CALLBACK_USB_GetDescriptor+0xb8>
    1ed6:	07 c0       	rjmp	.+14     	; 0x1ee6 <CALLBACK_USB_GetDescriptor+0x2c>
    1ed8:	21 32       	cpi	r18, 0x21	; 33
    1eda:	31 05       	cpc	r19, r1
    1edc:	41 f1       	breq	.+80     	; 0x1f2e <CALLBACK_USB_GetDescriptor+0x74>
    1ede:	22 32       	cpi	r18, 0x22	; 34
    1ee0:	31 05       	cpc	r19, r1
    1ee2:	91 f1       	breq	.+100    	; 0x1f48 <CALLBACK_USB_GetDescriptor+0x8e>
    1ee4:	46 c0       	rjmp	.+140    	; 0x1f72 <CALLBACK_USB_GetDescriptor+0xb8>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1ee6:	e4 e7       	ldi	r30, 0x74	; 116
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1eea:	8d e0       	ldi	r24, 0x0D	; 13
    1eec:	95 e0       	ldi	r25, 0x05	; 5
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    1eee:	45 c0       	rjmp	.+138    	; 0x1f7a <CALLBACK_USB_GetDescriptor+0xc0>
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
    1ef0:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1ef2:	81 30       	cpi	r24, 0x01	; 1
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	69 f0       	breq	.+26     	; 0x1f12 <CALLBACK_USB_GetDescriptor+0x58>
    1ef8:	82 30       	cpi	r24, 0x02	; 2
    1efa:	91 05       	cpc	r25, r1
    1efc:	89 f0       	breq	.+34     	; 0x1f20 <CALLBACK_USB_GetDescriptor+0x66>
    1efe:	89 2b       	or	r24, r25
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <CALLBACK_USB_GetDescriptor+0x4a>
    1f02:	37 c0       	rjmp	.+110    	; 0x1f72 <CALLBACK_USB_GetDescriptor+0xb8>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1f04:	e9 e0       	ldi	r30, 0x09	; 9
    1f06:	f5 e0       	ldi	r31, 0x05	; 5
    1f08:	e4 91       	lpm	r30, Z
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
            {
                case 0x00:
                    Address = &LanguageString;
    1f0c:	89 e0       	ldi	r24, 0x09	; 9
    1f0e:	95 e0       	ldi	r25, 0x05	; 5
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
    1f10:	34 c0       	rjmp	.+104    	; 0x1f7a <CALLBACK_USB_GetDescriptor+0xc0>
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1f12:	ed ee       	ldi	r30, 0xED	; 237
    1f14:	f4 e0       	ldi	r31, 0x04	; 4
    1f16:	e4 91       	lpm	r30, Z
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case 0x01:
                    Address = &ManufacturerString;
    1f1a:	8d ee       	ldi	r24, 0xED	; 237
    1f1c:	94 e0       	ldi	r25, 0x04	; 4
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
    1f1e:	2d c0       	rjmp	.+90     	; 0x1f7a <CALLBACK_USB_GetDescriptor+0xc0>
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1f20:	e7 ed       	ldi	r30, 0xD7	; 215
    1f22:	f4 e0       	ldi	r31, 0x04	; 4
    1f24:	e4 91       	lpm	r30, Z
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1f28:	87 ed       	ldi	r24, 0xD7	; 215
    1f2a:	94 e0       	ldi	r25, 0x04	; 4
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    1f2c:	26 c0       	rjmp	.+76     	; 0x1f7a <CALLBACK_USB_GetDescriptor+0xc0>
    1f2e:	64 30       	cpi	r22, 0x04	; 4
    1f30:	00 f5       	brcc	.+64     	; 0x1f72 <CALLBACK_USB_GetDescriptor+0xb8>
    1f32:	e6 2f       	mov	r30, r22
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	ee 0f       	add	r30, r30
    1f38:	ff 1f       	adc	r31, r31
    1f3a:	e2 5e       	subi	r30, 0xE2	; 226
    1f3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f3e:	80 81       	ld	r24, Z
    1f40:	91 81       	ldd	r25, Z+1	; 0x01
    1f42:	e9 e0       	ldi	r30, 0x09	; 9
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	19 c0       	rjmp	.+50     	; 0x1f7a <CALLBACK_USB_GetDescriptor+0xc0>
    1f48:	64 30       	cpi	r22, 0x04	; 4
    1f4a:	98 f4       	brcc	.+38     	; 0x1f72 <CALLBACK_USB_GetDescriptor+0xb8>
    1f4c:	e6 2f       	mov	r30, r22
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	df 01       	movw	r26, r30
    1f52:	aa 0f       	add	r26, r26
    1f54:	bb 1f       	adc	r27, r27
    1f56:	aa 5d       	subi	r26, 0xDA	; 218
    1f58:	be 4f       	sbci	r27, 0xFE	; 254
    1f5a:	8d 91       	ld	r24, X+
    1f5c:	9c 91       	ld	r25, X
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
    1f5e:	e2 5d       	subi	r30, 0xD2	; 210
    1f60:	fe 4f       	sbci	r31, 0xFE	; 254
    1f62:	e0 81       	ld	r30, Z
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	09 c0       	rjmp	.+18     	; 0x1f7a <CALLBACK_USB_GetDescriptor+0xc0>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1f68:	e2 e1       	ldi	r30, 0x12	; 18
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1f6c:	81 e8       	ldi	r24, 0x81	; 129
    1f6e:	95 e0       	ldi	r25, 0x05	; 5
    1f70:	04 c0       	rjmp	.+8      	; 0x1f7a <CALLBACK_USB_GetDescriptor+0xc0>
    1f72:	e0 e0       	ldi	r30, 0x00	; 0
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1f7a:	da 01       	movw	r26, r20
    1f7c:	8d 93       	st	X+, r24
    1f7e:	9c 93       	st	X, r25
    return Size;
}
    1f80:	cf 01       	movw	r24, r30
    1f82:	08 95       	ret

00001f84 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1f84:	8c e0       	ldi	r24, 0x0C	; 12
    1f86:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1f88:	8e e0       	ldi	r24, 0x0E	; 14
    1f8a:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1f8c:	09 b4       	in	r0, 0x29	; 41
    1f8e:	00 fe       	sbrs	r0, 0
    1f90:	fd cf       	rjmp	.-6      	; 0x1f8c <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1f92:	80 91 d8 00 	lds	r24, 0x00D8
    1f96:	8f 7d       	andi	r24, 0xDF	; 223
    1f98:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1f9c:	80 91 e0 00 	lds	r24, 0x00E0
    1fa0:	82 60       	ori	r24, 0x02	; 2
    1fa2:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1fa6:	80 91 e0 00 	lds	r24, 0x00E0
    1faa:	81 fd       	sbrc	r24, 1
    1fac:	fc cf       	rjmp	.-8      	; 0x1fa6 <USB_Device_SendRemoteWakeup+0x22>
}
    1fae:	08 95       	ret

00001fb0 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1fb0:	8f 92       	push	r8
    1fb2:	9f 92       	push	r9
    1fb4:	af 92       	push	r10
    1fb6:	bf 92       	push	r11
    1fb8:	cf 92       	push	r12
    1fba:	df 92       	push	r13
    1fbc:	ef 92       	push	r14
    1fbe:	ff 92       	push	r15
    1fc0:	cf 93       	push	r28
    1fc2:	5c 01       	movw	r10, r24
    1fc4:	6b 01       	movw	r12, r22
    1fc6:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1fc8:	0e 94 3e 11 	call	0x227c	; 0x227c <Endpoint_WaitUntilReady>
    1fcc:	c8 2f       	mov	r28, r24
    1fce:	81 11       	cpse	r24, r1
    1fd0:	37 c0       	rjmp	.+110    	; 0x2040 <Endpoint_Write_Stream_LE+0x90>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1fd2:	e1 14       	cp	r14, r1
    1fd4:	f1 04       	cpc	r15, r1
    1fd6:	39 f0       	breq	.+14     	; 0x1fe6 <Endpoint_Write_Stream_LE+0x36>
	{
		Length -= *BytesProcessed;
    1fd8:	f7 01       	movw	r30, r14
    1fda:	20 81       	ld	r18, Z
    1fdc:	31 81       	ldd	r19, Z+1	; 0x01
    1fde:	c2 1a       	sub	r12, r18
    1fe0:	d3 0a       	sbc	r13, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1fe2:	a2 0e       	add	r10, r18
    1fe4:	b3 1e       	adc	r11, r19

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1fe6:	81 2c       	mov	r8, r1
    1fe8:	91 2c       	mov	r9, r1
    1fea:	25 c0       	rjmp	.+74     	; 0x2036 <Endpoint_Write_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1fec:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1ff0:	85 fd       	sbrc	r24, 5
    1ff2:	16 c0       	rjmp	.+44     	; 0x2020 <Endpoint_Write_Stream_LE+0x70>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ff4:	80 91 e8 00 	lds	r24, 0x00E8
    1ff8:	8e 77       	andi	r24, 0x7E	; 126
    1ffa:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1ffe:	e1 14       	cp	r14, r1
    2000:	f1 04       	cpc	r15, r1
    2002:	49 f0       	breq	.+18     	; 0x2016 <Endpoint_Write_Stream_LE+0x66>
			{
				*BytesProcessed += BytesInTransfer;
    2004:	f7 01       	movw	r30, r14
    2006:	80 81       	ld	r24, Z
    2008:	91 81       	ldd	r25, Z+1	; 0x01
    200a:	88 0d       	add	r24, r8
    200c:	99 1d       	adc	r25, r9
    200e:	91 83       	std	Z+1, r25	; 0x01
    2010:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    2012:	c5 e0       	ldi	r28, 0x05	; 5
    2014:	15 c0       	rjmp	.+42     	; 0x2040 <Endpoint_Write_Stream_LE+0x90>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    2016:	0e 94 3e 11 	call	0x227c	; 0x227c <Endpoint_WaitUntilReady>
    201a:	88 23       	and	r24, r24
    201c:	61 f0       	breq	.+24     	; 0x2036 <Endpoint_Write_Stream_LE+0x86>
    201e:	0f c0       	rjmp	.+30     	; 0x203e <Endpoint_Write_Stream_LE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    2020:	f5 01       	movw	r30, r10
    2022:	81 91       	ld	r24, Z+
    2024:	5f 01       	movw	r10, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2026:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    202a:	f1 e0       	ldi	r31, 0x01	; 1
    202c:	cf 1a       	sub	r12, r31
    202e:	d1 08       	sbc	r13, r1
			BytesInTransfer++;
    2030:	8f ef       	ldi	r24, 0xFF	; 255
    2032:	88 1a       	sub	r8, r24
    2034:	98 0a       	sbc	r9, r24
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    2036:	c1 14       	cp	r12, r1
    2038:	d1 04       	cpc	r13, r1
    203a:	c1 f6       	brne	.-80     	; 0x1fec <Endpoint_Write_Stream_LE+0x3c>
    203c:	01 c0       	rjmp	.+2      	; 0x2040 <Endpoint_Write_Stream_LE+0x90>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    203e:	c8 2f       	mov	r28, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    2040:	8c 2f       	mov	r24, r28
    2042:	cf 91       	pop	r28
    2044:	ff 90       	pop	r15
    2046:	ef 90       	pop	r14
    2048:	df 90       	pop	r13
    204a:	cf 90       	pop	r12
    204c:	bf 90       	pop	r11
    204e:	af 90       	pop	r10
    2050:	9f 90       	pop	r9
    2052:	8f 90       	pop	r8
    2054:	08 95       	ret

00002056 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2056:	20 91 00 03 	lds	r18, 0x0300
    205a:	30 91 01 03 	lds	r19, 0x0301
    205e:	26 17       	cp	r18, r22
    2060:	37 07       	cpc	r19, r23
    2062:	48 f0       	brcs	.+18     	; 0x2076 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2064:	61 15       	cp	r22, r1
    2066:	71 05       	cpc	r23, r1
    2068:	39 f4       	brne	.+14     	; 0x2078 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    206a:	20 91 e8 00 	lds	r18, 0x00E8
    206e:	2e 77       	andi	r18, 0x7E	; 126
    2070:	20 93 e8 00 	sts	0x00E8, r18
    2074:	01 c0       	rjmp	.+2      	; 0x2078 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2076:	b9 01       	movw	r22, r18
    2078:	fc 01       	movw	r30, r24
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	2c c0       	rjmp	.+88     	; 0x20d6 <Endpoint_Write_Control_Stream_LE+0x80>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    207e:	80 91 f9 02 	lds	r24, 0x02F9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2082:	88 23       	and	r24, r24
    2084:	f1 f1       	breq	.+124    	; 0x2102 <__stack+0x3>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2086:	85 30       	cpi	r24, 0x05	; 5
    2088:	f1 f1       	breq	.+124    	; 0x2106 <__stack+0x7>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    208a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    208e:	83 fd       	sbrc	r24, 3
    2090:	3c c0       	rjmp	.+120    	; 0x210a <__stack+0xb>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2092:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2096:	82 fd       	sbrc	r24, 2
    2098:	2e c0       	rjmp	.+92     	; 0x20f6 <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    209a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    209e:	80 ff       	sbrs	r24, 0
    20a0:	1a c0       	rjmp	.+52     	; 0x20d6 <Endpoint_Write_Control_Stream_LE+0x80>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    20a2:	80 91 f2 00 	lds	r24, 0x00F2
    20a6:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    20aa:	06 c0       	rjmp	.+12     	; 0x20b8 <Endpoint_Write_Control_Stream_LE+0x62>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    20ac:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20ae:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    20b2:	61 50       	subi	r22, 0x01	; 1
    20b4:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    20b6:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    20b8:	61 15       	cp	r22, r1
    20ba:	71 05       	cpc	r23, r1
    20bc:	19 f0       	breq	.+6      	; 0x20c4 <Endpoint_Write_Control_Stream_LE+0x6e>
    20be:	88 30       	cpi	r24, 0x08	; 8
    20c0:	91 05       	cpc	r25, r1
    20c2:	a0 f3       	brcs	.-24     	; 0x20ac <Endpoint_Write_Control_Stream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    20c4:	21 e0       	ldi	r18, 0x01	; 1
    20c6:	08 97       	sbiw	r24, 0x08	; 8
    20c8:	09 f0       	breq	.+2      	; 0x20cc <Endpoint_Write_Control_Stream_LE+0x76>
    20ca:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20cc:	80 91 e8 00 	lds	r24, 0x00E8
    20d0:	8e 77       	andi	r24, 0x7E	; 126
    20d2:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    20d6:	61 15       	cp	r22, r1
    20d8:	71 05       	cpc	r23, r1
    20da:	89 f6       	brne	.-94     	; 0x207e <Endpoint_Write_Control_Stream_LE+0x28>
    20dc:	21 11       	cpse	r18, r1
    20de:	cf cf       	rjmp	.-98     	; 0x207e <Endpoint_Write_Control_Stream_LE+0x28>
    20e0:	0a c0       	rjmp	.+20     	; 0x20f6 <Endpoint_Write_Control_Stream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    20e2:	80 91 f9 02 	lds	r24, 0x02F9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    20e6:	88 23       	and	r24, r24
    20e8:	61 f0       	breq	.+24     	; 0x2102 <__stack+0x3>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    20ea:	85 30       	cpi	r24, 0x05	; 5
    20ec:	61 f0       	breq	.+24     	; 0x2106 <__stack+0x7>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20ee:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    20f2:	83 fd       	sbrc	r24, 3
    20f4:	0a c0       	rjmp	.+20     	; 0x210a <__stack+0xb>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    20f6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    20fa:	82 ff       	sbrs	r24, 2
    20fc:	f2 cf       	rjmp	.-28     	; 0x20e2 <Endpoint_Write_Control_Stream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2102:	82 e0       	ldi	r24, 0x02	; 2
    2104:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    210a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    210c:	08 95       	ret

0000210e <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    210e:	20 91 00 03 	lds	r18, 0x0300
    2112:	30 91 01 03 	lds	r19, 0x0301
    2116:	26 17       	cp	r18, r22
    2118:	37 07       	cpc	r19, r23
    211a:	48 f0       	brcs	.+18     	; 0x212e <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    211c:	61 15       	cp	r22, r1
    211e:	71 05       	cpc	r23, r1
    2120:	39 f4       	brne	.+14     	; 0x2130 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2122:	20 91 e8 00 	lds	r18, 0x00E8
    2126:	2e 77       	andi	r18, 0x7E	; 126
    2128:	20 93 e8 00 	sts	0x00E8, r18
    212c:	01 c0       	rjmp	.+2      	; 0x2130 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    212e:	b9 01       	movw	r22, r18
    2130:	fc 01       	movw	r30, r24
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	2f c0       	rjmp	.+94     	; 0x2194 <Endpoint_Write_Control_PStream_LE+0x86>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2136:	80 91 f9 02 	lds	r24, 0x02F9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    213a:	88 23       	and	r24, r24
    213c:	09 f4       	brne	.+2      	; 0x2140 <Endpoint_Write_Control_PStream_LE+0x32>
    213e:	40 c0       	rjmp	.+128    	; 0x21c0 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2140:	85 30       	cpi	r24, 0x05	; 5
    2142:	09 f4       	brne	.+2      	; 0x2146 <Endpoint_Write_Control_PStream_LE+0x38>
    2144:	3f c0       	rjmp	.+126    	; 0x21c4 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2146:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    214a:	83 fd       	sbrc	r24, 3
    214c:	3d c0       	rjmp	.+122    	; 0x21c8 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    214e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2152:	82 fd       	sbrc	r24, 2
    2154:	2f c0       	rjmp	.+94     	; 0x21b4 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2156:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    215a:	80 ff       	sbrs	r24, 0
    215c:	1b c0       	rjmp	.+54     	; 0x2194 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    215e:	80 91 f2 00 	lds	r24, 0x00F2
    2162:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2166:	07 c0       	rjmp	.+14     	; 0x2176 <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2168:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    216a:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    216e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2170:	61 50       	subi	r22, 0x01	; 1
    2172:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    2174:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2176:	61 15       	cp	r22, r1
    2178:	71 05       	cpc	r23, r1
    217a:	19 f0       	breq	.+6      	; 0x2182 <Endpoint_Write_Control_PStream_LE+0x74>
    217c:	88 30       	cpi	r24, 0x08	; 8
    217e:	91 05       	cpc	r25, r1
    2180:	98 f3       	brcs	.-26     	; 0x2168 <Endpoint_Write_Control_PStream_LE+0x5a>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2182:	21 e0       	ldi	r18, 0x01	; 1
    2184:	08 97       	sbiw	r24, 0x08	; 8
    2186:	09 f0       	breq	.+2      	; 0x218a <Endpoint_Write_Control_PStream_LE+0x7c>
    2188:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    218a:	80 91 e8 00 	lds	r24, 0x00E8
    218e:	8e 77       	andi	r24, 0x7E	; 126
    2190:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2194:	61 15       	cp	r22, r1
    2196:	71 05       	cpc	r23, r1
    2198:	71 f6       	brne	.-100    	; 0x2136 <Endpoint_Write_Control_PStream_LE+0x28>
    219a:	21 11       	cpse	r18, r1
    219c:	cc cf       	rjmp	.-104    	; 0x2136 <Endpoint_Write_Control_PStream_LE+0x28>
    219e:	0a c0       	rjmp	.+20     	; 0x21b4 <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    21a0:	80 91 f9 02 	lds	r24, 0x02F9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    21a4:	88 23       	and	r24, r24
    21a6:	61 f0       	breq	.+24     	; 0x21c0 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    21a8:	85 30       	cpi	r24, 0x05	; 5
    21aa:	61 f0       	breq	.+24     	; 0x21c4 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21ac:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    21b0:	83 fd       	sbrc	r24, 3
    21b2:	0a c0       	rjmp	.+20     	; 0x21c8 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    21b4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    21b8:	82 ff       	sbrs	r24, 2
    21ba:	f2 cf       	rjmp	.-28     	; 0x21a0 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    21c4:	83 e0       	ldi	r24, 0x03	; 3
    21c6:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    21ca:	08 95       	ret

000021cc <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    21cc:	98 2f       	mov	r25, r24
    21ce:	2c c0       	rjmp	.+88     	; 0x2228 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21d0:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    21d4:	98 17       	cp	r25, r24
    21d6:	39 f0       	breq	.+14     	; 0x21e6 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    21d8:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    21dc:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    21e0:	50 91 f0 00 	lds	r21, 0x00F0
    21e4:	03 c0       	rjmp	.+6      	; 0x21ec <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    21e6:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    21e8:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    21ea:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    21ec:	21 fd       	sbrc	r18, 1
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    21f0:	9f 5f       	subi	r25, 0xFF	; 255
    21f2:	1a c0       	rjmp	.+52     	; 0x2228 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    21f4:	30 91 eb 00 	lds	r19, 0x00EB
    21f8:	3e 7f       	andi	r19, 0xFE	; 254
    21fa:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    21fe:	30 91 ed 00 	lds	r19, 0x00ED
    2202:	3d 7f       	andi	r19, 0xFD	; 253
    2204:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    2208:	30 91 eb 00 	lds	r19, 0x00EB
    220c:	31 60       	ori	r19, 0x01	; 1
    220e:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    2212:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    2216:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    221a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    221e:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    2222:	27 fd       	sbrc	r18, 7
    2224:	e5 cf       	rjmp	.-54     	; 0x21f0 <Endpoint_ConfigureEndpoint_Prv+0x24>
    2226:	07 c0       	rjmp	.+14     	; 0x2236 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    2228:	97 30       	cpi	r25, 0x07	; 7
    222a:	90 f2       	brcs	.-92     	; 0x21d0 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    222c:	8f 70       	andi	r24, 0x0F	; 15
    222e:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    2236:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    2238:	08 95       	ret

0000223a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    223a:	80 91 fa 02 	lds	r24, 0x02FA
    223e:	87 fd       	sbrc	r24, 7
    2240:	05 c0       	rjmp	.+10     	; 0x224c <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2242:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    2246:	80 ff       	sbrs	r24, 0
    2248:	0e c0       	rjmp	.+28     	; 0x2266 <Endpoint_ClearStatusStage+0x2c>
    224a:	12 c0       	rjmp	.+36     	; 0x2270 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    224c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2250:	82 fd       	sbrc	r24, 2
    2252:	05 c0       	rjmp	.+10     	; 0x225e <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2254:	80 91 f9 02 	lds	r24, 0x02F9
    2258:	81 11       	cpse	r24, r1
    225a:	f8 cf       	rjmp	.-16     	; 0x224c <Endpoint_ClearStatusStage+0x12>
    225c:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    225e:	80 91 e8 00 	lds	r24, 0x00E8
    2262:	8b 77       	andi	r24, 0x7B	; 123
    2264:	08 c0       	rjmp	.+16     	; 0x2276 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2266:	80 91 f9 02 	lds	r24, 0x02F9
    226a:	81 11       	cpse	r24, r1
    226c:	ea cf       	rjmp	.-44     	; 0x2242 <Endpoint_ClearStatusStage+0x8>
    226e:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2270:	80 91 e8 00 	lds	r24, 0x00E8
    2274:	8e 77       	andi	r24, 0x7E	; 126
    2276:	80 93 e8 00 	sts	0x00E8, r24
    227a:	08 95       	ret

0000227c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    227c:	80 91 e4 00 	lds	r24, 0x00E4
    2280:	90 91 e5 00 	lds	r25, 0x00E5
    2284:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2286:	20 91 ec 00 	lds	r18, 0x00EC
    228a:	20 fd       	sbrc	r18, 0
    228c:	1f c0       	rjmp	.+62     	; 0x22cc <Endpoint_WaitUntilReady+0x50>
    228e:	23 c0       	rjmp	.+70     	; 0x22d6 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2290:	20 91 f9 02 	lds	r18, 0x02F9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2294:	22 23       	and	r18, r18
    2296:	91 f0       	breq	.+36     	; 0x22bc <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2298:	25 30       	cpi	r18, 0x05	; 5
    229a:	91 f0       	breq	.+36     	; 0x22c0 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    229c:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    22a0:	25 fd       	sbrc	r18, 5
    22a2:	10 c0       	rjmp	.+32     	; 0x22c4 <Endpoint_WaitUntilReady+0x48>
    22a4:	20 91 e4 00 	lds	r18, 0x00E4
    22a8:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    22ac:	28 17       	cp	r18, r24
    22ae:	39 07       	cpc	r19, r25
    22b0:	51 f3       	breq	.-44     	; 0x2286 <Endpoint_WaitUntilReady+0xa>
    22b2:	41 50       	subi	r20, 0x01	; 1
    22b4:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    22b6:	39 f7       	brne	.-50     	; 0x2286 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    22b8:	84 e0       	ldi	r24, 0x04	; 4
    22ba:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    22bc:	82 e0       	ldi	r24, 0x02	; 2
    22be:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    22c0:	83 e0       	ldi	r24, 0x03	; 3
    22c2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    22cc:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    22d0:	20 ff       	sbrs	r18, 0
    22d2:	de cf       	rjmp	.-68     	; 0x2290 <Endpoint_WaitUntilReady+0x14>
    22d4:	f9 cf       	rjmp	.-14     	; 0x22c8 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    22d6:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    22da:	22 ff       	sbrs	r18, 2
    22dc:	d9 cf       	rjmp	.-78     	; 0x2290 <Endpoint_WaitUntilReady+0x14>
    22de:	f4 cf       	rjmp	.-24     	; 0x22c8 <Endpoint_WaitUntilReady+0x4c>

000022e0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    22e0:	0e 94 e6 11 	call	0x23cc	; 0x23cc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    22e4:	0e 94 ee 11 	call	0x23dc	; 0x23dc <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    22e8:	e0 ee       	ldi	r30, 0xE0	; 224
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	81 60       	ori	r24, 0x01	; 1
    22f0:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    22f2:	e8 ed       	ldi	r30, 0xD8	; 216
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	8f 77       	andi	r24, 0x7F	; 127
    22fa:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    22fc:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    22fe:	a7 ed       	ldi	r26, 0xD7	; 215
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	8c 91       	ld	r24, X
    2304:	8e 7f       	andi	r24, 0xFE	; 254
    2306:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2308:	80 81       	ld	r24, Z
    230a:	8f 7e       	andi	r24, 0xEF	; 239
    230c:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    230e:	10 92 f8 02 	sts	0x02F8, r1
    2312:	08 95       	ret

00002314 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    2314:	cf 92       	push	r12
    2316:	df 92       	push	r13
    2318:	ef 92       	push	r14
    231a:	ff 92       	push	r15
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    231c:	0e 94 e6 11 	call	0x23cc	; 0x23cc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2320:	0e 94 ee 11 	call	0x23dc	; 0x23dc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    2324:	88 ed       	ldi	r24, 0xD8	; 216
    2326:	e8 2e       	mov	r14, r24
    2328:	f1 2c       	mov	r15, r1
    232a:	f7 01       	movw	r30, r14
    232c:	80 81       	ld	r24, Z
    232e:	8f 77       	andi	r24, 0x7F	; 127
    2330:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    2332:	80 81       	ld	r24, Z
    2334:	80 68       	ori	r24, 0x80	; 128
    2336:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2338:	80 81       	ld	r24, Z
    233a:	8f 7d       	andi	r24, 0xDF	; 223
    233c:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    233e:	e7 ed       	ldi	r30, 0xD7	; 215
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	80 68       	ori	r24, 0x80	; 128
    2346:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2348:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    234a:	10 92 f9 02 	sts	0x02F9, r1
	USB_Device_ConfigurationNumber  = 0;
    234e:	10 92 f5 02 	sts	0x02F5, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    2352:	10 92 f7 02 	sts	0x02F7, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    2356:	10 92 f6 02 	sts	0x02F6, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    235a:	90 ee       	ldi	r25, 0xE0	; 224
    235c:	c9 2e       	mov	r12, r25
    235e:	d1 2c       	mov	r13, r1
    2360:	f6 01       	movw	r30, r12
    2362:	80 81       	ld	r24, Z
    2364:	8b 7f       	andi	r24, 0xFB	; 251
    2366:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    2368:	f7 01       	movw	r30, r14
    236a:	80 81       	ld	r24, Z
    236c:	81 60       	ori	r24, 0x01	; 1
    236e:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2370:	42 e0       	ldi	r20, 0x02	; 2
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	0e 94 e6 10 	call	0x21cc	; 0x21cc <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    237a:	e1 ee       	ldi	r30, 0xE1	; 225
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	8e 7f       	andi	r24, 0xFE	; 254
    2382:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2384:	e2 ee       	ldi	r30, 0xE2	; 226
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	81 60       	ori	r24, 0x01	; 1
    238c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    238e:	80 81       	ld	r24, Z
    2390:	88 60       	ori	r24, 0x08	; 8
    2392:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2394:	f6 01       	movw	r30, r12
    2396:	80 81       	ld	r24, Z
    2398:	8e 7f       	andi	r24, 0xFE	; 254
    239a:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    239c:	f7 01       	movw	r30, r14
    239e:	80 81       	ld	r24, Z
    23a0:	80 61       	ori	r24, 0x10	; 16
    23a2:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    23a4:	ff 90       	pop	r15
    23a6:	ef 90       	pop	r14
    23a8:	df 90       	pop	r13
    23aa:	cf 90       	pop	r12
    23ac:	08 95       	ret

000023ae <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    23ae:	e8 ed       	ldi	r30, 0xD8	; 216
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	8f 7e       	andi	r24, 0xEF	; 239
    23b6:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    23b8:	e7 ed       	ldi	r30, 0xD7	; 215
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	81 60       	ori	r24, 0x01	; 1
    23c0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	80 93 f8 02 	sts	0x02F8, r24

	USB_ResetInterface();
    23c8:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <USB_ResetInterface>

000023cc <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    23cc:	e8 ed       	ldi	r30, 0xD8	; 216
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	8c 7f       	andi	r24, 0xFC	; 252
    23d4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    23d6:	10 92 e2 00 	sts	0x00E2, r1
    23da:	08 95       	ret

000023dc <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    23dc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    23e0:	10 92 e1 00 	sts	0x00E1, r1
    23e4:	08 95       	ret

000023e6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    23e6:	1f 92       	push	r1
    23e8:	0f 92       	push	r0
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	0f 92       	push	r0
    23ee:	11 24       	eor	r1, r1
    23f0:	0b b6       	in	r0, 0x3b	; 59
    23f2:	0f 92       	push	r0
    23f4:	2f 93       	push	r18
    23f6:	3f 93       	push	r19
    23f8:	4f 93       	push	r20
    23fa:	5f 93       	push	r21
    23fc:	6f 93       	push	r22
    23fe:	7f 93       	push	r23
    2400:	8f 93       	push	r24
    2402:	9f 93       	push	r25
    2404:	af 93       	push	r26
    2406:	bf 93       	push	r27
    2408:	ef 93       	push	r30
    240a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    240c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2410:	82 ff       	sbrs	r24, 2
    2412:	0b c0       	rjmp	.+22     	; 0x242a <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    2414:	80 91 e2 00 	lds	r24, 0x00E2
    2418:	82 ff       	sbrs	r24, 2
    241a:	07 c0       	rjmp	.+14     	; 0x242a <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    241c:	80 91 e1 00 	lds	r24, 0x00E1
    2420:	8b 7f       	andi	r24, 0xFB	; 251
    2422:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    2426:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    242a:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    242e:	80 ff       	sbrs	r24, 0
    2430:	1f c0       	rjmp	.+62     	; 0x2470 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    2432:	80 91 d8 00 	lds	r24, 0x00D8
    2436:	80 ff       	sbrs	r24, 0
    2438:	1b c0       	rjmp	.+54     	; 0x2470 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    243a:	80 91 da 00 	lds	r24, 0x00DA
    243e:	8e 7f       	andi	r24, 0xFE	; 254
    2440:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    2444:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    2448:	80 ff       	sbrs	r24, 0
    244a:	0d c0       	rjmp	.+26     	; 0x2466 <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    244c:	8c e0       	ldi	r24, 0x0C	; 12
    244e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2450:	8e e0       	ldi	r24, 0x0E	; 14
    2452:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2454:	09 b4       	in	r0, 0x29	; 41
    2456:	00 fe       	sbrs	r0, 0
    2458:	fd cf       	rjmp	.-6      	; 0x2454 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	80 93 f9 02 	sts	0x02F9, r24
			EVENT_USB_Device_Connect();
    2460:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <EVENT_USB_Device_Connect>
    2464:	05 c0       	rjmp	.+10     	; 0x2470 <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2466:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    2468:	10 92 f9 02 	sts	0x02F9, r1
			EVENT_USB_Device_Disconnect();
    246c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2470:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2474:	80 ff       	sbrs	r24, 0
    2476:	19 c0       	rjmp	.+50     	; 0x24aa <__vector_10+0xc4>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    2478:	80 91 e2 00 	lds	r24, 0x00E2
    247c:	80 ff       	sbrs	r24, 0
    247e:	15 c0       	rjmp	.+42     	; 0x24aa <__vector_10+0xc4>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2480:	80 91 e2 00 	lds	r24, 0x00E2
    2484:	8e 7f       	andi	r24, 0xFE	; 254
    2486:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    248a:	80 91 e2 00 	lds	r24, 0x00E2
    248e:	80 61       	ori	r24, 0x10	; 16
    2490:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2494:	80 91 d8 00 	lds	r24, 0x00D8
    2498:	80 62       	ori	r24, 0x20	; 32
    249a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    249e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    24a0:	85 e0       	ldi	r24, 0x05	; 5
    24a2:	80 93 f9 02 	sts	0x02F9, r24
		EVENT_USB_Device_Suspend();
    24a6:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    24aa:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    24ae:	84 ff       	sbrs	r24, 4
    24b0:	30 c0       	rjmp	.+96     	; 0x2512 <__vector_10+0x12c>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    24b2:	80 91 e2 00 	lds	r24, 0x00E2
    24b6:	84 ff       	sbrs	r24, 4
    24b8:	2c c0       	rjmp	.+88     	; 0x2512 <__vector_10+0x12c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    24ba:	8c e0       	ldi	r24, 0x0C	; 12
    24bc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    24be:	8e e0       	ldi	r24, 0x0E	; 14
    24c0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    24c2:	09 b4       	in	r0, 0x29	; 41
    24c4:	00 fe       	sbrs	r0, 0
    24c6:	fd cf       	rjmp	.-6      	; 0x24c2 <__vector_10+0xdc>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    24c8:	80 91 d8 00 	lds	r24, 0x00D8
    24cc:	8f 7d       	andi	r24, 0xDF	; 223
    24ce:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    24d2:	80 91 e1 00 	lds	r24, 0x00E1
    24d6:	8f 7e       	andi	r24, 0xEF	; 239
    24d8:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    24dc:	80 91 e2 00 	lds	r24, 0x00E2
    24e0:	8f 7e       	andi	r24, 0xEF	; 239
    24e2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    24e6:	80 91 e2 00 	lds	r24, 0x00E2
    24ea:	81 60       	ori	r24, 0x01	; 1
    24ec:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    24f0:	80 91 f5 02 	lds	r24, 0x02F5
    24f4:	88 23       	and	r24, r24
    24f6:	11 f0       	breq	.+4      	; 0x24fc <__vector_10+0x116>
		  USB_DeviceState = DEVICE_STATE_Configured;
    24f8:	84 e0       	ldi	r24, 0x04	; 4
    24fa:	07 c0       	rjmp	.+14     	; 0x250a <__vector_10+0x124>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    24fc:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2500:	87 ff       	sbrs	r24, 7
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <__vector_10+0x122>
    2504:	83 e0       	ldi	r24, 0x03	; 3
    2506:	01 c0       	rjmp	.+2      	; 0x250a <__vector_10+0x124>
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	80 93 f9 02 	sts	0x02F9, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    250e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2512:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2516:	83 ff       	sbrs	r24, 3
    2518:	29 c0       	rjmp	.+82     	; 0x256c <__vector_10+0x186>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    251a:	80 91 e2 00 	lds	r24, 0x00E2
    251e:	83 ff       	sbrs	r24, 3
    2520:	25 c0       	rjmp	.+74     	; 0x256c <__vector_10+0x186>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2522:	80 91 e1 00 	lds	r24, 0x00E1
    2526:	87 7f       	andi	r24, 0xF7	; 247
    2528:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    252c:	82 e0       	ldi	r24, 0x02	; 2
    252e:	80 93 f9 02 	sts	0x02F9, r24
		USB_Device_ConfigurationNumber = 0;
    2532:	10 92 f5 02 	sts	0x02F5, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2536:	80 91 e1 00 	lds	r24, 0x00E1
    253a:	8e 7f       	andi	r24, 0xFE	; 254
    253c:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2540:	80 91 e2 00 	lds	r24, 0x00E2
    2544:	8e 7f       	andi	r24, 0xFE	; 254
    2546:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    254a:	80 91 e2 00 	lds	r24, 0x00E2
    254e:	80 61       	ori	r24, 0x10	; 16
    2550:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2554:	42 e0       	ldi	r20, 0x02	; 2
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    255e:	80 91 f0 00 	lds	r24, 0x00F0
    2562:	88 60       	ori	r24, 0x08	; 8
    2564:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    2568:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    256c:	ff 91       	pop	r31
    256e:	ef 91       	pop	r30
    2570:	bf 91       	pop	r27
    2572:	af 91       	pop	r26
    2574:	9f 91       	pop	r25
    2576:	8f 91       	pop	r24
    2578:	7f 91       	pop	r23
    257a:	6f 91       	pop	r22
    257c:	5f 91       	pop	r21
    257e:	4f 91       	pop	r20
    2580:	3f 91       	pop	r19
    2582:	2f 91       	pop	r18
    2584:	0f 90       	pop	r0
    2586:	0b be       	out	0x3b, r0	; 59
    2588:	0f 90       	pop	r0
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	0f 90       	pop	r0
    258e:	1f 90       	pop	r1
    2590:	18 95       	reti

00002592 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    2592:	1f 92       	push	r1
    2594:	0f 92       	push	r0
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	0f 92       	push	r0
    259a:	11 24       	eor	r1, r1
    259c:	0b b6       	in	r0, 0x3b	; 59
    259e:	0f 92       	push	r0
    25a0:	2f 93       	push	r18
    25a2:	3f 93       	push	r19
    25a4:	4f 93       	push	r20
    25a6:	5f 93       	push	r21
    25a8:	6f 93       	push	r22
    25aa:	7f 93       	push	r23
    25ac:	8f 93       	push	r24
    25ae:	9f 93       	push	r25
    25b0:	af 93       	push	r26
    25b2:	bf 93       	push	r27
    25b4:	cf 93       	push	r28
    25b6:	ef 93       	push	r30
    25b8:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    25ba:	80 91 e9 00 	lds	r24, 0x00E9
    25be:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    25c0:	90 91 ec 00 	lds	r25, 0x00EC
    25c4:	90 ff       	sbrs	r25, 0
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <__vector_11+0x3a>
    25c8:	90 e8       	ldi	r25, 0x80	; 128
    25ca:	01 c0       	rjmp	.+2      	; 0x25ce <__vector_11+0x3c>
    25cc:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    25ce:	c9 2f       	mov	r28, r25
    25d0:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    25d2:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    25d6:	80 91 f0 00 	lds	r24, 0x00F0
    25da:	87 7f       	andi	r24, 0xF7	; 247
    25dc:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    25e0:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    25e2:	0e 94 11 13 	call	0x2622	; 0x2622 <USB_Device_ProcessControlRequest>
    25e6:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    25ea:	80 91 f0 00 	lds	r24, 0x00F0
    25ee:	88 60       	ori	r24, 0x08	; 8
    25f0:	80 93 f0 00 	sts	0x00F0, r24
    25f4:	cf 70       	andi	r28, 0x0F	; 15
    25f6:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    25fa:	ff 91       	pop	r31
    25fc:	ef 91       	pop	r30
    25fe:	cf 91       	pop	r28
    2600:	bf 91       	pop	r27
    2602:	af 91       	pop	r26
    2604:	9f 91       	pop	r25
    2606:	8f 91       	pop	r24
    2608:	7f 91       	pop	r23
    260a:	6f 91       	pop	r22
    260c:	5f 91       	pop	r21
    260e:	4f 91       	pop	r20
    2610:	3f 91       	pop	r19
    2612:	2f 91       	pop	r18
    2614:	0f 90       	pop	r0
    2616:	0b be       	out	0x3b, r0	; 59
    2618:	0f 90       	pop	r0
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	0f 90       	pop	r0
    261e:	1f 90       	pop	r1
    2620:	18 95       	reti

00002622 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2622:	1f 93       	push	r17
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	ac 97       	sbiw	r28, 0x2c	; 44
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    2638:	ea ef       	ldi	r30, 0xFA	; 250
    263a:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    263c:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2640:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2642:	23 e0       	ldi	r18, 0x03	; 3
    2644:	e2 30       	cpi	r30, 0x02	; 2
    2646:	f2 07       	cpc	r31, r18
    2648:	c9 f7       	brne	.-14     	; 0x263c <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    264a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    264e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    2652:	83 ff       	sbrs	r24, 3
    2654:	37 c1       	rjmp	.+622    	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2656:	80 91 fa 02 	lds	r24, 0x02FA

		switch (USB_ControlRequest.bRequest)
    265a:	90 91 fb 02 	lds	r25, 0x02FB
    265e:	95 30       	cpi	r25, 0x05	; 5
    2660:	09 f4       	brne	.+2      	; 0x2664 <USB_Device_ProcessControlRequest+0x42>
    2662:	88 c0       	rjmp	.+272    	; 0x2774 <USB_Device_ProcessControlRequest+0x152>
    2664:	38 f4       	brcc	.+14     	; 0x2674 <USB_Device_ProcessControlRequest+0x52>
    2666:	91 30       	cpi	r25, 0x01	; 1
    2668:	b1 f1       	breq	.+108    	; 0x26d6 <USB_Device_ProcessControlRequest+0xb4>
    266a:	70 f0       	brcs	.+28     	; 0x2688 <USB_Device_ProcessControlRequest+0x66>
    266c:	93 30       	cpi	r25, 0x03	; 3
    266e:	09 f0       	breq	.+2      	; 0x2672 <USB_Device_ProcessControlRequest+0x50>
    2670:	29 c1       	rjmp	.+594    	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
    2672:	31 c0       	rjmp	.+98     	; 0x26d6 <USB_Device_ProcessControlRequest+0xb4>
    2674:	98 30       	cpi	r25, 0x08	; 8
    2676:	09 f4       	brne	.+2      	; 0x267a <USB_Device_ProcessControlRequest+0x58>
    2678:	f8 c0       	rjmp	.+496    	; 0x286a <USB_Device_ProcessControlRequest+0x248>
    267a:	99 30       	cpi	r25, 0x09	; 9
    267c:	09 f4       	brne	.+2      	; 0x2680 <USB_Device_ProcessControlRequest+0x5e>
    267e:	04 c1       	rjmp	.+520    	; 0x2888 <USB_Device_ProcessControlRequest+0x266>
    2680:	96 30       	cpi	r25, 0x06	; 6
    2682:	09 f0       	breq	.+2      	; 0x2686 <USB_Device_ProcessControlRequest+0x64>
    2684:	1f c1       	rjmp	.+574    	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
    2686:	9d c0       	rjmp	.+314    	; 0x27c2 <USB_Device_ProcessControlRequest+0x1a0>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2688:	80 38       	cpi	r24, 0x80	; 128
    268a:	21 f0       	breq	.+8      	; 0x2694 <USB_Device_ProcessControlRequest+0x72>
    268c:	82 38       	cpi	r24, 0x82	; 130
    268e:	09 f0       	breq	.+2      	; 0x2692 <USB_Device_ProcessControlRequest+0x70>
    2690:	19 c1       	rjmp	.+562    	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
    2692:	08 c0       	rjmp	.+16     	; 0x26a4 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2694:	80 91 f6 02 	lds	r24, 0x02F6
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2698:	90 91 f7 02 	lds	r25, 0x02F7
    269c:	99 23       	and	r25, r25
    269e:	89 f0       	breq	.+34     	; 0x26c2 <USB_Device_ProcessControlRequest+0xa0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    26a0:	82 60       	ori	r24, 0x02	; 2
    26a2:	0f c0       	rjmp	.+30     	; 0x26c2 <USB_Device_ProcessControlRequest+0xa0>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    26a4:	80 91 fe 02 	lds	r24, 0x02FE
    26a8:	90 91 ff 02 	lds	r25, 0x02FF
    26ac:	8f 70       	andi	r24, 0x0F	; 15
    26ae:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    26b0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    26b4:	80 91 eb 00 	lds	r24, 0x00EB
    26b8:	85 fb       	bst	r24, 5
    26ba:	88 27       	eor	r24, r24
    26bc:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    26be:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    26c2:	90 91 e8 00 	lds	r25, 0x00E8
    26c6:	97 7f       	andi	r25, 0xF7	; 247
    26c8:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    26cc:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    26d0:	10 92 f1 00 	sts	0x00F1, r1
    26d4:	d5 c0       	rjmp	.+426    	; 0x2880 <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    26d6:	88 23       	and	r24, r24
    26d8:	19 f0       	breq	.+6      	; 0x26e0 <USB_Device_ProcessControlRequest+0xbe>
    26da:	82 30       	cpi	r24, 0x02	; 2
    26dc:	09 f0       	breq	.+2      	; 0x26e0 <USB_Device_ProcessControlRequest+0xbe>
    26de:	f2 c0       	rjmp	.+484    	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    26e0:	8f 71       	andi	r24, 0x1F	; 31
    26e2:	21 f0       	breq	.+8      	; 0x26ec <USB_Device_ProcessControlRequest+0xca>
    26e4:	82 30       	cpi	r24, 0x02	; 2
    26e6:	09 f0       	breq	.+2      	; 0x26ea <USB_Device_ProcessControlRequest+0xc8>
    26e8:	ed c0       	rjmp	.+474    	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
    26ea:	0b c0       	rjmp	.+22     	; 0x2702 <USB_Device_ProcessControlRequest+0xe0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    26ec:	80 91 fc 02 	lds	r24, 0x02FC
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	09 f0       	breq	.+2      	; 0x26f6 <USB_Device_ProcessControlRequest+0xd4>
    26f4:	e7 c0       	rjmp	.+462    	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    26f6:	93 30       	cpi	r25, 0x03	; 3
    26f8:	09 f0       	breq	.+2      	; 0x26fc <USB_Device_ProcessControlRequest+0xda>
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	80 93 f7 02 	sts	0x02F7, r24
    2700:	2f c0       	rjmp	.+94     	; 0x2760 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2702:	80 91 fc 02 	lds	r24, 0x02FC
    2706:	81 11       	cpse	r24, r1
    2708:	2b c0       	rjmp	.+86     	; 0x2760 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    270a:	80 91 fe 02 	lds	r24, 0x02FE
    270e:	90 91 ff 02 	lds	r25, 0x02FF
    2712:	8f 70       	andi	r24, 0x0F	; 15
    2714:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	09 f4       	brne	.+2      	; 0x271c <USB_Device_ProcessControlRequest+0xfa>
    271a:	d4 c0       	rjmp	.+424    	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    271c:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2720:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2724:	20 ff       	sbrs	r18, 0
    2726:	1c c0       	rjmp	.+56     	; 0x2760 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2728:	20 91 fb 02 	lds	r18, 0x02FB
    272c:	23 30       	cpi	r18, 0x03	; 3
    272e:	21 f4       	brne	.+8      	; 0x2738 <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2730:	80 91 eb 00 	lds	r24, 0x00EB
    2734:	80 62       	ori	r24, 0x20	; 32
    2736:	12 c0       	rjmp	.+36     	; 0x275c <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2738:	90 91 eb 00 	lds	r25, 0x00EB
    273c:	90 61       	ori	r25, 0x10	; 16
    273e:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2742:	21 e0       	ldi	r18, 0x01	; 1
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	01 c0       	rjmp	.+2      	; 0x274a <USB_Device_ProcessControlRequest+0x128>
    2748:	22 0f       	add	r18, r18
    274a:	8a 95       	dec	r24
    274c:	ea f7       	brpl	.-6      	; 0x2748 <USB_Device_ProcessControlRequest+0x126>
    274e:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    2752:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2756:	80 91 eb 00 	lds	r24, 0x00EB
    275a:	88 60       	ori	r24, 0x08	; 8
    275c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2760:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2764:	80 91 e8 00 	lds	r24, 0x00E8
    2768:	87 7f       	andi	r24, 0xF7	; 247
    276a:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    276e:	0e 94 1d 11 	call	0x223a	; 0x223a <Endpoint_ClearStatusStage>
    2772:	a8 c0       	rjmp	.+336    	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2774:	81 11       	cpse	r24, r1
    2776:	a6 c0       	rjmp	.+332    	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2778:	80 91 fc 02 	lds	r24, 0x02FC
    277c:	90 91 fd 02 	lds	r25, 0x02FD
    2780:	8f 77       	andi	r24, 0x7F	; 127
    2782:	99 27       	eor	r25, r25
    2784:	18 2f       	mov	r17, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2786:	90 91 e3 00 	lds	r25, 0x00E3
    278a:	90 78       	andi	r25, 0x80	; 128
    278c:	98 2b       	or	r25, r24
    278e:	90 93 e3 00 	sts	0x00E3, r25
    2792:	80 91 e8 00 	lds	r24, 0x00E8
    2796:	87 7f       	andi	r24, 0xF7	; 247
    2798:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    279c:	0e 94 1d 11 	call	0x223a	; 0x223a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    27a0:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    27a4:	80 ff       	sbrs	r24, 0
    27a6:	fc cf       	rjmp	.-8      	; 0x27a0 <USB_Device_ProcessControlRequest+0x17e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    27a8:	80 91 e3 00 	lds	r24, 0x00E3
    27ac:	80 68       	ori	r24, 0x80	; 128
    27ae:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    27b2:	11 23       	and	r17, r17
    27b4:	11 f0       	breq	.+4      	; 0x27ba <USB_Device_ProcessControlRequest+0x198>
    27b6:	83 e0       	ldi	r24, 0x03	; 3
    27b8:	01 c0       	rjmp	.+2      	; 0x27bc <USB_Device_ProcessControlRequest+0x19a>
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	80 93 f9 02 	sts	0x02F9, r24
    27c0:	81 c0       	rjmp	.+258    	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    27c2:	80 58       	subi	r24, 0x80	; 128
    27c4:	82 30       	cpi	r24, 0x02	; 2
    27c6:	08 f0       	brcs	.+2      	; 0x27ca <USB_Device_ProcessControlRequest+0x1a8>
    27c8:	7d c0       	rjmp	.+250    	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    27ca:	80 91 fc 02 	lds	r24, 0x02FC
    27ce:	90 91 fd 02 	lds	r25, 0x02FD
    27d2:	8c 3d       	cpi	r24, 0xDC	; 220
    27d4:	23 e0       	ldi	r18, 0x03	; 3
    27d6:	92 07       	cpc	r25, r18
    27d8:	79 f5       	brne	.+94     	; 0x2838 <USB_Device_ProcessControlRequest+0x216>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    27da:	83 e0       	ldi	r24, 0x03	; 3
    27dc:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    27de:	8a e2       	ldi	r24, 0x2A	; 42
    27e0:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    27e2:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    27e4:	f8 94       	cli

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    27e6:	de 01       	movw	r26, r28
    27e8:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    27ea:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    27ec:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    27ee:	51 e2       	ldi	r21, 0x21	; 33
    27f0:	e3 2f       	mov	r30, r19
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	50 93 57 00 	sts	0x0057, r21
    27f8:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    27fa:	20 ff       	sbrs	r18, 0
    27fc:	03 c0       	rjmp	.+6      	; 0x2804 <USB_Device_ProcessControlRequest+0x1e2>
					{
						SerialByte >>= 4;
    27fe:	e2 95       	swap	r30
    2800:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    2802:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2804:	ef 70       	andi	r30, 0x0F	; 15
    2806:	8e 2f       	mov	r24, r30
    2808:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    280a:	ea 30       	cpi	r30, 0x0A	; 10
    280c:	10 f0       	brcs	.+4      	; 0x2812 <USB_Device_ProcessControlRequest+0x1f0>
    280e:	c7 96       	adiw	r24, 0x37	; 55
    2810:	01 c0       	rjmp	.+2      	; 0x2814 <USB_Device_ProcessControlRequest+0x1f2>
    2812:	c0 96       	adiw	r24, 0x30	; 48
    2814:	8d 93       	st	X+, r24
    2816:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2818:	2f 5f       	subi	r18, 0xFF	; 255
    281a:	24 31       	cpi	r18, 0x14	; 20
    281c:	49 f7       	brne	.-46     	; 0x27f0 <USB_Device_ProcessControlRequest+0x1ce>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    281e:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2820:	80 91 e8 00 	lds	r24, 0x00E8
    2824:	87 7f       	andi	r24, 0xF7	; 247
    2826:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    282a:	6a e2       	ldi	r22, 0x2A	; 42
    282c:	70 e0       	ldi	r23, 0x00	; 0
    282e:	ce 01       	movw	r24, r28
    2830:	01 96       	adiw	r24, 0x01	; 1
    2832:	0e 94 2b 10 	call	0x2056	; 0x2056 <Endpoint_Write_Control_Stream_LE>
    2836:	13 c0       	rjmp	.+38     	; 0x285e <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2838:	ae 01       	movw	r20, r28
    283a:	45 5d       	subi	r20, 0xD5	; 213
    283c:	5f 4f       	sbci	r21, 0xFF	; 255
    283e:	60 91 fe 02 	lds	r22, 0x02FE
    2842:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <CALLBACK_USB_GetDescriptor>
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	e9 f1       	breq	.+122    	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
    284a:	20 91 e8 00 	lds	r18, 0x00E8
    284e:	27 7f       	andi	r18, 0xF7	; 247
    2850:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2854:	bc 01       	movw	r22, r24
    2856:	8b a5       	ldd	r24, Y+43	; 0x2b
    2858:	9c a5       	ldd	r25, Y+44	; 0x2c
    285a:	0e 94 87 10 	call	0x210e	; 0x210e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    285e:	80 91 e8 00 	lds	r24, 0x00E8
    2862:	8b 77       	andi	r24, 0x7B	; 123
    2864:	80 93 e8 00 	sts	0x00E8, r24
    2868:	2d c0       	rjmp	.+90     	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    286a:	80 38       	cpi	r24, 0x80	; 128
    286c:	59 f5       	brne	.+86     	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    286e:	80 91 e8 00 	lds	r24, 0x00E8
    2872:	87 7f       	andi	r24, 0xF7	; 247
    2874:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2878:	80 91 f5 02 	lds	r24, 0x02F5
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    287c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2880:	80 91 e8 00 	lds	r24, 0x00E8
    2884:	8e 77       	andi	r24, 0x7E	; 126
    2886:	71 cf       	rjmp	.-286    	; 0x276a <USB_Device_ProcessControlRequest+0x148>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2888:	81 11       	cpse	r24, r1
    288a:	1c c0       	rjmp	.+56     	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    288c:	90 91 fc 02 	lds	r25, 0x02FC
    2890:	92 30       	cpi	r25, 0x02	; 2
    2892:	c0 f4       	brcc	.+48     	; 0x28c4 <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2894:	80 91 e8 00 	lds	r24, 0x00E8
    2898:	87 7f       	andi	r24, 0xF7	; 247
    289a:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    289e:	90 93 f5 02 	sts	0x02F5, r25

	Endpoint_ClearStatusStage();
    28a2:	0e 94 1d 11 	call	0x223a	; 0x223a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    28a6:	80 91 f5 02 	lds	r24, 0x02F5
    28aa:	81 11       	cpse	r24, r1
    28ac:	04 c0       	rjmp	.+8      	; 0x28b6 <USB_Device_ProcessControlRequest+0x294>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    28ae:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    28b2:	87 ff       	sbrs	r24, 7
    28b4:	02 c0       	rjmp	.+4      	; 0x28ba <USB_Device_ProcessControlRequest+0x298>
    28b6:	84 e0       	ldi	r24, 0x04	; 4
    28b8:	01 c0       	rjmp	.+2      	; 0x28bc <USB_Device_ProcessControlRequest+0x29a>
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	80 93 f9 02 	sts	0x02F9, r24

	EVENT_USB_Device_ConfigurationChanged();
    28c0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    28c4:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    28c8:	83 ff       	sbrs	r24, 3
    28ca:	0a c0       	rjmp	.+20     	; 0x28e0 <USB_Device_ProcessControlRequest+0x2be>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    28cc:	80 91 e8 00 	lds	r24, 0x00E8
    28d0:	87 7f       	andi	r24, 0xF7	; 247
    28d2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    28d6:	80 91 eb 00 	lds	r24, 0x00EB
    28da:	80 62       	ori	r24, 0x20	; 32
    28dc:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    28e0:	ac 96       	adiw	r28, 0x2c	; 44
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	de bf       	out	0x3e, r29	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	cd bf       	out	0x3d, r28	; 61
    28ec:	df 91       	pop	r29
    28ee:	cf 91       	pop	r28
    28f0:	1f 91       	pop	r17
    28f2:	08 95       	ret

000028f4 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    28f4:	90 93 73 02 	sts	0x0273, r25
    28f8:	80 93 72 02 	sts	0x0272, r24
    28fc:	08 95       	ret

000028fe <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    28fe:	e0 91 72 02 	lds	r30, 0x0272
    2902:	f0 91 73 02 	lds	r31, 0x0273
    2906:	30 97       	sbiw	r30, 0x00	; 0
    2908:	21 f0       	breq	.+8      	; 0x2912 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    290a:	01 90       	ld	r0, Z+
    290c:	f0 81       	ld	r31, Z
    290e:	e0 2d       	mov	r30, r0
    2910:	09 94       	ijmp
}
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	08 95       	ret

00002916 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2916:	cf 92       	push	r12
    2918:	df 92       	push	r13
    291a:	ef 92       	push	r14
    291c:	ff 92       	push	r15
    291e:	cf 93       	push	r28
    2920:	d8 2e       	mov	r13, r24
    2922:	c9 2f       	mov	r28, r25
    if (!driver) return;
    2924:	e0 91 72 02 	lds	r30, 0x0272
    2928:	f0 91 73 02 	lds	r31, 0x0273
    292c:	30 97       	sbiw	r30, 0x00	; 0
    292e:	c1 f1       	breq	.+112    	; 0x29a0 <host_keyboard_send+0x8a>
    (*driver->send_keyboard)(report);
    2930:	02 80       	ldd	r0, Z+2	; 0x02
    2932:	f3 81       	ldd	r31, Z+3	; 0x03
    2934:	e0 2d       	mov	r30, r0
    2936:	09 95       	icall

    if (debug_keyboard) {
    2938:	80 91 e4 02 	lds	r24, 0x02E4
    293c:	82 ff       	sbrs	r24, 2
    293e:	30 c0       	rjmp	.+96     	; 0x29a0 <host_keyboard_send+0x8a>
        dprint("keyboard_report: ");
    2940:	80 ff       	sbrs	r24, 0
    2942:	04 c0       	rjmp	.+8      	; 0x294c <host_keyboard_send+0x36>
    2944:	85 e7       	ldi	r24, 0x75	; 117
    2946:	96 e0       	ldi	r25, 0x06	; 6
    2948:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    294c:	ed 2c       	mov	r14, r13
    294e:	fc 2e       	mov	r15, r28
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2950:	c8 e0       	ldi	r28, 0x08	; 8
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2952:	87 e8       	ldi	r24, 0x87	; 135
    2954:	c8 2e       	mov	r12, r24
    2956:	86 e0       	ldi	r24, 0x06	; 6
    2958:	d8 2e       	mov	r13, r24
    295a:	80 91 e4 02 	lds	r24, 0x02E4
    295e:	80 ff       	sbrs	r24, 0
    2960:	0c c0       	rjmp	.+24     	; 0x297a <host_keyboard_send+0x64>
    2962:	f7 01       	movw	r30, r14
    2964:	80 81       	ld	r24, Z
    2966:	1f 92       	push	r1
    2968:	8f 93       	push	r24
    296a:	df 92       	push	r13
    296c:	cf 92       	push	r12
    296e:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	0f 90       	pop	r0
    297a:	c1 50       	subi	r28, 0x01	; 1
    297c:	ff ef       	ldi	r31, 0xFF	; 255
    297e:	ef 1a       	sub	r14, r31
    2980:	ff 0a       	sbc	r15, r31
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    2982:	c1 11       	cpse	r28, r1
    2984:	ea cf       	rjmp	.-44     	; 0x295a <host_keyboard_send+0x44>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2986:	80 91 e4 02 	lds	r24, 0x02E4
    298a:	80 ff       	sbrs	r24, 0
    298c:	09 c0       	rjmp	.+18     	; 0x29a0 <host_keyboard_send+0x8a>
    298e:	8d e8       	ldi	r24, 0x8D	; 141
    2990:	96 e0       	ldi	r25, 0x06	; 6
    }
}
    2992:	cf 91       	pop	r28
    2994:	ff 90       	pop	r15
    2996:	ef 90       	pop	r14
    2998:	df 90       	pop	r13
    299a:	cf 90       	pop	r12
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    299c:	0c 94 64 07 	jmp	0xec8	; 0xec8 <xputs>
    }
}
    29a0:	cf 91       	pop	r28
    29a2:	ff 90       	pop	r15
    29a4:	ef 90       	pop	r14
    29a6:	df 90       	pop	r13
    29a8:	cf 90       	pop	r12
    29aa:	08 95       	ret

000029ac <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    29ac:	e0 91 72 02 	lds	r30, 0x0272
    29b0:	f0 91 73 02 	lds	r31, 0x0273
    29b4:	30 97       	sbiw	r30, 0x00	; 0
    29b6:	21 f0       	breq	.+8      	; 0x29c0 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    29b8:	04 80       	ldd	r0, Z+4	; 0x04
    29ba:	f5 81       	ldd	r31, Z+5	; 0x05
    29bc:	e0 2d       	mov	r30, r0
    29be:	09 94       	ijmp
    29c0:	08 95       	ret

000029c2 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    29c2:	20 91 74 02 	lds	r18, 0x0274
    29c6:	30 91 75 02 	lds	r19, 0x0275
    29ca:	82 17       	cp	r24, r18
    29cc:	93 07       	cpc	r25, r19
    29ce:	71 f0       	breq	.+28     	; 0x29ec <host_system_send+0x2a>
    last_system_report = report;
    29d0:	90 93 75 02 	sts	0x0275, r25
    29d4:	80 93 74 02 	sts	0x0274, r24

    if (!driver) return;
    29d8:	e0 91 72 02 	lds	r30, 0x0272
    29dc:	f0 91 73 02 	lds	r31, 0x0273
    29e0:	30 97       	sbiw	r30, 0x00	; 0
    29e2:	21 f0       	breq	.+8      	; 0x29ec <host_system_send+0x2a>
    (*driver->send_system)(report);
    29e4:	06 80       	ldd	r0, Z+6	; 0x06
    29e6:	f7 81       	ldd	r31, Z+7	; 0x07
    29e8:	e0 2d       	mov	r30, r0
    29ea:	09 94       	ijmp
    29ec:	08 95       	ret

000029ee <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    29ee:	20 91 76 02 	lds	r18, 0x0276
    29f2:	30 91 77 02 	lds	r19, 0x0277
    29f6:	82 17       	cp	r24, r18
    29f8:	93 07       	cpc	r25, r19
    29fa:	71 f0       	breq	.+28     	; 0x2a18 <host_consumer_send+0x2a>
    last_consumer_report = report;
    29fc:	90 93 77 02 	sts	0x0277, r25
    2a00:	80 93 76 02 	sts	0x0276, r24

    if (!driver) return;
    2a04:	e0 91 72 02 	lds	r30, 0x0272
    2a08:	f0 91 73 02 	lds	r31, 0x0273
    2a0c:	30 97       	sbiw	r30, 0x00	; 0
    2a0e:	21 f0       	breq	.+8      	; 0x2a18 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    2a10:	00 84       	ldd	r0, Z+8	; 0x08
    2a12:	f1 85       	ldd	r31, Z+9	; 0x09
    2a14:	e0 2d       	mov	r30, r0
    2a16:	09 94       	ijmp
    2a18:	08 95       	ret

00002a1a <keyboard_init>:
    matrix_setup();
}

void keyboard_init(void)
{
    timer_init();
    2a1a:	0e 94 44 22 	call	0x4488	; 0x4488 <timer_init>
    matrix_init();
    2a1e:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    2a22:	0c 94 2d 23 	jmp	0x465a	; 0x465a <bootmagic>

00002a26 <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    2a26:	cf 93       	push	r28
    2a28:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    2a2a:	80 91 e4 02 	lds	r24, 0x02E4
    2a2e:	82 ff       	sbrs	r24, 2
    2a30:	1e c0       	rjmp	.+60     	; 0x2a6e <keyboard_set_leds+0x48>
    2a32:	80 ff       	sbrs	r24, 0
    2a34:	04 c0       	rjmp	.+8      	; 0x2a3e <keyboard_set_leds+0x18>
    2a36:	8f e8       	ldi	r24, 0x8F	; 143
    2a38:	96 e0       	ldi	r25, 0x06	; 6
    2a3a:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    2a3e:	80 91 e4 02 	lds	r24, 0x02E4
    2a42:	80 ff       	sbrs	r24, 0
    2a44:	0c c0       	rjmp	.+24     	; 0x2a5e <keyboard_set_leds+0x38>
    2a46:	1f 92       	push	r1
    2a48:	cf 93       	push	r28
    2a4a:	22 ea       	ldi	r18, 0xA2	; 162
    2a4c:	36 e0       	ldi	r19, 0x06	; 6
    2a4e:	3f 93       	push	r19
    2a50:	2f 93       	push	r18
    2a52:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	80 91 e4 02 	lds	r24, 0x02E4
    2a62:	80 ff       	sbrs	r24, 0
    2a64:	04 c0       	rjmp	.+8      	; 0x2a6e <keyboard_set_leds+0x48>
    2a66:	87 ea       	ldi	r24, 0xA7	; 167
    2a68:	96 e0       	ldi	r25, 0x06	; 6
    2a6a:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    led_set(leds);
    2a6e:	8c 2f       	mov	r24, r28
}
    2a70:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    2a72:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <led_set>

00002a76 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2a76:	2f 92       	push	r2
    2a78:	3f 92       	push	r3
    2a7a:	4f 92       	push	r4
    2a7c:	5f 92       	push	r5
    2a7e:	6f 92       	push	r6
    2a80:	7f 92       	push	r7
    2a82:	8f 92       	push	r8
    2a84:	9f 92       	push	r9
    2a86:	af 92       	push	r10
    2a88:	bf 92       	push	r11
    2a8a:	cf 92       	push	r12
    2a8c:	df 92       	push	r13
    2a8e:	ef 92       	push	r14
    2a90:	ff 92       	push	r15
    2a92:	0f 93       	push	r16
    2a94:	1f 93       	push	r17
    2a96:	cf 93       	push	r28
    2a98:	df 93       	push	r29
    2a9a:	cd b7       	in	r28, 0x3d	; 61
    2a9c:	de b7       	in	r29, 0x3e	; 62
    2a9e:	2a 97       	sbiw	r28, 0x0a	; 10
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2aaa:	0e 94 14 09 	call	0x1228	; 0x1228 <matrix_scan>
    2aae:	98 e7       	ldi	r25, 0x78	; 120
    2ab0:	49 2e       	mov	r4, r25
    2ab2:	92 e0       	ldi	r25, 0x02	; 2
    2ab4:	59 2e       	mov	r5, r25
    2ab6:	28 e8       	ldi	r18, 0x88	; 136
    2ab8:	a2 2e       	mov	r10, r18
    2aba:	22 e0       	ldi	r18, 0x02	; 2
    2abc:	b2 2e       	mov	r11, r18
    2abe:	e1 2c       	mov	r14, r1
    2ac0:	f1 2c       	mov	r15, r1
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2ac2:	22 24       	eor	r2, r2
    2ac4:	23 94       	inc	r2
    2ac6:	31 2c       	mov	r3, r1
    2ac8:	0e 2d       	mov	r16, r14
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2aca:	8e 2d       	mov	r24, r14
    2acc:	0e 94 56 0a 	call	0x14ac	; 0x14ac <matrix_get_row>
    2ad0:	6c 01       	movw	r12, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2ad2:	f2 01       	movw	r30, r4
    2ad4:	81 90       	ld	r8, Z+
    2ad6:	91 90       	ld	r9, Z+
    2ad8:	2f 01       	movw	r4, r30
    2ada:	88 26       	eor	r8, r24
    2adc:	99 26       	eor	r9, r25
        if (matrix_change) {
    2ade:	81 14       	cp	r8, r1
    2ae0:	91 04       	cpc	r9, r1
    2ae2:	09 f4       	brne	.+2      	; 0x2ae6 <keyboard_task+0x70>
    2ae4:	5a c0       	rjmp	.+180    	; 0x2b9a <keyboard_task+0x124>


#ifdef MATRIX_HAS_GHOST
static bool has_ghost_in_row(uint8_t row)
{
    matrix_row_t matrix_row = matrix_get_row(row);
    2ae6:	8e 2d       	mov	r24, r14
    2ae8:	0e 94 56 0a 	call	0x14ac	; 0x14ac <matrix_get_row>
    2aec:	3c 01       	movw	r6, r24
    // No ghost exists when less than 2 keys are down on the row
    if (((matrix_row - 1) & matrix_row) == 0)
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	86 21       	and	r24, r6
    2af2:	97 21       	and	r25, r7
    2af4:	89 2b       	or	r24, r25
    2af6:	09 f4       	brne	.+2      	; 0x2afa <keyboard_task+0x84>
    2af8:	91 c0       	rjmp	.+290    	; 0x2c1c <keyboard_task+0x1a6>
    2afa:	10 e0       	ldi	r17, 0x00	; 0
        return false;

    // Ghost occurs when the row shares column line with other row
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        if (i != row && (matrix_get_row(i) & matrix_row))
    2afc:	10 13       	cpse	r17, r16
    2afe:	04 c0       	rjmp	.+8      	; 0x2b08 <keyboard_task+0x92>
    // No ghost exists when less than 2 keys are down on the row
    if (((matrix_row - 1) & matrix_row) == 0)
        return false;

    // Ghost occurs when the row shares column line with other row
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    2b00:	1f 5f       	subi	r17, 0xFF	; 255
    2b02:	18 30       	cpi	r17, 0x08	; 8
    2b04:	d9 f7       	brne	.-10     	; 0x2afc <keyboard_task+0x86>
    2b06:	8a c0       	rjmp	.+276    	; 0x2c1c <keyboard_task+0x1a6>
        if (i != row && (matrix_get_row(i) & matrix_row))
    2b08:	81 2f       	mov	r24, r17
    2b0a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <matrix_get_row>
    2b0e:	86 21       	and	r24, r6
    2b10:	97 21       	and	r25, r7
    2b12:	89 2b       	or	r24, r25
    2b14:	a9 f3       	breq	.-22     	; 0x2b00 <keyboard_task+0x8a>
    2b16:	8a c0       	rjmp	.+276    	; 0x2c2c <keyboard_task+0x1b6>
            if (has_ghost_in_row(r)) {
                /* Keep track of whether ghosted status has changed for
                 * debugging. But don't update matrix_prev until un-ghosted, or
                 * the last key would be lost.
                 */
                if (debug_matrix && matrix_ghost[r] != matrix_row) {
    2b18:	f5 01       	movw	r30, r10
    2b1a:	80 81       	ld	r24, Z
    2b1c:	91 81       	ldd	r25, Z+1	; 0x01
    2b1e:	8c 15       	cp	r24, r12
    2b20:	9d 05       	cpc	r25, r13
    2b22:	11 f0       	breq	.+4      	; 0x2b28 <keyboard_task+0xb2>
                    matrix_print();
    2b24:	0e 94 5f 0a 	call	0x14be	; 0x14be <matrix_print>
                }
                matrix_ghost[r] = matrix_row;
    2b28:	f5 01       	movw	r30, r10
    2b2a:	d1 82       	std	Z+1, r13	; 0x01
    2b2c:	c0 82       	st	Z, r12
                continue;
    2b2e:	35 c0       	rjmp	.+106    	; 0x2b9a <keyboard_task+0x124>
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    2b30:	0e 94 5f 0a 	call	0x14be	; 0x14be <matrix_print>
#ifdef MATRIX_HAS_GHOST
static bool has_ghost_in_row(uint8_t row)
{
    matrix_row_t matrix_row = matrix_get_row(row);
    // No ghost exists when less than 2 keys are down on the row
    if (((matrix_row - 1) & matrix_row) == 0)
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	90 e0       	ldi	r25, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2b38:	31 01       	movw	r6, r2
    2b3a:	08 2e       	mov	r0, r24
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <keyboard_task+0xcc>
    2b3e:	66 0c       	add	r6, r6
    2b40:	77 1c       	adc	r7, r7
    2b42:	0a 94       	dec	r0
    2b44:	e2 f7       	brpl	.-8      	; 0x2b3e <keyboard_task+0xc8>
    2b46:	93 01       	movw	r18, r6
    2b48:	28 21       	and	r18, r8
    2b4a:	39 21       	and	r19, r9
    2b4c:	23 2b       	or	r18, r19
    2b4e:	09 f1       	breq	.+66     	; 0x2b92 <keyboard_task+0x11c>
                    action_exec((keyevent_t){
    2b50:	8e 83       	std	Y+6, r24	; 0x06
    2b52:	0f 83       	std	Y+7, r16	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    2b54:	c6 20       	and	r12, r6
    2b56:	d7 20       	and	r13, r7
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	cd 28       	or	r12, r13
    2b5c:	09 f4       	brne	.+2      	; 0x2b60 <keyboard_task+0xea>
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    2b60:	88 87       	std	Y+8, r24	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    2b62:	0e 94 4d 22 	call	0x449a	; 0x449a <timer_read>
    2b66:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    2b68:	78 2f       	mov	r23, r24
    2b6a:	9a 87       	std	Y+10, r25	; 0x0a
    2b6c:	89 87       	std	Y+9, r24	; 0x09
    2b6e:	4e 81       	ldd	r20, Y+6	; 0x06
    2b70:	5f 81       	ldd	r21, Y+7	; 0x07
    2b72:	68 85       	ldd	r22, Y+8	; 0x08
    2b74:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b76:	0e 94 34 16 	call	0x2c68	; 0x2c68 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2b7a:	f7 01       	movw	r30, r14
    2b7c:	ee 0f       	add	r30, r30
    2b7e:	ff 1f       	adc	r31, r31
    2b80:	e8 58       	subi	r30, 0x88	; 136
    2b82:	fd 4f       	sbci	r31, 0xFD	; 253
    2b84:	80 81       	ld	r24, Z
    2b86:	91 81       	ldd	r25, Z+1	; 0x01
    2b88:	86 25       	eor	r24, r6
    2b8a:	97 25       	eor	r25, r7
    2b8c:	91 83       	std	Z+1, r25	; 0x01
    2b8e:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    2b90:	1f c0       	rjmp	.+62     	; 0x2bd0 <keyboard_task+0x15a>
    2b92:	01 96       	adiw	r24, 0x01	; 1
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2b94:	80 31       	cpi	r24, 0x10	; 16
    2b96:	91 05       	cpc	r25, r1
    2b98:	79 f6       	brne	.-98     	; 0x2b38 <keyboard_task+0xc2>
    2b9a:	ff ef       	ldi	r31, 0xFF	; 255
    2b9c:	ef 1a       	sub	r14, r31
    2b9e:	ff 0a       	sbc	r15, r31
    2ba0:	82 e0       	ldi	r24, 0x02	; 2
    2ba2:	a8 0e       	add	r10, r24
    2ba4:	b1 1c       	adc	r11, r1
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2ba6:	e8 e0       	ldi	r30, 0x08	; 8
    2ba8:	ee 16       	cp	r14, r30
    2baa:	f1 04       	cpc	r15, r1
    2bac:	09 f0       	breq	.+2      	; 0x2bb0 <keyboard_task+0x13a>
    2bae:	8c cf       	rjmp	.-232    	; 0x2ac8 <keyboard_task+0x52>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2bb0:	8f ef       	ldi	r24, 0xFF	; 255
    2bb2:	89 83       	std	Y+1, r24	; 0x01
    2bb4:	8a 83       	std	Y+2, r24	; 0x02
    2bb6:	1b 82       	std	Y+3, r1	; 0x03
    2bb8:	0e 94 4d 22 	call	0x449a	; 0x449a <timer_read>
    2bbc:	81 60       	ori	r24, 0x01	; 1
    2bbe:	78 2f       	mov	r23, r24
    2bc0:	9d 83       	std	Y+5, r25	; 0x05
    2bc2:	8c 83       	std	Y+4, r24	; 0x04
    2bc4:	49 81       	ldd	r20, Y+1	; 0x01
    2bc6:	5a 81       	ldd	r21, Y+2	; 0x02
    2bc8:	6b 81       	ldd	r22, Y+3	; 0x03
    2bca:	8d 81       	ldd	r24, Y+5	; 0x05
    2bcc:	0e 94 34 16 	call	0x2c68	; 0x2c68 <action_exec>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2bd0:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2bd4:	10 91 98 02 	lds	r17, 0x0298
    2bd8:	0e 94 7f 14 	call	0x28fe	; 0x28fe <host_keyboard_leds>
    2bdc:	18 17       	cp	r17, r24
    2bde:	59 f1       	breq	.+86     	; 0x2c36 <keyboard_task+0x1c0>
        led_status = host_keyboard_leds();
    2be0:	0e 94 7f 14 	call	0x28fe	; 0x28fe <host_keyboard_leds>
    2be4:	80 93 98 02 	sts	0x0298, r24
        keyboard_set_leds(led_status);
    }
}
    2be8:	2a 96       	adiw	r28, 0x0a	; 10
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	de bf       	out	0x3e, r29	; 62
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	cd bf       	out	0x3d, r28	; 61
    2bf4:	df 91       	pop	r29
    2bf6:	cf 91       	pop	r28
    2bf8:	1f 91       	pop	r17
    2bfa:	0f 91       	pop	r16
    2bfc:	ff 90       	pop	r15
    2bfe:	ef 90       	pop	r14
    2c00:	df 90       	pop	r13
    2c02:	cf 90       	pop	r12
    2c04:	bf 90       	pop	r11
    2c06:	af 90       	pop	r10
    2c08:	9f 90       	pop	r9
    2c0a:	8f 90       	pop	r8
    2c0c:	7f 90       	pop	r7
    2c0e:	6f 90       	pop	r6
    2c10:	5f 90       	pop	r5
    2c12:	4f 90       	pop	r4
    2c14:	3f 90       	pop	r3
    2c16:	2f 90       	pop	r2
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    2c18:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <keyboard_set_leds>
                    matrix_print();
                }
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
    2c1c:	f5 01       	movw	r30, r10
    2c1e:	d1 82       	std	Z+1, r13	; 0x01
    2c20:	c0 82       	st	Z, r12
#endif
            if (debug_matrix) matrix_print();
    2c22:	80 91 e4 02 	lds	r24, 0x02E4
    2c26:	81 ff       	sbrs	r24, 1
    2c28:	85 cf       	rjmp	.-246    	; 0x2b34 <keyboard_task+0xbe>
    2c2a:	82 cf       	rjmp	.-252    	; 0x2b30 <keyboard_task+0xba>
            if (has_ghost_in_row(r)) {
                /* Keep track of whether ghosted status has changed for
                 * debugging. But don't update matrix_prev until un-ghosted, or
                 * the last key would be lost.
                 */
                if (debug_matrix && matrix_ghost[r] != matrix_row) {
    2c2c:	80 91 e4 02 	lds	r24, 0x02E4
    2c30:	81 fd       	sbrc	r24, 1
    2c32:	72 cf       	rjmp	.-284    	; 0x2b18 <keyboard_task+0xa2>
    2c34:	79 cf       	rjmp	.-270    	; 0x2b28 <keyboard_task+0xb2>
    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    }
}
    2c36:	2a 96       	adiw	r28, 0x0a	; 10
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	de bf       	out	0x3e, r29	; 62
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	df 91       	pop	r29
    2c44:	cf 91       	pop	r28
    2c46:	1f 91       	pop	r17
    2c48:	0f 91       	pop	r16
    2c4a:	ff 90       	pop	r15
    2c4c:	ef 90       	pop	r14
    2c4e:	df 90       	pop	r13
    2c50:	cf 90       	pop	r12
    2c52:	bf 90       	pop	r11
    2c54:	af 90       	pop	r10
    2c56:	9f 90       	pop	r9
    2c58:	8f 90       	pop	r8
    2c5a:	7f 90       	pop	r7
    2c5c:	6f 90       	pop	r6
    2c5e:	5f 90       	pop	r5
    2c60:	4f 90       	pop	r4
    2c62:	3f 90       	pop	r3
    2c64:	2f 90       	pop	r2
    2c66:	08 95       	ret

00002c68 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2c68:	cf 93       	push	r28
    2c6a:	df 93       	push	r29
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    2c70:	2b 97       	sbiw	r28, 0x0b	; 11
    2c72:	0f b6       	in	r0, 0x3f	; 63
    2c74:	f8 94       	cli
    2c76:	de bf       	out	0x3e, r29	; 62
    2c78:	0f be       	out	0x3f, r0	; 63
    2c7a:	cd bf       	out	0x3d, r28	; 61
    2c7c:	4f 83       	std	Y+7, r20	; 0x07
    2c7e:	58 87       	std	Y+8, r21	; 0x08
    2c80:	69 87       	std	Y+9, r22	; 0x09
    2c82:	7a 87       	std	Y+10, r23	; 0x0a
    2c84:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    2c86:	de 01       	movw	r26, r28
    2c88:	11 96       	adiw	r26, 0x01	; 1
    2c8a:	86 e0       	ldi	r24, 0x06	; 6
    2c8c:	fd 01       	movw	r30, r26
    2c8e:	11 92       	st	Z+, r1
    2c90:	8a 95       	dec	r24
    2c92:	e9 f7       	brne	.-6      	; 0x2c8e <action_exec+0x26>
    2c94:	85 e0       	ldi	r24, 0x05	; 5
    2c96:	fe 01       	movw	r30, r28
    2c98:	37 96       	adiw	r30, 0x07	; 7
    2c9a:	01 90       	ld	r0, Z+
    2c9c:	0d 92       	st	X+, r0
    2c9e:	8a 95       	dec	r24
    2ca0:	e1 f7       	brne	.-8      	; 0x2c9a <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2ca2:	49 81       	ldd	r20, Y+1	; 0x01
    2ca4:	5a 81       	ldd	r21, Y+2	; 0x02
    2ca6:	6b 81       	ldd	r22, Y+3	; 0x03
    2ca8:	7c 81       	ldd	r23, Y+4	; 0x04
    2caa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cac:	9e 81       	ldd	r25, Y+6	; 0x06
    2cae:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2cb2:	2b 96       	adiw	r28, 0x0b	; 11
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	df 91       	pop	r29
    2cc0:	cf 91       	pop	r28
    2cc2:	08 95       	ret

00002cc4 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2cc4:	cf 93       	push	r28
    2cc6:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2cc8:	88 23       	and	r24, r24
    2cca:	09 f4       	brne	.+2      	; 0x2cce <register_code+0xa>
    2ccc:	98 c0       	rjmp	.+304    	; 0x2dfe <register_code+0x13a>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2cce:	84 50       	subi	r24, 0x04	; 4
    2cd0:	81 3a       	cpi	r24, 0xA1	; 161
    2cd2:	48 f4       	brcc	.+18     	; 0x2ce6 <register_code+0x22>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2cd4:	8c 2f       	mov	r24, r28
    2cd6:	0e 94 e8 2a 	call	0x55d0	; 0x55d0 <command_proc>
    2cda:	81 11       	cpse	r24, r1
    2cdc:	90 c0       	rjmp	.+288    	; 0x2dfe <register_code+0x13a>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2cde:	8c 2f       	mov	r24, r28
    2ce0:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <add_key>
    2ce4:	0d c0       	rjmp	.+26     	; 0x2d00 <register_code+0x3c>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2ce6:	8c 2f       	mov	r24, r28
    2ce8:	80 5e       	subi	r24, 0xE0	; 224
    2cea:	88 30       	cpi	r24, 0x08	; 8
    2cec:	60 f4       	brcc	.+24     	; 0x2d06 <register_code+0x42>
        add_mods(MOD_BIT(code));
    2cee:	c7 70       	andi	r28, 0x07	; 7
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	01 c0       	rjmp	.+2      	; 0x2cf8 <register_code+0x34>
    2cf6:	88 0f       	add	r24, r24
    2cf8:	ca 95       	dec	r28
    2cfa:	ea f7       	brpl	.-6      	; 0x2cf6 <register_code+0x32>
    2cfc:	0e 94 0c 20 	call	0x4018	; 0x4018 <add_mods>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2d00:	cf 91       	pop	r28
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    2d02:	0c 94 48 20 	jmp	0x4090	; 0x4090 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    2d06:	8c 2f       	mov	r24, r28
    2d08:	85 5a       	subi	r24, 0xA5	; 165
    2d0a:	83 30       	cpi	r24, 0x03	; 3
    2d0c:	78 f4       	brcc	.+30     	; 0x2d2c <register_code+0x68>
        host_system_send(KEYCODE2SYSTEM(code));
    2d0e:	c5 3a       	cpi	r28, 0xA5	; 165
    2d10:	29 f0       	breq	.+10     	; 0x2d1c <register_code+0x58>
    2d12:	c6 3a       	cpi	r28, 0xA6	; 166
    2d14:	31 f4       	brne	.+12     	; 0x2d22 <register_code+0x5e>
    2d16:	82 e8       	ldi	r24, 0x82	; 130
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	05 c0       	rjmp	.+10     	; 0x2d26 <register_code+0x62>
    2d1c:	81 e8       	ldi	r24, 0x81	; 129
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	02 c0       	rjmp	.+4      	; 0x2d26 <register_code+0x62>
    2d22:	83 e8       	ldi	r24, 0x83	; 131
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2d26:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2d28:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2d2c:	8c 2f       	mov	r24, r28
    2d2e:	88 5a       	subi	r24, 0xA8	; 168
    2d30:	83 31       	cpi	r24, 0x13	; 19
    2d32:	08 f0       	brcs	.+2      	; 0x2d36 <register_code+0x72>
    2d34:	64 c0       	rjmp	.+200    	; 0x2dfe <register_code+0x13a>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2d36:	c8 3a       	cpi	r28, 0xA8	; 168
    2d38:	39 f1       	breq	.+78     	; 0x2d88 <register_code+0xc4>
    2d3a:	c9 3a       	cpi	r28, 0xA9	; 169
    2d3c:	41 f1       	breq	.+80     	; 0x2d8e <register_code+0xca>
    2d3e:	ca 3a       	cpi	r28, 0xAA	; 170
    2d40:	49 f1       	breq	.+82     	; 0x2d94 <register_code+0xd0>
    2d42:	cb 3a       	cpi	r28, 0xAB	; 171
    2d44:	51 f1       	breq	.+84     	; 0x2d9a <register_code+0xd6>
    2d46:	cc 3a       	cpi	r28, 0xAC	; 172
    2d48:	59 f1       	breq	.+86     	; 0x2da0 <register_code+0xdc>
    2d4a:	cd 3a       	cpi	r28, 0xAD	; 173
    2d4c:	61 f1       	breq	.+88     	; 0x2da6 <register_code+0xe2>
    2d4e:	c0 3b       	cpi	r28, 0xB0	; 176
    2d50:	69 f1       	breq	.+90     	; 0x2dac <register_code+0xe8>
    2d52:	ce 3a       	cpi	r28, 0xAE	; 174
    2d54:	71 f1       	breq	.+92     	; 0x2db2 <register_code+0xee>
    2d56:	cf 3a       	cpi	r28, 0xAF	; 175
    2d58:	79 f1       	breq	.+94     	; 0x2db8 <register_code+0xf4>
    2d5a:	c1 3b       	cpi	r28, 0xB1	; 177
    2d5c:	81 f1       	breq	.+96     	; 0x2dbe <register_code+0xfa>
    2d5e:	c2 3b       	cpi	r28, 0xB2	; 178
    2d60:	89 f1       	breq	.+98     	; 0x2dc4 <register_code+0x100>
    2d62:	c3 3b       	cpi	r28, 0xB3	; 179
    2d64:	91 f1       	breq	.+100    	; 0x2dca <register_code+0x106>
    2d66:	c4 3b       	cpi	r28, 0xB4	; 180
    2d68:	99 f1       	breq	.+102    	; 0x2dd0 <register_code+0x10c>
    2d6a:	c5 3b       	cpi	r28, 0xB5	; 181
    2d6c:	a1 f1       	breq	.+104    	; 0x2dd6 <register_code+0x112>
    2d6e:	c6 3b       	cpi	r28, 0xB6	; 182
    2d70:	a9 f1       	breq	.+106    	; 0x2ddc <register_code+0x118>
    2d72:	c7 3b       	cpi	r28, 0xB7	; 183
    2d74:	b1 f1       	breq	.+108    	; 0x2de2 <register_code+0x11e>
    2d76:	c8 3b       	cpi	r28, 0xB8	; 184
    2d78:	b9 f1       	breq	.+110    	; 0x2de8 <register_code+0x124>
    2d7a:	c9 3b       	cpi	r28, 0xB9	; 185
    2d7c:	c1 f1       	breq	.+112    	; 0x2dee <register_code+0x12a>
    2d7e:	ca 3b       	cpi	r28, 0xBA	; 186
    2d80:	c9 f5       	brne	.+114    	; 0x2df4 <register_code+0x130>
    2d82:	8a e2       	ldi	r24, 0x2A	; 42
    2d84:	92 e0       	ldi	r25, 0x02	; 2
    2d86:	38 c0       	rjmp	.+112    	; 0x2df8 <register_code+0x134>
    2d88:	82 ee       	ldi	r24, 0xE2	; 226
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	35 c0       	rjmp	.+106    	; 0x2df8 <register_code+0x134>
    2d8e:	89 ee       	ldi	r24, 0xE9	; 233
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	32 c0       	rjmp	.+100    	; 0x2df8 <register_code+0x134>
    2d94:	8a ee       	ldi	r24, 0xEA	; 234
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	2f c0       	rjmp	.+94     	; 0x2df8 <register_code+0x134>
    2d9a:	85 eb       	ldi	r24, 0xB5	; 181
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	2c c0       	rjmp	.+88     	; 0x2df8 <register_code+0x134>
    2da0:	86 eb       	ldi	r24, 0xB6	; 182
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	29 c0       	rjmp	.+82     	; 0x2df8 <register_code+0x134>
    2da6:	87 eb       	ldi	r24, 0xB7	; 183
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	26 c0       	rjmp	.+76     	; 0x2df8 <register_code+0x134>
    2dac:	8c ec       	ldi	r24, 0xCC	; 204
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	23 c0       	rjmp	.+70     	; 0x2df8 <register_code+0x134>
    2db2:	8d ec       	ldi	r24, 0xCD	; 205
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	20 c0       	rjmp	.+64     	; 0x2df8 <register_code+0x134>
    2db8:	83 e8       	ldi	r24, 0x83	; 131
    2dba:	91 e0       	ldi	r25, 0x01	; 1
    2dbc:	1d c0       	rjmp	.+58     	; 0x2df8 <register_code+0x134>
    2dbe:	8a e8       	ldi	r24, 0x8A	; 138
    2dc0:	91 e0       	ldi	r25, 0x01	; 1
    2dc2:	1a c0       	rjmp	.+52     	; 0x2df8 <register_code+0x134>
    2dc4:	82 e9       	ldi	r24, 0x92	; 146
    2dc6:	91 e0       	ldi	r25, 0x01	; 1
    2dc8:	17 c0       	rjmp	.+46     	; 0x2df8 <register_code+0x134>
    2dca:	84 e9       	ldi	r24, 0x94	; 148
    2dcc:	91 e0       	ldi	r25, 0x01	; 1
    2dce:	14 c0       	rjmp	.+40     	; 0x2df8 <register_code+0x134>
    2dd0:	81 e2       	ldi	r24, 0x21	; 33
    2dd2:	92 e0       	ldi	r25, 0x02	; 2
    2dd4:	11 c0       	rjmp	.+34     	; 0x2df8 <register_code+0x134>
    2dd6:	83 e2       	ldi	r24, 0x23	; 35
    2dd8:	92 e0       	ldi	r25, 0x02	; 2
    2dda:	0e c0       	rjmp	.+28     	; 0x2df8 <register_code+0x134>
    2ddc:	84 e2       	ldi	r24, 0x24	; 36
    2dde:	92 e0       	ldi	r25, 0x02	; 2
    2de0:	0b c0       	rjmp	.+22     	; 0x2df8 <register_code+0x134>
    2de2:	85 e2       	ldi	r24, 0x25	; 37
    2de4:	92 e0       	ldi	r25, 0x02	; 2
    2de6:	08 c0       	rjmp	.+16     	; 0x2df8 <register_code+0x134>
    2de8:	86 e2       	ldi	r24, 0x26	; 38
    2dea:	92 e0       	ldi	r25, 0x02	; 2
    2dec:	05 c0       	rjmp	.+10     	; 0x2df8 <register_code+0x134>
    2dee:	87 e2       	ldi	r24, 0x27	; 39
    2df0:	92 e0       	ldi	r25, 0x02	; 2
    2df2:	02 c0       	rjmp	.+4      	; 0x2df8 <register_code+0x134>
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    2df8:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2dfa:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <host_consumer_send>
    }
}
    2dfe:	cf 91       	pop	r28
    2e00:	08 95       	ret

00002e02 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2e02:	88 23       	and	r24, r24
    2e04:	31 f1       	breq	.+76     	; 0x2e52 <unregister_code+0x50>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2e06:	98 2f       	mov	r25, r24
    2e08:	94 50       	subi	r25, 0x04	; 4
    2e0a:	91 3a       	cpi	r25, 0xA1	; 161
    2e0c:	18 f4       	brcc	.+6      	; 0x2e14 <unregister_code+0x12>
        del_key(code);
    2e0e:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <del_key>
    2e12:	0e c0       	rjmp	.+28     	; 0x2e30 <unregister_code+0x2e>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2e14:	98 2f       	mov	r25, r24
    2e16:	90 5e       	subi	r25, 0xE0	; 224
    2e18:	98 30       	cpi	r25, 0x08	; 8
    2e1a:	60 f4       	brcc	.+24     	; 0x2e34 <unregister_code+0x32>
        del_mods(MOD_BIT(code));
    2e1c:	28 2f       	mov	r18, r24
    2e1e:	27 70       	andi	r18, 0x07	; 7
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	01 c0       	rjmp	.+2      	; 0x2e28 <unregister_code+0x26>
    2e26:	88 0f       	add	r24, r24
    2e28:	2a 95       	dec	r18
    2e2a:	ea f7       	brpl	.-6      	; 0x2e26 <unregister_code+0x24>
    2e2c:	0e 94 12 20 	call	0x4024	; 0x4024 <del_mods>
        send_keyboard_report();
    2e30:	0c 94 48 20 	jmp	0x4090	; 0x4090 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    2e34:	98 2f       	mov	r25, r24
    2e36:	95 5a       	subi	r25, 0xA5	; 165
    2e38:	93 30       	cpi	r25, 0x03	; 3
    2e3a:	20 f4       	brcc	.+8      	; 0x2e44 <unregister_code+0x42>
        host_system_send(0);
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2e44:	88 5a       	subi	r24, 0xA8	; 168
    2e46:	83 31       	cpi	r24, 0x13	; 19
    2e48:	20 f4       	brcc	.+8      	; 0x2e52 <unregister_code+0x50>
        host_consumer_send(0);
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <host_consumer_send>
    2e52:	08 95       	ret

00002e54 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2e54:	88 23       	and	r24, r24
    2e56:	21 f0       	breq	.+8      	; 0x2e60 <register_mods+0xc>
        add_mods(mods);
    2e58:	0e 94 0c 20 	call	0x4018	; 0x4018 <add_mods>
        send_keyboard_report();
    2e5c:	0c 94 48 20 	jmp	0x4090	; 0x4090 <send_keyboard_report>
    2e60:	08 95       	ret

00002e62 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2e62:	88 23       	and	r24, r24
    2e64:	21 f0       	breq	.+8      	; 0x2e6e <unregister_mods+0xc>
        del_mods(mods);
    2e66:	0e 94 12 20 	call	0x4024	; 0x4024 <del_mods>
        send_keyboard_report();
    2e6a:	0c 94 48 20 	jmp	0x4090	; 0x4090 <send_keyboard_report>
    2e6e:	08 95       	ret

00002e70 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    2e70:	8f 92       	push	r8
    2e72:	9f 92       	push	r9
    2e74:	af 92       	push	r10
    2e76:	bf 92       	push	r11
    2e78:	0f 93       	push	r16
    2e7a:	1f 93       	push	r17
    2e7c:	cf 93       	push	r28
    2e7e:	df 93       	push	r29
    2e80:	cd b7       	in	r28, 0x3d	; 61
    2e82:	de b7       	in	r29, 0x3e	; 62
    2e84:	27 97       	sbiw	r28, 0x07	; 7
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
    2e90:	5c 01       	movw	r10, r24
    keyevent_t event = record->event;
    2e92:	85 e0       	ldi	r24, 0x05	; 5
    2e94:	f5 01       	movw	r30, r10
    2e96:	de 01       	movw	r26, r28
    2e98:	11 96       	adiw	r26, 0x01	; 1
    2e9a:	01 90       	ld	r0, Z+
    2e9c:	0d 92       	st	X+, r0
    2e9e:	8a 95       	dec	r24
    2ea0:	e1 f7       	brne	.-8      	; 0x2e9a <process_action+0x2a>
    2ea2:	f5 01       	movw	r30, r10
    2ea4:	30 81       	ld	r19, Z
    2ea6:	21 81       	ldd	r18, Z+1	; 0x01
    2ea8:	12 81       	ldd	r17, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2eaa:	05 81       	ldd	r16, Z+5	; 0x05
    2eac:	02 95       	swap	r16
    2eae:	0f 70       	andi	r16, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2eb0:	83 81       	ldd	r24, Z+3	; 0x03
    2eb2:	94 81       	ldd	r25, Z+4	; 0x04
    2eb4:	89 2b       	or	r24, r25
    2eb6:	39 f0       	breq	.+14     	; 0x2ec6 <process_action+0x56>
    2eb8:	2f 3f       	cpi	r18, 0xFF	; 255
    2eba:	41 f4       	brne	.+16     	; 0x2ecc <process_action+0x5c>
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	3f 3f       	cpi	r19, 0xFF	; 255
    2ec2:	31 f0       	breq	.+12     	; 0x2ed0 <process_action+0x60>
    2ec4:	03 c0       	rjmp	.+6      	; 0x2ecc <process_action+0x5c>
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	02 c0       	rjmp	.+4      	; 0x2ed0 <process_action+0x60>
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	90 e0       	ldi	r25, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    2ed0:	80 fd       	sbrc	r24, 0
    2ed2:	f2 c2       	rjmp	.+1508   	; 0x34b8 <process_action+0x648>

    action_t action = layer_switch_get_action(event.key);
    2ed4:	39 83       	std	Y+1, r19	; 0x01
    2ed6:	2a 83       	std	Y+2, r18	; 0x02
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	9a 81       	ldd	r25, Y+2	; 0x02
    2edc:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2ee0:	9e 83       	std	Y+6, r25	; 0x06
    2ee2:	8f 83       	std	Y+7, r24	; 0x07
    2ee4:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2ee8:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2eec:	4e 81       	ldd	r20, Y+6	; 0x06
    2eee:	24 2f       	mov	r18, r20
    2ef0:	22 95       	swap	r18
    2ef2:	2f 70       	andi	r18, 0x0F	; 15
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef8:	25 30       	cpi	r18, 0x05	; 5
    2efa:	31 05       	cpc	r19, r1
    2efc:	09 f4       	brne	.+2      	; 0x2f00 <process_action+0x90>
    2efe:	e9 c0       	rjmp	.+466    	; 0x30d2 <process_action+0x262>
    2f00:	6c f4       	brge	.+26     	; 0x2f1c <process_action+0xac>
    2f02:	24 30       	cpi	r18, 0x04	; 4
    2f04:	31 05       	cpc	r19, r1
    2f06:	0c f0       	brlt	.+2      	; 0x2f0a <process_action+0x9a>
    2f08:	a7 c0       	rjmp	.+334    	; 0x3058 <process_action+0x1e8>
    2f0a:	84 2f       	mov	r24, r20
    2f0c:	80 7f       	andi	r24, 0xF0	; 240
    2f0e:	94 2f       	mov	r25, r20
    2f10:	9f 70       	andi	r25, 0x0F	; 15
    2f12:	22 30       	cpi	r18, 0x02	; 2
    2f14:	31 05       	cpc	r19, r1
    2f16:	0c f0       	brlt	.+2      	; 0x2f1a <process_action+0xaa>
    2f18:	43 c0       	rjmp	.+134    	; 0x2fa0 <process_action+0x130>
    2f1a:	15 c0       	rjmp	.+42     	; 0x2f46 <process_action+0xd6>
    2f1c:	2c 30       	cpi	r18, 0x0C	; 12
    2f1e:	31 05       	cpc	r19, r1
    2f20:	4c f4       	brge	.+18     	; 0x2f34 <process_action+0xc4>
    2f22:	2a 30       	cpi	r18, 0x0A	; 10
    2f24:	31 05       	cpc	r19, r1
    2f26:	0c f0       	brlt	.+2      	; 0x2f2a <process_action+0xba>
    2f28:	e3 c1       	rjmp	.+966    	; 0x32f0 <process_action+0x480>
    2f2a:	28 30       	cpi	r18, 0x08	; 8
    2f2c:	31 05       	cpc	r19, r1
    2f2e:	09 f0       	breq	.+2      	; 0x2f32 <process_action+0xc2>
    2f30:	c3 c2       	rjmp	.+1414   	; 0x34b8 <process_action+0x648>
    2f32:	e7 c0       	rjmp	.+462    	; 0x3102 <process_action+0x292>
    2f34:	2c 30       	cpi	r18, 0x0C	; 12
    2f36:	31 05       	cpc	r19, r1
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <process_action+0xcc>
    2f3a:	98 c2       	rjmp	.+1328   	; 0x346c <process_action+0x5fc>
    2f3c:	2f 30       	cpi	r18, 0x0F	; 15
    2f3e:	31 05       	cpc	r19, r1
    2f40:	09 f0       	breq	.+2      	; 0x2f44 <process_action+0xd4>
    2f42:	ba c2       	rjmp	.+1396   	; 0x34b8 <process_action+0x648>
    2f44:	a7 c2       	rjmp	.+1358   	; 0x3494 <process_action+0x624>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2f46:	99 2e       	mov	r9, r25
    2f48:	81 11       	cpse	r24, r1
    2f4a:	01 c0       	rjmp	.+2      	; 0x2f4e <process_action+0xde>
    2f4c:	03 c0       	rjmp	.+6      	; 0x2f54 <process_action+0xe4>
    2f4e:	92 94       	swap	r9
    2f50:	90 ef       	ldi	r25, 0xF0	; 240
    2f52:	99 22       	and	r9, r25
                                                                action.key.mods<<4;
                if (event.pressed) {
    2f54:	11 23       	and	r17, r17
    2f56:	59 f0       	breq	.+22     	; 0x2f6e <process_action+0xfe>
                    if (mods) {
    2f58:	99 20       	and	r9, r9
    2f5a:	09 f4       	brne	.+2      	; 0x2f5e <process_action+0xee>
    2f5c:	62 c2       	rjmp	.+1220   	; 0x3422 <process_action+0x5b2>
                        add_weak_mods(mods);
    2f5e:	89 2d       	mov	r24, r9
    2f60:	6f 83       	std	Y+7, r22	; 0x07
    2f62:	0e 94 1f 20 	call	0x403e	; 0x403e <add_weak_mods>
                        send_keyboard_report();
    2f66:	0e 94 48 20 	call	0x4090	; 0x4090 <send_keyboard_report>
    2f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f6c:	5a c2       	rjmp	.+1204   	; 0x3422 <process_action+0x5b2>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2f6e:	86 2f       	mov	r24, r22
    2f70:	0e 94 01 17 	call	0x2e02	; 0x2e02 <unregister_code>
                    if (mods) {
    2f74:	99 20       	and	r9, r9
    2f76:	09 f4       	brne	.+2      	; 0x2f7a <process_action+0x10a>
    2f78:	9f c2       	rjmp	.+1342   	; 0x34b8 <process_action+0x648>
                        del_weak_mods(mods);
    2f7a:	89 2d       	mov	r24, r9
    2f7c:	0e 94 25 20 	call	0x404a	; 0x404a <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2f80:	27 96       	adiw	r28, 0x07	; 7
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	df 91       	pop	r29
    2f8e:	cf 91       	pop	r28
    2f90:	1f 91       	pop	r17
    2f92:	0f 91       	pop	r16
    2f94:	bf 90       	pop	r11
    2f96:	af 90       	pop	r10
    2f98:	9f 90       	pop	r9
    2f9a:	8f 90       	pop	r8
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2f9c:	0c 94 48 20 	jmp	0x4090	; 0x4090 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2fa0:	99 2e       	mov	r9, r25
    2fa2:	80 32       	cpi	r24, 0x20	; 32
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <process_action+0x138>
    2fa6:	03 c0       	rjmp	.+6      	; 0x2fae <process_action+0x13e>
    2fa8:	92 94       	swap	r9
    2faa:	80 ef       	ldi	r24, 0xF0	; 240
    2fac:	98 22       	and	r9, r24
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    2fae:	66 23       	and	r22, r22
    2fb0:	21 f0       	breq	.+8      	; 0x2fba <process_action+0x14a>
    2fb2:	61 30       	cpi	r22, 0x01	; 1
    2fb4:	09 f0       	breq	.+2      	; 0x2fb8 <process_action+0x148>
    2fb6:	41 c0       	rjmp	.+130    	; 0x303a <process_action+0x1ca>
    2fb8:	21 c0       	rjmp	.+66     	; 0x2ffc <process_action+0x18c>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2fba:	11 23       	and	r17, r17
    2fbc:	b1 f0       	breq	.+44     	; 0x2fea <process_action+0x17a>
                            if (tap_count == 0) {
                                register_mods(mods);
    2fbe:	89 2d       	mov	r24, r9
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    2fc0:	01 11       	cpse	r16, r1
    2fc2:	01 c0       	rjmp	.+2      	; 0x2fc6 <process_action+0x156>
    2fc4:	26 c0       	rjmp	.+76     	; 0x3012 <process_action+0x1a2>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2fc6:	01 30       	cpi	r16, 0x01	; 1
    2fc8:	21 f5       	brne	.+72     	; 0x3012 <process_action+0x1a2>
            break;
#endif
        default:
            break;
    }
}
    2fca:	27 96       	adiw	r28, 0x07	; 7
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	f8 94       	cli
    2fd0:	de bf       	out	0x3e, r29	; 62
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	cd bf       	out	0x3d, r28	; 61
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	1f 91       	pop	r17
    2fdc:	0f 91       	pop	r16
    2fde:	bf 90       	pop	r11
    2fe0:	af 90       	pop	r10
    2fe2:	9f 90       	pop	r9
    2fe4:	8f 90       	pop	r8
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2fe6:	0c 94 2f 20 	jmp	0x405e	; 0x405e <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2fea:	01 11       	cpse	r16, r1
    2fec:	01 c0       	rjmp	.+2      	; 0x2ff0 <process_action+0x180>
    2fee:	03 c0       	rjmp	.+6      	; 0x2ff6 <process_action+0x186>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2ff0:	01 30       	cpi	r16, 0x01	; 1
    2ff2:	09 f4       	brne	.+2      	; 0x2ff6 <process_action+0x186>
    2ff4:	61 c2       	rjmp	.+1218   	; 0x34b8 <process_action+0x648>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2ff6:	0e 94 32 20 	call	0x4064	; 0x4064 <clear_oneshot_mods>
    2ffa:	2c c0       	rjmp	.+88     	; 0x3054 <process_action+0x1e4>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2ffc:	11 23       	and	r17, r17
    2ffe:	c9 f0       	breq	.+50     	; 0x3032 <process_action+0x1c2>
                            if (tap_count <= TAPPING_TOGGLE) {
    3000:	06 30       	cpi	r16, 0x06	; 6
    3002:	08 f0       	brcs	.+2      	; 0x3006 <process_action+0x196>
    3004:	59 c2       	rjmp	.+1202   	; 0x34b8 <process_action+0x648>
                                if (mods & get_mods()) {
    3006:	0e 94 09 20 	call	0x4012	; 0x4012 <get_mods>
    300a:	89 21       	and	r24, r9
    300c:	09 f0       	breq	.+2      	; 0x3010 <process_action+0x1a0>
    300e:	22 c0       	rjmp	.+68     	; 0x3054 <process_action+0x1e4>
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    3010:	89 2d       	mov	r24, r9
            break;
#endif
        default:
            break;
    }
}
    3012:	27 96       	adiw	r28, 0x07	; 7
    3014:	0f b6       	in	r0, 0x3f	; 63
    3016:	f8 94       	cli
    3018:	de bf       	out	0x3e, r29	; 62
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	cd bf       	out	0x3d, r28	; 61
    301e:	df 91       	pop	r29
    3020:	cf 91       	pop	r28
    3022:	1f 91       	pop	r17
    3024:	0f 91       	pop	r16
    3026:	bf 90       	pop	r11
    3028:	af 90       	pop	r10
    302a:	9f 90       	pop	r9
    302c:	8f 90       	pop	r8
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    302e:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    3032:	05 30       	cpi	r16, 0x05	; 5
    3034:	08 f0       	brcs	.+2      	; 0x3038 <process_action+0x1c8>
    3036:	40 c2       	rjmp	.+1152   	; 0x34b8 <process_action+0x648>
    3038:	0d c0       	rjmp	.+26     	; 0x3054 <process_action+0x1e4>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    303a:	11 23       	and	r17, r17
    303c:	49 f0       	breq	.+18     	; 0x3050 <process_action+0x1e0>
                            if (tap_count > 0) {
    303e:	00 23       	and	r16, r16
    3040:	39 f3       	breq	.-50     	; 0x3010 <process_action+0x1a0>
                                if (record->tap.interrupted) {
    3042:	f5 01       	movw	r30, r10
    3044:	85 81       	ldd	r24, Z+5	; 0x05
    3046:	80 ff       	sbrs	r24, 0
    3048:	ec c1       	rjmp	.+984    	; 0x3422 <process_action+0x5b2>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    304a:	8f 70       	andi	r24, 0x0F	; 15
    304c:	85 83       	std	Z+5, r24	; 0x05
    304e:	e0 cf       	rjmp	.-64     	; 0x3010 <process_action+0x1a0>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    3050:	01 11       	cpse	r16, r1
    3052:	fb c1       	rjmp	.+1014   	; 0x344a <process_action+0x5da>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    3054:	89 2d       	mov	r24, r9
    3056:	68 c1       	rjmp	.+720    	; 0x3328 <process_action+0x4b8>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    3058:	24 2f       	mov	r18, r20
    305a:	26 95       	lsr	r18
    305c:	26 95       	lsr	r18
    305e:	23 70       	andi	r18, 0x03	; 3
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	21 15       	cp	r18, r1
    3064:	31 05       	cpc	r19, r1
    3066:	29 f0       	breq	.+10     	; 0x3072 <process_action+0x202>
    3068:	21 30       	cpi	r18, 0x01	; 1
    306a:	31 05       	cpc	r19, r1
    306c:	09 f0       	breq	.+2      	; 0x3070 <process_action+0x200>
    306e:	24 c2       	rjmp	.+1096   	; 0x34b8 <process_action+0x648>
    3070:	18 c0       	rjmp	.+48     	; 0x30a2 <process_action+0x232>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    3072:	11 23       	and	r17, r17
    3074:	21 f0       	breq	.+8      	; 0x307e <process_action+0x20e>
                        host_system_send(action.usage.code);
    3076:	86 2f       	mov	r24, r22
    3078:	94 2f       	mov	r25, r20
    307a:	93 70       	andi	r25, 0x03	; 3
    307c:	02 c0       	rjmp	.+4      	; 0x3082 <process_action+0x212>
                    } else {
                        host_system_send(0);
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    3082:	27 96       	adiw	r28, 0x07	; 7
    3084:	0f b6       	in	r0, 0x3f	; 63
    3086:	f8 94       	cli
    3088:	de bf       	out	0x3e, r29	; 62
    308a:	0f be       	out	0x3f, r0	; 63
    308c:	cd bf       	out	0x3d, r28	; 61
    308e:	df 91       	pop	r29
    3090:	cf 91       	pop	r28
    3092:	1f 91       	pop	r17
    3094:	0f 91       	pop	r16
    3096:	bf 90       	pop	r11
    3098:	af 90       	pop	r10
    309a:	9f 90       	pop	r9
    309c:	8f 90       	pop	r8
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    309e:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    30a2:	11 23       	and	r17, r17
    30a4:	21 f0       	breq	.+8      	; 0x30ae <process_action+0x23e>
                        host_consumer_send(action.usage.code);
    30a6:	86 2f       	mov	r24, r22
    30a8:	94 2f       	mov	r25, r20
    30aa:	93 70       	andi	r25, 0x03	; 3
    30ac:	02 c0       	rjmp	.+4      	; 0x30b2 <process_action+0x242>
                    } else {
                        host_consumer_send(0);
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    30b2:	27 96       	adiw	r28, 0x07	; 7
    30b4:	0f b6       	in	r0, 0x3f	; 63
    30b6:	f8 94       	cli
    30b8:	de bf       	out	0x3e, r29	; 62
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	cd bf       	out	0x3d, r28	; 61
    30be:	df 91       	pop	r29
    30c0:	cf 91       	pop	r28
    30c2:	1f 91       	pop	r17
    30c4:	0f 91       	pop	r16
    30c6:	bf 90       	pop	r11
    30c8:	af 90       	pop	r10
    30ca:	9f 90       	pop	r9
    30cc:	8f 90       	pop	r8
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    30ce:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    30d2:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    30d4:	11 23       	and	r17, r17
    30d6:	19 f0       	breq	.+6      	; 0x30de <process_action+0x26e>
                mousekey_on(action.key.code);
    30d8:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <mousekey_on>
    30dc:	02 c0       	rjmp	.+4      	; 0x30e2 <process_action+0x272>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    30de:	0e 94 82 25 	call	0x4b04	; 0x4b04 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    30e2:	27 96       	adiw	r28, 0x07	; 7
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	cd bf       	out	0x3d, r28	; 61
    30ee:	df 91       	pop	r29
    30f0:	cf 91       	pop	r28
    30f2:	1f 91       	pop	r17
    30f4:	0f 91       	pop	r16
    30f6:	bf 90       	pop	r11
    30f8:	af 90       	pop	r10
    30fa:	9f 90       	pop	r9
    30fc:	8f 90       	pop	r8
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    30fe:	0c 94 09 26 	jmp	0x4c12	; 0x4c12 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    3102:	84 2f       	mov	r24, r20
    3104:	83 70       	andi	r24, 0x03	; 3
    3106:	09 f0       	breq	.+2      	; 0x310a <process_action+0x29a>
    3108:	76 c0       	rjmp	.+236    	; 0x31f6 <process_action+0x386>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    310a:	11 11       	cpse	r17, r1
    310c:	d5 c1       	rjmp	.+938    	; 0x34b8 <process_action+0x648>
                    uint8_t shift = action.layer_bitop.part*4;
    310e:	26 2f       	mov	r18, r22
    3110:	22 95       	swap	r18
    3112:	26 95       	lsr	r18
    3114:	27 70       	andi	r18, 0x07	; 7
    3116:	22 0f       	add	r18, r18
    3118:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    311a:	86 2f       	mov	r24, r22
    311c:	8f 70       	andi	r24, 0x0F	; 15
    311e:	88 2e       	mov	r8, r24
    3120:	91 2c       	mov	r9, r1
    3122:	a1 2c       	mov	r10, r1
    3124:	b1 2c       	mov	r11, r1
    3126:	02 2e       	mov	r0, r18
    3128:	04 c0       	rjmp	.+8      	; 0x3132 <process_action+0x2c2>
    312a:	88 0c       	add	r8, r8
    312c:	99 1c       	adc	r9, r9
    312e:	aa 1c       	adc	r10, r10
    3130:	bb 1c       	adc	r11, r11
    3132:	0a 94       	dec	r0
    3134:	d2 f7       	brpl	.-12     	; 0x312a <process_action+0x2ba>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    3136:	64 ff       	sbrs	r22, 4
    3138:	10 c0       	rjmp	.+32     	; 0x315a <process_action+0x2ea>
    313a:	6f e0       	ldi	r22, 0x0F	; 15
    313c:	70 e0       	ldi	r23, 0x00	; 0
    313e:	80 e0       	ldi	r24, 0x00	; 0
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	04 c0       	rjmp	.+8      	; 0x314c <process_action+0x2dc>
    3144:	66 0f       	add	r22, r22
    3146:	77 1f       	adc	r23, r23
    3148:	88 1f       	adc	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	2a 95       	dec	r18
    314e:	d2 f7       	brpl	.-12     	; 0x3144 <process_action+0x2d4>
    3150:	60 95       	com	r22
    3152:	70 95       	com	r23
    3154:	80 95       	com	r24
    3156:	90 95       	com	r25
    3158:	03 c0       	rjmp	.+6      	; 0x3160 <process_action+0x2f0>
    315a:	60 e0       	ldi	r22, 0x00	; 0
    315c:	70 e0       	ldi	r23, 0x00	; 0
    315e:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    3160:	24 2f       	mov	r18, r20
    3162:	26 95       	lsr	r18
    3164:	26 95       	lsr	r18
    3166:	23 70       	andi	r18, 0x03	; 3
    3168:	42 2f       	mov	r20, r18
    316a:	50 e0       	ldi	r21, 0x00	; 0
    316c:	42 30       	cpi	r20, 0x02	; 2
    316e:	51 05       	cpc	r21, r1
    3170:	d1 f0       	breq	.+52     	; 0x31a6 <process_action+0x336>
    3172:	43 30       	cpi	r20, 0x03	; 3
    3174:	51 05       	cpc	r21, r1
    3176:	59 f1       	breq	.+86     	; 0x31ce <process_action+0x35e>
    3178:	68 29       	or	r22, r8
    317a:	79 29       	or	r23, r9
    317c:	8a 29       	or	r24, r10
    317e:	9b 29       	or	r25, r11
    3180:	41 30       	cpi	r20, 0x01	; 1
    3182:	51 05       	cpc	r21, r1
    3184:	41 f1       	breq	.+80     	; 0x31d6 <process_action+0x366>
            break;
#endif
        default:
            break;
    }
}
    3186:	27 96       	adiw	r28, 0x07	; 7
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	df 91       	pop	r29
    3194:	cf 91       	pop	r28
    3196:	1f 91       	pop	r17
    3198:	0f 91       	pop	r16
    319a:	bf 90       	pop	r11
    319c:	af 90       	pop	r10
    319e:	9f 90       	pop	r9
    31a0:	8f 90       	pop	r8
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    31a2:	0c 94 bd 1e 	jmp	0x3d7a	; 0x3d7a <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    31a6:	68 29       	or	r22, r8
    31a8:	79 29       	or	r23, r9
    31aa:	8a 29       	or	r24, r10
    31ac:	9b 29       	or	r25, r11
            break;
#endif
        default:
            break;
    }
}
    31ae:	27 96       	adiw	r28, 0x07	; 7
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	f8 94       	cli
    31b4:	de bf       	out	0x3e, r29	; 62
    31b6:	0f be       	out	0x3f, r0	; 63
    31b8:	cd bf       	out	0x3d, r28	; 61
    31ba:	df 91       	pop	r29
    31bc:	cf 91       	pop	r28
    31be:	1f 91       	pop	r17
    31c0:	0f 91       	pop	r16
    31c2:	bf 90       	pop	r11
    31c4:	af 90       	pop	r10
    31c6:	9f 90       	pop	r9
    31c8:	8f 90       	pop	r8
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    31ca:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    31ce:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <default_layer_and>
    31d2:	c5 01       	movw	r24, r10
    31d4:	b4 01       	movw	r22, r8
            break;
#endif
        default:
            break;
    }
}
    31d6:	27 96       	adiw	r28, 0x07	; 7
    31d8:	0f b6       	in	r0, 0x3f	; 63
    31da:	f8 94       	cli
    31dc:	de bf       	out	0x3e, r29	; 62
    31de:	0f be       	out	0x3f, r0	; 63
    31e0:	cd bf       	out	0x3d, r28	; 61
    31e2:	df 91       	pop	r29
    31e4:	cf 91       	pop	r28
    31e6:	1f 91       	pop	r17
    31e8:	0f 91       	pop	r16
    31ea:	bf 90       	pop	r11
    31ec:	af 90       	pop	r10
    31ee:	9f 90       	pop	r9
    31f0:	8f 90       	pop	r8
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    31f2:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    31f6:	11 23       	and	r17, r17
    31f8:	19 f0       	breq	.+6      	; 0x3200 <process_action+0x390>
    31fa:	84 2f       	mov	r24, r20
    31fc:	81 70       	andi	r24, 0x01	; 1
    31fe:	01 c0       	rjmp	.+2      	; 0x3202 <process_action+0x392>
    3200:	86 95       	lsr	r24
    3202:	88 23       	and	r24, r24
    3204:	09 f4       	brne	.+2      	; 0x3208 <process_action+0x398>
    3206:	58 c1       	rjmp	.+688    	; 0x34b8 <process_action+0x648>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    3208:	26 2f       	mov	r18, r22
    320a:	22 95       	swap	r18
    320c:	26 95       	lsr	r18
    320e:	27 70       	andi	r18, 0x07	; 7
    3210:	22 0f       	add	r18, r18
    3212:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    3214:	86 2f       	mov	r24, r22
    3216:	8f 70       	andi	r24, 0x0F	; 15
    3218:	88 2e       	mov	r8, r24
    321a:	91 2c       	mov	r9, r1
    321c:	a1 2c       	mov	r10, r1
    321e:	b1 2c       	mov	r11, r1
    3220:	02 2e       	mov	r0, r18
    3222:	04 c0       	rjmp	.+8      	; 0x322c <process_action+0x3bc>
    3224:	88 0c       	add	r8, r8
    3226:	99 1c       	adc	r9, r9
    3228:	aa 1c       	adc	r10, r10
    322a:	bb 1c       	adc	r11, r11
    322c:	0a 94       	dec	r0
    322e:	d2 f7       	brpl	.-12     	; 0x3224 <process_action+0x3b4>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    3230:	64 ff       	sbrs	r22, 4
    3232:	10 c0       	rjmp	.+32     	; 0x3254 <process_action+0x3e4>
    3234:	6f e0       	ldi	r22, 0x0F	; 15
    3236:	70 e0       	ldi	r23, 0x00	; 0
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	04 c0       	rjmp	.+8      	; 0x3246 <process_action+0x3d6>
    323e:	66 0f       	add	r22, r22
    3240:	77 1f       	adc	r23, r23
    3242:	88 1f       	adc	r24, r24
    3244:	99 1f       	adc	r25, r25
    3246:	2a 95       	dec	r18
    3248:	d2 f7       	brpl	.-12     	; 0x323e <process_action+0x3ce>
    324a:	60 95       	com	r22
    324c:	70 95       	com	r23
    324e:	80 95       	com	r24
    3250:	90 95       	com	r25
    3252:	03 c0       	rjmp	.+6      	; 0x325a <process_action+0x3ea>
    3254:	60 e0       	ldi	r22, 0x00	; 0
    3256:	70 e0       	ldi	r23, 0x00	; 0
    3258:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    325a:	24 2f       	mov	r18, r20
    325c:	26 95       	lsr	r18
    325e:	26 95       	lsr	r18
    3260:	23 70       	andi	r18, 0x03	; 3
    3262:	42 2f       	mov	r20, r18
    3264:	50 e0       	ldi	r21, 0x00	; 0
    3266:	42 30       	cpi	r20, 0x02	; 2
    3268:	51 05       	cpc	r21, r1
    326a:	d1 f0       	breq	.+52     	; 0x32a0 <process_action+0x430>
    326c:	43 30       	cpi	r20, 0x03	; 3
    326e:	51 05       	cpc	r21, r1
    3270:	59 f1       	breq	.+86     	; 0x32c8 <process_action+0x458>
    3272:	68 29       	or	r22, r8
    3274:	79 29       	or	r23, r9
    3276:	8a 29       	or	r24, r10
    3278:	9b 29       	or	r25, r11
    327a:	41 30       	cpi	r20, 0x01	; 1
    327c:	51 05       	cpc	r21, r1
    327e:	41 f1       	breq	.+80     	; 0x32d0 <process_action+0x460>
            break;
#endif
        default:
            break;
    }
}
    3280:	27 96       	adiw	r28, 0x07	; 7
    3282:	0f b6       	in	r0, 0x3f	; 63
    3284:	f8 94       	cli
    3286:	de bf       	out	0x3e, r29	; 62
    3288:	0f be       	out	0x3f, r0	; 63
    328a:	cd bf       	out	0x3d, r28	; 61
    328c:	df 91       	pop	r29
    328e:	cf 91       	pop	r28
    3290:	1f 91       	pop	r17
    3292:	0f 91       	pop	r16
    3294:	bf 90       	pop	r11
    3296:	af 90       	pop	r10
    3298:	9f 90       	pop	r9
    329a:	8f 90       	pop	r8
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    329c:	0c 94 5c 1f 	jmp	0x3eb8	; 0x3eb8 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    32a0:	68 29       	or	r22, r8
    32a2:	79 29       	or	r23, r9
    32a4:	8a 29       	or	r24, r10
    32a6:	9b 29       	or	r25, r11
            break;
#endif
        default:
            break;
    }
}
    32a8:	27 96       	adiw	r28, 0x07	; 7
    32aa:	0f b6       	in	r0, 0x3f	; 63
    32ac:	f8 94       	cli
    32ae:	de bf       	out	0x3e, r29	; 62
    32b0:	0f be       	out	0x3f, r0	; 63
    32b2:	cd bf       	out	0x3d, r28	; 61
    32b4:	df 91       	pop	r29
    32b6:	cf 91       	pop	r28
    32b8:	1f 91       	pop	r17
    32ba:	0f 91       	pop	r16
    32bc:	bf 90       	pop	r11
    32be:	af 90       	pop	r10
    32c0:	9f 90       	pop	r9
    32c2:	8f 90       	pop	r8
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    32c4:	0c 94 6e 1f 	jmp	0x3edc	; 0x3edc <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    32c8:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <layer_and>
    32cc:	c5 01       	movw	r24, r10
    32ce:	b4 01       	movw	r22, r8
            break;
#endif
        default:
            break;
    }
}
    32d0:	27 96       	adiw	r28, 0x07	; 7
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	f8 94       	cli
    32d6:	de bf       	out	0x3e, r29	; 62
    32d8:	0f be       	out	0x3f, r0	; 63
    32da:	cd bf       	out	0x3d, r28	; 61
    32dc:	df 91       	pop	r29
    32de:	cf 91       	pop	r28
    32e0:	1f 91       	pop	r17
    32e2:	0f 91       	pop	r16
    32e4:	bf 90       	pop	r11
    32e6:	af 90       	pop	r10
    32e8:	9f 90       	pop	r9
    32ea:	8f 90       	pop	r8
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    32ec:	0c 94 4a 1f 	jmp	0x3e94	; 0x3e94 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    32f0:	60 3f       	cpi	r22, 0xF0	; 240
    32f2:	51 f1       	breq	.+84     	; 0x3348 <process_action+0x4d8>
    32f4:	20 f4       	brcc	.+8      	; 0x32fe <process_action+0x48e>
    32f6:	60 3e       	cpi	r22, 0xE0	; 224
    32f8:	08 f4       	brcc	.+2      	; 0x32fc <process_action+0x48c>
    32fa:	8e c0       	rjmp	.+284    	; 0x3418 <process_action+0x5a8>
    32fc:	08 c0       	rjmp	.+16     	; 0x330e <process_action+0x49e>
    32fe:	62 3f       	cpi	r22, 0xF2	; 242
    3300:	09 f4       	brne	.+2      	; 0x3304 <process_action+0x494>
    3302:	63 c0       	rjmp	.+198    	; 0x33ca <process_action+0x55a>
    3304:	e0 f1       	brcs	.+120    	; 0x337e <process_action+0x50e>
    3306:	63 3f       	cpi	r22, 0xF3	; 243
    3308:	09 f0       	breq	.+2      	; 0x330c <process_action+0x49c>
    330a:	86 c0       	rjmp	.+268    	; 0x3418 <process_action+0x5a8>
    330c:	61 c0       	rjmp	.+194    	; 0x33d0 <process_action+0x560>
    330e:	06 2f       	mov	r16, r22
    3310:	0f 70       	andi	r16, 0x0F	; 15
    3312:	84 2f       	mov	r24, r20
    3314:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    3316:	11 23       	and	r17, r17
    3318:	21 f0       	breq	.+8      	; 0x3322 <process_action+0x4b2>
                        layer_on(action.layer_tap.val);
    331a:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    331e:	80 2f       	mov	r24, r16
    3320:	78 ce       	rjmp	.-784    	; 0x3012 <process_action+0x1a2>
                    } else {
                        layer_off(action.layer_tap.val);
    3322:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    3326:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    3328:	27 96       	adiw	r28, 0x07	; 7
    332a:	0f b6       	in	r0, 0x3f	; 63
    332c:	f8 94       	cli
    332e:	de bf       	out	0x3e, r29	; 62
    3330:	0f be       	out	0x3f, r0	; 63
    3332:	cd bf       	out	0x3d, r28	; 61
    3334:	df 91       	pop	r29
    3336:	cf 91       	pop	r28
    3338:	1f 91       	pop	r17
    333a:	0f 91       	pop	r16
    333c:	bf 90       	pop	r11
    333e:	af 90       	pop	r10
    3340:	9f 90       	pop	r9
    3342:	8f 90       	pop	r8
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    3344:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    3348:	11 23       	and	r17, r17
    334a:	a9 f0       	breq	.+42     	; 0x3376 <process_action+0x506>
                        if (tap_count < TAPPING_TOGGLE) {
    334c:	05 30       	cpi	r16, 0x05	; 5
    334e:	08 f0       	brcs	.+2      	; 0x3352 <process_action+0x4e2>
    3350:	b3 c0       	rjmp	.+358    	; 0x34b8 <process_action+0x648>
                            layer_invert(action.layer_tap.val);
    3352:	84 2f       	mov	r24, r20
    3354:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    3356:	27 96       	adiw	r28, 0x07	; 7
    3358:	0f b6       	in	r0, 0x3f	; 63
    335a:	f8 94       	cli
    335c:	de bf       	out	0x3e, r29	; 62
    335e:	0f be       	out	0x3f, r0	; 63
    3360:	cd bf       	out	0x3d, r28	; 61
    3362:	df 91       	pop	r29
    3364:	cf 91       	pop	r28
    3366:	1f 91       	pop	r17
    3368:	0f 91       	pop	r16
    336a:	bf 90       	pop	r11
    336c:	af 90       	pop	r10
    336e:	9f 90       	pop	r9
    3370:	8f 90       	pop	r8
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    3372:	0c 94 2f 1f 	jmp	0x3e5e	; 0x3e5e <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    3376:	06 30       	cpi	r16, 0x06	; 6
    3378:	08 f0       	brcs	.+2      	; 0x337c <process_action+0x50c>
    337a:	9e c0       	rjmp	.+316    	; 0x34b8 <process_action+0x648>
    337c:	ea cf       	rjmp	.-44     	; 0x3352 <process_action+0x4e2>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    337e:	11 23       	and	r17, r17
    3380:	91 f0       	breq	.+36     	; 0x33a6 <process_action+0x536>
    3382:	84 2f       	mov	r24, r20
    3384:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    3386:	27 96       	adiw	r28, 0x07	; 7
    3388:	0f b6       	in	r0, 0x3f	; 63
    338a:	f8 94       	cli
    338c:	de bf       	out	0x3e, r29	; 62
    338e:	0f be       	out	0x3f, r0	; 63
    3390:	cd bf       	out	0x3d, r28	; 61
    3392:	df 91       	pop	r29
    3394:	cf 91       	pop	r28
    3396:	1f 91       	pop	r17
    3398:	0f 91       	pop	r16
    339a:	bf 90       	pop	r11
    339c:	af 90       	pop	r10
    339e:	9f 90       	pop	r9
    33a0:	8f 90       	pop	r8
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    33a2:	0c 94 f5 1e 	jmp	0x3dea	; 0x3dea <layer_on>
                                    layer_off(action.layer_tap.val);
    33a6:	84 2f       	mov	r24, r20
    33a8:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    33aa:	27 96       	adiw	r28, 0x07	; 7
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    33b6:	df 91       	pop	r29
    33b8:	cf 91       	pop	r28
    33ba:	1f 91       	pop	r17
    33bc:	0f 91       	pop	r16
    33be:	bf 90       	pop	r11
    33c0:	af 90       	pop	r10
    33c2:	9f 90       	pop	r9
    33c4:	8f 90       	pop	r8
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    33c6:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <layer_off>
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    33ca:	11 11       	cpse	r17, r1
    33cc:	ec cf       	rjmp	.-40     	; 0x33a6 <process_action+0x536>
    33ce:	d9 cf       	rjmp	.-78     	; 0x3382 <process_action+0x512>
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    33d0:	11 23       	and	r17, r17
    33d2:	91 f0       	breq	.+36     	; 0x33f8 <process_action+0x588>
    33d4:	84 2f       	mov	r24, r20
    33d6:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    33d8:	27 96       	adiw	r28, 0x07	; 7
    33da:	0f b6       	in	r0, 0x3f	; 63
    33dc:	f8 94       	cli
    33de:	de bf       	out	0x3e, r29	; 62
    33e0:	0f be       	out	0x3f, r0	; 63
    33e2:	cd bf       	out	0x3d, r28	; 61
    33e4:	df 91       	pop	r29
    33e6:	cf 91       	pop	r28
    33e8:	1f 91       	pop	r17
    33ea:	0f 91       	pop	r16
    33ec:	bf 90       	pop	r11
    33ee:	af 90       	pop	r10
    33f0:	9f 90       	pop	r9
    33f2:	8f 90       	pop	r8
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    33f4:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <layer_move>
            break;
#endif
        default:
            break;
    }
}
    33f8:	27 96       	adiw	r28, 0x07	; 7
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	cd bf       	out	0x3d, r28	; 61
    3404:	df 91       	pop	r29
    3406:	cf 91       	pop	r28
    3408:	1f 91       	pop	r17
    340a:	0f 91       	pop	r16
    340c:	bf 90       	pop	r11
    340e:	af 90       	pop	r10
    3410:	9f 90       	pop	r9
    3412:	8f 90       	pop	r8
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    3414:	0c 94 e1 1e 	jmp	0x3dc2	; 0x3dc2 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    3418:	11 23       	and	r17, r17
    341a:	a1 f0       	breq	.+40     	; 0x3444 <process_action+0x5d4>
                        if (tap_count > 0) {
    341c:	00 23       	and	r16, r16
    341e:	09 f4       	brne	.+2      	; 0x3422 <process_action+0x5b2>
    3420:	b0 cf       	rjmp	.-160    	; 0x3382 <process_action+0x512>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    3422:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    3424:	27 96       	adiw	r28, 0x07	; 7
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	df 91       	pop	r29
    3432:	cf 91       	pop	r28
    3434:	1f 91       	pop	r17
    3436:	0f 91       	pop	r16
    3438:	bf 90       	pop	r11
    343a:	af 90       	pop	r10
    343c:	9f 90       	pop	r9
    343e:	8f 90       	pop	r8
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    3440:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    3444:	00 23       	and	r16, r16
    3446:	09 f4       	brne	.+2      	; 0x344a <process_action+0x5da>
    3448:	ae cf       	rjmp	.-164    	; 0x33a6 <process_action+0x536>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    344a:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    344c:	27 96       	adiw	r28, 0x07	; 7
    344e:	0f b6       	in	r0, 0x3f	; 63
    3450:	f8 94       	cli
    3452:	de bf       	out	0x3e, r29	; 62
    3454:	0f be       	out	0x3f, r0	; 63
    3456:	cd bf       	out	0x3d, r28	; 61
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	1f 91       	pop	r17
    345e:	0f 91       	pop	r16
    3460:	bf 90       	pop	r11
    3462:	af 90       	pop	r10
    3464:	9f 90       	pop	r9
    3466:	8f 90       	pop	r8
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    3468:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    346c:	4f 70       	andi	r20, 0x0F	; 15
    346e:	c5 01       	movw	r24, r10
    3470:	0e 94 ab 21 	call	0x4356	; 0x4356 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    3474:	27 96       	adiw	r28, 0x07	; 7
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	cd bf       	out	0x3d, r28	; 61
    3480:	df 91       	pop	r29
    3482:	cf 91       	pop	r28
    3484:	1f 91       	pop	r17
    3486:	0f 91       	pop	r16
    3488:	bf 90       	pop	r11
    348a:	af 90       	pop	r10
    348c:	9f 90       	pop	r9
    348e:	8f 90       	pop	r8
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    3490:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    3494:	4f 70       	andi	r20, 0x0F	; 15
    3496:	c5 01       	movw	r24, r10
            break;
#endif
        default:
            break;
    }
}
    3498:	27 96       	adiw	r28, 0x07	; 7
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	cd bf       	out	0x3d, r28	; 61
    34a4:	df 91       	pop	r29
    34a6:	cf 91       	pop	r28
    34a8:	1f 91       	pop	r17
    34aa:	0f 91       	pop	r16
    34ac:	bf 90       	pop	r11
    34ae:	af 90       	pop	r10
    34b0:	9f 90       	pop	r9
    34b2:	8f 90       	pop	r8
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    34b4:	0c 94 06 08 	jmp	0x100c	; 0x100c <action_function>
            break;
#endif
        default:
            break;
    }
}
    34b8:	27 96       	adiw	r28, 0x07	; 7
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	de bf       	out	0x3e, r29	; 62
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	cd bf       	out	0x3d, r28	; 61
    34c4:	df 91       	pop	r29
    34c6:	cf 91       	pop	r28
    34c8:	1f 91       	pop	r17
    34ca:	0f 91       	pop	r16
    34cc:	bf 90       	pop	r11
    34ce:	af 90       	pop	r10
    34d0:	9f 90       	pop	r9
    34d2:	8f 90       	pop	r8
    34d4:	08 95       	ret

000034d6 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    34d6:	0e 94 2c 20 	call	0x4058	; 0x4058 <clear_weak_mods>
    clear_keys();
    34da:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <clear_keys>
    send_keyboard_report();
    34de:	0e 94 48 20 	call	0x4090	; 0x4090 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    34e2:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <mousekey_clear>
    mousekey_send();
    34e6:	0e 94 09 26 	call	0x4c12	; 0x4c12 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <host_system_send>
    host_consumer_send(0);
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <host_consumer_send>

000034fa <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    34fa:	0e 94 1c 20 	call	0x4038	; 0x4038 <clear_mods>
    clear_keyboard_but_mods();
    34fe:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <clear_keyboard_but_mods>

00003502 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    3502:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <layer_switch_get_action>

    switch (action.kind.id) {
    3506:	29 2f       	mov	r18, r25
    3508:	22 95       	swap	r18
    350a:	2f 70       	andi	r18, 0x0F	; 15
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	2c 30       	cpi	r18, 0x0C	; 12
    3510:	31 05       	cpc	r19, r1
    3512:	4c f4       	brge	.+18     	; 0x3526 <is_tap_key+0x24>
    3514:	2a 30       	cpi	r18, 0x0A	; 10
    3516:	31 05       	cpc	r19, r1
    3518:	6c f4       	brge	.+26     	; 0x3534 <is_tap_key+0x32>
    351a:	22 50       	subi	r18, 0x02	; 2
    351c:	31 09       	sbc	r19, r1
    351e:	22 30       	cpi	r18, 0x02	; 2
    3520:	31 05       	cpc	r19, r1
    3522:	90 f4       	brcc	.+36     	; 0x3548 <is_tap_key+0x46>
    3524:	07 c0       	rjmp	.+14     	; 0x3534 <is_tap_key+0x32>
    3526:	2c 30       	cpi	r18, 0x0C	; 12
    3528:	31 05       	cpc	r19, r1
    352a:	51 f0       	breq	.+20     	; 0x3540 <is_tap_key+0x3e>
    352c:	2f 30       	cpi	r18, 0x0F	; 15
    352e:	31 05       	cpc	r19, r1
    3530:	59 f4       	brne	.+22     	; 0x3548 <is_tap_key+0x46>
    3532:	06 c0       	rjmp	.+12     	; 0x3540 <is_tap_key+0x3e>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    3534:	80 3e       	cpi	r24, 0xE0	; 224
    3536:	10 f0       	brcs	.+4      	; 0x353c <is_tap_key+0x3a>
    3538:	80 3f       	cpi	r24, 0xF0	; 240
    353a:	31 f4       	brne	.+12     	; 0x3548 <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    3540:	93 fb       	bst	r25, 3
    3542:	88 27       	eor	r24, r24
    3544:	80 f9       	bld	r24, 0
    3546:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    3548:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    354a:	08 95       	ret

0000354c <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    354c:	cf 93       	push	r28
    354e:	df 93       	push	r29
    3550:	00 d0       	rcall	.+0      	; 0x3552 <debug_event+0x6>
    3552:	00 d0       	rcall	.+0      	; 0x3554 <debug_event+0x8>
    3554:	1f 92       	push	r1
    3556:	cd b7       	in	r28, 0x3d	; 61
    3558:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    355a:	0f 90       	pop	r0
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	0f 90       	pop	r0
    3564:	df 91       	pop	r29
    3566:	cf 91       	pop	r28
    3568:	08 95       	ret

0000356a <debug_record>:

void debug_record(keyrecord_t record)
{
    356a:	cf 93       	push	r28
    356c:	df 93       	push	r29
    356e:	00 d0       	rcall	.+0      	; 0x3570 <debug_record+0x6>
    3570:	00 d0       	rcall	.+0      	; 0x3572 <debug_record+0x8>
    3572:	00 d0       	rcall	.+0      	; 0x3574 <debug_record+0xa>
    3574:	cd b7       	in	r28, 0x3d	; 61
    3576:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    3578:	26 96       	adiw	r28, 0x06	; 6
    357a:	0f b6       	in	r0, 0x3f	; 63
    357c:	f8 94       	cli
    357e:	de bf       	out	0x3e, r29	; 62
    3580:	0f be       	out	0x3f, r0	; 63
    3582:	cd bf       	out	0x3d, r28	; 61
    3584:	df 91       	pop	r29
    3586:	cf 91       	pop	r28
    3588:	08 95       	ret

0000358a <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    358a:	ef 92       	push	r14
    358c:	ff 92       	push	r15
    358e:	cf 93       	push	r28
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3590:	90 91 cf 02 	lds	r25, 0x02CF
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    3594:	c6 e0       	ldi	r28, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3596:	15 c0       	rjmp	.+42     	; 0x35c2 <debug_waiting_buffer+0x38>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    3598:	e9 2e       	mov	r14, r25
    359a:	f1 2c       	mov	r15, r1
    359c:	ce 9d       	mul	r28, r14
    359e:	f0 01       	movw	r30, r0
    35a0:	cf 9d       	mul	r28, r15
    35a2:	f0 0d       	add	r31, r0
    35a4:	11 24       	eor	r1, r1
    35a6:	e1 56       	subi	r30, 0x61	; 97
    35a8:	fd 4f       	sbci	r31, 0xFD	; 253
    35aa:	40 81       	ld	r20, Z
    35ac:	51 81       	ldd	r21, Z+1	; 0x01
    35ae:	62 81       	ldd	r22, Z+2	; 0x02
    35b0:	73 81       	ldd	r23, Z+3	; 0x03
    35b2:	84 81       	ldd	r24, Z+4	; 0x04
    35b4:	95 81       	ldd	r25, Z+5	; 0x05
    35b6:	0e 94 b5 1a 	call	0x356a	; 0x356a <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    35ba:	c7 01       	movw	r24, r14
    35bc:	01 96       	adiw	r24, 0x01	; 1
    35be:	98 2f       	mov	r25, r24
    35c0:	97 70       	andi	r25, 0x07	; 7
    35c2:	80 91 d0 02 	lds	r24, 0x02D0
    35c6:	98 13       	cpse	r25, r24
    35c8:	e7 cf       	rjmp	.-50     	; 0x3598 <debug_waiting_buffer+0xe>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    35ca:	cf 91       	pop	r28
    35cc:	ff 90       	pop	r15
    35ce:	ef 90       	pop	r14
    35d0:	08 95       	ret

000035d2 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    35d2:	40 91 99 02 	lds	r20, 0x0299
    35d6:	50 91 9a 02 	lds	r21, 0x029A
    35da:	60 91 9b 02 	lds	r22, 0x029B
    35de:	70 91 9c 02 	lds	r23, 0x029C
    35e2:	80 91 9d 02 	lds	r24, 0x029D
    35e6:	90 91 9e 02 	lds	r25, 0x029E
    35ea:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <debug_record>

000035ee <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    35ee:	0f 93       	push	r16
    35f0:	1f 93       	push	r17
    35f2:	cf 93       	push	r28
    35f4:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    35f6:	80 91 9e 02 	lds	r24, 0x029E
    35fa:	82 95       	swap	r24
    35fc:	8f 70       	andi	r24, 0x0F	; 15
    35fe:	09 f0       	breq	.+2      	; 0x3602 <waiting_buffer_scan_tap+0x14>
    3600:	69 c0       	rjmp	.+210    	; 0x36d4 <waiting_buffer_scan_tap+0xe6>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    3602:	80 91 9b 02 	lds	r24, 0x029B
    3606:	88 23       	and	r24, r24
    3608:	09 f4       	brne	.+2      	; 0x360c <waiting_buffer_scan_tap+0x1e>
    360a:	64 c0       	rjmp	.+200    	; 0x36d4 <waiting_buffer_scan_tap+0xe6>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    360c:	a0 91 cf 02 	lds	r26, 0x02CF
    3610:	d0 91 d0 02 	lds	r29, 0x02D0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3614:	b0 91 99 02 	lds	r27, 0x0299
    3618:	c0 91 9a 02 	lds	r28, 0x029A
    361c:	80 91 9c 02 	lds	r24, 0x029C
    3620:	90 91 9d 02 	lds	r25, 0x029D
    3624:	21 e0       	ldi	r18, 0x01	; 1
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	bf 3f       	cpi	r27, 0xFF	; 255
    362a:	11 f0       	breq	.+4      	; 0x3630 <waiting_buffer_scan_tap+0x42>
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	12 2f       	mov	r17, r18
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    3632:	bc 01       	movw	r22, r24
    3634:	60 95       	com	r22
    3636:	70 95       	com	r23
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3638:	06 e0       	ldi	r16, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    363a:	4a c0       	rjmp	.+148    	; 0x36d0 <waiting_buffer_scan_tap+0xe2>
    363c:	00 97       	sbiw	r24, 0x00	; 0
    363e:	21 f0       	breq	.+8      	; 0x3648 <waiting_buffer_scan_tap+0x5a>
    3640:	cf 3f       	cpi	r28, 0xFF	; 255
    3642:	29 f4       	brne	.+10     	; 0x364e <waiting_buffer_scan_tap+0x60>
    3644:	21 2f       	mov	r18, r17
    3646:	05 c0       	rjmp	.+10     	; 0x3652 <waiting_buffer_scan_tap+0x64>
    3648:	21 e0       	ldi	r18, 0x01	; 1
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	02 c0       	rjmp	.+4      	; 0x3652 <waiting_buffer_scan_tap+0x64>
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3652:	20 fd       	sbrc	r18, 0
    3654:	3b c0       	rjmp	.+118    	; 0x36cc <waiting_buffer_scan_tap+0xde>
    3656:	4a 2f       	mov	r20, r26
    3658:	50 e0       	ldi	r21, 0x00	; 0
    365a:	04 9f       	mul	r16, r20
    365c:	f0 01       	movw	r30, r0
    365e:	05 9f       	mul	r16, r21
    3660:	f0 0d       	add	r31, r0
    3662:	11 24       	eor	r1, r1
    3664:	e1 56       	subi	r30, 0x61	; 97
    3666:	fd 4f       	sbci	r31, 0xFD	; 253
    3668:	21 81       	ldd	r18, Z+1	; 0x01
    366a:	c2 13       	cpse	r28, r18
    366c:	2f c0       	rjmp	.+94     	; 0x36cc <waiting_buffer_scan_tap+0xde>
    366e:	20 81       	ld	r18, Z
    3670:	b2 13       	cpse	r27, r18
    3672:	2c c0       	rjmp	.+88     	; 0x36cc <waiting_buffer_scan_tap+0xde>
    3674:	22 81       	ldd	r18, Z+2	; 0x02
    3676:	21 11       	cpse	r18, r1
    3678:	29 c0       	rjmp	.+82     	; 0x36cc <waiting_buffer_scan_tap+0xde>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    367a:	23 81       	ldd	r18, Z+3	; 0x03
    367c:	34 81       	ldd	r19, Z+4	; 0x04
    367e:	28 17       	cp	r18, r24
    3680:	39 07       	cpc	r19, r25
    3682:	18 f0       	brcs	.+6      	; 0x368a <waiting_buffer_scan_tap+0x9c>
    3684:	28 1b       	sub	r18, r24
    3686:	39 0b       	sbc	r19, r25
    3688:	02 c0       	rjmp	.+4      	; 0x368e <waiting_buffer_scan_tap+0xa0>
    368a:	26 0f       	add	r18, r22
    368c:	37 1f       	adc	r19, r23
    368e:	28 3c       	cpi	r18, 0xC8	; 200
    3690:	31 05       	cpc	r19, r1
    3692:	e0 f4       	brcc	.+56     	; 0x36cc <waiting_buffer_scan_tap+0xde>
            tapping_key.tap.count = 1;
    3694:	80 91 9e 02 	lds	r24, 0x029E
    3698:	8f 70       	andi	r24, 0x0F	; 15
    369a:	80 61       	ori	r24, 0x10	; 16
    369c:	80 93 9e 02 	sts	0x029E, r24
            waiting_buffer[i].tap.count = 1;
    36a0:	86 e0       	ldi	r24, 0x06	; 6
    36a2:	84 9f       	mul	r24, r20
    36a4:	f0 01       	movw	r30, r0
    36a6:	85 9f       	mul	r24, r21
    36a8:	f0 0d       	add	r31, r0
    36aa:	11 24       	eor	r1, r1
    36ac:	ec 55       	subi	r30, 0x5C	; 92
    36ae:	fd 4f       	sbci	r31, 0xFD	; 253
    36b0:	80 81       	ld	r24, Z
    36b2:	8f 70       	andi	r24, 0x0F	; 15
    36b4:	80 61       	ori	r24, 0x10	; 16
    36b6:	80 83       	st	Z, r24
            process_action(&tapping_key);
    36b8:	89 e9       	ldi	r24, 0x99	; 153
    36ba:	92 e0       	ldi	r25, 0x02	; 2
    36bc:	0e 94 38 17 	call	0x2e70	; 0x2e70 <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    36c0:	df 91       	pop	r29
    36c2:	cf 91       	pop	r28
    36c4:	1f 91       	pop	r17
    36c6:	0f 91       	pop	r16
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    36c8:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    36cc:	af 5f       	subi	r26, 0xFF	; 255
    36ce:	a7 70       	andi	r26, 0x07	; 7
    36d0:	ad 13       	cpse	r26, r29
    36d2:	b4 cf       	rjmp	.-152    	; 0x363c <waiting_buffer_scan_tap+0x4e>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    36d4:	df 91       	pop	r29
    36d6:	cf 91       	pop	r28
    36d8:	1f 91       	pop	r17
    36da:	0f 91       	pop	r16
    36dc:	08 95       	ret

000036de <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    36de:	cf 92       	push	r12
    36e0:	df 92       	push	r13
    36e2:	ef 92       	push	r14
    36e4:	ff 92       	push	r15
    36e6:	cf 93       	push	r28
    36e8:	df 93       	push	r29
    36ea:	cd b7       	in	r28, 0x3d	; 61
    36ec:	de b7       	in	r29, 0x3e	; 62
    36ee:	62 97       	sbiw	r28, 0x12	; 18
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	f8 94       	cli
    36f4:	de bf       	out	0x3e, r29	; 62
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	7c 01       	movw	r14, r24
    keyevent_t event = keyp->event;
    36fc:	85 e0       	ldi	r24, 0x05	; 5
    36fe:	f7 01       	movw	r30, r14
    3700:	de 01       	movw	r26, r28
    3702:	1d 96       	adiw	r26, 0x0d	; 13
    3704:	01 90       	ld	r0, Z+
    3706:	0d 92       	st	X+, r0
    3708:	8a 95       	dec	r24
    370a:	e1 f7       	brne	.-8      	; 0x3704 <process_tapping+0x26>
    370c:	d7 01       	movw	r26, r14
    370e:	4c 91       	ld	r20, X
    3710:	11 96       	adiw	r26, 0x01	; 1
    3712:	5c 91       	ld	r21, X
    3714:	11 97       	sbiw	r26, 0x01	; 1
    3716:	12 96       	adiw	r26, 0x02	; 2
    3718:	6c 91       	ld	r22, X
    371a:	12 97       	sbiw	r26, 0x02	; 2
    371c:	13 96       	adiw	r26, 0x03	; 3
    371e:	cd 90       	ld	r12, X+
    3720:	dc 90       	ld	r13, X
    3722:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    3724:	70 91 99 02 	lds	r23, 0x0299
    3728:	e0 91 9a 02 	lds	r30, 0x029A
    372c:	80 91 9c 02 	lds	r24, 0x029C
    3730:	90 91 9d 02 	lds	r25, 0x029D
    3734:	00 97       	sbiw	r24, 0x00	; 0
    3736:	39 f0       	breq	.+14     	; 0x3746 <process_tapping+0x68>
    3738:	ef 3f       	cpi	r30, 0xFF	; 255
    373a:	41 f4       	brne	.+16     	; 0x374c <process_tapping+0x6e>
    373c:	21 e0       	ldi	r18, 0x01	; 1
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	7f 3f       	cpi	r23, 0xFF	; 255
    3742:	31 f0       	breq	.+12     	; 0x3750 <process_tapping+0x72>
    3744:	03 c0       	rjmp	.+6      	; 0x374c <process_tapping+0x6e>
    3746:	21 e0       	ldi	r18, 0x01	; 1
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	02 c0       	rjmp	.+4      	; 0x3750 <process_tapping+0x72>
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	20 fd       	sbrc	r18, 0
    3752:	5c c1       	rjmp	.+696    	; 0x3a0c <process_tapping+0x32e>
    3754:	20 91 9b 02 	lds	r18, 0x029B
    3758:	22 23       	and	r18, r18
    375a:	09 f4       	brne	.+2      	; 0x375e <process_tapping+0x80>
    375c:	f1 c0       	rjmp	.+482    	; 0x3940 <process_tapping+0x262>
        if (WITHIN_TAPPING_TERM(event)) {
    375e:	c8 16       	cp	r12, r24
    3760:	d9 06       	cpc	r13, r25
    3762:	28 f0       	brcs	.+10     	; 0x376e <process_tapping+0x90>
    3764:	96 01       	movw	r18, r12
    3766:	28 1b       	sub	r18, r24
    3768:	39 0b       	sbc	r19, r25
    376a:	c9 01       	movw	r24, r18
    376c:	04 c0       	rjmp	.+8      	; 0x3776 <process_tapping+0x98>
    376e:	80 95       	com	r24
    3770:	90 95       	com	r25
    3772:	8c 0d       	add	r24, r12
    3774:	9d 1d       	adc	r25, r13
    3776:	88 3c       	cpi	r24, 0xC8	; 200
    3778:	91 05       	cpc	r25, r1
    377a:	08 f0       	brcs	.+2      	; 0x377e <process_tapping+0xa0>
    377c:	98 c0       	rjmp	.+304    	; 0x38ae <process_tapping+0x1d0>
            if (tapping_key.tap.count == 0) {
    377e:	80 91 9e 02 	lds	r24, 0x029E
    3782:	98 2f       	mov	r25, r24
    3784:	90 7f       	andi	r25, 0xF0	; 240
    3786:	09 f0       	breq	.+2      	; 0x378a <process_tapping+0xac>
    3788:	64 c0       	rjmp	.+200    	; 0x3852 <process_tapping+0x174>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    378a:	e5 13       	cpse	r30, r21
    378c:	14 c0       	rjmp	.+40     	; 0x37b6 <process_tapping+0xd8>
    378e:	74 13       	cpse	r23, r20
    3790:	12 c0       	rjmp	.+36     	; 0x37b6 <process_tapping+0xd8>
    3792:	61 11       	cpse	r22, r1
    3794:	10 c0       	rjmp	.+32     	; 0x37b6 <process_tapping+0xd8>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    3796:	8f 70       	andi	r24, 0x0F	; 15
    3798:	80 61       	ori	r24, 0x10	; 16
    379a:	80 93 9e 02 	sts	0x029E, r24
                    debug_tapping_key();
    379e:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <debug_tapping_key>
                    process_action(&tapping_key);
    37a2:	89 e9       	ldi	r24, 0x99	; 153
    37a4:	92 e0       	ldi	r25, 0x02	; 2
    37a6:	0e 94 38 17 	call	0x2e70	; 0x2e70 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    37aa:	80 91 9e 02 	lds	r24, 0x029E
    37ae:	d7 01       	movw	r26, r14
    37b0:	15 96       	adiw	r26, 0x05	; 5
    37b2:	8c 93       	st	X, r24
    37b4:	43 c1       	rjmp	.+646    	; 0x3a3c <process_tapping+0x35e>
    37b6:	cd 28       	or	r12, r13
    37b8:	39 f0       	breq	.+14     	; 0x37c8 <process_tapping+0xea>
    37ba:	5f 3f       	cpi	r21, 0xFF	; 255
    37bc:	41 f4       	brne	.+16     	; 0x37ce <process_tapping+0xf0>
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	90 e0       	ldi	r25, 0x00	; 0
    37c2:	4f 3f       	cpi	r20, 0xFF	; 255
    37c4:	31 f0       	breq	.+12     	; 0x37d2 <process_tapping+0xf4>
    37c6:	03 c0       	rjmp	.+6      	; 0x37ce <process_tapping+0xf0>
    37c8:	81 e0       	ldi	r24, 0x01	; 1
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	02 c0       	rjmp	.+4      	; 0x37d2 <process_tapping+0xf4>
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	90 e0       	ldi	r25, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    37d2:	80 fd       	sbrc	r24, 0
    37d4:	03 c0       	rjmp	.+6      	; 0x37dc <process_tapping+0xfe>
    37d6:	81 e0       	ldi	r24, 0x01	; 1
    37d8:	86 27       	eor	r24, r22
    37da:	02 c0       	rjmp	.+4      	; 0x37e0 <process_tapping+0x102>
    37dc:	80 e0       	ldi	r24, 0x00	; 0
    37de:	90 e0       	ldi	r25, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    37e0:	80 ff       	sbrs	r24, 0
    37e2:	2e c0       	rjmp	.+92     	; 0x3840 <process_tapping+0x162>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    37e4:	80 91 cf 02 	lds	r24, 0x02CF
    37e8:	20 91 d0 02 	lds	r18, 0x02D0
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    37ec:	36 e0       	ldi	r19, 0x06	; 6
    37ee:	13 c0       	rjmp	.+38     	; 0x3816 <process_tapping+0x138>
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	38 9f       	mul	r19, r24
    37f4:	f0 01       	movw	r30, r0
    37f6:	39 9f       	mul	r19, r25
    37f8:	f0 0d       	add	r31, r0
    37fa:	11 24       	eor	r1, r1
    37fc:	e1 56       	subi	r30, 0x61	; 97
    37fe:	fd 4f       	sbci	r31, 0xFD	; 253
    3800:	71 81       	ldd	r23, Z+1	; 0x01
    3802:	57 13       	cpse	r21, r23
    3804:	06 c0       	rjmp	.+12     	; 0x3812 <process_tapping+0x134>
    3806:	70 81       	ld	r23, Z
    3808:	47 13       	cpse	r20, r23
    380a:	03 c0       	rjmp	.+6      	; 0x3812 <process_tapping+0x134>
    380c:	72 81       	ldd	r23, Z+2	; 0x02
    380e:	67 13       	cpse	r22, r23
    3810:	17 c0       	rjmp	.+46     	; 0x3840 <process_tapping+0x162>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3812:	01 96       	adiw	r24, 0x01	; 1
    3814:	87 70       	andi	r24, 0x07	; 7
    3816:	82 13       	cpse	r24, r18
    3818:	eb cf       	rjmp	.-42     	; 0x37f0 <process_tapping+0x112>
    381a:	12 c1       	rjmp	.+548    	; 0x3a40 <process_tapping+0x362>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    381c:	9f 70       	andi	r25, 0x0F	; 15
    381e:	59 f0       	breq	.+22     	; 0x3836 <process_tapping+0x158>
    3820:	88 23       	and	r24, r24
    3822:	09 f4       	brne	.+2      	; 0x3826 <process_tapping+0x148>
    3824:	0b c1       	rjmp	.+534    	; 0x3a3c <process_tapping+0x35e>
    3826:	07 c0       	rjmp	.+14     	; 0x3836 <process_tapping+0x158>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3828:	9f 70       	andi	r25, 0x0F	; 15
    382a:	29 f0       	breq	.+10     	; 0x3836 <process_tapping+0x158>
    382c:	f7 01       	movw	r30, r14
    382e:	95 81       	ldd	r25, Z+5	; 0x05
    3830:	90 7f       	andi	r25, 0xF0	; 240
    3832:	09 f4       	brne	.+2      	; 0x3836 <process_tapping+0x158>
    3834:	03 c1       	rjmp	.+518    	; 0x3a3c <process_tapping+0x35e>
                            if (IS_MOD(action.key.code)) return false;
    3836:	80 5e       	subi	r24, 0xE0	; 224
    3838:	88 30       	cpi	r24, 0x08	; 8
    383a:	08 f4       	brcc	.+2      	; 0x383e <process_tapping+0x160>
    383c:	ff c0       	rjmp	.+510    	; 0x3a3c <process_tapping+0x35e>
    383e:	d2 c0       	rjmp	.+420    	; 0x39e4 <process_tapping+0x306>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    3840:	66 23       	and	r22, r22
    3842:	09 f4       	brne	.+2      	; 0x3846 <process_tapping+0x168>
    3844:	fb c0       	rjmp	.+502    	; 0x3a3c <process_tapping+0x35e>
                        tapping_key.tap.interrupted = true;
    3846:	80 91 9e 02 	lds	r24, 0x029E
    384a:	81 60       	ori	r24, 0x01	; 1
    384c:	80 93 9e 02 	sts	0x029E, r24
    3850:	f5 c0       	rjmp	.+490    	; 0x3a3c <process_tapping+0x35e>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3852:	e5 13       	cpse	r30, r21
    3854:	08 c0       	rjmp	.+16     	; 0x3866 <process_tapping+0x188>
    3856:	74 13       	cpse	r23, r20
    3858:	06 c0       	rjmp	.+12     	; 0x3866 <process_tapping+0x188>
    385a:	61 11       	cpse	r22, r1
    385c:	04 c0       	rjmp	.+8      	; 0x3866 <process_tapping+0x188>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    385e:	d7 01       	movw	r26, r14
    3860:	15 96       	adiw	r26, 0x05	; 5
    3862:	8c 93       	st	X, r24
    3864:	9d c0       	rjmp	.+314    	; 0x39a0 <process_tapping+0x2c2>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3866:	4d 87       	std	Y+13, r20	; 0x0d
    3868:	5e 87       	std	Y+14, r21	; 0x0e
    386a:	8d 85       	ldd	r24, Y+13	; 0x0d
    386c:	9e 85       	ldd	r25, Y+14	; 0x0e
    386e:	6a 8b       	std	Y+18, r22	; 0x12
    3870:	0e 94 81 1a 	call	0x3502	; 0x3502 <is_tap_key>
    3874:	6a 89       	ldd	r22, Y+18	; 0x12
    3876:	88 23       	and	r24, r24
    3878:	09 f4       	brne	.+2      	; 0x387c <process_tapping+0x19e>
    387a:	b4 c0       	rjmp	.+360    	; 0x39e4 <process_tapping+0x306>
    387c:	66 23       	and	r22, r22
    387e:	09 f4       	brne	.+2      	; 0x3882 <process_tapping+0x1a4>
    3880:	b1 c0       	rjmp	.+354    	; 0x39e4 <process_tapping+0x306>
                    if (tapping_key.tap.count > 1) {
    3882:	20 91 9e 02 	lds	r18, 0x029E
    3886:	82 2f       	mov	r24, r18
    3888:	82 95       	swap	r24
    388a:	8f 70       	andi	r24, 0x0F	; 15
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	02 97       	sbiw	r24, 0x02	; 2
    3890:	0c f4       	brge	.+2      	; 0x3894 <process_tapping+0x1b6>
    3892:	c6 c0       	rjmp	.+396    	; 0x3a20 <process_tapping+0x342>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3894:	80 91 99 02 	lds	r24, 0x0299
    3898:	90 91 9a 02 	lds	r25, 0x029A
    389c:	98 87       	std	Y+8, r25	; 0x08
    389e:	8f 83       	std	Y+7, r24	; 0x07
    38a0:	19 86       	std	Y+9, r1	; 0x09
    38a2:	db 86       	std	Y+11, r13	; 0x0b
    38a4:	ca 86       	std	Y+10, r12	; 0x0a
    38a6:	2c 87       	std	Y+12, r18	; 0x0c
    38a8:	ce 01       	movw	r24, r28
    38aa:	07 96       	adiw	r24, 0x07	; 7
    38ac:	46 c0       	rjmp	.+140    	; 0x393a <process_tapping+0x25c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    38ae:	80 91 9e 02 	lds	r24, 0x029E
    38b2:	98 2f       	mov	r25, r24
    38b4:	90 7f       	andi	r25, 0xF0	; 240
    38b6:	59 f4       	brne	.+22     	; 0x38ce <process_tapping+0x1f0>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    38b8:	7c 2d       	mov	r23, r12
    38ba:	d9 8a       	std	Y+17, r13	; 0x11
    38bc:	c8 8a       	std	Y+16, r12	; 0x10
    38be:	89 89       	ldd	r24, Y+17	; 0x11
    38c0:	0e 94 a6 1a 	call	0x354c	; 0x354c <debug_event>
                process_action(&tapping_key);
    38c4:	89 e9       	ldi	r24, 0x99	; 153
    38c6:	92 e0       	ldi	r25, 0x02	; 2
    38c8:	0e 94 38 17 	call	0x2e70	; 0x2e70 <process_action>
    38cc:	95 c0       	rjmp	.+298    	; 0x39f8 <process_tapping+0x31a>
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    38ce:	e5 13       	cpse	r30, r21
    38d0:	11 c0       	rjmp	.+34     	; 0x38f4 <process_tapping+0x216>
    38d2:	74 13       	cpse	r23, r20
    38d4:	0f c0       	rjmp	.+30     	; 0x38f4 <process_tapping+0x216>
    38d6:	61 11       	cpse	r22, r1
    38d8:	0d c0       	rjmp	.+26     	; 0x38f4 <process_tapping+0x216>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    38da:	f7 01       	movw	r30, r14
    38dc:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    38de:	c7 01       	movw	r24, r14
    38e0:	0e 94 38 17 	call	0x2e70	; 0x2e70 <process_action>
                    tapping_key = (keyrecord_t){};
    38e4:	e9 e9       	ldi	r30, 0x99	; 153
    38e6:	f2 e0       	ldi	r31, 0x02	; 2
    38e8:	86 e0       	ldi	r24, 0x06	; 6
    38ea:	df 01       	movw	r26, r30
    38ec:	1d 92       	st	X+, r1
    38ee:	8a 95       	dec	r24
    38f0:	e9 f7       	brne	.-6      	; 0x38ec <process_tapping+0x20e>
    38f2:	a2 c0       	rjmp	.+324    	; 0x3a38 <process_tapping+0x35a>
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    38f4:	4d 87       	std	Y+13, r20	; 0x0d
    38f6:	5e 87       	std	Y+14, r21	; 0x0e
    38f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    38fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    38fc:	6a 8b       	std	Y+18, r22	; 0x12
    38fe:	0e 94 81 1a 	call	0x3502	; 0x3502 <is_tap_key>
    3902:	6a 89       	ldd	r22, Y+18	; 0x12
    3904:	88 23       	and	r24, r24
    3906:	09 f4       	brne	.+2      	; 0x390a <process_tapping+0x22c>
    3908:	6d c0       	rjmp	.+218    	; 0x39e4 <process_tapping+0x306>
    390a:	66 23       	and	r22, r22
    390c:	09 f4       	brne	.+2      	; 0x3910 <process_tapping+0x232>
    390e:	6a c0       	rjmp	.+212    	; 0x39e4 <process_tapping+0x306>
                    if (tapping_key.tap.count > 1) {
    3910:	20 91 9e 02 	lds	r18, 0x029E
    3914:	82 2f       	mov	r24, r18
    3916:	82 95       	swap	r24
    3918:	8f 70       	andi	r24, 0x0F	; 15
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	02 97       	sbiw	r24, 0x02	; 2
    391e:	0c f4       	brge	.+2      	; 0x3922 <process_tapping+0x244>
    3920:	7f c0       	rjmp	.+254    	; 0x3a20 <process_tapping+0x342>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3922:	80 91 99 02 	lds	r24, 0x0299
    3926:	90 91 9a 02 	lds	r25, 0x029A
    392a:	9a 83       	std	Y+2, r25	; 0x02
    392c:	89 83       	std	Y+1, r24	; 0x01
    392e:	1b 82       	std	Y+3, r1	; 0x03
    3930:	dd 82       	std	Y+5, r13	; 0x05
    3932:	cc 82       	std	Y+4, r12	; 0x04
    3934:	2e 83       	std	Y+6, r18	; 0x06
    3936:	ce 01       	movw	r24, r28
    3938:	01 96       	adiw	r24, 0x01	; 1
    393a:	0e 94 38 17 	call	0x2e70	; 0x2e70 <process_action>
    393e:	70 c0       	rjmp	.+224    	; 0x3a20 <process_tapping+0x342>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3940:	c8 16       	cp	r12, r24
    3942:	d9 06       	cpc	r13, r25
    3944:	28 f0       	brcs	.+10     	; 0x3950 <process_tapping+0x272>
    3946:	96 01       	movw	r18, r12
    3948:	28 1b       	sub	r18, r24
    394a:	39 0b       	sbc	r19, r25
    394c:	c9 01       	movw	r24, r18
    394e:	04 c0       	rjmp	.+8      	; 0x3958 <process_tapping+0x27a>
    3950:	80 95       	com	r24
    3952:	90 95       	com	r25
    3954:	8c 0d       	add	r24, r12
    3956:	9d 1d       	adc	r25, r13
    3958:	88 3c       	cpi	r24, 0xC8	; 200
    395a:	91 05       	cpc	r25, r1
    395c:	08 f0       	brcs	.+2      	; 0x3960 <process_tapping+0x282>
    395e:	46 c0       	rjmp	.+140    	; 0x39ec <process_tapping+0x30e>
            if (event.pressed) {
    3960:	66 23       	and	r22, r22
    3962:	09 f4       	brne	.+2      	; 0x3966 <process_tapping+0x288>
    3964:	3f c0       	rjmp	.+126    	; 0x39e4 <process_tapping+0x306>
                if (IS_TAPPING_KEY(event.key)) {
    3966:	e5 13       	cpse	r30, r21
    3968:	30 c0       	rjmp	.+96     	; 0x39ca <process_tapping+0x2ec>
    396a:	74 13       	cpse	r23, r20
    396c:	2e c0       	rjmp	.+92     	; 0x39ca <process_tapping+0x2ec>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    396e:	20 91 9e 02 	lds	r18, 0x029E
    3972:	20 fd       	sbrc	r18, 0
    3974:	21 c0       	rjmp	.+66     	; 0x39b8 <process_tapping+0x2da>
    3976:	32 2f       	mov	r19, r18
    3978:	32 95       	swap	r19
    397a:	3f 70       	andi	r19, 0x0F	; 15
    397c:	83 2f       	mov	r24, r19
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	00 97       	sbiw	r24, 0x00	; 0
    3982:	d1 f0       	breq	.+52     	; 0x39b8 <process_tapping+0x2da>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    3984:	d7 01       	movw	r26, r14
    3986:	15 96       	adiw	r26, 0x05	; 5
    3988:	2c 93       	st	X, r18
    398a:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    398c:	0f 97       	sbiw	r24, 0x0f	; 15
    398e:	41 f0       	breq	.+16     	; 0x39a0 <process_tapping+0x2c2>
    3990:	83 2f       	mov	r24, r19
    3992:	8f 5f       	subi	r24, 0xFF	; 255
    3994:	82 95       	swap	r24
    3996:	80 7f       	andi	r24, 0xF0	; 240
    3998:	2f 70       	andi	r18, 0x0F	; 15
    399a:	28 2b       	or	r18, r24
    399c:	15 96       	adiw	r26, 0x05	; 5
    399e:	2c 93       	st	X, r18
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    39a0:	c7 01       	movw	r24, r14
    39a2:	0e 94 38 17 	call	0x2e70	; 0x2e70 <process_action>
                        tapping_key = *keyp;
    39a6:	86 e0       	ldi	r24, 0x06	; 6
    39a8:	f7 01       	movw	r30, r14
    39aa:	a9 e9       	ldi	r26, 0x99	; 153
    39ac:	b2 e0       	ldi	r27, 0x02	; 2
    39ae:	01 90       	ld	r0, Z+
    39b0:	0d 92       	st	X+, r0
    39b2:	8a 95       	dec	r24
    39b4:	e1 f7       	brne	.-8      	; 0x39ae <process_tapping+0x2d0>
    39b6:	3e c0       	rjmp	.+124    	; 0x3a34 <process_tapping+0x356>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    39b8:	86 e0       	ldi	r24, 0x06	; 6
    39ba:	f7 01       	movw	r30, r14
    39bc:	a9 e9       	ldi	r26, 0x99	; 153
    39be:	b2 e0       	ldi	r27, 0x02	; 2
    39c0:	01 90       	ld	r0, Z+
    39c2:	0d 92       	st	X+, r0
    39c4:	8a 95       	dec	r24
    39c6:	e1 f7       	brne	.-8      	; 0x39c0 <process_tapping+0x2e2>
    39c8:	37 c0       	rjmp	.+110    	; 0x3a38 <process_tapping+0x35a>
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
    39ca:	4d 87       	std	Y+13, r20	; 0x0d
    39cc:	5e 87       	std	Y+14, r21	; 0x0e
    39ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    39d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39d2:	0e 94 81 1a 	call	0x3502	; 0x3502 <is_tap_key>
    39d6:	81 11       	cpse	r24, r1
    39d8:	23 c0       	rjmp	.+70     	; 0x3a20 <process_tapping+0x342>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    39da:	80 91 9e 02 	lds	r24, 0x029E
    39de:	81 60       	ori	r24, 0x01	; 1
    39e0:	80 93 9e 02 	sts	0x029E, r24
                    process_action(keyp);
    39e4:	c7 01       	movw	r24, r14
    39e6:	0e 94 38 17 	call	0x2e70	; 0x2e70 <process_action>
    39ea:	26 c0       	rjmp	.+76     	; 0x3a38 <process_tapping+0x35a>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    39ec:	7c 2d       	mov	r23, r12
    39ee:	d9 8a       	std	Y+17, r13	; 0x11
    39f0:	c8 8a       	std	Y+16, r12	; 0x10
    39f2:	89 89       	ldd	r24, Y+17	; 0x11
    39f4:	0e 94 a6 1a 	call	0x354c	; 0x354c <debug_event>
            tapping_key = (keyrecord_t){};
    39f8:	e9 e9       	ldi	r30, 0x99	; 153
    39fa:	f2 e0       	ldi	r31, 0x02	; 2
    39fc:	86 e0       	ldi	r24, 0x06	; 6
    39fe:	df 01       	movw	r26, r30
    3a00:	1d 92       	st	X+, r1
    3a02:	8a 95       	dec	r24
    3a04:	e9 f7       	brne	.-6      	; 0x3a00 <process_tapping+0x322>
            debug_tapping_key();
    3a06:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <debug_tapping_key>
    3a0a:	18 c0       	rjmp	.+48     	; 0x3a3c <process_tapping+0x35e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    3a0c:	66 23       	and	r22, r22
    3a0e:	51 f3       	breq	.-44     	; 0x39e4 <process_tapping+0x306>
    3a10:	4d 87       	std	Y+13, r20	; 0x0d
    3a12:	5e 87       	std	Y+14, r21	; 0x0e
    3a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a16:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a18:	0e 94 81 1a 	call	0x3502	; 0x3502 <is_tap_key>
    3a1c:	88 23       	and	r24, r24
    3a1e:	11 f3       	breq	.-60     	; 0x39e4 <process_tapping+0x306>
            debug("Tapping: Start(Press tap key).\n");
            tapping_key = *keyp;
    3a20:	86 e0       	ldi	r24, 0x06	; 6
    3a22:	f7 01       	movw	r30, r14
    3a24:	a9 e9       	ldi	r26, 0x99	; 153
    3a26:	b2 e0       	ldi	r27, 0x02	; 2
    3a28:	01 90       	ld	r0, Z+
    3a2a:	0d 92       	st	X+, r0
    3a2c:	8a 95       	dec	r24
    3a2e:	e1 f7       	brne	.-8      	; 0x3a28 <process_tapping+0x34a>
            waiting_buffer_scan_tap();
    3a30:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <waiting_buffer_scan_tap>
            debug_tapping_key();
    3a34:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <debug_tapping_key>
            return true;
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	14 c0       	rjmp	.+40     	; 0x3a64 <process_tapping+0x386>
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
                        tapping_key.tap.interrupted = true;
                    }
                    // enqueue 
                    return false;
    3a3c:	80 e0       	ldi	r24, 0x00	; 0
    3a3e:	12 c0       	rjmp	.+36     	; 0x3a64 <process_tapping+0x386>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    3a40:	4d 87       	std	Y+13, r20	; 0x0d
    3a42:	5e 87       	std	Y+14, r21	; 0x0e
    3a44:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a46:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a48:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <layer_switch_get_action>
                    switch (action.kind.id) {
    3a4c:	29 2f       	mov	r18, r25
    3a4e:	22 95       	swap	r18
    3a50:	2f 70       	andi	r18, 0x0F	; 15
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	22 30       	cpi	r18, 0x02	; 2
    3a56:	31 05       	cpc	r19, r1
    3a58:	0c f4       	brge	.+2      	; 0x3a5c <process_tapping+0x37e>
    3a5a:	e0 ce       	rjmp	.-576    	; 0x381c <process_tapping+0x13e>
    3a5c:	24 30       	cpi	r18, 0x04	; 4
    3a5e:	31 05       	cpc	r19, r1
    3a60:	0c f6       	brge	.-126    	; 0x39e4 <process_tapping+0x306>
    3a62:	e2 ce       	rjmp	.-572    	; 0x3828 <process_tapping+0x14a>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    3a64:	62 96       	adiw	r28, 0x12	; 18
    3a66:	0f b6       	in	r0, 0x3f	; 63
    3a68:	f8 94       	cli
    3a6a:	de bf       	out	0x3e, r29	; 62
    3a6c:	0f be       	out	0x3f, r0	; 63
    3a6e:	cd bf       	out	0x3d, r28	; 61
    3a70:	df 91       	pop	r29
    3a72:	cf 91       	pop	r28
    3a74:	ff 90       	pop	r15
    3a76:	ef 90       	pop	r14
    3a78:	df 90       	pop	r13
    3a7a:	cf 90       	pop	r12
    3a7c:	08 95       	ret

00003a7e <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    3a7e:	1f 93       	push	r17
    3a80:	cf 93       	push	r28
    3a82:	df 93       	push	r29
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	2c 97       	sbiw	r28, 0x0c	; 12
    3a8a:	0f b6       	in	r0, 0x3f	; 63
    3a8c:	f8 94       	cli
    3a8e:	de bf       	out	0x3e, r29	; 62
    3a90:	0f be       	out	0x3f, r0	; 63
    3a92:	cd bf       	out	0x3d, r28	; 61
    3a94:	4f 83       	std	Y+7, r20	; 0x07
    3a96:	58 87       	std	Y+8, r21	; 0x08
    3a98:	69 87       	std	Y+9, r22	; 0x09
    3a9a:	7a 87       	std	Y+10, r23	; 0x0a
    3a9c:	8b 87       	std	Y+11, r24	; 0x0b
    3a9e:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3aa0:	ce 01       	movw	r24, r28
    3aa2:	07 96       	adiw	r24, 0x07	; 7
    3aa4:	0e 94 6f 1b 	call	0x36de	; 0x36de <process_tapping>
    3aa8:	88 23       	and	r24, r24
    3aaa:	d9 f0       	breq	.+54     	; 0x3ae2 <action_tapping_process+0x64>
        if (!IS_NOEVENT(record.event)) {
    3aac:	2f 81       	ldd	r18, Y+7	; 0x07
    3aae:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3ab0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ab2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ab4:	89 2b       	or	r24, r25
    3ab6:	39 f0       	breq	.+14     	; 0x3ac6 <action_tapping_process+0x48>
    3ab8:	3f 3f       	cpi	r19, 0xFF	; 255
    3aba:	19 f0       	breq	.+6      	; 0x3ac2 <action_tapping_process+0x44>
    3abc:	80 e0       	ldi	r24, 0x00	; 0
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	04 c0       	rjmp	.+8      	; 0x3aca <action_tapping_process+0x4c>
    3ac2:	2f 3f       	cpi	r18, 0xFF	; 255
    3ac4:	d9 f7       	brne	.-10     	; 0x3abc <action_tapping_process+0x3e>
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	89 2b       	or	r24, r25
    3acc:	09 f0       	breq	.+2      	; 0x3ad0 <action_tapping_process+0x52>
    3ace:	6d c0       	rjmp	.+218    	; 0x3baa <action_tapping_process+0x12c>
            debug("processed: "); debug_record(record); debug("\n");
    3ad0:	4f 81       	ldd	r20, Y+7	; 0x07
    3ad2:	58 85       	ldd	r21, Y+8	; 0x08
    3ad4:	69 85       	ldd	r22, Y+9	; 0x09
    3ad6:	7a 85       	ldd	r23, Y+10	; 0x0a
    3ad8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ada:	9c 85       	ldd	r25, Y+12	; 0x0c
    3adc:	0e 94 b5 1a 	call	0x356a	; 0x356a <debug_record>
    3ae0:	64 c0       	rjmp	.+200    	; 0x3baa <action_tapping_process+0x12c>
    3ae2:	86 e0       	ldi	r24, 0x06	; 6
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	37 96       	adiw	r30, 0x07	; 7
    3ae8:	de 01       	movw	r26, r28
    3aea:	11 96       	adiw	r26, 0x01	; 1
    3aec:	01 90       	ld	r0, Z+
    3aee:	0d 92       	st	X+, r0
    3af0:	8a 95       	dec	r24
    3af2:	e1 f7       	brne	.-8      	; 0x3aec <action_tapping_process+0x6e>
    3af4:	ff 81       	ldd	r31, Y+7	; 0x07
    3af6:	e8 85       	ldd	r30, Y+8	; 0x08
    3af8:	4a 85       	ldd	r20, Y+10	; 0x0a
    3afa:	5b 85       	ldd	r21, Y+11	; 0x0b
    3afc:	41 15       	cp	r20, r1
    3afe:	51 05       	cpc	r21, r1
    3b00:	39 f0       	breq	.+14     	; 0x3b10 <action_tapping_process+0x92>
    3b02:	ef 3f       	cpi	r30, 0xFF	; 255
    3b04:	41 f4       	brne	.+16     	; 0x3b16 <action_tapping_process+0x98>
    3b06:	81 e0       	ldi	r24, 0x01	; 1
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	ff 3f       	cpi	r31, 0xFF	; 255
    3b0c:	31 f0       	breq	.+12     	; 0x3b1a <action_tapping_process+0x9c>
    3b0e:	03 c0       	rjmp	.+6      	; 0x3b16 <action_tapping_process+0x98>
    3b10:	81 e0       	ldi	r24, 0x01	; 1
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	02 c0       	rjmp	.+4      	; 0x3b1a <action_tapping_process+0x9c>
    3b16:	80 e0       	ldi	r24, 0x00	; 0
    3b18:	90 e0       	ldi	r25, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    3b1a:	80 fd       	sbrc	r24, 0
    3b1c:	46 c0       	rjmp	.+140    	; 0x3baa <action_tapping_process+0x12c>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3b1e:	20 91 d0 02 	lds	r18, 0x02D0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	c9 01       	movw	r24, r18
    3b26:	01 96       	adiw	r24, 0x01	; 1
    3b28:	87 70       	andi	r24, 0x07	; 7
    3b2a:	99 27       	eor	r25, r25
    3b2c:	60 91 cf 02 	lds	r22, 0x02CF
    3b30:	70 e0       	ldi	r23, 0x00	; 0
    3b32:	86 17       	cp	r24, r22
    3b34:	97 07       	cpc	r25, r23
    3b36:	09 f4       	brne	.+2      	; 0x3b3a <action_tapping_process+0xbc>
    3b38:	40 c0       	rjmp	.+128    	; 0x3bba <action_tapping_process+0x13c>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3b3a:	f9 83       	std	Y+1, r31	; 0x01
    3b3c:	ea 83       	std	Y+2, r30	; 0x02
    3b3e:	5d 83       	std	Y+5, r21	; 0x05
    3b40:	4c 83       	std	Y+4, r20	; 0x04
    3b42:	96 e0       	ldi	r25, 0x06	; 6
    3b44:	92 9f       	mul	r25, r18
    3b46:	d0 01       	movw	r26, r0
    3b48:	93 9f       	mul	r25, r19
    3b4a:	b0 0d       	add	r27, r0
    3b4c:	11 24       	eor	r1, r1
    3b4e:	a1 56       	subi	r26, 0x61	; 97
    3b50:	bd 4f       	sbci	r27, 0xFD	; 253
    3b52:	fe 01       	movw	r30, r28
    3b54:	31 96       	adiw	r30, 0x01	; 1
    3b56:	01 90       	ld	r0, Z+
    3b58:	0d 92       	st	X+, r0
    3b5a:	9a 95       	dec	r25
    3b5c:	e1 f7       	brne	.-8      	; 0x3b56 <action_tapping_process+0xd8>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3b5e:	80 93 d0 02 	sts	0x02D0, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3b62:	0e 94 c5 1a 	call	0x358a	; 0x358a <debug_waiting_buffer>
    3b66:	21 c0       	rjmp	.+66     	; 0x3baa <action_tapping_process+0x12c>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3b68:	18 9f       	mul	r17, r24
    3b6a:	c0 01       	movw	r24, r0
    3b6c:	11 24       	eor	r1, r1
    3b6e:	81 56       	subi	r24, 0x61	; 97
    3b70:	9d 4f       	sbci	r25, 0xFD	; 253
    3b72:	0e 94 6f 1b 	call	0x36de	; 0x36de <process_tapping>
    3b76:	88 23       	and	r24, r24
    3b78:	71 f1       	breq	.+92     	; 0x3bd6 <action_tapping_process+0x158>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3b7a:	e0 91 cf 02 	lds	r30, 0x02CF
    3b7e:	1e 9f       	mul	r17, r30
    3b80:	f0 01       	movw	r30, r0
    3b82:	11 24       	eor	r1, r1
    3b84:	e1 56       	subi	r30, 0x61	; 97
    3b86:	fd 4f       	sbci	r31, 0xFD	; 253
    3b88:	40 81       	ld	r20, Z
    3b8a:	51 81       	ldd	r21, Z+1	; 0x01
    3b8c:	62 81       	ldd	r22, Z+2	; 0x02
    3b8e:	73 81       	ldd	r23, Z+3	; 0x03
    3b90:	84 81       	ldd	r24, Z+4	; 0x04
    3b92:	95 81       	ldd	r25, Z+5	; 0x05
    3b94:	0e 94 b5 1a 	call	0x356a	; 0x356a <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3b98:	80 91 cf 02 	lds	r24, 0x02CF
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	01 96       	adiw	r24, 0x01	; 1
    3ba0:	87 70       	andi	r24, 0x07	; 7
    3ba2:	99 27       	eor	r25, r25
    3ba4:	80 93 cf 02 	sts	0x02CF, r24
    3ba8:	01 c0       	rjmp	.+2      	; 0x3bac <action_tapping_process+0x12e>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3baa:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3bac:	80 91 cf 02 	lds	r24, 0x02CF
    3bb0:	90 91 d0 02 	lds	r25, 0x02D0
    3bb4:	89 13       	cpse	r24, r25
    3bb6:	d8 cf       	rjmp	.-80     	; 0x3b68 <action_tapping_process+0xea>
    3bb8:	0e c0       	rjmp	.+28     	; 0x3bd6 <action_tapping_process+0x158>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3bba:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    3bbe:	10 92 d0 02 	sts	0x02D0, r1
    waiting_buffer_tail = 0;
    3bc2:	10 92 cf 02 	sts	0x02CF, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    3bc6:	e9 e9       	ldi	r30, 0x99	; 153
    3bc8:	f2 e0       	ldi	r31, 0x02	; 2
    3bca:	86 e0       	ldi	r24, 0x06	; 6
    3bcc:	df 01       	movw	r26, r30
    3bce:	1d 92       	st	X+, r1
    3bd0:	8a 95       	dec	r24
    3bd2:	e9 f7       	brne	.-6      	; 0x3bce <action_tapping_process+0x150>
    3bd4:	ea cf       	rjmp	.-44     	; 0x3baa <action_tapping_process+0x12c>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3bd6:	2c 96       	adiw	r28, 0x0c	; 12
    3bd8:	0f b6       	in	r0, 0x3f	; 63
    3bda:	f8 94       	cli
    3bdc:	de bf       	out	0x3e, r29	; 62
    3bde:	0f be       	out	0x3f, r0	; 63
    3be0:	cd bf       	out	0x3d, r28	; 61
    3be2:	df 91       	pop	r29
    3be4:	cf 91       	pop	r28
    3be6:	1f 91       	pop	r17
    3be8:	08 95       	ret

00003bea <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3bea:	cf 92       	push	r12
    3bec:	df 92       	push	r13
    3bee:	ef 92       	push	r14
    3bf0:	ff 92       	push	r15
    3bf2:	cf 93       	push	r28
    3bf4:	df 93       	push	r29
    3bf6:	9c 01       	movw	r18, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    3bf8:	00 97       	sbiw	r24, 0x00	; 0
    3bfa:	09 f4       	brne	.+2      	; 0x3bfe <action_macro_play+0x14>
    3bfc:	8e c0       	rjmp	.+284    	; 0x3d1a <action_macro_play+0x130>
    3bfe:	d0 e0       	ldi	r29, 0x00	; 0
    3c00:	c0 e0       	ldi	r28, 0x00	; 0
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3c02:	cc 24       	eor	r12, r12
    3c04:	c3 94       	inc	r12
    3c06:	d1 2c       	mov	r13, r1

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3c08:	79 01       	movw	r14, r18
    3c0a:	8f ef       	ldi	r24, 0xFF	; 255
    3c0c:	e8 1a       	sub	r14, r24
    3c0e:	f8 0a       	sbc	r15, r24
    3c10:	f9 01       	movw	r30, r18
    3c12:	84 91       	lpm	r24, Z
    3c14:	85 37       	cpi	r24, 0x75	; 117
    3c16:	09 f4       	brne	.+2      	; 0x3c1a <action_macro_play+0x30>
    3c18:	5b c0       	rjmp	.+182    	; 0x3cd0 <action_macro_play+0xe6>
    3c1a:	60 f4       	brcc	.+24     	; 0x3c34 <action_macro_play+0x4a>
    3c1c:	84 37       	cpi	r24, 0x74	; 116
    3c1e:	08 f0       	brcs	.+2      	; 0x3c22 <action_macro_play+0x38>
    3c20:	46 c0       	rjmp	.+140    	; 0x3cae <action_macro_play+0xc4>
    3c22:	84 30       	cpi	r24, 0x04	; 4
    3c24:	08 f0       	brcs	.+2      	; 0x3c28 <action_macro_play+0x3e>
    3c26:	66 c0       	rjmp	.+204    	; 0x3cf4 <action_macro_play+0x10a>
    3c28:	81 30       	cpi	r24, 0x01	; 1
    3c2a:	a9 f0       	breq	.+42     	; 0x3c56 <action_macro_play+0x6c>
    3c2c:	82 30       	cpi	r24, 0x02	; 2
    3c2e:	09 f0       	breq	.+2      	; 0x3c32 <action_macro_play+0x48>
    3c30:	74 c0       	rjmp	.+232    	; 0x3d1a <action_macro_play+0x130>
    3c32:	26 c0       	rjmp	.+76     	; 0x3c80 <action_macro_play+0x96>
    3c34:	88 37       	cpi	r24, 0x78	; 120
    3c36:	09 f4       	brne	.+2      	; 0x3c3a <action_macro_play+0x50>
    3c38:	5a c0       	rjmp	.+180    	; 0x3cee <action_macro_play+0x104>
    3c3a:	38 f4       	brcc	.+14     	; 0x3c4a <action_macro_play+0x60>
    3c3c:	86 37       	cpi	r24, 0x76	; 118
    3c3e:	09 f4       	brne	.+2      	; 0x3c42 <action_macro_play+0x58>
    3c40:	4e c0       	rjmp	.+156    	; 0x3cde <action_macro_play+0xf4>
    3c42:	87 37       	cpi	r24, 0x77	; 119
    3c44:	09 f0       	breq	.+2      	; 0x3c48 <action_macro_play+0x5e>
    3c46:	69 c0       	rjmp	.+210    	; 0x3d1a <action_macro_play+0x130>
    3c48:	4e c0       	rjmp	.+156    	; 0x3ce6 <action_macro_play+0xfc>
    3c4a:	98 2f       	mov	r25, r24
    3c4c:	94 58       	subi	r25, 0x84	; 132
    3c4e:	90 37       	cpi	r25, 0x70	; 112
    3c50:	08 f0       	brcs	.+2      	; 0x3c54 <action_macro_play+0x6a>
    3c52:	63 c0       	rjmp	.+198    	; 0x3d1a <action_macro_play+0x130>
    3c54:	52 c0       	rjmp	.+164    	; 0x3cfa <action_macro_play+0x110>
            case KEY_DOWN:
                MACRO_READ();
    3c56:	f7 01       	movw	r30, r14
    3c58:	79 01       	movw	r14, r18
    3c5a:	82 e0       	ldi	r24, 0x02	; 2
    3c5c:	e8 0e       	add	r14, r24
    3c5e:	f1 1c       	adc	r15, r1
    3c60:	e4 91       	lpm	r30, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3c62:	8e 2f       	mov	r24, r30
    3c64:	80 5e       	subi	r24, 0xE0	; 224
    3c66:	88 30       	cpi	r24, 0x08	; 8
    3c68:	48 f4       	brcc	.+18     	; 0x3c7c <action_macro_play+0x92>
                    add_weak_mods(MOD_BIT(macro));
    3c6a:	e7 70       	andi	r30, 0x07	; 7
    3c6c:	8c 2d       	mov	r24, r12
    3c6e:	01 c0       	rjmp	.+2      	; 0x3c72 <action_macro_play+0x88>
    3c70:	88 0f       	add	r24, r24
    3c72:	ea 95       	dec	r30
    3c74:	ea f7       	brpl	.-6      	; 0x3c70 <action_macro_play+0x86>
    3c76:	0e 94 1f 20 	call	0x403e	; 0x403e <add_weak_mods>
    3c7a:	14 c0       	rjmp	.+40     	; 0x3ca4 <action_macro_play+0xba>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    3c7c:	8e 2f       	mov	r24, r30
    3c7e:	3a c0       	rjmp	.+116    	; 0x3cf4 <action_macro_play+0x10a>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3c80:	f7 01       	movw	r30, r14
    3c82:	79 01       	movw	r14, r18
    3c84:	82 e0       	ldi	r24, 0x02	; 2
    3c86:	e8 0e       	add	r14, r24
    3c88:	f1 1c       	adc	r15, r1
    3c8a:	e4 91       	lpm	r30, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3c8c:	8e 2f       	mov	r24, r30
    3c8e:	80 5e       	subi	r24, 0xE0	; 224
    3c90:	88 30       	cpi	r24, 0x08	; 8
    3c92:	58 f4       	brcc	.+22     	; 0x3caa <action_macro_play+0xc0>
                    del_weak_mods(MOD_BIT(macro));
    3c94:	e7 70       	andi	r30, 0x07	; 7
    3c96:	8c 2d       	mov	r24, r12
    3c98:	01 c0       	rjmp	.+2      	; 0x3c9c <action_macro_play+0xb2>
    3c9a:	88 0f       	add	r24, r24
    3c9c:	ea 95       	dec	r30
    3c9e:	ea f7       	brpl	.-6      	; 0x3c9a <action_macro_play+0xb0>
    3ca0:	0e 94 25 20 	call	0x404a	; 0x404a <del_weak_mods>
                    send_keyboard_report();
    3ca4:	0e 94 48 20 	call	0x4090	; 0x4090 <send_keyboard_report>
    3ca8:	2b c0       	rjmp	.+86     	; 0x3d00 <action_macro_play+0x116>
                } else {
                    unregister_code(macro);
    3caa:	8e 2f       	mov	r24, r30
    3cac:	27 c0       	rjmp	.+78     	; 0x3cfc <action_macro_play+0x112>
                }
                break;
            case WAIT:
                MACRO_READ();
    3cae:	f7 01       	movw	r30, r14
    3cb0:	79 01       	movw	r14, r18
    3cb2:	82 e0       	ldi	r24, 0x02	; 2
    3cb4:	e8 0e       	add	r14, r24
    3cb6:	f1 1c       	adc	r15, r1
    3cb8:	94 91       	lpm	r25, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3cba:	07 c0       	rjmp	.+14     	; 0x3cca <action_macro_play+0xe0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3cbc:	ef ec       	ldi	r30, 0xCF	; 207
    3cbe:	f7 e0       	ldi	r31, 0x07	; 7
    3cc0:	31 97       	sbiw	r30, 0x01	; 1
    3cc2:	f1 f7       	brne	.-4      	; 0x3cc0 <action_macro_play+0xd6>
    3cc4:	00 c0       	rjmp	.+0      	; 0x3cc6 <action_macro_play+0xdc>
    3cc6:	00 00       	nop
    3cc8:	91 50       	subi	r25, 0x01	; 1
    3cca:	91 11       	cpse	r25, r1
    3ccc:	f7 cf       	rjmp	.-18     	; 0x3cbc <action_macro_play+0xd2>
    3cce:	18 c0       	rjmp	.+48     	; 0x3d00 <action_macro_play+0x116>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3cd0:	f7 01       	movw	r30, r14
    3cd2:	79 01       	movw	r14, r18
    3cd4:	82 e0       	ldi	r24, 0x02	; 2
    3cd6:	e8 0e       	add	r14, r24
    3cd8:	f1 1c       	adc	r15, r1
    3cda:	c4 91       	lpm	r28, Z
                dprintf("INTERVAL(%u)\n", interval);
                break;
    3cdc:	11 c0       	rjmp	.+34     	; 0x3d00 <action_macro_play+0x116>
            case MOD_STORE:
                mod_storage = get_mods();
    3cde:	0e 94 09 20 	call	0x4012	; 0x4012 <get_mods>
    3ce2:	d8 2f       	mov	r29, r24
                break;
    3ce4:	0d c0       	rjmp	.+26     	; 0x3d00 <action_macro_play+0x116>
            case MOD_RESTORE:
                set_mods(mod_storage);
    3ce6:	8d 2f       	mov	r24, r29
    3ce8:	0e 94 19 20 	call	0x4032	; 0x4032 <set_mods>
    3cec:	db cf       	rjmp	.-74     	; 0x3ca4 <action_macro_play+0xba>
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    3cee:	0e 94 1c 20 	call	0x4038	; 0x4038 <clear_mods>
    3cf2:	d8 cf       	rjmp	.-80     	; 0x3ca4 <action_macro_play+0xba>
                send_keyboard_report();
                break;
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3cf4:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <register_code>
                break;
    3cf8:	03 c0       	rjmp	.+6      	; 0x3d00 <action_macro_play+0x116>
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3cfa:	8f 77       	andi	r24, 0x7F	; 127
    3cfc:	0e 94 01 17 	call	0x2e02	; 0x2e02 <unregister_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3d00:	9c 2f       	mov	r25, r28
    3d02:	07 c0       	rjmp	.+14     	; 0x3d12 <action_macro_play+0x128>
    3d04:	91 50       	subi	r25, 0x01	; 1
    3d06:	ef ec       	ldi	r30, 0xCF	; 207
    3d08:	f7 e0       	ldi	r31, 0x07	; 7
    3d0a:	31 97       	sbiw	r30, 0x01	; 1
    3d0c:	f1 f7       	brne	.-4      	; 0x3d0a <action_macro_play+0x120>
    3d0e:	00 c0       	rjmp	.+0      	; 0x3d10 <action_macro_play+0x126>
    3d10:	00 00       	nop
    3d12:	91 11       	cpse	r25, r1
    3d14:	f7 cf       	rjmp	.-18     	; 0x3d04 <action_macro_play+0x11a>
    3d16:	97 01       	movw	r18, r14
    3d18:	77 cf       	rjmp	.-274    	; 0x3c08 <action_macro_play+0x1e>
    }
}
    3d1a:	df 91       	pop	r29
    3d1c:	cf 91       	pop	r28
    3d1e:	ff 90       	pop	r15
    3d20:	ef 90       	pop	r14
    3d22:	df 90       	pop	r13
    3d24:	cf 90       	pop	r12
    3d26:	08 95       	ret

00003d28 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3d28:	60 93 d5 02 	sts	0x02D5, r22
    3d2c:	70 93 d6 02 	sts	0x02D6, r23
    3d30:	80 93 d7 02 	sts	0x02D7, r24
    3d34:	90 93 d8 02 	sts	0x02D8, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3d38:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <clear_keyboard_but_mods>

00003d3c <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3d3c:	60 93 d1 02 	sts	0x02D1, r22
    3d40:	70 93 d2 02 	sts	0x02D2, r23
    3d44:	80 93 d3 02 	sts	0x02D3, r24
    3d48:	90 93 d4 02 	sts	0x02D4, r25
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3d4c:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <clear_keyboard_but_mods>

00003d50 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    3d50:	08 95       	ret

00003d52 <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    3d52:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <default_layer_state_set>

00003d56 <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3d56:	0f 93       	push	r16
    3d58:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    3d5a:	00 91 d5 02 	lds	r16, 0x02D5
    3d5e:	10 91 d6 02 	lds	r17, 0x02D6
    3d62:	20 91 d7 02 	lds	r18, 0x02D7
    3d66:	30 91 d8 02 	lds	r19, 0x02D8
    3d6a:	60 2b       	or	r22, r16
    3d6c:	71 2b       	or	r23, r17
    3d6e:	82 2b       	or	r24, r18
    3d70:	93 2b       	or	r25, r19
}
    3d72:	1f 91       	pop	r17
    3d74:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    3d76:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <default_layer_state_set>

00003d7a <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    3d7a:	0f 93       	push	r16
    3d7c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    3d7e:	00 91 d5 02 	lds	r16, 0x02D5
    3d82:	10 91 d6 02 	lds	r17, 0x02D6
    3d86:	20 91 d7 02 	lds	r18, 0x02D7
    3d8a:	30 91 d8 02 	lds	r19, 0x02D8
    3d8e:	60 23       	and	r22, r16
    3d90:	71 23       	and	r23, r17
    3d92:	82 23       	and	r24, r18
    3d94:	93 23       	and	r25, r19
}
    3d96:	1f 91       	pop	r17
    3d98:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    3d9a:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <default_layer_state_set>

00003d9e <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    3d9e:	0f 93       	push	r16
    3da0:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3da2:	00 91 d5 02 	lds	r16, 0x02D5
    3da6:	10 91 d6 02 	lds	r17, 0x02D6
    3daa:	20 91 d7 02 	lds	r18, 0x02D7
    3dae:	30 91 d8 02 	lds	r19, 0x02D8
    3db2:	60 27       	eor	r22, r16
    3db4:	71 27       	eor	r23, r17
    3db6:	82 27       	eor	r24, r18
    3db8:	93 27       	eor	r25, r19
}
    3dba:	1f 91       	pop	r17
    3dbc:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    3dbe:	0c 94 94 1e 	jmp	0x3d28	; 0x3d28 <default_layer_state_set>

00003dc2 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    3dc2:	60 e0       	ldi	r22, 0x00	; 0
    3dc4:	70 e0       	ldi	r23, 0x00	; 0
    3dc6:	cb 01       	movw	r24, r22
    3dc8:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <layer_state_set>

00003dcc <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3dcc:	41 e0       	ldi	r20, 0x01	; 1
    3dce:	50 e0       	ldi	r21, 0x00	; 0
    3dd0:	60 e0       	ldi	r22, 0x00	; 0
    3dd2:	70 e0       	ldi	r23, 0x00	; 0
    3dd4:	04 c0       	rjmp	.+8      	; 0x3dde <layer_move+0x12>
    3dd6:	44 0f       	add	r20, r20
    3dd8:	55 1f       	adc	r21, r21
    3dda:	66 1f       	adc	r22, r22
    3ddc:	77 1f       	adc	r23, r23
    3dde:	8a 95       	dec	r24
    3de0:	d2 f7       	brpl	.-12     	; 0x3dd6 <layer_move+0xa>
    3de2:	cb 01       	movw	r24, r22
    3de4:	ba 01       	movw	r22, r20
    3de6:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <layer_state_set>

00003dea <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3dea:	41 e0       	ldi	r20, 0x01	; 1
    3dec:	50 e0       	ldi	r21, 0x00	; 0
    3dee:	60 e0       	ldi	r22, 0x00	; 0
    3df0:	70 e0       	ldi	r23, 0x00	; 0
    3df2:	04 c0       	rjmp	.+8      	; 0x3dfc <layer_on+0x12>
    3df4:	44 0f       	add	r20, r20
    3df6:	55 1f       	adc	r21, r21
    3df8:	66 1f       	adc	r22, r22
    3dfa:	77 1f       	adc	r23, r23
    3dfc:	8a 95       	dec	r24
    3dfe:	d2 f7       	brpl	.-12     	; 0x3df4 <layer_on+0xa>
    3e00:	80 91 d1 02 	lds	r24, 0x02D1
    3e04:	90 91 d2 02 	lds	r25, 0x02D2
    3e08:	a0 91 d3 02 	lds	r26, 0x02D3
    3e0c:	b0 91 d4 02 	lds	r27, 0x02D4
    3e10:	48 2b       	or	r20, r24
    3e12:	59 2b       	or	r21, r25
    3e14:	6a 2b       	or	r22, r26
    3e16:	7b 2b       	or	r23, r27
    3e18:	cb 01       	movw	r24, r22
    3e1a:	ba 01       	movw	r22, r20
    3e1c:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <layer_state_set>

00003e20 <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3e20:	41 e0       	ldi	r20, 0x01	; 1
    3e22:	50 e0       	ldi	r21, 0x00	; 0
    3e24:	60 e0       	ldi	r22, 0x00	; 0
    3e26:	70 e0       	ldi	r23, 0x00	; 0
    3e28:	04 c0       	rjmp	.+8      	; 0x3e32 <layer_off+0x12>
    3e2a:	44 0f       	add	r20, r20
    3e2c:	55 1f       	adc	r21, r21
    3e2e:	66 1f       	adc	r22, r22
    3e30:	77 1f       	adc	r23, r23
    3e32:	8a 95       	dec	r24
    3e34:	d2 f7       	brpl	.-12     	; 0x3e2a <layer_off+0xa>
    3e36:	40 95       	com	r20
    3e38:	50 95       	com	r21
    3e3a:	60 95       	com	r22
    3e3c:	70 95       	com	r23
    3e3e:	80 91 d1 02 	lds	r24, 0x02D1
    3e42:	90 91 d2 02 	lds	r25, 0x02D2
    3e46:	a0 91 d3 02 	lds	r26, 0x02D3
    3e4a:	b0 91 d4 02 	lds	r27, 0x02D4
    3e4e:	48 23       	and	r20, r24
    3e50:	59 23       	and	r21, r25
    3e52:	6a 23       	and	r22, r26
    3e54:	7b 23       	and	r23, r27
    3e56:	cb 01       	movw	r24, r22
    3e58:	ba 01       	movw	r22, r20
    3e5a:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <layer_state_set>

00003e5e <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3e5e:	41 e0       	ldi	r20, 0x01	; 1
    3e60:	50 e0       	ldi	r21, 0x00	; 0
    3e62:	60 e0       	ldi	r22, 0x00	; 0
    3e64:	70 e0       	ldi	r23, 0x00	; 0
    3e66:	04 c0       	rjmp	.+8      	; 0x3e70 <layer_invert+0x12>
    3e68:	44 0f       	add	r20, r20
    3e6a:	55 1f       	adc	r21, r21
    3e6c:	66 1f       	adc	r22, r22
    3e6e:	77 1f       	adc	r23, r23
    3e70:	8a 95       	dec	r24
    3e72:	d2 f7       	brpl	.-12     	; 0x3e68 <layer_invert+0xa>
    3e74:	80 91 d1 02 	lds	r24, 0x02D1
    3e78:	90 91 d2 02 	lds	r25, 0x02D2
    3e7c:	a0 91 d3 02 	lds	r26, 0x02D3
    3e80:	b0 91 d4 02 	lds	r27, 0x02D4
    3e84:	48 27       	eor	r20, r24
    3e86:	59 27       	eor	r21, r25
    3e88:	6a 27       	eor	r22, r26
    3e8a:	7b 27       	eor	r23, r27
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	ba 01       	movw	r22, r20
    3e90:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <layer_state_set>

00003e94 <layer_or>:
}

void layer_or(uint32_t state)
{
    3e94:	0f 93       	push	r16
    3e96:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3e98:	00 91 d1 02 	lds	r16, 0x02D1
    3e9c:	10 91 d2 02 	lds	r17, 0x02D2
    3ea0:	20 91 d3 02 	lds	r18, 0x02D3
    3ea4:	30 91 d4 02 	lds	r19, 0x02D4
    3ea8:	60 2b       	or	r22, r16
    3eaa:	71 2b       	or	r23, r17
    3eac:	82 2b       	or	r24, r18
    3eae:	93 2b       	or	r25, r19
}
    3eb0:	1f 91       	pop	r17
    3eb2:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    3eb4:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <layer_state_set>

00003eb8 <layer_and>:
}
void layer_and(uint32_t state)
{
    3eb8:	0f 93       	push	r16
    3eba:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3ebc:	00 91 d1 02 	lds	r16, 0x02D1
    3ec0:	10 91 d2 02 	lds	r17, 0x02D2
    3ec4:	20 91 d3 02 	lds	r18, 0x02D3
    3ec8:	30 91 d4 02 	lds	r19, 0x02D4
    3ecc:	60 23       	and	r22, r16
    3ece:	71 23       	and	r23, r17
    3ed0:	82 23       	and	r24, r18
    3ed2:	93 23       	and	r25, r19
}
    3ed4:	1f 91       	pop	r17
    3ed6:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    3ed8:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <layer_state_set>

00003edc <layer_xor>:
}
void layer_xor(uint32_t state)
{
    3edc:	0f 93       	push	r16
    3ede:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3ee0:	00 91 d1 02 	lds	r16, 0x02D1
    3ee4:	10 91 d2 02 	lds	r17, 0x02D2
    3ee8:	20 91 d3 02 	lds	r18, 0x02D3
    3eec:	30 91 d4 02 	lds	r19, 0x02D4
    3ef0:	60 27       	eor	r22, r16
    3ef2:	71 27       	eor	r23, r17
    3ef4:	82 27       	eor	r24, r18
    3ef6:	93 27       	eor	r25, r19
}
    3ef8:	1f 91       	pop	r17
    3efa:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    3efc:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <layer_state_set>

00003f00 <layer_debug>:
}

void layer_debug(void)
{
    3f00:	08 95       	ret

00003f02 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3f02:	8f 92       	push	r8
    3f04:	9f 92       	push	r9
    3f06:	af 92       	push	r10
    3f08:	bf 92       	push	r11
    3f0a:	cf 92       	push	r12
    3f0c:	df 92       	push	r13
    3f0e:	ef 92       	push	r14
    3f10:	ff 92       	push	r15
    3f12:	6c 01       	movw	r12, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3f14:	80 90 d5 02 	lds	r8, 0x02D5
    3f18:	90 90 d6 02 	lds	r9, 0x02D6
    3f1c:	a0 90 d7 02 	lds	r10, 0x02D7
    3f20:	b0 90 d8 02 	lds	r11, 0x02D8
    3f24:	40 91 d1 02 	lds	r20, 0x02D1
    3f28:	50 91 d2 02 	lds	r21, 0x02D2
    3f2c:	60 91 d3 02 	lds	r22, 0x02D3
    3f30:	70 91 d4 02 	lds	r23, 0x02D4
    3f34:	84 2a       	or	r8, r20
    3f36:	95 2a       	or	r9, r21
    3f38:	a6 2a       	or	r10, r22
    3f3a:	b7 2a       	or	r11, r23
    3f3c:	8f e1       	ldi	r24, 0x1F	; 31
    3f3e:	e8 2e       	mov	r14, r24
    3f40:	f1 2c       	mov	r15, r1
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3f42:	b5 01       	movw	r22, r10
    3f44:	a4 01       	movw	r20, r8
    3f46:	0e 2c       	mov	r0, r14
    3f48:	04 c0       	rjmp	.+8      	; 0x3f52 <layer_switch_get_action+0x50>
    3f4a:	76 95       	lsr	r23
    3f4c:	67 95       	ror	r22
    3f4e:	57 95       	ror	r21
    3f50:	47 95       	ror	r20
    3f52:	0a 94       	dec	r0
    3f54:	d2 f7       	brpl	.-12     	; 0x3f4a <layer_switch_get_action+0x48>
    3f56:	40 ff       	sbrs	r20, 0
    3f58:	08 c0       	rjmp	.+16     	; 0x3f6a <layer_switch_get_action+0x68>
            action = action_for_key(i, key);
    3f5a:	b6 01       	movw	r22, r12
    3f5c:	8e 2d       	mov	r24, r14
    3f5e:	0e 94 31 21 	call	0x4262	; 0x4262 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    3f62:	81 30       	cpi	r24, 0x01	; 1
    3f64:	91 05       	cpc	r25, r1
    3f66:	09 f0       	breq	.+2      	; 0x3f6a <layer_switch_get_action+0x68>
    3f68:	08 c0       	rjmp	.+16     	; 0x3f7a <layer_switch_get_action+0x78>
    3f6a:	81 e0       	ldi	r24, 0x01	; 1
    3f6c:	e8 1a       	sub	r14, r24
    3f6e:	f1 08       	sbc	r15, r1
    3f70:	40 f7       	brcc	.-48     	; 0x3f42 <layer_switch_get_action+0x40>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3f72:	b6 01       	movw	r22, r12
    3f74:	80 e0       	ldi	r24, 0x00	; 0
    3f76:	0e 94 31 21 	call	0x4262	; 0x4262 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    3f7a:	ff 90       	pop	r15
    3f7c:	ef 90       	pop	r14
    3f7e:	df 90       	pop	r13
    3f80:	cf 90       	pop	r12
    3f82:	bf 90       	pop	r11
    3f84:	af 90       	pop	r10
    3f86:	9f 90       	pop	r9
    3f88:	8f 90       	pop	r8
    3f8a:	08 95       	ret

00003f8c <add_key>:
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3f8c:	40 91 16 01 	lds	r20, 0x0116
    3f90:	50 91 17 01 	lds	r21, 0x0117
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    keyboard_report->keys[cb_tail] = code;
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    3f98:	9f ef       	ldi	r25, 0xFF	; 255
#endif
    host_keyboard_send(keyboard_report);
}

/* key */
void add_key(uint8_t key)
    3f9a:	fa 01       	movw	r30, r20
    3f9c:	e2 0f       	add	r30, r18
    3f9e:	f3 1f       	adc	r31, r19
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3fa0:	62 81       	ldd	r22, Z+2	; 0x02
    3fa2:	68 17       	cp	r22, r24
    3fa4:	a1 f0       	breq	.+40     	; 0x3fce <add_key+0x42>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3fa6:	9f 3f       	cpi	r25, 0xFF	; 255
    3fa8:	19 f4       	brne	.+6      	; 0x3fb0 <add_key+0x24>
    3faa:	61 11       	cpse	r22, r1
    3fac:	01 c0       	rjmp	.+2      	; 0x3fb0 <add_key+0x24>
    3fae:	92 2f       	mov	r25, r18
    3fb0:	2f 5f       	subi	r18, 0xFF	; 255
    3fb2:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3fb4:	26 30       	cpi	r18, 0x06	; 6
    3fb6:	31 05       	cpc	r19, r1
    3fb8:	81 f7       	brne	.-32     	; 0x3f9a <add_key+0xe>
    3fba:	07 c0       	rjmp	.+14     	; 0x3fca <add_key+0x3e>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
            keyboard_report->keys[empty] = code;
    3fbc:	fa 01       	movw	r30, r20
    3fbe:	e9 0f       	add	r30, r25
    3fc0:	f1 1d       	adc	r31, r1
    3fc2:	97 fd       	sbrc	r25, 7
    3fc4:	fa 95       	dec	r31
    3fc6:	82 83       	std	Z+2, r24	; 0x02
    3fc8:	08 95       	ret
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3fca:	9f 3f       	cpi	r25, 0xFF	; 255
    3fcc:	b9 f7       	brne	.-18     	; 0x3fbc <add_key+0x30>
    3fce:	08 95       	ret

00003fd0 <del_key>:
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3fd0:	40 91 16 01 	lds	r20, 0x0116
    3fd4:	50 91 17 01 	lds	r21, 0x0117
    3fd8:	20 e0       	ldi	r18, 0x00	; 0
    3fda:	30 e0       	ldi	r19, 0x00	; 0
    }
#endif
    add_key_byte(key);
}

void del_key(uint8_t key)
    3fdc:	fa 01       	movw	r30, r20
    3fde:	e2 0f       	add	r30, r18
    3fe0:	f3 1f       	adc	r31, r19
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3fe2:	92 81       	ldd	r25, Z+2	; 0x02
    3fe4:	98 13       	cpse	r25, r24
    3fe6:	01 c0       	rjmp	.+2      	; 0x3fea <del_key+0x1a>
            keyboard_report->keys[i] = 0;
    3fe8:	12 82       	std	Z+2, r1	; 0x02
    3fea:	2f 5f       	subi	r18, 0xFF	; 255
    3fec:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3fee:	26 30       	cpi	r18, 0x06	; 6
    3ff0:	31 05       	cpc	r19, r1
    3ff2:	a1 f7       	brne	.-24     	; 0x3fdc <del_key+0xc>
        del_key_bit(key);
        return;
    }
#endif
    del_key_byte(key);
}
    3ff4:	08 95       	ret

00003ff6 <clear_keys>:

void clear_keys(void)
{
    3ff6:	81 e0       	ldi	r24, 0x01	; 1
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3ffa:	e0 91 16 01 	lds	r30, 0x0116
    3ffe:	f0 91 17 01 	lds	r31, 0x0117
    4002:	e8 0f       	add	r30, r24
    4004:	f9 1f       	adc	r31, r25
    4006:	10 82       	st	Z, r1
    4008:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    400a:	88 30       	cpi	r24, 0x08	; 8
    400c:	91 05       	cpc	r25, r1
    400e:	a9 f7       	brne	.-22     	; 0x3ffa <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    4010:	08 95       	ret

00004012 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    4012:	80 91 d9 02 	lds	r24, 0x02D9
    4016:	08 95       	ret

00004018 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    4018:	90 91 d9 02 	lds	r25, 0x02D9
    401c:	98 2b       	or	r25, r24
    401e:	90 93 d9 02 	sts	0x02D9, r25
    4022:	08 95       	ret

00004024 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    4024:	80 95       	com	r24
    4026:	90 91 d9 02 	lds	r25, 0x02D9
    402a:	98 23       	and	r25, r24
    402c:	90 93 d9 02 	sts	0x02D9, r25
    4030:	08 95       	ret

00004032 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    4032:	80 93 d9 02 	sts	0x02D9, r24
    4036:	08 95       	ret

00004038 <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    4038:	10 92 d9 02 	sts	0x02D9, r1
    403c:	08 95       	ret

0000403e <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    403e:	90 91 da 02 	lds	r25, 0x02DA
    4042:	98 2b       	or	r25, r24
    4044:	90 93 da 02 	sts	0x02DA, r25
    4048:	08 95       	ret

0000404a <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    404a:	80 95       	com	r24
    404c:	90 91 da 02 	lds	r25, 0x02DA
    4050:	98 23       	and	r25, r24
    4052:	90 93 da 02 	sts	0x02DA, r25
    4056:	08 95       	ret

00004058 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    4058:	10 92 da 02 	sts	0x02DA, r1
    405c:	08 95       	ret

0000405e <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    405e:	80 93 db 02 	sts	0x02DB, r24
    4062:	08 95       	ret

00004064 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    4064:	10 92 db 02 	sts	0x02DB, r1
    4068:	08 95       	ret

0000406a <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    406a:	40 91 16 01 	lds	r20, 0x0116
    406e:	50 91 17 01 	lds	r21, 0x0117
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    4076:	80 e0       	ldi	r24, 0x00	; 0


/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
    4078:	fa 01       	movw	r30, r20
    407a:	e2 0f       	add	r30, r18
    407c:	f3 1f       	adc	r31, r19
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    407e:	91 81       	ldd	r25, Z+1	; 0x01
    4080:	91 11       	cpse	r25, r1
            cnt++;
    4082:	8f 5f       	subi	r24, 0xFF	; 255
    4084:	2f 5f       	subi	r18, 0xFF	; 255
    4086:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    4088:	27 30       	cpi	r18, 0x07	; 7
    408a:	31 05       	cpc	r19, r1
    408c:	a9 f7       	brne	.-22     	; 0x4078 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    408e:	08 95       	ret

00004090 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    4090:	e0 91 16 01 	lds	r30, 0x0116
    4094:	f0 91 17 01 	lds	r31, 0x0117
    4098:	80 91 d9 02 	lds	r24, 0x02D9
    409c:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    409e:	e0 91 16 01 	lds	r30, 0x0116
    40a2:	f0 91 17 01 	lds	r31, 0x0117
    40a6:	80 81       	ld	r24, Z
    40a8:	90 91 da 02 	lds	r25, 0x02DA
    40ac:	89 2b       	or	r24, r25
    40ae:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    40b0:	90 91 db 02 	lds	r25, 0x02DB
    40b4:	99 23       	and	r25, r25
    40b6:	61 f0       	breq	.+24     	; 0x40d0 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    40b8:	e0 91 16 01 	lds	r30, 0x0116
    40bc:	f0 91 17 01 	lds	r31, 0x0117
    40c0:	80 81       	ld	r24, Z
    40c2:	89 2b       	or	r24, r25
    40c4:	80 83       	st	Z, r24
        if (has_anykey()) {
    40c6:	0e 94 35 20 	call	0x406a	; 0x406a <has_anykey>
    40ca:	81 11       	cpse	r24, r1
            clear_oneshot_mods();
    40cc:	0e 94 32 20 	call	0x4064	; 0x4064 <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    40d0:	80 91 16 01 	lds	r24, 0x0116
    40d4:	90 91 17 01 	lds	r25, 0x0117
    40d8:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <host_keyboard_send>

000040dc <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    40dc:	8d 3b       	cpi	r24, 0xBD	; 189
    40de:	50 f4       	brcc	.+20     	; 0x40f4 <keycode_to_action+0x18>
    40e0:	88 3a       	cpi	r24, 0xA8	; 168
    40e2:	18 f5       	brcc	.+70     	; 0x412a <keycode_to_action+0x4e>
    40e4:	85 3a       	cpi	r24, 0xA5	; 165
    40e6:	c0 f4       	brcc	.+48     	; 0x4118 <keycode_to_action+0x3c>
    40e8:	84 30       	cpi	r24, 0x04	; 4
    40ea:	98 f4       	brcc	.+38     	; 0x4112 <keycode_to_action+0x36>
    40ec:	81 30       	cpi	r24, 0x01	; 1
    40ee:	09 f0       	breq	.+2      	; 0x40f2 <keycode_to_action+0x16>
    40f0:	6f c0       	rjmp	.+222    	; 0x41d0 <keycode_to_action+0xf4>
    40f2:	0c c0       	rjmp	.+24     	; 0x410c <keycode_to_action+0x30>
    40f4:	88 3e       	cpi	r24, 0xE8	; 232
    40f6:	30 f4       	brcc	.+12     	; 0x4104 <keycode_to_action+0x28>
    40f8:	80 3e       	cpi	r24, 0xE0	; 224
    40fa:	58 f4       	brcc	.+22     	; 0x4112 <keycode_to_action+0x36>
    40fc:	8f 3b       	cpi	r24, 0xBF	; 191
    40fe:	09 f0       	breq	.+2      	; 0x4102 <keycode_to_action+0x26>
    4100:	67 c0       	rjmp	.+206    	; 0x41d0 <keycode_to_action+0xf4>
    4102:	59 c0       	rjmp	.+178    	; 0x41b6 <keycode_to_action+0xda>
    4104:	80 3f       	cpi	r24, 0xF0	; 240
    4106:	08 f4       	brcc	.+2      	; 0x410a <keycode_to_action+0x2e>
    4108:	63 c0       	rjmp	.+198    	; 0x41d0 <keycode_to_action+0xf4>
    410a:	51 c0       	rjmp	.+162    	; 0x41ae <keycode_to_action+0xd2>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    410c:	21 e0       	ldi	r18, 0x01	; 1
    410e:	30 e0       	ldi	r19, 0x00	; 0
    4110:	a6 c0       	rjmp	.+332    	; 0x425e <keycode_to_action+0x182>
{
    action_t action = {};
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    4112:	28 2f       	mov	r18, r24
    4114:	30 e0       	ldi	r19, 0x00	; 0
            break;
    4116:	a3 c0       	rjmp	.+326    	; 0x425e <keycode_to_action+0x182>
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    4118:	85 3a       	cpi	r24, 0xA5	; 165
    411a:	09 f4       	brne	.+2      	; 0x411e <keycode_to_action+0x42>
    411c:	5c c0       	rjmp	.+184    	; 0x41d6 <keycode_to_action+0xfa>
    411e:	86 3a       	cpi	r24, 0xA6	; 166
    4120:	09 f0       	breq	.+2      	; 0x4124 <keycode_to_action+0x48>
    4122:	5c c0       	rjmp	.+184    	; 0x41dc <keycode_to_action+0x100>
    4124:	22 e8       	ldi	r18, 0x82	; 130
    4126:	30 e4       	ldi	r19, 0x40	; 64
    4128:	9a c0       	rjmp	.+308    	; 0x425e <keycode_to_action+0x182>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    412a:	88 3a       	cpi	r24, 0xA8	; 168
    412c:	09 f4       	brne	.+2      	; 0x4130 <keycode_to_action+0x54>
    412e:	59 c0       	rjmp	.+178    	; 0x41e2 <keycode_to_action+0x106>
    4130:	89 3a       	cpi	r24, 0xA9	; 169
    4132:	09 f4       	brne	.+2      	; 0x4136 <keycode_to_action+0x5a>
    4134:	59 c0       	rjmp	.+178    	; 0x41e8 <keycode_to_action+0x10c>
    4136:	8a 3a       	cpi	r24, 0xAA	; 170
    4138:	09 f4       	brne	.+2      	; 0x413c <keycode_to_action+0x60>
    413a:	59 c0       	rjmp	.+178    	; 0x41ee <keycode_to_action+0x112>
    413c:	8b 3a       	cpi	r24, 0xAB	; 171
    413e:	09 f4       	brne	.+2      	; 0x4142 <keycode_to_action+0x66>
    4140:	59 c0       	rjmp	.+178    	; 0x41f4 <keycode_to_action+0x118>
    4142:	8c 3a       	cpi	r24, 0xAC	; 172
    4144:	09 f4       	brne	.+2      	; 0x4148 <keycode_to_action+0x6c>
    4146:	59 c0       	rjmp	.+178    	; 0x41fa <keycode_to_action+0x11e>
    4148:	8b 3b       	cpi	r24, 0xBB	; 187
    414a:	09 f4       	brne	.+2      	; 0x414e <keycode_to_action+0x72>
    414c:	59 c0       	rjmp	.+178    	; 0x4200 <keycode_to_action+0x124>
    414e:	8c 3b       	cpi	r24, 0xBC	; 188
    4150:	09 f4       	brne	.+2      	; 0x4154 <keycode_to_action+0x78>
    4152:	59 c0       	rjmp	.+178    	; 0x4206 <keycode_to_action+0x12a>
    4154:	8d 3a       	cpi	r24, 0xAD	; 173
    4156:	09 f4       	brne	.+2      	; 0x415a <keycode_to_action+0x7e>
    4158:	59 c0       	rjmp	.+178    	; 0x420c <keycode_to_action+0x130>
    415a:	80 3b       	cpi	r24, 0xB0	; 176
    415c:	09 f4       	brne	.+2      	; 0x4160 <keycode_to_action+0x84>
    415e:	59 c0       	rjmp	.+178    	; 0x4212 <keycode_to_action+0x136>
    4160:	8e 3a       	cpi	r24, 0xAE	; 174
    4162:	09 f4       	brne	.+2      	; 0x4166 <keycode_to_action+0x8a>
    4164:	59 c0       	rjmp	.+178    	; 0x4218 <keycode_to_action+0x13c>
    4166:	8f 3a       	cpi	r24, 0xAF	; 175
    4168:	09 f4       	brne	.+2      	; 0x416c <keycode_to_action+0x90>
    416a:	59 c0       	rjmp	.+178    	; 0x421e <keycode_to_action+0x142>
    416c:	81 3b       	cpi	r24, 0xB1	; 177
    416e:	09 f4       	brne	.+2      	; 0x4172 <keycode_to_action+0x96>
    4170:	59 c0       	rjmp	.+178    	; 0x4224 <keycode_to_action+0x148>
    4172:	82 3b       	cpi	r24, 0xB2	; 178
    4174:	09 f4       	brne	.+2      	; 0x4178 <keycode_to_action+0x9c>
    4176:	59 c0       	rjmp	.+178    	; 0x422a <keycode_to_action+0x14e>
    4178:	83 3b       	cpi	r24, 0xB3	; 179
    417a:	09 f4       	brne	.+2      	; 0x417e <keycode_to_action+0xa2>
    417c:	59 c0       	rjmp	.+178    	; 0x4230 <keycode_to_action+0x154>
    417e:	84 3b       	cpi	r24, 0xB4	; 180
    4180:	09 f4       	brne	.+2      	; 0x4184 <keycode_to_action+0xa8>
    4182:	59 c0       	rjmp	.+178    	; 0x4236 <keycode_to_action+0x15a>
    4184:	85 3b       	cpi	r24, 0xB5	; 181
    4186:	09 f4       	brne	.+2      	; 0x418a <keycode_to_action+0xae>
    4188:	59 c0       	rjmp	.+178    	; 0x423c <keycode_to_action+0x160>
    418a:	86 3b       	cpi	r24, 0xB6	; 182
    418c:	09 f4       	brne	.+2      	; 0x4190 <keycode_to_action+0xb4>
    418e:	59 c0       	rjmp	.+178    	; 0x4242 <keycode_to_action+0x166>
    4190:	87 3b       	cpi	r24, 0xB7	; 183
    4192:	09 f4       	brne	.+2      	; 0x4196 <keycode_to_action+0xba>
    4194:	59 c0       	rjmp	.+178    	; 0x4248 <keycode_to_action+0x16c>
    4196:	88 3b       	cpi	r24, 0xB8	; 184
    4198:	09 f4       	brne	.+2      	; 0x419c <keycode_to_action+0xc0>
    419a:	59 c0       	rjmp	.+178    	; 0x424e <keycode_to_action+0x172>
    419c:	89 3b       	cpi	r24, 0xB9	; 185
    419e:	09 f4       	brne	.+2      	; 0x41a2 <keycode_to_action+0xc6>
    41a0:	59 c0       	rjmp	.+178    	; 0x4254 <keycode_to_action+0x178>
    41a2:	8a 3b       	cpi	r24, 0xBA	; 186
    41a4:	09 f0       	breq	.+2      	; 0x41a8 <keycode_to_action+0xcc>
    41a6:	59 c0       	rjmp	.+178    	; 0x425a <keycode_to_action+0x17e>
    41a8:	2a e2       	ldi	r18, 0x2A	; 42
    41aa:	36 e4       	ldi	r19, 0x46	; 70
    41ac:	58 c0       	rjmp	.+176    	; 0x425e <keycode_to_action+0x182>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    41ae:	28 2f       	mov	r18, r24
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	30 65       	ori	r19, 0x50	; 80
            break;
    41b4:	54 c0       	rjmp	.+168    	; 0x425e <keycode_to_action+0x182>
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    41b6:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <clear_keyboard>
    41ba:	2f e7       	ldi	r18, 0x7F	; 127
    41bc:	88 e3       	ldi	r24, 0x38	; 56
    41be:	91 e0       	ldi	r25, 0x01	; 1
    41c0:	21 50       	subi	r18, 0x01	; 1
    41c2:	80 40       	sbci	r24, 0x00	; 0
    41c4:	90 40       	sbci	r25, 0x00	; 0
    41c6:	e1 f7       	brne	.-8      	; 0x41c0 <keycode_to_action+0xe4>
    41c8:	00 c0       	rjmp	.+0      	; 0x41ca <keycode_to_action+0xee>
    41ca:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    41cc:	0e 94 bf 22 	call	0x457e	; 0x457e <bootloader_jump>
            break;
        default:
            action.code = ACTION_NO;
    41d0:	20 e0       	ldi	r18, 0x00	; 0
    41d2:	30 e0       	ldi	r19, 0x00	; 0
    41d4:	44 c0       	rjmp	.+136    	; 0x425e <keycode_to_action+0x182>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    41d6:	21 e8       	ldi	r18, 0x81	; 129
    41d8:	30 e4       	ldi	r19, 0x40	; 64
    41da:	41 c0       	rjmp	.+130    	; 0x425e <keycode_to_action+0x182>
    41dc:	23 e8       	ldi	r18, 0x83	; 131
    41de:	30 e4       	ldi	r19, 0x40	; 64
    41e0:	3e c0       	rjmp	.+124    	; 0x425e <keycode_to_action+0x182>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    41e2:	22 ee       	ldi	r18, 0xE2	; 226
    41e4:	34 e4       	ldi	r19, 0x44	; 68
    41e6:	3b c0       	rjmp	.+118    	; 0x425e <keycode_to_action+0x182>
    41e8:	29 ee       	ldi	r18, 0xE9	; 233
    41ea:	34 e4       	ldi	r19, 0x44	; 68
    41ec:	38 c0       	rjmp	.+112    	; 0x425e <keycode_to_action+0x182>
    41ee:	2a ee       	ldi	r18, 0xEA	; 234
    41f0:	34 e4       	ldi	r19, 0x44	; 68
    41f2:	35 c0       	rjmp	.+106    	; 0x425e <keycode_to_action+0x182>
    41f4:	25 eb       	ldi	r18, 0xB5	; 181
    41f6:	34 e4       	ldi	r19, 0x44	; 68
    41f8:	32 c0       	rjmp	.+100    	; 0x425e <keycode_to_action+0x182>
    41fa:	26 eb       	ldi	r18, 0xB6	; 182
    41fc:	34 e4       	ldi	r19, 0x44	; 68
    41fe:	2f c0       	rjmp	.+94     	; 0x425e <keycode_to_action+0x182>
    4200:	23 eb       	ldi	r18, 0xB3	; 179
    4202:	34 e4       	ldi	r19, 0x44	; 68
    4204:	2c c0       	rjmp	.+88     	; 0x425e <keycode_to_action+0x182>
    4206:	24 eb       	ldi	r18, 0xB4	; 180
    4208:	34 e4       	ldi	r19, 0x44	; 68
    420a:	29 c0       	rjmp	.+82     	; 0x425e <keycode_to_action+0x182>
    420c:	27 eb       	ldi	r18, 0xB7	; 183
    420e:	34 e4       	ldi	r19, 0x44	; 68
    4210:	26 c0       	rjmp	.+76     	; 0x425e <keycode_to_action+0x182>
    4212:	2c ec       	ldi	r18, 0xCC	; 204
    4214:	34 e4       	ldi	r19, 0x44	; 68
    4216:	23 c0       	rjmp	.+70     	; 0x425e <keycode_to_action+0x182>
    4218:	2d ec       	ldi	r18, 0xCD	; 205
    421a:	34 e4       	ldi	r19, 0x44	; 68
    421c:	20 c0       	rjmp	.+64     	; 0x425e <keycode_to_action+0x182>
    421e:	23 e8       	ldi	r18, 0x83	; 131
    4220:	35 e4       	ldi	r19, 0x45	; 69
    4222:	1d c0       	rjmp	.+58     	; 0x425e <keycode_to_action+0x182>
    4224:	2a e8       	ldi	r18, 0x8A	; 138
    4226:	35 e4       	ldi	r19, 0x45	; 69
    4228:	1a c0       	rjmp	.+52     	; 0x425e <keycode_to_action+0x182>
    422a:	22 e9       	ldi	r18, 0x92	; 146
    422c:	35 e4       	ldi	r19, 0x45	; 69
    422e:	17 c0       	rjmp	.+46     	; 0x425e <keycode_to_action+0x182>
    4230:	24 e9       	ldi	r18, 0x94	; 148
    4232:	35 e4       	ldi	r19, 0x45	; 69
    4234:	14 c0       	rjmp	.+40     	; 0x425e <keycode_to_action+0x182>
    4236:	21 e2       	ldi	r18, 0x21	; 33
    4238:	36 e4       	ldi	r19, 0x46	; 70
    423a:	11 c0       	rjmp	.+34     	; 0x425e <keycode_to_action+0x182>
    423c:	23 e2       	ldi	r18, 0x23	; 35
    423e:	36 e4       	ldi	r19, 0x46	; 70
    4240:	0e c0       	rjmp	.+28     	; 0x425e <keycode_to_action+0x182>
    4242:	24 e2       	ldi	r18, 0x24	; 36
    4244:	36 e4       	ldi	r19, 0x46	; 70
    4246:	0b c0       	rjmp	.+22     	; 0x425e <keycode_to_action+0x182>
    4248:	25 e2       	ldi	r18, 0x25	; 37
    424a:	36 e4       	ldi	r19, 0x46	; 70
    424c:	08 c0       	rjmp	.+16     	; 0x425e <keycode_to_action+0x182>
    424e:	26 e2       	ldi	r18, 0x26	; 38
    4250:	36 e4       	ldi	r19, 0x46	; 70
    4252:	05 c0       	rjmp	.+10     	; 0x425e <keycode_to_action+0x182>
    4254:	27 e2       	ldi	r18, 0x27	; 39
    4256:	36 e4       	ldi	r19, 0x46	; 70
    4258:	02 c0       	rjmp	.+4      	; 0x425e <keycode_to_action+0x182>
    425a:	20 e0       	ldi	r18, 0x00	; 0
    425c:	34 e4       	ldi	r19, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    425e:	c9 01       	movw	r24, r18
    4260:	08 95       	ret

00004262 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    4262:	0e 94 b9 08 	call	0x1172	; 0x1172 <keymap_key_to_keycode>
    switch (keycode) {
    4266:	80 3e       	cpi	r24, 0xE0	; 224
    4268:	a8 f4       	brcc	.+42     	; 0x4294 <action_for_key+0x32>
    426a:	80 3c       	cpi	r24, 0xC0	; 192
    426c:	10 f5       	brcc	.+68     	; 0x42b2 <action_for_key+0x50>
    426e:	81 33       	cpi	r24, 0x31	; 49
    4270:	09 f4       	brne	.+2      	; 0x4274 <action_for_key+0x12>
    4272:	61 c0       	rjmp	.+194    	; 0x4336 <action_for_key+0xd4>
    4274:	38 f4       	brcc	.+14     	; 0x4284 <action_for_key+0x22>
    4276:	89 32       	cpi	r24, 0x29	; 41
    4278:	09 f4       	brne	.+2      	; 0x427c <action_for_key+0x1a>
    427a:	58 c0       	rjmp	.+176    	; 0x432c <action_for_key+0xca>
    427c:	8a 32       	cpi	r24, 0x2A	; 42
    427e:	09 f0       	breq	.+2      	; 0x4282 <action_for_key+0x20>
    4280:	67 c0       	rjmp	.+206    	; 0x4350 <action_for_key+0xee>
    4282:	61 c0       	rjmp	.+194    	; 0x4346 <action_for_key+0xe4>
    4284:	89 33       	cpi	r24, 0x39	; 57
    4286:	c1 f0       	breq	.+48     	; 0x42b8 <action_for_key+0x56>
    4288:	82 38       	cpi	r24, 0x82	; 130
    428a:	b1 f0       	breq	.+44     	; 0x42b8 <action_for_key+0x56>
    428c:	85 33       	cpi	r24, 0x35	; 53
    428e:	09 f0       	breq	.+2      	; 0x4292 <action_for_key+0x30>
    4290:	5f c0       	rjmp	.+190    	; 0x4350 <action_for_key+0xee>
    4292:	44 c0       	rjmp	.+136    	; 0x431c <action_for_key+0xba>
    4294:	83 3e       	cpi	r24, 0xE3	; 227
    4296:	61 f1       	breq	.+88     	; 0x42f0 <action_for_key+0x8e>
    4298:	30 f4       	brcc	.+12     	; 0x42a6 <action_for_key+0x44>
    429a:	80 3e       	cpi	r24, 0xE0	; 224
    429c:	a9 f0       	breq	.+42     	; 0x42c8 <action_for_key+0x66>
    429e:	82 3e       	cpi	r24, 0xE2	; 226
    42a0:	09 f0       	breq	.+2      	; 0x42a4 <action_for_key+0x42>
    42a2:	56 c0       	rjmp	.+172    	; 0x4350 <action_for_key+0xee>
    42a4:	17 c0       	rjmp	.+46     	; 0x42d4 <action_for_key+0x72>
    42a6:	86 3e       	cpi	r24, 0xE6	; 230
    42a8:	41 f1       	breq	.+80     	; 0x42fa <action_for_key+0x98>
    42aa:	87 3e       	cpi	r24, 0xE7	; 231
    42ac:	09 f0       	breq	.+2      	; 0x42b0 <action_for_key+0x4e>
    42ae:	50 c0       	rjmp	.+160    	; 0x4350 <action_for_key+0xee>
    42b0:	30 c0       	rjmp	.+96     	; 0x4312 <action_for_key+0xb0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    42b2:	0e 94 cb 08 	call	0x1196	; 0x1196 <keymap_fn_to_action>
    42b6:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    42b8:	90 91 02 03 	lds	r25, 0x0302
    42bc:	90 fd       	sbrc	r25, 0
    42be:	02 c0       	rjmp	.+4      	; 0x42c4 <action_for_key+0x62>
    42c0:	91 ff       	sbrs	r25, 1
    42c2:	46 c0       	rjmp	.+140    	; 0x4350 <action_for_key+0xee>
                return keycode_to_action(KC_LCTL);
    42c4:	80 ee       	ldi	r24, 0xE0	; 224
    42c6:	44 c0       	rjmp	.+136    	; 0x4350 <action_for_key+0xee>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    42c8:	80 91 02 03 	lds	r24, 0x0302
    42cc:	80 ff       	sbrs	r24, 0
    42ce:	fa cf       	rjmp	.-12     	; 0x42c4 <action_for_key+0x62>
                return keycode_to_action(KC_CAPSLOCK);
    42d0:	89 e3       	ldi	r24, 0x39	; 57
    42d2:	3e c0       	rjmp	.+124    	; 0x4350 <action_for_key+0xee>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    42d4:	80 91 02 03 	lds	r24, 0x0302
    42d8:	82 ff       	sbrs	r24, 2
    42da:	08 c0       	rjmp	.+16     	; 0x42ec <action_for_key+0x8a>
                if (keymap_config.no_gui) {
    42dc:	80 91 02 03 	lds	r24, 0x0302
    42e0:	84 ff       	sbrs	r24, 4
    42e2:	02 c0       	rjmp	.+4      	; 0x42e8 <action_for_key+0x86>
                    return keycode_to_action(ACTION_NO);
    42e4:	80 e0       	ldi	r24, 0x00	; 0
    42e6:	34 c0       	rjmp	.+104    	; 0x4350 <action_for_key+0xee>
                }
                return keycode_to_action(KC_LGUI);
    42e8:	83 ee       	ldi	r24, 0xE3	; 227
    42ea:	32 c0       	rjmp	.+100    	; 0x4350 <action_for_key+0xee>
            }
            return keycode_to_action(KC_LALT);
    42ec:	82 ee       	ldi	r24, 0xE2	; 226
    42ee:	30 c0       	rjmp	.+96     	; 0x4350 <action_for_key+0xee>
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    42f0:	80 91 02 03 	lds	r24, 0x0302
    42f4:	82 ff       	sbrs	r24, 2
    42f6:	f2 cf       	rjmp	.-28     	; 0x42dc <action_for_key+0x7a>
    42f8:	f9 cf       	rjmp	.-14     	; 0x42ec <action_for_key+0x8a>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    42fa:	80 91 02 03 	lds	r24, 0x0302
    42fe:	83 ff       	sbrs	r24, 3
    4300:	06 c0       	rjmp	.+12     	; 0x430e <action_for_key+0xac>
                if (keymap_config.no_gui) {
    4302:	80 91 02 03 	lds	r24, 0x0302
    4306:	84 fd       	sbrc	r24, 4
    4308:	ed cf       	rjmp	.-38     	; 0x42e4 <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    430a:	87 ee       	ldi	r24, 0xE7	; 231
    430c:	21 c0       	rjmp	.+66     	; 0x4350 <action_for_key+0xee>
            }
            return keycode_to_action(KC_RALT);
    430e:	86 ee       	ldi	r24, 0xE6	; 230
    4310:	1f c0       	rjmp	.+62     	; 0x4350 <action_for_key+0xee>
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    4312:	80 91 02 03 	lds	r24, 0x0302
    4316:	83 ff       	sbrs	r24, 3
    4318:	f4 cf       	rjmp	.-24     	; 0x4302 <action_for_key+0xa0>
    431a:	f9 cf       	rjmp	.-14     	; 0x430e <action_for_key+0xac>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    431c:	80 91 02 03 	lds	r24, 0x0302
    4320:	85 ff       	sbrs	r24, 5
    4322:	02 c0       	rjmp	.+4      	; 0x4328 <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    4324:	89 e2       	ldi	r24, 0x29	; 41
    4326:	14 c0       	rjmp	.+40     	; 0x4350 <action_for_key+0xee>
            }
            return keycode_to_action(KC_GRAVE);
    4328:	85 e3       	ldi	r24, 0x35	; 53
    432a:	12 c0       	rjmp	.+36     	; 0x4350 <action_for_key+0xee>
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    432c:	80 91 02 03 	lds	r24, 0x0302
    4330:	85 fd       	sbrc	r24, 5
    4332:	fa cf       	rjmp	.-12     	; 0x4328 <action_for_key+0xc6>
    4334:	f7 cf       	rjmp	.-18     	; 0x4324 <action_for_key+0xc2>
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    4336:	80 91 02 03 	lds	r24, 0x0302
    433a:	86 ff       	sbrs	r24, 6
    433c:	02 c0       	rjmp	.+4      	; 0x4342 <action_for_key+0xe0>
                return keycode_to_action(KC_BSPACE);
    433e:	8a e2       	ldi	r24, 0x2A	; 42
    4340:	07 c0       	rjmp	.+14     	; 0x4350 <action_for_key+0xee>
            }
            return keycode_to_action(KC_BSLASH);
    4342:	81 e3       	ldi	r24, 0x31	; 49
    4344:	05 c0       	rjmp	.+10     	; 0x4350 <action_for_key+0xee>
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    4346:	80 91 02 03 	lds	r24, 0x0302
    434a:	86 fd       	sbrc	r24, 6
    434c:	fa cf       	rjmp	.-12     	; 0x4342 <action_for_key+0xe0>
    434e:	f7 cf       	rjmp	.-18     	; 0x433e <action_for_key+0xdc>
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    4350:	0e 94 6e 20 	call	0x40dc	; 0x40dc <keycode_to_action>
    }
}
    4354:	08 95       	ret

00004356 <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    4356:	80 e0       	ldi	r24, 0x00	; 0
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	08 95       	ret

0000435c <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    435c:	90 93 3d 01 	sts	0x013D, r25
    4360:	80 93 3c 01 	sts	0x013C, r24
    4364:	08 95       	ret

00004366 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    4366:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    4368:	98 2f       	mov	r25, r24
    436a:	9c 7c       	andi	r25, 0xCC	; 204
    436c:	96 95       	lsr	r25
    436e:	96 95       	lsr	r25
    4370:	83 73       	andi	r24, 0x33	; 51
    4372:	44 e0       	ldi	r20, 0x04	; 4
    4374:	84 9f       	mul	r24, r20
    4376:	90 01       	movw	r18, r0
    4378:	11 24       	eor	r1, r1
    437a:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    437c:	89 2f       	mov	r24, r25
    437e:	8a 7a       	andi	r24, 0xAA	; 170
    4380:	86 95       	lsr	r24
    4382:	95 75       	andi	r25, 0x55	; 85
    4384:	99 0f       	add	r25, r25
    return bits;
}
    4386:	89 2b       	or	r24, r25
    4388:	08 95       	ret

0000438a <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    438a:	1f 93       	push	r17
    438c:	cf 93       	push	r28
    438e:	df 93       	push	r29
    4390:	1f 92       	push	r1
    4392:	cd b7       	in	r28, 0x3d	; 61
    4394:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    4396:	99 83       	std	Y+1, r25	; 0x01
    4398:	0e 94 b3 21 	call	0x4366	; 0x4366 <bitrev>
    439c:	18 2f       	mov	r17, r24
    439e:	99 81       	ldd	r25, Y+1	; 0x01
    43a0:	89 2f       	mov	r24, r25
    43a2:	0e 94 b3 21 	call	0x4366	; 0x4366 <bitrev>
    43a6:	31 2f       	mov	r19, r17
    43a8:	20 e0       	ldi	r18, 0x00	; 0
    43aa:	28 2b       	or	r18, r24
    return bits;
}
    43ac:	c9 01       	movw	r24, r18
    43ae:	0f 90       	pop	r0
    43b0:	df 91       	pop	r29
    43b2:	cf 91       	pop	r28
    43b4:	1f 91       	pop	r17
    43b6:	08 95       	ret

000043b8 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    43b8:	80 91 f9 02 	lds	r24, 0x02F9
    43bc:	84 30       	cpi	r24, 0x04	; 4
    43be:	09 f1       	breq	.+66     	; 0x4402 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    43c0:	10 92 e5 02 	sts	0x02E5, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    43c4:	20 e4       	ldi	r18, 0x40	; 64
    43c6:	88 e1       	ldi	r24, 0x18	; 24
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	0f b6       	in	r0, 0x3f	; 63
    43cc:	f8 94       	cli
    43ce:	a8 95       	wdr
    43d0:	80 93 60 00 	sts	0x0060, r24
    43d4:	0f be       	out	0x3f, r0	; 63
    43d6:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    43da:	83 b7       	in	r24, 0x33	; 51
    43dc:	81 7f       	andi	r24, 0xF1	; 241
    43de:	84 60       	ori	r24, 0x04	; 4
    43e0:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    43e2:	83 b7       	in	r24, 0x33	; 51
    43e4:	81 60       	ori	r24, 0x01	; 1
    43e6:	83 bf       	out	0x33, r24	; 51
    sei();
    43e8:	78 94       	sei
    sleep_cpu();
    43ea:	88 95       	sleep
    sleep_disable();
    43ec:	83 b7       	in	r24, 0x33	; 51
    43ee:	8e 7f       	andi	r24, 0xFE	; 254
    43f0:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    43f2:	88 e1       	ldi	r24, 0x18	; 24
    43f4:	0f b6       	in	r0, 0x3f	; 63
    43f6:	f8 94       	cli
    43f8:	80 93 60 00 	sts	0x0060, r24
    43fc:	10 92 60 00 	sts	0x0060, r1
    4400:	0f be       	out	0x3f, r0	; 63
    4402:	08 95       	ret

00004404 <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    4404:	08 95       	ret

00004406 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    4406:	08 95       	ret

00004408 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    4408:	cf 93       	push	r28
    matrix_power_up();
    440a:	0e 94 02 22 	call	0x4404	; 0x4404 <matrix_power_up>
    matrix_scan();
    440e:	0e 94 14 09 	call	0x1228	; 0x1228 <matrix_scan>
    matrix_power_down();
    4412:	0e 94 03 22 	call	0x4406	; 0x4406 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4416:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    4418:	8c 2f       	mov	r24, r28
    441a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <matrix_get_row>
    441e:	89 2b       	or	r24, r25
    4420:	29 f4       	brne	.+10     	; 0x442c <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4422:	cf 5f       	subi	r28, 0xFF	; 255
    4424:	c8 30       	cpi	r28, 0x08	; 8
    4426:	c1 f7       	brne	.-16     	; 0x4418 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    4428:	80 e0       	ldi	r24, 0x00	; 0
    442a:	01 c0       	rjmp	.+2      	; 0x442e <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    442c:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    442e:	cf 91       	pop	r28
    4430:	08 95       	ret

00004432 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    4432:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <clear_keyboard>

00004436 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    4436:	1f 92       	push	r1
    4438:	0f 92       	push	r0
    443a:	0f b6       	in	r0, 0x3f	; 63
    443c:	0f 92       	push	r0
    443e:	11 24       	eor	r1, r1
    4440:	8f 93       	push	r24
    4442:	9f 93       	push	r25
    4444:	af 93       	push	r26
    4446:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    4448:	80 91 e5 02 	lds	r24, 0x02E5
    444c:	81 11       	cpse	r24, r1
    444e:	13 c0       	rjmp	.+38     	; 0x4476 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    4450:	80 91 e6 02 	lds	r24, 0x02E6
    4454:	90 91 e7 02 	lds	r25, 0x02E7
    4458:	a0 91 e8 02 	lds	r26, 0x02E8
    445c:	b0 91 e9 02 	lds	r27, 0x02E9
    4460:	41 96       	adiw	r24, 0x11	; 17
    4462:	a1 1d       	adc	r26, r1
    4464:	b1 1d       	adc	r27, r1
    4466:	80 93 e6 02 	sts	0x02E6, r24
    446a:	90 93 e7 02 	sts	0x02E7, r25
    446e:	a0 93 e8 02 	sts	0x02E8, r26
    4472:	b0 93 e9 02 	sts	0x02E9, r27
            break;
        default:
            ;
    }
}
    4476:	bf 91       	pop	r27
    4478:	af 91       	pop	r26
    447a:	9f 91       	pop	r25
    447c:	8f 91       	pop	r24
    447e:	0f 90       	pop	r0
    4480:	0f be       	out	0x3f, r0	; 63
    4482:	0f 90       	pop	r0
    4484:	1f 90       	pop	r1
    4486:	18 95       	reti

00004488 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    4488:	82 e0       	ldi	r24, 0x02	; 2
    448a:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    448c:	93 e0       	ldi	r25, 0x03	; 3
    448e:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    4490:	9d e7       	ldi	r25, 0x7D	; 125
    4492:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    4494:	80 93 6e 00 	sts	0x006E, r24
    4498:	08 95       	ret

0000449a <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    449a:	8f b7       	in	r24, 0x3f	; 63
    cli();
    449c:	f8 94       	cli
    t = timer_count;
    449e:	40 91 e6 02 	lds	r20, 0x02E6
    44a2:	50 91 e7 02 	lds	r21, 0x02E7
    44a6:	60 91 e8 02 	lds	r22, 0x02E8
    44aa:	70 91 e9 02 	lds	r23, 0x02E9
    SREG = sreg;
    44ae:	8f bf       	out	0x3f, r24	; 63

    return (t & 0xFFFF);
}
    44b0:	ca 01       	movw	r24, r20
    44b2:	08 95       	ret

000044b4 <timer_read32>:

inline
uint32_t timer_read32(void)
{
    44b4:	0f 93       	push	r16
    44b6:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    44b8:	8f b7       	in	r24, 0x3f	; 63
    cli();
    44ba:	f8 94       	cli
    t = timer_count;
    44bc:	00 91 e6 02 	lds	r16, 0x02E6
    44c0:	10 91 e7 02 	lds	r17, 0x02E7
    44c4:	20 91 e8 02 	lds	r18, 0x02E8
    44c8:	30 91 e9 02 	lds	r19, 0x02E9
    SREG = sreg;
    44cc:	8f bf       	out	0x3f, r24	; 63

    return t;
}
    44ce:	b8 01       	movw	r22, r16
    44d0:	c9 01       	movw	r24, r18
    44d2:	1f 91       	pop	r17
    44d4:	0f 91       	pop	r16
    44d6:	08 95       	ret

000044d8 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    44d8:	cf 92       	push	r12
    44da:	df 92       	push	r13
    44dc:	ef 92       	push	r14
    44de:	ff 92       	push	r15
    44e0:	0f 93       	push	r16
    44e2:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    44e4:	2f b7       	in	r18, 0x3f	; 63
    cli();
    44e6:	f8 94       	cli
    t = timer_count;
    44e8:	40 91 e6 02 	lds	r20, 0x02E6
    44ec:	50 91 e7 02 	lds	r21, 0x02E7
    44f0:	60 91 e8 02 	lds	r22, 0x02E8
    44f4:	70 91 e9 02 	lds	r23, 0x02E9
    SREG = sreg;
    44f8:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    44fa:	6a 01       	movw	r12, r20
    44fc:	7b 01       	movw	r14, r22
    44fe:	ee 24       	eor	r14, r14
    4500:	ff 24       	eor	r15, r15
    4502:	8c 01       	movw	r16, r24
    4504:	20 e0       	ldi	r18, 0x00	; 0
    4506:	30 e0       	ldi	r19, 0x00	; 0
    4508:	c0 16       	cp	r12, r16
    450a:	d1 06       	cpc	r13, r17
    450c:	e2 06       	cpc	r14, r18
    450e:	f3 06       	cpc	r15, r19
    4510:	20 f0       	brcs	.+8      	; 0x451a <timer_elapsed+0x42>
    4512:	9a 01       	movw	r18, r20
    4514:	28 1b       	sub	r18, r24
    4516:	39 0b       	sbc	r19, r25
    4518:	05 c0       	rjmp	.+10     	; 0x4524 <timer_elapsed+0x4c>
    451a:	9c 01       	movw	r18, r24
    451c:	20 95       	com	r18
    451e:	30 95       	com	r19
    4520:	24 0f       	add	r18, r20
    4522:	35 1f       	adc	r19, r21
}
    4524:	c9 01       	movw	r24, r18
    4526:	1f 91       	pop	r17
    4528:	0f 91       	pop	r16
    452a:	ff 90       	pop	r15
    452c:	ef 90       	pop	r14
    452e:	df 90       	pop	r13
    4530:	cf 90       	pop	r12
    4532:	08 95       	ret

00004534 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    4534:	1f 92       	push	r1
    4536:	0f 92       	push	r0
    4538:	0f b6       	in	r0, 0x3f	; 63
    453a:	0f 92       	push	r0
    453c:	11 24       	eor	r1, r1
    453e:	8f 93       	push	r24
    4540:	9f 93       	push	r25
    4542:	af 93       	push	r26
    4544:	bf 93       	push	r27
    timer_count++;
    4546:	80 91 e6 02 	lds	r24, 0x02E6
    454a:	90 91 e7 02 	lds	r25, 0x02E7
    454e:	a0 91 e8 02 	lds	r26, 0x02E8
    4552:	b0 91 e9 02 	lds	r27, 0x02E9
    4556:	01 96       	adiw	r24, 0x01	; 1
    4558:	a1 1d       	adc	r26, r1
    455a:	b1 1d       	adc	r27, r1
    455c:	80 93 e6 02 	sts	0x02E6, r24
    4560:	90 93 e7 02 	sts	0x02E7, r25
    4564:	a0 93 e8 02 	sts	0x02E8, r26
    4568:	b0 93 e9 02 	sts	0x02E9, r27
}
    456c:	bf 91       	pop	r27
    456e:	af 91       	pop	r26
    4570:	9f 91       	pop	r25
    4572:	8f 91       	pop	r24
    4574:	0f 90       	pop	r0
    4576:	0f be       	out	0x3f, r0	; 63
    4578:	0f 90       	pop	r0
    457a:	1f 90       	pop	r1
    457c:	18 95       	reti

0000457e <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    457e:	0e 94 70 11 	call	0x22e0	; 0x22e0 <USB_Disable>
    cli();
    4582:	f8 94       	cli
    4584:	2f ef       	ldi	r18, 0xFF	; 255
    4586:	83 ed       	ldi	r24, 0xD3	; 211
    4588:	90 e3       	ldi	r25, 0x30	; 48
    458a:	21 50       	subi	r18, 0x01	; 1
    458c:	80 40       	sbci	r24, 0x00	; 0
    458e:	90 40       	sbci	r25, 0x00	; 0
    4590:	e1 f7       	brne	.-8      	; 0x458a <bootloader_jump+0xc>
    4592:	00 c0       	rjmp	.+0      	; 0x4594 <bootloader_jump+0x16>
    4594:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    4596:	87 e0       	ldi	r24, 0x07	; 7
    4598:	90 eb       	ldi	r25, 0xB0	; 176
    459a:	dc 01       	movw	r26, r24
    459c:	80 93 03 03 	sts	0x0303, r24
    45a0:	90 93 04 03 	sts	0x0304, r25
    45a4:	a0 93 05 03 	sts	0x0305, r26
    45a8:	b0 93 06 03 	sts	0x0306, r27
    wdt_enable(WDTO_250MS);
    45ac:	2c e0       	ldi	r18, 0x0C	; 12
    45ae:	88 e1       	ldi	r24, 0x18	; 24
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	0f b6       	in	r0, 0x3f	; 63
    45b4:	f8 94       	cli
    45b6:	a8 95       	wdr
    45b8:	80 93 60 00 	sts	0x0060, r24
    45bc:	0f be       	out	0x3f, r0	; 63
    45be:	20 93 60 00 	sts	0x0060, r18
    45c2:	ff cf       	rjmp	.-2      	; 0x45c2 <bootloader_jump+0x44>

000045c4 <scan_keycode>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_keycode(uint8_t keycode)
{
    45c4:	af 92       	push	r10
    45c6:	bf 92       	push	r11
    45c8:	cf 92       	push	r12
    45ca:	df 92       	push	r13
    45cc:	ef 92       	push	r14
    45ce:	ff 92       	push	r15
    45d0:	cf 93       	push	r28
    45d2:	df 93       	push	r29
    45d4:	d8 2f       	mov	r29, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    45d6:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    45d8:	cc 24       	eor	r12, r12
    45da:	c3 94       	inc	r12
    45dc:	d1 2c       	mov	r13, r1
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    45de:	8c 2f       	mov	r24, r28
    45e0:	0e 94 56 0a 	call	0x14ac	; 0x14ac <matrix_get_row>
    45e4:	5c 01       	movw	r10, r24
    45e6:	e1 2c       	mov	r14, r1
    45e8:	f1 2c       	mov	r15, r1
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    45ea:	96 01       	movw	r18, r12
    45ec:	0e 2c       	mov	r0, r14
    45ee:	02 c0       	rjmp	.+4      	; 0x45f4 <scan_keycode+0x30>
    45f0:	22 0f       	add	r18, r18
    45f2:	33 1f       	adc	r19, r19
    45f4:	0a 94       	dec	r0
    45f6:	e2 f7       	brpl	.-8      	; 0x45f0 <scan_keycode+0x2c>
    45f8:	2a 21       	and	r18, r10
    45fa:	3b 21       	and	r19, r11
    45fc:	23 2b       	or	r18, r19
    45fe:	41 f4       	brne	.+16     	; 0x4610 <scan_keycode+0x4c>
    4600:	8f ef       	ldi	r24, 0xFF	; 255
    4602:	e8 1a       	sub	r14, r24
    4604:	f8 0a       	sbc	r15, r24

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    4606:	80 e1       	ldi	r24, 0x10	; 16
    4608:	e8 16       	cp	r14, r24
    460a:	f1 04       	cpc	r15, r1
    460c:	71 f7       	brne	.-36     	; 0x45ea <scan_keycode+0x26>
    460e:	08 c0       	rjmp	.+16     	; 0x4620 <scan_keycode+0x5c>
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    4610:	6e 2d       	mov	r22, r14
    4612:	7c 2f       	mov	r23, r28
    4614:	80 e0       	ldi	r24, 0x00	; 0
    4616:	0e 94 b9 08 	call	0x1172	; 0x1172 <keymap_key_to_keycode>
    461a:	d8 13       	cpse	r29, r24
    461c:	f1 cf       	rjmp	.-30     	; 0x4600 <scan_keycode+0x3c>
    461e:	05 c0       	rjmp	.+10     	; 0x462a <scan_keycode+0x66>
    }
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4620:	cf 5f       	subi	r28, 0xFF	; 255
    4622:	c8 30       	cpi	r28, 0x08	; 8
    4624:	e1 f6       	brne	.-72     	; 0x45de <scan_keycode+0x1a>
                    return true;
                }
            }
        }
    }
    return false;
    4626:	80 e0       	ldi	r24, 0x00	; 0
    4628:	01 c0       	rjmp	.+2      	; 0x462c <scan_keycode+0x68>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
                    return true;
    462a:	81 e0       	ldi	r24, 0x01	; 1
                }
            }
        }
    }
    return false;
}
    462c:	df 91       	pop	r29
    462e:	cf 91       	pop	r28
    4630:	ff 90       	pop	r15
    4632:	ef 90       	pop	r14
    4634:	df 90       	pop	r13
    4636:	cf 90       	pop	r12
    4638:	bf 90       	pop	r11
    463a:	af 90       	pop	r10
    463c:	08 95       	ret

0000463e <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    463e:	cf 93       	push	r28
    4640:	c8 2f       	mov	r28, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    4642:	8c e2       	ldi	r24, 0x2C	; 44
    4644:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <scan_keycode>
    4648:	88 23       	and	r24, r24
    464a:	21 f0       	breq	.+8      	; 0x4654 <bootmagic_scan_keycode+0x16>

    return scan_keycode(keycode);
    464c:	8c 2f       	mov	r24, r28
}
    464e:	cf 91       	pop	r28

bool bootmagic_scan_keycode(uint8_t keycode)
{
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;

    return scan_keycode(keycode);
    4650:	0c 94 e2 22 	jmp	0x45c4	; 0x45c4 <scan_keycode>
}
    4654:	80 e0       	ldi	r24, 0x00	; 0
    4656:	cf 91       	pop	r28
    4658:	08 95       	ret

0000465a <bootmagic>:
#include "bootmagic.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    465a:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    465c:	0e 94 73 24 	call	0x48e6	; 0x48e6 <eeconfig_is_enabled>
    4660:	81 11       	cpse	r24, r1
    4662:	02 c0       	rjmp	.+4      	; 0x4668 <bootmagic+0xe>
        eeconfig_init();
    4664:	0e 94 59 24 	call	0x48b2	; 0x48b2 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    4668:	89 ea       	ldi	r24, 0xA9	; 169
    466a:	96 e0       	ldi	r25, 0x06	; 6
    466c:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    4670:	c5 e6       	ldi	r28, 0x65	; 101
    4672:	08 c0       	rjmp	.+16     	; 0x4684 <bootmagic+0x2a>
    4674:	0e 94 14 09 	call	0x1228	; 0x1228 <matrix_scan>
    4678:	8f e1       	ldi	r24, 0x1F	; 31
    467a:	9e e4       	ldi	r25, 0x4E	; 78
    467c:	01 97       	sbiw	r24, 0x01	; 1
    467e:	f1 f7       	brne	.-4      	; 0x467c <bootmagic+0x22>
    4680:	00 c0       	rjmp	.+0      	; 0x4682 <bootmagic+0x28>
    4682:	00 00       	nop
    4684:	c1 50       	subi	r28, 0x01	; 1
    4686:	b1 f7       	brne	.-20     	; 0x4674 <bootmagic+0x1a>
    print("done.\n");
    4688:	8e eb       	ldi	r24, 0xBE	; 190
    468a:	96 e0       	ldi	r25, 0x06	; 6
    468c:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    4690:	89 e2       	ldi	r24, 0x29	; 41
    4692:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    4696:	81 11       	cpse	r24, r1
    4698:	0a c1       	rjmp	.+532    	; 0x48ae <bootmagic+0x254>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    469a:	8a e2       	ldi	r24, 0x2A	; 42
    469c:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    46a0:	81 11       	cpse	r24, r1
        eeconfig_init();
    46a2:	0e 94 59 24 	call	0x48b2	; 0x48b2 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    46a6:	85 e0       	ldi	r24, 0x05	; 5
    46a8:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    46ac:	81 11       	cpse	r24, r1
        bootloader_jump();
    46ae:	0e 94 bf 22 	call	0x457e	; 0x457e <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    46b2:	0e 94 7e 24 	call	0x48fc	; 0x48fc <eeconfig_read_debug>
    46b6:	80 93 e4 02 	sts	0x02E4, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    46ba:	87 e0       	ldi	r24, 0x07	; 7
    46bc:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    46c0:	88 23       	and	r24, r24
    46c2:	99 f1       	breq	.+102    	; 0x472a <bootmagic+0xd0>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    46c4:	8b e1       	ldi	r24, 0x1B	; 27
    46c6:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    46ca:	88 23       	and	r24, r24
    46cc:	51 f0       	breq	.+20     	; 0x46e2 <bootmagic+0x88>
            debug_config.matrix = !debug_config.matrix;
    46ce:	90 91 e4 02 	lds	r25, 0x02E4
    46d2:	91 fb       	bst	r25, 1
    46d4:	88 27       	eor	r24, r24
    46d6:	80 f9       	bld	r24, 0
    46d8:	21 e0       	ldi	r18, 0x01	; 1
    46da:	82 27       	eor	r24, r18
    46dc:	80 fb       	bst	r24, 0
    46de:	91 f9       	bld	r25, 1
    46e0:	22 c0       	rjmp	.+68     	; 0x4726 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    46e2:	8e e0       	ldi	r24, 0x0E	; 14
    46e4:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    46e8:	88 23       	and	r24, r24
    46ea:	51 f0       	breq	.+20     	; 0x4700 <bootmagic+0xa6>
            debug_config.keyboard = !debug_config.keyboard;
    46ec:	90 91 e4 02 	lds	r25, 0x02E4
    46f0:	92 fb       	bst	r25, 2
    46f2:	88 27       	eor	r24, r24
    46f4:	80 f9       	bld	r24, 0
    46f6:	21 e0       	ldi	r18, 0x01	; 1
    46f8:	82 27       	eor	r24, r18
    46fa:	80 fb       	bst	r24, 0
    46fc:	92 f9       	bld	r25, 2
    46fe:	13 c0       	rjmp	.+38     	; 0x4726 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    4700:	80 e1       	ldi	r24, 0x10	; 16
    4702:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    4706:	90 91 e4 02 	lds	r25, 0x02E4
    470a:	88 23       	and	r24, r24
    470c:	41 f0       	breq	.+16     	; 0x471e <bootmagic+0xc4>
            debug_config.mouse = !debug_config.mouse;
    470e:	93 fb       	bst	r25, 3
    4710:	88 27       	eor	r24, r24
    4712:	80 f9       	bld	r24, 0
    4714:	21 e0       	ldi	r18, 0x01	; 1
    4716:	82 27       	eor	r24, r18
    4718:	80 fb       	bst	r24, 0
    471a:	93 f9       	bld	r25, 3
    471c:	04 c0       	rjmp	.+8      	; 0x4726 <bootmagic+0xcc>
        } else {
            debug_config.enable = !debug_config.enable;
    471e:	89 2f       	mov	r24, r25
    4720:	80 95       	com	r24
    4722:	80 fb       	bst	r24, 0
    4724:	90 f9       	bld	r25, 0
    4726:	90 93 e4 02 	sts	0x02E4, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    472a:	80 91 e4 02 	lds	r24, 0x02E4
    472e:	0e 94 82 24 	call	0x4904	; 0x4904 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    4732:	0e 94 90 24 	call	0x4920	; 0x4920 <eeconfig_read_keymap>
    4736:	80 93 02 03 	sts	0x0302, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    473a:	80 ee       	ldi	r24, 0xE0	; 224
    473c:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    4740:	88 23       	and	r24, r24
    4742:	41 f0       	breq	.+16     	; 0x4754 <bootmagic+0xfa>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    4744:	80 91 02 03 	lds	r24, 0x0302
    4748:	98 2f       	mov	r25, r24
    474a:	90 95       	com	r25
    474c:	90 fb       	bst	r25, 0
    474e:	80 f9       	bld	r24, 0
    4750:	80 93 02 03 	sts	0x0302, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    4754:	89 e3       	ldi	r24, 0x39	; 57
    4756:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    475a:	88 23       	and	r24, r24
    475c:	59 f0       	breq	.+22     	; 0x4774 <bootmagic+0x11a>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    475e:	90 91 02 03 	lds	r25, 0x0302
    4762:	91 fb       	bst	r25, 1
    4764:	88 27       	eor	r24, r24
    4766:	80 f9       	bld	r24, 0
    4768:	21 e0       	ldi	r18, 0x01	; 1
    476a:	82 27       	eor	r24, r18
    476c:	80 fb       	bst	r24, 0
    476e:	91 f9       	bld	r25, 1
    4770:	90 93 02 03 	sts	0x0302, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    4774:	82 ee       	ldi	r24, 0xE2	; 226
    4776:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    477a:	88 23       	and	r24, r24
    477c:	59 f0       	breq	.+22     	; 0x4794 <bootmagic+0x13a>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    477e:	90 91 02 03 	lds	r25, 0x0302
    4782:	92 fb       	bst	r25, 2
    4784:	88 27       	eor	r24, r24
    4786:	80 f9       	bld	r24, 0
    4788:	21 e0       	ldi	r18, 0x01	; 1
    478a:	82 27       	eor	r24, r18
    478c:	80 fb       	bst	r24, 0
    478e:	92 f9       	bld	r25, 2
    4790:	90 93 02 03 	sts	0x0302, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    4794:	86 ee       	ldi	r24, 0xE6	; 230
    4796:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    479a:	88 23       	and	r24, r24
    479c:	59 f0       	breq	.+22     	; 0x47b4 <bootmagic+0x15a>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    479e:	90 91 02 03 	lds	r25, 0x0302
    47a2:	93 fb       	bst	r25, 3
    47a4:	88 27       	eor	r24, r24
    47a6:	80 f9       	bld	r24, 0
    47a8:	21 e0       	ldi	r18, 0x01	; 1
    47aa:	82 27       	eor	r24, r18
    47ac:	80 fb       	bst	r24, 0
    47ae:	93 f9       	bld	r25, 3
    47b0:	90 93 02 03 	sts	0x0302, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    47b4:	83 ee       	ldi	r24, 0xE3	; 227
    47b6:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    47ba:	88 23       	and	r24, r24
    47bc:	59 f0       	breq	.+22     	; 0x47d4 <bootmagic+0x17a>
        keymap_config.no_gui = !keymap_config.no_gui;
    47be:	90 91 02 03 	lds	r25, 0x0302
    47c2:	94 fb       	bst	r25, 4
    47c4:	88 27       	eor	r24, r24
    47c6:	80 f9       	bld	r24, 0
    47c8:	21 e0       	ldi	r18, 0x01	; 1
    47ca:	82 27       	eor	r24, r18
    47cc:	80 fb       	bst	r24, 0
    47ce:	94 f9       	bld	r25, 4
    47d0:	90 93 02 03 	sts	0x0302, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    47d4:	85 e3       	ldi	r24, 0x35	; 53
    47d6:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    47da:	88 23       	and	r24, r24
    47dc:	59 f0       	breq	.+22     	; 0x47f4 <bootmagic+0x19a>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    47de:	90 91 02 03 	lds	r25, 0x0302
    47e2:	95 fb       	bst	r25, 5
    47e4:	88 27       	eor	r24, r24
    47e6:	80 f9       	bld	r24, 0
    47e8:	21 e0       	ldi	r18, 0x01	; 1
    47ea:	82 27       	eor	r24, r18
    47ec:	80 fb       	bst	r24, 0
    47ee:	95 f9       	bld	r25, 5
    47f0:	90 93 02 03 	sts	0x0302, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    47f4:	81 e3       	ldi	r24, 0x31	; 49
    47f6:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    47fa:	88 23       	and	r24, r24
    47fc:	59 f0       	breq	.+22     	; 0x4814 <bootmagic+0x1ba>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    47fe:	90 91 02 03 	lds	r25, 0x0302
    4802:	96 fb       	bst	r25, 6
    4804:	88 27       	eor	r24, r24
    4806:	80 f9       	bld	r24, 0
    4808:	21 e0       	ldi	r18, 0x01	; 1
    480a:	82 27       	eor	r24, r18
    480c:	80 fb       	bst	r24, 0
    480e:	96 f9       	bld	r25, 6
    4810:	90 93 02 03 	sts	0x0302, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    4814:	81 e1       	ldi	r24, 0x11	; 17
    4816:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    481a:	88 23       	and	r24, r24
    481c:	59 f0       	breq	.+22     	; 0x4834 <bootmagic+0x1da>
        keymap_config.nkro = !keymap_config.nkro;
    481e:	90 91 02 03 	lds	r25, 0x0302
    4822:	97 fb       	bst	r25, 7
    4824:	88 27       	eor	r24, r24
    4826:	80 f9       	bld	r24, 0
    4828:	21 e0       	ldi	r18, 0x01	; 1
    482a:	82 27       	eor	r24, r18
    482c:	80 fb       	bst	r24, 0
    482e:	97 f9       	bld	r25, 7
    4830:	90 93 02 03 	sts	0x0302, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    4834:	80 91 02 03 	lds	r24, 0x0302
    4838:	0e 94 94 24 	call	0x4928	; 0x4928 <eeconfig_write_keymap>
    keyboard_nkro = keymap_config.nkro;
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    483c:	87 e2       	ldi	r24, 0x27	; 39
    483e:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    4842:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4844:	8e e1       	ldi	r24, 0x1E	; 30
    4846:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    484a:	81 11       	cpse	r24, r1
    484c:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    484e:	8f e1       	ldi	r24, 0x1F	; 31
    4850:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    4854:	81 11       	cpse	r24, r1
    4856:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    4858:	80 e2       	ldi	r24, 0x20	; 32
    485a:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    485e:	81 11       	cpse	r24, r1
    4860:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    4862:	81 e2       	ldi	r24, 0x21	; 33
    4864:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    4868:	81 11       	cpse	r24, r1
    486a:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    486c:	82 e2       	ldi	r24, 0x22	; 34
    486e:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    4872:	81 11       	cpse	r24, r1
    4874:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4876:	83 e2       	ldi	r24, 0x23	; 35
    4878:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    487c:	81 11       	cpse	r24, r1
    487e:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    4880:	84 e2       	ldi	r24, 0x24	; 36
    4882:	0e 94 1f 23 	call	0x463e	; 0x463e <bootmagic_scan_keycode>
    4886:	88 23       	and	r24, r24
    4888:	11 f0       	breq	.+4      	; 0x488e <bootmagic+0x234>
    488a:	c0 68       	ori	r28, 0x80	; 128
    488c:	02 c0       	rjmp	.+4      	; 0x4892 <bootmagic+0x238>
    if (default_layer) {
    488e:	cc 23       	and	r28, r28
    4890:	29 f0       	breq	.+10     	; 0x489c <bootmagic+0x242>
        eeconfig_write_default_layer(default_layer);
    4892:	8c 2f       	mov	r24, r28
    4894:	0e 94 8b 24 	call	0x4916	; 0x4916 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4898:	6c 2f       	mov	r22, r28
    489a:	03 c0       	rjmp	.+6      	; 0x48a2 <bootmagic+0x248>
    } else {
        default_layer = eeconfig_read_default_layer();
    489c:	0e 94 87 24 	call	0x490e	; 0x490e <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    48a0:	68 2f       	mov	r22, r24
    48a2:	70 e0       	ldi	r23, 0x00	; 0
    48a4:	80 e0       	ldi	r24, 0x00	; 0
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    48a8:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    48aa:	0c 94 a9 1e 	jmp	0x3d52	; 0x3d52 <default_layer_set>
    }
}
    48ae:	cf 91       	pop	r28
    48b0:	08 95       	ret

000048b2 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    48b2:	6d ee       	ldi	r22, 0xED	; 237
    48b4:	7e ef       	ldi	r23, 0xFE	; 254
    48b6:	80 e0       	ldi	r24, 0x00	; 0
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	0e 94 b0 2d 	call	0x5b60	; 0x5b60 <__eewr_word_usb1286>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    48be:	60 e0       	ldi	r22, 0x00	; 0
    48c0:	82 e0       	ldi	r24, 0x02	; 2
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__eewr_byte_usb1286>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    48c8:	60 e0       	ldi	r22, 0x00	; 0
    48ca:	83 e0       	ldi	r24, 0x03	; 3
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__eewr_byte_usb1286>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    48d2:	60 e0       	ldi	r22, 0x00	; 0
    48d4:	84 e0       	ldi	r24, 0x04	; 4
    48d6:	90 e0       	ldi	r25, 0x00	; 0
    48d8:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__eewr_byte_usb1286>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    48dc:	60 e0       	ldi	r22, 0x00	; 0
    48de:	85 e0       	ldi	r24, 0x05	; 5
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	0c 94 a2 2d 	jmp	0x5b44	; 0x5b44 <__eewr_byte_usb1286>

000048e6 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    48e6:	80 e0       	ldi	r24, 0x00	; 0
    48e8:	90 e0       	ldi	r25, 0x00	; 0
    48ea:	0e 94 9c 2d 	call	0x5b38	; 0x5b38 <__eerd_word_usb1286>
    48ee:	21 e0       	ldi	r18, 0x01	; 1
    48f0:	8d 3e       	cpi	r24, 0xED	; 237
    48f2:	9e 4f       	sbci	r25, 0xFE	; 254
    48f4:	09 f0       	breq	.+2      	; 0x48f8 <eeconfig_is_enabled+0x12>
    48f6:	20 e0       	ldi	r18, 0x00	; 0
}
    48f8:	82 2f       	mov	r24, r18
    48fa:	08 95       	ret

000048fc <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    48fc:	82 e0       	ldi	r24, 0x02	; 2
    48fe:	90 e0       	ldi	r25, 0x00	; 0
    4900:	0c 94 94 2d 	jmp	0x5b28	; 0x5b28 <__eerd_byte_usb1286>

00004904 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4904:	68 2f       	mov	r22, r24
    4906:	82 e0       	ldi	r24, 0x02	; 2
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	0c 94 a2 2d 	jmp	0x5b44	; 0x5b44 <__eewr_byte_usb1286>

0000490e <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    490e:	83 e0       	ldi	r24, 0x03	; 3
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	0c 94 94 2d 	jmp	0x5b28	; 0x5b28 <__eerd_byte_usb1286>

00004916 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4916:	68 2f       	mov	r22, r24
    4918:	83 e0       	ldi	r24, 0x03	; 3
    491a:	90 e0       	ldi	r25, 0x00	; 0
    491c:	0c 94 a2 2d 	jmp	0x5b44	; 0x5b44 <__eewr_byte_usb1286>

00004920 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4920:	84 e0       	ldi	r24, 0x04	; 4
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	0c 94 94 2d 	jmp	0x5b28	; 0x5b28 <__eerd_byte_usb1286>

00004928 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4928:	68 2f       	mov	r22, r24
    492a:	84 e0       	ldi	r24, 0x04	; 4
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	0c 94 a2 2d 	jmp	0x5b44	; 0x5b44 <__eewr_byte_usb1286>

00004932 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4932:	80 91 f2 02 	lds	r24, 0x02F2
    4936:	80 ff       	sbrs	r24, 0
    4938:	0b c0       	rjmp	.+22     	; 0x4950 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    493a:	60 91 1b 01 	lds	r22, 0x011B
    493e:	85 e0       	ldi	r24, 0x05	; 5
    4940:	68 9f       	mul	r22, r24
    4942:	b0 01       	movw	r22, r0
    4944:	11 24       	eor	r1, r1
    4946:	75 95       	asr	r23
    4948:	67 95       	ror	r22
    494a:	75 95       	asr	r23
    494c:	67 95       	ror	r22
    494e:	2a c0       	rjmp	.+84     	; 0x49a4 <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    4950:	81 ff       	sbrs	r24, 1
    4952:	09 c0       	rjmp	.+18     	; 0x4966 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4954:	60 91 1b 01 	lds	r22, 0x011B
    4958:	85 e0       	ldi	r24, 0x05	; 5
    495a:	68 9f       	mul	r22, r24
    495c:	b0 01       	movw	r22, r0
    495e:	11 24       	eor	r1, r1
    4960:	75 95       	asr	r23
    4962:	67 95       	ror	r22
    4964:	1f c0       	rjmp	.+62     	; 0x49a4 <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    4966:	82 ff       	sbrs	r24, 2
    4968:	07 c0       	rjmp	.+14     	; 0x4978 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    496a:	60 91 1b 01 	lds	r22, 0x011B
    496e:	85 e0       	ldi	r24, 0x05	; 5
    4970:	68 9f       	mul	r22, r24
    4972:	b0 01       	movw	r22, r0
    4974:	11 24       	eor	r1, r1
    4976:	16 c0       	rjmp	.+44     	; 0x49a4 <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    4978:	40 91 ec 02 	lds	r20, 0x02EC
    497c:	44 23       	and	r20, r20
    497e:	c9 f0       	breq	.+50     	; 0x49b2 <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    4980:	60 91 1a 01 	lds	r22, 0x011A
    4984:	46 17       	cp	r20, r22
    4986:	88 f7       	brcc	.-30     	; 0x496a <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4988:	20 91 1b 01 	lds	r18, 0x011B
    498c:	85 e0       	ldi	r24, 0x05	; 5
    498e:	28 9f       	mul	r18, r24
    4990:	90 01       	movw	r18, r0
    4992:	11 24       	eor	r1, r1
    4994:	42 9f       	mul	r20, r18
    4996:	c0 01       	movw	r24, r0
    4998:	43 9f       	mul	r20, r19
    499a:	90 0d       	add	r25, r0
    499c:	11 24       	eor	r1, r1
    499e:	70 e0       	ldi	r23, 0x00	; 0
    49a0:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    49a4:	60 38       	cpi	r22, 0x80	; 128
    49a6:	71 05       	cpc	r23, r1
    49a8:	40 f4       	brcc	.+16     	; 0x49ba <move_unit+0x88>
    49aa:	61 15       	cp	r22, r1
    49ac:	71 05       	cpc	r23, r1
    49ae:	39 f0       	breq	.+14     	; 0x49be <move_unit+0x8c>
    49b0:	02 c0       	rjmp	.+4      	; 0x49b6 <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    49b2:	65 e0       	ldi	r22, 0x05	; 5
    49b4:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    49b6:	86 2f       	mov	r24, r22
    49b8:	08 95       	ret
    49ba:	8f e7       	ldi	r24, 0x7F	; 127
    49bc:	08 95       	ret
    49be:	81 e0       	ldi	r24, 0x01	; 1
}
    49c0:	08 95       	ret

000049c2 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    49c2:	80 91 f2 02 	lds	r24, 0x02F2
    49c6:	80 ff       	sbrs	r24, 0
    49c8:	08 c0       	rjmp	.+16     	; 0x49da <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    49ca:	60 91 19 01 	lds	r22, 0x0119
    49ce:	70 e0       	ldi	r23, 0x00	; 0
    49d0:	75 95       	asr	r23
    49d2:	67 95       	ror	r22
    49d4:	75 95       	asr	r23
    49d6:	67 95       	ror	r22
    49d8:	21 c0       	rjmp	.+66     	; 0x4a1c <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    49da:	81 ff       	sbrs	r24, 1
    49dc:	06 c0       	rjmp	.+12     	; 0x49ea <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    49de:	60 91 19 01 	lds	r22, 0x0119
    49e2:	70 e0       	ldi	r23, 0x00	; 0
    49e4:	75 95       	asr	r23
    49e6:	67 95       	ror	r22
    49e8:	19 c0       	rjmp	.+50     	; 0x4a1c <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    49ea:	82 ff       	sbrs	r24, 2
    49ec:	04 c0       	rjmp	.+8      	; 0x49f6 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    49ee:	60 91 19 01 	lds	r22, 0x0119
    49f2:	70 e0       	ldi	r23, 0x00	; 0
    49f4:	10 c0       	rjmp	.+32     	; 0x4a16 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    49f6:	80 91 ec 02 	lds	r24, 0x02EC
    49fa:	88 23       	and	r24, r24
    49fc:	c1 f0       	breq	.+48     	; 0x4a2e <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    49fe:	60 91 18 01 	lds	r22, 0x0118
    4a02:	86 17       	cp	r24, r22
    4a04:	a0 f7       	brcc	.-24     	; 0x49ee <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4a06:	90 91 19 01 	lds	r25, 0x0119
    4a0a:	98 9f       	mul	r25, r24
    4a0c:	c0 01       	movw	r24, r0
    4a0e:	11 24       	eor	r1, r1
    4a10:	70 e0       	ldi	r23, 0x00	; 0
    4a12:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4a16:	60 38       	cpi	r22, 0x80	; 128
    4a18:	71 05       	cpc	r23, r1
    4a1a:	28 f4       	brcc	.+10     	; 0x4a26 <wheel_unit+0x64>
    4a1c:	61 15       	cp	r22, r1
    4a1e:	71 05       	cpc	r23, r1
    4a20:	21 f0       	breq	.+8      	; 0x4a2a <wheel_unit+0x68>
    4a22:	86 2f       	mov	r24, r22
    4a24:	08 95       	ret
    4a26:	8f e7       	ldi	r24, 0x7F	; 127
    4a28:	08 95       	ret
    4a2a:	81 e0       	ldi	r24, 0x01	; 1
    4a2c:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    4a2e:	61 e0       	ldi	r22, 0x01	; 1
    4a30:	70 e0       	ldi	r23, 0x00	; 0
    4a32:	f4 cf       	rjmp	.-24     	; 0x4a1c <wheel_unit+0x5a>

00004a34 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4a34:	80 3f       	cpi	r24, 0xF0	; 240
    4a36:	21 f4       	brne	.+8      	; 0x4a40 <mousekey_on+0xc>
    4a38:	0e 94 99 24 	call	0x4932	; 0x4932 <move_unit>
    4a3c:	81 95       	neg	r24
    4a3e:	04 c0       	rjmp	.+8      	; 0x4a48 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4a40:	81 3f       	cpi	r24, 0xF1	; 241
    4a42:	29 f4       	brne	.+10     	; 0x4a4e <mousekey_on+0x1a>
    4a44:	0e 94 99 24 	call	0x4932	; 0x4932 <move_unit>
    4a48:	80 93 ef 02 	sts	0x02EF, r24
    4a4c:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4a4e:	82 3f       	cpi	r24, 0xF2	; 242
    4a50:	21 f4       	brne	.+8      	; 0x4a5a <mousekey_on+0x26>
    4a52:	0e 94 99 24 	call	0x4932	; 0x4932 <move_unit>
    4a56:	81 95       	neg	r24
    4a58:	04 c0       	rjmp	.+8      	; 0x4a62 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4a5a:	83 3f       	cpi	r24, 0xF3	; 243
    4a5c:	29 f4       	brne	.+10     	; 0x4a68 <mousekey_on+0x34>
    4a5e:	0e 94 99 24 	call	0x4932	; 0x4932 <move_unit>
    4a62:	80 93 ee 02 	sts	0x02EE, r24
    4a66:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4a68:	89 3f       	cpi	r24, 0xF9	; 249
    4a6a:	19 f4       	brne	.+6      	; 0x4a72 <mousekey_on+0x3e>
    4a6c:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <wheel_unit>
    4a70:	05 c0       	rjmp	.+10     	; 0x4a7c <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4a72:	8a 3f       	cpi	r24, 0xFA	; 250
    4a74:	31 f4       	brne	.+12     	; 0x4a82 <mousekey_on+0x4e>
    4a76:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <wheel_unit>
    4a7a:	81 95       	neg	r24
    4a7c:	80 93 f0 02 	sts	0x02F0, r24
    4a80:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4a82:	8b 3f       	cpi	r24, 0xFB	; 251
    4a84:	21 f4       	brne	.+8      	; 0x4a8e <mousekey_on+0x5a>
    4a86:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <wheel_unit>
    4a8a:	81 95       	neg	r24
    4a8c:	04 c0       	rjmp	.+8      	; 0x4a96 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    4a8e:	8c 3f       	cpi	r24, 0xFC	; 252
    4a90:	29 f4       	brne	.+10     	; 0x4a9c <mousekey_on+0x68>
    4a92:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <wheel_unit>
    4a96:	80 93 f1 02 	sts	0x02F1, r24
    4a9a:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4a9c:	84 3f       	cpi	r24, 0xF4	; 244
    4a9e:	21 f4       	brne	.+8      	; 0x4aa8 <mousekey_on+0x74>
    4aa0:	80 91 ed 02 	lds	r24, 0x02ED
    4aa4:	81 60       	ori	r24, 0x01	; 1
    4aa6:	17 c0       	rjmp	.+46     	; 0x4ad6 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4aa8:	85 3f       	cpi	r24, 0xF5	; 245
    4aaa:	21 f4       	brne	.+8      	; 0x4ab4 <mousekey_on+0x80>
    4aac:	80 91 ed 02 	lds	r24, 0x02ED
    4ab0:	82 60       	ori	r24, 0x02	; 2
    4ab2:	11 c0       	rjmp	.+34     	; 0x4ad6 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4ab4:	86 3f       	cpi	r24, 0xF6	; 246
    4ab6:	21 f4       	brne	.+8      	; 0x4ac0 <mousekey_on+0x8c>
    4ab8:	80 91 ed 02 	lds	r24, 0x02ED
    4abc:	84 60       	ori	r24, 0x04	; 4
    4abe:	0b c0       	rjmp	.+22     	; 0x4ad6 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4ac0:	87 3f       	cpi	r24, 0xF7	; 247
    4ac2:	21 f4       	brne	.+8      	; 0x4acc <mousekey_on+0x98>
    4ac4:	80 91 ed 02 	lds	r24, 0x02ED
    4ac8:	88 60       	ori	r24, 0x08	; 8
    4aca:	05 c0       	rjmp	.+10     	; 0x4ad6 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4acc:	88 3f       	cpi	r24, 0xF8	; 248
    4ace:	31 f4       	brne	.+12     	; 0x4adc <mousekey_on+0xa8>
    4ad0:	80 91 ed 02 	lds	r24, 0x02ED
    4ad4:	80 61       	ori	r24, 0x10	; 16
    4ad6:	80 93 ed 02 	sts	0x02ED, r24
    4ada:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4adc:	8d 3f       	cpi	r24, 0xFD	; 253
    4ade:	21 f4       	brne	.+8      	; 0x4ae8 <mousekey_on+0xb4>
    4ae0:	80 91 f2 02 	lds	r24, 0x02F2
    4ae4:	81 60       	ori	r24, 0x01	; 1
    4ae6:	0b c0       	rjmp	.+22     	; 0x4afe <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4ae8:	8e 3f       	cpi	r24, 0xFE	; 254
    4aea:	21 f4       	brne	.+8      	; 0x4af4 <mousekey_on+0xc0>
    4aec:	80 91 f2 02 	lds	r24, 0x02F2
    4af0:	82 60       	ori	r24, 0x02	; 2
    4af2:	05 c0       	rjmp	.+10     	; 0x4afe <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4af4:	8f 3f       	cpi	r24, 0xFF	; 255
    4af6:	29 f4       	brne	.+10     	; 0x4b02 <mousekey_on+0xce>
    4af8:	80 91 f2 02 	lds	r24, 0x02F2
    4afc:	84 60       	ori	r24, 0x04	; 4
    4afe:	80 93 f2 02 	sts	0x02F2, r24
    4b02:	08 95       	ret

00004b04 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4b04:	80 3f       	cpi	r24, 0xF0	; 240
    4b06:	29 f4       	brne	.+10     	; 0x4b12 <mousekey_off+0xe>
    4b08:	80 91 ef 02 	lds	r24, 0x02EF
    4b0c:	87 ff       	sbrs	r24, 7
    4b0e:	6e c0       	rjmp	.+220    	; 0x4bec <mousekey_off+0xe8>
    4b10:	07 c0       	rjmp	.+14     	; 0x4b20 <mousekey_off+0x1c>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4b12:	81 3f       	cpi	r24, 0xF1	; 241
    4b14:	41 f4       	brne	.+16     	; 0x4b26 <mousekey_off+0x22>
    4b16:	80 91 ef 02 	lds	r24, 0x02EF
    4b1a:	18 16       	cp	r1, r24
    4b1c:	0c f0       	brlt	.+2      	; 0x4b20 <mousekey_off+0x1c>
    4b1e:	66 c0       	rjmp	.+204    	; 0x4bec <mousekey_off+0xe8>
    4b20:	10 92 ef 02 	sts	0x02EF, r1
    4b24:	63 c0       	rjmp	.+198    	; 0x4bec <mousekey_off+0xe8>
    4b26:	90 91 ee 02 	lds	r25, 0x02EE
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4b2a:	82 3f       	cpi	r24, 0xF2	; 242
    4b2c:	19 f4       	brne	.+6      	; 0x4b34 <mousekey_off+0x30>
    4b2e:	97 ff       	sbrs	r25, 7
    4b30:	5d c0       	rjmp	.+186    	; 0x4bec <mousekey_off+0xe8>
    4b32:	05 c0       	rjmp	.+10     	; 0x4b3e <mousekey_off+0x3a>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4b34:	83 3f       	cpi	r24, 0xF3	; 243
    4b36:	31 f4       	brne	.+12     	; 0x4b44 <mousekey_off+0x40>
    4b38:	19 16       	cp	r1, r25
    4b3a:	0c f0       	brlt	.+2      	; 0x4b3e <mousekey_off+0x3a>
    4b3c:	57 c0       	rjmp	.+174    	; 0x4bec <mousekey_off+0xe8>
    4b3e:	10 92 ee 02 	sts	0x02EE, r1
    4b42:	54 c0       	rjmp	.+168    	; 0x4bec <mousekey_off+0xe8>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4b44:	89 3f       	cpi	r24, 0xF9	; 249
    4b46:	31 f4       	brne	.+12     	; 0x4b54 <mousekey_off+0x50>
    4b48:	80 91 f0 02 	lds	r24, 0x02F0
    4b4c:	18 16       	cp	r1, r24
    4b4e:	0c f0       	brlt	.+2      	; 0x4b52 <mousekey_off+0x4e>
    4b50:	4d c0       	rjmp	.+154    	; 0x4bec <mousekey_off+0xe8>
    4b52:	06 c0       	rjmp	.+12     	; 0x4b60 <mousekey_off+0x5c>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4b54:	8a 3f       	cpi	r24, 0xFA	; 250
    4b56:	39 f4       	brne	.+14     	; 0x4b66 <mousekey_off+0x62>
    4b58:	80 91 f0 02 	lds	r24, 0x02F0
    4b5c:	87 ff       	sbrs	r24, 7
    4b5e:	46 c0       	rjmp	.+140    	; 0x4bec <mousekey_off+0xe8>
    4b60:	10 92 f0 02 	sts	0x02F0, r1
    4b64:	43 c0       	rjmp	.+134    	; 0x4bec <mousekey_off+0xe8>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4b66:	8b 3f       	cpi	r24, 0xFB	; 251
    4b68:	29 f4       	brne	.+10     	; 0x4b74 <mousekey_off+0x70>
    4b6a:	80 91 f1 02 	lds	r24, 0x02F1
    4b6e:	87 ff       	sbrs	r24, 7
    4b70:	3d c0       	rjmp	.+122    	; 0x4bec <mousekey_off+0xe8>
    4b72:	06 c0       	rjmp	.+12     	; 0x4b80 <mousekey_off+0x7c>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4b74:	8c 3f       	cpi	r24, 0xFC	; 252
    4b76:	39 f4       	brne	.+14     	; 0x4b86 <mousekey_off+0x82>
    4b78:	80 91 f1 02 	lds	r24, 0x02F1
    4b7c:	18 16       	cp	r1, r24
    4b7e:	b4 f5       	brge	.+108    	; 0x4bec <mousekey_off+0xe8>
    4b80:	10 92 f1 02 	sts	0x02F1, r1
    4b84:	33 c0       	rjmp	.+102    	; 0x4bec <mousekey_off+0xe8>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4b86:	84 3f       	cpi	r24, 0xF4	; 244
    4b88:	21 f4       	brne	.+8      	; 0x4b92 <mousekey_off+0x8e>
    4b8a:	80 91 ed 02 	lds	r24, 0x02ED
    4b8e:	8e 7f       	andi	r24, 0xFE	; 254
    4b90:	05 c0       	rjmp	.+10     	; 0x4b9c <mousekey_off+0x98>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4b92:	85 3f       	cpi	r24, 0xF5	; 245
    4b94:	31 f4       	brne	.+12     	; 0x4ba2 <mousekey_off+0x9e>
    4b96:	80 91 ed 02 	lds	r24, 0x02ED
    4b9a:	8d 7f       	andi	r24, 0xFD	; 253
    4b9c:	80 93 ed 02 	sts	0x02ED, r24
    4ba0:	25 c0       	rjmp	.+74     	; 0x4bec <mousekey_off+0xe8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4ba2:	86 3f       	cpi	r24, 0xF6	; 246
    4ba4:	21 f4       	brne	.+8      	; 0x4bae <mousekey_off+0xaa>
    4ba6:	80 91 ed 02 	lds	r24, 0x02ED
    4baa:	8b 7f       	andi	r24, 0xFB	; 251
    4bac:	f7 cf       	rjmp	.-18     	; 0x4b9c <mousekey_off+0x98>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4bae:	87 3f       	cpi	r24, 0xF7	; 247
    4bb0:	21 f4       	brne	.+8      	; 0x4bba <mousekey_off+0xb6>
    4bb2:	80 91 ed 02 	lds	r24, 0x02ED
    4bb6:	87 7f       	andi	r24, 0xF7	; 247
    4bb8:	f1 cf       	rjmp	.-30     	; 0x4b9c <mousekey_off+0x98>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4bba:	88 3f       	cpi	r24, 0xF8	; 248
    4bbc:	21 f4       	brne	.+8      	; 0x4bc6 <mousekey_off+0xc2>
    4bbe:	80 91 ed 02 	lds	r24, 0x02ED
    4bc2:	8f 7e       	andi	r24, 0xEF	; 239
    4bc4:	eb cf       	rjmp	.-42     	; 0x4b9c <mousekey_off+0x98>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4bc6:	8d 3f       	cpi	r24, 0xFD	; 253
    4bc8:	21 f4       	brne	.+8      	; 0x4bd2 <mousekey_off+0xce>
    4bca:	80 91 f2 02 	lds	r24, 0x02F2
    4bce:	8e 7f       	andi	r24, 0xFE	; 254
    4bd0:	0b c0       	rjmp	.+22     	; 0x4be8 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4bd2:	8e 3f       	cpi	r24, 0xFE	; 254
    4bd4:	21 f4       	brne	.+8      	; 0x4bde <mousekey_off+0xda>
    4bd6:	80 91 f2 02 	lds	r24, 0x02F2
    4bda:	8d 7f       	andi	r24, 0xFD	; 253
    4bdc:	05 c0       	rjmp	.+10     	; 0x4be8 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4bde:	8f 3f       	cpi	r24, 0xFF	; 255
    4be0:	29 f4       	brne	.+10     	; 0x4bec <mousekey_off+0xe8>
    4be2:	80 91 f2 02 	lds	r24, 0x02F2
    4be6:	8b 7f       	andi	r24, 0xFB	; 251
    4be8:	80 93 f2 02 	sts	0x02F2, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4bec:	80 91 ee 02 	lds	r24, 0x02EE
    4bf0:	81 11       	cpse	r24, r1
    4bf2:	0e c0       	rjmp	.+28     	; 0x4c10 <mousekey_off+0x10c>
    4bf4:	80 91 ef 02 	lds	r24, 0x02EF
    4bf8:	81 11       	cpse	r24, r1
    4bfa:	0a c0       	rjmp	.+20     	; 0x4c10 <mousekey_off+0x10c>
    4bfc:	80 91 f0 02 	lds	r24, 0x02F0
    4c00:	81 11       	cpse	r24, r1
    4c02:	06 c0       	rjmp	.+12     	; 0x4c10 <mousekey_off+0x10c>
    4c04:	80 91 f1 02 	lds	r24, 0x02F1
    4c08:	81 11       	cpse	r24, r1
    4c0a:	02 c0       	rjmp	.+4      	; 0x4c10 <mousekey_off+0x10c>
        mousekey_repeat = 0;
    4c0c:	10 92 ec 02 	sts	0x02EC, r1
    4c10:	08 95       	ret

00004c12 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4c12:	80 91 e4 02 	lds	r24, 0x02E4
    4c16:	83 ff       	sbrs	r24, 3
    4c18:	7e c0       	rjmp	.+252    	; 0x4d16 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4c1a:	85 ec       	ldi	r24, 0xC5	; 197
    4c1c:	96 e0       	ldi	r25, 0x06	; 6
    4c1e:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    phex(mouse_report.buttons); print("|");
    4c22:	80 91 ed 02 	lds	r24, 0x02ED
    4c26:	1f 92       	push	r1
    4c28:	8f 93       	push	r24
    4c2a:	88 ee       	ldi	r24, 0xE8	; 232
    4c2c:	96 e0       	ldi	r25, 0x06	; 6
    4c2e:	9f 93       	push	r25
    4c30:	8f 93       	push	r24
    4c32:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    4c36:	8d ee       	ldi	r24, 0xED	; 237
    4c38:	96 e0       	ldi	r25, 0x06	; 6
    4c3a:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print_decs(mouse_report.x); print(" ");
    4c3e:	20 91 ee 02 	lds	r18, 0x02EE
    4c42:	82 2f       	mov	r24, r18
    4c44:	99 27       	eor	r25, r25
    4c46:	87 fd       	sbrc	r24, 7
    4c48:	90 95       	com	r25
    4c4a:	9f 93       	push	r25
    4c4c:	2f 93       	push	r18
    4c4e:	8f ee       	ldi	r24, 0xEF	; 239
    4c50:	96 e0       	ldi	r25, 0x06	; 6
    4c52:	9f 93       	push	r25
    4c54:	8f 93       	push	r24
    4c56:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    4c5a:	82 ef       	ldi	r24, 0xF2	; 242
    4c5c:	96 e0       	ldi	r25, 0x06	; 6
    4c5e:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print_decs(mouse_report.y); print(" ");
    4c62:	20 91 ef 02 	lds	r18, 0x02EF
    4c66:	82 2f       	mov	r24, r18
    4c68:	99 27       	eor	r25, r25
    4c6a:	87 fd       	sbrc	r24, 7
    4c6c:	90 95       	com	r25
    4c6e:	9f 93       	push	r25
    4c70:	2f 93       	push	r18
    4c72:	84 ef       	ldi	r24, 0xF4	; 244
    4c74:	96 e0       	ldi	r25, 0x06	; 6
    4c76:	9f 93       	push	r25
    4c78:	8f 93       	push	r24
    4c7a:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    4c7e:	87 ef       	ldi	r24, 0xF7	; 247
    4c80:	96 e0       	ldi	r25, 0x06	; 6
    4c82:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print_decs(mouse_report.v); print(" ");
    4c86:	20 91 f0 02 	lds	r18, 0x02F0
    4c8a:	82 2f       	mov	r24, r18
    4c8c:	99 27       	eor	r25, r25
    4c8e:	87 fd       	sbrc	r24, 7
    4c90:	90 95       	com	r25
    4c92:	9f 93       	push	r25
    4c94:	2f 93       	push	r18
    4c96:	89 ef       	ldi	r24, 0xF9	; 249
    4c98:	96 e0       	ldi	r25, 0x06	; 6
    4c9a:	9f 93       	push	r25
    4c9c:	8f 93       	push	r24
    4c9e:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    4ca2:	8c ef       	ldi	r24, 0xFC	; 252
    4ca4:	96 e0       	ldi	r25, 0x06	; 6
    4ca6:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print_decs(mouse_report.h); print("](");
    4caa:	20 91 f1 02 	lds	r18, 0x02F1
    4cae:	82 2f       	mov	r24, r18
    4cb0:	99 27       	eor	r25, r25
    4cb2:	87 fd       	sbrc	r24, 7
    4cb4:	90 95       	com	r25
    4cb6:	9f 93       	push	r25
    4cb8:	2f 93       	push	r18
    4cba:	8e ef       	ldi	r24, 0xFE	; 254
    4cbc:	96 e0       	ldi	r25, 0x06	; 6
    4cbe:	9f 93       	push	r25
    4cc0:	8f 93       	push	r24
    4cc2:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    4cc6:	81 e0       	ldi	r24, 0x01	; 1
    4cc8:	97 e0       	ldi	r25, 0x07	; 7
    4cca:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print_dec(mousekey_repeat); print("/");
    4cce:	80 91 ec 02 	lds	r24, 0x02EC
    4cd2:	1f 92       	push	r1
    4cd4:	8f 93       	push	r24
    4cd6:	84 e0       	ldi	r24, 0x04	; 4
    4cd8:	97 e0       	ldi	r25, 0x07	; 7
    4cda:	9f 93       	push	r25
    4cdc:	8f 93       	push	r24
    4cde:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    4ce2:	87 e0       	ldi	r24, 0x07	; 7
    4ce4:	97 e0       	ldi	r25, 0x07	; 7
    4ce6:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print_dec(mousekey_accel); print(")\n");
    4cea:	80 91 f2 02 	lds	r24, 0x02F2
    4cee:	1f 92       	push	r1
    4cf0:	8f 93       	push	r24
    4cf2:	89 e0       	ldi	r24, 0x09	; 9
    4cf4:	97 e0       	ldi	r25, 0x07	; 7
    4cf6:	9f 93       	push	r25
    4cf8:	8f 93       	push	r24
    4cfa:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    4cfe:	8c e0       	ldi	r24, 0x0C	; 12
    4d00:	97 e0       	ldi	r25, 0x07	; 7
    4d02:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    4d06:	8d b7       	in	r24, 0x3d	; 61
    4d08:	9e b7       	in	r25, 0x3e	; 62
    4d0a:	4c 96       	adiw	r24, 0x1c	; 28
    4d0c:	0f b6       	in	r0, 0x3f	; 63
    4d0e:	f8 94       	cli
    4d10:	9e bf       	out	0x3e, r25	; 62
    4d12:	0f be       	out	0x3f, r0	; 63
    4d14:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4d16:	8d ee       	ldi	r24, 0xED	; 237
    4d18:	92 e0       	ldi	r25, 0x02	; 2
    4d1a:	0e 94 d6 14 	call	0x29ac	; 0x29ac <host_mouse_send>
    last_timer = timer_read();
    4d1e:	0e 94 4d 22 	call	0x449a	; 0x449a <timer_read>
    4d22:	90 93 eb 02 	sts	0x02EB, r25
    4d26:	80 93 ea 02 	sts	0x02EA, r24
    4d2a:	08 95       	ret

00004d2c <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4d2c:	cf 93       	push	r28
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4d2e:	80 91 ea 02 	lds	r24, 0x02EA
    4d32:	90 91 eb 02 	lds	r25, 0x02EB
    4d36:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <timer_elapsed>
    4d3a:	40 91 ec 02 	lds	r20, 0x02EC
    4d3e:	44 23       	and	r20, r20
    4d40:	21 f0       	breq	.+8      	; 0x4d4a <mousekey_task+0x1e>
    4d42:	20 91 1c 01 	lds	r18, 0x011C
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	06 c0       	rjmp	.+12     	; 0x4d56 <mousekey_task+0x2a>
    4d4a:	20 91 1d 01 	lds	r18, 0x011D
    4d4e:	5a e0       	ldi	r21, 0x0A	; 10
    4d50:	25 9f       	mul	r18, r21
    4d52:	90 01       	movw	r18, r0
    4d54:	11 24       	eor	r1, r1
    4d56:	82 17       	cp	r24, r18
    4d58:	93 07       	cpc	r25, r19
    4d5a:	08 f4       	brcc	.+2      	; 0x4d5e <mousekey_task+0x32>
    4d5c:	86 c0       	rjmp	.+268    	; 0x4e6a <mousekey_task+0x13e>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4d5e:	80 91 ee 02 	lds	r24, 0x02EE
    4d62:	81 11       	cpse	r24, r1
    4d64:	0d c0       	rjmp	.+26     	; 0x4d80 <mousekey_task+0x54>
    4d66:	90 91 ef 02 	lds	r25, 0x02EF
    4d6a:	91 11       	cpse	r25, r1
    4d6c:	09 c0       	rjmp	.+18     	; 0x4d80 <mousekey_task+0x54>
    4d6e:	90 91 f0 02 	lds	r25, 0x02F0
    4d72:	91 11       	cpse	r25, r1
    4d74:	05 c0       	rjmp	.+10     	; 0x4d80 <mousekey_task+0x54>
    4d76:	90 91 f1 02 	lds	r25, 0x02F1
    4d7a:	99 23       	and	r25, r25
    4d7c:	09 f4       	brne	.+2      	; 0x4d80 <mousekey_task+0x54>
    4d7e:	75 c0       	rjmp	.+234    	; 0x4e6a <mousekey_task+0x13e>
        return;

    if (mousekey_repeat != UINT8_MAX)
    4d80:	4f 3f       	cpi	r20, 0xFF	; 255
    4d82:	19 f0       	breq	.+6      	; 0x4d8a <mousekey_task+0x5e>
        mousekey_repeat++;
    4d84:	4f 5f       	subi	r20, 0xFF	; 255
    4d86:	40 93 ec 02 	sts	0x02EC, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4d8a:	18 16       	cp	r1, r24
    4d8c:	24 f4       	brge	.+8      	; 0x4d96 <mousekey_task+0x6a>
    4d8e:	0e 94 99 24 	call	0x4932	; 0x4932 <move_unit>
    4d92:	80 93 ee 02 	sts	0x02EE, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4d96:	80 91 ee 02 	lds	r24, 0x02EE
    4d9a:	87 ff       	sbrs	r24, 7
    4d9c:	05 c0       	rjmp	.+10     	; 0x4da8 <mousekey_task+0x7c>
    4d9e:	0e 94 99 24 	call	0x4932	; 0x4932 <move_unit>
    4da2:	81 95       	neg	r24
    4da4:	80 93 ee 02 	sts	0x02EE, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4da8:	80 91 ef 02 	lds	r24, 0x02EF
    4dac:	18 16       	cp	r1, r24
    4dae:	24 f4       	brge	.+8      	; 0x4db8 <mousekey_task+0x8c>
    4db0:	0e 94 99 24 	call	0x4932	; 0x4932 <move_unit>
    4db4:	80 93 ef 02 	sts	0x02EF, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4db8:	80 91 ef 02 	lds	r24, 0x02EF
    4dbc:	87 ff       	sbrs	r24, 7
    4dbe:	05 c0       	rjmp	.+10     	; 0x4dca <mousekey_task+0x9e>
    4dc0:	0e 94 99 24 	call	0x4932	; 0x4932 <move_unit>
    4dc4:	81 95       	neg	r24
    4dc6:	80 93 ef 02 	sts	0x02EF, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    4dca:	60 91 ee 02 	lds	r22, 0x02EE
    4dce:	66 23       	and	r22, r22
    4dd0:	39 f1       	breq	.+78     	; 0x4e20 <mousekey_task+0xf4>
    4dd2:	c0 91 ef 02 	lds	r28, 0x02EF
    4dd6:	cc 23       	and	r28, r28
    4dd8:	19 f1       	breq	.+70     	; 0x4e20 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    4dda:	77 27       	eor	r23, r23
    4ddc:	67 fd       	sbrc	r22, 7
    4dde:	70 95       	com	r23
    4de0:	87 2f       	mov	r24, r23
    4de2:	97 2f       	mov	r25, r23
    4de4:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <__floatsisf>
    4de8:	23 e3       	ldi	r18, 0x33	; 51
    4dea:	33 e3       	ldi	r19, 0x33	; 51
    4dec:	43 e3       	ldi	r20, 0x33	; 51
    4dee:	5f e3       	ldi	r21, 0x3F	; 63
    4df0:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__mulsf3>
    4df4:	0e 94 3e 2c 	call	0x587c	; 0x587c <__fixsfsi>
    4df8:	60 93 ee 02 	sts	0x02EE, r22
        mouse_report.y *= 0.7;
    4dfc:	6c 2f       	mov	r22, r28
    4dfe:	77 27       	eor	r23, r23
    4e00:	67 fd       	sbrc	r22, 7
    4e02:	70 95       	com	r23
    4e04:	87 2f       	mov	r24, r23
    4e06:	97 2f       	mov	r25, r23
    4e08:	0e 94 71 2c 	call	0x58e2	; 0x58e2 <__floatsisf>
    4e0c:	23 e3       	ldi	r18, 0x33	; 51
    4e0e:	33 e3       	ldi	r19, 0x33	; 51
    4e10:	43 e3       	ldi	r20, 0x33	; 51
    4e12:	5f e3       	ldi	r21, 0x3F	; 63
    4e14:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__mulsf3>
    4e18:	0e 94 3e 2c 	call	0x587c	; 0x587c <__fixsfsi>
    4e1c:	60 93 ef 02 	sts	0x02EF, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4e20:	80 91 f0 02 	lds	r24, 0x02F0
    4e24:	18 16       	cp	r1, r24
    4e26:	24 f4       	brge	.+8      	; 0x4e30 <mousekey_task+0x104>
    4e28:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <wheel_unit>
    4e2c:	80 93 f0 02 	sts	0x02F0, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4e30:	80 91 f0 02 	lds	r24, 0x02F0
    4e34:	87 ff       	sbrs	r24, 7
    4e36:	05 c0       	rjmp	.+10     	; 0x4e42 <mousekey_task+0x116>
    4e38:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <wheel_unit>
    4e3c:	81 95       	neg	r24
    4e3e:	80 93 f0 02 	sts	0x02F0, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4e42:	80 91 f1 02 	lds	r24, 0x02F1
    4e46:	18 16       	cp	r1, r24
    4e48:	24 f4       	brge	.+8      	; 0x4e52 <mousekey_task+0x126>
    4e4a:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <wheel_unit>
    4e4e:	80 93 f1 02 	sts	0x02F1, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4e52:	80 91 f1 02 	lds	r24, 0x02F1
    4e56:	87 ff       	sbrs	r24, 7
    4e58:	05 c0       	rjmp	.+10     	; 0x4e64 <mousekey_task+0x138>
    4e5a:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <wheel_unit>
    4e5e:	81 95       	neg	r24
    4e60:	80 93 f1 02 	sts	0x02F1, r24

    mousekey_send();
}
    4e64:	cf 91       	pop	r28
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    4e66:	0c 94 09 26 	jmp	0x4c12	; 0x4c12 <mousekey_send>
}
    4e6a:	cf 91       	pop	r28
    4e6c:	08 95       	ret

00004e6e <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4e6e:	ed ee       	ldi	r30, 0xED	; 237
    4e70:	f2 e0       	ldi	r31, 0x02	; 2
    4e72:	85 e0       	ldi	r24, 0x05	; 5
    4e74:	df 01       	movw	r26, r30
    4e76:	1d 92       	st	X+, r1
    4e78:	8a 95       	dec	r24
    4e7a:	e9 f7       	brne	.-6      	; 0x4e76 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4e7c:	10 92 ec 02 	sts	0x02EC, r1
    mousekey_accel = 0;
    4e80:	10 92 f2 02 	sts	0x02F2, r1
    4e84:	08 95       	ret

00004e86 <command_console_help>:
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4e86:	8f ee       	ldi	r24, 0xEF	; 239
    4e88:	9a e0       	ldi	r25, 0x0A	; 10
    4e8a:	0c 94 64 07 	jmp	0xec8	; 0xec8 <xputs>

00004e8e <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4e8e:	85 e2       	ldi	r24, 0x25	; 37
    4e90:	9b e0       	ldi	r25, 0x0B	; 11
    4e92:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4e96:	1f 92       	push	r1
    4e98:	81 e0       	ldi	r24, 0x01	; 1
    4e9a:	8f 93       	push	r24
    4e9c:	1f 92       	push	r1
    4e9e:	85 e0       	ldi	r24, 0x05	; 5
    4ea0:	8f 93       	push	r24
    4ea2:	80 e2       	ldi	r24, 0x20	; 32
    4ea4:	9c e0       	ldi	r25, 0x0C	; 12
    4ea6:	9f 93       	push	r25
    4ea8:	8f 93       	push	r24
    4eaa:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    4eae:	0f 90       	pop	r0
    4eb0:	0f 90       	pop	r0
    4eb2:	0f 90       	pop	r0
    4eb4:	0f 90       	pop	r0
    4eb6:	0f 90       	pop	r0
    4eb8:	0f 90       	pop	r0
    4eba:	08 95       	ret

00004ebc <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4ebc:	83 30       	cpi	r24, 0x03	; 3
    4ebe:	f1 f1       	breq	.+124    	; 0x4f3c <mousekey_param_inc+0x80>
    4ec0:	30 f4       	brcc	.+12     	; 0x4ece <mousekey_param_inc+0x12>
    4ec2:	81 30       	cpi	r24, 0x01	; 1
    4ec4:	69 f0       	breq	.+26     	; 0x4ee0 <mousekey_param_inc+0x24>
    4ec6:	82 30       	cpi	r24, 0x02	; 2
    4ec8:	09 f0       	breq	.+2      	; 0x4ecc <mousekey_param_inc+0x10>
    4eca:	9b c0       	rjmp	.+310    	; 0x5002 <mousekey_param_inc+0x146>
    4ecc:	20 c0       	rjmp	.+64     	; 0x4f0e <mousekey_param_inc+0x52>
    4ece:	85 30       	cpi	r24, 0x05	; 5
    4ed0:	09 f4       	brne	.+2      	; 0x4ed4 <mousekey_param_inc+0x18>
    4ed2:	62 c0       	rjmp	.+196    	; 0x4f98 <mousekey_param_inc+0xdc>
    4ed4:	08 f4       	brcc	.+2      	; 0x4ed8 <mousekey_param_inc+0x1c>
    4ed6:	49 c0       	rjmp	.+146    	; 0x4f6a <mousekey_param_inc+0xae>
    4ed8:	86 30       	cpi	r24, 0x06	; 6
    4eda:	09 f0       	breq	.+2      	; 0x4ede <mousekey_param_inc+0x22>
    4edc:	92 c0       	rjmp	.+292    	; 0x5002 <mousekey_param_inc+0x146>
    4ede:	73 c0       	rjmp	.+230    	; 0x4fc6 <mousekey_param_inc+0x10a>
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4ee0:	20 91 1d 01 	lds	r18, 0x011D
    4ee4:	86 2f       	mov	r24, r22
    4ee6:	90 e0       	ldi	r25, 0x00	; 0
    4ee8:	82 0f       	add	r24, r18
    4eea:	91 1d       	adc	r25, r1
    4eec:	8f 3f       	cpi	r24, 0xFF	; 255
    4eee:	91 05       	cpc	r25, r1
    4ef0:	20 f4       	brcc	.+8      	; 0x4efa <mousekey_param_inc+0x3e>
                mk_delay += inc;
    4ef2:	62 0f       	add	r22, r18
    4ef4:	60 93 1d 01 	sts	0x011D, r22
    4ef8:	03 c0       	rjmp	.+6      	; 0x4f00 <mousekey_param_inc+0x44>
            else
                mk_delay = UINT8_MAX;
    4efa:	8f ef       	ldi	r24, 0xFF	; 255
    4efc:	80 93 1d 01 	sts	0x011D, r24
            PRINT_SET_VAL(mk_delay);
    4f00:	80 91 1d 01 	lds	r24, 0x011D
    4f04:	1f 92       	push	r1
    4f06:	8f 93       	push	r24
    4f08:	86 e2       	ldi	r24, 0x26	; 38
    4f0a:	9d e0       	ldi	r25, 0x0D	; 13
    4f0c:	72 c0       	rjmp	.+228    	; 0x4ff2 <mousekey_param_inc+0x136>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4f0e:	20 91 1c 01 	lds	r18, 0x011C
    4f12:	86 2f       	mov	r24, r22
    4f14:	90 e0       	ldi	r25, 0x00	; 0
    4f16:	82 0f       	add	r24, r18
    4f18:	91 1d       	adc	r25, r1
    4f1a:	8f 3f       	cpi	r24, 0xFF	; 255
    4f1c:	91 05       	cpc	r25, r1
    4f1e:	20 f4       	brcc	.+8      	; 0x4f28 <mousekey_param_inc+0x6c>
                mk_interval += inc;
    4f20:	62 0f       	add	r22, r18
    4f22:	60 93 1c 01 	sts	0x011C, r22
    4f26:	03 c0       	rjmp	.+6      	; 0x4f2e <mousekey_param_inc+0x72>
            else
                mk_interval = UINT8_MAX;
    4f28:	8f ef       	ldi	r24, 0xFF	; 255
    4f2a:	80 93 1c 01 	sts	0x011C, r24
            PRINT_SET_VAL(mk_interval);
    4f2e:	80 91 1c 01 	lds	r24, 0x011C
    4f32:	1f 92       	push	r1
    4f34:	8f 93       	push	r24
    4f36:	85 e3       	ldi	r24, 0x35	; 53
    4f38:	9d e0       	ldi	r25, 0x0D	; 13
    4f3a:	5b c0       	rjmp	.+182    	; 0x4ff2 <mousekey_param_inc+0x136>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4f3c:	20 91 1b 01 	lds	r18, 0x011B
    4f40:	86 2f       	mov	r24, r22
    4f42:	90 e0       	ldi	r25, 0x00	; 0
    4f44:	82 0f       	add	r24, r18
    4f46:	91 1d       	adc	r25, r1
    4f48:	8f 3f       	cpi	r24, 0xFF	; 255
    4f4a:	91 05       	cpc	r25, r1
    4f4c:	20 f4       	brcc	.+8      	; 0x4f56 <mousekey_param_inc+0x9a>
                mk_max_speed += inc;
    4f4e:	62 0f       	add	r22, r18
    4f50:	60 93 1b 01 	sts	0x011B, r22
    4f54:	03 c0       	rjmp	.+6      	; 0x4f5c <mousekey_param_inc+0xa0>
            else
                mk_max_speed = UINT8_MAX;
    4f56:	8f ef       	ldi	r24, 0xFF	; 255
    4f58:	80 93 1b 01 	sts	0x011B, r24
            PRINT_SET_VAL(mk_max_speed);
    4f5c:	80 91 1b 01 	lds	r24, 0x011B
    4f60:	1f 92       	push	r1
    4f62:	8f 93       	push	r24
    4f64:	87 e4       	ldi	r24, 0x47	; 71
    4f66:	9d e0       	ldi	r25, 0x0D	; 13
    4f68:	44 c0       	rjmp	.+136    	; 0x4ff2 <mousekey_param_inc+0x136>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4f6a:	20 91 1a 01 	lds	r18, 0x011A
    4f6e:	86 2f       	mov	r24, r22
    4f70:	90 e0       	ldi	r25, 0x00	; 0
    4f72:	82 0f       	add	r24, r18
    4f74:	91 1d       	adc	r25, r1
    4f76:	8f 3f       	cpi	r24, 0xFF	; 255
    4f78:	91 05       	cpc	r25, r1
    4f7a:	20 f4       	brcc	.+8      	; 0x4f84 <mousekey_param_inc+0xc8>
                mk_time_to_max += inc;
    4f7c:	62 0f       	add	r22, r18
    4f7e:	60 93 1a 01 	sts	0x011A, r22
    4f82:	03 c0       	rjmp	.+6      	; 0x4f8a <mousekey_param_inc+0xce>
            else
                mk_time_to_max = UINT8_MAX;
    4f84:	8f ef       	ldi	r24, 0xFF	; 255
    4f86:	80 93 1a 01 	sts	0x011A, r24
            PRINT_SET_VAL(mk_time_to_max);
    4f8a:	80 91 1a 01 	lds	r24, 0x011A
    4f8e:	1f 92       	push	r1
    4f90:	8f 93       	push	r24
    4f92:	8a e5       	ldi	r24, 0x5A	; 90
    4f94:	9d e0       	ldi	r25, 0x0D	; 13
    4f96:	2d c0       	rjmp	.+90     	; 0x4ff2 <mousekey_param_inc+0x136>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4f98:	20 91 19 01 	lds	r18, 0x0119
    4f9c:	86 2f       	mov	r24, r22
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	82 0f       	add	r24, r18
    4fa2:	91 1d       	adc	r25, r1
    4fa4:	8f 3f       	cpi	r24, 0xFF	; 255
    4fa6:	91 05       	cpc	r25, r1
    4fa8:	20 f4       	brcc	.+8      	; 0x4fb2 <mousekey_param_inc+0xf6>
                mk_wheel_max_speed += inc;
    4faa:	62 0f       	add	r22, r18
    4fac:	60 93 19 01 	sts	0x0119, r22
    4fb0:	03 c0       	rjmp	.+6      	; 0x4fb8 <mousekey_param_inc+0xfc>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4fb2:	8f ef       	ldi	r24, 0xFF	; 255
    4fb4:	80 93 19 01 	sts	0x0119, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4fb8:	80 91 19 01 	lds	r24, 0x0119
    4fbc:	1f 92       	push	r1
    4fbe:	8f 93       	push	r24
    4fc0:	8f e6       	ldi	r24, 0x6F	; 111
    4fc2:	9d e0       	ldi	r25, 0x0D	; 13
    4fc4:	16 c0       	rjmp	.+44     	; 0x4ff2 <mousekey_param_inc+0x136>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4fc6:	20 91 18 01 	lds	r18, 0x0118
    4fca:	86 2f       	mov	r24, r22
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	82 0f       	add	r24, r18
    4fd0:	91 1d       	adc	r25, r1
    4fd2:	8f 3f       	cpi	r24, 0xFF	; 255
    4fd4:	91 05       	cpc	r25, r1
    4fd6:	20 f4       	brcc	.+8      	; 0x4fe0 <mousekey_param_inc+0x124>
                mk_wheel_time_to_max += inc;
    4fd8:	62 0f       	add	r22, r18
    4fda:	60 93 18 01 	sts	0x0118, r22
    4fde:	03 c0       	rjmp	.+6      	; 0x4fe6 <mousekey_param_inc+0x12a>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4fe0:	8f ef       	ldi	r24, 0xFF	; 255
    4fe2:	80 93 18 01 	sts	0x0118, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4fe6:	80 91 18 01 	lds	r24, 0x0118
    4fea:	1f 92       	push	r1
    4fec:	8f 93       	push	r24
    4fee:	88 e8       	ldi	r24, 0x88	; 136
    4ff0:	9d e0       	ldi	r25, 0x0D	; 13
    4ff2:	9f 93       	push	r25
    4ff4:	8f 93       	push	r24
    4ff6:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
            break;
    4ffa:	0f 90       	pop	r0
    4ffc:	0f 90       	pop	r0
    4ffe:	0f 90       	pop	r0
    5000:	0f 90       	pop	r0
    5002:	08 95       	ret

00005004 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    5004:	83 30       	cpi	r24, 0x03	; 3
    5006:	89 f1       	breq	.+98     	; 0x506a <mousekey_param_dec+0x66>
    5008:	30 f4       	brcc	.+12     	; 0x5016 <mousekey_param_dec+0x12>
    500a:	81 30       	cpi	r24, 0x01	; 1
    500c:	61 f0       	breq	.+24     	; 0x5026 <mousekey_param_dec+0x22>
    500e:	82 30       	cpi	r24, 0x02	; 2
    5010:	09 f0       	breq	.+2      	; 0x5014 <mousekey_param_dec+0x10>
    5012:	76 c0       	rjmp	.+236    	; 0x5100 <mousekey_param_dec+0xfc>
    5014:	19 c0       	rjmp	.+50     	; 0x5048 <mousekey_param_dec+0x44>
    5016:	85 30       	cpi	r24, 0x05	; 5
    5018:	09 f4       	brne	.+2      	; 0x501c <mousekey_param_dec+0x18>
    501a:	49 c0       	rjmp	.+146    	; 0x50ae <mousekey_param_dec+0xaa>
    501c:	b8 f1       	brcs	.+110    	; 0x508c <mousekey_param_dec+0x88>
    501e:	86 30       	cpi	r24, 0x06	; 6
    5020:	09 f0       	breq	.+2      	; 0x5024 <mousekey_param_dec+0x20>
    5022:	6e c0       	rjmp	.+220    	; 0x5100 <mousekey_param_dec+0xfc>
    5024:	55 c0       	rjmp	.+170    	; 0x50d0 <mousekey_param_dec+0xcc>
        case 1:
            if (mk_delay > dec)
    5026:	80 91 1d 01 	lds	r24, 0x011D
    502a:	68 17       	cp	r22, r24
    502c:	20 f4       	brcc	.+8      	; 0x5036 <mousekey_param_dec+0x32>
                mk_delay -= dec;
    502e:	86 1b       	sub	r24, r22
    5030:	80 93 1d 01 	sts	0x011D, r24
    5034:	02 c0       	rjmp	.+4      	; 0x503a <mousekey_param_dec+0x36>
            else
                mk_delay = 0;
    5036:	10 92 1d 01 	sts	0x011D, r1
            PRINT_SET_VAL(mk_delay);
    503a:	80 91 1d 01 	lds	r24, 0x011D
    503e:	1f 92       	push	r1
    5040:	8f 93       	push	r24
    5042:	83 ea       	ldi	r24, 0xA3	; 163
    5044:	9d e0       	ldi	r25, 0x0D	; 13
    5046:	54 c0       	rjmp	.+168    	; 0x50f0 <mousekey_param_dec+0xec>
            break;
        case 2:
            if (mk_interval > dec)
    5048:	80 91 1c 01 	lds	r24, 0x011C
    504c:	68 17       	cp	r22, r24
    504e:	20 f4       	brcc	.+8      	; 0x5058 <mousekey_param_dec+0x54>
                mk_interval -= dec;
    5050:	86 1b       	sub	r24, r22
    5052:	80 93 1c 01 	sts	0x011C, r24
    5056:	02 c0       	rjmp	.+4      	; 0x505c <mousekey_param_dec+0x58>
            else
                mk_interval = 0;
    5058:	10 92 1c 01 	sts	0x011C, r1
            PRINT_SET_VAL(mk_interval);
    505c:	80 91 1c 01 	lds	r24, 0x011C
    5060:	1f 92       	push	r1
    5062:	8f 93       	push	r24
    5064:	82 eb       	ldi	r24, 0xB2	; 178
    5066:	9d e0       	ldi	r25, 0x0D	; 13
    5068:	43 c0       	rjmp	.+134    	; 0x50f0 <mousekey_param_dec+0xec>
            break;
        case 3:
            if (mk_max_speed > dec)
    506a:	80 91 1b 01 	lds	r24, 0x011B
    506e:	68 17       	cp	r22, r24
    5070:	20 f4       	brcc	.+8      	; 0x507a <mousekey_param_dec+0x76>
                mk_max_speed -= dec;
    5072:	86 1b       	sub	r24, r22
    5074:	80 93 1b 01 	sts	0x011B, r24
    5078:	02 c0       	rjmp	.+4      	; 0x507e <mousekey_param_dec+0x7a>
            else
                mk_max_speed = 0;
    507a:	10 92 1b 01 	sts	0x011B, r1
            PRINT_SET_VAL(mk_max_speed);
    507e:	80 91 1b 01 	lds	r24, 0x011B
    5082:	1f 92       	push	r1
    5084:	8f 93       	push	r24
    5086:	84 ec       	ldi	r24, 0xC4	; 196
    5088:	9d e0       	ldi	r25, 0x0D	; 13
    508a:	32 c0       	rjmp	.+100    	; 0x50f0 <mousekey_param_dec+0xec>
            break;
        case 4:
            if (mk_time_to_max > dec)
    508c:	80 91 1a 01 	lds	r24, 0x011A
    5090:	68 17       	cp	r22, r24
    5092:	20 f4       	brcc	.+8      	; 0x509c <mousekey_param_dec+0x98>
                mk_time_to_max -= dec;
    5094:	86 1b       	sub	r24, r22
    5096:	80 93 1a 01 	sts	0x011A, r24
    509a:	02 c0       	rjmp	.+4      	; 0x50a0 <mousekey_param_dec+0x9c>
            else
                mk_time_to_max = 0;
    509c:	10 92 1a 01 	sts	0x011A, r1
            PRINT_SET_VAL(mk_time_to_max);
    50a0:	80 91 1a 01 	lds	r24, 0x011A
    50a4:	1f 92       	push	r1
    50a6:	8f 93       	push	r24
    50a8:	87 ed       	ldi	r24, 0xD7	; 215
    50aa:	9d e0       	ldi	r25, 0x0D	; 13
    50ac:	21 c0       	rjmp	.+66     	; 0x50f0 <mousekey_param_dec+0xec>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    50ae:	80 91 19 01 	lds	r24, 0x0119
    50b2:	68 17       	cp	r22, r24
    50b4:	20 f4       	brcc	.+8      	; 0x50be <mousekey_param_dec+0xba>
                mk_wheel_max_speed -= dec;
    50b6:	86 1b       	sub	r24, r22
    50b8:	80 93 19 01 	sts	0x0119, r24
    50bc:	02 c0       	rjmp	.+4      	; 0x50c2 <mousekey_param_dec+0xbe>
            else
                mk_wheel_max_speed = 0;
    50be:	10 92 19 01 	sts	0x0119, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    50c2:	80 91 19 01 	lds	r24, 0x0119
    50c6:	1f 92       	push	r1
    50c8:	8f 93       	push	r24
    50ca:	8c ee       	ldi	r24, 0xEC	; 236
    50cc:	9d e0       	ldi	r25, 0x0D	; 13
    50ce:	10 c0       	rjmp	.+32     	; 0x50f0 <mousekey_param_dec+0xec>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    50d0:	80 91 18 01 	lds	r24, 0x0118
    50d4:	68 17       	cp	r22, r24
    50d6:	20 f4       	brcc	.+8      	; 0x50e0 <mousekey_param_dec+0xdc>
                mk_wheel_time_to_max -= dec;
    50d8:	86 1b       	sub	r24, r22
    50da:	80 93 18 01 	sts	0x0118, r24
    50de:	02 c0       	rjmp	.+4      	; 0x50e4 <mousekey_param_dec+0xe0>
            else
                mk_wheel_time_to_max = 0;
    50e0:	10 92 18 01 	sts	0x0118, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    50e4:	80 91 18 01 	lds	r24, 0x0118
    50e8:	1f 92       	push	r1
    50ea:	8f 93       	push	r24
    50ec:	85 e0       	ldi	r24, 0x05	; 5
    50ee:	9e e0       	ldi	r25, 0x0E	; 14
    50f0:	9f 93       	push	r25
    50f2:	8f 93       	push	r24
    50f4:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
            break;
    50f8:	0f 90       	pop	r0
    50fa:	0f 90       	pop	r0
    50fc:	0f 90       	pop	r0
    50fe:	0f 90       	pop	r0
    5100:	08 95       	ret

00005102 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    5102:	cf 93       	push	r28
    5104:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    5106:	1f 92       	push	r1
    5108:	8f 93       	push	r24
    510a:	26 e1       	ldi	r18, 0x16	; 22
    510c:	3b e0       	ldi	r19, 0x0B	; 11
    510e:	3f 93       	push	r19
    5110:	2f 93       	push	r18
    5112:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    default_layer_set(1UL<<layer);
    5116:	61 e0       	ldi	r22, 0x01	; 1
    5118:	70 e0       	ldi	r23, 0x00	; 0
    511a:	80 e0       	ldi	r24, 0x00	; 0
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	04 c0       	rjmp	.+8      	; 0x5128 <switch_default_layer+0x26>
    5120:	66 0f       	add	r22, r22
    5122:	77 1f       	adc	r23, r23
    5124:	88 1f       	adc	r24, r24
    5126:	99 1f       	adc	r25, r25
    5128:	ca 95       	dec	r28
    512a:	d2 f7       	brpl	.-12     	; 0x5120 <switch_default_layer+0x1e>
    512c:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <default_layer_set>
    clear_keyboard();
    5130:	0f 90       	pop	r0
    5132:	0f 90       	pop	r0
    5134:	0f 90       	pop	r0
    5136:	0f 90       	pop	r0
}
    5138:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    513a:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <clear_keyboard>

0000513e <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    513e:	cf 93       	push	r28
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    5140:	87 32       	cpi	r24, 0x27	; 39
    5142:	20 f5       	brcc	.+72     	; 0x518c <command_common+0x4e>
    5144:	8e 31       	cpi	r24, 0x1E	; 30
    5146:	08 f0       	brcs	.+2      	; 0x514a <command_common+0xc>
    5148:	32 c2       	rjmp	.+1124   	; 0x55ae <command_common+0x470>
    514a:	8e 30       	cpi	r24, 0x0E	; 14
    514c:	09 f4       	brne	.+2      	; 0x5150 <command_common+0x12>
    514e:	b9 c1       	rjmp	.+882    	; 0x54c2 <command_common+0x384>
    5150:	70 f4       	brcc	.+28     	; 0x516e <command_common+0x30>
    5152:	87 30       	cpi	r24, 0x07	; 7
    5154:	09 f4       	brne	.+2      	; 0x5158 <command_common+0x1a>
    5156:	8b c1       	rjmp	.+790    	; 0x546e <command_common+0x330>
    5158:	20 f4       	brcc	.+8      	; 0x5162 <command_common+0x24>
    515a:	86 30       	cpi	r24, 0x06	; 6
    515c:	09 f0       	breq	.+2      	; 0x5160 <command_common+0x22>
    515e:	2d c2       	rjmp	.+1114   	; 0x55ba <command_common+0x47c>
    5160:	64 c1       	rjmp	.+712    	; 0x542a <command_common+0x2ec>
    5162:	88 30       	cpi	r24, 0x08	; 8
    5164:	69 f1       	breq	.+90     	; 0x51c0 <command_common+0x82>
    5166:	8b 30       	cpi	r24, 0x0B	; 11
    5168:	09 f0       	breq	.+2      	; 0x516c <command_common+0x2e>
    516a:	27 c2       	rjmp	.+1102   	; 0x55ba <command_common+0x47c>
    516c:	58 c1       	rjmp	.+688    	; 0x541e <command_common+0x2e0>
    516e:	86 31       	cpi	r24, 0x16	; 22
    5170:	09 f4       	brne	.+2      	; 0x5174 <command_common+0x36>
    5172:	e4 c1       	rjmp	.+968    	; 0x553c <command_common+0x3fe>
    5174:	20 f4       	brcc	.+8      	; 0x517e <command_common+0x40>
    5176:	80 31       	cpi	r24, 0x10	; 16
    5178:	09 f0       	breq	.+2      	; 0x517c <command_common+0x3e>
    517a:	1f c2       	rjmp	.+1086   	; 0x55ba <command_common+0x47c>
    517c:	b5 c1       	rjmp	.+874    	; 0x54e8 <command_common+0x3aa>
    517e:	89 31       	cpi	r24, 0x19	; 25
    5180:	09 f4       	brne	.+2      	; 0x5184 <command_common+0x46>
    5182:	c5 c1       	rjmp	.+906    	; 0x550e <command_common+0x3d0>
    5184:	8b 31       	cpi	r24, 0x1B	; 27
    5186:	09 f0       	breq	.+2      	; 0x518a <command_common+0x4c>
    5188:	18 c2       	rjmp	.+1072   	; 0x55ba <command_common+0x47c>
    518a:	81 c1       	rjmp	.+770    	; 0x548e <command_common+0x350>
    518c:	88 33       	cpi	r24, 0x38	; 56
    518e:	09 f4       	brne	.+2      	; 0x5192 <command_common+0x54>
    5190:	46 c1       	rjmp	.+652    	; 0x541e <command_common+0x2e0>
    5192:	50 f4       	brcc	.+20     	; 0x51a8 <command_common+0x6a>
    5194:	89 32       	cpi	r24, 0x29	; 41
    5196:	09 f4       	brne	.+2      	; 0x519a <command_common+0x5c>
    5198:	08 c2       	rjmp	.+1040   	; 0x55aa <command_common+0x46c>
    519a:	85 33       	cpi	r24, 0x35	; 53
    519c:	09 f4       	brne	.+2      	; 0x51a0 <command_common+0x62>
    519e:	05 c2       	rjmp	.+1034   	; 0x55aa <command_common+0x46c>
    51a0:	87 32       	cpi	r24, 0x27	; 39
    51a2:	09 f0       	breq	.+2      	; 0x51a6 <command_common+0x68>
    51a4:	0a c2       	rjmp	.+1044   	; 0x55ba <command_common+0x47c>
    51a6:	01 c2       	rjmp	.+1026   	; 0x55aa <command_common+0x46c>
    51a8:	83 34       	cpi	r24, 0x43	; 67
    51aa:	09 f4       	brne	.+2      	; 0x51ae <command_common+0x70>
    51ac:	fe c1       	rjmp	.+1020   	; 0x55aa <command_common+0x46c>
    51ae:	20 f4       	brcc	.+8      	; 0x51b8 <command_common+0x7a>
    51b0:	8a 33       	cpi	r24, 0x3A	; 58
    51b2:	08 f4       	brcc	.+2      	; 0x51b6 <command_common+0x78>
    51b4:	02 c2       	rjmp	.+1028   	; 0x55ba <command_common+0x47c>
    51b6:	fd c1       	rjmp	.+1018   	; 0x55b2 <command_common+0x474>
    51b8:	88 34       	cpi	r24, 0x48	; 72
    51ba:	09 f0       	breq	.+2      	; 0x51be <command_common+0x80>
    51bc:	fe c1       	rjmp	.+1020   	; 0x55ba <command_common+0x47c>
    51be:	45 c1       	rjmp	.+650    	; 0x544a <command_common+0x30c>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    51c0:	8f e0       	ldi	r24, 0x0F	; 15
    51c2:	97 e0       	ldi	r25, 0x07	; 7
    51c4:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    51c8:	8f e0       	ldi	r24, 0x0F	; 15
    51ca:	99 e0       	ldi	r25, 0x09	; 9
    51cc:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    51d0:	0e 94 87 24 	call	0x490e	; 0x490e <eeconfig_read_default_layer>
    51d4:	1f 92       	push	r1
    51d6:	8f 93       	push	r24
    51d8:	8f e1       	ldi	r24, 0x1F	; 31
    51da:	99 e0       	ldi	r25, 0x09	; 9
    51dc:	9f 93       	push	r25
    51de:	8f 93       	push	r24
    51e0:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    51e4:	82 e2       	ldi	r24, 0x22	; 34
    51e6:	99 e0       	ldi	r25, 0x09	; 9
    51e8:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    51ec:	0e 94 7e 24 	call	0x48fc	; 0x48fc <eeconfig_read_debug>
    51f0:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    51f2:	84 e2       	ldi	r24, 0x24	; 36
    51f4:	99 e0       	ldi	r25, 0x09	; 9
    51f6:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    51fa:	1f 92       	push	r1
    51fc:	cf 93       	push	r28
    51fe:	27 e3       	ldi	r18, 0x37	; 55
    5200:	39 e0       	ldi	r19, 0x09	; 9
    5202:	3f 93       	push	r19
    5204:	2f 93       	push	r18
    5206:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    520a:	8c e3       	ldi	r24, 0x3C	; 60
    520c:	99 e0       	ldi	r25, 0x09	; 9
    520e:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    5212:	8e e3       	ldi	r24, 0x3E	; 62
    5214:	99 e0       	ldi	r25, 0x09	; 9
    5216:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    521a:	8c 2f       	mov	r24, r28
    521c:	81 70       	andi	r24, 0x01	; 1
    521e:	1f 92       	push	r1
    5220:	8f 93       	push	r24
    5222:	28 e4       	ldi	r18, 0x48	; 72
    5224:	39 e0       	ldi	r19, 0x09	; 9
    5226:	3f 93       	push	r19
    5228:	2f 93       	push	r18
    522a:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    522e:	8b e4       	ldi	r24, 0x4B	; 75
    5230:	99 e0       	ldi	r25, 0x09	; 9
    5232:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    5236:	8d e4       	ldi	r24, 0x4D	; 77
    5238:	99 e0       	ldi	r25, 0x09	; 9
    523a:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    523e:	c1 fb       	bst	r28, 1
    5240:	88 27       	eor	r24, r24
    5242:	80 f9       	bld	r24, 0
    5244:	1f 92       	push	r1
    5246:	8f 93       	push	r24
    5248:	27 e5       	ldi	r18, 0x57	; 87
    524a:	39 e0       	ldi	r19, 0x09	; 9
    524c:	3f 93       	push	r19
    524e:	2f 93       	push	r18
    5250:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    5254:	8a e5       	ldi	r24, 0x5A	; 90
    5256:	99 e0       	ldi	r25, 0x09	; 9
    5258:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    525c:	8c e5       	ldi	r24, 0x5C	; 92
    525e:	99 e0       	ldi	r25, 0x09	; 9
    5260:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    5264:	c2 fb       	bst	r28, 2
    5266:	88 27       	eor	r24, r24
    5268:	80 f9       	bld	r24, 0
    526a:	1f 92       	push	r1
    526c:	8f 93       	push	r24
    526e:	28 e6       	ldi	r18, 0x68	; 104
    5270:	39 e0       	ldi	r19, 0x09	; 9
    5272:	3f 93       	push	r19
    5274:	2f 93       	push	r18
    5276:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    527a:	8b e6       	ldi	r24, 0x6B	; 107
    527c:	99 e0       	ldi	r25, 0x09	; 9
    527e:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    5282:	8d e6       	ldi	r24, 0x6D	; 109
    5284:	99 e0       	ldi	r25, 0x09	; 9
    5286:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    528a:	c3 fb       	bst	r28, 3
    528c:	cc 27       	eor	r28, r28
    528e:	c0 f9       	bld	r28, 0
    5290:	1f 92       	push	r1
    5292:	cf 93       	push	r28
    5294:	86 e7       	ldi	r24, 0x76	; 118
    5296:	99 e0       	ldi	r25, 0x09	; 9
    5298:	9f 93       	push	r25
    529a:	8f 93       	push	r24
    529c:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    52a0:	89 e7       	ldi	r24, 0x79	; 121
    52a2:	99 e0       	ldi	r25, 0x09	; 9
    52a4:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    52a8:	0e 94 90 24 	call	0x4920	; 0x4920 <eeconfig_read_keymap>
    52ac:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    52ae:	8b e7       	ldi	r24, 0x7B	; 123
    52b0:	99 e0       	ldi	r25, 0x09	; 9
    52b2:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    52b6:	1f 92       	push	r1
    52b8:	cf 93       	push	r28
    52ba:	2f e8       	ldi	r18, 0x8F	; 143
    52bc:	39 e0       	ldi	r19, 0x09	; 9
    52be:	3f 93       	push	r19
    52c0:	2f 93       	push	r18
    52c2:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    52c6:	84 e9       	ldi	r24, 0x94	; 148
    52c8:	99 e0       	ldi	r25, 0x09	; 9
    52ca:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    52ce:	86 e9       	ldi	r24, 0x96	; 150
    52d0:	99 e0       	ldi	r25, 0x09	; 9
    52d2:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    52d6:	8c 2f       	mov	r24, r28
    52d8:	81 70       	andi	r24, 0x01	; 1
    52da:	1f 92       	push	r1
    52dc:	8f 93       	push	r24
    52de:	2f ea       	ldi	r18, 0xAF	; 175
    52e0:	39 e0       	ldi	r19, 0x09	; 9
    52e2:	3f 93       	push	r19
    52e4:	2f 93       	push	r18
    52e6:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    52ea:	8d b7       	in	r24, 0x3d	; 61
    52ec:	9e b7       	in	r25, 0x3e	; 62
    52ee:	80 96       	adiw	r24, 0x20	; 32
    52f0:	0f b6       	in	r0, 0x3f	; 63
    52f2:	f8 94       	cli
    52f4:	9e bf       	out	0x3e, r25	; 62
    52f6:	0f be       	out	0x3f, r0	; 63
    52f8:	8d bf       	out	0x3d, r24	; 61
    52fa:	82 eb       	ldi	r24, 0xB2	; 178
    52fc:	99 e0       	ldi	r25, 0x09	; 9
    52fe:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    5302:	84 eb       	ldi	r24, 0xB4	; 180
    5304:	99 e0       	ldi	r25, 0x09	; 9
    5306:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    530a:	c1 fb       	bst	r28, 1
    530c:	88 27       	eor	r24, r24
    530e:	80 f9       	bld	r24, 0
    5310:	1f 92       	push	r1
    5312:	8f 93       	push	r24
    5314:	2b ec       	ldi	r18, 0xCB	; 203
    5316:	39 e0       	ldi	r19, 0x09	; 9
    5318:	3f 93       	push	r19
    531a:	2f 93       	push	r18
    531c:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    5320:	8e ec       	ldi	r24, 0xCE	; 206
    5322:	99 e0       	ldi	r25, 0x09	; 9
    5324:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    5328:	80 ed       	ldi	r24, 0xD0	; 208
    532a:	99 e0       	ldi	r25, 0x09	; 9
    532c:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    5330:	c2 fb       	bst	r28, 2
    5332:	88 27       	eor	r24, r24
    5334:	80 f9       	bld	r24, 0
    5336:	1f 92       	push	r1
    5338:	8f 93       	push	r24
    533a:	22 ee       	ldi	r18, 0xE2	; 226
    533c:	39 e0       	ldi	r19, 0x09	; 9
    533e:	3f 93       	push	r19
    5340:	2f 93       	push	r18
    5342:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    5346:	85 ee       	ldi	r24, 0xE5	; 229
    5348:	99 e0       	ldi	r25, 0x09	; 9
    534a:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    534e:	87 ee       	ldi	r24, 0xE7	; 231
    5350:	99 e0       	ldi	r25, 0x09	; 9
    5352:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    5356:	c3 fb       	bst	r28, 3
    5358:	88 27       	eor	r24, r24
    535a:	80 f9       	bld	r24, 0
    535c:	1f 92       	push	r1
    535e:	8f 93       	push	r24
    5360:	29 ef       	ldi	r18, 0xF9	; 249
    5362:	39 e0       	ldi	r19, 0x09	; 9
    5364:	3f 93       	push	r19
    5366:	2f 93       	push	r18
    5368:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    536c:	8c ef       	ldi	r24, 0xFC	; 252
    536e:	99 e0       	ldi	r25, 0x09	; 9
    5370:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    5374:	8e ef       	ldi	r24, 0xFE	; 254
    5376:	99 e0       	ldi	r25, 0x09	; 9
    5378:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    537c:	c4 fb       	bst	r28, 4
    537e:	88 27       	eor	r24, r24
    5380:	80 f9       	bld	r24, 0
    5382:	1f 92       	push	r1
    5384:	8f 93       	push	r24
    5386:	28 e0       	ldi	r18, 0x08	; 8
    5388:	3a e0       	ldi	r19, 0x0A	; 10
    538a:	3f 93       	push	r19
    538c:	2f 93       	push	r18
    538e:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    5392:	8b e0       	ldi	r24, 0x0B	; 11
    5394:	9a e0       	ldi	r25, 0x0A	; 10
    5396:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    539a:	8d e0       	ldi	r24, 0x0D	; 13
    539c:	9a e0       	ldi	r25, 0x0A	; 10
    539e:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    53a2:	c5 fb       	bst	r28, 5
    53a4:	88 27       	eor	r24, r24
    53a6:	80 f9       	bld	r24, 0
    53a8:	1f 92       	push	r1
    53aa:	8f 93       	push	r24
    53ac:	2f e1       	ldi	r18, 0x1F	; 31
    53ae:	3a e0       	ldi	r19, 0x0A	; 10
    53b0:	3f 93       	push	r19
    53b2:	2f 93       	push	r18
    53b4:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    53b8:	82 e2       	ldi	r24, 0x22	; 34
    53ba:	9a e0       	ldi	r25, 0x0A	; 10
    53bc:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    53c0:	84 e2       	ldi	r24, 0x24	; 36
    53c2:	9a e0       	ldi	r25, 0x0A	; 10
    53c4:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    53c8:	c6 fb       	bst	r28, 6
    53ca:	88 27       	eor	r24, r24
    53cc:	80 f9       	bld	r24, 0
    53ce:	1f 92       	push	r1
    53d0:	8f 93       	push	r24
    53d2:	20 e4       	ldi	r18, 0x40	; 64
    53d4:	3a e0       	ldi	r19, 0x0A	; 10
    53d6:	3f 93       	push	r19
    53d8:	2f 93       	push	r18
    53da:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    53de:	83 e4       	ldi	r24, 0x43	; 67
    53e0:	9a e0       	ldi	r25, 0x0A	; 10
    53e2:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    53e6:	85 e4       	ldi	r24, 0x45	; 69
    53e8:	9a e0       	ldi	r25, 0x0A	; 10
    53ea:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    53ee:	c7 fb       	bst	r28, 7
    53f0:	cc 27       	eor	r28, r28
    53f2:	c0 f9       	bld	r28, 0
    53f4:	1f 92       	push	r1
    53f6:	cf 93       	push	r28
    53f8:	8d e4       	ldi	r24, 0x4D	; 77
    53fa:	9a e0       	ldi	r25, 0x0A	; 10
    53fc:	9f 93       	push	r25
    53fe:	8f 93       	push	r24
    5400:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    5404:	80 e5       	ldi	r24, 0x50	; 80
    5406:	9a e0       	ldi	r25, 0x0A	; 10
    5408:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    540c:	8d b7       	in	r24, 0x3d	; 61
    540e:	9e b7       	in	r25, 0x3e	; 62
    5410:	4c 96       	adiw	r24, 0x1c	; 28
    5412:	0f b6       	in	r0, 0x3f	; 63
    5414:	f8 94       	cli
    5416:	9e bf       	out	0x3e, r25	; 62
    5418:	0f be       	out	0x3f, r0	; 63
    541a:	8d bf       	out	0x3d, r24	; 61
    541c:	04 c0       	rjmp	.+8      	; 0x5426 <command_common+0x2e8>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    541e:	82 e5       	ldi	r24, 0x52	; 82
    5420:	9a e0       	ldi	r25, 0x0A	; 10
    5422:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    5426:	81 e0       	ldi	r24, 0x01	; 1
    5428:	cd c0       	rjmp	.+410    	; 0x55c4 <command_common+0x486>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    542a:	80 91 e4 02 	lds	r24, 0x02E4
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    542e:	81 7f       	andi	r24, 0xF1	; 241
    5430:	8e 7f       	andi	r24, 0xFE	; 254
    5432:	80 93 e4 02 	sts	0x02E4, r24
            command_console_help();
    5436:	0e 94 43 27 	call	0x4e86	; 0x4e86 <command_console_help>
            print("C> ");
    543a:	8a e1       	ldi	r24, 0x1A	; 26
    543c:	97 e0       	ldi	r25, 0x07	; 7
    543e:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
            command_state = CONSOLE;
    5442:	81 e0       	ldi	r24, 0x01	; 1
    5444:	80 93 f3 02 	sts	0x02F3, r24
            break;
    5448:	bd c0       	rjmp	.+378    	; 0x55c4 <command_common+0x486>
        case KC_PAUSE:
            clear_keyboard();
    544a:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <clear_keyboard>
            print("\n\nbootloader... ");
    544e:	8e e1       	ldi	r24, 0x1E	; 30
    5450:	97 e0       	ldi	r25, 0x07	; 7
    5452:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    5456:	9f ef       	ldi	r25, 0xFF	; 255
    5458:	29 e6       	ldi	r18, 0x69	; 105
    545a:	88 e1       	ldi	r24, 0x18	; 24
    545c:	91 50       	subi	r25, 0x01	; 1
    545e:	20 40       	sbci	r18, 0x00	; 0
    5460:	80 40       	sbci	r24, 0x00	; 0
    5462:	e1 f7       	brne	.-8      	; 0x545c <command_common+0x31e>
    5464:	00 c0       	rjmp	.+0      	; 0x5466 <command_common+0x328>
    5466:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    5468:	0e 94 bf 22 	call	0x457e	; 0x457e <bootloader_jump>
    546c:	dc cf       	rjmp	.-72     	; 0x5426 <command_common+0x2e8>
            break;
        case KC_D:
            if (debug_enable) {
    546e:	80 91 e4 02 	lds	r24, 0x02E4
    5472:	80 ff       	sbrs	r24, 0
    5474:	09 c0       	rjmp	.+18     	; 0x5488 <command_common+0x34a>
                print("\ndebug: off\n");
    5476:	8f e2       	ldi	r24, 0x2F	; 47
    5478:	97 e0       	ldi	r25, 0x07	; 7
    547a:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
                debug_matrix   = false;
    547e:	80 91 e4 02 	lds	r24, 0x02E4
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    5482:	81 7f       	andi	r24, 0xF1	; 241
    5484:	8e 7f       	andi	r24, 0xFE	; 254
    5486:	17 c0       	rjmp	.+46     	; 0x54b6 <command_common+0x378>
            } else {
                print("\ndebug: on\n");
    5488:	8c e3       	ldi	r24, 0x3C	; 60
    548a:	97 e0       	ldi	r25, 0x07	; 7
    548c:	0f c0       	rjmp	.+30     	; 0x54ac <command_common+0x36e>
                debug_enable   = true;
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    548e:	90 91 e4 02 	lds	r25, 0x02E4
    5492:	91 fb       	bst	r25, 1
    5494:	88 27       	eor	r24, r24
    5496:	80 f9       	bld	r24, 0
    5498:	21 e0       	ldi	r18, 0x01	; 1
    549a:	82 27       	eor	r24, r18
    549c:	80 fb       	bst	r24, 0
    549e:	91 f9       	bld	r25, 1
    54a0:	90 93 e4 02 	sts	0x02E4, r25
            if (debug_matrix) {
    54a4:	88 23       	and	r24, r24
    54a6:	51 f0       	breq	.+20     	; 0x54bc <command_common+0x37e>
                print("\nmatrix: on\n");
    54a8:	88 e4       	ldi	r24, 0x48	; 72
    54aa:	97 e0       	ldi	r25, 0x07	; 7
    54ac:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
                debug_enable = true;
    54b0:	80 91 e4 02 	lds	r24, 0x02E4
    54b4:	81 60       	ori	r24, 0x01	; 1
    54b6:	80 93 e4 02 	sts	0x02E4, r24
    54ba:	b5 cf       	rjmp	.-150    	; 0x5426 <command_common+0x2e8>
            } else {
                print("\nmatrix: off\n");
    54bc:	85 e5       	ldi	r24, 0x55	; 85
    54be:	97 e0       	ldi	r25, 0x07	; 7
    54c0:	b0 cf       	rjmp	.-160    	; 0x5422 <command_common+0x2e4>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    54c2:	90 91 e4 02 	lds	r25, 0x02E4
    54c6:	92 fb       	bst	r25, 2
    54c8:	88 27       	eor	r24, r24
    54ca:	80 f9       	bld	r24, 0
    54cc:	21 e0       	ldi	r18, 0x01	; 1
    54ce:	82 27       	eor	r24, r18
    54d0:	80 fb       	bst	r24, 0
    54d2:	92 f9       	bld	r25, 2
    54d4:	90 93 e4 02 	sts	0x02E4, r25
            if (debug_keyboard) {
    54d8:	88 23       	and	r24, r24
    54da:	19 f0       	breq	.+6      	; 0x54e2 <command_common+0x3a4>
                print("\nkeyboard: on\n");
    54dc:	83 e6       	ldi	r24, 0x63	; 99
    54de:	97 e0       	ldi	r25, 0x07	; 7
    54e0:	e5 cf       	rjmp	.-54     	; 0x54ac <command_common+0x36e>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    54e2:	82 e7       	ldi	r24, 0x72	; 114
    54e4:	97 e0       	ldi	r25, 0x07	; 7
    54e6:	9d cf       	rjmp	.-198    	; 0x5422 <command_common+0x2e4>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    54e8:	90 91 e4 02 	lds	r25, 0x02E4
    54ec:	93 fb       	bst	r25, 3
    54ee:	88 27       	eor	r24, r24
    54f0:	80 f9       	bld	r24, 0
    54f2:	21 e0       	ldi	r18, 0x01	; 1
    54f4:	82 27       	eor	r24, r18
    54f6:	80 fb       	bst	r24, 0
    54f8:	93 f9       	bld	r25, 3
    54fa:	90 93 e4 02 	sts	0x02E4, r25
            if (debug_mouse) {
    54fe:	88 23       	and	r24, r24
    5500:	19 f0       	breq	.+6      	; 0x5508 <command_common+0x3ca>
                print("\nmouse: on\n");
    5502:	82 e8       	ldi	r24, 0x82	; 130
    5504:	97 e0       	ldi	r25, 0x07	; 7
    5506:	d2 cf       	rjmp	.-92     	; 0x54ac <command_common+0x36e>
                debug_enable = true;
            } else {
                print("\nmouse: off\n");
    5508:	8e e8       	ldi	r24, 0x8E	; 142
    550a:	97 e0       	ldi	r25, 0x07	; 7
    550c:	8a cf       	rjmp	.-236    	; 0x5422 <command_common+0x2e4>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    550e:	8b e9       	ldi	r24, 0x9B	; 155
    5510:	97 e0       	ldi	r25, 0x07	; 7
    5512:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    5516:	8a ea       	ldi	r24, 0xAA	; 170
    5518:	97 e0       	ldi	r25, 0x07	; 7
    551a:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    551e:	8d ec       	ldi	r24, 0xCD	; 205
    5520:	97 e0       	ldi	r25, 0x07	; 7
    5522:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    5526:	8b e0       	ldi	r24, 0x0B	; 11
    5528:	98 e0       	ldi	r25, 0x08	; 8
    552a:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
            /* build options */
            print("OPTIONS:"
    552e:	88 e3       	ldi	r24, 0x38	; 56
    5530:	98 e0       	ldi	r25, 0x08	; 8
    5532:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    5536:	88 e7       	ldi	r24, 0x78	; 120
    5538:	98 e0       	ldi	r25, 0x08	; 8
    553a:	73 cf       	rjmp	.-282    	; 0x5422 <command_common+0x2e4>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    553c:	84 ea       	ldi	r24, 0xA4	; 164
    553e:	98 e0       	ldi	r25, 0x08	; 8
    5540:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
            print_val_hex8(host_keyboard_leds());
    5544:	0e 94 7f 14 	call	0x28fe	; 0x28fe <host_keyboard_leds>
    5548:	1f 92       	push	r1
    554a:	8f 93       	push	r24
    554c:	82 eb       	ldi	r24, 0xB2	; 178
    554e:	98 e0       	ldi	r25, 0x08	; 8
    5550:	9f 93       	push	r25
    5552:	8f 93       	push	r24
    5554:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
            print_val_hex8(keyboard_protocol);
    5558:	80 91 15 01 	lds	r24, 0x0115
    555c:	1f 92       	push	r1
    555e:	8f 93       	push	r24
    5560:	8c ec       	ldi	r24, 0xCC	; 204
    5562:	98 e0       	ldi	r25, 0x08	; 8
    5564:	9f 93       	push	r25
    5566:	8f 93       	push	r24
    5568:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
            print_val_hex8(keyboard_idle);
    556c:	80 91 65 02 	lds	r24, 0x0265
    5570:	1f 92       	push	r1
    5572:	8f 93       	push	r24
    5574:	83 ee       	ldi	r24, 0xE3	; 227
    5576:	98 e0       	ldi	r25, 0x08	; 8
    5578:	9f 93       	push	r25
    557a:	8f 93       	push	r24
    557c:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
#endif
            print_val_hex32(timer_read32());
    5580:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <timer_read32>
    5584:	9f 93       	push	r25
    5586:	8f 93       	push	r24
    5588:	7f 93       	push	r23
    558a:	6f 93       	push	r22
    558c:	86 ef       	ldi	r24, 0xF6	; 246
    558e:	98 e0       	ldi	r25, 0x08	; 8
    5590:	9f 93       	push	r25
    5592:	8f 93       	push	r24
    5594:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    5598:	8d b7       	in	r24, 0x3d	; 61
    559a:	9e b7       	in	r25, 0x3e	; 62
    559c:	42 96       	adiw	r24, 0x12	; 18
    559e:	0f b6       	in	r0, 0x3f	; 63
    55a0:	f8 94       	cli
    55a2:	9e bf       	out	0x3e, r25	; 62
    55a4:	0f be       	out	0x3f, r0	; 63
    55a6:	8d bf       	out	0x3d, r24	; 61
    55a8:	3e cf       	rjmp	.-388    	; 0x5426 <command_common+0x2e8>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    55aa:	80 e0       	ldi	r24, 0x00	; 0
    55ac:	03 c0       	rjmp	.+6      	; 0x55b4 <command_common+0x476>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    55ae:	8d 51       	subi	r24, 0x1D	; 29
    55b0:	01 c0       	rjmp	.+2      	; 0x55b4 <command_common+0x476>
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    55b2:	89 53       	subi	r24, 0x39	; 57
    55b4:	0e 94 81 28 	call	0x5102	; 0x5102 <switch_default_layer>
    55b8:	36 cf       	rjmp	.-404    	; 0x5426 <command_common+0x2e8>
            break;
        default:
            print("?");
    55ba:	8d e0       	ldi	r24, 0x0D	; 13
    55bc:	99 e0       	ldi	r25, 0x09	; 9
    55be:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
            return false;
    55c2:	80 e0       	ldi	r24, 0x00	; 0
    }
    return true;
}
    55c4:	cf 91       	pop	r28
    55c6:	08 95       	ret

000055c8 <command_extra>:
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    (void)code;
    return false;
}
    55c8:	80 e0       	ldi	r24, 0x00	; 0
    55ca:	08 95       	ret

000055cc <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    55cc:	80 e0       	ldi	r24, 0x00	; 0
    55ce:	08 95       	ret

000055d0 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    55d0:	cf 93       	push	r28
    55d2:	c8 2f       	mov	r28, r24
    switch (command_state) {
    55d4:	80 91 f3 02 	lds	r24, 0x02F3
    55d8:	81 30       	cpi	r24, 0x01	; 1
    55da:	71 f0       	breq	.+28     	; 0x55f8 <command_proc+0x28>
    55dc:	20 f0       	brcs	.+8      	; 0x55e6 <command_proc+0x16>
    55de:	82 30       	cpi	r24, 0x02	; 2
    55e0:	09 f0       	breq	.+2      	; 0x55e4 <command_proc+0x14>
    55e2:	43 c1       	rjmp	.+646    	; 0x586a <command_proc+0x29a>
    55e4:	47 c0       	rjmp	.+142    	; 0x5674 <command_proc+0xa4>
        case ONESHOT:
            if (!IS_COMMAND())
    55e6:	a0 91 16 01 	lds	r26, 0x0116
    55ea:	b0 91 17 01 	lds	r27, 0x0117
    55ee:	8c 91       	ld	r24, X
    55f0:	82 31       	cpi	r24, 0x12	; 18
    55f2:	09 f0       	breq	.+2      	; 0x55f6 <command_proc+0x26>
    55f4:	3c c1       	rjmp	.+632    	; 0x586e <command_proc+0x29e>
    55f6:	07 c0       	rjmp	.+14     	; 0x5606 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    55f8:	a0 91 16 01 	lds	r26, 0x0116
    55fc:	b0 91 17 01 	lds	r27, 0x0117
    5600:	8c 91       	ld	r24, X
    5602:	82 31       	cpi	r24, 0x12	; 18
    5604:	49 f4       	brne	.+18     	; 0x5618 <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    5606:	8c 2f       	mov	r24, r28
    5608:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <command_extra>
    560c:	81 11       	cpse	r24, r1
    560e:	2e c0       	rjmp	.+92     	; 0x566c <command_proc+0x9c>
    5610:	8c 2f       	mov	r24, r28
    5612:	0e 94 9f 28 	call	0x513e	; 0x513e <command_common>
    5616:	2c c0       	rjmp	.+88     	; 0x5670 <command_proc+0xa0>
            else
                return (command_console_extra(code) || command_console(code));
    5618:	8c 2f       	mov	r24, r28
    561a:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <command_console_extra>
    561e:	81 11       	cpse	r24, r1
    5620:	25 c0       	rjmp	.+74     	; 0x566c <command_proc+0x9c>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    5622:	c4 31       	cpi	r28, 0x14	; 20
    5624:	89 f0       	breq	.+34     	; 0x5648 <command_proc+0x78>
    5626:	28 f4       	brcc	.+10     	; 0x5632 <command_proc+0x62>
    5628:	cb 30       	cpi	r28, 0x0B	; 11
    562a:	39 f0       	breq	.+14     	; 0x563a <command_proc+0x6a>
    562c:	c0 31       	cpi	r28, 0x10	; 16
    562e:	c9 f4       	brne	.+50     	; 0x5662 <command_proc+0x92>
    5630:	0e c0       	rjmp	.+28     	; 0x564e <command_proc+0x7e>
    5632:	c9 32       	cpi	r28, 0x29	; 41
    5634:	49 f0       	breq	.+18     	; 0x5648 <command_proc+0x78>
    5636:	c8 33       	cpi	r28, 0x38	; 56
    5638:	a1 f4       	brne	.+40     	; 0x5662 <command_proc+0x92>
        case KC_H:
        case KC_SLASH: /* ? */
            command_console_help();
    563a:	0e 94 43 27 	call	0x4e86	; 0x4e86 <command_console_help>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    563e:	8b e1       	ldi	r24, 0x1B	; 27
    5640:	9b e0       	ldi	r25, 0x0B	; 11
    5642:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    5646:	12 c0       	rjmp	.+36     	; 0x566c <command_proc+0x9c>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    5648:	10 92 f3 02 	sts	0x02F3, r1
    564c:	12 c1       	rjmp	.+548    	; 0x5872 <command_proc+0x2a2>
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    564e:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <mousekey_console_help>
            print("M> ");
    5652:	8f e1       	ldi	r24, 0x1F	; 31
    5654:	9b e0       	ldi	r25, 0x0B	; 11
    5656:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
            command_state = MOUSEKEY;
    565a:	82 e0       	ldi	r24, 0x02	; 2
    565c:	80 93 f3 02 	sts	0x02F3, r24
    5660:	05 c0       	rjmp	.+10     	; 0x566c <command_proc+0x9c>
            return true;
#endif
        default:
            print("?");
    5662:	83 e2       	ldi	r24, 0x23	; 35
    5664:	9b e0       	ldi	r25, 0x0B	; 11
    5666:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    566a:	03 c1       	rjmp	.+518    	; 0x5872 <command_proc+0x2a2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    566c:	81 e0       	ldi	r24, 0x01	; 1
    566e:	90 e0       	ldi	r25, 0x00	; 0
    5670:	81 70       	andi	r24, 0x01	; 1
    5672:	02 c1       	rjmp	.+516    	; 0x5878 <command_proc+0x2a8>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5674:	c4 32       	cpi	r28, 0x24	; 36
    5676:	80 f4       	brcc	.+32     	; 0x5698 <command_proc+0xc8>
    5678:	ce 31       	cpi	r28, 0x1E	; 30
    567a:	08 f0       	brcs	.+2      	; 0x567e <command_proc+0xae>
    567c:	ac c0       	rjmp	.+344    	; 0x57d6 <command_proc+0x206>
    567e:	cb 30       	cpi	r28, 0x0B	; 11
    5680:	f9 f0       	breq	.+62     	; 0x56c0 <command_proc+0xf0>
    5682:	20 f4       	brcc	.+8      	; 0x568c <command_proc+0xbc>
    5684:	c7 30       	cpi	r28, 0x07	; 7
    5686:	09 f0       	breq	.+2      	; 0x568a <command_proc+0xba>
    5688:	d6 c0       	rjmp	.+428    	; 0x5836 <command_proc+0x266>
    568a:	be c0       	rjmp	.+380    	; 0x5808 <command_proc+0x238>
    568c:	c3 31       	cpi	r28, 0x13	; 19
    568e:	51 f1       	breq	.+84     	; 0x56e4 <command_proc+0x114>
    5690:	c4 31       	cpi	r28, 0x14	; 20
    5692:	09 f0       	breq	.+2      	; 0x5696 <command_proc+0xc6>
    5694:	d0 c0       	rjmp	.+416    	; 0x5836 <command_proc+0x266>
    5696:	17 c0       	rjmp	.+46     	; 0x56c6 <command_proc+0xf6>
    5698:	cb 34       	cpi	r28, 0x4B	; 75
    569a:	09 f4       	brne	.+2      	; 0x569e <command_proc+0xce>
    569c:	a9 c0       	rjmp	.+338    	; 0x57f0 <command_proc+0x220>
    569e:	30 f4       	brcc	.+12     	; 0x56ac <command_proc+0xdc>
    56a0:	c9 32       	cpi	r28, 0x29	; 41
    56a2:	89 f0       	breq	.+34     	; 0x56c6 <command_proc+0xf6>
    56a4:	c8 33       	cpi	r28, 0x38	; 56
    56a6:	09 f0       	breq	.+2      	; 0x56aa <command_proc+0xda>
    56a8:	c6 c0       	rjmp	.+396    	; 0x5836 <command_proc+0x266>
    56aa:	0a c0       	rjmp	.+20     	; 0x56c0 <command_proc+0xf0>
    56ac:	c1 35       	cpi	r28, 0x51	; 81
    56ae:	09 f4       	brne	.+2      	; 0x56b2 <command_proc+0xe2>
    56b0:	9d c0       	rjmp	.+314    	; 0x57ec <command_proc+0x21c>
    56b2:	c2 35       	cpi	r28, 0x52	; 82
    56b4:	09 f4       	brne	.+2      	; 0x56b8 <command_proc+0xe8>
    56b6:	98 c0       	rjmp	.+304    	; 0x57e8 <command_proc+0x218>
    56b8:	ce 34       	cpi	r28, 0x4E	; 78
    56ba:	09 f0       	breq	.+2      	; 0x56be <command_proc+0xee>
    56bc:	bc c0       	rjmp	.+376    	; 0x5836 <command_proc+0x266>
    56be:	9e c0       	rjmp	.+316    	; 0x57fc <command_proc+0x22c>
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    56c0:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <mousekey_console_help>
    56c4:	bb c0       	rjmp	.+374    	; 0x583c <command_proc+0x26c>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    56c6:	80 91 f4 02 	lds	r24, 0x02F4
    56ca:	88 23       	and	r24, r24
    56cc:	19 f0       	breq	.+6      	; 0x56d4 <command_proc+0x104>
                mousekey_param = 0;
    56ce:	10 92 f4 02 	sts	0x02F4, r1
    56d2:	b4 c0       	rjmp	.+360    	; 0x583c <command_proc+0x26c>
            } else {
                print("C> ");
    56d4:	8e e6       	ldi	r24, 0x6E	; 110
    56d6:	9c e0       	ldi	r25, 0x0C	; 12
    56d8:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
                command_state = CONSOLE;
    56dc:	81 e0       	ldi	r24, 0x01	; 1
    56de:	80 93 f3 02 	sts	0x02F3, r24
    56e2:	ca c0       	rjmp	.+404    	; 0x5878 <command_proc+0x2a8>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    56e4:	8a e8       	ldi	r24, 0x8A	; 138
    56e6:	9c e0       	ldi	r25, 0x0C	; 12
    56e8:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    56ec:	88 e9       	ldi	r24, 0x98	; 152
    56ee:	9c e0       	ldi	r25, 0x0C	; 12
    56f0:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    56f4:	80 91 1d 01 	lds	r24, 0x011D
    56f8:	1f 92       	push	r1
    56fa:	8f 93       	push	r24
    56fc:	8a ea       	ldi	r24, 0xAA	; 170
    56fe:	9c e0       	ldi	r25, 0x0C	; 12
    5700:	9f 93       	push	r25
    5702:	8f 93       	push	r24
    5704:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    5708:	8d ea       	ldi	r24, 0xAD	; 173
    570a:	9c e0       	ldi	r25, 0x0C	; 12
    570c:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5710:	8f ea       	ldi	r24, 0xAF	; 175
    5712:	9c e0       	ldi	r25, 0x0C	; 12
    5714:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    5718:	80 91 1c 01 	lds	r24, 0x011C
    571c:	1f 92       	push	r1
    571e:	8f 93       	push	r24
    5720:	81 ec       	ldi	r24, 0xC1	; 193
    5722:	9c e0       	ldi	r25, 0x0C	; 12
    5724:	9f 93       	push	r25
    5726:	8f 93       	push	r24
    5728:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    572c:	84 ec       	ldi	r24, 0xC4	; 196
    572e:	9c e0       	ldi	r25, 0x0C	; 12
    5730:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    5734:	86 ec       	ldi	r24, 0xC6	; 198
    5736:	9c e0       	ldi	r25, 0x0C	; 12
    5738:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    573c:	80 91 1b 01 	lds	r24, 0x011B
    5740:	1f 92       	push	r1
    5742:	8f 93       	push	r24
    5744:	85 ed       	ldi	r24, 0xD5	; 213
    5746:	9c e0       	ldi	r25, 0x0C	; 12
    5748:	9f 93       	push	r25
    574a:	8f 93       	push	r24
    574c:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    5750:	88 ed       	ldi	r24, 0xD8	; 216
    5752:	9c e0       	ldi	r25, 0x0C	; 12
    5754:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    5758:	8a ed       	ldi	r24, 0xDA	; 218
    575a:	9c e0       	ldi	r25, 0x0C	; 12
    575c:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    5760:	80 91 1a 01 	lds	r24, 0x011A
    5764:	1f 92       	push	r1
    5766:	8f 93       	push	r24
    5768:	8b ee       	ldi	r24, 0xEB	; 235
    576a:	9c e0       	ldi	r25, 0x0C	; 12
    576c:	9f 93       	push	r25
    576e:	8f 93       	push	r24
    5770:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    5774:	8e ee       	ldi	r24, 0xEE	; 238
    5776:	9c e0       	ldi	r25, 0x0C	; 12
    5778:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    577c:	80 ef       	ldi	r24, 0xF0	; 240
    577e:	9c e0       	ldi	r25, 0x0C	; 12
    5780:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    5784:	80 91 19 01 	lds	r24, 0x0119
    5788:	1f 92       	push	r1
    578a:	8f 93       	push	r24
    578c:	85 e0       	ldi	r24, 0x05	; 5
    578e:	9d e0       	ldi	r25, 0x0D	; 13
    5790:	9f 93       	push	r25
    5792:	8f 93       	push	r24
    5794:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    5798:	88 e0       	ldi	r24, 0x08	; 8
    579a:	9d e0       	ldi	r25, 0x0D	; 13
    579c:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    57a0:	8a e0       	ldi	r24, 0x0A	; 10
    57a2:	9d e0       	ldi	r25, 0x0D	; 13
    57a4:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    57a8:	80 91 18 01 	lds	r24, 0x0118
    57ac:	1f 92       	push	r1
    57ae:	8f 93       	push	r24
    57b0:	81 e2       	ldi	r24, 0x21	; 33
    57b2:	9d e0       	ldi	r25, 0x0D	; 13
    57b4:	9f 93       	push	r25
    57b6:	8f 93       	push	r24
    57b8:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    57bc:	84 e2       	ldi	r24, 0x24	; 36
    57be:	9d e0       	ldi	r25, 0x0D	; 13
    57c0:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    57c4:	8d b7       	in	r24, 0x3d	; 61
    57c6:	9e b7       	in	r25, 0x3e	; 62
    57c8:	48 96       	adiw	r24, 0x18	; 24
    57ca:	0f b6       	in	r0, 0x3f	; 63
    57cc:	f8 94       	cli
    57ce:	9e bf       	out	0x3e, r25	; 62
    57d0:	0f be       	out	0x3f, r0	; 63
    57d2:	8d bf       	out	0x3d, r24	; 61
    57d4:	33 c0       	rjmp	.+102    	; 0x583c <command_proc+0x26c>
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    57d6:	ce 51       	subi	r28, 0x1E	; 30
    57d8:	ec 2f       	mov	r30, r28
    57da:	f0 e0       	ldi	r31, 0x00	; 0
    57dc:	ee 5c       	subi	r30, 0xCE	; 206
    57de:	fe 4f       	sbci	r31, 0xFE	; 254
    57e0:	80 81       	ld	r24, Z
    57e2:	80 93 f4 02 	sts	0x02F4, r24
    57e6:	2a c0       	rjmp	.+84     	; 0x583c <command_proc+0x26c>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    57e8:	61 e0       	ldi	r22, 0x01	; 1
    57ea:	03 c0       	rjmp	.+6      	; 0x57f2 <command_proc+0x222>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    57ec:	61 e0       	ldi	r22, 0x01	; 1
    57ee:	07 c0       	rjmp	.+14     	; 0x57fe <command_proc+0x22e>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    57f0:	6a e0       	ldi	r22, 0x0A	; 10
    57f2:	80 91 f4 02 	lds	r24, 0x02F4
    57f6:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <mousekey_param_inc>
    57fa:	20 c0       	rjmp	.+64     	; 0x583c <command_proc+0x26c>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    57fc:	6a e0       	ldi	r22, 0x0A	; 10
    57fe:	80 91 f4 02 	lds	r24, 0x02F4
    5802:	0e 94 02 28 	call	0x5004	; 0x5004 <mousekey_param_dec>
    5806:	1a c0       	rjmp	.+52     	; 0x583c <command_proc+0x26c>
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    5808:	8e e1       	ldi	r24, 0x1E	; 30
    580a:	80 93 1d 01 	sts	0x011D, r24
            mk_interval = MOUSEKEY_INTERVAL;
    580e:	82 e3       	ldi	r24, 0x32	; 50
    5810:	80 93 1c 01 	sts	0x011C, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    5814:	8a e0       	ldi	r24, 0x0A	; 10
    5816:	80 93 1b 01 	sts	0x011B, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    581a:	84 e1       	ldi	r24, 0x14	; 20
    581c:	80 93 1a 01 	sts	0x011A, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5820:	88 e0       	ldi	r24, 0x08	; 8
    5822:	80 93 19 01 	sts	0x0119, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    5826:	88 e2       	ldi	r24, 0x28	; 40
    5828:	80 93 18 01 	sts	0x0118, r24
            print("set default\n");
    582c:	82 e7       	ldi	r24, 0x72	; 114
    582e:	9c e0       	ldi	r25, 0x0C	; 12
    5830:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
    5834:	03 c0       	rjmp	.+6      	; 0x583c <command_proc+0x26c>
            break;
        default:
            print("?");
    5836:	8f e7       	ldi	r24, 0x7F	; 127
    5838:	9c e0       	ldi	r25, 0x0C	; 12
    583a:	13 c0       	rjmp	.+38     	; 0x5862 <command_proc+0x292>
            return false;
    }
    if (mousekey_param) {
    583c:	80 91 f4 02 	lds	r24, 0x02F4
    5840:	88 23       	and	r24, r24
    5842:	69 f0       	breq	.+26     	; 0x585e <command_proc+0x28e>
        xprintf("M%d> ", mousekey_param);
    5844:	1f 92       	push	r1
    5846:	8f 93       	push	r24
    5848:	81 e8       	ldi	r24, 0x81	; 129
    584a:	9c e0       	ldi	r25, 0x0C	; 12
    584c:	9f 93       	push	r25
    584e:	8f 93       	push	r24
    5850:	0e 94 fd 07 	call	0xffa	; 0xffa <__xprintf>
    5854:	0f 90       	pop	r0
    5856:	0f 90       	pop	r0
    5858:	0f 90       	pop	r0
    585a:	0f 90       	pop	r0
    585c:	04 c0       	rjmp	.+8      	; 0x5866 <command_proc+0x296>
    } else {
        print("M>" );
    585e:	87 e8       	ldi	r24, 0x87	; 135
    5860:	9c e0       	ldi	r25, 0x0C	; 12
    5862:	0e 94 64 07 	call	0xec8	; 0xec8 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    5866:	81 e0       	ldi	r24, 0x01	; 1
    5868:	07 c0       	rjmp	.+14     	; 0x5878 <command_proc+0x2a8>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    586a:	10 92 f3 02 	sts	0x02F3, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    586e:	80 e0       	ldi	r24, 0x00	; 0
    5870:	03 c0       	rjmp	.+6      	; 0x5878 <command_proc+0x2a8>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5872:	80 e0       	ldi	r24, 0x00	; 0
    5874:	90 e0       	ldi	r25, 0x00	; 0
    5876:	fc ce       	rjmp	.-520    	; 0x5670 <command_proc+0xa0>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    5878:	cf 91       	pop	r28
    587a:	08 95       	ret

0000587c <__fixsfsi>:
    587c:	04 d0       	rcall	.+8      	; 0x5886 <__fixunssfsi>
    587e:	68 94       	set
    5880:	b1 11       	cpse	r27, r1
    5882:	8d c0       	rjmp	.+282    	; 0x599e <__fp_szero>
    5884:	08 95       	ret

00005886 <__fixunssfsi>:
    5886:	70 d0       	rcall	.+224    	; 0x5968 <__fp_splitA>
    5888:	88 f0       	brcs	.+34     	; 0x58ac <__fixunssfsi+0x26>
    588a:	9f 57       	subi	r25, 0x7F	; 127
    588c:	90 f0       	brcs	.+36     	; 0x58b2 <__fixunssfsi+0x2c>
    588e:	b9 2f       	mov	r27, r25
    5890:	99 27       	eor	r25, r25
    5892:	b7 51       	subi	r27, 0x17	; 23
    5894:	a0 f0       	brcs	.+40     	; 0x58be <__fixunssfsi+0x38>
    5896:	d1 f0       	breq	.+52     	; 0x58cc <__fixunssfsi+0x46>
    5898:	66 0f       	add	r22, r22
    589a:	77 1f       	adc	r23, r23
    589c:	88 1f       	adc	r24, r24
    589e:	99 1f       	adc	r25, r25
    58a0:	1a f0       	brmi	.+6      	; 0x58a8 <__fixunssfsi+0x22>
    58a2:	ba 95       	dec	r27
    58a4:	c9 f7       	brne	.-14     	; 0x5898 <__fixunssfsi+0x12>
    58a6:	12 c0       	rjmp	.+36     	; 0x58cc <__fixunssfsi+0x46>
    58a8:	b1 30       	cpi	r27, 0x01	; 1
    58aa:	81 f0       	breq	.+32     	; 0x58cc <__fixunssfsi+0x46>
    58ac:	77 d0       	rcall	.+238    	; 0x599c <__fp_zero>
    58ae:	b1 e0       	ldi	r27, 0x01	; 1
    58b0:	08 95       	ret
    58b2:	74 c0       	rjmp	.+232    	; 0x599c <__fp_zero>
    58b4:	67 2f       	mov	r22, r23
    58b6:	78 2f       	mov	r23, r24
    58b8:	88 27       	eor	r24, r24
    58ba:	b8 5f       	subi	r27, 0xF8	; 248
    58bc:	39 f0       	breq	.+14     	; 0x58cc <__fixunssfsi+0x46>
    58be:	b9 3f       	cpi	r27, 0xF9	; 249
    58c0:	cc f3       	brlt	.-14     	; 0x58b4 <__fixunssfsi+0x2e>
    58c2:	86 95       	lsr	r24
    58c4:	77 95       	ror	r23
    58c6:	67 95       	ror	r22
    58c8:	b3 95       	inc	r27
    58ca:	d9 f7       	brne	.-10     	; 0x58c2 <__fixunssfsi+0x3c>
    58cc:	3e f4       	brtc	.+14     	; 0x58dc <__fixunssfsi+0x56>
    58ce:	90 95       	com	r25
    58d0:	80 95       	com	r24
    58d2:	70 95       	com	r23
    58d4:	61 95       	neg	r22
    58d6:	7f 4f       	sbci	r23, 0xFF	; 255
    58d8:	8f 4f       	sbci	r24, 0xFF	; 255
    58da:	9f 4f       	sbci	r25, 0xFF	; 255
    58dc:	08 95       	ret

000058de <__floatunsisf>:
    58de:	e8 94       	clt
    58e0:	09 c0       	rjmp	.+18     	; 0x58f4 <__floatsisf+0x12>

000058e2 <__floatsisf>:
    58e2:	97 fb       	bst	r25, 7
    58e4:	3e f4       	brtc	.+14     	; 0x58f4 <__floatsisf+0x12>
    58e6:	90 95       	com	r25
    58e8:	80 95       	com	r24
    58ea:	70 95       	com	r23
    58ec:	61 95       	neg	r22
    58ee:	7f 4f       	sbci	r23, 0xFF	; 255
    58f0:	8f 4f       	sbci	r24, 0xFF	; 255
    58f2:	9f 4f       	sbci	r25, 0xFF	; 255
    58f4:	99 23       	and	r25, r25
    58f6:	a9 f0       	breq	.+42     	; 0x5922 <__floatsisf+0x40>
    58f8:	f9 2f       	mov	r31, r25
    58fa:	96 e9       	ldi	r25, 0x96	; 150
    58fc:	bb 27       	eor	r27, r27
    58fe:	93 95       	inc	r25
    5900:	f6 95       	lsr	r31
    5902:	87 95       	ror	r24
    5904:	77 95       	ror	r23
    5906:	67 95       	ror	r22
    5908:	b7 95       	ror	r27
    590a:	f1 11       	cpse	r31, r1
    590c:	f8 cf       	rjmp	.-16     	; 0x58fe <__floatsisf+0x1c>
    590e:	fa f4       	brpl	.+62     	; 0x594e <__floatsisf+0x6c>
    5910:	bb 0f       	add	r27, r27
    5912:	11 f4       	brne	.+4      	; 0x5918 <__floatsisf+0x36>
    5914:	60 ff       	sbrs	r22, 0
    5916:	1b c0       	rjmp	.+54     	; 0x594e <__floatsisf+0x6c>
    5918:	6f 5f       	subi	r22, 0xFF	; 255
    591a:	7f 4f       	sbci	r23, 0xFF	; 255
    591c:	8f 4f       	sbci	r24, 0xFF	; 255
    591e:	9f 4f       	sbci	r25, 0xFF	; 255
    5920:	16 c0       	rjmp	.+44     	; 0x594e <__floatsisf+0x6c>
    5922:	88 23       	and	r24, r24
    5924:	11 f0       	breq	.+4      	; 0x592a <__floatsisf+0x48>
    5926:	96 e9       	ldi	r25, 0x96	; 150
    5928:	11 c0       	rjmp	.+34     	; 0x594c <__floatsisf+0x6a>
    592a:	77 23       	and	r23, r23
    592c:	21 f0       	breq	.+8      	; 0x5936 <__floatsisf+0x54>
    592e:	9e e8       	ldi	r25, 0x8E	; 142
    5930:	87 2f       	mov	r24, r23
    5932:	76 2f       	mov	r23, r22
    5934:	05 c0       	rjmp	.+10     	; 0x5940 <__floatsisf+0x5e>
    5936:	66 23       	and	r22, r22
    5938:	71 f0       	breq	.+28     	; 0x5956 <__floatsisf+0x74>
    593a:	96 e8       	ldi	r25, 0x86	; 134
    593c:	86 2f       	mov	r24, r22
    593e:	70 e0       	ldi	r23, 0x00	; 0
    5940:	60 e0       	ldi	r22, 0x00	; 0
    5942:	2a f0       	brmi	.+10     	; 0x594e <__floatsisf+0x6c>
    5944:	9a 95       	dec	r25
    5946:	66 0f       	add	r22, r22
    5948:	77 1f       	adc	r23, r23
    594a:	88 1f       	adc	r24, r24
    594c:	da f7       	brpl	.-10     	; 0x5944 <__floatsisf+0x62>
    594e:	88 0f       	add	r24, r24
    5950:	96 95       	lsr	r25
    5952:	87 95       	ror	r24
    5954:	97 f9       	bld	r25, 7
    5956:	08 95       	ret

00005958 <__fp_split3>:
    5958:	57 fd       	sbrc	r21, 7
    595a:	90 58       	subi	r25, 0x80	; 128
    595c:	44 0f       	add	r20, r20
    595e:	55 1f       	adc	r21, r21
    5960:	59 f0       	breq	.+22     	; 0x5978 <__fp_splitA+0x10>
    5962:	5f 3f       	cpi	r21, 0xFF	; 255
    5964:	71 f0       	breq	.+28     	; 0x5982 <__fp_splitA+0x1a>
    5966:	47 95       	ror	r20

00005968 <__fp_splitA>:
    5968:	88 0f       	add	r24, r24
    596a:	97 fb       	bst	r25, 7
    596c:	99 1f       	adc	r25, r25
    596e:	61 f0       	breq	.+24     	; 0x5988 <__fp_splitA+0x20>
    5970:	9f 3f       	cpi	r25, 0xFF	; 255
    5972:	79 f0       	breq	.+30     	; 0x5992 <__fp_splitA+0x2a>
    5974:	87 95       	ror	r24
    5976:	08 95       	ret
    5978:	12 16       	cp	r1, r18
    597a:	13 06       	cpc	r1, r19
    597c:	14 06       	cpc	r1, r20
    597e:	55 1f       	adc	r21, r21
    5980:	f2 cf       	rjmp	.-28     	; 0x5966 <__fp_split3+0xe>
    5982:	46 95       	lsr	r20
    5984:	f1 df       	rcall	.-30     	; 0x5968 <__fp_splitA>
    5986:	08 c0       	rjmp	.+16     	; 0x5998 <__fp_splitA+0x30>
    5988:	16 16       	cp	r1, r22
    598a:	17 06       	cpc	r1, r23
    598c:	18 06       	cpc	r1, r24
    598e:	99 1f       	adc	r25, r25
    5990:	f1 cf       	rjmp	.-30     	; 0x5974 <__fp_splitA+0xc>
    5992:	86 95       	lsr	r24
    5994:	71 05       	cpc	r23, r1
    5996:	61 05       	cpc	r22, r1
    5998:	08 94       	sec
    599a:	08 95       	ret

0000599c <__fp_zero>:
    599c:	e8 94       	clt

0000599e <__fp_szero>:
    599e:	bb 27       	eor	r27, r27
    59a0:	66 27       	eor	r22, r22
    59a2:	77 27       	eor	r23, r23
    59a4:	cb 01       	movw	r24, r22
    59a6:	97 f9       	bld	r25, 7
    59a8:	08 95       	ret

000059aa <__mulsf3>:
    59aa:	0b d0       	rcall	.+22     	; 0x59c2 <__mulsf3x>
    59ac:	78 c0       	rjmp	.+240    	; 0x5a9e <__fp_round>
    59ae:	69 d0       	rcall	.+210    	; 0x5a82 <__fp_pscA>
    59b0:	28 f0       	brcs	.+10     	; 0x59bc <__mulsf3+0x12>
    59b2:	6e d0       	rcall	.+220    	; 0x5a90 <__fp_pscB>
    59b4:	18 f0       	brcs	.+6      	; 0x59bc <__mulsf3+0x12>
    59b6:	95 23       	and	r25, r21
    59b8:	09 f0       	breq	.+2      	; 0x59bc <__mulsf3+0x12>
    59ba:	5a c0       	rjmp	.+180    	; 0x5a70 <__fp_inf>
    59bc:	5f c0       	rjmp	.+190    	; 0x5a7c <__fp_nan>
    59be:	11 24       	eor	r1, r1
    59c0:	ee cf       	rjmp	.-36     	; 0x599e <__fp_szero>

000059c2 <__mulsf3x>:
    59c2:	ca df       	rcall	.-108    	; 0x5958 <__fp_split3>
    59c4:	a0 f3       	brcs	.-24     	; 0x59ae <__mulsf3+0x4>

000059c6 <__mulsf3_pse>:
    59c6:	95 9f       	mul	r25, r21
    59c8:	d1 f3       	breq	.-12     	; 0x59be <__mulsf3+0x14>
    59ca:	95 0f       	add	r25, r21
    59cc:	50 e0       	ldi	r21, 0x00	; 0
    59ce:	55 1f       	adc	r21, r21
    59d0:	62 9f       	mul	r22, r18
    59d2:	f0 01       	movw	r30, r0
    59d4:	72 9f       	mul	r23, r18
    59d6:	bb 27       	eor	r27, r27
    59d8:	f0 0d       	add	r31, r0
    59da:	b1 1d       	adc	r27, r1
    59dc:	63 9f       	mul	r22, r19
    59de:	aa 27       	eor	r26, r26
    59e0:	f0 0d       	add	r31, r0
    59e2:	b1 1d       	adc	r27, r1
    59e4:	aa 1f       	adc	r26, r26
    59e6:	64 9f       	mul	r22, r20
    59e8:	66 27       	eor	r22, r22
    59ea:	b0 0d       	add	r27, r0
    59ec:	a1 1d       	adc	r26, r1
    59ee:	66 1f       	adc	r22, r22
    59f0:	82 9f       	mul	r24, r18
    59f2:	22 27       	eor	r18, r18
    59f4:	b0 0d       	add	r27, r0
    59f6:	a1 1d       	adc	r26, r1
    59f8:	62 1f       	adc	r22, r18
    59fa:	73 9f       	mul	r23, r19
    59fc:	b0 0d       	add	r27, r0
    59fe:	a1 1d       	adc	r26, r1
    5a00:	62 1f       	adc	r22, r18
    5a02:	83 9f       	mul	r24, r19
    5a04:	a0 0d       	add	r26, r0
    5a06:	61 1d       	adc	r22, r1
    5a08:	22 1f       	adc	r18, r18
    5a0a:	74 9f       	mul	r23, r20
    5a0c:	33 27       	eor	r19, r19
    5a0e:	a0 0d       	add	r26, r0
    5a10:	61 1d       	adc	r22, r1
    5a12:	23 1f       	adc	r18, r19
    5a14:	84 9f       	mul	r24, r20
    5a16:	60 0d       	add	r22, r0
    5a18:	21 1d       	adc	r18, r1
    5a1a:	82 2f       	mov	r24, r18
    5a1c:	76 2f       	mov	r23, r22
    5a1e:	6a 2f       	mov	r22, r26
    5a20:	11 24       	eor	r1, r1
    5a22:	9f 57       	subi	r25, 0x7F	; 127
    5a24:	50 40       	sbci	r21, 0x00	; 0
    5a26:	8a f0       	brmi	.+34     	; 0x5a4a <__mulsf3_pse+0x84>
    5a28:	e1 f0       	breq	.+56     	; 0x5a62 <__mulsf3_pse+0x9c>
    5a2a:	88 23       	and	r24, r24
    5a2c:	4a f0       	brmi	.+18     	; 0x5a40 <__mulsf3_pse+0x7a>
    5a2e:	ee 0f       	add	r30, r30
    5a30:	ff 1f       	adc	r31, r31
    5a32:	bb 1f       	adc	r27, r27
    5a34:	66 1f       	adc	r22, r22
    5a36:	77 1f       	adc	r23, r23
    5a38:	88 1f       	adc	r24, r24
    5a3a:	91 50       	subi	r25, 0x01	; 1
    5a3c:	50 40       	sbci	r21, 0x00	; 0
    5a3e:	a9 f7       	brne	.-22     	; 0x5a2a <__mulsf3_pse+0x64>
    5a40:	9e 3f       	cpi	r25, 0xFE	; 254
    5a42:	51 05       	cpc	r21, r1
    5a44:	70 f0       	brcs	.+28     	; 0x5a62 <__mulsf3_pse+0x9c>
    5a46:	14 c0       	rjmp	.+40     	; 0x5a70 <__fp_inf>
    5a48:	aa cf       	rjmp	.-172    	; 0x599e <__fp_szero>
    5a4a:	5f 3f       	cpi	r21, 0xFF	; 255
    5a4c:	ec f3       	brlt	.-6      	; 0x5a48 <__mulsf3_pse+0x82>
    5a4e:	98 3e       	cpi	r25, 0xE8	; 232
    5a50:	dc f3       	brlt	.-10     	; 0x5a48 <__mulsf3_pse+0x82>
    5a52:	86 95       	lsr	r24
    5a54:	77 95       	ror	r23
    5a56:	67 95       	ror	r22
    5a58:	b7 95       	ror	r27
    5a5a:	f7 95       	ror	r31
    5a5c:	e7 95       	ror	r30
    5a5e:	9f 5f       	subi	r25, 0xFF	; 255
    5a60:	c1 f7       	brne	.-16     	; 0x5a52 <__mulsf3_pse+0x8c>
    5a62:	fe 2b       	or	r31, r30
    5a64:	88 0f       	add	r24, r24
    5a66:	91 1d       	adc	r25, r1
    5a68:	96 95       	lsr	r25
    5a6a:	87 95       	ror	r24
    5a6c:	97 f9       	bld	r25, 7
    5a6e:	08 95       	ret

00005a70 <__fp_inf>:
    5a70:	97 f9       	bld	r25, 7
    5a72:	9f 67       	ori	r25, 0x7F	; 127
    5a74:	80 e8       	ldi	r24, 0x80	; 128
    5a76:	70 e0       	ldi	r23, 0x00	; 0
    5a78:	60 e0       	ldi	r22, 0x00	; 0
    5a7a:	08 95       	ret

00005a7c <__fp_nan>:
    5a7c:	9f ef       	ldi	r25, 0xFF	; 255
    5a7e:	80 ec       	ldi	r24, 0xC0	; 192
    5a80:	08 95       	ret

00005a82 <__fp_pscA>:
    5a82:	00 24       	eor	r0, r0
    5a84:	0a 94       	dec	r0
    5a86:	16 16       	cp	r1, r22
    5a88:	17 06       	cpc	r1, r23
    5a8a:	18 06       	cpc	r1, r24
    5a8c:	09 06       	cpc	r0, r25
    5a8e:	08 95       	ret

00005a90 <__fp_pscB>:
    5a90:	00 24       	eor	r0, r0
    5a92:	0a 94       	dec	r0
    5a94:	12 16       	cp	r1, r18
    5a96:	13 06       	cpc	r1, r19
    5a98:	14 06       	cpc	r1, r20
    5a9a:	05 06       	cpc	r0, r21
    5a9c:	08 95       	ret

00005a9e <__fp_round>:
    5a9e:	09 2e       	mov	r0, r25
    5aa0:	03 94       	inc	r0
    5aa2:	00 0c       	add	r0, r0
    5aa4:	11 f4       	brne	.+4      	; 0x5aaa <__fp_round+0xc>
    5aa6:	88 23       	and	r24, r24
    5aa8:	52 f0       	brmi	.+20     	; 0x5abe <__fp_round+0x20>
    5aaa:	bb 0f       	add	r27, r27
    5aac:	40 f4       	brcc	.+16     	; 0x5abe <__fp_round+0x20>
    5aae:	bf 2b       	or	r27, r31
    5ab0:	11 f4       	brne	.+4      	; 0x5ab6 <__fp_round+0x18>
    5ab2:	60 ff       	sbrs	r22, 0
    5ab4:	04 c0       	rjmp	.+8      	; 0x5abe <__fp_round+0x20>
    5ab6:	6f 5f       	subi	r22, 0xFF	; 255
    5ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    5aba:	8f 4f       	sbci	r24, 0xFF	; 255
    5abc:	9f 4f       	sbci	r25, 0xFF	; 255
    5abe:	08 95       	ret

00005ac0 <__udivmodqi4>:
    5ac0:	99 1b       	sub	r25, r25
    5ac2:	79 e0       	ldi	r23, 0x09	; 9
    5ac4:	04 c0       	rjmp	.+8      	; 0x5ace <__udivmodqi4_ep>

00005ac6 <__udivmodqi4_loop>:
    5ac6:	99 1f       	adc	r25, r25
    5ac8:	96 17       	cp	r25, r22
    5aca:	08 f0       	brcs	.+2      	; 0x5ace <__udivmodqi4_ep>
    5acc:	96 1b       	sub	r25, r22

00005ace <__udivmodqi4_ep>:
    5ace:	88 1f       	adc	r24, r24
    5ad0:	7a 95       	dec	r23
    5ad2:	c9 f7       	brne	.-14     	; 0x5ac6 <__udivmodqi4_loop>
    5ad4:	80 95       	com	r24
    5ad6:	08 95       	ret

00005ad8 <__divmodhi4>:
    5ad8:	97 fb       	bst	r25, 7
    5ada:	07 2e       	mov	r0, r23
    5adc:	16 f4       	brtc	.+4      	; 0x5ae2 <__divmodhi4+0xa>
    5ade:	00 94       	com	r0
    5ae0:	07 d0       	rcall	.+14     	; 0x5af0 <__divmodhi4_neg1>
    5ae2:	77 fd       	sbrc	r23, 7
    5ae4:	09 d0       	rcall	.+18     	; 0x5af8 <__divmodhi4_neg2>
    5ae6:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__udivmodhi4>
    5aea:	07 fc       	sbrc	r0, 7
    5aec:	05 d0       	rcall	.+10     	; 0x5af8 <__divmodhi4_neg2>
    5aee:	3e f4       	brtc	.+14     	; 0x5afe <__divmodhi4_exit>

00005af0 <__divmodhi4_neg1>:
    5af0:	90 95       	com	r25
    5af2:	81 95       	neg	r24
    5af4:	9f 4f       	sbci	r25, 0xFF	; 255
    5af6:	08 95       	ret

00005af8 <__divmodhi4_neg2>:
    5af8:	70 95       	com	r23
    5afa:	61 95       	neg	r22
    5afc:	7f 4f       	sbci	r23, 0xFF	; 255

00005afe <__divmodhi4_exit>:
    5afe:	08 95       	ret

00005b00 <__udivmodhi4>:
    5b00:	aa 1b       	sub	r26, r26
    5b02:	bb 1b       	sub	r27, r27
    5b04:	51 e1       	ldi	r21, 0x11	; 17
    5b06:	07 c0       	rjmp	.+14     	; 0x5b16 <__udivmodhi4_ep>

00005b08 <__udivmodhi4_loop>:
    5b08:	aa 1f       	adc	r26, r26
    5b0a:	bb 1f       	adc	r27, r27
    5b0c:	a6 17       	cp	r26, r22
    5b0e:	b7 07       	cpc	r27, r23
    5b10:	10 f0       	brcs	.+4      	; 0x5b16 <__udivmodhi4_ep>
    5b12:	a6 1b       	sub	r26, r22
    5b14:	b7 0b       	sbc	r27, r23

00005b16 <__udivmodhi4_ep>:
    5b16:	88 1f       	adc	r24, r24
    5b18:	99 1f       	adc	r25, r25
    5b1a:	5a 95       	dec	r21
    5b1c:	a9 f7       	brne	.-22     	; 0x5b08 <__udivmodhi4_loop>
    5b1e:	80 95       	com	r24
    5b20:	90 95       	com	r25
    5b22:	bc 01       	movw	r22, r24
    5b24:	cd 01       	movw	r24, r26
    5b26:	08 95       	ret

00005b28 <__eerd_byte_usb1286>:
    5b28:	f9 99       	sbic	0x1f, 1	; 31
    5b2a:	fe cf       	rjmp	.-4      	; 0x5b28 <__eerd_byte_usb1286>
    5b2c:	92 bd       	out	0x22, r25	; 34
    5b2e:	81 bd       	out	0x21, r24	; 33
    5b30:	f8 9a       	sbi	0x1f, 0	; 31
    5b32:	99 27       	eor	r25, r25
    5b34:	80 b5       	in	r24, 0x20	; 32
    5b36:	08 95       	ret

00005b38 <__eerd_word_usb1286>:
    5b38:	a8 e1       	ldi	r26, 0x18	; 24
    5b3a:	b0 e0       	ldi	r27, 0x00	; 0
    5b3c:	42 e0       	ldi	r20, 0x02	; 2
    5b3e:	50 e0       	ldi	r21, 0x00	; 0
    5b40:	0c 94 b7 2d 	jmp	0x5b6e	; 0x5b6e <__eerd_blraw_usb1286>

00005b44 <__eewr_byte_usb1286>:
    5b44:	26 2f       	mov	r18, r22

00005b46 <__eewr_r18_usb1286>:
    5b46:	f9 99       	sbic	0x1f, 1	; 31
    5b48:	fe cf       	rjmp	.-4      	; 0x5b46 <__eewr_r18_usb1286>
    5b4a:	1f ba       	out	0x1f, r1	; 31
    5b4c:	92 bd       	out	0x22, r25	; 34
    5b4e:	81 bd       	out	0x21, r24	; 33
    5b50:	20 bd       	out	0x20, r18	; 32
    5b52:	0f b6       	in	r0, 0x3f	; 63
    5b54:	f8 94       	cli
    5b56:	fa 9a       	sbi	0x1f, 2	; 31
    5b58:	f9 9a       	sbi	0x1f, 1	; 31
    5b5a:	0f be       	out	0x3f, r0	; 63
    5b5c:	01 96       	adiw	r24, 0x01	; 1
    5b5e:	08 95       	ret

00005b60 <__eewr_word_usb1286>:
    5b60:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__eewr_byte_usb1286>
    5b64:	27 2f       	mov	r18, r23
    5b66:	0c 94 a3 2d 	jmp	0x5b46	; 0x5b46 <__eewr_r18_usb1286>

00005b6a <__eerd_block_usb1286>:
    5b6a:	dc 01       	movw	r26, r24
    5b6c:	cb 01       	movw	r24, r22

00005b6e <__eerd_blraw_usb1286>:
    5b6e:	fc 01       	movw	r30, r24
    5b70:	f9 99       	sbic	0x1f, 1	; 31
    5b72:	fe cf       	rjmp	.-4      	; 0x5b70 <__eerd_blraw_usb1286+0x2>
    5b74:	06 c0       	rjmp	.+12     	; 0x5b82 <__eerd_blraw_usb1286+0x14>
    5b76:	f2 bd       	out	0x22, r31	; 34
    5b78:	e1 bd       	out	0x21, r30	; 33
    5b7a:	f8 9a       	sbi	0x1f, 0	; 31
    5b7c:	31 96       	adiw	r30, 0x01	; 1
    5b7e:	00 b4       	in	r0, 0x20	; 32
    5b80:	0d 92       	st	X+, r0
    5b82:	41 50       	subi	r20, 0x01	; 1
    5b84:	50 40       	sbci	r21, 0x00	; 0
    5b86:	b8 f7       	brcc	.-18     	; 0x5b76 <__eerd_blraw_usb1286+0x8>
    5b88:	08 95       	ret

00005b8a <_exit>:
    5b8a:	f8 94       	cli

00005b8c <__stop_program>:
    5b8c:	ff cf       	rjmp	.-2      	; 0x5b8c <__stop_program>
