   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.scan_keycode,"ax",@progbits
  13               	scan_keycode:
  14               	.LFB11:
  15               		.file 1 "../../../../tmk_core/common/bootmagic.c"
   1:../../../../tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:../../../../tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:../../../../tmk_core/common/bootmagic.c **** #include "wait.h"
   4:../../../../tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:../../../../tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:../../../../tmk_core/common/bootmagic.c **** #include "debug.h"
   7:../../../../tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:../../../../tmk_core/common/bootmagic.c **** #include "host.h"
   9:../../../../tmk_core/common/bootmagic.c **** #include "action_layer.h"
  10:../../../../tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  11:../../../../tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  12:../../../../tmk_core/common/bootmagic.c **** 
  13:../../../../tmk_core/common/bootmagic.c **** keymap_config_t keymap_config;
  14:../../../../tmk_core/common/bootmagic.c **** 
  15:../../../../tmk_core/common/bootmagic.c **** void bootmagic(void)
  16:../../../../tmk_core/common/bootmagic.c **** {
  17:../../../../tmk_core/common/bootmagic.c ****     /* check signature */
  18:../../../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  19:../../../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  20:../../../../tmk_core/common/bootmagic.c ****     }
  21:../../../../tmk_core/common/bootmagic.c **** 
  22:../../../../tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  23:../../../../tmk_core/common/bootmagic.c ****     print("bootmagic scan: ... ");
  24:../../../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  25:../../../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
  26:../../../../tmk_core/common/bootmagic.c ****     print("done.\n");
  27:../../../../tmk_core/common/bootmagic.c **** 
  28:../../../../tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  29:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
  30:../../../../tmk_core/common/bootmagic.c ****         return;
  31:../../../../tmk_core/common/bootmagic.c ****     }
  32:../../../../tmk_core/common/bootmagic.c **** 
  33:../../../../tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  34:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  35:../../../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  36:../../../../tmk_core/common/bootmagic.c ****     }
  37:../../../../tmk_core/common/bootmagic.c **** 
  38:../../../../tmk_core/common/bootmagic.c ****     /* bootloader */
  39:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
  40:../../../../tmk_core/common/bootmagic.c ****         bootloader_jump();
  41:../../../../tmk_core/common/bootmagic.c ****     }
  42:../../../../tmk_core/common/bootmagic.c **** 
  43:../../../../tmk_core/common/bootmagic.c ****     /* debug enable */
  44:../../../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  45:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  46:../../../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  47:../../../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  48:../../../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  49:../../../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  50:../../../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  51:../../../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  52:../../../../tmk_core/common/bootmagic.c ****         } else {
  53:../../../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  54:../../../../tmk_core/common/bootmagic.c ****         }
  55:../../../../tmk_core/common/bootmagic.c ****     }
  56:../../../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
  57:../../../../tmk_core/common/bootmagic.c **** 
  58:../../../../tmk_core/common/bootmagic.c ****     /* keymap config */
  59:../../../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  60:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  61:../../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  62:../../../../tmk_core/common/bootmagic.c ****     }
  63:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  64:../../../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  65:../../../../tmk_core/common/bootmagic.c ****     }
  66:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  67:../../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  68:../../../../tmk_core/common/bootmagic.c ****     }
  69:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  70:../../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  71:../../../../tmk_core/common/bootmagic.c ****     }
  72:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
  73:../../../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  74:../../../../tmk_core/common/bootmagic.c ****     }
  75:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  76:../../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  77:../../../../tmk_core/common/bootmagic.c ****     }
  78:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  79:../../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  80:../../../../tmk_core/common/bootmagic.c ****     }
  81:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
  82:../../../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  83:../../../../tmk_core/common/bootmagic.c ****     }
  84:../../../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
  85:../../../../tmk_core/common/bootmagic.c **** 
  86:../../../../tmk_core/common/bootmagic.c **** #ifdef NKRO_ENABLE
  87:../../../../tmk_core/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
  88:../../../../tmk_core/common/bootmagic.c **** #endif
  89:../../../../tmk_core/common/bootmagic.c **** 
  90:../../../../tmk_core/common/bootmagic.c ****     /* default layer */
  91:../../../../tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  92:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
  93:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
  94:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
  95:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
  96:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
  97:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
  98:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
  99:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 100:../../../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 101:../../../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 102:../../../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 103:../../../../tmk_core/common/bootmagic.c ****     } else {
 104:../../../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 105:../../../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 106:../../../../tmk_core/common/bootmagic.c ****     }
 107:../../../../tmk_core/common/bootmagic.c **** }
 108:../../../../tmk_core/common/bootmagic.c **** 
 109:../../../../tmk_core/common/bootmagic.c **** static bool scan_keycode(uint8_t keycode)
 110:../../../../tmk_core/common/bootmagic.c **** {
  16               		.loc 1 110 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 AF92      		push r10
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 10, -2
  23 0002 BF92      		push r11
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 11, -3
  27 0004 CF92      		push r12
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 12, -4
  31 0006 DF92      		push r13
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 13, -5
  35 0008 EF92      		push r14
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 14, -6
  39 000a FF92      		push r15
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 15, -7
  43 000c CF93      		push r28
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 28, -8
  47 000e DF93      		push r29
  48               	.LCFI7:
  49               		.cfi_def_cfa_offset 10
  50               		.cfi_offset 29, -9
  51               	/* prologue: function */
  52               	/* frame size = 0 */
  53               	/* stack size = 8 */
  54               	.L__stack_usage = 8
  55 0010 D82F      		mov r29,r24
  56               	.LVL1:
 111:../../../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  57               		.loc 1 111 0
  58 0012 C0E0      		ldi r28,0
  59               	.LBB6:
  60               	.LBB7:
  61               	.LBB8:
 112:../../../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 113:../../../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 114:../../../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  62               		.loc 1 114 0
  63 0014 CC24      		clr r12
  64 0016 C394      		inc r12
  65 0018 D12C      		mov r13,__zero_reg__
  66               	.LVL2:
  67               	.L7:
  68               	.LBE8:
 112:../../../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  69               		.loc 1 112 0
  70 001a 8C2F      		mov r24,r28
  71 001c 0E94 0000 		call matrix_get_row
  72               	.LVL3:
  73 0020 5C01      		movw r10,r24
  74               	.LVL4:
  75 0022 E12C      		mov r14,__zero_reg__
  76 0024 F12C      		mov r15,__zero_reg__
  77               	.LVL5:
  78               	.L3:
  79               	.LBB9:
  80               		.loc 1 114 0
  81 0026 9601      		movw r18,r12
  82 0028 0E2C      		mov r0,r14
  83 002a 00C0      		rjmp 2f
  84               		1:
  85 002c 220F      		lsl r18
  86 002e 331F      		rol r19
  87               		2:
  88 0030 0A94      		dec r0
  89 0032 02F4      		brpl 1b
  90 0034 2A21      		and r18,r10
  91 0036 3B21      		and r19,r11
  92 0038 232B      		or r18,r19
  93 003a 01F4      		brne .L2
  94               	.L6:
  95 003c 8FEF      		ldi r24,-1
  96 003e E81A      		sub r14,r24
  97 0040 F80A      		sbc r15,r24
 113:../../../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
  98               		.loc 1 113 0
  99 0042 80E1      		ldi r24,16
 100 0044 E816      		cp r14,r24
 101 0046 F104      		cpc r15,__zero_reg__
 102 0048 01F4      		brne .L3
 103 004a 00C0      		rjmp .L11
 104               	.L2:
 115:../../../../tmk_core/common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
 105               		.loc 1 115 0
 106 004c 6E2D      		mov r22,r14
 107 004e 7C2F      		mov r23,r28
 108 0050 80E0      		ldi r24,0
 109 0052 0E94 0000 		call keymap_key_to_keycode
 110               	.LVL6:
 111 0056 D813      		cpse r29,r24
 112 0058 00C0      		rjmp .L6
 113 005a 00C0      		rjmp .L8
 114               	.L11:
 115               	.LBE9:
 116               	.LBE7:
 111:../../../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 117               		.loc 1 111 0
 118 005c CF5F      		subi r28,lo8(-(1))
 119               	.LVL7:
 120 005e C830      		cpi r28,lo8(8)
 121 0060 01F4      		brne .L7
 116:../../../../tmk_core/common/bootmagic.c ****                     return true;
 117:../../../../tmk_core/common/bootmagic.c ****                 }
 118:../../../../tmk_core/common/bootmagic.c ****             }
 119:../../../../tmk_core/common/bootmagic.c ****         }
 120:../../../../tmk_core/common/bootmagic.c ****     }
 121:../../../../tmk_core/common/bootmagic.c ****     return false;
 122               		.loc 1 121 0
 123 0062 80E0      		ldi r24,0
 124 0064 00C0      		rjmp .L5
 125               	.LVL8:
 126               	.L8:
 127               	.LBB11:
 128               	.LBB10:
 116:../../../../tmk_core/common/bootmagic.c ****                     return true;
 129               		.loc 1 116 0
 130 0066 81E0      		ldi r24,lo8(1)
 131               	.L5:
 132               	/* epilogue start */
 133               	.LBE10:
 134               	.LBE11:
 135               	.LBE6:
 122:../../../../tmk_core/common/bootmagic.c **** }
 136               		.loc 1 122 0
 137 0068 DF91      		pop r29
 138               	.LVL9:
 139 006a CF91      		pop r28
 140 006c FF90      		pop r15
 141 006e EF90      		pop r14
 142 0070 DF90      		pop r13
 143 0072 CF90      		pop r12
 144 0074 BF90      		pop r11
 145 0076 AF90      		pop r10
 146               	.LVL10:
 147 0078 0895      		ret
 148               		.cfi_endproc
 149               	.LFE11:
 151               		.section	.text.bootmagic_scan_keycode,"ax",@progbits
 152               	.global	bootmagic_scan_keycode
 154               	bootmagic_scan_keycode:
 155               	.LFB12:
 123:../../../../tmk_core/common/bootmagic.c **** 
 124:../../../../tmk_core/common/bootmagic.c **** bool bootmagic_scan_keycode(uint8_t keycode)
 125:../../../../tmk_core/common/bootmagic.c **** {
 156               		.loc 1 125 0
 157               		.cfi_startproc
 158               	.LVL11:
 159 0000 CF93      		push r28
 160               	.LCFI8:
 161               		.cfi_def_cfa_offset 3
 162               		.cfi_offset 28, -2
 163               	/* prologue: function */
 164               	/* frame size = 0 */
 165               	/* stack size = 1 */
 166               	.L__stack_usage = 1
 167 0002 C82F      		mov r28,r24
 126:../../../../tmk_core/common/bootmagic.c ****     if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
 168               		.loc 1 126 0
 169 0004 8CE2      		ldi r24,lo8(44)
 170               	.LVL12:
 171 0006 0E94 0000 		call scan_keycode
 172               	.LVL13:
 173 000a 8823      		tst r24
 174 000c 01F0      		breq .L13
 127:../../../../tmk_core/common/bootmagic.c **** 
 128:../../../../tmk_core/common/bootmagic.c ****     return scan_keycode(keycode);
 175               		.loc 1 128 0
 176 000e 8C2F      		mov r24,r28
 177               	/* epilogue start */
 129:../../../../tmk_core/common/bootmagic.c **** }
 178               		.loc 1 129 0
 179 0010 CF91      		pop r28
 180               	.LVL14:
 128:../../../../tmk_core/common/bootmagic.c ****     return scan_keycode(keycode);
 181               		.loc 1 128 0
 182 0012 0C94 0000 		jmp scan_keycode
 183               	.LVL15:
 184               	.L13:
 185               		.loc 1 129 0
 186 0016 80E0      		ldi r24,0
 187               	/* epilogue start */
 188 0018 CF91      		pop r28
 189               	.LVL16:
 190 001a 0895      		ret
 191               		.cfi_endproc
 192               	.LFE12:
 194               		.section	.text.bootmagic,"ax",@progbits
 195               	.global	bootmagic
 197               	bootmagic:
 198               	.LFB10:
  16:../../../../tmk_core/common/bootmagic.c **** {
 199               		.loc 1 16 0
 200               		.cfi_startproc
 201 0000 CF93      		push r28
 202               	.LCFI9:
 203               		.cfi_def_cfa_offset 3
 204               		.cfi_offset 28, -2
 205               	/* prologue: function */
 206               	/* frame size = 0 */
 207               	/* stack size = 1 */
 208               	.L__stack_usage = 1
  18:../../../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
 209               		.loc 1 18 0
 210 0002 0E94 0000 		call eeconfig_is_enabled
 211               	.LVL17:
 212 0006 8111      		cpse r24,__zero_reg__
 213 0008 00C0      		rjmp .L15
  19:../../../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 214               		.loc 1 19 0
 215 000a 0E94 0000 		call eeconfig_init
 216               	.LVL18:
 217               	.L15:
  23:../../../../tmk_core/common/bootmagic.c ****     print("bootmagic scan: ... ");
 218               		.loc 1 23 0
 219 000e 80E0      		ldi r24,lo8(__c.2318)
 220 0010 90E0      		ldi r25,hi8(__c.2318)
 221 0012 0E94 0000 		call xputs
 222               	.LVL19:
  25:../../../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
 223               		.loc 1 25 0
 224 0016 C5E6      		ldi r28,lo8(101)
 225 0018 00C0      		rjmp .L16
 226               	.LVL20:
 227               	.L17:
  25:../../../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
 228               		.loc 1 25 0 is_stmt 0 discriminator 2
 229 001a 0E94 0000 		call matrix_scan
 230               	.LVL21:
 231               	.LBB12:
 232               	.LBB13:
 233               		.file 2 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h"
   1:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
   6:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
   9:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  12:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  17:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  21:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  33:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  35:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  38:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  41:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  42:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  46:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \code
  49:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  54:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     used.
  58:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  59:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  68:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  77:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  81:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** */
  82:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  83:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  87:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  88:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  93:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  94:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  97:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  98:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
 103:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 104:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /**
 105:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 107:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 109:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 112:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 114:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 120:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 125:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 129:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 132:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 140:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****  */
 141:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** void
 142:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** {
 144:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 153:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 156:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 159:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 164:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 234               		.loc 2 164 0 is_stmt 1 discriminator 2
 235 001e 8FE1      		ldi r24,lo8(19999)
 236 0020 9EE4      		ldi r25,hi8(19999)
 237 0022 0197      		1: sbiw r24,1
 238 0024 01F4      		brne 1b
 239 0026 00C0      		rjmp .
 240 0028 0000      		nop
 241               	.LVL22:
 242               	.L16:
 243 002a C150      		subi r28,lo8(-(-1))
 244               	.LBE13:
 245               	.LBE12:
  25:../../../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); wait_ms(10); }
 246               		.loc 1 25 0 discriminator 1
 247 002c 01F4      		brne .L17
  26:../../../../tmk_core/common/bootmagic.c ****     print("done.\n");
 248               		.loc 1 26 0
 249 002e 80E0      		ldi r24,lo8(__c.2324)
 250 0030 90E0      		ldi r25,hi8(__c.2324)
 251 0032 0E94 0000 		call xputs
 252               	.LVL23:
  29:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
 253               		.loc 1 29 0
 254 0036 89E2      		ldi r24,lo8(41)
 255 0038 0E94 0000 		call bootmagic_scan_keycode
 256               	.LVL24:
 257 003c 8111      		cpse r24,__zero_reg__
 258 003e 00C0      		rjmp .L14
  34:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
 259               		.loc 1 34 0
 260 0040 8AE2      		ldi r24,lo8(42)
 261 0042 0E94 0000 		call bootmagic_scan_keycode
 262               	.LVL25:
 263 0046 8111      		cpse r24,__zero_reg__
  35:../../../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 264               		.loc 1 35 0
 265 0048 0E94 0000 		call eeconfig_init
 266               	.LVL26:
 267               	.L19:
  39:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
 268               		.loc 1 39 0
 269 004c 85E0      		ldi r24,lo8(5)
 270 004e 0E94 0000 		call bootmagic_scan_keycode
 271               	.LVL27:
 272 0052 8111      		cpse r24,__zero_reg__
  40:../../../../tmk_core/common/bootmagic.c ****         bootloader_jump();
 273               		.loc 1 40 0
 274 0054 0E94 0000 		call bootloader_jump
 275               	.LVL28:
 276               	.L20:
  44:../../../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
 277               		.loc 1 44 0
 278 0058 0E94 0000 		call eeconfig_read_debug
 279               	.LVL29:
 280 005c 8093 0000 		sts debug_config,r24
  45:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 281               		.loc 1 45 0
 282 0060 87E0      		ldi r24,lo8(7)
 283 0062 0E94 0000 		call bootmagic_scan_keycode
 284               	.LVL30:
 285 0066 8823      		tst r24
 286 0068 01F0      		breq .L21
  46:../../../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 287               		.loc 1 46 0
 288 006a 8BE1      		ldi r24,lo8(27)
 289 006c 0E94 0000 		call bootmagic_scan_keycode
 290               	.LVL31:
 291 0070 8823      		tst r24
 292 0072 01F0      		breq .L22
  47:../../../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 293               		.loc 1 47 0
 294 0074 9091 0000 		lds r25,debug_config
 295 0078 91FB      		bst r25,1
 296 007a 8827      		clr r24
 297 007c 80F9      		bld r24,0
 298 007e 21E0      		ldi r18,lo8(1)
 299 0080 8227      		eor r24,r18
 300 0082 80FB      		bst r24,0
 301 0084 91F9      		bld r25,1
 302 0086 00C0      		rjmp .L93
 303               	.L22:
  48:../../../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 304               		.loc 1 48 0
 305 0088 8EE0      		ldi r24,lo8(14)
 306 008a 0E94 0000 		call bootmagic_scan_keycode
 307               	.LVL32:
 308 008e 8823      		tst r24
 309 0090 01F0      		breq .L23
  49:../../../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 310               		.loc 1 49 0
 311 0092 9091 0000 		lds r25,debug_config
 312 0096 92FB      		bst r25,2
 313 0098 8827      		clr r24
 314 009a 80F9      		bld r24,0
 315 009c 21E0      		ldi r18,lo8(1)
 316 009e 8227      		eor r24,r18
 317 00a0 80FB      		bst r24,0
 318 00a2 92F9      		bld r25,2
 319 00a4 00C0      		rjmp .L93
 320               	.L23:
  50:../../../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 321               		.loc 1 50 0
 322 00a6 80E1      		ldi r24,lo8(16)
 323 00a8 0E94 0000 		call bootmagic_scan_keycode
 324               	.LVL33:
 325 00ac 9091 0000 		lds r25,debug_config
 326 00b0 8823      		tst r24
 327 00b2 01F0      		breq .L24
  51:../../../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 328               		.loc 1 51 0
 329 00b4 93FB      		bst r25,3
 330 00b6 8827      		clr r24
 331 00b8 80F9      		bld r24,0
 332 00ba 21E0      		ldi r18,lo8(1)
 333 00bc 8227      		eor r24,r18
 334 00be 80FB      		bst r24,0
 335 00c0 93F9      		bld r25,3
 336 00c2 00C0      		rjmp .L93
 337               	.L24:
  53:../../../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
 338               		.loc 1 53 0
 339 00c4 892F      		mov r24,r25
 340 00c6 8095      		com r24
 341 00c8 80FB      		bst r24,0
 342 00ca 90F9      		bld r25,0
 343               	.L93:
 344 00cc 9093 0000 		sts debug_config,r25
 345               	.L21:
  56:../../../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
 346               		.loc 1 56 0
 347 00d0 8091 0000 		lds r24,debug_config
 348 00d4 0E94 0000 		call eeconfig_write_debug
 349               	.LVL34:
  59:../../../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
 350               		.loc 1 59 0
 351 00d8 0E94 0000 		call eeconfig_read_keymap
 352               	.LVL35:
 353 00dc 8093 0000 		sts keymap_config,r24
  60:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 354               		.loc 1 60 0
 355 00e0 80EE      		ldi r24,lo8(-32)
 356 00e2 0E94 0000 		call bootmagic_scan_keycode
 357               	.LVL36:
 358 00e6 8823      		tst r24
 359 00e8 01F0      		breq .L25
  61:../../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 360               		.loc 1 61 0
 361 00ea 8091 0000 		lds r24,keymap_config
 362 00ee 982F      		mov r25,r24
 363 00f0 9095      		com r25
 364 00f2 90FB      		bst r25,0
 365 00f4 80F9      		bld r24,0
 366 00f6 8093 0000 		sts keymap_config,r24
 367               	.L25:
  63:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
 368               		.loc 1 63 0
 369 00fa 89E3      		ldi r24,lo8(57)
 370 00fc 0E94 0000 		call bootmagic_scan_keycode
 371               	.LVL37:
 372 0100 8823      		tst r24
 373 0102 01F0      		breq .L26
  64:../../../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 374               		.loc 1 64 0
 375 0104 9091 0000 		lds r25,keymap_config
 376 0108 91FB      		bst r25,1
 377 010a 8827      		clr r24
 378 010c 80F9      		bld r24,0
 379 010e 21E0      		ldi r18,lo8(1)
 380 0110 8227      		eor r24,r18
 381 0112 80FB      		bst r24,0
 382 0114 91F9      		bld r25,1
 383 0116 9093 0000 		sts keymap_config,r25
 384               	.L26:
  66:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
 385               		.loc 1 66 0
 386 011a 82EE      		ldi r24,lo8(-30)
 387 011c 0E94 0000 		call bootmagic_scan_keycode
 388               	.LVL38:
 389 0120 8823      		tst r24
 390 0122 01F0      		breq .L27
  67:../../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 391               		.loc 1 67 0
 392 0124 9091 0000 		lds r25,keymap_config
 393 0128 92FB      		bst r25,2
 394 012a 8827      		clr r24
 395 012c 80F9      		bld r24,0
 396 012e 21E0      		ldi r18,lo8(1)
 397 0130 8227      		eor r24,r18
 398 0132 80FB      		bst r24,0
 399 0134 92F9      		bld r25,2
 400 0136 9093 0000 		sts keymap_config,r25
 401               	.L27:
  69:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
 402               		.loc 1 69 0
 403 013a 86EE      		ldi r24,lo8(-26)
 404 013c 0E94 0000 		call bootmagic_scan_keycode
 405               	.LVL39:
 406 0140 8823      		tst r24
 407 0142 01F0      		breq .L28
  70:../../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 408               		.loc 1 70 0
 409 0144 9091 0000 		lds r25,keymap_config
 410 0148 93FB      		bst r25,3
 411 014a 8827      		clr r24
 412 014c 80F9      		bld r24,0
 413 014e 21E0      		ldi r18,lo8(1)
 414 0150 8227      		eor r24,r18
 415 0152 80FB      		bst r24,0
 416 0154 93F9      		bld r25,3
 417 0156 9093 0000 		sts keymap_config,r25
 418               	.L28:
  72:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
 419               		.loc 1 72 0
 420 015a 83EE      		ldi r24,lo8(-29)
 421 015c 0E94 0000 		call bootmagic_scan_keycode
 422               	.LVL40:
 423 0160 8823      		tst r24
 424 0162 01F0      		breq .L29
  73:../../../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 425               		.loc 1 73 0
 426 0164 9091 0000 		lds r25,keymap_config
 427 0168 94FB      		bst r25,4
 428 016a 8827      		clr r24
 429 016c 80F9      		bld r24,0
 430 016e 21E0      		ldi r18,lo8(1)
 431 0170 8227      		eor r24,r18
 432 0172 80FB      		bst r24,0
 433 0174 94F9      		bld r25,4
 434 0176 9093 0000 		sts keymap_config,r25
 435               	.L29:
  75:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
 436               		.loc 1 75 0
 437 017a 85E3      		ldi r24,lo8(53)
 438 017c 0E94 0000 		call bootmagic_scan_keycode
 439               	.LVL41:
 440 0180 8823      		tst r24
 441 0182 01F0      		breq .L30
  76:../../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 442               		.loc 1 76 0
 443 0184 9091 0000 		lds r25,keymap_config
 444 0188 95FB      		bst r25,5
 445 018a 8827      		clr r24
 446 018c 80F9      		bld r24,0
 447 018e 21E0      		ldi r18,lo8(1)
 448 0190 8227      		eor r24,r18
 449 0192 80FB      		bst r24,0
 450 0194 95F9      		bld r25,5
 451 0196 9093 0000 		sts keymap_config,r25
 452               	.L30:
  78:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
 453               		.loc 1 78 0
 454 019a 81E3      		ldi r24,lo8(49)
 455 019c 0E94 0000 		call bootmagic_scan_keycode
 456               	.LVL42:
 457 01a0 8823      		tst r24
 458 01a2 01F0      		breq .L31
  79:../../../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 459               		.loc 1 79 0
 460 01a4 9091 0000 		lds r25,keymap_config
 461 01a8 96FB      		bst r25,6
 462 01aa 8827      		clr r24
 463 01ac 80F9      		bld r24,0
 464 01ae 21E0      		ldi r18,lo8(1)
 465 01b0 8227      		eor r24,r18
 466 01b2 80FB      		bst r24,0
 467 01b4 96F9      		bld r25,6
 468 01b6 9093 0000 		sts keymap_config,r25
 469               	.L31:
  81:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
 470               		.loc 1 81 0
 471 01ba 81E1      		ldi r24,lo8(17)
 472 01bc 0E94 0000 		call bootmagic_scan_keycode
 473               	.LVL43:
 474 01c0 8823      		tst r24
 475 01c2 01F0      		breq .L32
  82:../../../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 476               		.loc 1 82 0
 477 01c4 9091 0000 		lds r25,keymap_config
 478 01c8 97FB      		bst r25,7
 479 01ca 8827      		clr r24
 480 01cc 80F9      		bld r24,0
 481 01ce 21E0      		ldi r18,lo8(1)
 482 01d0 8227      		eor r24,r18
 483 01d2 80FB      		bst r24,0
 484 01d4 97F9      		bld r25,7
 485 01d6 9093 0000 		sts keymap_config,r25
 486               	.L32:
  84:../../../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
 487               		.loc 1 84 0
 488 01da 8091 0000 		lds r24,keymap_config
 489 01de 0E94 0000 		call eeconfig_write_keymap
 490               	.LVL44:
  92:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
 491               		.loc 1 92 0
 492 01e2 87E2      		ldi r24,lo8(39)
 493 01e4 0E94 0000 		call bootmagic_scan_keycode
 494               	.LVL45:
 495 01e8 C82F      		mov r28,r24
 496               	.LVL46:
  93:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 497               		.loc 1 93 0
 498 01ea 8EE1      		ldi r24,lo8(30)
 499               	.LVL47:
 500 01ec 0E94 0000 		call bootmagic_scan_keycode
 501               	.LVL48:
 502 01f0 8111      		cpse r24,__zero_reg__
  93:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 503               		.loc 1 93 0 is_stmt 0 discriminator 1
 504 01f2 C260      		ori r28,lo8(2)
 505               	.LVL49:
 506               	.L33:
  94:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 507               		.loc 1 94 0 is_stmt 1
 508 01f4 8FE1      		ldi r24,lo8(31)
 509 01f6 0E94 0000 		call bootmagic_scan_keycode
 510               	.LVL50:
 511 01fa 8111      		cpse r24,__zero_reg__
  94:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 512               		.loc 1 94 0 is_stmt 0 discriminator 1
 513 01fc C460      		ori r28,lo8(4)
 514               	.LVL51:
 515               	.L34:
  95:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 516               		.loc 1 95 0 is_stmt 1
 517 01fe 80E2      		ldi r24,lo8(32)
 518 0200 0E94 0000 		call bootmagic_scan_keycode
 519               	.LVL52:
 520 0204 8111      		cpse r24,__zero_reg__
  95:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 521               		.loc 1 95 0 is_stmt 0 discriminator 1
 522 0206 C860      		ori r28,lo8(8)
 523               	.LVL53:
 524               	.L35:
  96:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 525               		.loc 1 96 0 is_stmt 1
 526 0208 81E2      		ldi r24,lo8(33)
 527 020a 0E94 0000 		call bootmagic_scan_keycode
 528               	.LVL54:
 529 020e 8111      		cpse r24,__zero_reg__
  96:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 530               		.loc 1 96 0 is_stmt 0 discriminator 1
 531 0210 C061      		ori r28,lo8(16)
 532               	.LVL55:
 533               	.L36:
  97:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 534               		.loc 1 97 0 is_stmt 1
 535 0212 82E2      		ldi r24,lo8(34)
 536 0214 0E94 0000 		call bootmagic_scan_keycode
 537               	.LVL56:
 538 0218 8111      		cpse r24,__zero_reg__
  97:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 539               		.loc 1 97 0 is_stmt 0 discriminator 1
 540 021a C062      		ori r28,lo8(32)
 541               	.LVL57:
 542               	.L37:
  98:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 543               		.loc 1 98 0 is_stmt 1
 544 021c 83E2      		ldi r24,lo8(35)
 545 021e 0E94 0000 		call bootmagic_scan_keycode
 546               	.LVL58:
 547 0222 8111      		cpse r24,__zero_reg__
  98:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 548               		.loc 1 98 0 is_stmt 0 discriminator 1
 549 0224 C064      		ori r28,lo8(64)
 550               	.LVL59:
 551               	.L38:
  99:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 552               		.loc 1 99 0 is_stmt 1
 553 0226 84E2      		ldi r24,lo8(36)
 554 0228 0E94 0000 		call bootmagic_scan_keycode
 555               	.LVL60:
 556 022c 8823      		tst r24
 557 022e 01F0      		breq .L39
  99:../../../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 558               		.loc 1 99 0 is_stmt 0 discriminator 1
 559 0230 C068      		ori r28,lo8(-128)
 560               	.LVL61:
 561 0232 00C0      		rjmp .L40
 562               	.L39:
 100:../../../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 563               		.loc 1 100 0 is_stmt 1
 564 0234 CC23      		tst r28
 565 0236 01F0      		breq .L41
 566               	.L40:
 101:../../../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 567               		.loc 1 101 0
 568 0238 8C2F      		mov r24,r28
 569 023a 0E94 0000 		call eeconfig_write_default_layer
 570               	.LVL62:
 102:../../../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 571               		.loc 1 102 0
 572 023e 6C2F      		mov r22,r28
 573 0240 00C0      		rjmp .L94
 574               	.L41:
 104:../../../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 575               		.loc 1 104 0
 576 0242 0E94 0000 		call eeconfig_read_default_layer
 577               	.LVL63:
 105:../../../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 578               		.loc 1 105 0
 579 0246 682F      		mov r22,r24
 580               	.LVL64:
 581               	.L94:
 582 0248 70E0      		ldi r23,0
 583 024a 80E0      		ldi r24,0
 584 024c 90E0      		ldi r25,0
 585               	/* epilogue start */
 107:../../../../tmk_core/common/bootmagic.c **** }
 586               		.loc 1 107 0
 587 024e CF91      		pop r28
 105:../../../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 588               		.loc 1 105 0
 589 0250 0C94 0000 		jmp default_layer_set
 590               	.LVL65:
 591               	.L14:
 592               	/* epilogue start */
 107:../../../../tmk_core/common/bootmagic.c **** }
 593               		.loc 1 107 0
 594 0254 CF91      		pop r28
 595 0256 0895      		ret
 596               		.cfi_endproc
 597               	.LFE10:
 599               		.comm	keymap_config,1,1
 600               		.section	.progmem.data.__c.2318,"a",@progbits
 603               	__c.2318:
 604 0000 626F 6F74 		.string	"bootmagic scan: ... "
 604      6D61 6769 
 604      6320 7363 
 604      616E 3A20 
 604      2E2E 2E20 
 605               		.section	.progmem.data.__c.2324,"a",@progbits
 608               	__c.2324:
 609 0000 646F 6E65 		.string	"done.\n"
 609      2E0A 00
 610               		.text
 611               	.Letext0:
 612               		.file 3 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/stdint.h"
 613               		.file 4 "../../../../tmk_core/common/matrix.h"
 614               		.file 5 "../../../../tmk_core/common/debug.h"
 615               		.file 6 "../../../../tmk_core/common/keyboard.h"
 616               		.file 7 "../../../../tmk_core/common/keymap.h"
 617               		.file 8 "../../../../tmk_core/common/eeconfig.h"
 618               		.file 9 "../../../../tmk_core/common/bootloader.h"
 619               		.file 10 "../../../../tmk_core/common/avr/xprintf.h"
 620               		.file 11 "../../../../tmk_core/common/action_layer.h"
 621               		.file 12 "../../../../tmk_core/common/keycode.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootmagic.c
     /tmp/ccQ3B3J8.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccQ3B3J8.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccQ3B3J8.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccQ3B3J8.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccQ3B3J8.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccQ3B3J8.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccQ3B3J8.s:13     .text.scan_keycode:0000000000000000 scan_keycode
     /tmp/ccQ3B3J8.s:154    .text.bootmagic_scan_keycode:0000000000000000 bootmagic_scan_keycode
     /tmp/ccQ3B3J8.s:197    .text.bootmagic:0000000000000000 bootmagic
     /tmp/ccQ3B3J8.s:603    .progmem.data.__c.2318:0000000000000000 __c.2318
     /tmp/ccQ3B3J8.s:608    .progmem.data.__c.2324:0000000000000000 __c.2324
                            *COM*:0000000000000001 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
keymap_key_to_keycode
eeconfig_is_enabled
eeconfig_init
xputs
matrix_scan
bootloader_jump
eeconfig_read_debug
debug_config
eeconfig_write_debug
eeconfig_read_keymap
eeconfig_write_keymap
eeconfig_write_default_layer
eeconfig_read_default_layer
default_layer_set
__do_clear_bss
