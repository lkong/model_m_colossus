   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.command_console_help,"ax",@progbits
  13               	command_console_help:
  14               	.LFB16:
  15               		.file 1 "../../../../tmk_core/common/command.c"
   1:../../../../tmk_core/common/command.c **** /*
   2:../../../../tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:../../../../tmk_core/common/command.c **** 
   4:../../../../tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:../../../../tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:../../../../tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../../../tmk_core/common/command.c **** (at your option) any later version.
   8:../../../../tmk_core/common/command.c **** 
   9:../../../../tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:../../../../tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../../../tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../../../tmk_core/common/command.c **** GNU General Public License for more details.
  13:../../../../tmk_core/common/command.c **** 
  14:../../../../tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:../../../../tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../../../tmk_core/common/command.c **** */
  17:../../../../tmk_core/common/command.c **** #include <stdint.h>
  18:../../../../tmk_core/common/command.c **** #include <stdbool.h>
  19:../../../../tmk_core/common/command.c **** #include "wait.h"
  20:../../../../tmk_core/common/command.c **** #include "keycode.h"
  21:../../../../tmk_core/common/command.c **** #include "host.h"
  22:../../../../tmk_core/common/command.c **** #include "keymap.h"
  23:../../../../tmk_core/common/command.c **** #include "print.h"
  24:../../../../tmk_core/common/command.c **** #include "debug.h"
  25:../../../../tmk_core/common/command.c **** #include "util.h"
  26:../../../../tmk_core/common/command.c **** #include "timer.h"
  27:../../../../tmk_core/common/command.c **** #include "keyboard.h"
  28:../../../../tmk_core/common/command.c **** #include "bootloader.h"
  29:../../../../tmk_core/common/command.c **** #include "action_layer.h"
  30:../../../../tmk_core/common/command.c **** #include "action_util.h"
  31:../../../../tmk_core/common/command.c **** #include "eeconfig.h"
  32:../../../../tmk_core/common/command.c **** #include "sleep_led.h"
  33:../../../../tmk_core/common/command.c **** #include "led.h"
  34:../../../../tmk_core/common/command.c **** #include "command.h"
  35:../../../../tmk_core/common/command.c **** #include "backlight.h"
  36:../../../../tmk_core/common/command.c **** 
  37:../../../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  38:../../../../tmk_core/common/command.c **** #include "mousekey.h"
  39:../../../../tmk_core/common/command.c **** #endif
  40:../../../../tmk_core/common/command.c **** 
  41:../../../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  42:../../../../tmk_core/common/command.c **** #   include "usb_keyboard.h"
  43:../../../../tmk_core/common/command.c **** #   ifdef EXTRAKEY_ENABLE
  44:../../../../tmk_core/common/command.c **** #       include "usb_extra.h"
  45:../../../../tmk_core/common/command.c **** #   endif
  46:../../../../tmk_core/common/command.c **** #endif
  47:../../../../tmk_core/common/command.c **** 
  48:../../../../tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  49:../../../../tmk_core/common/command.c **** #   include "usbdrv.h"
  50:../../../../tmk_core/common/command.c **** #endif
  51:../../../../tmk_core/common/command.c **** 
  52:../../../../tmk_core/common/command.c **** 
  53:../../../../tmk_core/common/command.c **** static bool command_common(uint8_t code);
  54:../../../../tmk_core/common/command.c **** static void command_common_help(void);
  55:../../../../tmk_core/common/command.c **** static bool command_console(uint8_t code);
  56:../../../../tmk_core/common/command.c **** static void command_console_help(void);
  57:../../../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  58:../../../../tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  59:../../../../tmk_core/common/command.c **** static void mousekey_console_help(void);
  60:../../../../tmk_core/common/command.c **** #endif
  61:../../../../tmk_core/common/command.c **** 
  62:../../../../tmk_core/common/command.c **** static uint8_t numkey2num(uint8_t code);
  63:../../../../tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  64:../../../../tmk_core/common/command.c **** 
  65:../../../../tmk_core/common/command.c **** 
  66:../../../../tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  67:../../../../tmk_core/common/command.c **** 
  68:../../../../tmk_core/common/command.c **** 
  69:../../../../tmk_core/common/command.c **** bool command_proc(uint8_t code)
  70:../../../../tmk_core/common/command.c **** {
  71:../../../../tmk_core/common/command.c ****     switch (command_state) {
  72:../../../../tmk_core/common/command.c ****         case ONESHOT:
  73:../../../../tmk_core/common/command.c ****             if (!IS_COMMAND())
  74:../../../../tmk_core/common/command.c ****                 return false;
  75:../../../../tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  76:../../../../tmk_core/common/command.c ****             break;
  77:../../../../tmk_core/common/command.c ****         case CONSOLE:
  78:../../../../tmk_core/common/command.c ****             if (IS_COMMAND())
  79:../../../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  80:../../../../tmk_core/common/command.c ****             else
  81:../../../../tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  82:../../../../tmk_core/common/command.c ****             break;
  83:../../../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  84:../../../../tmk_core/common/command.c ****         case MOUSEKEY:
  85:../../../../tmk_core/common/command.c ****             mousekey_console(code);
  86:../../../../tmk_core/common/command.c ****             break;
  87:../../../../tmk_core/common/command.c **** #endif
  88:../../../../tmk_core/common/command.c ****         default:
  89:../../../../tmk_core/common/command.c ****             command_state = ONESHOT;
  90:../../../../tmk_core/common/command.c ****             return false;
  91:../../../../tmk_core/common/command.c ****     }
  92:../../../../tmk_core/common/command.c ****     return true;
  93:../../../../tmk_core/common/command.c **** }
  94:../../../../tmk_core/common/command.c **** 
  95:../../../../tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
  96:../../../../tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
  97:../../../../tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
  98:../../../../tmk_core/common/command.c **** bool command_extra(uint8_t code)
  99:../../../../tmk_core/common/command.c **** {
 100:../../../../tmk_core/common/command.c ****     (void)code;
 101:../../../../tmk_core/common/command.c ****     return false;
 102:../../../../tmk_core/common/command.c **** }
 103:../../../../tmk_core/common/command.c **** 
 104:../../../../tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 105:../../../../tmk_core/common/command.c **** bool command_console_extra(uint8_t code)
 106:../../../../tmk_core/common/command.c **** {
 107:../../../../tmk_core/common/command.c ****     (void)code;
 108:../../../../tmk_core/common/command.c ****     return false;
 109:../../../../tmk_core/common/command.c **** }
 110:../../../../tmk_core/common/command.c **** 
 111:../../../../tmk_core/common/command.c **** 
 112:../../../../tmk_core/common/command.c **** /***********************************************************
 113:../../../../tmk_core/common/command.c ****  * Command common
 114:../../../../tmk_core/common/command.c ****  ***********************************************************/
 115:../../../../tmk_core/common/command.c **** static void command_common_help(void)
 116:../../../../tmk_core/common/command.c **** {
 117:../../../../tmk_core/common/command.c ****     print("\n\t- Magic -\n"
 118:../../../../tmk_core/common/command.c ****           "d:	debug\n"
 119:../../../../tmk_core/common/command.c ****           "x:	debug matrix\n"
 120:../../../../tmk_core/common/command.c ****           "k:	debug keyboard\n"
 121:../../../../tmk_core/common/command.c ****           "m:	debug mouse\n"
 122:../../../../tmk_core/common/command.c ****           "v:	version\n"
 123:../../../../tmk_core/common/command.c ****           "s:	status\n"
 124:../../../../tmk_core/common/command.c ****           "c:	console mode\n"
 125:../../../../tmk_core/common/command.c ****           "0-4:	layer0-4(F10-F4)\n"
 126:../../../../tmk_core/common/command.c ****           "Paus:	bootloader\n"
 127:../../../../tmk_core/common/command.c **** 
 128:../../../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 129:../../../../tmk_core/common/command.c ****           "Caps:	Lock\n"
 130:../../../../tmk_core/common/command.c **** #endif
 131:../../../../tmk_core/common/command.c **** 
 132:../../../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 133:../../../../tmk_core/common/command.c ****           "e:	eeprom\n"
 134:../../../../tmk_core/common/command.c **** #endif
 135:../../../../tmk_core/common/command.c **** 
 136:../../../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 137:../../../../tmk_core/common/command.c ****           "n:	NKRO\n"
 138:../../../../tmk_core/common/command.c **** #endif
 139:../../../../tmk_core/common/command.c **** 
 140:../../../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 141:../../../../tmk_core/common/command.c ****           "z:	sleep LED test\n"
 142:../../../../tmk_core/common/command.c **** #endif
 143:../../../../tmk_core/common/command.c ****     );
 144:../../../../tmk_core/common/command.c **** }
 145:../../../../tmk_core/common/command.c **** 
 146:../../../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 147:../../../../tmk_core/common/command.c **** static void print_eeconfig(void)
 148:../../../../tmk_core/common/command.c **** {
 149:../../../../tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 150:../../../../tmk_core/common/command.c **** 
 151:../../../../tmk_core/common/command.c ****     debug_config_t dc;
 152:../../../../tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 153:../../../../tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 154:../../../../tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 155:../../../../tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 156:../../../../tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 157:../../../../tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 158:../../../../tmk_core/common/command.c **** 
 159:../../../../tmk_core/common/command.c ****     keymap_config_t kc;
 160:../../../../tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 161:../../../../tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 162:../../../../tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 163:../../../../tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 164:../../../../tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 165:../../../../tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 166:../../../../tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 167:../../../../tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 168:../../../../tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 169:../../../../tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 170:../../../../tmk_core/common/command.c **** 
 171:../../../../tmk_core/common/command.c **** #ifdef BACKLIGHT_ENABLE
 172:../../../../tmk_core/common/command.c ****     backlight_config_t bc;
 173:../../../../tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 174:../../../../tmk_core/common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 175:../../../../tmk_core/common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 176:../../../../tmk_core/common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 177:../../../../tmk_core/common/command.c **** #endif
 178:../../../../tmk_core/common/command.c **** }
 179:../../../../tmk_core/common/command.c **** #endif
 180:../../../../tmk_core/common/command.c **** 
 181:../../../../tmk_core/common/command.c **** static bool command_common(uint8_t code)
 182:../../../../tmk_core/common/command.c **** {
 183:../../../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 184:../../../../tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 185:../../../../tmk_core/common/command.c **** #endif
 186:../../../../tmk_core/common/command.c ****     switch (code) {
 187:../../../../tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 188:../../../../tmk_core/common/command.c ****         case KC_Z:
 189:../../../../tmk_core/common/command.c ****             // test breathing sleep LED
 190:../../../../tmk_core/common/command.c ****             print("Sleep LED test\n");
 191:../../../../tmk_core/common/command.c ****             sleep_led_toggle();
 192:../../../../tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 193:../../../../tmk_core/common/command.c ****             break;
 194:../../../../tmk_core/common/command.c **** #endif
 195:../../../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 196:../../../../tmk_core/common/command.c ****         case KC_E:
 197:../../../../tmk_core/common/command.c ****             print("eeconfig:\n");
 198:../../../../tmk_core/common/command.c ****             print_eeconfig();
 199:../../../../tmk_core/common/command.c ****             break;
 200:../../../../tmk_core/common/command.c **** #endif
 201:../../../../tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 202:../../../../tmk_core/common/command.c ****         case KC_CAPSLOCK:
 203:../../../../tmk_core/common/command.c ****             if (host_get_driver()) {
 204:../../../../tmk_core/common/command.c ****                 host_driver = host_get_driver();
 205:../../../../tmk_core/common/command.c ****                 clear_keyboard();
 206:../../../../tmk_core/common/command.c ****                 host_set_driver(0);
 207:../../../../tmk_core/common/command.c ****                 print("Locked.\n");
 208:../../../../tmk_core/common/command.c ****             } else {
 209:../../../../tmk_core/common/command.c ****                 host_set_driver(host_driver);
 210:../../../../tmk_core/common/command.c ****                 print("Unlocked.\n");
 211:../../../../tmk_core/common/command.c ****             }
 212:../../../../tmk_core/common/command.c ****             break;
 213:../../../../tmk_core/common/command.c **** #endif
 214:../../../../tmk_core/common/command.c ****         case KC_H:
 215:../../../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 216:../../../../tmk_core/common/command.c ****             command_common_help();
 217:../../../../tmk_core/common/command.c ****             break;
 218:../../../../tmk_core/common/command.c ****         case KC_C:
 219:../../../../tmk_core/common/command.c ****             debug_matrix   = false;
 220:../../../../tmk_core/common/command.c ****             debug_keyboard = false;
 221:../../../../tmk_core/common/command.c ****             debug_mouse    = false;
 222:../../../../tmk_core/common/command.c ****             debug_enable   = false;
 223:../../../../tmk_core/common/command.c ****             command_console_help();
 224:../../../../tmk_core/common/command.c ****             print("C> ");
 225:../../../../tmk_core/common/command.c ****             command_state = CONSOLE;
 226:../../../../tmk_core/common/command.c ****             break;
 227:../../../../tmk_core/common/command.c ****         case KC_PAUSE:
 228:../../../../tmk_core/common/command.c ****             clear_keyboard();
 229:../../../../tmk_core/common/command.c ****             print("\n\nbootloader... ");
 230:../../../../tmk_core/common/command.c ****             wait_ms(1000);
 231:../../../../tmk_core/common/command.c ****             bootloader_jump(); // not return
 232:../../../../tmk_core/common/command.c ****             break;
 233:../../../../tmk_core/common/command.c ****         case KC_D:
 234:../../../../tmk_core/common/command.c ****             if (debug_enable) {
 235:../../../../tmk_core/common/command.c ****                 print("\ndebug: off\n");
 236:../../../../tmk_core/common/command.c ****                 debug_matrix   = false;
 237:../../../../tmk_core/common/command.c ****                 debug_keyboard = false;
 238:../../../../tmk_core/common/command.c ****                 debug_mouse    = false;
 239:../../../../tmk_core/common/command.c ****                 debug_enable   = false;
 240:../../../../tmk_core/common/command.c ****             } else {
 241:../../../../tmk_core/common/command.c ****                 print("\ndebug: on\n");
 242:../../../../tmk_core/common/command.c ****                 debug_enable   = true;
 243:../../../../tmk_core/common/command.c ****             }
 244:../../../../tmk_core/common/command.c ****             break;
 245:../../../../tmk_core/common/command.c ****         case KC_X: // debug matrix toggle
 246:../../../../tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 247:../../../../tmk_core/common/command.c ****             if (debug_matrix) {
 248:../../../../tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 249:../../../../tmk_core/common/command.c ****                 debug_enable = true;
 250:../../../../tmk_core/common/command.c ****             } else {
 251:../../../../tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 252:../../../../tmk_core/common/command.c ****             }
 253:../../../../tmk_core/common/command.c ****             break;
 254:../../../../tmk_core/common/command.c ****         case KC_K: // debug keyboard toggle
 255:../../../../tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 256:../../../../tmk_core/common/command.c ****             if (debug_keyboard) {
 257:../../../../tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 258:../../../../tmk_core/common/command.c ****                 debug_enable = true;
 259:../../../../tmk_core/common/command.c ****             } else {
 260:../../../../tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 261:../../../../tmk_core/common/command.c ****             }
 262:../../../../tmk_core/common/command.c ****             break;
 263:../../../../tmk_core/common/command.c ****         case KC_M: // debug mouse toggle
 264:../../../../tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 265:../../../../tmk_core/common/command.c ****             if (debug_mouse) {
 266:../../../../tmk_core/common/command.c ****                 print("\nmouse: on\n");
 267:../../../../tmk_core/common/command.c ****                 debug_enable = true;
 268:../../../../tmk_core/common/command.c ****             } else {
 269:../../../../tmk_core/common/command.c ****                 print("\nmouse: off\n");
 270:../../../../tmk_core/common/command.c ****             }
 271:../../../../tmk_core/common/command.c ****             break;
 272:../../../../tmk_core/common/command.c ****         case KC_V: // print version & information
 273:../../../../tmk_core/common/command.c ****             print("\n\t- Version -\n");
 274:../../../../tmk_core/common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 275:../../../../tmk_core/common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 276:../../../../tmk_core/common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 277:../../../../tmk_core/common/command.c ****                   "VER: " STR(DEVICE_VER) "\n");
 278:../../../../tmk_core/common/command.c ****             print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 279:../../../../tmk_core/common/command.c ****             /* build options */
 280:../../../../tmk_core/common/command.c ****             print("OPTIONS:"
 281:../../../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 282:../../../../tmk_core/common/command.c ****             " PJRC"
 283:../../../../tmk_core/common/command.c **** #endif
 284:../../../../tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 285:../../../../tmk_core/common/command.c ****             " LUFA"
 286:../../../../tmk_core/common/command.c **** #endif
 287:../../../../tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 288:../../../../tmk_core/common/command.c ****             " VUSB"
 289:../../../../tmk_core/common/command.c **** #endif
 290:../../../../tmk_core/common/command.c **** #ifdef PROTOCOL_CHIBIOS
 291:../../../../tmk_core/common/command.c ****             " CHIBIOS"
 292:../../../../tmk_core/common/command.c **** #endif
 293:../../../../tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 294:../../../../tmk_core/common/command.c ****             " BOOTMAGIC"
 295:../../../../tmk_core/common/command.c **** #endif
 296:../../../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 297:../../../../tmk_core/common/command.c ****             " MOUSEKEY"
 298:../../../../tmk_core/common/command.c **** #endif
 299:../../../../tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 300:../../../../tmk_core/common/command.c ****             " EXTRAKEY"
 301:../../../../tmk_core/common/command.c **** #endif
 302:../../../../tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 303:../../../../tmk_core/common/command.c ****             " CONSOLE"
 304:../../../../tmk_core/common/command.c **** #endif
 305:../../../../tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 306:../../../../tmk_core/common/command.c ****             " COMMAND"
 307:../../../../tmk_core/common/command.c **** #endif
 308:../../../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 309:../../../../tmk_core/common/command.c ****             " NKRO"
 310:../../../../tmk_core/common/command.c **** #endif
 311:../../../../tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 312:../../../../tmk_core/common/command.c ****             " KEYMAP_SECTION"
 313:../../../../tmk_core/common/command.c **** #endif
 314:../../../../tmk_core/common/command.c ****             " " STR(BOOTLOADER_SIZE) "\n");
 315:../../../../tmk_core/common/command.c **** 
 316:../../../../tmk_core/common/command.c ****             print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 317:../../../../tmk_core/common/command.c **** #if defined(__AVR__)
 318:../../../../tmk_core/common/command.c ****                   " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 319:../../../../tmk_core/common/command.c ****                   " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
 320:../../../../tmk_core/common/command.c **** #elif defined(__arm__)
 321:../../../../tmk_core/common/command.c ****             // TODO
 322:../../../../tmk_core/common/command.c ****             );
 323:../../../../tmk_core/common/command.c **** #endif
 324:../../../../tmk_core/common/command.c ****             break;
 325:../../../../tmk_core/common/command.c ****         case KC_S:
 326:../../../../tmk_core/common/command.c ****             print("\n\t- Status -\n");
 327:../../../../tmk_core/common/command.c ****             print_val_hex8(host_keyboard_leds());
 328:../../../../tmk_core/common/command.c ****             print_val_hex8(keyboard_protocol);
 329:../../../../tmk_core/common/command.c ****             print_val_hex8(keyboard_idle);
 330:../../../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 331:../../../../tmk_core/common/command.c ****             print_val_hex8(keyboard_nkro);
 332:../../../../tmk_core/common/command.c **** #endif
 333:../../../../tmk_core/common/command.c ****             print_val_hex32(timer_read32());
 334:../../../../tmk_core/common/command.c **** 
 335:../../../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 336:../../../../tmk_core/common/command.c ****             print_val_hex8(UDCON);
 337:../../../../tmk_core/common/command.c ****             print_val_hex8(UDIEN);
 338:../../../../tmk_core/common/command.c ****             print_val_hex8(UDINT);
 339:../../../../tmk_core/common/command.c ****             print_val_hex8(usb_keyboard_leds);
 340:../../../../tmk_core/common/command.c ****             print_val_hex8(usb_keyboard_idle_count);
 341:../../../../tmk_core/common/command.c **** #endif
 342:../../../../tmk_core/common/command.c **** 
 343:../../../../tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 344:../../../../tmk_core/common/command.c **** #   if USB_COUNT_SOF
 345:../../../../tmk_core/common/command.c ****             print_val_hex8(usbSofCount);
 346:../../../../tmk_core/common/command.c **** #   endif
 347:../../../../tmk_core/common/command.c **** #endif
 348:../../../../tmk_core/common/command.c ****             break;
 349:../../../../tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 350:../../../../tmk_core/common/command.c ****         case KC_N:
 351:../../../../tmk_core/common/command.c ****             clear_keyboard(); //Prevents stuck keys.
 352:../../../../tmk_core/common/command.c ****             keyboard_nkro = !keyboard_nkro;
 353:../../../../tmk_core/common/command.c ****             if (keyboard_nkro) {
 354:../../../../tmk_core/common/command.c ****                 print("NKRO: on\n");
 355:../../../../tmk_core/common/command.c ****             } else {
 356:../../../../tmk_core/common/command.c ****                 print("NKRO: off\n");
 357:../../../../tmk_core/common/command.c ****             }
 358:../../../../tmk_core/common/command.c ****             break;
 359:../../../../tmk_core/common/command.c **** #endif
 360:../../../../tmk_core/common/command.c ****         case KC_ESC:
 361:../../../../tmk_core/common/command.c ****         case KC_GRV:
 362:../../../../tmk_core/common/command.c ****         case KC_0:
 363:../../../../tmk_core/common/command.c ****         case KC_F10:
 364:../../../../tmk_core/common/command.c ****             switch_default_layer(0);
 365:../../../../tmk_core/common/command.c ****             break;
 366:../../../../tmk_core/common/command.c ****         case KC_1 ... KC_9:
 367:../../../../tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 368:../../../../tmk_core/common/command.c ****             break;
 369:../../../../tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 370:../../../../tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 371:../../../../tmk_core/common/command.c ****             break;
 372:../../../../tmk_core/common/command.c ****         default:
 373:../../../../tmk_core/common/command.c ****             print("?");
 374:../../../../tmk_core/common/command.c ****             return false;
 375:../../../../tmk_core/common/command.c ****     }
 376:../../../../tmk_core/common/command.c ****     return true;
 377:../../../../tmk_core/common/command.c **** }
 378:../../../../tmk_core/common/command.c **** 
 379:../../../../tmk_core/common/command.c **** 
 380:../../../../tmk_core/common/command.c **** /***********************************************************
 381:../../../../tmk_core/common/command.c ****  * Command console
 382:../../../../tmk_core/common/command.c ****  ***********************************************************/
 383:../../../../tmk_core/common/command.c **** static void command_console_help(void)
 384:../../../../tmk_core/common/command.c **** {
  16               		.loc 1 384 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 385:../../../../tmk_core/common/command.c ****     print("\n\t- Console -\n"
  22               		.loc 1 385 0
  23 0000 80E0      		ldi r24,lo8(__c.2602)
  24 0002 90E0      		ldi r25,hi8(__c.2602)
  25 0004 0C94 0000 		jmp xputs
  26               	.LVL0:
  27               		.cfi_endproc
  28               	.LFE16:
  30               		.section	.text.mousekey_console_help,"ax",@progbits
  32               	mousekey_console_help:
  33               	.LFB21:
 386:../../../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 387:../../../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 388:../../../../tmk_core/common/command.c ****           "m:	mousekey\n"
 389:../../../../tmk_core/common/command.c **** #endif
 390:../../../../tmk_core/common/command.c ****     );
 391:../../../../tmk_core/common/command.c **** }
 392:../../../../tmk_core/common/command.c **** 
 393:../../../../tmk_core/common/command.c **** static bool command_console(uint8_t code)
 394:../../../../tmk_core/common/command.c **** {
 395:../../../../tmk_core/common/command.c ****     switch (code) {
 396:../../../../tmk_core/common/command.c ****         case KC_H:
 397:../../../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 398:../../../../tmk_core/common/command.c ****             command_console_help();
 399:../../../../tmk_core/common/command.c ****             break;
 400:../../../../tmk_core/common/command.c ****         case KC_Q:
 401:../../../../tmk_core/common/command.c ****         case KC_ESC:
 402:../../../../tmk_core/common/command.c ****             command_state = ONESHOT;
 403:../../../../tmk_core/common/command.c ****             return false;
 404:../../../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 405:../../../../tmk_core/common/command.c ****         case KC_M:
 406:../../../../tmk_core/common/command.c ****             mousekey_console_help();
 407:../../../../tmk_core/common/command.c ****             print("M> ");
 408:../../../../tmk_core/common/command.c ****             command_state = MOUSEKEY;
 409:../../../../tmk_core/common/command.c ****             return true;
 410:../../../../tmk_core/common/command.c **** #endif
 411:../../../../tmk_core/common/command.c ****         default:
 412:../../../../tmk_core/common/command.c ****             print("?");
 413:../../../../tmk_core/common/command.c ****             return false;
 414:../../../../tmk_core/common/command.c ****     }
 415:../../../../tmk_core/common/command.c ****     print("C> ");
 416:../../../../tmk_core/common/command.c ****     return true;
 417:../../../../tmk_core/common/command.c **** }
 418:../../../../tmk_core/common/command.c **** 
 419:../../../../tmk_core/common/command.c **** 
 420:../../../../tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 421:../../../../tmk_core/common/command.c **** /***********************************************************
 422:../../../../tmk_core/common/command.c ****  * Mousekey console
 423:../../../../tmk_core/common/command.c ****  ***********************************************************/
 424:../../../../tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 425:../../../../tmk_core/common/command.c **** 
 426:../../../../tmk_core/common/command.c **** static void mousekey_param_print(void)
 427:../../../../tmk_core/common/command.c **** {
 428:../../../../tmk_core/common/command.c ****     print("\n\t- Values -\n");
 429:../../../../tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 430:../../../../tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 431:../../../../tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 432:../../../../tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 433:../../../../tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 434:../../../../tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 435:../../../../tmk_core/common/command.c **** }
 436:../../../../tmk_core/common/command.c **** 
 437:../../../../tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 438:../../../../tmk_core/common/command.c **** #define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
 439:../../../../tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 440:../../../../tmk_core/common/command.c **** {
 441:../../../../tmk_core/common/command.c ****     switch (param) {
 442:../../../../tmk_core/common/command.c ****         case 1:
 443:../../../../tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 444:../../../../tmk_core/common/command.c ****                 mk_delay += inc;
 445:../../../../tmk_core/common/command.c ****             else
 446:../../../../tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 447:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 448:../../../../tmk_core/common/command.c ****             break;
 449:../../../../tmk_core/common/command.c ****         case 2:
 450:../../../../tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 451:../../../../tmk_core/common/command.c ****                 mk_interval += inc;
 452:../../../../tmk_core/common/command.c ****             else
 453:../../../../tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 454:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 455:../../../../tmk_core/common/command.c ****             break;
 456:../../../../tmk_core/common/command.c ****         case 3:
 457:../../../../tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 458:../../../../tmk_core/common/command.c ****                 mk_max_speed += inc;
 459:../../../../tmk_core/common/command.c ****             else
 460:../../../../tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 461:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 462:../../../../tmk_core/common/command.c ****             break;
 463:../../../../tmk_core/common/command.c ****         case 4:
 464:../../../../tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 465:../../../../tmk_core/common/command.c ****                 mk_time_to_max += inc;
 466:../../../../tmk_core/common/command.c ****             else
 467:../../../../tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 468:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 469:../../../../tmk_core/common/command.c ****             break;
 470:../../../../tmk_core/common/command.c ****         case 5:
 471:../../../../tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 472:../../../../tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 473:../../../../tmk_core/common/command.c ****             else
 474:../../../../tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 475:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 476:../../../../tmk_core/common/command.c ****             break;
 477:../../../../tmk_core/common/command.c ****         case 6:
 478:../../../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 479:../../../../tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 480:../../../../tmk_core/common/command.c ****             else
 481:../../../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 482:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 483:../../../../tmk_core/common/command.c ****             break;
 484:../../../../tmk_core/common/command.c ****     }
 485:../../../../tmk_core/common/command.c **** }
 486:../../../../tmk_core/common/command.c **** 
 487:../../../../tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 488:../../../../tmk_core/common/command.c **** {
 489:../../../../tmk_core/common/command.c ****     switch (param) {
 490:../../../../tmk_core/common/command.c ****         case 1:
 491:../../../../tmk_core/common/command.c ****             if (mk_delay > dec)
 492:../../../../tmk_core/common/command.c ****                 mk_delay -= dec;
 493:../../../../tmk_core/common/command.c ****             else
 494:../../../../tmk_core/common/command.c ****                 mk_delay = 0;
 495:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 496:../../../../tmk_core/common/command.c ****             break;
 497:../../../../tmk_core/common/command.c ****         case 2:
 498:../../../../tmk_core/common/command.c ****             if (mk_interval > dec)
 499:../../../../tmk_core/common/command.c ****                 mk_interval -= dec;
 500:../../../../tmk_core/common/command.c ****             else
 501:../../../../tmk_core/common/command.c ****                 mk_interval = 0;
 502:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 503:../../../../tmk_core/common/command.c ****             break;
 504:../../../../tmk_core/common/command.c ****         case 3:
 505:../../../../tmk_core/common/command.c ****             if (mk_max_speed > dec)
 506:../../../../tmk_core/common/command.c ****                 mk_max_speed -= dec;
 507:../../../../tmk_core/common/command.c ****             else
 508:../../../../tmk_core/common/command.c ****                 mk_max_speed = 0;
 509:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 510:../../../../tmk_core/common/command.c ****             break;
 511:../../../../tmk_core/common/command.c ****         case 4:
 512:../../../../tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 513:../../../../tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 514:../../../../tmk_core/common/command.c ****             else
 515:../../../../tmk_core/common/command.c ****                 mk_time_to_max = 0;
 516:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 517:../../../../tmk_core/common/command.c ****             break;
 518:../../../../tmk_core/common/command.c ****         case 5:
 519:../../../../tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 520:../../../../tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 521:../../../../tmk_core/common/command.c ****             else
 522:../../../../tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 523:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 524:../../../../tmk_core/common/command.c ****             break;
 525:../../../../tmk_core/common/command.c ****         case 6:
 526:../../../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 527:../../../../tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 528:../../../../tmk_core/common/command.c ****             else
 529:../../../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 530:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 531:../../../../tmk_core/common/command.c ****             break;
 532:../../../../tmk_core/common/command.c ****     }
 533:../../../../tmk_core/common/command.c **** }
 534:../../../../tmk_core/common/command.c **** 
 535:../../../../tmk_core/common/command.c **** static void mousekey_console_help(void)
 536:../../../../tmk_core/common/command.c **** {
  34               		.loc 1 536 0
  35               		.cfi_startproc
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
 537:../../../../tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
  40               		.loc 1 537 0
  41 0000 80E0      		ldi r24,lo8(__c.2711)
  42 0002 90E0      		ldi r25,hi8(__c.2711)
  43 0004 0E94 0000 		call xputs
  44               	.LVL1:
 538:../../../../tmk_core/common/command.c ****           "ESC/q:	quit\n"
 539:../../../../tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 540:../../../../tmk_core/common/command.c ****           "2:	interval(ms)\n"
 541:../../../../tmk_core/common/command.c ****           "3:	max_speed\n"
 542:../../../../tmk_core/common/command.c ****           "4:	time_to_max\n"
 543:../../../../tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 544:../../../../tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 545:../../../../tmk_core/common/command.c ****           "\n"
 546:../../../../tmk_core/common/command.c ****           "p:	print values\n"
 547:../../../../tmk_core/common/command.c ****           "d:	set defaults\n"
 548:../../../../tmk_core/common/command.c ****           "up:	+1\n"
 549:../../../../tmk_core/common/command.c ****           "down:	-1\n"
 550:../../../../tmk_core/common/command.c ****           "pgup:	+10\n"
 551:../../../../tmk_core/common/command.c ****           "pgdown:	-10\n"
 552:../../../../tmk_core/common/command.c ****           "\n"
 553:../../../../tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 554:../../../../tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n" 
  45               		.loc 1 554 0
  46 0008 1F92      		push __zero_reg__
  47               	.LCFI0:
  48               		.cfi_def_cfa_offset 3
  49 000a 81E0      		ldi r24,lo8(1)
  50 000c 8F93      		push r24
  51               	.LCFI1:
  52               		.cfi_def_cfa_offset 4
  53 000e 1F92      		push __zero_reg__
  54               	.LCFI2:
  55               		.cfi_def_cfa_offset 5
  56 0010 85E0      		ldi r24,lo8(5)
  57 0012 8F93      		push r24
  58               	.LCFI3:
  59               		.cfi_def_cfa_offset 6
  60 0014 80E0      		ldi r24,lo8(__c.2713)
  61 0016 90E0      		ldi r25,hi8(__c.2713)
  62 0018 9F93      		push r25
  63               	.LCFI4:
  64               		.cfi_def_cfa_offset 7
  65 001a 8F93      		push r24
  66               	.LCFI5:
  67               		.cfi_def_cfa_offset 8
  68 001c 0E94 0000 		call __xprintf
  69               	.LVL2:
  70 0020 0F90      		pop __tmp_reg__
  71 0022 0F90      		pop __tmp_reg__
  72 0024 0F90      		pop __tmp_reg__
  73 0026 0F90      		pop __tmp_reg__
  74 0028 0F90      		pop __tmp_reg__
  75 002a 0F90      		pop __tmp_reg__
  76               	.LCFI6:
  77               		.cfi_def_cfa_offset 2
  78 002c 0895      		ret
  79               		.cfi_endproc
  80               	.LFE21:
  82               		.section	.text.mousekey_param_inc,"ax",@progbits
  84               	mousekey_param_inc:
  85               	.LFB19:
 440:../../../../tmk_core/common/command.c **** {
  86               		.loc 1 440 0
  87               		.cfi_startproc
  88               	.LVL3:
  89               	/* prologue: function */
  90               	/* frame size = 0 */
  91               	/* stack size = 0 */
  92               	.L__stack_usage = 0
 441:../../../../tmk_core/common/command.c ****     switch (param) {
  93               		.loc 1 441 0
  94 0000 8330      		cpi r24,lo8(3)
  95 0002 01F0      		breq .L7
  96 0004 00F4      		brsh .L11
  97 0006 8130      		cpi r24,lo8(1)
  98 0008 01F0      		breq .L5
  99 000a 8230      		cpi r24,lo8(2)
 100 000c 01F0      		breq .+2
 101 000e 00C0      		rjmp .L3
 102 0010 00C0      		rjmp .L6
 103               	.L11:
 104 0012 8530      		cpi r24,lo8(5)
 105 0014 01F4      		brne .+2
 106 0016 00C0      		rjmp .L9
 107 0018 00F4      		brsh .+2
 108 001a 00C0      		rjmp .L8
 109 001c 8630      		cpi r24,lo8(6)
 110 001e 01F0      		breq .+2
 111 0020 00C0      		rjmp .L3
 112 0022 00C0      		rjmp .L10
 113               	.L5:
 443:../../../../tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 114               		.loc 1 443 0
 115 0024 2091 0000 		lds r18,mk_delay
 116 0028 862F      		mov r24,r22
 117               	.LVL4:
 118 002a 90E0      		ldi r25,0
 119 002c 820F      		add r24,r18
 120 002e 911D      		adc r25,__zero_reg__
 121 0030 8F3F      		cpi r24,-1
 122 0032 9105      		cpc r25,__zero_reg__
 123 0034 00F4      		brsh .L12
 444:../../../../tmk_core/common/command.c ****                 mk_delay += inc;
 124               		.loc 1 444 0
 125 0036 620F      		add r22,r18
 126               	.LVL5:
 127 0038 6093 0000 		sts mk_delay,r22
 128 003c 00C0      		rjmp .L13
 129               	.LVL6:
 130               	.L12:
 446:../../../../tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 131               		.loc 1 446 0
 132 003e 8FEF      		ldi r24,lo8(-1)
 133 0040 8093 0000 		sts mk_delay,r24
 134               	.LVL7:
 135               	.L13:
 447:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 136               		.loc 1 447 0
 137 0044 8091 0000 		lds r24,mk_delay
 138 0048 1F92      		push __zero_reg__
 139               	.LCFI7:
 140               		.cfi_remember_state
 141               		.cfi_def_cfa_offset 3
 142 004a 8F93      		push r24
 143               	.LCFI8:
 144               		.cfi_def_cfa_offset 4
 145 004c 80E0      		ldi r24,lo8(__c.2667)
 146 004e 90E0      		ldi r25,hi8(__c.2667)
 147 0050 00C0      		rjmp .L24
 148               	.LVL8:
 149               	.L6:
 150               	.LCFI9:
 151               		.cfi_restore_state
 450:../../../../tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 152               		.loc 1 450 0
 153 0052 2091 0000 		lds r18,mk_interval
 154 0056 862F      		mov r24,r22
 155               	.LVL9:
 156 0058 90E0      		ldi r25,0
 157 005a 820F      		add r24,r18
 158 005c 911D      		adc r25,__zero_reg__
 159 005e 8F3F      		cpi r24,-1
 160 0060 9105      		cpc r25,__zero_reg__
 161 0062 00F4      		brsh .L14
 451:../../../../tmk_core/common/command.c ****                 mk_interval += inc;
 162               		.loc 1 451 0
 163 0064 620F      		add r22,r18
 164               	.LVL10:
 165 0066 6093 0000 		sts mk_interval,r22
 166 006a 00C0      		rjmp .L15
 167               	.LVL11:
 168               	.L14:
 453:../../../../tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 169               		.loc 1 453 0
 170 006c 8FEF      		ldi r24,lo8(-1)
 171 006e 8093 0000 		sts mk_interval,r24
 172               	.LVL12:
 173               	.L15:
 454:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 174               		.loc 1 454 0
 175 0072 8091 0000 		lds r24,mk_interval
 176 0076 1F92      		push __zero_reg__
 177               	.LCFI10:
 178               		.cfi_remember_state
 179               		.cfi_def_cfa_offset 3
 180 0078 8F93      		push r24
 181               	.LCFI11:
 182               		.cfi_def_cfa_offset 4
 183 007a 80E0      		ldi r24,lo8(__c.2671)
 184 007c 90E0      		ldi r25,hi8(__c.2671)
 185 007e 00C0      		rjmp .L24
 186               	.LVL13:
 187               	.L7:
 188               	.LCFI12:
 189               		.cfi_restore_state
 457:../../../../tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 190               		.loc 1 457 0
 191 0080 2091 0000 		lds r18,mk_max_speed
 192 0084 862F      		mov r24,r22
 193               	.LVL14:
 194 0086 90E0      		ldi r25,0
 195 0088 820F      		add r24,r18
 196 008a 911D      		adc r25,__zero_reg__
 197 008c 8F3F      		cpi r24,-1
 198 008e 9105      		cpc r25,__zero_reg__
 199 0090 00F4      		brsh .L16
 458:../../../../tmk_core/common/command.c ****                 mk_max_speed += inc;
 200               		.loc 1 458 0
 201 0092 620F      		add r22,r18
 202               	.LVL15:
 203 0094 6093 0000 		sts mk_max_speed,r22
 204 0098 00C0      		rjmp .L17
 205               	.LVL16:
 206               	.L16:
 460:../../../../tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 207               		.loc 1 460 0
 208 009a 8FEF      		ldi r24,lo8(-1)
 209 009c 8093 0000 		sts mk_max_speed,r24
 210               	.LVL17:
 211               	.L17:
 461:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 212               		.loc 1 461 0
 213 00a0 8091 0000 		lds r24,mk_max_speed
 214 00a4 1F92      		push __zero_reg__
 215               	.LCFI13:
 216               		.cfi_remember_state
 217               		.cfi_def_cfa_offset 3
 218 00a6 8F93      		push r24
 219               	.LCFI14:
 220               		.cfi_def_cfa_offset 4
 221 00a8 80E0      		ldi r24,lo8(__c.2674)
 222 00aa 90E0      		ldi r25,hi8(__c.2674)
 223 00ac 00C0      		rjmp .L24
 224               	.LVL18:
 225               	.L8:
 226               	.LCFI15:
 227               		.cfi_restore_state
 464:../../../../tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 228               		.loc 1 464 0
 229 00ae 2091 0000 		lds r18,mk_time_to_max
 230 00b2 862F      		mov r24,r22
 231               	.LVL19:
 232 00b4 90E0      		ldi r25,0
 233 00b6 820F      		add r24,r18
 234 00b8 911D      		adc r25,__zero_reg__
 235 00ba 8F3F      		cpi r24,-1
 236 00bc 9105      		cpc r25,__zero_reg__
 237 00be 00F4      		brsh .L18
 465:../../../../tmk_core/common/command.c ****                 mk_time_to_max += inc;
 238               		.loc 1 465 0
 239 00c0 620F      		add r22,r18
 240               	.LVL20:
 241 00c2 6093 0000 		sts mk_time_to_max,r22
 242 00c6 00C0      		rjmp .L19
 243               	.LVL21:
 244               	.L18:
 467:../../../../tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 245               		.loc 1 467 0
 246 00c8 8FEF      		ldi r24,lo8(-1)
 247 00ca 8093 0000 		sts mk_time_to_max,r24
 248               	.LVL22:
 249               	.L19:
 468:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 250               		.loc 1 468 0
 251 00ce 8091 0000 		lds r24,mk_time_to_max
 252 00d2 1F92      		push __zero_reg__
 253               	.LCFI16:
 254               		.cfi_remember_state
 255               		.cfi_def_cfa_offset 3
 256 00d4 8F93      		push r24
 257               	.LCFI17:
 258               		.cfi_def_cfa_offset 4
 259 00d6 80E0      		ldi r24,lo8(__c.2677)
 260 00d8 90E0      		ldi r25,hi8(__c.2677)
 261 00da 00C0      		rjmp .L24
 262               	.LVL23:
 263               	.L9:
 264               	.LCFI18:
 265               		.cfi_restore_state
 471:../../../../tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 266               		.loc 1 471 0
 267 00dc 2091 0000 		lds r18,mk_wheel_max_speed
 268 00e0 862F      		mov r24,r22
 269               	.LVL24:
 270 00e2 90E0      		ldi r25,0
 271 00e4 820F      		add r24,r18
 272 00e6 911D      		adc r25,__zero_reg__
 273 00e8 8F3F      		cpi r24,-1
 274 00ea 9105      		cpc r25,__zero_reg__
 275 00ec 00F4      		brsh .L20
 472:../../../../tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 276               		.loc 1 472 0
 277 00ee 620F      		add r22,r18
 278               	.LVL25:
 279 00f0 6093 0000 		sts mk_wheel_max_speed,r22
 280 00f4 00C0      		rjmp .L21
 281               	.LVL26:
 282               	.L20:
 474:../../../../tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 283               		.loc 1 474 0
 284 00f6 8FEF      		ldi r24,lo8(-1)
 285 00f8 8093 0000 		sts mk_wheel_max_speed,r24
 286               	.LVL27:
 287               	.L21:
 475:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 288               		.loc 1 475 0
 289 00fc 8091 0000 		lds r24,mk_wheel_max_speed
 290 0100 1F92      		push __zero_reg__
 291               	.LCFI19:
 292               		.cfi_remember_state
 293               		.cfi_def_cfa_offset 3
 294 0102 8F93      		push r24
 295               	.LCFI20:
 296               		.cfi_def_cfa_offset 4
 297 0104 80E0      		ldi r24,lo8(__c.2680)
 298 0106 90E0      		ldi r25,hi8(__c.2680)
 299 0108 00C0      		rjmp .L24
 300               	.LVL28:
 301               	.L10:
 302               	.LCFI21:
 303               		.cfi_restore_state
 478:../../../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 304               		.loc 1 478 0
 305 010a 2091 0000 		lds r18,mk_wheel_time_to_max
 306 010e 862F      		mov r24,r22
 307               	.LVL29:
 308 0110 90E0      		ldi r25,0
 309 0112 820F      		add r24,r18
 310 0114 911D      		adc r25,__zero_reg__
 311 0116 8F3F      		cpi r24,-1
 312 0118 9105      		cpc r25,__zero_reg__
 313 011a 00F4      		brsh .L22
 479:../../../../tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 314               		.loc 1 479 0
 315 011c 620F      		add r22,r18
 316               	.LVL30:
 317 011e 6093 0000 		sts mk_wheel_time_to_max,r22
 318 0122 00C0      		rjmp .L23
 319               	.LVL31:
 320               	.L22:
 481:../../../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 321               		.loc 1 481 0
 322 0124 8FEF      		ldi r24,lo8(-1)
 323 0126 8093 0000 		sts mk_wheel_time_to_max,r24
 324               	.LVL32:
 325               	.L23:
 482:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 326               		.loc 1 482 0
 327 012a 8091 0000 		lds r24,mk_wheel_time_to_max
 328 012e 1F92      		push __zero_reg__
 329               	.LCFI22:
 330               		.cfi_def_cfa_offset 3
 331 0130 8F93      		push r24
 332               	.LCFI23:
 333               		.cfi_def_cfa_offset 4
 334 0132 80E0      		ldi r24,lo8(__c.2683)
 335 0134 90E0      		ldi r25,hi8(__c.2683)
 336               	.L24:
 337 0136 9F93      		push r25
 338               	.LCFI24:
 339               		.cfi_def_cfa_offset 5
 340 0138 8F93      		push r24
 341               	.LCFI25:
 342               		.cfi_def_cfa_offset 6
 343 013a 0E94 0000 		call __xprintf
 344               	.LVL33:
 483:../../../../tmk_core/common/command.c ****             break;
 345               		.loc 1 483 0
 346 013e 0F90      		pop __tmp_reg__
 347 0140 0F90      		pop __tmp_reg__
 348 0142 0F90      		pop __tmp_reg__
 349 0144 0F90      		pop __tmp_reg__
 350               	.LCFI26:
 351               		.cfi_def_cfa_offset 2
 352               	.L3:
 353 0146 0895      		ret
 354               		.cfi_endproc
 355               	.LFE19:
 357               		.section	.text.mousekey_param_dec,"ax",@progbits
 359               	mousekey_param_dec:
 360               	.LFB20:
 488:../../../../tmk_core/common/command.c **** {
 361               		.loc 1 488 0
 362               		.cfi_startproc
 363               	.LVL34:
 364               	/* prologue: function */
 365               	/* frame size = 0 */
 366               	/* stack size = 0 */
 367               	.L__stack_usage = 0
 489:../../../../tmk_core/common/command.c ****     switch (param) {
 368               		.loc 1 489 0
 369 0000 8330      		cpi r24,lo8(3)
 370 0002 01F0      		breq .L29
 371 0004 00F4      		brsh .L33
 372 0006 8130      		cpi r24,lo8(1)
 373 0008 01F0      		breq .L27
 374 000a 8230      		cpi r24,lo8(2)
 375 000c 01F0      		breq .+2
 376 000e 00C0      		rjmp .L25
 377 0010 00C0      		rjmp .L28
 378               	.L33:
 379 0012 8530      		cpi r24,lo8(5)
 380 0014 01F4      		brne .+2
 381 0016 00C0      		rjmp .L31
 382 0018 00F0      		brlo .L30
 383 001a 8630      		cpi r24,lo8(6)
 384 001c 01F0      		breq .+2
 385 001e 00C0      		rjmp .L25
 386 0020 00C0      		rjmp .L32
 387               	.L27:
 491:../../../../tmk_core/common/command.c ****             if (mk_delay > dec)
 388               		.loc 1 491 0
 389 0022 8091 0000 		lds r24,mk_delay
 390               	.LVL35:
 391 0026 6817      		cp r22,r24
 392 0028 00F4      		brsh .L34
 492:../../../../tmk_core/common/command.c ****                 mk_delay -= dec;
 393               		.loc 1 492 0
 394 002a 861B      		sub r24,r22
 395 002c 8093 0000 		sts mk_delay,r24
 396 0030 00C0      		rjmp .L35
 397               	.L34:
 494:../../../../tmk_core/common/command.c ****                 mk_delay = 0;
 398               		.loc 1 494 0
 399 0032 1092 0000 		sts mk_delay,__zero_reg__
 400               	.L35:
 495:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 401               		.loc 1 495 0
 402 0036 8091 0000 		lds r24,mk_delay
 403 003a 1F92      		push __zero_reg__
 404               	.LCFI27:
 405               		.cfi_remember_state
 406               		.cfi_def_cfa_offset 3
 407 003c 8F93      		push r24
 408               	.LCFI28:
 409               		.cfi_def_cfa_offset 4
 410 003e 80E0      		ldi r24,lo8(__c.2690)
 411 0040 90E0      		ldi r25,hi8(__c.2690)
 412 0042 00C0      		rjmp .L46
 413               	.LVL36:
 414               	.L28:
 415               	.LCFI29:
 416               		.cfi_restore_state
 498:../../../../tmk_core/common/command.c ****             if (mk_interval > dec)
 417               		.loc 1 498 0
 418 0044 8091 0000 		lds r24,mk_interval
 419               	.LVL37:
 420 0048 6817      		cp r22,r24
 421 004a 00F4      		brsh .L36
 499:../../../../tmk_core/common/command.c ****                 mk_interval -= dec;
 422               		.loc 1 499 0
 423 004c 861B      		sub r24,r22
 424 004e 8093 0000 		sts mk_interval,r24
 425 0052 00C0      		rjmp .L37
 426               	.L36:
 501:../../../../tmk_core/common/command.c ****                 mk_interval = 0;
 427               		.loc 1 501 0
 428 0054 1092 0000 		sts mk_interval,__zero_reg__
 429               	.L37:
 502:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 430               		.loc 1 502 0
 431 0058 8091 0000 		lds r24,mk_interval
 432 005c 1F92      		push __zero_reg__
 433               	.LCFI30:
 434               		.cfi_remember_state
 435               		.cfi_def_cfa_offset 3
 436 005e 8F93      		push r24
 437               	.LCFI31:
 438               		.cfi_def_cfa_offset 4
 439 0060 80E0      		ldi r24,lo8(__c.2694)
 440 0062 90E0      		ldi r25,hi8(__c.2694)
 441 0064 00C0      		rjmp .L46
 442               	.LVL38:
 443               	.L29:
 444               	.LCFI32:
 445               		.cfi_restore_state
 505:../../../../tmk_core/common/command.c ****             if (mk_max_speed > dec)
 446               		.loc 1 505 0
 447 0066 8091 0000 		lds r24,mk_max_speed
 448               	.LVL39:
 449 006a 6817      		cp r22,r24
 450 006c 00F4      		brsh .L38
 506:../../../../tmk_core/common/command.c ****                 mk_max_speed -= dec;
 451               		.loc 1 506 0
 452 006e 861B      		sub r24,r22
 453 0070 8093 0000 		sts mk_max_speed,r24
 454 0074 00C0      		rjmp .L39
 455               	.L38:
 508:../../../../tmk_core/common/command.c ****                 mk_max_speed = 0;
 456               		.loc 1 508 0
 457 0076 1092 0000 		sts mk_max_speed,__zero_reg__
 458               	.L39:
 509:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 459               		.loc 1 509 0
 460 007a 8091 0000 		lds r24,mk_max_speed
 461 007e 1F92      		push __zero_reg__
 462               	.LCFI33:
 463               		.cfi_remember_state
 464               		.cfi_def_cfa_offset 3
 465 0080 8F93      		push r24
 466               	.LCFI34:
 467               		.cfi_def_cfa_offset 4
 468 0082 80E0      		ldi r24,lo8(__c.2697)
 469 0084 90E0      		ldi r25,hi8(__c.2697)
 470 0086 00C0      		rjmp .L46
 471               	.LVL40:
 472               	.L30:
 473               	.LCFI35:
 474               		.cfi_restore_state
 512:../../../../tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 475               		.loc 1 512 0
 476 0088 8091 0000 		lds r24,mk_time_to_max
 477               	.LVL41:
 478 008c 6817      		cp r22,r24
 479 008e 00F4      		brsh .L40
 513:../../../../tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 480               		.loc 1 513 0
 481 0090 861B      		sub r24,r22
 482 0092 8093 0000 		sts mk_time_to_max,r24
 483 0096 00C0      		rjmp .L41
 484               	.L40:
 515:../../../../tmk_core/common/command.c ****                 mk_time_to_max = 0;
 485               		.loc 1 515 0
 486 0098 1092 0000 		sts mk_time_to_max,__zero_reg__
 487               	.L41:
 516:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 488               		.loc 1 516 0
 489 009c 8091 0000 		lds r24,mk_time_to_max
 490 00a0 1F92      		push __zero_reg__
 491               	.LCFI36:
 492               		.cfi_remember_state
 493               		.cfi_def_cfa_offset 3
 494 00a2 8F93      		push r24
 495               	.LCFI37:
 496               		.cfi_def_cfa_offset 4
 497 00a4 80E0      		ldi r24,lo8(__c.2700)
 498 00a6 90E0      		ldi r25,hi8(__c.2700)
 499 00a8 00C0      		rjmp .L46
 500               	.LVL42:
 501               	.L31:
 502               	.LCFI38:
 503               		.cfi_restore_state
 519:../../../../tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 504               		.loc 1 519 0
 505 00aa 8091 0000 		lds r24,mk_wheel_max_speed
 506               	.LVL43:
 507 00ae 6817      		cp r22,r24
 508 00b0 00F4      		brsh .L42
 520:../../../../tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 509               		.loc 1 520 0
 510 00b2 861B      		sub r24,r22
 511 00b4 8093 0000 		sts mk_wheel_max_speed,r24
 512 00b8 00C0      		rjmp .L43
 513               	.L42:
 522:../../../../tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 514               		.loc 1 522 0
 515 00ba 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 516               	.L43:
 523:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 517               		.loc 1 523 0
 518 00be 8091 0000 		lds r24,mk_wheel_max_speed
 519 00c2 1F92      		push __zero_reg__
 520               	.LCFI39:
 521               		.cfi_remember_state
 522               		.cfi_def_cfa_offset 3
 523 00c4 8F93      		push r24
 524               	.LCFI40:
 525               		.cfi_def_cfa_offset 4
 526 00c6 80E0      		ldi r24,lo8(__c.2703)
 527 00c8 90E0      		ldi r25,hi8(__c.2703)
 528 00ca 00C0      		rjmp .L46
 529               	.LVL44:
 530               	.L32:
 531               	.LCFI41:
 532               		.cfi_restore_state
 526:../../../../tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 533               		.loc 1 526 0
 534 00cc 8091 0000 		lds r24,mk_wheel_time_to_max
 535               	.LVL45:
 536 00d0 6817      		cp r22,r24
 537 00d2 00F4      		brsh .L44
 527:../../../../tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 538               		.loc 1 527 0
 539 00d4 861B      		sub r24,r22
 540 00d6 8093 0000 		sts mk_wheel_time_to_max,r24
 541 00da 00C0      		rjmp .L45
 542               	.L44:
 529:../../../../tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 543               		.loc 1 529 0
 544 00dc 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 545               	.L45:
 530:../../../../tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 546               		.loc 1 530 0
 547 00e0 8091 0000 		lds r24,mk_wheel_time_to_max
 548 00e4 1F92      		push __zero_reg__
 549               	.LCFI42:
 550               		.cfi_def_cfa_offset 3
 551 00e6 8F93      		push r24
 552               	.LCFI43:
 553               		.cfi_def_cfa_offset 4
 554 00e8 80E0      		ldi r24,lo8(__c.2706)
 555 00ea 90E0      		ldi r25,hi8(__c.2706)
 556               	.L46:
 557 00ec 9F93      		push r25
 558               	.LCFI44:
 559               		.cfi_def_cfa_offset 5
 560 00ee 8F93      		push r24
 561               	.LCFI45:
 562               		.cfi_def_cfa_offset 6
 563 00f0 0E94 0000 		call __xprintf
 564               	.LVL46:
 531:../../../../tmk_core/common/command.c ****             break;
 565               		.loc 1 531 0
 566 00f4 0F90      		pop __tmp_reg__
 567 00f6 0F90      		pop __tmp_reg__
 568 00f8 0F90      		pop __tmp_reg__
 569 00fa 0F90      		pop __tmp_reg__
 570               	.LCFI46:
 571               		.cfi_def_cfa_offset 2
 572               	.L25:
 573 00fc 0895      		ret
 574               		.cfi_endproc
 575               	.LFE20:
 577               		.section	.text.switch_default_layer,"ax",@progbits
 579               	switch_default_layer:
 580               	.LFB24:
 555:../../../../tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_D
 556:../../../../tmk_core/common/command.c **** }
 557:../../../../tmk_core/common/command.c **** 
 558:../../../../tmk_core/common/command.c **** static bool mousekey_console(uint8_t code)
 559:../../../../tmk_core/common/command.c **** {
 560:../../../../tmk_core/common/command.c ****     switch (code) {
 561:../../../../tmk_core/common/command.c ****         case KC_H:
 562:../../../../tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 563:../../../../tmk_core/common/command.c ****             mousekey_console_help();
 564:../../../../tmk_core/common/command.c ****             break;
 565:../../../../tmk_core/common/command.c ****         case KC_Q:
 566:../../../../tmk_core/common/command.c ****         case KC_ESC:
 567:../../../../tmk_core/common/command.c ****             if (mousekey_param) {
 568:../../../../tmk_core/common/command.c ****                 mousekey_param = 0;
 569:../../../../tmk_core/common/command.c ****             } else {
 570:../../../../tmk_core/common/command.c ****                 print("C> ");
 571:../../../../tmk_core/common/command.c ****                 command_state = CONSOLE;
 572:../../../../tmk_core/common/command.c ****                 return false;
 573:../../../../tmk_core/common/command.c ****             }
 574:../../../../tmk_core/common/command.c ****             break;
 575:../../../../tmk_core/common/command.c ****         case KC_P:
 576:../../../../tmk_core/common/command.c ****             mousekey_param_print();
 577:../../../../tmk_core/common/command.c ****             break;
 578:../../../../tmk_core/common/command.c ****         case KC_1:
 579:../../../../tmk_core/common/command.c ****         case KC_2:
 580:../../../../tmk_core/common/command.c ****         case KC_3:
 581:../../../../tmk_core/common/command.c ****         case KC_4:
 582:../../../../tmk_core/common/command.c ****         case KC_5:
 583:../../../../tmk_core/common/command.c ****         case KC_6:
 584:../../../../tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 585:../../../../tmk_core/common/command.c ****             break;
 586:../../../../tmk_core/common/command.c ****         case KC_UP:
 587:../../../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 588:../../../../tmk_core/common/command.c ****             break;
 589:../../../../tmk_core/common/command.c ****         case KC_DOWN:
 590:../../../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 591:../../../../tmk_core/common/command.c ****             break;
 592:../../../../tmk_core/common/command.c ****         case KC_PGUP:
 593:../../../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 594:../../../../tmk_core/common/command.c ****             break;
 595:../../../../tmk_core/common/command.c ****         case KC_PGDN:
 596:../../../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 597:../../../../tmk_core/common/command.c ****             break;
 598:../../../../tmk_core/common/command.c ****         case KC_D:
 599:../../../../tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 600:../../../../tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 601:../../../../tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 602:../../../../tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 603:../../../../tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 604:../../../../tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 605:../../../../tmk_core/common/command.c ****             print("set default\n");
 606:../../../../tmk_core/common/command.c ****             break;
 607:../../../../tmk_core/common/command.c ****         default:
 608:../../../../tmk_core/common/command.c ****             print("?");
 609:../../../../tmk_core/common/command.c ****             return false;
 610:../../../../tmk_core/common/command.c ****     }
 611:../../../../tmk_core/common/command.c ****     if (mousekey_param) {
 612:../../../../tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 613:../../../../tmk_core/common/command.c ****     } else {
 614:../../../../tmk_core/common/command.c ****         print("M>" );
 615:../../../../tmk_core/common/command.c ****     }
 616:../../../../tmk_core/common/command.c ****     return true;
 617:../../../../tmk_core/common/command.c **** }
 618:../../../../tmk_core/common/command.c **** #endif
 619:../../../../tmk_core/common/command.c **** 
 620:../../../../tmk_core/common/command.c **** 
 621:../../../../tmk_core/common/command.c **** /***********************************************************
 622:../../../../tmk_core/common/command.c ****  * Utilities
 623:../../../../tmk_core/common/command.c ****  ***********************************************************/
 624:../../../../tmk_core/common/command.c **** static uint8_t numkey2num(uint8_t code)
 625:../../../../tmk_core/common/command.c **** {
 626:../../../../tmk_core/common/command.c ****     switch (code) {
 627:../../../../tmk_core/common/command.c ****         case KC_1: return 1;
 628:../../../../tmk_core/common/command.c ****         case KC_2: return 2;
 629:../../../../tmk_core/common/command.c ****         case KC_3: return 3;
 630:../../../../tmk_core/common/command.c ****         case KC_4: return 4;
 631:../../../../tmk_core/common/command.c ****         case KC_5: return 5;
 632:../../../../tmk_core/common/command.c ****         case KC_6: return 6;
 633:../../../../tmk_core/common/command.c ****         case KC_7: return 7;
 634:../../../../tmk_core/common/command.c ****         case KC_8: return 8;
 635:../../../../tmk_core/common/command.c ****         case KC_9: return 9;
 636:../../../../tmk_core/common/command.c ****         case KC_0: return 0;
 637:../../../../tmk_core/common/command.c ****     }
 638:../../../../tmk_core/common/command.c ****     return 0;
 639:../../../../tmk_core/common/command.c **** }
 640:../../../../tmk_core/common/command.c **** 
 641:../../../../tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer)
 642:../../../../tmk_core/common/command.c **** {
 581               		.loc 1 642 0
 582               		.cfi_startproc
 583               	.LVL47:
 584 0000 CF93      		push r28
 585               	.LCFI47:
 586               		.cfi_def_cfa_offset 3
 587               		.cfi_offset 28, -2
 588               	/* prologue: function */
 589               	/* frame size = 0 */
 590               	/* stack size = 1 */
 591               	.L__stack_usage = 1
 592 0002 C82F      		mov r28,r24
 643:../../../../tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 593               		.loc 1 643 0
 594 0004 1F92      		push __zero_reg__
 595               	.LCFI48:
 596               		.cfi_def_cfa_offset 4
 597 0006 8F93      		push r24
 598               	.LCFI49:
 599               		.cfi_def_cfa_offset 5
 600 0008 20E0      		ldi r18,lo8(__c.2762)
 601 000a 30E0      		ldi r19,hi8(__c.2762)
 602 000c 3F93      		push r19
 603               	.LCFI50:
 604               		.cfi_def_cfa_offset 6
 605 000e 2F93      		push r18
 606               	.LCFI51:
 607               		.cfi_def_cfa_offset 7
 608 0010 0E94 0000 		call __xprintf
 609               	.LVL48:
 644:../../../../tmk_core/common/command.c ****     default_layer_set(1UL<<layer);
 610               		.loc 1 644 0
 611 0014 61E0      		ldi r22,lo8(1)
 612 0016 70E0      		ldi r23,0
 613 0018 80E0      		ldi r24,0
 614 001a 90E0      		ldi r25,0
 615 001c 00C0      		rjmp 2f
 616               		1:
 617 001e 660F      		lsl r22
 618 0020 771F      		rol r23
 619 0022 881F      		rol r24
 620 0024 991F      		rol r25
 621               		2:
 622 0026 CA95      		dec r28
 623 0028 02F4      		brpl 1b
 624 002a 0E94 0000 		call default_layer_set
 625               	.LVL49:
 645:../../../../tmk_core/common/command.c ****     clear_keyboard();
 626               		.loc 1 645 0
 627 002e 0F90      		pop __tmp_reg__
 628 0030 0F90      		pop __tmp_reg__
 629 0032 0F90      		pop __tmp_reg__
 630 0034 0F90      		pop __tmp_reg__
 631               	.LCFI52:
 632               		.cfi_def_cfa_offset 3
 633               	/* epilogue start */
 646:../../../../tmk_core/common/command.c **** }
 634               		.loc 1 646 0
 635 0036 CF91      		pop r28
 636               	.LVL50:
 645:../../../../tmk_core/common/command.c ****     clear_keyboard();
 637               		.loc 1 645 0
 638 0038 0C94 0000 		jmp clear_keyboard
 639               	.LVL51:
 640               		.cfi_endproc
 641               	.LFE24:
 643               		.section	.text.command_common,"ax",@progbits
 645               	command_common:
 646               	.LFB15:
 182:../../../../tmk_core/common/command.c **** {
 647               		.loc 1 182 0
 648               		.cfi_startproc
 649 0000 CF93      		push r28
 650               	.LCFI53:
 651               		.cfi_def_cfa_offset 3
 652               		.cfi_offset 28, -2
 653               	/* prologue: function */
 654               	/* frame size = 0 */
 655               	/* stack size = 1 */
 656               	.L__stack_usage = 1
 186:../../../../tmk_core/common/command.c ****     switch (code) {
 657               		.loc 1 186 0
 658 0002 8732      		cpi r24,lo8(39)
 659 0004 00F4      		brsh .L63
 660 0006 8E31      		cpi r24,lo8(30)
 661 0008 00F0      		brlo .+2
 662 000a 00C0      		rjmp .L59
 663 000c 8E30      		cpi r24,lo8(14)
 664 000e 01F4      		brne .+2
 665 0010 00C0      		rjmp .L54
 666 0012 00F4      		brsh .L64
 667 0014 8730      		cpi r24,lo8(7)
 668 0016 01F4      		brne .+2
 669 0018 00C0      		rjmp .L51
 670 001a 00F4      		brsh .L65
 671 001c 8630      		cpi r24,lo8(6)
 672 001e 01F0      		breq .+2
 673 0020 00C0      		rjmp .L49
 674 0022 00C0      		rjmp .L50
 675               	.L65:
 676 0024 8830      		cpi r24,lo8(8)
 677 0026 01F0      		breq .L52
 678 0028 8B30      		cpi r24,lo8(11)
 679 002a 01F0      		breq .+2
 680 002c 00C0      		rjmp .L49
 681 002e 00C0      		rjmp .L53
 682               	.L64:
 683 0030 8631      		cpi r24,lo8(22)
 684 0032 01F4      		brne .+2
 685 0034 00C0      		rjmp .L56
 686 0036 00F4      		brsh .L66
 687 0038 8031      		cpi r24,lo8(16)
 688 003a 01F0      		breq .+2
 689 003c 00C0      		rjmp .L49
 690 003e 00C0      		rjmp .L55
 691               	.L66:
 692 0040 8931      		cpi r24,lo8(25)
 693 0042 01F4      		brne .+2
 694 0044 00C0      		rjmp .L57
 695 0046 8B31      		cpi r24,lo8(27)
 696 0048 01F0      		breq .+2
 697 004a 00C0      		rjmp .L49
 698 004c 00C0      		rjmp .L58
 699               	.L63:
 700 004e 8833      		cpi r24,lo8(56)
 701 0050 01F4      		brne .+2
 702 0052 00C0      		rjmp .L53
 703 0054 00F4      		brsh .L67
 704 0056 8932      		cpi r24,lo8(41)
 705 0058 01F4      		brne .+2
 706 005a 00C0      		rjmp .L60
 707 005c 8533      		cpi r24,lo8(53)
 708 005e 01F4      		brne .+2
 709 0060 00C0      		rjmp .L60
 710 0062 8732      		cpi r24,lo8(39)
 711 0064 01F0      		breq .+2
 712 0066 00C0      		rjmp .L49
 713 0068 00C0      		rjmp .L60
 714               	.L67:
 715 006a 8334      		cpi r24,lo8(67)
 716 006c 01F4      		brne .+2
 717 006e 00C0      		rjmp .L60
 718 0070 00F4      		brsh .L68
 719 0072 8A33      		cpi r24,lo8(58)
 720 0074 00F4      		brsh .+2
 721 0076 00C0      		rjmp .L49
 722 0078 00C0      		rjmp .L92
 723               	.L68:
 724 007a 8834      		cpi r24,lo8(72)
 725 007c 01F0      		breq .+2
 726 007e 00C0      		rjmp .L49
 727 0080 00C0      		rjmp .L62
 728               	.L52:
 197:../../../../tmk_core/common/command.c ****             print("eeconfig:\n");
 729               		.loc 1 197 0
 730 0082 80E0      		ldi r24,lo8(__c.2535)
 731 0084 90E0      		ldi r25,hi8(__c.2535)
 732 0086 0E94 0000 		call xputs
 733               	.LBB102:
 734               	.LBB103:
 149:../../../../tmk_core/common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 735               		.loc 1 149 0
 736 008a 80E0      		ldi r24,lo8(__c.2439)
 737 008c 90E0      		ldi r25,hi8(__c.2439)
 738 008e 0E94 0000 		call xputs
 739 0092 0E94 0000 		call eeconfig_read_default_layer
 740 0096 1F92      		push __zero_reg__
 741               	.LCFI54:
 742               		.cfi_def_cfa_offset 4
 743 0098 8F93      		push r24
 744               	.LCFI55:
 745               		.cfi_def_cfa_offset 5
 746 009a 80E0      		ldi r24,lo8(__c.2441)
 747 009c 90E0      		ldi r25,hi8(__c.2441)
 748 009e 9F93      		push r25
 749               	.LCFI56:
 750               		.cfi_def_cfa_offset 6
 751 00a0 8F93      		push r24
 752               	.LCFI57:
 753               		.cfi_def_cfa_offset 7
 754 00a2 0E94 0000 		call __xprintf
 755 00a6 80E0      		ldi r24,lo8(__c.2443)
 756 00a8 90E0      		ldi r25,hi8(__c.2443)
 757 00aa 0E94 0000 		call xputs
 152:../../../../tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 758               		.loc 1 152 0
 759 00ae 0E94 0000 		call eeconfig_read_debug
 760 00b2 C82F      		mov r28,r24
 153:../../../../tmk_core/common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 761               		.loc 1 153 0
 762 00b4 80E0      		ldi r24,lo8(__c.2446)
 763 00b6 90E0      		ldi r25,hi8(__c.2446)
 764 00b8 0E94 0000 		call xputs
 765 00bc 1F92      		push __zero_reg__
 766               	.LCFI58:
 767               		.cfi_def_cfa_offset 8
 768 00be CF93      		push r28
 769               	.LCFI59:
 770               		.cfi_def_cfa_offset 9
 771 00c0 20E0      		ldi r18,lo8(__c.2448)
 772 00c2 30E0      		ldi r19,hi8(__c.2448)
 773 00c4 3F93      		push r19
 774               	.LCFI60:
 775               		.cfi_def_cfa_offset 10
 776 00c6 2F93      		push r18
 777               	.LCFI61:
 778               		.cfi_def_cfa_offset 11
 779 00c8 0E94 0000 		call __xprintf
 780 00cc 80E0      		ldi r24,lo8(__c.2450)
 781 00ce 90E0      		ldi r25,hi8(__c.2450)
 782 00d0 0E94 0000 		call xputs
 154:../../../../tmk_core/common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 783               		.loc 1 154 0
 784 00d4 80E0      		ldi r24,lo8(__c.2452)
 785 00d6 90E0      		ldi r25,hi8(__c.2452)
 786 00d8 0E94 0000 		call xputs
 787 00dc 8C2F      		mov r24,r28
 788 00de 8170      		andi r24,1
 789 00e0 1F92      		push __zero_reg__
 790               	.LCFI62:
 791               		.cfi_def_cfa_offset 12
 792 00e2 8F93      		push r24
 793               	.LCFI63:
 794               		.cfi_def_cfa_offset 13
 795 00e4 20E0      		ldi r18,lo8(__c.2454)
 796 00e6 30E0      		ldi r19,hi8(__c.2454)
 797 00e8 3F93      		push r19
 798               	.LCFI64:
 799               		.cfi_def_cfa_offset 14
 800 00ea 2F93      		push r18
 801               	.LCFI65:
 802               		.cfi_def_cfa_offset 15
 803 00ec 0E94 0000 		call __xprintf
 804 00f0 80E0      		ldi r24,lo8(__c.2456)
 805 00f2 90E0      		ldi r25,hi8(__c.2456)
 806 00f4 0E94 0000 		call xputs
 155:../../../../tmk_core/common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 807               		.loc 1 155 0
 808 00f8 80E0      		ldi r24,lo8(__c.2458)
 809 00fa 90E0      		ldi r25,hi8(__c.2458)
 810 00fc 0E94 0000 		call xputs
 811 0100 C1FB      		bst r28,1
 812 0102 8827      		clr r24
 813 0104 80F9      		bld r24,0
 814 0106 1F92      		push __zero_reg__
 815               	.LCFI66:
 816               		.cfi_def_cfa_offset 16
 817 0108 8F93      		push r24
 818               	.LCFI67:
 819               		.cfi_def_cfa_offset 17
 820 010a 20E0      		ldi r18,lo8(__c.2460)
 821 010c 30E0      		ldi r19,hi8(__c.2460)
 822 010e 3F93      		push r19
 823               	.LCFI68:
 824               		.cfi_def_cfa_offset 18
 825 0110 2F93      		push r18
 826               	.LCFI69:
 827               		.cfi_def_cfa_offset 19
 828 0112 0E94 0000 		call __xprintf
 829 0116 80E0      		ldi r24,lo8(__c.2462)
 830 0118 90E0      		ldi r25,hi8(__c.2462)
 831 011a 0E94 0000 		call xputs
 156:../../../../tmk_core/common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 832               		.loc 1 156 0
 833 011e 80E0      		ldi r24,lo8(__c.2464)
 834 0120 90E0      		ldi r25,hi8(__c.2464)
 835 0122 0E94 0000 		call xputs
 836 0126 C2FB      		bst r28,2
 837 0128 8827      		clr r24
 838 012a 80F9      		bld r24,0
 839 012c 1F92      		push __zero_reg__
 840               	.LCFI70:
 841               		.cfi_def_cfa_offset 20
 842 012e 8F93      		push r24
 843               	.LCFI71:
 844               		.cfi_def_cfa_offset 21
 845 0130 20E0      		ldi r18,lo8(__c.2466)
 846 0132 30E0      		ldi r19,hi8(__c.2466)
 847 0134 3F93      		push r19
 848               	.LCFI72:
 849               		.cfi_def_cfa_offset 22
 850 0136 2F93      		push r18
 851               	.LCFI73:
 852               		.cfi_def_cfa_offset 23
 853 0138 0E94 0000 		call __xprintf
 854 013c 80E0      		ldi r24,lo8(__c.2468)
 855 013e 90E0      		ldi r25,hi8(__c.2468)
 856 0140 0E94 0000 		call xputs
 157:../../../../tmk_core/common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 857               		.loc 1 157 0
 858 0144 80E0      		ldi r24,lo8(__c.2470)
 859 0146 90E0      		ldi r25,hi8(__c.2470)
 860 0148 0E94 0000 		call xputs
 861 014c C3FB      		bst r28,3
 862 014e CC27      		clr r28
 863 0150 C0F9      		bld r28,0
 864 0152 1F92      		push __zero_reg__
 865               	.LCFI74:
 866               		.cfi_def_cfa_offset 24
 867 0154 CF93      		push r28
 868               	.LCFI75:
 869               		.cfi_def_cfa_offset 25
 870 0156 80E0      		ldi r24,lo8(__c.2472)
 871 0158 90E0      		ldi r25,hi8(__c.2472)
 872 015a 9F93      		push r25
 873               	.LCFI76:
 874               		.cfi_def_cfa_offset 26
 875 015c 8F93      		push r24
 876               	.LCFI77:
 877               		.cfi_def_cfa_offset 27
 878 015e 0E94 0000 		call __xprintf
 879 0162 80E0      		ldi r24,lo8(__c.2474)
 880 0164 90E0      		ldi r25,hi8(__c.2474)
 881 0166 0E94 0000 		call xputs
 160:../../../../tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 882               		.loc 1 160 0
 883 016a 0E94 0000 		call eeconfig_read_keymap
 884 016e C82F      		mov r28,r24
 161:../../../../tmk_core/common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 885               		.loc 1 161 0
 886 0170 80E0      		ldi r24,lo8(__c.2477)
 887 0172 90E0      		ldi r25,hi8(__c.2477)
 888 0174 0E94 0000 		call xputs
 889 0178 1F92      		push __zero_reg__
 890               	.LCFI78:
 891               		.cfi_def_cfa_offset 28
 892 017a CF93      		push r28
 893               	.LCFI79:
 894               		.cfi_def_cfa_offset 29
 895 017c 20E0      		ldi r18,lo8(__c.2479)
 896 017e 30E0      		ldi r19,hi8(__c.2479)
 897 0180 3F93      		push r19
 898               	.LCFI80:
 899               		.cfi_def_cfa_offset 30
 900 0182 2F93      		push r18
 901               	.LCFI81:
 902               		.cfi_def_cfa_offset 31
 903 0184 0E94 0000 		call __xprintf
 904 0188 80E0      		ldi r24,lo8(__c.2481)
 905 018a 90E0      		ldi r25,hi8(__c.2481)
 906 018c 0E94 0000 		call xputs
 162:../../../../tmk_core/common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 907               		.loc 1 162 0
 908 0190 80E0      		ldi r24,lo8(__c.2483)
 909 0192 90E0      		ldi r25,hi8(__c.2483)
 910 0194 0E94 0000 		call xputs
 911 0198 8C2F      		mov r24,r28
 912 019a 8170      		andi r24,1
 913 019c 1F92      		push __zero_reg__
 914               	.LCFI82:
 915               		.cfi_def_cfa_offset 32
 916 019e 8F93      		push r24
 917               	.LCFI83:
 918               		.cfi_def_cfa_offset 33
 919 01a0 20E0      		ldi r18,lo8(__c.2485)
 920 01a2 30E0      		ldi r19,hi8(__c.2485)
 921 01a4 3F93      		push r19
 922               	.LCFI84:
 923               		.cfi_def_cfa_offset 34
 924 01a6 2F93      		push r18
 925               	.LCFI85:
 926               		.cfi_def_cfa_offset 35
 927 01a8 0E94 0000 		call __xprintf
 928 01ac 8DB7      		in r24,__SP_L__
 929 01ae 9EB7      		in r25,__SP_H__
 930 01b0 8096      		adiw r24,32
 931 01b2 0FB6      		in __tmp_reg__,__SREG__
 932 01b4 F894      		cli
 933 01b6 9EBF      		out __SP_H__,r25
 934 01b8 0FBE      		out __SREG__,__tmp_reg__
 935 01ba 8DBF      		out __SP_L__,r24
 936               	.LCFI86:
 937               		.cfi_def_cfa_offset 3
 938 01bc 80E0      		ldi r24,lo8(__c.2487)
 939 01be 90E0      		ldi r25,hi8(__c.2487)
 940 01c0 0E94 0000 		call xputs
 163:../../../../tmk_core/common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 941               		.loc 1 163 0
 942 01c4 80E0      		ldi r24,lo8(__c.2489)
 943 01c6 90E0      		ldi r25,hi8(__c.2489)
 944 01c8 0E94 0000 		call xputs
 945 01cc C1FB      		bst r28,1
 946 01ce 8827      		clr r24
 947 01d0 80F9      		bld r24,0
 948 01d2 1F92      		push __zero_reg__
 949               	.LCFI87:
 950               		.cfi_def_cfa_offset 4
 951 01d4 8F93      		push r24
 952               	.LCFI88:
 953               		.cfi_def_cfa_offset 5
 954 01d6 20E0      		ldi r18,lo8(__c.2491)
 955 01d8 30E0      		ldi r19,hi8(__c.2491)
 956 01da 3F93      		push r19
 957               	.LCFI89:
 958               		.cfi_def_cfa_offset 6
 959 01dc 2F93      		push r18
 960               	.LCFI90:
 961               		.cfi_def_cfa_offset 7
 962 01de 0E94 0000 		call __xprintf
 963 01e2 80E0      		ldi r24,lo8(__c.2493)
 964 01e4 90E0      		ldi r25,hi8(__c.2493)
 965 01e6 0E94 0000 		call xputs
 164:../../../../tmk_core/common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 966               		.loc 1 164 0
 967 01ea 80E0      		ldi r24,lo8(__c.2495)
 968 01ec 90E0      		ldi r25,hi8(__c.2495)
 969 01ee 0E94 0000 		call xputs
 970 01f2 C2FB      		bst r28,2
 971 01f4 8827      		clr r24
 972 01f6 80F9      		bld r24,0
 973 01f8 1F92      		push __zero_reg__
 974               	.LCFI91:
 975               		.cfi_def_cfa_offset 8
 976 01fa 8F93      		push r24
 977               	.LCFI92:
 978               		.cfi_def_cfa_offset 9
 979 01fc 20E0      		ldi r18,lo8(__c.2497)
 980 01fe 30E0      		ldi r19,hi8(__c.2497)
 981 0200 3F93      		push r19
 982               	.LCFI93:
 983               		.cfi_def_cfa_offset 10
 984 0202 2F93      		push r18
 985               	.LCFI94:
 986               		.cfi_def_cfa_offset 11
 987 0204 0E94 0000 		call __xprintf
 988 0208 80E0      		ldi r24,lo8(__c.2499)
 989 020a 90E0      		ldi r25,hi8(__c.2499)
 990 020c 0E94 0000 		call xputs
 165:../../../../tmk_core/common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 991               		.loc 1 165 0
 992 0210 80E0      		ldi r24,lo8(__c.2501)
 993 0212 90E0      		ldi r25,hi8(__c.2501)
 994 0214 0E94 0000 		call xputs
 995 0218 C3FB      		bst r28,3
 996 021a 8827      		clr r24
 997 021c 80F9      		bld r24,0
 998 021e 1F92      		push __zero_reg__
 999               	.LCFI95:
 1000               		.cfi_def_cfa_offset 12
 1001 0220 8F93      		push r24
 1002               	.LCFI96:
 1003               		.cfi_def_cfa_offset 13
 1004 0222 20E0      		ldi r18,lo8(__c.2503)
 1005 0224 30E0      		ldi r19,hi8(__c.2503)
 1006 0226 3F93      		push r19
 1007               	.LCFI97:
 1008               		.cfi_def_cfa_offset 14
 1009 0228 2F93      		push r18
 1010               	.LCFI98:
 1011               		.cfi_def_cfa_offset 15
 1012 022a 0E94 0000 		call __xprintf
 1013 022e 80E0      		ldi r24,lo8(__c.2505)
 1014 0230 90E0      		ldi r25,hi8(__c.2505)
 1015 0232 0E94 0000 		call xputs
 166:../../../../tmk_core/common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 1016               		.loc 1 166 0
 1017 0236 80E0      		ldi r24,lo8(__c.2507)
 1018 0238 90E0      		ldi r25,hi8(__c.2507)
 1019 023a 0E94 0000 		call xputs
 1020 023e C4FB      		bst r28,4
 1021 0240 8827      		clr r24
 1022 0242 80F9      		bld r24,0
 1023 0244 1F92      		push __zero_reg__
 1024               	.LCFI99:
 1025               		.cfi_def_cfa_offset 16
 1026 0246 8F93      		push r24
 1027               	.LCFI100:
 1028               		.cfi_def_cfa_offset 17
 1029 0248 20E0      		ldi r18,lo8(__c.2509)
 1030 024a 30E0      		ldi r19,hi8(__c.2509)
 1031 024c 3F93      		push r19
 1032               	.LCFI101:
 1033               		.cfi_def_cfa_offset 18
 1034 024e 2F93      		push r18
 1035               	.LCFI102:
 1036               		.cfi_def_cfa_offset 19
 1037 0250 0E94 0000 		call __xprintf
 1038 0254 80E0      		ldi r24,lo8(__c.2511)
 1039 0256 90E0      		ldi r25,hi8(__c.2511)
 1040 0258 0E94 0000 		call xputs
 167:../../../../tmk_core/common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 1041               		.loc 1 167 0
 1042 025c 80E0      		ldi r24,lo8(__c.2513)
 1043 025e 90E0      		ldi r25,hi8(__c.2513)
 1044 0260 0E94 0000 		call xputs
 1045 0264 C5FB      		bst r28,5
 1046 0266 8827      		clr r24
 1047 0268 80F9      		bld r24,0
 1048 026a 1F92      		push __zero_reg__
 1049               	.LCFI103:
 1050               		.cfi_def_cfa_offset 20
 1051 026c 8F93      		push r24
 1052               	.LCFI104:
 1053               		.cfi_def_cfa_offset 21
 1054 026e 20E0      		ldi r18,lo8(__c.2515)
 1055 0270 30E0      		ldi r19,hi8(__c.2515)
 1056 0272 3F93      		push r19
 1057               	.LCFI105:
 1058               		.cfi_def_cfa_offset 22
 1059 0274 2F93      		push r18
 1060               	.LCFI106:
 1061               		.cfi_def_cfa_offset 23
 1062 0276 0E94 0000 		call __xprintf
 1063 027a 80E0      		ldi r24,lo8(__c.2517)
 1064 027c 90E0      		ldi r25,hi8(__c.2517)
 1065 027e 0E94 0000 		call xputs
 168:../../../../tmk_core/common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 1066               		.loc 1 168 0
 1067 0282 80E0      		ldi r24,lo8(__c.2519)
 1068 0284 90E0      		ldi r25,hi8(__c.2519)
 1069 0286 0E94 0000 		call xputs
 1070 028a C6FB      		bst r28,6
 1071 028c 8827      		clr r24
 1072 028e 80F9      		bld r24,0
 1073 0290 1F92      		push __zero_reg__
 1074               	.LCFI107:
 1075               		.cfi_def_cfa_offset 24
 1076 0292 8F93      		push r24
 1077               	.LCFI108:
 1078               		.cfi_def_cfa_offset 25
 1079 0294 20E0      		ldi r18,lo8(__c.2521)
 1080 0296 30E0      		ldi r19,hi8(__c.2521)
 1081 0298 3F93      		push r19
 1082               	.LCFI109:
 1083               		.cfi_def_cfa_offset 26
 1084 029a 2F93      		push r18
 1085               	.LCFI110:
 1086               		.cfi_def_cfa_offset 27
 1087 029c 0E94 0000 		call __xprintf
 1088 02a0 80E0      		ldi r24,lo8(__c.2523)
 1089 02a2 90E0      		ldi r25,hi8(__c.2523)
 1090 02a4 0E94 0000 		call xputs
 169:../../../../tmk_core/common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 1091               		.loc 1 169 0
 1092 02a8 80E0      		ldi r24,lo8(__c.2525)
 1093 02aa 90E0      		ldi r25,hi8(__c.2525)
 1094 02ac 0E94 0000 		call xputs
 1095 02b0 C7FB      		bst r28,7
 1096 02b2 CC27      		clr r28
 1097 02b4 C0F9      		bld r28,0
 1098 02b6 1F92      		push __zero_reg__
 1099               	.LCFI111:
 1100               		.cfi_def_cfa_offset 28
 1101 02b8 CF93      		push r28
 1102               	.LCFI112:
 1103               		.cfi_def_cfa_offset 29
 1104 02ba 80E0      		ldi r24,lo8(__c.2527)
 1105 02bc 90E0      		ldi r25,hi8(__c.2527)
 1106 02be 9F93      		push r25
 1107               	.LCFI113:
 1108               		.cfi_def_cfa_offset 30
 1109 02c0 8F93      		push r24
 1110               	.LCFI114:
 1111               		.cfi_def_cfa_offset 31
 1112 02c2 0E94 0000 		call __xprintf
 1113 02c6 80E0      		ldi r24,lo8(__c.2529)
 1114 02c8 90E0      		ldi r25,hi8(__c.2529)
 1115 02ca 0E94 0000 		call xputs
 1116 02ce 8DB7      		in r24,__SP_L__
 1117 02d0 9EB7      		in r25,__SP_H__
 1118 02d2 4C96      		adiw r24,28
 1119 02d4 0FB6      		in __tmp_reg__,__SREG__
 1120 02d6 F894      		cli
 1121 02d8 9EBF      		out __SP_H__,r25
 1122 02da 0FBE      		out __SREG__,__tmp_reg__
 1123 02dc 8DBF      		out __SP_L__,r24
 1124               	.LCFI115:
 1125               		.cfi_def_cfa_offset 3
 1126 02de 00C0      		rjmp .L93
 1127               	.L53:
 1128               	.LBE103:
 1129               	.LBE102:
 1130               	.LBB104:
 1131               	.LBB105:
 117:../../../../tmk_core/common/command.c ****     print("\n\t- Magic -\n"
 1132               		.loc 1 117 0
 1133 02e0 80E0      		ldi r24,lo8(__c.2434)
 1134 02e2 90E0      		ldi r25,hi8(__c.2434)
 1135               	.L94:
 1136 02e4 0E94 0000 		call xputs
 1137               	.L93:
 376:../../../../tmk_core/common/command.c ****     return true;
 1138               		.loc 1 376 0
 1139 02e8 81E0      		ldi r24,lo8(1)
 1140 02ea 00C0      		rjmp .L69
 1141               	.L50:
 1142               	.LBE105:
 1143               	.LBE104:
 219:../../../../tmk_core/common/command.c ****             debug_matrix   = false;
 1144               		.loc 1 219 0
 1145 02ec 8091 0000 		lds r24,debug_config
 222:../../../../tmk_core/common/command.c ****             debug_enable   = false;
 1146               		.loc 1 222 0
 1147 02f0 817F      		andi r24,lo8(-15)
 1148 02f2 8E7F      		andi r24,lo8(~(1<<0))
 1149 02f4 8093 0000 		sts debug_config,r24
 223:../../../../tmk_core/common/command.c ****             command_console_help();
 1150               		.loc 1 223 0
 1151 02f8 0E94 0000 		call command_console_help
 224:../../../../tmk_core/common/command.c ****             print("C> ");
 1152               		.loc 1 224 0
 1153 02fc 80E0      		ldi r24,lo8(__c.2541)
 1154 02fe 90E0      		ldi r25,hi8(__c.2541)
 1155 0300 0E94 0000 		call xputs
 225:../../../../tmk_core/common/command.c ****             command_state = CONSOLE;
 1156               		.loc 1 225 0
 1157 0304 81E0      		ldi r24,lo8(1)
 1158 0306 8093 0000 		sts command_state,r24
 226:../../../../tmk_core/common/command.c ****             break;
 1159               		.loc 1 226 0
 1160 030a 00C0      		rjmp .L69
 1161               	.L62:
 228:../../../../tmk_core/common/command.c ****             clear_keyboard();
 1162               		.loc 1 228 0
 1163 030c 0E94 0000 		call clear_keyboard
 229:../../../../tmk_core/common/command.c ****             print("\n\nbootloader... ");
 1164               		.loc 1 229 0
 1165 0310 80E0      		ldi r24,lo8(__c.2544)
 1166 0312 90E0      		ldi r25,hi8(__c.2544)
 1167 0314 0E94 0000 		call xputs
 1168               	.LBB106:
 1169               	.LBB107:
 1170               		.file 2 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h"
   1:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
   6:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
   9:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  12:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  17:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  21:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  33:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  35:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  38:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  41:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  42:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  46:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \code
  49:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  54:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     used.
  58:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  59:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  68:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  77:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  81:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** */
  82:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  83:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  87:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  88:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  93:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  94:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  97:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  98:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
 103:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 104:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /**
 105:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 107:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 109:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 112:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 114:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 120:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 125:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 129:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 132:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 140:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****  */
 141:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** void
 142:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** {
 144:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 153:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 156:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 159:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 164:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1171               		.loc 2 164 0
 1172 0318 9FEF      		ldi r25,lo8(1599999)
 1173 031a 29E6      		ldi r18,hi8(1599999)
 1174 031c 88E1      		ldi r24,hlo8(1599999)
 1175 031e 9150      		1: subi r25,1
 1176 0320 2040      		sbci r18,0
 1177 0322 8040      		sbci r24,0
 1178 0324 01F4      		brne 1b
 1179 0326 00C0      		rjmp .
 1180 0328 0000      		nop
 1181               	.LBE107:
 1182               	.LBE106:
 231:../../../../tmk_core/common/command.c ****             bootloader_jump(); // not return
 1183               		.loc 1 231 0
 1184 032a 0E94 0000 		call bootloader_jump
 1185 032e 00C0      		rjmp .L93
 1186               	.L51:
 234:../../../../tmk_core/common/command.c ****             if (debug_enable) {
 1187               		.loc 1 234 0
 1188 0330 8091 0000 		lds r24,debug_config
 1189 0334 80FF      		sbrs r24,0
 1190 0336 00C0      		rjmp .L70
 235:../../../../tmk_core/common/command.c ****                 print("\ndebug: off\n");
 1191               		.loc 1 235 0
 1192 0338 80E0      		ldi r24,lo8(__c.2547)
 1193 033a 90E0      		ldi r25,hi8(__c.2547)
 1194 033c 0E94 0000 		call xputs
 236:../../../../tmk_core/common/command.c ****                 debug_matrix   = false;
 1195               		.loc 1 236 0
 1196 0340 8091 0000 		lds r24,debug_config
 239:../../../../tmk_core/common/command.c ****                 debug_enable   = false;
 1197               		.loc 1 239 0
 1198 0344 817F      		andi r24,lo8(-15)
 1199 0346 8E7F      		andi r24,lo8(~(1<<0))
 1200 0348 00C0      		rjmp .L95
 1201               	.L70:
 241:../../../../tmk_core/common/command.c ****                 print("\ndebug: on\n");
 1202               		.loc 1 241 0
 1203 034a 80E0      		ldi r24,lo8(__c.2549)
 1204 034c 90E0      		ldi r25,hi8(__c.2549)
 1205 034e 00C0      		rjmp .L96
 1206               	.L58:
 246:../../../../tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 1207               		.loc 1 246 0
 1208 0350 9091 0000 		lds r25,debug_config
 1209 0354 91FB      		bst r25,1
 1210 0356 8827      		clr r24
 1211 0358 80F9      		bld r24,0
 1212 035a 21E0      		ldi r18,lo8(1)
 1213 035c 8227      		eor r24,r18
 1214 035e 80FB      		bst r24,0
 1215 0360 91F9      		bld r25,1
 1216 0362 9093 0000 		sts debug_config,r25
 247:../../../../tmk_core/common/command.c ****             if (debug_matrix) {
 1217               		.loc 1 247 0
 1218 0366 8823      		tst r24
 1219 0368 01F0      		breq .L71
 248:../../../../tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 1220               		.loc 1 248 0
 1221 036a 80E0      		ldi r24,lo8(__c.2552)
 1222 036c 90E0      		ldi r25,hi8(__c.2552)
 1223               	.L96:
 1224 036e 0E94 0000 		call xputs
 249:../../../../tmk_core/common/command.c ****                 debug_enable = true;
 1225               		.loc 1 249 0
 1226 0372 8091 0000 		lds r24,debug_config
 1227 0376 8160      		ori r24,lo8(1<<0)
 1228               	.L95:
 1229 0378 8093 0000 		sts debug_config,r24
 1230 037c 00C0      		rjmp .L93
 1231               	.L71:
 251:../../../../tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 1232               		.loc 1 251 0
 1233 037e 80E0      		ldi r24,lo8(__c.2554)
 1234 0380 90E0      		ldi r25,hi8(__c.2554)
 1235 0382 00C0      		rjmp .L94
 1236               	.L54:
 255:../../../../tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 1237               		.loc 1 255 0
 1238 0384 9091 0000 		lds r25,debug_config
 1239 0388 92FB      		bst r25,2
 1240 038a 8827      		clr r24
 1241 038c 80F9      		bld r24,0
 1242 038e 21E0      		ldi r18,lo8(1)
 1243 0390 8227      		eor r24,r18
 1244 0392 80FB      		bst r24,0
 1245 0394 92F9      		bld r25,2
 1246 0396 9093 0000 		sts debug_config,r25
 256:../../../../tmk_core/common/command.c ****             if (debug_keyboard) {
 1247               		.loc 1 256 0
 1248 039a 8823      		tst r24
 1249 039c 01F0      		breq .L72
 257:../../../../tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 1250               		.loc 1 257 0
 1251 039e 80E0      		ldi r24,lo8(__c.2557)
 1252 03a0 90E0      		ldi r25,hi8(__c.2557)
 1253 03a2 00C0      		rjmp .L96
 1254               	.L72:
 260:../../../../tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 1255               		.loc 1 260 0
 1256 03a4 80E0      		ldi r24,lo8(__c.2559)
 1257 03a6 90E0      		ldi r25,hi8(__c.2559)
 1258 03a8 00C0      		rjmp .L94
 1259               	.L55:
 264:../../../../tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 1260               		.loc 1 264 0
 1261 03aa 9091 0000 		lds r25,debug_config
 1262 03ae 93FB      		bst r25,3
 1263 03b0 8827      		clr r24
 1264 03b2 80F9      		bld r24,0
 1265 03b4 21E0      		ldi r18,lo8(1)
 1266 03b6 8227      		eor r24,r18
 1267 03b8 80FB      		bst r24,0
 1268 03ba 93F9      		bld r25,3
 1269 03bc 9093 0000 		sts debug_config,r25
 265:../../../../tmk_core/common/command.c ****             if (debug_mouse) {
 1270               		.loc 1 265 0
 1271 03c0 8823      		tst r24
 1272 03c2 01F0      		breq .L73
 266:../../../../tmk_core/common/command.c ****                 print("\nmouse: on\n");
 1273               		.loc 1 266 0
 1274 03c4 80E0      		ldi r24,lo8(__c.2562)
 1275 03c6 90E0      		ldi r25,hi8(__c.2562)
 1276 03c8 00C0      		rjmp .L96
 1277               	.L73:
 269:../../../../tmk_core/common/command.c ****                 print("\nmouse: off\n");
 1278               		.loc 1 269 0
 1279 03ca 80E0      		ldi r24,lo8(__c.2564)
 1280 03cc 90E0      		ldi r25,hi8(__c.2564)
 1281 03ce 00C0      		rjmp .L94
 1282               	.L57:
 273:../../../../tmk_core/common/command.c ****             print("\n\t- Version -\n");
 1283               		.loc 1 273 0
 1284 03d0 80E0      		ldi r24,lo8(__c.2567)
 1285 03d2 90E0      		ldi r25,hi8(__c.2567)
 1286 03d4 0E94 0000 		call xputs
 274:../../../../tmk_core/common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 1287               		.loc 1 274 0
 1288 03d8 80E0      		ldi r24,lo8(__c.2569)
 1289 03da 90E0      		ldi r25,hi8(__c.2569)
 1290 03dc 0E94 0000 		call xputs
 275:../../../../tmk_core/common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 1291               		.loc 1 275 0
 1292 03e0 80E0      		ldi r24,lo8(__c.2571)
 1293 03e2 90E0      		ldi r25,hi8(__c.2571)
 1294 03e4 0E94 0000 		call xputs
 278:../../../../tmk_core/common/command.c ****             print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 1295               		.loc 1 278 0
 1296 03e8 80E0      		ldi r24,lo8(__c.2573)
 1297 03ea 90E0      		ldi r25,hi8(__c.2573)
 1298 03ec 0E94 0000 		call xputs
 280:../../../../tmk_core/common/command.c ****             print("OPTIONS:"
 1299               		.loc 1 280 0
 1300 03f0 80E0      		ldi r24,lo8(__c.2575)
 1301 03f2 90E0      		ldi r25,hi8(__c.2575)
 1302 03f4 0E94 0000 		call xputs
 316:../../../../tmk_core/common/command.c ****             print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 1303               		.loc 1 316 0
 1304 03f8 80E0      		ldi r24,lo8(__c.2577)
 1305 03fa 90E0      		ldi r25,hi8(__c.2577)
 1306 03fc 00C0      		rjmp .L94
 1307               	.L56:
 326:../../../../tmk_core/common/command.c ****             print("\n\t- Status -\n");
 1308               		.loc 1 326 0
 1309 03fe 80E0      		ldi r24,lo8(__c.2580)
 1310 0400 90E0      		ldi r25,hi8(__c.2580)
 1311 0402 0E94 0000 		call xputs
 327:../../../../tmk_core/common/command.c ****             print_val_hex8(host_keyboard_leds());
 1312               		.loc 1 327 0
 1313 0406 0E94 0000 		call host_keyboard_leds
 1314 040a 1F92      		push __zero_reg__
 1315               	.LCFI116:
 1316               		.cfi_def_cfa_offset 4
 1317 040c 8F93      		push r24
 1318               	.LCFI117:
 1319               		.cfi_def_cfa_offset 5
 1320 040e 80E0      		ldi r24,lo8(__c.2582)
 1321 0410 90E0      		ldi r25,hi8(__c.2582)
 1322 0412 9F93      		push r25
 1323               	.LCFI118:
 1324               		.cfi_def_cfa_offset 6
 1325 0414 8F93      		push r24
 1326               	.LCFI119:
 1327               		.cfi_def_cfa_offset 7
 1328 0416 0E94 0000 		call __xprintf
 328:../../../../tmk_core/common/command.c ****             print_val_hex8(keyboard_protocol);
 1329               		.loc 1 328 0
 1330 041a 8091 0000 		lds r24,keyboard_protocol
 1331 041e 1F92      		push __zero_reg__
 1332               	.LCFI120:
 1333               		.cfi_def_cfa_offset 8
 1334 0420 8F93      		push r24
 1335               	.LCFI121:
 1336               		.cfi_def_cfa_offset 9
 1337 0422 80E0      		ldi r24,lo8(__c.2584)
 1338 0424 90E0      		ldi r25,hi8(__c.2584)
 1339 0426 9F93      		push r25
 1340               	.LCFI122:
 1341               		.cfi_def_cfa_offset 10
 1342 0428 8F93      		push r24
 1343               	.LCFI123:
 1344               		.cfi_def_cfa_offset 11
 1345 042a 0E94 0000 		call __xprintf
 329:../../../../tmk_core/common/command.c ****             print_val_hex8(keyboard_idle);
 1346               		.loc 1 329 0
 1347 042e 8091 0000 		lds r24,keyboard_idle
 1348 0432 1F92      		push __zero_reg__
 1349               	.LCFI124:
 1350               		.cfi_def_cfa_offset 12
 1351 0434 8F93      		push r24
 1352               	.LCFI125:
 1353               		.cfi_def_cfa_offset 13
 1354 0436 80E0      		ldi r24,lo8(__c.2586)
 1355 0438 90E0      		ldi r25,hi8(__c.2586)
 1356 043a 9F93      		push r25
 1357               	.LCFI126:
 1358               		.cfi_def_cfa_offset 14
 1359 043c 8F93      		push r24
 1360               	.LCFI127:
 1361               		.cfi_def_cfa_offset 15
 1362 043e 0E94 0000 		call __xprintf
 333:../../../../tmk_core/common/command.c ****             print_val_hex32(timer_read32());
 1363               		.loc 1 333 0
 1364 0442 0E94 0000 		call timer_read32
 1365 0446 9F93      		push r25
 1366               	.LCFI128:
 1367               		.cfi_def_cfa_offset 16
 1368 0448 8F93      		push r24
 1369               	.LCFI129:
 1370               		.cfi_def_cfa_offset 17
 1371 044a 7F93      		push r23
 1372               	.LCFI130:
 1373               		.cfi_def_cfa_offset 18
 1374 044c 6F93      		push r22
 1375               	.LCFI131:
 1376               		.cfi_def_cfa_offset 19
 1377 044e 80E0      		ldi r24,lo8(__c.2588)
 1378 0450 90E0      		ldi r25,hi8(__c.2588)
 1379 0452 9F93      		push r25
 1380               	.LCFI132:
 1381               		.cfi_def_cfa_offset 20
 1382 0454 8F93      		push r24
 1383               	.LCFI133:
 1384               		.cfi_def_cfa_offset 21
 1385 0456 0E94 0000 		call __xprintf
 348:../../../../tmk_core/common/command.c ****             break;
 1386               		.loc 1 348 0
 1387 045a 8DB7      		in r24,__SP_L__
 1388 045c 9EB7      		in r25,__SP_H__
 1389 045e 4296      		adiw r24,18
 1390 0460 0FB6      		in __tmp_reg__,__SREG__
 1391 0462 F894      		cli
 1392 0464 9EBF      		out __SP_H__,r25
 1393 0466 0FBE      		out __SREG__,__tmp_reg__
 1394 0468 8DBF      		out __SP_L__,r24
 1395               	.LCFI134:
 1396               		.cfi_def_cfa_offset 3
 1397 046a 00C0      		rjmp .L93
 1398               	.L60:
 364:../../../../tmk_core/common/command.c ****             switch_default_layer(0);
 1399               		.loc 1 364 0
 1400 046c 80E0      		ldi r24,0
 1401 046e 00C0      		rjmp .L97
 1402               	.L59:
 367:../../../../tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 1403               		.loc 1 367 0
 1404 0470 8D51      		subi r24,lo8(-(-29))
 1405 0472 00C0      		rjmp .L97
 1406               	.L92:
 370:../../../../tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 1407               		.loc 1 370 0
 1408 0474 8953      		subi r24,lo8(-(-57))
 1409               	.L97:
 1410 0476 0E94 0000 		call switch_default_layer
 1411 047a 00C0      		rjmp .L93
 1412               	.L49:
 373:../../../../tmk_core/common/command.c ****             print("?");
 1413               		.loc 1 373 0
 1414 047c 80E0      		ldi r24,lo8(__c.2597)
 1415 047e 90E0      		ldi r25,hi8(__c.2597)
 1416 0480 0E94 0000 		call xputs
 374:../../../../tmk_core/common/command.c ****             return false;
 1417               		.loc 1 374 0
 1418 0484 80E0      		ldi r24,0
 1419               	.L69:
 1420               	/* epilogue start */
 377:../../../../tmk_core/common/command.c **** }
 1421               		.loc 1 377 0
 1422 0486 CF91      		pop r28
 1423 0488 0895      		ret
 1424               		.cfi_endproc
 1425               	.LFE15:
 1427               		.section	.text.command_extra,"ax",@progbits
 1428               		.weak	command_extra
 1430               	command_extra:
 1431               	.LFB11:
  99:../../../../tmk_core/common/command.c **** {
 1432               		.loc 1 99 0
 1433               		.cfi_startproc
 1434               	.LVL52:
 1435               	/* prologue: function */
 1436               	/* frame size = 0 */
 1437               	/* stack size = 0 */
 1438               	.L__stack_usage = 0
 102:../../../../tmk_core/common/command.c **** }
 1439               		.loc 1 102 0
 1440 0000 80E0      		ldi r24,0
 1441               	.LVL53:
 1442 0002 0895      		ret
 1443               		.cfi_endproc
 1444               	.LFE11:
 1446               		.section	.text.command_console_extra,"ax",@progbits
 1447               		.weak	command_console_extra
 1449               	command_console_extra:
 1450               	.LFB12:
 106:../../../../tmk_core/common/command.c **** {
 1451               		.loc 1 106 0
 1452               		.cfi_startproc
 1453               	.LVL54:
 1454               	/* prologue: function */
 1455               	/* frame size = 0 */
 1456               	/* stack size = 0 */
 1457               	.L__stack_usage = 0
 109:../../../../tmk_core/common/command.c **** }
 1458               		.loc 1 109 0
 1459 0000 80E0      		ldi r24,0
 1460               	.LVL55:
 1461 0002 0895      		ret
 1462               		.cfi_endproc
 1463               	.LFE12:
 1465               		.section	.text.command_proc,"ax",@progbits
 1466               	.global	command_proc
 1468               	command_proc:
 1469               	.LFB10:
  70:../../../../tmk_core/common/command.c **** {
 1470               		.loc 1 70 0
 1471               		.cfi_startproc
 1472 0000 CF93      		push r28
 1473               	.LCFI135:
 1474               		.cfi_def_cfa_offset 3
 1475               		.cfi_offset 28, -2
 1476               	/* prologue: function */
 1477               	/* frame size = 0 */
 1478               	/* stack size = 1 */
 1479               	.L__stack_usage = 1
 1480 0002 C82F      		mov r28,r24
  71:../../../../tmk_core/common/command.c ****     switch (command_state) {
 1481               		.loc 1 71 0
 1482 0004 8091 0000 		lds r24,command_state
 1483 0008 8130      		cpi r24,lo8(1)
 1484 000a 01F0      		breq .L103
 1485 000c 00F0      		brlo .L102
 1486 000e 8230      		cpi r24,lo8(2)
 1487 0010 01F0      		breq .+2
 1488 0012 00C0      		rjmp .L161
 1489 0014 00C0      		rjmp .L104
 1490               	.L102:
  73:../../../../tmk_core/common/command.c ****             if (!IS_COMMAND())
 1491               		.loc 1 73 0
 1492 0016 A091 0000 		lds r26,keyboard_report
 1493 001a B091 0000 		lds r27,keyboard_report+1
 1494 001e 8C91      		ld r24,X
 1495 0020 8231      		cpi r24,lo8(18)
 1496 0022 01F0      		breq .+2
 1497 0024 00C0      		rjmp .L133
 1498 0026 00C0      		rjmp .L169
 1499               	.L103:
  78:../../../../tmk_core/common/command.c ****             if (IS_COMMAND())
 1500               		.loc 1 78 0
 1501 0028 A091 0000 		lds r26,keyboard_report
 1502 002c B091 0000 		lds r27,keyboard_report+1
 1503 0030 8C91      		ld r24,X
 1504 0032 8231      		cpi r24,lo8(18)
 1505 0034 01F4      		brne .L107
 1506               	.L169:
  79:../../../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 1507               		.loc 1 79 0
 1508 0036 8C2F      		mov r24,r28
 1509 0038 0E94 0000 		call command_extra
 1510 003c 8111      		cpse r24,__zero_reg__
 1511 003e 00C0      		rjmp .L136
  79:../../../../tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 1512               		.loc 1 79 0 is_stmt 0 discriminator 2
 1513 0040 8C2F      		mov r24,r28
 1514 0042 0E94 0000 		call command_common
 1515 0046 00C0      		rjmp .L109
 1516               	.L107:
  81:../../../../tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
 1517               		.loc 1 81 0 is_stmt 1
 1518 0048 8C2F      		mov r24,r28
 1519 004a 0E94 0000 		call command_console_extra
 1520 004e 8111      		cpse r24,__zero_reg__
 1521 0050 00C0      		rjmp .L136
 1522               	.LBB143:
 1523               	.LBB144:
 395:../../../../tmk_core/common/command.c ****     switch (code) {
 1524               		.loc 1 395 0
 1525 0052 C431      		cpi r28,lo8(20)
 1526 0054 01F0      		breq .L113
 1527 0056 00F4      		brsh .L114
 1528 0058 CB30      		cpi r28,lo8(11)
 1529 005a 01F0      		breq .L111
 1530 005c C031      		cpi r28,lo8(16)
 1531 005e 01F4      		brne .L110
 1532 0060 00C0      		rjmp .L112
 1533               	.L114:
 1534 0062 C932      		cpi r28,lo8(41)
 1535 0064 01F0      		breq .L113
 1536 0066 C833      		cpi r28,lo8(56)
 1537 0068 01F4      		brne .L110
 1538               	.L111:
 398:../../../../tmk_core/common/command.c ****             command_console_help();
 1539               		.loc 1 398 0
 1540 006a 0E94 0000 		call command_console_help
 415:../../../../tmk_core/common/command.c ****     print("C> ");
 1541               		.loc 1 415 0
 1542 006e 80E0      		ldi r24,lo8(__c.2618)
 1543 0070 90E0      		ldi r25,hi8(__c.2618)
 1544 0072 0E94 0000 		call xputs
 1545 0076 00C0      		rjmp .L136
 1546               	.L113:
 402:../../../../tmk_core/common/command.c ****             command_state = ONESHOT;
 1547               		.loc 1 402 0
 1548 0078 1092 0000 		sts command_state,__zero_reg__
 1549 007c 00C0      		rjmp .L116
 1550               	.L112:
 406:../../../../tmk_core/common/command.c ****             mousekey_console_help();
 1551               		.loc 1 406 0
 1552 007e 0E94 0000 		call mousekey_console_help
 407:../../../../tmk_core/common/command.c ****             print("M> ");
 1553               		.loc 1 407 0
 1554 0082 80E0      		ldi r24,lo8(__c.2613)
 1555 0084 90E0      		ldi r25,hi8(__c.2613)
 1556 0086 0E94 0000 		call xputs
 408:../../../../tmk_core/common/command.c ****             command_state = MOUSEKEY;
 1557               		.loc 1 408 0
 1558 008a 82E0      		ldi r24,lo8(2)
 1559 008c 8093 0000 		sts command_state,r24
 1560 0090 00C0      		rjmp .L136
 1561               	.L110:
 412:../../../../tmk_core/common/command.c ****             print("?");
 1562               		.loc 1 412 0
 1563 0092 80E0      		ldi r24,lo8(__c.2616)
 1564 0094 90E0      		ldi r25,hi8(__c.2616)
 1565 0096 0E94 0000 		call xputs
 1566 009a 00C0      		rjmp .L116
 1567               	.L136:
 1568               	.LBE144:
 1569               	.LBE143:
  81:../../../../tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
 1570               		.loc 1 81 0
 1571 009c 81E0      		ldi r24,lo8(1)
 1572 009e 90E0      		ldi r25,0
 1573               	.L109:
  81:../../../../tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
 1574               		.loc 1 81 0 is_stmt 0 discriminator 4
 1575 00a0 8170      		andi r24,lo8(1)
 1576 00a2 00C0      		rjmp .L162
 1577               	.L104:
 1578               	.LBB145:
 1579               	.LBB146:
 560:../../../../tmk_core/common/command.c ****     switch (code) {
 1580               		.loc 1 560 0 is_stmt 1
 1581 00a4 C432      		cpi r28,lo8(36)
 1582 00a6 00F4      		brsh .L127
 1583 00a8 CE31      		cpi r28,lo8(30)
 1584 00aa 00F0      		brlo .+2
 1585 00ac 00C0      		rjmp .L122
 1586 00ae CB30      		cpi r28,lo8(11)
 1587 00b0 01F0      		breq .L119
 1588 00b2 00F4      		brsh .L128
 1589 00b4 C730      		cpi r28,lo8(7)
 1590 00b6 01F0      		breq .+2
 1591 00b8 00C0      		rjmp .L117
 1592 00ba 00C0      		rjmp .L118
 1593               	.L128:
 1594 00bc C331      		cpi r28,lo8(19)
 1595 00be 01F0      		breq .L120
 1596 00c0 C431      		cpi r28,lo8(20)
 1597 00c2 01F0      		breq .+2
 1598 00c4 00C0      		rjmp .L117
 1599 00c6 00C0      		rjmp .L121
 1600               	.L127:
 1601 00c8 CB34      		cpi r28,lo8(75)
 1602 00ca 01F4      		brne .+2
 1603 00cc 00C0      		rjmp .L123
 1604 00ce 00F4      		brsh .L129
 1605 00d0 C932      		cpi r28,lo8(41)
 1606 00d2 01F0      		breq .L121
 1607 00d4 C833      		cpi r28,lo8(56)
 1608 00d6 01F0      		breq .+2
 1609 00d8 00C0      		rjmp .L117
 1610 00da 00C0      		rjmp .L119
 1611               	.L129:
 1612 00dc C135      		cpi r28,lo8(81)
 1613 00de 01F4      		brne .+2
 1614 00e0 00C0      		rjmp .L125
 1615 00e2 C235      		cpi r28,lo8(82)
 1616 00e4 01F4      		brne .+2
 1617 00e6 00C0      		rjmp .L126
 1618 00e8 CE34      		cpi r28,lo8(78)
 1619 00ea 01F0      		breq .+2
 1620 00ec 00C0      		rjmp .L117
 1621 00ee 00C0      		rjmp .L124
 1622               	.L119:
 563:../../../../tmk_core/common/command.c ****             mousekey_console_help();
 1623               		.loc 1 563 0
 1624 00f0 0E94 0000 		call mousekey_console_help
 1625 00f4 00C0      		rjmp .L130
 1626               	.L121:
 567:../../../../tmk_core/common/command.c ****             if (mousekey_param) {
 1627               		.loc 1 567 0
 1628 00f6 8091 0000 		lds r24,mousekey_param
 1629 00fa 8823      		tst r24
 1630 00fc 01F0      		breq .L131
 568:../../../../tmk_core/common/command.c ****                 mousekey_param = 0;
 1631               		.loc 1 568 0
 1632 00fe 1092 0000 		sts mousekey_param,__zero_reg__
 1633 0102 00C0      		rjmp .L130
 1634               	.L131:
 570:../../../../tmk_core/common/command.c ****                 print("C> ");
 1635               		.loc 1 570 0
 1636 0104 80E0      		ldi r24,lo8(__c.2723)
 1637 0106 90E0      		ldi r25,hi8(__c.2723)
 1638 0108 0E94 0000 		call xputs
 571:../../../../tmk_core/common/command.c ****                 command_state = CONSOLE;
 1639               		.loc 1 571 0
 1640 010c 81E0      		ldi r24,lo8(1)
 1641 010e 8093 0000 		sts command_state,r24
 1642 0112 00C0      		rjmp .L162
 1643               	.L120:
 1644               	.LBB147:
 1645               	.LBB148:
 428:../../../../tmk_core/common/command.c ****     print("\n\t- Values -\n");
 1646               		.loc 1 428 0
 1647 0114 80E0      		ldi r24,lo8(__c.2624)
 1648 0116 90E0      		ldi r25,hi8(__c.2624)
 1649 0118 0E94 0000 		call xputs
 429:../../../../tmk_core/common/command.c ****     print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
 1650               		.loc 1 429 0
 1651 011c 80E0      		ldi r24,lo8(__c.2626)
 1652 011e 90E0      		ldi r25,hi8(__c.2626)
 1653 0120 0E94 0000 		call xputs
 1654 0124 8091 0000 		lds r24,mk_delay
 1655 0128 1F92      		push __zero_reg__
 1656               	.LCFI136:
 1657               		.cfi_def_cfa_offset 4
 1658 012a 8F93      		push r24
 1659               	.LCFI137:
 1660               		.cfi_def_cfa_offset 5
 1661 012c 80E0      		ldi r24,lo8(__c.2628)
 1662 012e 90E0      		ldi r25,hi8(__c.2628)
 1663 0130 9F93      		push r25
 1664               	.LCFI138:
 1665               		.cfi_def_cfa_offset 6
 1666 0132 8F93      		push r24
 1667               	.LCFI139:
 1668               		.cfi_def_cfa_offset 7
 1669 0134 0E94 0000 		call __xprintf
 1670 0138 80E0      		ldi r24,lo8(__c.2630)
 1671 013a 90E0      		ldi r25,hi8(__c.2630)
 1672 013c 0E94 0000 		call xputs
 430:../../../../tmk_core/common/command.c ****     print("2: interval(ms): "); pdec(mk_interval); print("\n");
 1673               		.loc 1 430 0
 1674 0140 80E0      		ldi r24,lo8(__c.2632)
 1675 0142 90E0      		ldi r25,hi8(__c.2632)
 1676 0144 0E94 0000 		call xputs
 1677 0148 8091 0000 		lds r24,mk_interval
 1678 014c 1F92      		push __zero_reg__
 1679               	.LCFI140:
 1680               		.cfi_def_cfa_offset 8
 1681 014e 8F93      		push r24
 1682               	.LCFI141:
 1683               		.cfi_def_cfa_offset 9
 1684 0150 80E0      		ldi r24,lo8(__c.2634)
 1685 0152 90E0      		ldi r25,hi8(__c.2634)
 1686 0154 9F93      		push r25
 1687               	.LCFI142:
 1688               		.cfi_def_cfa_offset 10
 1689 0156 8F93      		push r24
 1690               	.LCFI143:
 1691               		.cfi_def_cfa_offset 11
 1692 0158 0E94 0000 		call __xprintf
 1693 015c 80E0      		ldi r24,lo8(__c.2636)
 1694 015e 90E0      		ldi r25,hi8(__c.2636)
 1695 0160 0E94 0000 		call xputs
 431:../../../../tmk_core/common/command.c ****     print("3: max_speed: "); pdec(mk_max_speed); print("\n");
 1696               		.loc 1 431 0
 1697 0164 80E0      		ldi r24,lo8(__c.2638)
 1698 0166 90E0      		ldi r25,hi8(__c.2638)
 1699 0168 0E94 0000 		call xputs
 1700 016c 8091 0000 		lds r24,mk_max_speed
 1701 0170 1F92      		push __zero_reg__
 1702               	.LCFI144:
 1703               		.cfi_def_cfa_offset 12
 1704 0172 8F93      		push r24
 1705               	.LCFI145:
 1706               		.cfi_def_cfa_offset 13
 1707 0174 80E0      		ldi r24,lo8(__c.2640)
 1708 0176 90E0      		ldi r25,hi8(__c.2640)
 1709 0178 9F93      		push r25
 1710               	.LCFI146:
 1711               		.cfi_def_cfa_offset 14
 1712 017a 8F93      		push r24
 1713               	.LCFI147:
 1714               		.cfi_def_cfa_offset 15
 1715 017c 0E94 0000 		call __xprintf
 1716 0180 80E0      		ldi r24,lo8(__c.2642)
 1717 0182 90E0      		ldi r25,hi8(__c.2642)
 1718 0184 0E94 0000 		call xputs
 432:../../../../tmk_core/common/command.c ****     print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
 1719               		.loc 1 432 0
 1720 0188 80E0      		ldi r24,lo8(__c.2644)
 1721 018a 90E0      		ldi r25,hi8(__c.2644)
 1722 018c 0E94 0000 		call xputs
 1723 0190 8091 0000 		lds r24,mk_time_to_max
 1724 0194 1F92      		push __zero_reg__
 1725               	.LCFI148:
 1726               		.cfi_def_cfa_offset 16
 1727 0196 8F93      		push r24
 1728               	.LCFI149:
 1729               		.cfi_def_cfa_offset 17
 1730 0198 80E0      		ldi r24,lo8(__c.2646)
 1731 019a 90E0      		ldi r25,hi8(__c.2646)
 1732 019c 9F93      		push r25
 1733               	.LCFI150:
 1734               		.cfi_def_cfa_offset 18
 1735 019e 8F93      		push r24
 1736               	.LCFI151:
 1737               		.cfi_def_cfa_offset 19
 1738 01a0 0E94 0000 		call __xprintf
 1739 01a4 80E0      		ldi r24,lo8(__c.2648)
 1740 01a6 90E0      		ldi r25,hi8(__c.2648)
 1741 01a8 0E94 0000 		call xputs
 433:../../../../tmk_core/common/command.c ****     print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 1742               		.loc 1 433 0
 1743 01ac 80E0      		ldi r24,lo8(__c.2650)
 1744 01ae 90E0      		ldi r25,hi8(__c.2650)
 1745 01b0 0E94 0000 		call xputs
 1746 01b4 8091 0000 		lds r24,mk_wheel_max_speed
 1747 01b8 1F92      		push __zero_reg__
 1748               	.LCFI152:
 1749               		.cfi_def_cfa_offset 20
 1750 01ba 8F93      		push r24
 1751               	.LCFI153:
 1752               		.cfi_def_cfa_offset 21
 1753 01bc 80E0      		ldi r24,lo8(__c.2652)
 1754 01be 90E0      		ldi r25,hi8(__c.2652)
 1755 01c0 9F93      		push r25
 1756               	.LCFI154:
 1757               		.cfi_def_cfa_offset 22
 1758 01c2 8F93      		push r24
 1759               	.LCFI155:
 1760               		.cfi_def_cfa_offset 23
 1761 01c4 0E94 0000 		call __xprintf
 1762 01c8 80E0      		ldi r24,lo8(__c.2654)
 1763 01ca 90E0      		ldi r25,hi8(__c.2654)
 1764 01cc 0E94 0000 		call xputs
 434:../../../../tmk_core/common/command.c ****     print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 1765               		.loc 1 434 0
 1766 01d0 80E0      		ldi r24,lo8(__c.2656)
 1767 01d2 90E0      		ldi r25,hi8(__c.2656)
 1768 01d4 0E94 0000 		call xputs
 1769 01d8 8091 0000 		lds r24,mk_wheel_time_to_max
 1770 01dc 1F92      		push __zero_reg__
 1771               	.LCFI156:
 1772               		.cfi_def_cfa_offset 24
 1773 01de 8F93      		push r24
 1774               	.LCFI157:
 1775               		.cfi_def_cfa_offset 25
 1776 01e0 80E0      		ldi r24,lo8(__c.2658)
 1777 01e2 90E0      		ldi r25,hi8(__c.2658)
 1778 01e4 9F93      		push r25
 1779               	.LCFI158:
 1780               		.cfi_def_cfa_offset 26
 1781 01e6 8F93      		push r24
 1782               	.LCFI159:
 1783               		.cfi_def_cfa_offset 27
 1784 01e8 0E94 0000 		call __xprintf
 1785 01ec 80E0      		ldi r24,lo8(__c.2660)
 1786 01ee 90E0      		ldi r25,hi8(__c.2660)
 1787 01f0 0E94 0000 		call xputs
 1788 01f4 8DB7      		in r24,__SP_L__
 1789 01f6 9EB7      		in r25,__SP_H__
 1790 01f8 4896      		adiw r24,24
 1791 01fa 0FB6      		in __tmp_reg__,__SREG__
 1792 01fc F894      		cli
 1793 01fe 9EBF      		out __SP_H__,r25
 1794 0200 0FBE      		out __SREG__,__tmp_reg__
 1795 0202 8DBF      		out __SP_L__,r24
 1796               	.LCFI160:
 1797               		.cfi_def_cfa_offset 3
 1798 0204 00C0      		rjmp .L130
 1799               	.L122:
 1800               	.LBE148:
 1801               	.LBE147:
 584:../../../../tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 1802               		.loc 1 584 0
 1803 0206 CE51      		subi r28,lo8(-(-30))
 1804 0208 EC2F      		mov r30,r28
 1805 020a F0E0      		ldi r31,0
 1806 020c E050      		subi r30,lo8(-(CSWTCH.42))
 1807 020e F040      		sbci r31,hi8(-(CSWTCH.42))
 1808 0210 8081      		ld r24,Z
 1809 0212 8093 0000 		sts mousekey_param,r24
 1810 0216 00C0      		rjmp .L130
 1811               	.L126:
 587:../../../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 1812               		.loc 1 587 0
 1813 0218 61E0      		ldi r22,lo8(1)
 1814 021a 00C0      		rjmp .L163
 1815               	.L125:
 590:../../../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 1816               		.loc 1 590 0
 1817 021c 61E0      		ldi r22,lo8(1)
 1818 021e 00C0      		rjmp .L164
 1819               	.L123:
 593:../../../../tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 1820               		.loc 1 593 0
 1821 0220 6AE0      		ldi r22,lo8(10)
 1822               	.L163:
 1823 0222 8091 0000 		lds r24,mousekey_param
 1824 0226 0E94 0000 		call mousekey_param_inc
 1825 022a 00C0      		rjmp .L130
 1826               	.L124:
 596:../../../../tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 1827               		.loc 1 596 0
 1828 022c 6AE0      		ldi r22,lo8(10)
 1829               	.L164:
 1830 022e 8091 0000 		lds r24,mousekey_param
 1831 0232 0E94 0000 		call mousekey_param_dec
 1832 0236 00C0      		rjmp .L130
 1833               	.L118:
 599:../../../../tmk_core/common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 1834               		.loc 1 599 0
 1835 0238 8EE1      		ldi r24,lo8(30)
 1836 023a 8093 0000 		sts mk_delay,r24
 600:../../../../tmk_core/common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 1837               		.loc 1 600 0
 1838 023e 82E3      		ldi r24,lo8(50)
 1839 0240 8093 0000 		sts mk_interval,r24
 601:../../../../tmk_core/common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 1840               		.loc 1 601 0
 1841 0244 8AE0      		ldi r24,lo8(10)
 1842 0246 8093 0000 		sts mk_max_speed,r24
 602:../../../../tmk_core/common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 1843               		.loc 1 602 0
 1844 024a 84E1      		ldi r24,lo8(20)
 1845 024c 8093 0000 		sts mk_time_to_max,r24
 603:../../../../tmk_core/common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 1846               		.loc 1 603 0
 1847 0250 88E0      		ldi r24,lo8(8)
 1848 0252 8093 0000 		sts mk_wheel_max_speed,r24
 604:../../../../tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1849               		.loc 1 604 0
 1850 0256 88E2      		ldi r24,lo8(40)
 1851 0258 8093 0000 		sts mk_wheel_time_to_max,r24
 605:../../../../tmk_core/common/command.c ****             print("set default\n");
 1852               		.loc 1 605 0
 1853 025c 80E0      		ldi r24,lo8(__c.2737)
 1854 025e 90E0      		ldi r25,hi8(__c.2737)
 1855 0260 0E94 0000 		call xputs
 1856 0264 00C0      		rjmp .L130
 1857               	.L117:
 608:../../../../tmk_core/common/command.c ****             print("?");
 1858               		.loc 1 608 0
 1859 0266 80E0      		ldi r24,lo8(__c.2740)
 1860 0268 90E0      		ldi r25,hi8(__c.2740)
 1861 026a 00C0      		rjmp .L166
 1862               	.L130:
 611:../../../../tmk_core/common/command.c ****     if (mousekey_param) {
 1863               		.loc 1 611 0
 1864 026c 8091 0000 		lds r24,mousekey_param
 1865 0270 8823      		tst r24
 1866 0272 01F0      		breq .L132
 612:../../../../tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 1867               		.loc 1 612 0
 1868 0274 1F92      		push __zero_reg__
 1869               	.LCFI161:
 1870               		.cfi_def_cfa_offset 4
 1871 0276 8F93      		push r24
 1872               	.LCFI162:
 1873               		.cfi_def_cfa_offset 5
 1874 0278 80E0      		ldi r24,lo8(__c.2742)
 1875 027a 90E0      		ldi r25,hi8(__c.2742)
 1876 027c 9F93      		push r25
 1877               	.LCFI163:
 1878               		.cfi_def_cfa_offset 6
 1879 027e 8F93      		push r24
 1880               	.LCFI164:
 1881               		.cfi_def_cfa_offset 7
 1882 0280 0E94 0000 		call __xprintf
 1883 0284 0F90      		pop __tmp_reg__
 1884 0286 0F90      		pop __tmp_reg__
 1885 0288 0F90      		pop __tmp_reg__
 1886 028a 0F90      		pop __tmp_reg__
 1887               	.LCFI165:
 1888               		.cfi_def_cfa_offset 3
 1889 028c 00C0      		rjmp .L165
 1890               	.L132:
 614:../../../../tmk_core/common/command.c ****         print("M>" );
 1891               		.loc 1 614 0
 1892 028e 80E0      		ldi r24,lo8(__c.2744)
 1893 0290 90E0      		ldi r25,hi8(__c.2744)
 1894               	.L166:
 1895 0292 0E94 0000 		call xputs
 1896               	.L165:
  92:../../../../tmk_core/common/command.c ****     return true;
 1897               		.loc 1 92 0
 1898 0296 81E0      		ldi r24,lo8(1)
 1899 0298 00C0      		rjmp .L162
 1900               	.L161:
 1901               	.LBE146:
 1902               	.LBE145:
  89:../../../../tmk_core/common/command.c ****             command_state = ONESHOT;
 1903               		.loc 1 89 0
 1904 029a 1092 0000 		sts command_state,__zero_reg__
 1905               	.L133:
  74:../../../../tmk_core/common/command.c ****                 return false;
 1906               		.loc 1 74 0
 1907 029e 80E0      		ldi r24,0
 1908 02a0 00C0      		rjmp .L162
 1909               	.L116:
  81:../../../../tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
 1910               		.loc 1 81 0
 1911 02a2 80E0      		ldi r24,0
 1912 02a4 90E0      		ldi r25,0
 1913 02a6 00C0      		rjmp .L109
 1914               	.L162:
 1915               	/* epilogue start */
  93:../../../../tmk_core/common/command.c **** }
 1916               		.loc 1 93 0
 1917 02a8 CF91      		pop r28
 1918 02aa 0895      		ret
 1919               		.cfi_endproc
 1920               	.LFE10:
 1922               	.global	command_state
 1923               		.section	.bss.command_state,"aw",@nobits
 1926               	command_state:
 1927 0000 00        		.zero	1
 1928               		.section	.progmem.data.__c.2535,"a",@progbits
 1931               	__c.2535:
 1932 0000 6565 636F 		.string	"eeconfig:\n"
 1932      6E66 6967 
 1932      3A0A 00
 1933               		.section	.progmem.data.__c.2541,"a",@progbits
 1936               	__c.2541:
 1937 0000 433E 2000 		.string	"C> "
 1938               		.section	.progmem.data.__c.2544,"a",@progbits
 1941               	__c.2544:
 1942 0000 0A0A 626F 		.string	"\n\nbootloader... "
 1942      6F74 6C6F 
 1942      6164 6572 
 1942      2E2E 2E20 
 1942      00
 1943               		.section	.progmem.data.__c.2547,"a",@progbits
 1946               	__c.2547:
 1947 0000 0A64 6562 		.string	"\ndebug: off\n"
 1947      7567 3A20 
 1947      6F66 660A 
 1947      00
 1948               		.section	.progmem.data.__c.2549,"a",@progbits
 1951               	__c.2549:
 1952 0000 0A64 6562 		.string	"\ndebug: on\n"
 1952      7567 3A20 
 1952      6F6E 0A00 
 1953               		.section	.progmem.data.__c.2552,"a",@progbits
 1956               	__c.2552:
 1957 0000 0A6D 6174 		.string	"\nmatrix: on\n"
 1957      7269 783A 
 1957      206F 6E0A 
 1957      00
 1958               		.section	.progmem.data.__c.2554,"a",@progbits
 1961               	__c.2554:
 1962 0000 0A6D 6174 		.string	"\nmatrix: off\n"
 1962      7269 783A 
 1962      206F 6666 
 1962      0A00 
 1963               		.section	.progmem.data.__c.2557,"a",@progbits
 1966               	__c.2557:
 1967 0000 0A6B 6579 		.string	"\nkeyboard: on\n"
 1967      626F 6172 
 1967      643A 206F 
 1967      6E0A 00
 1968               		.section	.progmem.data.__c.2559,"a",@progbits
 1971               	__c.2559:
 1972 0000 0A6B 6579 		.string	"\nkeyboard: off\n"
 1972      626F 6172 
 1972      643A 206F 
 1972      6666 0A00 
 1973               		.section	.progmem.data.__c.2562,"a",@progbits
 1976               	__c.2562:
 1977 0000 0A6D 6F75 		.string	"\nmouse: on\n"
 1977      7365 3A20 
 1977      6F6E 0A00 
 1978               		.section	.progmem.data.__c.2564,"a",@progbits
 1981               	__c.2564:
 1982 0000 0A6D 6F75 		.string	"\nmouse: off\n"
 1982      7365 3A20 
 1982      6F66 660A 
 1982      00
 1983               		.section	.progmem.data.__c.2567,"a",@progbits
 1986               	__c.2567:
 1987 0000 0A09 2D20 		.string	"\n\t- Version -\n"
 1987      5665 7273 
 1987      696F 6E20 
 1987      2D0A 00
 1988               		.section	.progmem.data.__c.2569,"a",@progbits
 1991               	__c.2569:
 1992 0000 4445 5343 		.string	"DESC: Colossus Model M Controller\n"
 1992      3A20 436F 
 1992      6C6F 7373 
 1992      7573 204D 
 1992      6F64 656C 
 1993               		.section	.progmem.data.__c.2571,"a",@progbits
 1996               	__c.2571:
 1997 0000 5649 443A 		.string	"VID: 0xFEED(PhosphorGlow) PID: 0x6060(ModelMSSK) VER: 0x0001\n"
 1997      2030 7846 
 1997      4545 4428 
 1997      5068 6F73 
 1997      7068 6F72 
 1998               		.section	.progmem.data.__c.2573,"a",@progbits
 2001               	__c.2573:
 2002 0000 4255 494C 		.string	"BUILD: 9fe5ff8-dirty (21:18:31 May 16 2016)\n"
 2002      443A 2039 
 2002      6665 3566 
 2002      6638 2D64 
 2002      6972 7479 
 2003               		.section	.progmem.data.__c.2575,"a",@progbits
 2006               	__c.2575:
 2007 0000 4F50 5449 		.string	"OPTIONS: LUFA BOOTMAGIC MOUSEKEY EXTRAKEY CONSOLE COMMAND 8192\n"
 2007      4F4E 533A 
 2007      204C 5546 
 2007      4120 424F 
 2007      4F54 4D41 
 2008               		.section	.progmem.data.__c.2577,"a",@progbits
 2011               	__c.2577:
 2012 0000 4743 433A 		.string	"GCC: 4.7.1 AVR-LIBC: 1.8.0 AVR_ARCH: avr51\n"
 2012      2034 2E37 
 2012      2E31 2041 
 2012      5652 2D4C 
 2012      4942 433A 
 2013               		.section	.progmem.data.__c.2580,"a",@progbits
 2016               	__c.2580:
 2017 0000 0A09 2D20 		.string	"\n\t- Status -\n"
 2017      5374 6174 
 2017      7573 202D 
 2017      0A00 
 2018               		.section	.progmem.data.__c.2582,"a",@progbits
 2021               	__c.2582:
 2022 0000 686F 7374 		.string	"host_keyboard_leds(): %X\n"
 2022      5F6B 6579 
 2022      626F 6172 
 2022      645F 6C65 
 2022      6473 2829 
 2023               		.section	.progmem.data.__c.2584,"a",@progbits
 2026               	__c.2584:
 2027 0000 6B65 7962 		.string	"keyboard_protocol: %X\n"
 2027      6F61 7264 
 2027      5F70 726F 
 2027      746F 636F 
 2027      6C3A 2025 
 2028               		.section	.progmem.data.__c.2586,"a",@progbits
 2031               	__c.2586:
 2032 0000 6B65 7962 		.string	"keyboard_idle: %X\n"
 2032      6F61 7264 
 2032      5F69 646C 
 2032      653A 2025 
 2032      580A 00
 2033               		.section	.progmem.data.__c.2588,"a",@progbits
 2036               	__c.2588:
 2037 0000 7469 6D65 		.string	"timer_read32(): %04lX\n"
 2037      725F 7265 
 2037      6164 3332 
 2037      2829 3A20 
 2037      2530 346C 
 2038               		.section	.progmem.data.__c.2597,"a",@progbits
 2041               	__c.2597:
 2042 0000 3F00      		.string	"?"
 2043               		.section	.progmem.data.__c.2439,"a",@progbits
 2046               	__c.2439:
 2047 0000 6465 6661 		.string	"default_layer: "
 2047      756C 745F 
 2047      6C61 7965 
 2047      723A 2000 
 2048               		.section	.progmem.data.__c.2441,"a",@progbits
 2051               	__c.2441:
 2052 0000 2575 00   		.string	"%u"
 2053               		.section	.progmem.data.__c.2443,"a",@progbits
 2056               	__c.2443:
 2057 0000 0A00      		.string	"\n"
 2058               		.section	.progmem.data.__c.2446,"a",@progbits
 2061               	__c.2446:
 2062 0000 6465 6275 		.string	"debug_config.raw: "
 2062      675F 636F 
 2062      6E66 6967 
 2062      2E72 6177 
 2062      3A20 00
 2063               		.section	.progmem.data.__c.2448,"a",@progbits
 2066               	__c.2448:
 2067 0000 2530 3258 		.string	"%02X"
 2067      00
 2068               		.section	.progmem.data.__c.2450,"a",@progbits
 2071               	__c.2450:
 2072 0000 0A00      		.string	"\n"
 2073               		.section	.progmem.data.__c.2452,"a",@progbits
 2076               	__c.2452:
 2077 0000 2E65 6E61 		.string	".enable: "
 2077      626C 653A 
 2077      2000 
 2078               		.section	.progmem.data.__c.2454,"a",@progbits
 2081               	__c.2454:
 2082 0000 2575 00   		.string	"%u"
 2083               		.section	.progmem.data.__c.2456,"a",@progbits
 2086               	__c.2456:
 2087 0000 0A00      		.string	"\n"
 2088               		.section	.progmem.data.__c.2458,"a",@progbits
 2091               	__c.2458:
 2092 0000 2E6D 6174 		.string	".matrix: "
 2092      7269 783A 
 2092      2000 
 2093               		.section	.progmem.data.__c.2460,"a",@progbits
 2096               	__c.2460:
 2097 0000 2575 00   		.string	"%u"
 2098               		.section	.progmem.data.__c.2462,"a",@progbits
 2101               	__c.2462:
 2102 0000 0A00      		.string	"\n"
 2103               		.section	.progmem.data.__c.2464,"a",@progbits
 2106               	__c.2464:
 2107 0000 2E6B 6579 		.string	".keyboard: "
 2107      626F 6172 
 2107      643A 2000 
 2108               		.section	.progmem.data.__c.2466,"a",@progbits
 2111               	__c.2466:
 2112 0000 2575 00   		.string	"%u"
 2113               		.section	.progmem.data.__c.2468,"a",@progbits
 2116               	__c.2468:
 2117 0000 0A00      		.string	"\n"
 2118               		.section	.progmem.data.__c.2470,"a",@progbits
 2121               	__c.2470:
 2122 0000 2E6D 6F75 		.string	".mouse: "
 2122      7365 3A20 
 2122      00
 2123               		.section	.progmem.data.__c.2472,"a",@progbits
 2126               	__c.2472:
 2127 0000 2575 00   		.string	"%u"
 2128               		.section	.progmem.data.__c.2474,"a",@progbits
 2131               	__c.2474:
 2132 0000 0A00      		.string	"\n"
 2133               		.section	.progmem.data.__c.2477,"a",@progbits
 2136               	__c.2477:
 2137 0000 6B65 796D 		.string	"keymap_config.raw: "
 2137      6170 5F63 
 2137      6F6E 6669 
 2137      672E 7261 
 2137      773A 2000 
 2138               		.section	.progmem.data.__c.2479,"a",@progbits
 2141               	__c.2479:
 2142 0000 2530 3258 		.string	"%02X"
 2142      00
 2143               		.section	.progmem.data.__c.2481,"a",@progbits
 2146               	__c.2481:
 2147 0000 0A00      		.string	"\n"
 2148               		.section	.progmem.data.__c.2483,"a",@progbits
 2151               	__c.2483:
 2152 0000 2E73 7761 		.string	".swap_control_capslock: "
 2152      705F 636F 
 2152      6E74 726F 
 2152      6C5F 6361 
 2152      7073 6C6F 
 2153               		.section	.progmem.data.__c.2485,"a",@progbits
 2156               	__c.2485:
 2157 0000 2575 00   		.string	"%u"
 2158               		.section	.progmem.data.__c.2487,"a",@progbits
 2161               	__c.2487:
 2162 0000 0A00      		.string	"\n"
 2163               		.section	.progmem.data.__c.2489,"a",@progbits
 2166               	__c.2489:
 2167 0000 2E63 6170 		.string	".capslock_to_control: "
 2167      736C 6F63 
 2167      6B5F 746F 
 2167      5F63 6F6E 
 2167      7472 6F6C 
 2168               		.section	.progmem.data.__c.2491,"a",@progbits
 2171               	__c.2491:
 2172 0000 2575 00   		.string	"%u"
 2173               		.section	.progmem.data.__c.2493,"a",@progbits
 2176               	__c.2493:
 2177 0000 0A00      		.string	"\n"
 2178               		.section	.progmem.data.__c.2495,"a",@progbits
 2181               	__c.2495:
 2182 0000 2E73 7761 		.string	".swap_lalt_lgui: "
 2182      705F 6C61 
 2182      6C74 5F6C 
 2182      6775 693A 
 2182      2000 
 2183               		.section	.progmem.data.__c.2497,"a",@progbits
 2186               	__c.2497:
 2187 0000 2575 00   		.string	"%u"
 2188               		.section	.progmem.data.__c.2499,"a",@progbits
 2191               	__c.2499:
 2192 0000 0A00      		.string	"\n"
 2193               		.section	.progmem.data.__c.2501,"a",@progbits
 2196               	__c.2501:
 2197 0000 2E73 7761 		.string	".swap_ralt_rgui: "
 2197      705F 7261 
 2197      6C74 5F72 
 2197      6775 693A 
 2197      2000 
 2198               		.section	.progmem.data.__c.2503,"a",@progbits
 2201               	__c.2503:
 2202 0000 2575 00   		.string	"%u"
 2203               		.section	.progmem.data.__c.2505,"a",@progbits
 2206               	__c.2505:
 2207 0000 0A00      		.string	"\n"
 2208               		.section	.progmem.data.__c.2507,"a",@progbits
 2211               	__c.2507:
 2212 0000 2E6E 6F5F 		.string	".no_gui: "
 2212      6775 693A 
 2212      2000 
 2213               		.section	.progmem.data.__c.2509,"a",@progbits
 2216               	__c.2509:
 2217 0000 2575 00   		.string	"%u"
 2218               		.section	.progmem.data.__c.2511,"a",@progbits
 2221               	__c.2511:
 2222 0000 0A00      		.string	"\n"
 2223               		.section	.progmem.data.__c.2513,"a",@progbits
 2226               	__c.2513:
 2227 0000 2E73 7761 		.string	".swap_grave_esc: "
 2227      705F 6772 
 2227      6176 655F 
 2227      6573 633A 
 2227      2000 
 2228               		.section	.progmem.data.__c.2515,"a",@progbits
 2231               	__c.2515:
 2232 0000 2575 00   		.string	"%u"
 2233               		.section	.progmem.data.__c.2517,"a",@progbits
 2236               	__c.2517:
 2237 0000 0A00      		.string	"\n"
 2238               		.section	.progmem.data.__c.2519,"a",@progbits
 2241               	__c.2519:
 2242 0000 2E73 7761 		.string	".swap_backslash_backspace: "
 2242      705F 6261 
 2242      636B 736C 
 2242      6173 685F 
 2242      6261 636B 
 2243               		.section	.progmem.data.__c.2521,"a",@progbits
 2246               	__c.2521:
 2247 0000 2575 00   		.string	"%u"
 2248               		.section	.progmem.data.__c.2523,"a",@progbits
 2251               	__c.2523:
 2252 0000 0A00      		.string	"\n"
 2253               		.section	.progmem.data.__c.2525,"a",@progbits
 2256               	__c.2525:
 2257 0000 2E6E 6B72 		.string	".nkro: "
 2257      6F3A 2000 
 2258               		.section	.progmem.data.__c.2527,"a",@progbits
 2261               	__c.2527:
 2262 0000 2575 00   		.string	"%u"
 2263               		.section	.progmem.data.__c.2529,"a",@progbits
 2266               	__c.2529:
 2267 0000 0A00      		.string	"\n"
 2268               		.section	.progmem.data.__c.2434,"a",@progbits
 2271               	__c.2434:
 2272 0000 0A09 2D20 		.string	"\n\t- Magic -\nd:\tdebug\nx:\tdebug matrix\nk:\tdebug keyboard\nm:\tdebug mouse\nv:\tvers
 2272      4D61 6769 
 2272      6320 2D0A 
 2272      643A 0964 
 2272      6562 7567 
 2273               		.section	.progmem.data.__c.2602,"a",@progbits
 2276               	__c.2602:
 2277 0000 0A09 2D20 		.string	"\n\t- Console -\nESC/q:\tquit\nm:\tmousekey\n"
 2277      436F 6E73 
 2277      6F6C 6520 
 2277      2D0A 4553 
 2277      432F 713A 
 2278               		.section	.progmem.data.__c.2762,"a",@progbits
 2281               	__c.2762:
 2282 0000 4C25 640A 		.string	"L%d\n"
 2282      00
 2283               		.section	.progmem.data.__c.2618,"a",@progbits
 2286               	__c.2618:
 2287 0000 433E 2000 		.string	"C> "
 2288               		.section	.progmem.data.__c.2613,"a",@progbits
 2291               	__c.2613:
 2292 0000 4D3E 2000 		.string	"M> "
 2293               		.section	.progmem.data.__c.2616,"a",@progbits
 2296               	__c.2616:
 2297 0000 3F00      		.string	"?"
 2298               		.section	.progmem.data.__c.2711,"a",@progbits
 2301               	__c.2711:
 2302 0000 0A09 2D20 		.string	"\n\t- Mousekey -\nESC/q:\tquit\n1:\tdelay(*10ms)\n2:\tinterval(ms)\n3:\tmax_speed\n4:\tti
 2302      4D6F 7573 
 2302      656B 6579 
 2302      202D 0A45 
 2302      5343 2F71 
 2303               		.section	.progmem.data.__c.2713,"a",@progbits
 2306               	__c.2713:
 2307 0000 7768 6572 		.string	"where delta: cursor=%d, wheel=%d\nSee http://en.wikipedia.org/wiki/Mouse_keys\n"
 2307      6520 6465 
 2307      6C74 613A 
 2307      2063 7572 
 2307      736F 723D 
 2308               		.section	.bss.mousekey_param,"aw",@nobits
 2311               	mousekey_param:
 2312 0000 00        		.zero	1
 2313               		.section	.progmem.data.__c.2723,"a",@progbits
 2316               	__c.2723:
 2317 0000 433E 2000 		.string	"C> "
 2318               		.section	.progmem.data.__c.2737,"a",@progbits
 2321               	__c.2737:
 2322 0000 7365 7420 		.string	"set default\n"
 2322      6465 6661 
 2322      756C 740A 
 2322      00
 2323               		.section	.progmem.data.__c.2740,"a",@progbits
 2326               	__c.2740:
 2327 0000 3F00      		.string	"?"
 2328               		.section	.progmem.data.__c.2742,"a",@progbits
 2331               	__c.2742:
 2332 0000 4D25 643E 		.string	"M%d> "
 2332      2000 
 2333               		.section	.progmem.data.__c.2744,"a",@progbits
 2336               	__c.2744:
 2337 0000 4D3E 00   		.string	"M>"
 2338               		.section	.progmem.data.__c.2624,"a",@progbits
 2341               	__c.2624:
 2342 0000 0A09 2D20 		.string	"\n\t- Values -\n"
 2342      5661 6C75 
 2342      6573 202D 
 2342      0A00 
 2343               		.section	.progmem.data.__c.2626,"a",@progbits
 2346               	__c.2626:
 2347 0000 313A 2064 		.string	"1: delay(*10ms): "
 2347      656C 6179 
 2347      282A 3130 
 2347      6D73 293A 
 2347      2000 
 2348               		.section	.progmem.data.__c.2628,"a",@progbits
 2351               	__c.2628:
 2352 0000 2575 00   		.string	"%u"
 2353               		.section	.progmem.data.__c.2630,"a",@progbits
 2356               	__c.2630:
 2357 0000 0A00      		.string	"\n"
 2358               		.section	.progmem.data.__c.2632,"a",@progbits
 2361               	__c.2632:
 2362 0000 323A 2069 		.string	"2: interval(ms): "
 2362      6E74 6572 
 2362      7661 6C28 
 2362      6D73 293A 
 2362      2000 
 2363               		.section	.progmem.data.__c.2634,"a",@progbits
 2366               	__c.2634:
 2367 0000 2575 00   		.string	"%u"
 2368               		.section	.progmem.data.__c.2636,"a",@progbits
 2371               	__c.2636:
 2372 0000 0A00      		.string	"\n"
 2373               		.section	.progmem.data.__c.2638,"a",@progbits
 2376               	__c.2638:
 2377 0000 333A 206D 		.string	"3: max_speed: "
 2377      6178 5F73 
 2377      7065 6564 
 2377      3A20 00
 2378               		.section	.progmem.data.__c.2640,"a",@progbits
 2381               	__c.2640:
 2382 0000 2575 00   		.string	"%u"
 2383               		.section	.progmem.data.__c.2642,"a",@progbits
 2386               	__c.2642:
 2387 0000 0A00      		.string	"\n"
 2388               		.section	.progmem.data.__c.2644,"a",@progbits
 2391               	__c.2644:
 2392 0000 343A 2074 		.string	"4: time_to_max: "
 2392      696D 655F 
 2392      746F 5F6D 
 2392      6178 3A20 
 2392      00
 2393               		.section	.progmem.data.__c.2646,"a",@progbits
 2396               	__c.2646:
 2397 0000 2575 00   		.string	"%u"
 2398               		.section	.progmem.data.__c.2648,"a",@progbits
 2401               	__c.2648:
 2402 0000 0A00      		.string	"\n"
 2403               		.section	.progmem.data.__c.2650,"a",@progbits
 2406               	__c.2650:
 2407 0000 353A 2077 		.string	"5: wheel_max_speed: "
 2407      6865 656C 
 2407      5F6D 6178 
 2407      5F73 7065 
 2407      6564 3A20 
 2408               		.section	.progmem.data.__c.2652,"a",@progbits
 2411               	__c.2652:
 2412 0000 2575 00   		.string	"%u"
 2413               		.section	.progmem.data.__c.2654,"a",@progbits
 2416               	__c.2654:
 2417 0000 0A00      		.string	"\n"
 2418               		.section	.progmem.data.__c.2656,"a",@progbits
 2421               	__c.2656:
 2422 0000 363A 2077 		.string	"6: wheel_time_to_max: "
 2422      6865 656C 
 2422      5F74 696D 
 2422      655F 746F 
 2422      5F6D 6178 
 2423               		.section	.progmem.data.__c.2658,"a",@progbits
 2426               	__c.2658:
 2427 0000 2575 00   		.string	"%u"
 2428               		.section	.progmem.data.__c.2660,"a",@progbits
 2431               	__c.2660:
 2432 0000 0A00      		.string	"\n"
 2433               		.section	.rodata.CSWTCH.42,"a",@progbits
 2436               	CSWTCH.42:
 2437 0000 01        		.byte	1
 2438 0001 02        		.byte	2
 2439 0002 03        		.byte	3
 2440 0003 04        		.byte	4
 2441 0004 05        		.byte	5
 2442 0005 06        		.byte	6
 2443 0006 07        		.byte	7
 2444 0007 08        		.byte	8
 2445 0008 09        		.byte	9
 2446 0009 00        		.byte	0
 2447               		.section	.progmem.data.__c.2667,"a",@progbits
 2450               	__c.2667:
 2451 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 2451      656C 6179 
 2451      203D 2025 
 2451      640A 00
 2452               		.section	.progmem.data.__c.2671,"a",@progbits
 2455               	__c.2671:
 2456 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 2456      6E74 6572 
 2456      7661 6C20 
 2456      3D20 2564 
 2456      0A00 
 2457               		.section	.progmem.data.__c.2674,"a",@progbits
 2460               	__c.2674:
 2461 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 2461      6178 5F73 
 2461      7065 6564 
 2461      203D 2025 
 2461      640A 00
 2462               		.section	.progmem.data.__c.2677,"a",@progbits
 2465               	__c.2677:
 2466 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 2466      696D 655F 
 2466      746F 5F6D 
 2466      6178 203D 
 2466      2025 640A 
 2467               		.section	.progmem.data.__c.2680,"a",@progbits
 2470               	__c.2680:
 2471 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 2471      6865 656C 
 2471      5F6D 6178 
 2471      5F73 7065 
 2471      6564 203D 
 2472               		.section	.progmem.data.__c.2683,"a",@progbits
 2475               	__c.2683:
 2476 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 2476      6865 656C 
 2476      5F74 696D 
 2476      655F 746F 
 2476      5F6D 6178 
 2477               		.section	.progmem.data.__c.2690,"a",@progbits
 2480               	__c.2690:
 2481 0000 6D6B 5F64 		.string	"mk_delay = %d\n"
 2481      656C 6179 
 2481      203D 2025 
 2481      640A 00
 2482               		.section	.progmem.data.__c.2694,"a",@progbits
 2485               	__c.2694:
 2486 0000 6D6B 5F69 		.string	"mk_interval = %d\n"
 2486      6E74 6572 
 2486      7661 6C20 
 2486      3D20 2564 
 2486      0A00 
 2487               		.section	.progmem.data.__c.2697,"a",@progbits
 2490               	__c.2697:
 2491 0000 6D6B 5F6D 		.string	"mk_max_speed = %d\n"
 2491      6178 5F73 
 2491      7065 6564 
 2491      203D 2025 
 2491      640A 00
 2492               		.section	.progmem.data.__c.2700,"a",@progbits
 2495               	__c.2700:
 2496 0000 6D6B 5F74 		.string	"mk_time_to_max = %d\n"
 2496      696D 655F 
 2496      746F 5F6D 
 2496      6178 203D 
 2496      2025 640A 
 2497               		.section	.progmem.data.__c.2703,"a",@progbits
 2500               	__c.2703:
 2501 0000 6D6B 5F77 		.string	"mk_wheel_max_speed = %d\n"
 2501      6865 656C 
 2501      5F6D 6178 
 2501      5F73 7065 
 2501      6564 203D 
 2502               		.section	.progmem.data.__c.2706,"a",@progbits
 2505               	__c.2706:
 2506 0000 6D6B 5F77 		.string	"mk_wheel_time_to_max = %d\n"
 2506      6865 656C 
 2506      5F74 696D 
 2506      655F 746F 
 2506      5F6D 6178 
 2507               		.text
 2508               	.Letext0:
 2509               		.file 3 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/stdint.h"
 2510               		.file 4 "../../../../tmk_core/common/report.h"
 2511               		.file 5 "../../../../tmk_core/common/keymap.h"
 2512               		.file 6 "../../../../tmk_core/common/debug.h"
 2513               		.file 7 "../../../../tmk_core/common/command.h"
 2514               		.file 8 "../../../../tmk_core/common/host.h"
 2515               		.file 9 "../../../../tmk_core/common/action_util.h"
 2516               		.file 10 "../../../../tmk_core/common/mousekey.h"
 2517               		.file 11 "../../../../tmk_core/common/avr/xprintf.h"
 2518               		.file 12 "../../../../tmk_core/common/action_layer.h"
 2519               		.file 13 "../../../../tmk_core/common/keycode.h"
 2520               		.file 14 "../../../../tmk_core/common/action.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
     /tmp/ccygRlDp.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccygRlDp.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccygRlDp.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccygRlDp.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccygRlDp.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccygRlDp.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccygRlDp.s:13     .text.command_console_help:0000000000000000 command_console_help
     /tmp/ccygRlDp.s:2276   .progmem.data.__c.2602:0000000000000000 __c.2602
     /tmp/ccygRlDp.s:32     .text.mousekey_console_help:0000000000000000 mousekey_console_help
     /tmp/ccygRlDp.s:2301   .progmem.data.__c.2711:0000000000000000 __c.2711
     /tmp/ccygRlDp.s:2306   .progmem.data.__c.2713:0000000000000000 __c.2713
     /tmp/ccygRlDp.s:84     .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
     /tmp/ccygRlDp.s:2450   .progmem.data.__c.2667:0000000000000000 __c.2667
     /tmp/ccygRlDp.s:2455   .progmem.data.__c.2671:0000000000000000 __c.2671
     /tmp/ccygRlDp.s:2460   .progmem.data.__c.2674:0000000000000000 __c.2674
     /tmp/ccygRlDp.s:2465   .progmem.data.__c.2677:0000000000000000 __c.2677
     /tmp/ccygRlDp.s:2470   .progmem.data.__c.2680:0000000000000000 __c.2680
     /tmp/ccygRlDp.s:2475   .progmem.data.__c.2683:0000000000000000 __c.2683
     /tmp/ccygRlDp.s:359    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
     /tmp/ccygRlDp.s:2480   .progmem.data.__c.2690:0000000000000000 __c.2690
     /tmp/ccygRlDp.s:2485   .progmem.data.__c.2694:0000000000000000 __c.2694
     /tmp/ccygRlDp.s:2490   .progmem.data.__c.2697:0000000000000000 __c.2697
     /tmp/ccygRlDp.s:2495   .progmem.data.__c.2700:0000000000000000 __c.2700
     /tmp/ccygRlDp.s:2500   .progmem.data.__c.2703:0000000000000000 __c.2703
     /tmp/ccygRlDp.s:2505   .progmem.data.__c.2706:0000000000000000 __c.2706
     /tmp/ccygRlDp.s:579    .text.switch_default_layer:0000000000000000 switch_default_layer
     /tmp/ccygRlDp.s:2281   .progmem.data.__c.2762:0000000000000000 __c.2762
     /tmp/ccygRlDp.s:645    .text.command_common:0000000000000000 command_common
     /tmp/ccygRlDp.s:1931   .progmem.data.__c.2535:0000000000000000 __c.2535
     /tmp/ccygRlDp.s:2046   .progmem.data.__c.2439:0000000000000000 __c.2439
     /tmp/ccygRlDp.s:2051   .progmem.data.__c.2441:0000000000000000 __c.2441
     /tmp/ccygRlDp.s:2056   .progmem.data.__c.2443:0000000000000000 __c.2443
     /tmp/ccygRlDp.s:2061   .progmem.data.__c.2446:0000000000000000 __c.2446
     /tmp/ccygRlDp.s:2066   .progmem.data.__c.2448:0000000000000000 __c.2448
     /tmp/ccygRlDp.s:2071   .progmem.data.__c.2450:0000000000000000 __c.2450
     /tmp/ccygRlDp.s:2076   .progmem.data.__c.2452:0000000000000000 __c.2452
     /tmp/ccygRlDp.s:2081   .progmem.data.__c.2454:0000000000000000 __c.2454
     /tmp/ccygRlDp.s:2086   .progmem.data.__c.2456:0000000000000000 __c.2456
     /tmp/ccygRlDp.s:2091   .progmem.data.__c.2458:0000000000000000 __c.2458
     /tmp/ccygRlDp.s:2096   .progmem.data.__c.2460:0000000000000000 __c.2460
     /tmp/ccygRlDp.s:2101   .progmem.data.__c.2462:0000000000000000 __c.2462
     /tmp/ccygRlDp.s:2106   .progmem.data.__c.2464:0000000000000000 __c.2464
     /tmp/ccygRlDp.s:2111   .progmem.data.__c.2466:0000000000000000 __c.2466
     /tmp/ccygRlDp.s:2116   .progmem.data.__c.2468:0000000000000000 __c.2468
     /tmp/ccygRlDp.s:2121   .progmem.data.__c.2470:0000000000000000 __c.2470
     /tmp/ccygRlDp.s:2126   .progmem.data.__c.2472:0000000000000000 __c.2472
     /tmp/ccygRlDp.s:2131   .progmem.data.__c.2474:0000000000000000 __c.2474
     /tmp/ccygRlDp.s:2136   .progmem.data.__c.2477:0000000000000000 __c.2477
     /tmp/ccygRlDp.s:2141   .progmem.data.__c.2479:0000000000000000 __c.2479
     /tmp/ccygRlDp.s:2146   .progmem.data.__c.2481:0000000000000000 __c.2481
     /tmp/ccygRlDp.s:2151   .progmem.data.__c.2483:0000000000000000 __c.2483
     /tmp/ccygRlDp.s:2156   .progmem.data.__c.2485:0000000000000000 __c.2485
     /tmp/ccygRlDp.s:2161   .progmem.data.__c.2487:0000000000000000 __c.2487
     /tmp/ccygRlDp.s:2166   .progmem.data.__c.2489:0000000000000000 __c.2489
     /tmp/ccygRlDp.s:2171   .progmem.data.__c.2491:0000000000000000 __c.2491
     /tmp/ccygRlDp.s:2176   .progmem.data.__c.2493:0000000000000000 __c.2493
     /tmp/ccygRlDp.s:2181   .progmem.data.__c.2495:0000000000000000 __c.2495
     /tmp/ccygRlDp.s:2186   .progmem.data.__c.2497:0000000000000000 __c.2497
     /tmp/ccygRlDp.s:2191   .progmem.data.__c.2499:0000000000000000 __c.2499
     /tmp/ccygRlDp.s:2196   .progmem.data.__c.2501:0000000000000000 __c.2501
     /tmp/ccygRlDp.s:2201   .progmem.data.__c.2503:0000000000000000 __c.2503
     /tmp/ccygRlDp.s:2206   .progmem.data.__c.2505:0000000000000000 __c.2505
     /tmp/ccygRlDp.s:2211   .progmem.data.__c.2507:0000000000000000 __c.2507
     /tmp/ccygRlDp.s:2216   .progmem.data.__c.2509:0000000000000000 __c.2509
     /tmp/ccygRlDp.s:2221   .progmem.data.__c.2511:0000000000000000 __c.2511
     /tmp/ccygRlDp.s:2226   .progmem.data.__c.2513:0000000000000000 __c.2513
     /tmp/ccygRlDp.s:2231   .progmem.data.__c.2515:0000000000000000 __c.2515
     /tmp/ccygRlDp.s:2236   .progmem.data.__c.2517:0000000000000000 __c.2517
     /tmp/ccygRlDp.s:2241   .progmem.data.__c.2519:0000000000000000 __c.2519
     /tmp/ccygRlDp.s:2246   .progmem.data.__c.2521:0000000000000000 __c.2521
     /tmp/ccygRlDp.s:2251   .progmem.data.__c.2523:0000000000000000 __c.2523
     /tmp/ccygRlDp.s:2256   .progmem.data.__c.2525:0000000000000000 __c.2525
     /tmp/ccygRlDp.s:2261   .progmem.data.__c.2527:0000000000000000 __c.2527
     /tmp/ccygRlDp.s:2266   .progmem.data.__c.2529:0000000000000000 __c.2529
     /tmp/ccygRlDp.s:2271   .progmem.data.__c.2434:0000000000000000 __c.2434
     /tmp/ccygRlDp.s:1936   .progmem.data.__c.2541:0000000000000000 __c.2541
     /tmp/ccygRlDp.s:1926   .bss.command_state:0000000000000000 command_state
     /tmp/ccygRlDp.s:1941   .progmem.data.__c.2544:0000000000000000 __c.2544
     /tmp/ccygRlDp.s:1946   .progmem.data.__c.2547:0000000000000000 __c.2547
     /tmp/ccygRlDp.s:1951   .progmem.data.__c.2549:0000000000000000 __c.2549
     /tmp/ccygRlDp.s:1956   .progmem.data.__c.2552:0000000000000000 __c.2552
     /tmp/ccygRlDp.s:1961   .progmem.data.__c.2554:0000000000000000 __c.2554
     /tmp/ccygRlDp.s:1966   .progmem.data.__c.2557:0000000000000000 __c.2557
     /tmp/ccygRlDp.s:1971   .progmem.data.__c.2559:0000000000000000 __c.2559
     /tmp/ccygRlDp.s:1976   .progmem.data.__c.2562:0000000000000000 __c.2562
     /tmp/ccygRlDp.s:1981   .progmem.data.__c.2564:0000000000000000 __c.2564
     /tmp/ccygRlDp.s:1986   .progmem.data.__c.2567:0000000000000000 __c.2567
     /tmp/ccygRlDp.s:1991   .progmem.data.__c.2569:0000000000000000 __c.2569
     /tmp/ccygRlDp.s:1996   .progmem.data.__c.2571:0000000000000000 __c.2571
     /tmp/ccygRlDp.s:2001   .progmem.data.__c.2573:0000000000000000 __c.2573
     /tmp/ccygRlDp.s:2006   .progmem.data.__c.2575:0000000000000000 __c.2575
     /tmp/ccygRlDp.s:2011   .progmem.data.__c.2577:0000000000000000 __c.2577
     /tmp/ccygRlDp.s:2016   .progmem.data.__c.2580:0000000000000000 __c.2580
     /tmp/ccygRlDp.s:2021   .progmem.data.__c.2582:0000000000000000 __c.2582
     /tmp/ccygRlDp.s:2026   .progmem.data.__c.2584:0000000000000000 __c.2584
     /tmp/ccygRlDp.s:2031   .progmem.data.__c.2586:0000000000000000 __c.2586
     /tmp/ccygRlDp.s:2036   .progmem.data.__c.2588:0000000000000000 __c.2588
     /tmp/ccygRlDp.s:2041   .progmem.data.__c.2597:0000000000000000 __c.2597
     /tmp/ccygRlDp.s:1430   .text.command_extra:0000000000000000 command_extra
     /tmp/ccygRlDp.s:1449   .text.command_console_extra:0000000000000000 command_console_extra
     /tmp/ccygRlDp.s:1468   .text.command_proc:0000000000000000 command_proc
     /tmp/ccygRlDp.s:2286   .progmem.data.__c.2618:0000000000000000 __c.2618
     /tmp/ccygRlDp.s:2291   .progmem.data.__c.2613:0000000000000000 __c.2613
     /tmp/ccygRlDp.s:2296   .progmem.data.__c.2616:0000000000000000 __c.2616
     /tmp/ccygRlDp.s:2311   .bss.mousekey_param:0000000000000000 mousekey_param
     /tmp/ccygRlDp.s:2316   .progmem.data.__c.2723:0000000000000000 __c.2723
     /tmp/ccygRlDp.s:2341   .progmem.data.__c.2624:0000000000000000 __c.2624
     /tmp/ccygRlDp.s:2346   .progmem.data.__c.2626:0000000000000000 __c.2626
     /tmp/ccygRlDp.s:2351   .progmem.data.__c.2628:0000000000000000 __c.2628
     /tmp/ccygRlDp.s:2356   .progmem.data.__c.2630:0000000000000000 __c.2630
     /tmp/ccygRlDp.s:2361   .progmem.data.__c.2632:0000000000000000 __c.2632
     /tmp/ccygRlDp.s:2366   .progmem.data.__c.2634:0000000000000000 __c.2634
     /tmp/ccygRlDp.s:2371   .progmem.data.__c.2636:0000000000000000 __c.2636
     /tmp/ccygRlDp.s:2376   .progmem.data.__c.2638:0000000000000000 __c.2638
     /tmp/ccygRlDp.s:2381   .progmem.data.__c.2640:0000000000000000 __c.2640
     /tmp/ccygRlDp.s:2386   .progmem.data.__c.2642:0000000000000000 __c.2642
     /tmp/ccygRlDp.s:2391   .progmem.data.__c.2644:0000000000000000 __c.2644
     /tmp/ccygRlDp.s:2396   .progmem.data.__c.2646:0000000000000000 __c.2646
     /tmp/ccygRlDp.s:2401   .progmem.data.__c.2648:0000000000000000 __c.2648
     /tmp/ccygRlDp.s:2406   .progmem.data.__c.2650:0000000000000000 __c.2650
     /tmp/ccygRlDp.s:2411   .progmem.data.__c.2652:0000000000000000 __c.2652
     /tmp/ccygRlDp.s:2416   .progmem.data.__c.2654:0000000000000000 __c.2654
     /tmp/ccygRlDp.s:2421   .progmem.data.__c.2656:0000000000000000 __c.2656
     /tmp/ccygRlDp.s:2426   .progmem.data.__c.2658:0000000000000000 __c.2658
     /tmp/ccygRlDp.s:2431   .progmem.data.__c.2660:0000000000000000 __c.2660
     /tmp/ccygRlDp.s:2436   .rodata.CSWTCH.42:0000000000000000 CSWTCH.42
     /tmp/ccygRlDp.s:2321   .progmem.data.__c.2737:0000000000000000 __c.2737
     /tmp/ccygRlDp.s:2326   .progmem.data.__c.2740:0000000000000000 __c.2740
     /tmp/ccygRlDp.s:2331   .progmem.data.__c.2742:0000000000000000 __c.2742
     /tmp/ccygRlDp.s:2336   .progmem.data.__c.2744:0000000000000000 __c.2744

UNDEFINED SYMBOLS
xputs
__xprintf
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
eeconfig_read_default_layer
eeconfig_read_debug
eeconfig_read_keymap
debug_config
bootloader_jump
host_keyboard_leds
keyboard_protocol
keyboard_idle
timer_read32
keyboard_report
__do_copy_data
__do_clear_bss
