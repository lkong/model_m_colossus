
colossus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00002ed0  00002f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ed0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b3  0080010e  0080010e  00002f72  2**0
                  ALLOC
  3 .noinit       00000004  008001c1  008001c1  00002f72  2**0
                  ALLOC
  4 .stab         00000a98  00000000  00000000  00002f74  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001b2  00000000  00000000  00003a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00003bbe  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008c8  00000000  00000000  00003bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000ca85  00000000  00000000  00004497  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000034cb  00000000  00000000  00010f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004aa9  00000000  00000000  000143e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000016b0  00000000  00000000  00018e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003eb4  00000000  00000000  0001a540  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000695c  00000000  00000000  0001e3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000aa8  00000000  00000000  00024d50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 8c 01 	jmp	0x318	; 0x318 <__ctors_end>
       4:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
       8:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
       c:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      10:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      14:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      18:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      1c:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      20:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      24:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      28:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__vector_10>
      2c:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__vector_11>
      30:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      34:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      38:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      3c:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      40:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      44:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__vector_17>
      48:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      4c:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      50:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      54:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__vector_21>
      58:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      5c:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      60:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      64:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      68:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      6c:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      70:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      74:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      78:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      7c:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      80:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      84:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      88:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      8c:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      90:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>
      94:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__bad_interrupt>

00000098 <fn_actions>:
      98:	39 a2 00 f0 01 f0 02 f0                             9.......

000000a0 <keymaps>:
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      a0:	00 00 00 00 00 05 2c 11 00 00 38 51 4f 00 50 e6     ......,...8QO.P.

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      b0:	e4 e5 1d 1b 06 19 28 10 36 37 31 00 00 00 48 00     ......(.671...H.
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      c0:	00 00 04 16 07 09 31 0d 0e 0f 33 00 00 00 00 00     ......1...3.....
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      d0:	00 00 14 1a 08 15 31 18 0c 12 13 00 00 00 00 c1     ......1.........
      e0:	00 00 1e 1f 20 21 43 24 25 26 27 44 45 4e 4d 46     .... !C$%&'DENMF
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
      f0:	e0 00 35 3a 3b 22 42 23 2e 41 2d 4c 49 4b 4a 00     ..5:;"B#.A-LIKJ.
     100:	00 e1 2b c0 3c 17 2a 1c 30 40 2f 00 00 00 00 00     ..+.<.*.0@/.....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     110:	00 00 29 64 3d 0a 3e 0b 3f 00 34 00 00 00 52 e2     ..)d=.>.?.4...R.
     120:	00 00 00 00 00 01 01 01 01 00 54 01 01 00 01 01     ..........T.....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     130:	01 01 01 01 01 01 58 62 85 63 01 00 00 00 01 00     ......Xb.c......
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
     140:	00 00 01 01 01 01 01 59 5a 5b 55 00 00 00 00 00     .......YZ[U.....
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     150:	00 00 01 01 01 01 01 5c 5d 5e 01 00 00 00 00 c2     .......\]^......
     160:	00 00 01 01 01 01 01 5f 60 61 01 01 01 01 01 01     ......._`a......
				ReportSize     -= 2;
				ReportData     += 2;
     170:	01 00 01 01 01 01 01 01 57 01 56 01 01 01 01 00     ........W.V.....
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     180:	00 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     190:	00 00 01 01 01 01 01 01 01 00 01 00 00 00 01 01     ................
     1a0:	00 00 00 00 00 01 01 01 01 00 01 01 01 00 01 01     ................
     1b0:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 c3 00     ................
     1c0:	00 00 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
     1d0:	00 00 01 01 01 01 01 01 01 01 01 00 00 00 00 01     ................
     1e0:	00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     1f0:	01 00 01 01 01 01 01 01 01 01 01 01 01 01 01 00     ................
     200:	00 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
     210:	00 00 01 01 01 01 01 01 01 00 01 00 00 00 01 01     ................

00000220 <ProductString>:
     220:	22 03 4d 00 6f 00 64 00 65 00 6c 00 5f 00 4d 00     ".M.o.d.e.l._.M.
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     230:	5f 00 53 00 53 00 4b 00 5f 00 56 00 31 00 2e 00     _.S.S.K._.V.1...
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     240:	30 00 00 00                                         0...

00000244 <ManufacturerString>:
     244:	1a 03 50 00 68 00 6f 00 73 00 70 00 68 00 6f 00     ..P.h.o.s.p.h.o.

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     254:	72 00 47 00 6c 00 6f 00 77 00 00 00                 r.G.l.o.w...

00000260 <LanguageString>:

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     260:	04 03 09 04                                         ....

00000264 <ConfigurationDescriptor>:
     264:	09 02 22 00 01 01 00 a0 32 09 04 00 00 01 03 01     ..".....2.......
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
				break;
     274:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
				break;
     284:	00 0a                                               ..

00000286 <DeviceDescriptor>:

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     286:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     296:	00 01                                               ..

00000298 <KeyboardReport>:
     298:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2a8:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     2b8:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2c8:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

000002d7 <breathing_table>:

				if (ParserData->UsingReportIDs)
     2d7:	00 00 00 00 00 00 00 00 00 00 00 01 02 04 06 0a     ................
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2e7:	0f 17 20 2c 3a 4a 5d 71 87 9d b3 c7 da e9 f5 fc     .. ,:J]q........
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2f7:	ff fc f5 e9 da c7 b3 9d 87 71 5d 4a 3a 2c 20 17     .........q]J:, .
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     307:	0f 0a 06 04 02 01 00 00 00 00 00 00 00 00 00 00     ................

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     317:	00                                                  .

00000318 <__ctors_end>:
     318:	11 24       	eor	r1, r1
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     31a:	1f be       	out	0x3f, r1	; 63
     31c:	cf ef       	ldi	r28, 0xFF	; 255
     31e:	d0 e2       	ldi	r29, 0x20	; 32
     320:	de bf       	out	0x3e, r29	; 62
     322:	cd bf       	out	0x3d, r28	; 61

00000324 <bootloader_jump_after_watchdog_reset>:
     324:	04 b6       	in	r0, 0x34	; 52
     326:	03 fe       	sbrs	r0, 3
     328:	24 c0       	rjmp	.+72     	; 0x372 <__do_copy_data>
     32a:	80 91 c1 01 	lds	r24, 0x01C1
     32e:	90 91 c2 01 	lds	r25, 0x01C2
     332:	a0 91 c3 01 	lds	r26, 0x01C3
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     336:	b0 91 c4 01 	lds	r27, 0x01C4
     33a:	87 30       	cpi	r24, 0x07	; 7
					}
				}

				ParserData->UsingReportIDs = true;
     33c:	90 4b       	sbci	r25, 0xB0	; 176
     33e:	a7 40       	sbci	r26, 0x07	; 7
     340:	b0 4b       	sbci	r27, 0xB0	; 176
     342:	b9 f4       	brne	.+46     	; 0x372 <__do_copy_data>
     344:	10 92 c1 01 	sts	0x01C1, r1

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     348:	10 92 c2 01 	sts	0x01C2, r1
     34c:	10 92 c3 01 	sts	0x01C3, r1
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     350:	10 92 c4 01 	sts	0x01C4, r1
     354:	14 be       	out	0x34, r1	; 52
     356:	84 b7       	in	r24, 0x34	; 52
     358:	87 7f       	andi	r24, 0xF7	; 247
     35a:	84 bf       	out	0x34, r24	; 52
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     35c:	88 e1       	ldi	r24, 0x18	; 24
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	80 93 60 00 	sts	0x0060, r24
     366:	10 92 60 00 	sts	0x0060, r1
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	e0 e0       	ldi	r30, 0x00	; 0
     36e:	f0 ef       	ldi	r31, 0xF0	; 240
     370:	09 95       	icall

00000372 <__do_copy_data>:
     372:	11 e0       	ldi	r17, 0x01	; 1
     374:	a0 e0       	ldi	r26, 0x00	; 0
				break;
     376:	b1 e0       	ldi	r27, 0x01	; 1
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     378:	e0 ed       	ldi	r30, 0xD0	; 208
     37a:	fe e2       	ldi	r31, 0x2E	; 46
     37c:	00 e0       	ldi	r16, 0x00	; 0
     37e:	0b bf       	out	0x3b, r16	; 59
     380:	02 c0       	rjmp	.+4      	; 0x386 <__do_copy_data+0x14>
     382:	07 90       	elpm	r0, Z+
     384:	0d 92       	st	X+, r0

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     386:	ae 30       	cpi	r26, 0x0E	; 14
     388:	b1 07       	cpc	r27, r17
     38a:	d9 f7       	brne	.-10     	; 0x382 <__do_copy_data+0x10>

0000038c <__do_clear_bss>:
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     38c:	11 e0       	ldi	r17, 0x01	; 1
     38e:	ae e0       	ldi	r26, 0x0E	; 14
     390:	b1 e0       	ldi	r27, 0x01	; 1
     392:	01 c0       	rjmp	.+2      	; 0x396 <.do_clear_bss_start>

00000394 <.do_clear_bss_loop>:
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     394:	1d 92       	st	X+, r1

00000396 <.do_clear_bss_start>:
     396:	a1 3c       	cpi	r26, 0xC1	; 193
     398:	b1 07       	cpc	r27, r17
     39a:	e1 f7       	brne	.-8      	; 0x394 <.do_clear_bss_loop>
     39c:	0e 94 42 05 	call	0xa84	; 0xa84 <main>

					while (CurrCollectionPath->Parent != NULL)
     3a0:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <_exit>

000003a4 <__bad_interrupt>:
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a8 <action_function>:
     3a8:	ef 92       	push	r14
     3aa:	ff 92       	push	r15
     3ac:	7c 01       	movw	r14, r24
     3ae:	61 30       	cpi	r22, 0x01	; 1
     3b0:	d9 f0       	breq	.+54     	; 0x3e8 <action_function+0x40>
     3b2:	20 f0       	brcs	.+8      	; 0x3bc <action_function+0x14>
     3b4:	62 30       	cpi	r22, 0x02	; 2
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3b6:	09 f0       	breq	.+2      	; 0x3ba <action_function+0x12>
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3b8:	68 c0       	rjmp	.+208    	; 0x48a <action_function+0xe2>
     3ba:	3e c0       	rjmp	.+124    	; 0x438 <action_function+0x90>
     3bc:	0e 94 34 15 	call	0x2a68	; 0x2a68 <get_mods>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3c0:	82 72       	andi	r24, 0x22	; 34
     3c2:	99 27       	eor	r25, r25
     3c4:	80 93 0e 01 	sts	0x010E, r24
				}

				CurrCollectionPath->Type       = ReportItemData;
     3c8:	f7 01       	movw	r30, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     3ca:	32 81       	ldd	r19, Z+2	; 0x02
     3cc:	33 23       	and	r19, r19
     3ce:	39 f0       	breq	.+14     	; 0x3de <action_function+0x36>
     3d0:	81 11       	cpse	r24, r1
     3d2:	16 c0       	rjmp	.+44     	; 0x400 <action_function+0x58>
     3d4:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <del_mods>

				if (UsageListSize)
     3d8:	87 e4       	ldi	r24, 0x47	; 71
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	1d c0       	rjmp	.+58     	; 0x418 <action_function+0x70>
     3de:	81 11       	cpse	r24, r1
     3e0:	54 c0       	rjmp	.+168    	; 0x48a <action_function+0xe2>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     3e2:	87 e4       	ldi	r24, 0x47	; 71
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	4b c0       	rjmp	.+150    	; 0x47e <action_function+0xd6>
     3e8:	0e 94 34 15 	call	0x2a68	; 0x2a68 <get_mods>
     3ec:	82 72       	andi	r24, 0x22	; 34
     3ee:	99 27       	eor	r25, r25
     3f0:	80 93 0e 01 	sts	0x010E, r24
     3f4:	f7 01       	movw	r30, r14
     3f6:	32 81       	ldd	r19, Z+2	; 0x02

					for (uint8_t i = 1; i < UsageListSize; i++)
     3f8:	33 23       	and	r19, r19
     3fa:	c9 f0       	breq	.+50     	; 0x42e <action_function+0x86>
					  UsageList[i - 1] = UsageList[i];
     3fc:	88 23       	and	r24, r24
     3fe:	41 f0       	breq	.+16     	; 0x410 <action_function+0x68>
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <layer_invert>

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     406:	84 b1       	in	r24, 0x04	; 4
     408:	98 e0       	ldi	r25, 0x08	; 8
     40a:	89 27       	eor	r24, r25
     40c:	84 b9       	out	0x04, r24	; 4
     40e:	3d c0       	rjmp	.+122    	; 0x48a <action_function+0xe2>
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     410:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <del_mods>
     414:	83 e5       	ldi	r24, 0x53	; 83
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <add_key>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     41c:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <send_keyboard_report>
     420:	80 91 0e 01 	lds	r24, 0x010E
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	0c 94 37 15 	jmp	0x2a6e	; 0x2a6e <add_mods>
     42e:	81 11       	cpse	r24, r1
     430:	2c c0       	rjmp	.+88     	; 0x48a <action_function+0xe2>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     432:	83 e5       	ldi	r24, 0x53	; 83
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	23 c0       	rjmp	.+70     	; 0x47e <action_function+0xd6>
     438:	0e 94 34 15 	call	0x2a68	; 0x2a68 <get_mods>
     43c:	80 72       	andi	r24, 0x20	; 32
     43e:	99 27       	eor	r25, r25
     440:	80 93 0f 01 	sts	0x010F, r24
     444:	f7 01       	movw	r30, r14
     446:	32 81       	ldd	r19, Z+2	; 0x02
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     448:	33 23       	and	r19, r19
     44a:	a9 f0       	breq	.+42     	; 0x476 <action_function+0xce>
     44c:	88 23       	and	r24, r24
     44e:	41 f0       	breq	.+16     	; 0x460 <action_function+0xb8>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     450:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <del_mods>
     454:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <send_keyboard_report>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	0c 94 e2 16 	jmp	0x2dc4	; 0x2dc4 <bootloader_jump>
     460:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <del_mods>
     464:	88 e4       	ldi	r24, 0x48	; 72
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <add_key>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     46c:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <send_keyboard_report>
					NewReportItem.CollectionPath = CurrCollectionPath;
     470:	80 91 0f 01 	lds	r24, 0x010F
     474:	d7 cf       	rjmp	.-82     	; 0x424 <action_function+0x7c>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     476:	81 11       	cpse	r24, r1
     478:	08 c0       	rjmp	.+16     	; 0x48a <action_function+0xe2>
     47a:	88 e4       	ldi	r24, 0x48	; 72
     47c:	90 e0       	ldi	r25, 0x00	; 0

					if (UsageListSize)
     47e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <del_key>
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <send_keyboard_report>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     48a:	ff 90       	pop	r15
     48c:	ef 90       	pop	r14
     48e:	08 95       	ret

00000490 <keymap_key_to_keycode>:
     490:	e7 2f       	mov	r30, r23
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	98 e0       	ldi	r25, 0x08	; 8
     496:	89 9f       	mul	r24, r25
     498:	e0 0d       	add	r30, r0
     49a:	f1 1d       	adc	r31, r1
     49c:	11 24       	eor	r1, r1

						for (uint8_t i = 1; i < UsageListSize; i++)
     49e:	84 e0       	ldi	r24, 0x04	; 4
     4a0:	ee 0f       	add	r30, r30
						  UsageList[i - 1] = UsageList[i];
     4a2:	ff 1f       	adc	r31, r31
     4a4:	8a 95       	dec	r24
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <keymap_key_to_keycode+0x10>
     4a8:	e6 0f       	add	r30, r22

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     4aa:	f1 1d       	adc	r31, r1
     4ac:	e0 56       	subi	r30, 0x60	; 96
     4ae:	ff 4f       	sbci	r31, 0xFF	; 255
     4b0:	84 91       	lpm	r24, Z
     4b2:	08 95       	ret

000004b4 <keymap_fn_to_action>:
     4b4:	e8 2f       	mov	r30, r24
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	ee 0f       	add	r30, r30
     4ba:	ff 1f       	adc	r31, r31
     4bc:	e8 5e       	subi	r30, 0xE8	; 232
     4be:	f0 40       	sbci	r31, 0x00	; 0
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4c0:	25 91       	lpm	r18, Z+
     4c2:	34 91       	lpm	r19, Z
     4c4:	c9 01       	movw	r24, r18
     4c6:	08 95       	ret

000004c8 <unselect_rows>:
     4c8:	84 b1       	in	r24, 0x04	; 4
     4ca:	8f 71       	andi	r24, 0x1F	; 31
     4cc:	84 b9       	out	0x04, r24	; 4
     4ce:	85 b1       	in	r24, 0x05	; 5
     4d0:	8f 71       	andi	r24, 0x1F	; 31
     4d2:	85 b9       	out	0x05, r24	; 5
     4d4:	8d b1       	in	r24, 0x0d	; 13
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     4d6:	8f 7c       	andi	r24, 0xCF	; 207
     4d8:	8d b9       	out	0x0d, r24	; 13
     4da:	8e b1       	in	r24, 0x0e	; 14
     4dc:	8f 7c       	andi	r24, 0xCF	; 207
     4de:	8e b9       	out	0x0e, r24	; 14
     4e0:	8a b1       	in	r24, 0x0a	; 10
     4e2:	8c 7e       	andi	r24, 0xEC	; 236
     4e4:	8a b9       	out	0x0a, r24	; 10
     4e6:	8b b1       	in	r24, 0x0b	; 11
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     4e8:	8c 7e       	andi	r24, 0xEC	; 236
     4ea:	8b b9       	out	0x0b, r24	; 11
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     4ec:	08 95       	ret

000004ee <matrix_init>:
     4ee:	85 b7       	in	r24, 0x35	; 53
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     4f0:	80 68       	ori	r24, 0x80	; 128
     4f2:	85 bf       	out	0x35, r24	; 53
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     4f4:	85 b7       	in	r24, 0x35	; 53
     4f6:	80 68       	ori	r24, 0x80	; 128
     4f8:	85 bf       	out	0x35, r24	; 53
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     4fa:	0e 94 64 02 	call	0x4c8	; 0x4c8 <unselect_rows>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     4fe:	81 b1       	in	r24, 0x01	; 1
     500:	8f 70       	andi	r24, 0x0F	; 15
     502:	81 b9       	out	0x01, r24	; 1
     504:	82 b1       	in	r24, 0x02	; 2
     506:	80 6f       	ori	r24, 0xF0	; 240
     508:	82 b9       	out	0x02, r24	; 2
     50a:	87 b1       	in	r24, 0x07	; 7
     50c:	17 b8       	out	0x07, r1	; 7
     50e:	88 b1       	in	r24, 0x08	; 8
     510:	8f ef       	ldi	r24, 0xFF	; 255

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     512:	88 b9       	out	0x08, r24	; 8
     514:	8d b1       	in	r24, 0x0d	; 13
     516:	8c 7f       	andi	r24, 0xFC	; 252
     518:	8d b9       	out	0x0d, r24	; 13
     51a:	8e b1       	in	r24, 0x0e	; 14
     51c:	83 60       	ori	r24, 0x03	; 3
     51e:	8e b9       	out	0x0e, r24	; 14
     520:	8a b1       	in	r24, 0x0a	; 10

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     522:	8f 75       	andi	r24, 0x5F	; 95
     524:	8a b9       	out	0x0a, r24	; 10
     526:	8b b1       	in	r24, 0x0b	; 11
     528:	80 6a       	ori	r24, 0xA0	; 160
     52a:	8b b9       	out	0x0b, r24	; 11
     52c:	e0 e1       	ldi	r30, 0x10	; 16
     52e:	f1 e0       	ldi	r31, 0x01	; 1
     530:	a0 e2       	ldi	r26, 0x20	; 32
     532:	b1 e0       	ldi	r27, 0x01	; 1
     534:	11 92       	st	Z+, r1
     536:	11 92       	st	Z+, r1
     538:	1d 92       	st	X+, r1
     53a:	1d 92       	st	X+, r1
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	e0 32       	cpi	r30, 0x20	; 32
     540:	f8 07       	cpc	r31, r24
     542:	c1 f7       	brne	.-16     	; 0x534 <matrix_init+0x46>
     544:	08 95       	ret

00000546 <matrix_scan>:
     546:	af 92       	push	r10
     548:	bf 92       	push	r11
     54a:	cf 92       	push	r12
     54c:	df 92       	push	r13
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	a0 e2       	ldi	r26, 0x20	; 32
     55a:	ca 2e       	mov	r12, r26
     55c:	a1 e0       	ldi	r26, 0x01	; 1
     55e:	da 2e       	mov	r13, r26

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     560:	76 01       	movw	r14, r12
     562:	c0 e0       	ldi	r28, 0x00	; 0
     564:	d1 e0       	ldi	r29, 0x01	; 1
     566:	15 e0       	ldi	r17, 0x05	; 5
					  return HID_PARSE_InsufficientReportItems;
     568:	c4 30       	cpi	r28, 0x04	; 4
     56a:	a9 f0       	breq	.+42     	; 0x596 <matrix_scan+0x50>

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     56c:	30 f4       	brcc	.+12     	; 0x57a <matrix_scan+0x34>
     56e:	c2 30       	cpi	r28, 0x02	; 2
     570:	c1 f0       	breq	.+48     	; 0x5a2 <matrix_scan+0x5c>
     572:	a0 f4       	brcc	.+40     	; 0x59c <matrix_scan+0x56>
     574:	c1 30       	cpi	r28, 0x01	; 1
     576:	d9 f4       	brne	.+54     	; 0x5ae <matrix_scan+0x68>
     578:	17 c0       	rjmp	.+46     	; 0x5a8 <matrix_scan+0x62>
     57a:	c6 30       	cpi	r28, 0x06	; 6
     57c:	31 f0       	breq	.+12     	; 0x58a <matrix_scan+0x44>
     57e:	40 f0       	brcs	.+16     	; 0x590 <matrix_scan+0x4a>
     580:	c7 30       	cpi	r28, 0x07	; 7
     582:	a9 f4       	brne	.+42     	; 0x5ae <matrix_scan+0x68>
     584:	54 9a       	sbi	0x0a, 4	; 10
     586:	5c 98       	cbi	0x0b, 4	; 11
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     588:	14 c0       	rjmp	.+40     	; 0x5b2 <matrix_scan+0x6c>
     58a:	51 9a       	sbi	0x0a, 1	; 10
     58c:	59 98       	cbi	0x0b, 1	; 11
     58e:	11 c0       	rjmp	.+34     	; 0x5b2 <matrix_scan+0x6c>
     590:	50 9a       	sbi	0x0a, 0	; 10
     592:	58 98       	cbi	0x0b, 0	; 11
     594:	0e c0       	rjmp	.+28     	; 0x5b2 <matrix_scan+0x6c>
     596:	6d 9a       	sbi	0x0d, 5	; 13
     598:	75 98       	cbi	0x0e, 5	; 14
     59a:	0b c0       	rjmp	.+22     	; 0x5b2 <matrix_scan+0x6c>
     59c:	6c 9a       	sbi	0x0d, 4	; 13
     59e:	74 98       	cbi	0x0e, 4	; 14
     5a0:	08 c0       	rjmp	.+16     	; 0x5b2 <matrix_scan+0x6c>
     5a2:	27 9a       	sbi	0x04, 7	; 4
     5a4:	2f 98       	cbi	0x05, 7	; 5
     5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <matrix_scan+0x6c>
     5a8:	26 9a       	sbi	0x04, 6	; 4
     5aa:	2e 98       	cbi	0x05, 6	; 5
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <matrix_scan+0x6c>
     5ae:	25 9a       	sbi	0x04, 5	; 4
     5b0:	2d 98       	cbi	0x05, 5	; 5
     5b2:	80 ea       	ldi	r24, 0xA0	; 160
     5b4:	8a 95       	dec	r24
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <matrix_scan+0x6e>
     5b8:	80 b1       	in	r24, 0x00	; 0
     5ba:	82 95       	swap	r24
     5bc:	8f 70       	andi	r24, 0x0F	; 15
     5be:	8d 27       	eor	r24, r29
     5c0:	80 fb       	bst	r24, 0
     5c2:	aa 24       	eor	r10, r10
     5c4:	a0 f8       	bld	r10, 0
     5c6:	b1 2c       	mov	r11, r1
     5c8:	05 9b       	sbis	0x00, 5	; 0
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <matrix_scan+0x8c>
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <matrix_scan+0x90>
     5d2:	22 e0       	ldi	r18, 0x02	; 2
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	2a 29       	or	r18, r10
     5d8:	3b 29       	or	r19, r11
     5da:	06 9b       	sbis	0x00, 6	; 0
     5dc:	03 c0       	rjmp	.+6      	; 0x5e4 <matrix_scan+0x9e>
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <matrix_scan+0xa2>
     5e4:	84 e0       	ldi	r24, 0x04	; 4
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	28 2b       	or	r18, r24
     5ea:	39 2b       	or	r19, r25
     5ec:	80 b1       	in	r24, 0x00	; 0
     5ee:	99 27       	eor	r25, r25
     5f0:	87 fd       	sbrc	r24, 7
     5f2:	90 95       	com	r25
     5f4:	80 95       	com	r24
     5f6:	90 95       	com	r25
     5f8:	88 27       	eor	r24, r24
     5fa:	99 0f       	add	r25, r25
     5fc:	88 1f       	adc	r24, r24
     5fe:	99 27       	eor	r25, r25
     600:	73 e0       	ldi	r23, 0x03	; 3
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	7a 95       	dec	r23
     608:	e1 f7       	brne	.-8      	; 0x602 <matrix_scan+0xbc>
     60a:	28 2b       	or	r18, r24
     60c:	39 2b       	or	r19, r25
     60e:	86 b1       	in	r24, 0x06	; 6
     610:	99 27       	eor	r25, r25
     612:	87 fd       	sbrc	r24, 7
     614:	90 95       	com	r25
     616:	80 95       	com	r24
     618:	90 95       	com	r25
     61a:	88 27       	eor	r24, r24
     61c:	99 0f       	add	r25, r25
     61e:	88 1f       	adc	r24, r24
     620:	99 27       	eor	r25, r25
     622:	f4 e0       	ldi	r31, 0x04	; 4
     624:	88 0f       	add	r24, r24
					  ParserData->TotalReportItems++;
     626:	99 1f       	adc	r25, r25
     628:	fa 95       	dec	r31
     62a:	e1 f7       	brne	.-8      	; 0x624 <matrix_scan+0xde>
     62c:	28 2b       	or	r18, r24
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     62e:	39 2b       	or	r19, r25
     630:	36 9b       	sbis	0x06, 6	; 6
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     632:	03 c0       	rjmp	.+6      	; 0x63a <matrix_scan+0xf4>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	02 c0       	rjmp	.+4      	; 0x63e <matrix_scan+0xf8>
     63a:	80 e2       	ldi	r24, 0x20	; 32
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	28 2b       	or	r18, r24
     640:	39 2b       	or	r19, r25
     642:	35 9b       	sbis	0x06, 5	; 6
     644:	03 c0       	rjmp	.+6      	; 0x64c <matrix_scan+0x106>
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	02 c0       	rjmp	.+4      	; 0x650 <matrix_scan+0x10a>
     64c:	80 e4       	ldi	r24, 0x40	; 64
     64e:	90 e0       	ldi	r25, 0x00	; 0
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     650:	28 2b       	or	r18, r24
     652:	39 2b       	or	r19, r25
     654:	34 9b       	sbis	0x06, 4	; 6
     656:	03 c0       	rjmp	.+6      	; 0x65e <matrix_scan+0x118>
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	02 c0       	rjmp	.+4      	; 0x662 <matrix_scan+0x11c>
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     65e:	60 e8       	ldi	r22, 0x80	; 128
     660:	70 e0       	ldi	r23, 0x00	; 0

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     662:	26 2b       	or	r18, r22
     664:	37 2b       	or	r19, r23
     666:	33 9b       	sbis	0x06, 3	; 6
     668:	03 c0       	rjmp	.+6      	; 0x670 <matrix_scan+0x12a>
     66a:	40 e0       	ldi	r20, 0x00	; 0
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	02 c0       	rjmp	.+4      	; 0x674 <matrix_scan+0x12e>
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	51 e0       	ldi	r21, 0x01	; 1
     674:	24 2b       	or	r18, r20
     676:	35 2b       	or	r19, r21
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     678:	32 9b       	sbis	0x06, 2	; 6
     67a:	03 c0       	rjmp	.+6      	; 0x682 <matrix_scan+0x13c>
     67c:	80 e0       	ldi	r24, 0x00	; 0
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	02 c0       	rjmp	.+4      	; 0x686 <matrix_scan+0x140>
     682:	80 e0       	ldi	r24, 0x00	; 0
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     684:	92 e0       	ldi	r25, 0x02	; 2
     686:	28 2b       	or	r18, r24
     688:	39 2b       	or	r19, r25
     68a:	31 9b       	sbis	0x06, 1	; 6
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     68c:	03 c0       	rjmp	.+6      	; 0x694 <matrix_scan+0x14e>
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	02 c0       	rjmp	.+4      	; 0x698 <matrix_scan+0x152>
	  return HID_PARSE_NoUnfilteredReportItems;
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	74 e0       	ldi	r23, 0x04	; 4

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     698:	26 2b       	or	r18, r22
     69a:	37 2b       	or	r19, r23
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     69c:	30 9b       	sbis	0x06, 0	; 6
     69e:	03 c0       	rjmp	.+6      	; 0x6a6 <matrix_scan+0x160>
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <matrix_scan+0x164>
     6a6:	40 e0       	ldi	r20, 0x00	; 0

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6a8:	58 e0       	ldi	r21, 0x08	; 8
     6aa:	24 2b       	or	r18, r20
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6ac:	35 2b       	or	r19, r21
     6ae:	61 9b       	sbis	0x0c, 1	; 12
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <matrix_scan+0x172>
     6b2:	80 e0       	ldi	r24, 0x00	; 0
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <matrix_scan+0x176>
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e1       	ldi	r25, 0x10	; 16

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6bc:	28 2b       	or	r18, r24
     6be:	39 2b       	or	r19, r25
     6c0:	60 9b       	sbis	0x0c, 0	; 12
     6c2:	03 c0       	rjmp	.+6      	; 0x6ca <matrix_scan+0x184>
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <matrix_scan+0x188>
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e2       	ldi	r25, 0x20	; 32
     6ce:	28 2b       	or	r18, r24
     6d0:	39 2b       	or	r19, r25
     6d2:	89 b1       	in	r24, 0x09	; 9
     6d4:	99 27       	eor	r25, r25
     6d6:	87 fd       	sbrc	r24, 7
     6d8:	90 95       	com	r25
     6da:	80 95       	com	r24
     6dc:	90 95       	com	r25
     6de:	88 27       	eor	r24, r24
     6e0:	99 0f       	add	r25, r25
     6e2:	88 1f       	adc	r24, r24
     6e4:	99 27       	eor	r25, r25
     6e6:	90 e4       	ldi	r25, 0x40	; 64
     6e8:	89 9f       	mul	r24, r25
     6ea:	90 2d       	mov	r25, r0
     6ec:	88 27       	eor	r24, r24
     6ee:	11 24       	eor	r1, r1
           (PINC&(1<<3) ? 0 : (1<<8)) |
           (PINC&(1<<2) ? 0 : (1<<9)) |
           (PINC&(1<<1) ? 0 : (1<<10)) |
           (PINC&(1<<0) ? 0 : (1<<11)) |
           (PINE&(1<<1) ? 0 : (1<<12)) |
           (PINE&(1<<0) ? 0 : (1<<13)) |
     6f0:	28 2b       	or	r18, r24
     6f2:	39 2b       	or	r19, r25
           (PIND&(1<<7) ? 0 : (1<<14)) |
           (PIND&(1<<5) ? 0 : (1<<15));
     6f4:	4d 9b       	sbis	0x09, 5	; 9
     6f6:	03 c0       	rjmp	.+6      	; 0x6fe <matrix_scan+0x1b8>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <matrix_scan+0x1bc>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e8       	ldi	r25, 0x80	; 128
           (PINC&(1<<2) ? 0 : (1<<9)) |
           (PINC&(1<<1) ? 0 : (1<<10)) |
           (PINC&(1<<0) ? 0 : (1<<11)) |
           (PINE&(1<<1) ? 0 : (1<<12)) |
           (PINE&(1<<0) ? 0 : (1<<13)) |
           (PIND&(1<<7) ? 0 : (1<<14)) |
     702:	28 2b       	or	r18, r24
     704:	39 2b       	or	r19, r25
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
     706:	d7 01       	movw	r26, r14
     708:	8d 91       	ld	r24, X+
     70a:	9c 91       	ld	r25, X
     70c:	11 97       	sbiw	r26, 0x01	; 1
     70e:	82 17       	cp	r24, r18
     710:	93 07       	cpc	r25, r19
     712:	21 f0       	breq	.+8      	; 0x71c <matrix_scan+0x1d6>
            matrix_debouncing[i] = cols;
     714:	2d 93       	st	X+, r18
     716:	3c 93       	st	X, r19
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
     718:	10 93 00 01 	sts	0x0100, r17
        }
        unselect_rows();
     71c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     720:	cf 5f       	subi	r28, 0xFF	; 255
     722:	b2 e0       	ldi	r27, 0x02	; 2
     724:	eb 0e       	add	r14, r27
     726:	f1 1c       	adc	r15, r1
     728:	c8 30       	cpi	r28, 0x08	; 8
     72a:	09 f0       	breq	.+2      	; 0x72e <matrix_scan+0x1e8>
     72c:	1d cf       	rjmp	.-454    	; 0x568 <matrix_scan+0x22>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
     72e:	80 91 00 01 	lds	r24, 0x0100
     732:	88 23       	and	r24, r24
     734:	c9 f0       	breq	.+50     	; 0x768 <matrix_scan+0x222>
        if (--debouncing) {
     736:	81 50       	subi	r24, 0x01	; 1
     738:	80 93 00 01 	sts	0x0100, r24
     73c:	88 23       	and	r24, r24
     73e:	39 f0       	breq	.+14     	; 0x74e <matrix_scan+0x208>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     740:	ef e9       	ldi	r30, 0x9F	; 159
     742:	ff e0       	ldi	r31, 0x0F	; 15
     744:	31 97       	sbiw	r30, 0x01	; 1
     746:	f1 f7       	brne	.-4      	; 0x744 <matrix_scan+0x1fe>
     748:	00 c0       	rjmp	.+0      	; 0x74a <matrix_scan+0x204>
     74a:	00 00       	nop
     74c:	0d c0       	rjmp	.+26     	; 0x768 <matrix_scan+0x222>
     74e:	e0 e1       	ldi	r30, 0x10	; 16
     750:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
     752:	d6 01       	movw	r26, r12
     754:	8d 91       	ld	r24, X+
     756:	9d 91       	ld	r25, X+
     758:	6d 01       	movw	r12, r26
     75a:	81 93       	st	Z+, r24
     75c:	91 93       	st	Z+, r25

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     75e:	b0 e3       	ldi	r27, 0x30	; 48
     760:	cb 16       	cp	r12, r27
     762:	b1 e0       	ldi	r27, 0x01	; 1
     764:	db 06       	cpc	r13, r27
     766:	a9 f7       	brne	.-22     	; 0x752 <matrix_scan+0x20c>
            }
        }
    }

    return 1;
}
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	df 90       	pop	r13
     776:	cf 90       	pop	r12
     778:	bf 90       	pop	r11
     77a:	af 90       	pop	r10
     77c:	08 95       	ret

0000077e <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     77e:	e8 2f       	mov	r30, r24
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	ee 0f       	add	r30, r30
     784:	ff 1f       	adc	r31, r31
     786:	e0 5f       	subi	r30, 0xF0	; 240
     788:	fe 4f       	sbci	r31, 0xFE	; 254
}
     78a:	80 81       	ld	r24, Z
     78c:	91 81       	ldd	r25, Z+1	; 0x01
     78e:	08 95       	ret

00000790 <matrix_print>:

void matrix_print(void)
{
     790:	08 95       	ret

00000792 <led_set>:
 * 
 */

 void led_set(uint8_t usb_led)
{
    DDR_CAPSLCK |= (1<<BIT_CAPSLCK);
     792:	24 9a       	sbi	0x04, 4	; 4

    if (usb_led & (1<<USB_LED_CAPS_LOCK))
     794:	81 ff       	sbrs	r24, 1
     796:	02 c0       	rjmp	.+4      	; 0x79c <led_set+0xa>
    {
        
        PORT_CAPSLCK &= ~(1<<BIT_CAPSLCK);
     798:	2c 98       	cbi	0x05, 4	; 5
     79a:	08 95       	ret
    }
    else
    {
        PORT_CAPSLCK |= (1<<BIT_CAPSLCK);
     79c:	2c 9a       	sbi	0x05, 4	; 5
     79e:	08 95       	ret

000007a0 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     7a0:	80 91 39 01 	lds	r24, 0x0139
     7a4:	08 95       	ret

000007a6 <send_mouse>:

    keyboard_report_sent = *report;
}

static void send_mouse(report_mouse_t *report)
{
     7a6:	08 95       	ret

000007a8 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <send_consumer+0x6>
     7ae:	1f 92       	push	r1
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     7b4:	20 91 b8 01 	lds	r18, 0x01B8
     7b8:	24 30       	cpi	r18, 0x04	; 4
     7ba:	29 f5       	brne	.+74     	; 0x806 <send_consumer+0x5e>
        return;

    report_extra_t r = {
     7bc:	23 e0       	ldi	r18, 0x03	; 3
     7be:	29 83       	std	Y+1, r18	; 0x01
     7c0:	9b 83       	std	Y+3, r25	; 0x03
     7c2:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	80 93 e9 00 	sts	0x00E9, r24
     7ca:	8f ef       	ldi	r24, 0xFF	; 255
     7cc:	06 c0       	rjmp	.+12     	; 0x7da <send_consumer+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ce:	95 ed       	ldi	r25, 0xD5	; 213
     7d0:	9a 95       	dec	r25
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <send_consumer+0x28>
     7d4:	00 00       	nop
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     7d6:	88 23       	and	r24, r24
     7d8:	29 f0       	breq	.+10     	; 0x7e4 <send_consumer+0x3c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     7da:	90 91 e8 00 	lds	r25, 0x00E8
     7de:	81 50       	subi	r24, 0x01	; 1
     7e0:	95 ff       	sbrs	r25, 5
     7e2:	f5 cf       	rjmp	.-22     	; 0x7ce <send_consumer+0x26>
     7e4:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
     7e8:	85 ff       	sbrs	r24, 5
     7ea:	0d c0       	rjmp	.+26     	; 0x806 <send_consumer+0x5e>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	63 e0       	ldi	r22, 0x03	; 3
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	ce 01       	movw	r24, r28
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	0e 94 ed 05 	call	0xbda	; 0xbda <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7fc:	80 91 e8 00 	lds	r24, 0x00E8
     800:	8e 77       	andi	r24, 0x7E	; 126
     802:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	00 d0       	rcall	.+0      	; 0x818 <send_system+0x6>
     818:	1f 92       	push	r1
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     81e:	20 91 b8 01 	lds	r18, 0x01B8
     822:	24 30       	cpi	r18, 0x04	; 4
     824:	29 f5       	brne	.+74     	; 0x870 <send_system+0x5e>
        return;

    report_extra_t r = {
     826:	22 e0       	ldi	r18, 0x02	; 2
     828:	29 83       	std	Y+1, r18	; 0x01
     82a:	9b 83       	std	Y+3, r25	; 0x03
     82c:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	80 93 e9 00 	sts	0x00E9, r24
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	06 c0       	rjmp	.+12     	; 0x844 <send_system+0x32>
     838:	95 ed       	ldi	r25, 0xD5	; 213
     83a:	9a 95       	dec	r25
     83c:	f1 f7       	brne	.-4      	; 0x83a <send_system+0x28>
     83e:	00 00       	nop
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     840:	88 23       	and	r24, r24
     842:	29 f0       	breq	.+10     	; 0x84e <send_system+0x3c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     844:	90 91 e8 00 	lds	r25, 0x00E8
     848:	81 50       	subi	r24, 0x01	; 1
     84a:	95 ff       	sbrs	r25, 5
     84c:	f5 cf       	rjmp	.-22     	; 0x838 <send_system+0x26>
     84e:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
     852:	85 ff       	sbrs	r24, 5
     854:	0d c0       	rjmp	.+26     	; 0x870 <send_system+0x5e>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     856:	40 e0       	ldi	r20, 0x00	; 0
     858:	50 e0       	ldi	r21, 0x00	; 0
     85a:	63 e0       	ldi	r22, 0x03	; 3
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	0e 94 ed 05 	call	0xbda	; 0xbda <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     866:	80 91 e8 00 	lds	r24, 0x00E8
     86a:	8e 77       	andi	r24, 0x7E	; 126
     86c:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	7c 01       	movw	r14, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     882:	80 91 b8 01 	lds	r24, 0x01B8
     886:	84 30       	cpi	r24, 0x04	; 4
     888:	41 f5       	brne	.+80     	; 0x8da <send_keyboard+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	80 93 e9 00 	sts	0x00E9, r24
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	06 c0       	rjmp	.+12     	; 0x8a0 <send_keyboard+0x24>
     894:	95 ed       	ldi	r25, 0xD5	; 213
     896:	9a 95       	dec	r25
     898:	f1 f7       	brne	.-4      	; 0x896 <send_keyboard+0x1a>
     89a:	00 00       	nop
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     89c:	88 23       	and	r24, r24
     89e:	29 f0       	breq	.+10     	; 0x8aa <send_keyboard+0x2e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     8a0:	90 91 e8 00 	lds	r25, 0x00E8
     8a4:	81 50       	subi	r24, 0x01	; 1
     8a6:	95 ff       	sbrs	r25, 5
     8a8:	f5 cf       	rjmp	.-22     	; 0x894 <send_keyboard+0x18>
     8aa:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
     8ae:	85 ff       	sbrs	r24, 5
     8b0:	14 c0       	rjmp	.+40     	; 0x8da <send_keyboard+0x5e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	68 e0       	ldi	r22, 0x08	; 8
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	c7 01       	movw	r24, r14
     8bc:	0e 94 ed 05 	call	0xbda	; 0xbda <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8c0:	80 91 e8 00 	lds	r24, 0x00E8
     8c4:	8e 77       	andi	r24, 0x7E	; 126
     8c6:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
     8ca:	88 e0       	ldi	r24, 0x08	; 8
     8cc:	f7 01       	movw	r30, r14
     8ce:	a1 e3       	ldi	r26, 0x31	; 49
     8d0:	b1 e0       	ldi	r27, 0x01	; 1
     8d2:	01 90       	ld	r0, Z+
     8d4:	0d 92       	st	X+, r0
     8d6:	8a 95       	dec	r24
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <send_keyboard+0x56>
}
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	08 95       	ret

000008e0 <EVENT_USB_Device_Connect>:
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    /* For battery powered device */
    if (!USB_IsInitialized) {
     8e0:	80 91 b7 01 	lds	r24, 0x01B7
     8e4:	81 11       	cpse	r24, r1
     8e6:	09 c0       	rjmp	.+18     	; 0x8fa <EVENT_USB_Device_Connect+0x1a>
        USB_Disable();
     8e8:	0e 94 85 07 	call	0xf0a	; 0xf0a <USB_Disable>
        USB_Init();
     8ec:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     8f0:	80 91 e2 00 	lds	r24, 0x00E2
     8f4:	84 60       	ori	r24, 0x04	; 4
     8f6:	80 93 e2 00 	sts	0x00E2, r24
     8fa:	08 95       	ret

000008fc <EVENT_USB_Device_Disconnect>:

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    /* For battery powered device */
    USB_IsInitialized = false;
     8fc:	10 92 b7 01 	sts	0x01B7, r1
     900:	08 95       	ret

00000902 <EVENT_USB_Device_Reset>:
    }
*/
}

void EVENT_USB_Device_Reset(void)
{
     902:	08 95       	ret

00000904 <EVENT_USB_Device_Suspend>:

void EVENT_USB_Device_Suspend()
{
    print("[S]");
#ifdef SLEEP_LED_ENABLE
    sleep_led_enable();
     904:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <sleep_led_enable>

00000908 <EVENT_USB_Device_WakeUp>:
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    suspend_wakeup_init();
     908:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <suspend_wakeup_init>

#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
     90c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <sleep_led_disable>
    // NOTE: converters may not accept this
    led_set(host_keyboard_leds());
     910:	0e 94 95 0a 	call	0x152a	; 0x152a <host_keyboard_leds>
     914:	0c 94 c9 03 	jmp	0x792	; 0x792 <led_set>

00000918 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     918:	42 e0       	ldi	r20, 0x02	; 2
     91a:	61 ec       	ldi	r22, 0xC1	; 193
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <Endpoint_ConfigureEndpoint_Prv>

00000922 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
     922:	80 91 ba 01 	lds	r24, 0x01BA
     926:	83 30       	cpi	r24, 0x03	; 3
     928:	09 f4       	brne	.+2      	; 0x92c <EVENT_USB_Device_ControlRequest+0xa>
     92a:	54 c0       	rjmp	.+168    	; 0x9d4 <EVENT_USB_Device_ControlRequest+0xb2>
     92c:	30 f4       	brcc	.+12     	; 0x93a <EVENT_USB_Device_ControlRequest+0x18>
     92e:	81 30       	cpi	r24, 0x01	; 1
     930:	71 f0       	breq	.+28     	; 0x94e <EVENT_USB_Device_ControlRequest+0x2c>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	09 f0       	breq	.+2      	; 0x938 <EVENT_USB_Device_ControlRequest+0x16>
     936:	a5 c0       	rjmp	.+330    	; 0xa82 <EVENT_USB_Device_ControlRequest+0x160>
     938:	8c c0       	rjmp	.+280    	; 0xa52 <EVENT_USB_Device_ControlRequest+0x130>
     93a:	8a 30       	cpi	r24, 0x0A	; 10
     93c:	09 f4       	brne	.+2      	; 0x940 <EVENT_USB_Device_ControlRequest+0x1e>
     93e:	79 c0       	rjmp	.+242    	; 0xa32 <EVENT_USB_Device_ControlRequest+0x110>
     940:	8b 30       	cpi	r24, 0x0B	; 11
     942:	09 f4       	brne	.+2      	; 0x946 <EVENT_USB_Device_ControlRequest+0x24>
     944:	5f c0       	rjmp	.+190    	; 0xa04 <EVENT_USB_Device_ControlRequest+0xe2>
     946:	89 30       	cpi	r24, 0x09	; 9
     948:	09 f0       	breq	.+2      	; 0x94c <EVENT_USB_Device_ControlRequest+0x2a>
     94a:	9b c0       	rjmp	.+310    	; 0xa82 <EVENT_USB_Device_ControlRequest+0x160>
     94c:	20 c0       	rjmp	.+64     	; 0x98e <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     94e:	80 91 b9 01 	lds	r24, 0x01B9
     952:	81 3a       	cpi	r24, 0xA1	; 161
     954:	09 f0       	breq	.+2      	; 0x958 <EVENT_USB_Device_ControlRequest+0x36>
     956:	95 c0       	rjmp	.+298    	; 0xa82 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     958:	80 91 e8 00 	lds	r24, 0x00E8
     95c:	87 7f       	andi	r24, 0xF7	; 247
     95e:	80 93 e8 00 	sts	0x00E8, r24
     962:	80 91 bd 01 	lds	r24, 0x01BD
     966:	90 91 be 01 	lds	r25, 0x01BE
     96a:	89 2b       	or	r24, r25
     96c:	21 f0       	breq	.+8      	; 0x976 <EVENT_USB_Device_ControlRequest+0x54>
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	03 c0       	rjmp	.+6      	; 0x97c <EVENT_USB_Device_ControlRequest+0x5a>
     976:	68 e0       	ldi	r22, 0x08	; 8
     978:	81 e3       	ldi	r24, 0x31	; 49
     97a:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	0e 94 40 06 	call	0xc80	; 0xc80 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     982:	80 91 e8 00 	lds	r24, 0x00E8
     986:	8b 77       	andi	r24, 0x7B	; 123
     988:	80 93 e8 00 	sts	0x00E8, r24
     98c:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     98e:	80 91 b9 01 	lds	r24, 0x01B9
     992:	81 32       	cpi	r24, 0x21	; 33
     994:	09 f0       	breq	.+2      	; 0x998 <EVENT_USB_Device_ControlRequest+0x76>
     996:	75 c0       	rjmp	.+234    	; 0xa82 <EVENT_USB_Device_ControlRequest+0x160>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
     998:	80 91 bd 01 	lds	r24, 0x01BD
     99c:	90 91 be 01 	lds	r25, 0x01BE
     9a0:	89 2b       	or	r24, r25
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <EVENT_USB_Device_ControlRequest+0x84>
     9a4:	6e c0       	rjmp	.+220    	; 0xa82 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9a6:	80 91 e8 00 	lds	r24, 0x00E8
     9aa:	87 7f       	andi	r24, 0xF7	; 247
     9ac:	80 93 e8 00 	sts	0x00E8, r24
     9b0:	05 c0       	rjmp	.+10     	; 0x9bc <EVENT_USB_Device_ControlRequest+0x9a>
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
     9b2:	80 91 b8 01 	lds	r24, 0x01B8
     9b6:	88 23       	and	r24, r24
     9b8:	09 f4       	brne	.+2      	; 0x9bc <EVENT_USB_Device_ControlRequest+0x9a>
     9ba:	63 c0       	rjmp	.+198    	; 0xa82 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9bc:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
     9c0:	82 ff       	sbrs	r24, 2
     9c2:	f7 cf       	rjmp	.-18     	; 0x9b2 <EVENT_USB_Device_ControlRequest+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9c4:	80 91 f1 00 	lds	r24, 0x00F1
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
     9c8:	80 93 39 01 	sts	0x0139, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9cc:	80 91 e8 00 	lds	r24, 0x00E8
     9d0:	8b 77       	andi	r24, 0x7B	; 123
     9d2:	53 c0       	rjmp	.+166    	; 0xa7a <EVENT_USB_Device_ControlRequest+0x158>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     9d4:	80 91 b9 01 	lds	r24, 0x01B9
     9d8:	81 3a       	cpi	r24, 0xA1	; 161
     9da:	09 f0       	breq	.+2      	; 0x9de <EVENT_USB_Device_ControlRequest+0xbc>
     9dc:	52 c0       	rjmp	.+164    	; 0xa82 <EVENT_USB_Device_ControlRequest+0x160>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
     9de:	80 91 bd 01 	lds	r24, 0x01BD
     9e2:	90 91 be 01 	lds	r25, 0x01BE
     9e6:	89 2b       	or	r24, r25
     9e8:	09 f0       	breq	.+2      	; 0x9ec <EVENT_USB_Device_ControlRequest+0xca>
     9ea:	4b c0       	rjmp	.+150    	; 0xa82 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9ec:	80 91 e8 00 	lds	r24, 0x00E8
     9f0:	87 7f       	andi	r24, 0xF7	; 247
     9f2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9f6:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
     9fa:	80 ff       	sbrs	r24, 0
     9fc:	fc cf       	rjmp	.-8      	; 0x9f6 <EVENT_USB_Device_ControlRequest+0xd4>
                    Endpoint_Write_8(keyboard_protocol);
     9fe:	80 91 0b 01 	lds	r24, 0x010B
     a02:	36 c0       	rjmp	.+108    	; 0xa70 <EVENT_USB_Device_ControlRequest+0x14e>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     a04:	80 91 b9 01 	lds	r24, 0x01B9
     a08:	81 32       	cpi	r24, 0x21	; 33
     a0a:	d9 f5       	brne	.+118    	; 0xa82 <EVENT_USB_Device_ControlRequest+0x160>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
     a0c:	80 91 bd 01 	lds	r24, 0x01BD
     a10:	90 91 be 01 	lds	r25, 0x01BE
     a14:	89 2b       	or	r24, r25
     a16:	a9 f5       	brne	.+106    	; 0xa82 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a18:	80 91 e8 00 	lds	r24, 0x00E8
     a1c:	87 7f       	andi	r24, 0xF7	; 247
     a1e:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
     a22:	0e 94 32 07 	call	0xe64	; 0xe64 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
     a26:	80 91 bb 01 	lds	r24, 0x01BB
     a2a:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
     a2e:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     a32:	80 91 b9 01 	lds	r24, 0x01B9
     a36:	81 32       	cpi	r24, 0x21	; 33
     a38:	21 f5       	brne	.+72     	; 0xa82 <EVENT_USB_Device_ControlRequest+0x160>
     a3a:	80 91 e8 00 	lds	r24, 0x00E8
     a3e:	87 7f       	andi	r24, 0xF7	; 247
     a40:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
     a44:	0e 94 32 07 	call	0xe64	; 0xe64 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
     a48:	80 91 bc 01 	lds	r24, 0x01BC
     a4c:	80 93 30 01 	sts	0x0130, r24
     a50:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     a52:	80 91 b9 01 	lds	r24, 0x01B9
     a56:	81 3a       	cpi	r24, 0xA1	; 161
     a58:	a1 f4       	brne	.+40     	; 0xa82 <EVENT_USB_Device_ControlRequest+0x160>
     a5a:	80 91 e8 00 	lds	r24, 0x00E8
     a5e:	87 7f       	andi	r24, 0xF7	; 247
     a60:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a64:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
     a68:	80 ff       	sbrs	r24, 0
     a6a:	fc cf       	rjmp	.-8      	; 0xa64 <EVENT_USB_Device_ControlRequest+0x142>
                Endpoint_Write_8(keyboard_idle);
     a6c:	80 91 30 01 	lds	r24, 0x0130
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a70:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a74:	80 91 e8 00 	lds	r24, 0x00E8
     a78:	8e 77       	andi	r24, 0x7E	; 126
     a7a:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
     a7e:	0c 94 32 07 	jmp	0xe64	; 0xe64 <Endpoint_ClearStatusStage>
     a82:	08 95       	ret

00000a84 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     a84:	84 b7       	in	r24, 0x34	; 52
     a86:	87 7f       	andi	r24, 0xF7	; 247
     a88:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
     a8a:	88 e1       	ldi	r24, 0x18	; 24
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	80 93 60 00 	sts	0x0060, r24
     a94:	10 92 60 00 	sts	0x0060, r1
     a98:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	80 e8       	ldi	r24, 0x80	; 128
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	80 93 61 00 	sts	0x0061, r24
     aa6:	90 93 61 00 	sts	0x0061, r25
     aaa:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    keyboard_setup();
     aac:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
     ab0:	0e 94 85 07 	call	0xf0a	; 0xf0a <USB_Disable>

    USB_Init();
     ab4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <USB_Init>
     ab8:	80 91 e2 00 	lds	r24, 0x00E2
     abc:	84 60       	ori	r24, 0x04	; 4
     abe:	80 93 e2 00 	sts	0x00E2, r24
int main(void)
{
    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
     ac2:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
     ac4:	80 91 b8 01 	lds	r24, 0x01B8
     ac8:	84 30       	cpi	r24, 0x04	; 4
     aca:	e1 f7       	brne	.-8      	; 0xac4 <main+0x40>
#endif
    }
    print("USB configured.\n");

    /* init modules */
    keyboard_init();
     acc:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <keyboard_init>
    host_set_driver(&lufa_driver);
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 90 0a 	call	0x1520	; 0x1520 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
     ad8:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <sleep_led_init>
     adc:	0b c0       	rjmp	.+22     	; 0xaf4 <main+0x70>

    print("Keyboard start.\n");
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
            print("[s]");
            suspend_power_down();
     ade:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
     ae2:	80 91 b6 01 	lds	r24, 0x01B6
     ae6:	88 23       	and	r24, r24
     ae8:	29 f0       	breq	.+10     	; 0xaf4 <main+0x70>
     aea:	0e 94 90 16 	call	0x2d20	; 0x2d20 <suspend_wakeup_condition>
     aee:	81 11       	cpse	r24, r1
                    USB_Device_SendRemoteWakeup();
     af0:	0e 94 d7 05 	call	0xbae	; 0xbae <USB_Device_SendRemoteWakeup>
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
     af4:	80 91 b8 01 	lds	r24, 0x01B8
     af8:	85 30       	cpi	r24, 0x05	; 5
     afa:	89 f3       	breq	.-30     	; 0xade <main+0x5a>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
                    USB_Device_SendRemoteWakeup();
            }
        }

        keyboard_task();
     afc:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
     b00:	f9 cf       	rjmp	.-14     	; 0xaf4 <main+0x70>

00000b02 <CALLBACK_USB_GetDescriptor>:
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
     b02:	29 2f       	mov	r18, r25
     b04:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     b06:	23 30       	cpi	r18, 0x03	; 3
     b08:	31 05       	cpc	r19, r1
     b0a:	b1 f0       	breq	.+44     	; 0xb38 <CALLBACK_USB_GetDescriptor+0x36>
     b0c:	4c f4       	brge	.+18     	; 0xb20 <CALLBACK_USB_GetDescriptor+0x1e>
     b0e:	21 30       	cpi	r18, 0x01	; 1
     b10:	31 05       	cpc	r19, r1
     b12:	09 f4       	brne	.+2      	; 0xb16 <CALLBACK_USB_GetDescriptor+0x14>
     b14:	39 c0       	rjmp	.+114    	; 0xb88 <CALLBACK_USB_GetDescriptor+0x86>
     b16:	22 30       	cpi	r18, 0x02	; 2
     b18:	31 05       	cpc	r19, r1
     b1a:	09 f0       	breq	.+2      	; 0xb1e <CALLBACK_USB_GetDescriptor+0x1c>
     b1c:	3a c0       	rjmp	.+116    	; 0xb92 <CALLBACK_USB_GetDescriptor+0x90>
     b1e:	07 c0       	rjmp	.+14     	; 0xb2e <CALLBACK_USB_GetDescriptor+0x2c>
     b20:	21 32       	cpi	r18, 0x21	; 33
     b22:	31 05       	cpc	r19, r1
     b24:	39 f1       	breq	.+78     	; 0xb74 <CALLBACK_USB_GetDescriptor+0x72>
     b26:	22 32       	cpi	r18, 0x22	; 34
     b28:	31 05       	cpc	r19, r1
     b2a:	39 f1       	breq	.+78     	; 0xb7a <CALLBACK_USB_GetDescriptor+0x78>
     b2c:	32 c0       	rjmp	.+100    	; 0xb92 <CALLBACK_USB_GetDescriptor+0x90>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
     b2e:	e2 e2       	ldi	r30, 0x22	; 34
     b30:	f0 e0       	ldi	r31, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
     b32:	84 e6       	ldi	r24, 0x64	; 100
     b34:	92 e0       	ldi	r25, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
     b36:	36 c0       	rjmp	.+108    	; 0xba4 <CALLBACK_USB_GetDescriptor+0xa2>
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
     b38:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	91 05       	cpc	r25, r1
     b3e:	61 f0       	breq	.+24     	; 0xb58 <CALLBACK_USB_GetDescriptor+0x56>
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	91 05       	cpc	r25, r1
     b44:	81 f0       	breq	.+32     	; 0xb66 <CALLBACK_USB_GetDescriptor+0x64>
     b46:	89 2b       	or	r24, r25
     b48:	21 f5       	brne	.+72     	; 0xb92 <CALLBACK_USB_GetDescriptor+0x90>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
     b4a:	e0 e6       	ldi	r30, 0x60	; 96
     b4c:	f2 e0       	ldi	r31, 0x02	; 2
     b4e:	e4 91       	lpm	r30, Z
     b50:	f0 e0       	ldi	r31, 0x00	; 0
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
            {
                case 0x00:
                    Address = &LanguageString;
     b52:	80 e6       	ldi	r24, 0x60	; 96
     b54:	92 e0       	ldi	r25, 0x02	; 2
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
     b56:	26 c0       	rjmp	.+76     	; 0xba4 <CALLBACK_USB_GetDescriptor+0xa2>
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     b58:	e4 e4       	ldi	r30, 0x44	; 68
     b5a:	f2 e0       	ldi	r31, 0x02	; 2
     b5c:	e4 91       	lpm	r30, Z
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case 0x01:
                    Address = &ManufacturerString;
     b60:	84 e4       	ldi	r24, 0x44	; 68
     b62:	92 e0       	ldi	r25, 0x02	; 2
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
     b64:	1f c0       	rjmp	.+62     	; 0xba4 <CALLBACK_USB_GetDescriptor+0xa2>
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
     b66:	e0 e2       	ldi	r30, 0x20	; 32
     b68:	f2 e0       	ldi	r31, 0x02	; 2
     b6a:	e4 91       	lpm	r30, Z
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
     b6e:	80 e2       	ldi	r24, 0x20	; 32
     b70:	92 e0       	ldi	r25, 0x02	; 2
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
     b72:	18 c0       	rjmp	.+48     	; 0xba4 <CALLBACK_USB_GetDescriptor+0xa2>
     b74:	66 23       	and	r22, r22
     b76:	91 f0       	breq	.+36     	; 0xb9c <CALLBACK_USB_GetDescriptor+0x9a>
     b78:	0c c0       	rjmp	.+24     	; 0xb92 <CALLBACK_USB_GetDescriptor+0x90>
     b7a:	61 11       	cpse	r22, r1
     b7c:	0a c0       	rjmp	.+20     	; 0xb92 <CALLBACK_USB_GetDescriptor+0x90>
     b7e:	ef e3       	ldi	r30, 0x3F	; 63
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	88 e9       	ldi	r24, 0x98	; 152
     b84:	92 e0       	ldi	r25, 0x02	; 2
     b86:	0e c0       	rjmp	.+28     	; 0xba4 <CALLBACK_USB_GetDescriptor+0xa2>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
     b88:	e2 e1       	ldi	r30, 0x12	; 18
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
     b8c:	86 e8       	ldi	r24, 0x86	; 134
     b8e:	92 e0       	ldi	r25, 0x02	; 2
     b90:	09 c0       	rjmp	.+18     	; 0xba4 <CALLBACK_USB_GetDescriptor+0xa2>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
     b92:	e0 e0       	ldi	r30, 0x00	; 0
     b94:	f0 e0       	ldi	r31, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	04 c0       	rjmp	.+8      	; 0xba4 <CALLBACK_USB_GetDescriptor+0xa2>
     b9c:	e9 e0       	ldi	r30, 0x09	; 9
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	86 e7       	ldi	r24, 0x76	; 118
     ba2:	92 e0       	ldi	r25, 0x02	; 2
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
     ba4:	da 01       	movw	r26, r20
     ba6:	8d 93       	st	X+, r24
     ba8:	9c 93       	st	X, r25
    return Size;
}
     baa:	cf 01       	movw	r24, r30
     bac:	08 95       	ret

00000bae <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     bae:	84 e1       	ldi	r24, 0x14	; 20
     bb0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     bb2:	86 e1       	ldi	r24, 0x16	; 22
     bb4:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     bb6:	09 b4       	in	r0, 0x29	; 41
     bb8:	00 fe       	sbrs	r0, 0
     bba:	fd cf       	rjmp	.-6      	; 0xbb6 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     bbc:	80 91 d8 00 	lds	r24, 0x00D8
     bc0:	8f 7d       	andi	r24, 0xDF	; 223
     bc2:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
     bc6:	80 91 e0 00 	lds	r24, 0x00E0
     bca:	82 60       	ori	r24, 0x02	; 2
     bcc:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
     bd0:	80 91 e0 00 	lds	r24, 0x00E0
     bd4:	81 fd       	sbrc	r24, 1
     bd6:	fc cf       	rjmp	.-8      	; 0xbd0 <USB_Device_SendRemoteWakeup+0x22>
}
     bd8:	08 95       	ret

00000bda <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     bda:	8f 92       	push	r8
     bdc:	9f 92       	push	r9
     bde:	af 92       	push	r10
     be0:	bf 92       	push	r11
     be2:	cf 92       	push	r12
     be4:	df 92       	push	r13
     be6:	ef 92       	push	r14
     be8:	ff 92       	push	r15
     bea:	cf 93       	push	r28
     bec:	5c 01       	movw	r10, r24
     bee:	6b 01       	movw	r12, r22
     bf0:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     bf2:	0e 94 53 07 	call	0xea6	; 0xea6 <Endpoint_WaitUntilReady>
     bf6:	c8 2f       	mov	r28, r24
     bf8:	81 11       	cpse	r24, r1
     bfa:	37 c0       	rjmp	.+110    	; 0xc6a <Endpoint_Write_Stream_LE+0x90>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     bfc:	e1 14       	cp	r14, r1
     bfe:	f1 04       	cpc	r15, r1
     c00:	39 f0       	breq	.+14     	; 0xc10 <Endpoint_Write_Stream_LE+0x36>
	{
		Length -= *BytesProcessed;
     c02:	f7 01       	movw	r30, r14
     c04:	20 81       	ld	r18, Z
     c06:	31 81       	ldd	r19, Z+1	; 0x01
     c08:	c2 1a       	sub	r12, r18
     c0a:	d3 0a       	sbc	r13, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     c0c:	a2 0e       	add	r10, r18
     c0e:	b3 1e       	adc	r11, r19

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c10:	81 2c       	mov	r8, r1
     c12:	91 2c       	mov	r9, r1
     c14:	25 c0       	rjmp	.+74     	; 0xc60 <Endpoint_Write_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     c16:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     c1a:	85 fd       	sbrc	r24, 5
     c1c:	16 c0       	rjmp	.+44     	; 0xc4a <Endpoint_Write_Stream_LE+0x70>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c1e:	80 91 e8 00 	lds	r24, 0x00E8
     c22:	8e 77       	andi	r24, 0x7E	; 126
     c24:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     c28:	e1 14       	cp	r14, r1
     c2a:	f1 04       	cpc	r15, r1
     c2c:	49 f0       	breq	.+18     	; 0xc40 <Endpoint_Write_Stream_LE+0x66>
			{
				*BytesProcessed += BytesInTransfer;
     c2e:	f7 01       	movw	r30, r14
     c30:	80 81       	ld	r24, Z
     c32:	91 81       	ldd	r25, Z+1	; 0x01
     c34:	88 0d       	add	r24, r8
     c36:	99 1d       	adc	r25, r9
     c38:	91 83       	std	Z+1, r25	; 0x01
     c3a:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     c3c:	c5 e0       	ldi	r28, 0x05	; 5
     c3e:	15 c0       	rjmp	.+42     	; 0xc6a <Endpoint_Write_Stream_LE+0x90>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     c40:	0e 94 53 07 	call	0xea6	; 0xea6 <Endpoint_WaitUntilReady>
     c44:	88 23       	and	r24, r24
     c46:	61 f0       	breq	.+24     	; 0xc60 <Endpoint_Write_Stream_LE+0x86>
     c48:	0f c0       	rjmp	.+30     	; 0xc68 <Endpoint_Write_Stream_LE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     c4a:	f5 01       	movw	r30, r10
     c4c:	81 91       	ld	r24, Z+
     c4e:	5f 01       	movw	r10, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c50:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     c54:	f1 e0       	ldi	r31, 0x01	; 1
     c56:	cf 1a       	sub	r12, r31
     c58:	d1 08       	sbc	r13, r1
			BytesInTransfer++;
     c5a:	8f ef       	ldi	r24, 0xFF	; 255
     c5c:	88 1a       	sub	r8, r24
     c5e:	98 0a       	sbc	r9, r24
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     c60:	c1 14       	cp	r12, r1
     c62:	d1 04       	cpc	r13, r1
     c64:	c1 f6       	brne	.-80     	; 0xc16 <Endpoint_Write_Stream_LE+0x3c>
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <Endpoint_Write_Stream_LE+0x90>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     c68:	c8 2f       	mov	r28, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     c6a:	8c 2f       	mov	r24, r28
     c6c:	cf 91       	pop	r28
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	df 90       	pop	r13
     c74:	cf 90       	pop	r12
     c76:	bf 90       	pop	r11
     c78:	af 90       	pop	r10
     c7a:	9f 90       	pop	r9
     c7c:	8f 90       	pop	r8
     c7e:	08 95       	ret

00000c80 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     c80:	20 91 bf 01 	lds	r18, 0x01BF
     c84:	30 91 c0 01 	lds	r19, 0x01C0
     c88:	26 17       	cp	r18, r22
     c8a:	37 07       	cpc	r19, r23
     c8c:	48 f0       	brcs	.+18     	; 0xca0 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     c8e:	61 15       	cp	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	39 f4       	brne	.+14     	; 0xca2 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c94:	20 91 e8 00 	lds	r18, 0x00E8
     c98:	2e 77       	andi	r18, 0x7E	; 126
     c9a:	20 93 e8 00 	sts	0x00E8, r18
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     ca0:	b9 01       	movw	r22, r18
     ca2:	fc 01       	movw	r30, r24
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	2c c0       	rjmp	.+88     	; 0xd00 <Endpoint_Write_Control_Stream_LE+0x80>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ca8:	80 91 b8 01 	lds	r24, 0x01B8

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     cac:	88 23       	and	r24, r24
     cae:	f1 f1       	breq	.+124    	; 0xd2c <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     cb0:	85 30       	cpi	r24, 0x05	; 5
     cb2:	f1 f1       	breq	.+124    	; 0xd30 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cb4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     cb8:	83 fd       	sbrc	r24, 3
     cba:	3c c0       	rjmp	.+120    	; 0xd34 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cbc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     cc0:	82 fd       	sbrc	r24, 2
     cc2:	2e c0       	rjmp	.+92     	; 0xd20 <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     cc4:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     cc8:	80 ff       	sbrs	r24, 0
     cca:	1a c0       	rjmp	.+52     	; 0xd00 <Endpoint_Write_Control_Stream_LE+0x80>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     ccc:	80 91 f2 00 	lds	r24, 0x00F2
     cd0:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     cd4:	06 c0       	rjmp	.+12     	; 0xce2 <Endpoint_Write_Control_Stream_LE+0x62>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     cd6:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cd8:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     cdc:	61 50       	subi	r22, 0x01	; 1
     cde:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     ce0:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     ce2:	61 15       	cp	r22, r1
     ce4:	71 05       	cpc	r23, r1
     ce6:	19 f0       	breq	.+6      	; 0xcee <Endpoint_Write_Control_Stream_LE+0x6e>
     ce8:	88 30       	cpi	r24, 0x08	; 8
     cea:	91 05       	cpc	r25, r1
     cec:	a0 f3       	brcs	.-24     	; 0xcd6 <Endpoint_Write_Control_Stream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     cee:	21 e0       	ldi	r18, 0x01	; 1
     cf0:	08 97       	sbiw	r24, 0x08	; 8
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <Endpoint_Write_Control_Stream_LE+0x76>
     cf4:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cf6:	80 91 e8 00 	lds	r24, 0x00E8
     cfa:	8e 77       	andi	r24, 0x7E	; 126
     cfc:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     d00:	61 15       	cp	r22, r1
     d02:	71 05       	cpc	r23, r1
     d04:	89 f6       	brne	.-94     	; 0xca8 <Endpoint_Write_Control_Stream_LE+0x28>
     d06:	21 11       	cpse	r18, r1
     d08:	cf cf       	rjmp	.-98     	; 0xca8 <Endpoint_Write_Control_Stream_LE+0x28>
     d0a:	0a c0       	rjmp	.+20     	; 0xd20 <Endpoint_Write_Control_Stream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d0c:	80 91 b8 01 	lds	r24, 0x01B8

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d10:	88 23       	and	r24, r24
     d12:	61 f0       	breq	.+24     	; 0xd2c <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d14:	85 30       	cpi	r24, 0x05	; 5
     d16:	61 f0       	breq	.+24     	; 0xd30 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d18:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     d1c:	83 fd       	sbrc	r24, 3
     d1e:	0a c0       	rjmp	.+20     	; 0xd34 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d20:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     d24:	82 ff       	sbrs	r24, 2
     d26:	f2 cf       	rjmp	.-28     	; 0xd0c <Endpoint_Write_Control_Stream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     d34:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     d36:	08 95       	ret

00000d38 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     d38:	20 91 bf 01 	lds	r18, 0x01BF
     d3c:	30 91 c0 01 	lds	r19, 0x01C0
     d40:	26 17       	cp	r18, r22
     d42:	37 07       	cpc	r19, r23
     d44:	48 f0       	brcs	.+18     	; 0xd58 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     d46:	61 15       	cp	r22, r1
     d48:	71 05       	cpc	r23, r1
     d4a:	39 f4       	brne	.+14     	; 0xd5a <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d4c:	20 91 e8 00 	lds	r18, 0x00E8
     d50:	2e 77       	andi	r18, 0x7E	; 126
     d52:	20 93 e8 00 	sts	0x00E8, r18
     d56:	01 c0       	rjmp	.+2      	; 0xd5a <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     d58:	b9 01       	movw	r22, r18
     d5a:	fc 01       	movw	r30, r24
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	2f c0       	rjmp	.+94     	; 0xdbe <Endpoint_Write_Control_PStream_LE+0x86>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d60:	80 91 b8 01 	lds	r24, 0x01B8

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d64:	88 23       	and	r24, r24
     d66:	09 f4       	brne	.+2      	; 0xd6a <Endpoint_Write_Control_PStream_LE+0x32>
     d68:	40 c0       	rjmp	.+128    	; 0xdea <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d6a:	85 30       	cpi	r24, 0x05	; 5
     d6c:	09 f4       	brne	.+2      	; 0xd70 <Endpoint_Write_Control_PStream_LE+0x38>
     d6e:	3f c0       	rjmp	.+126    	; 0xdee <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d70:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     d74:	83 fd       	sbrc	r24, 3
     d76:	3d c0       	rjmp	.+122    	; 0xdf2 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d78:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     d7c:	82 fd       	sbrc	r24, 2
     d7e:	2f c0       	rjmp	.+94     	; 0xdde <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d80:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     d84:	80 ff       	sbrs	r24, 0
     d86:	1b c0       	rjmp	.+54     	; 0xdbe <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     d88:	80 91 f2 00 	lds	r24, 0x00F2
     d8c:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     d90:	07 c0       	rjmp	.+14     	; 0xda0 <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     d92:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d94:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     d98:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     d9a:	61 50       	subi	r22, 0x01	; 1
     d9c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     d9e:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     da0:	61 15       	cp	r22, r1
     da2:	71 05       	cpc	r23, r1
     da4:	19 f0       	breq	.+6      	; 0xdac <Endpoint_Write_Control_PStream_LE+0x74>
     da6:	88 30       	cpi	r24, 0x08	; 8
     da8:	91 05       	cpc	r25, r1
     daa:	98 f3       	brcs	.-26     	; 0xd92 <Endpoint_Write_Control_PStream_LE+0x5a>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     dac:	21 e0       	ldi	r18, 0x01	; 1
     dae:	08 97       	sbiw	r24, 0x08	; 8
     db0:	09 f0       	breq	.+2      	; 0xdb4 <Endpoint_Write_Control_PStream_LE+0x7c>
     db2:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     db4:	80 91 e8 00 	lds	r24, 0x00E8
     db8:	8e 77       	andi	r24, 0x7E	; 126
     dba:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     dbe:	61 15       	cp	r22, r1
     dc0:	71 05       	cpc	r23, r1
     dc2:	71 f6       	brne	.-100    	; 0xd60 <Endpoint_Write_Control_PStream_LE+0x28>
     dc4:	21 11       	cpse	r18, r1
     dc6:	cc cf       	rjmp	.-104    	; 0xd60 <Endpoint_Write_Control_PStream_LE+0x28>
     dc8:	0a c0       	rjmp	.+20     	; 0xdde <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     dca:	80 91 b8 01 	lds	r24, 0x01B8

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     dce:	88 23       	and	r24, r24
     dd0:	61 f0       	breq	.+24     	; 0xdea <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     dd2:	85 30       	cpi	r24, 0x05	; 5
     dd4:	61 f0       	breq	.+24     	; 0xdee <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     dd6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     dda:	83 fd       	sbrc	r24, 3
     ddc:	0a c0       	rjmp	.+20     	; 0xdf2 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     dde:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     de2:	82 ff       	sbrs	r24, 2
     de4:	f2 cf       	rjmp	.-28     	; 0xdca <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     dee:	83 e0       	ldi	r24, 0x03	; 3
     df0:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     df2:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     df4:	08 95       	ret

00000df6 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     df6:	98 2f       	mov	r25, r24
     df8:	2c c0       	rjmp	.+88     	; 0xe52 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dfa:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     dfe:	98 17       	cp	r25, r24
     e00:	39 f0       	breq	.+14     	; 0xe10 <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     e02:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     e06:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     e0a:	50 91 f0 00 	lds	r21, 0x00F0
     e0e:	03 c0       	rjmp	.+6      	; 0xe16 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     e10:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     e12:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     e14:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     e16:	21 fd       	sbrc	r18, 1
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     e1a:	9f 5f       	subi	r25, 0xFF	; 255
     e1c:	1a c0       	rjmp	.+52     	; 0xe52 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     e1e:	30 91 eb 00 	lds	r19, 0x00EB
     e22:	3e 7f       	andi	r19, 0xFE	; 254
     e24:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     e28:	30 91 ed 00 	lds	r19, 0x00ED
     e2c:	3d 7f       	andi	r19, 0xFD	; 253
     e2e:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     e32:	30 91 eb 00 	lds	r19, 0x00EB
     e36:	31 60       	ori	r19, 0x01	; 1
     e38:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     e3c:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     e40:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     e44:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     e48:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     e4c:	27 fd       	sbrc	r18, 7
     e4e:	e5 cf       	rjmp	.-54     	; 0xe1a <Endpoint_ConfigureEndpoint_Prv+0x24>
     e50:	07 c0       	rjmp	.+14     	; 0xe60 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     e52:	97 30       	cpi	r25, 0x07	; 7
     e54:	90 f2       	brcs	.-92     	; 0xdfa <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e56:	8f 70       	andi	r24, 0x0F	; 15
     e58:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     e60:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     e62:	08 95       	ret

00000e64 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     e64:	80 91 b9 01 	lds	r24, 0x01B9
     e68:	87 fd       	sbrc	r24, 7
     e6a:	05 c0       	rjmp	.+10     	; 0xe76 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e6c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     e70:	80 ff       	sbrs	r24, 0
     e72:	0e c0       	rjmp	.+28     	; 0xe90 <Endpoint_ClearStatusStage+0x2c>
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e76:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     e7a:	82 fd       	sbrc	r24, 2
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     e7e:	80 91 b8 01 	lds	r24, 0x01B8
     e82:	81 11       	cpse	r24, r1
     e84:	f8 cf       	rjmp	.-16     	; 0xe76 <Endpoint_ClearStatusStage+0x12>
     e86:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e88:	80 91 e8 00 	lds	r24, 0x00E8
     e8c:	8b 77       	andi	r24, 0x7B	; 123
     e8e:	08 c0       	rjmp	.+16     	; 0xea0 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     e90:	80 91 b8 01 	lds	r24, 0x01B8
     e94:	81 11       	cpse	r24, r1
     e96:	ea cf       	rjmp	.-44     	; 0xe6c <Endpoint_ClearStatusStage+0x8>
     e98:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e9a:	80 91 e8 00 	lds	r24, 0x00E8
     e9e:	8e 77       	andi	r24, 0x7E	; 126
     ea0:	80 93 e8 00 	sts	0x00E8, r24
     ea4:	08 95       	ret

00000ea6 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     ea6:	80 91 e4 00 	lds	r24, 0x00E4
     eaa:	90 91 e5 00 	lds	r25, 0x00E5
     eae:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     eb0:	20 91 ec 00 	lds	r18, 0x00EC
     eb4:	20 fd       	sbrc	r18, 0
     eb6:	1f c0       	rjmp	.+62     	; 0xef6 <Endpoint_WaitUntilReady+0x50>
     eb8:	23 c0       	rjmp	.+70     	; 0xf00 <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     eba:	20 91 b8 01 	lds	r18, 0x01B8

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ebe:	22 23       	and	r18, r18
     ec0:	91 f0       	breq	.+36     	; 0xee6 <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ec2:	25 30       	cpi	r18, 0x05	; 5
     ec4:	91 f0       	breq	.+36     	; 0xeea <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ec6:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     eca:	25 fd       	sbrc	r18, 5
     ecc:	10 c0       	rjmp	.+32     	; 0xeee <Endpoint_WaitUntilReady+0x48>
     ece:	20 91 e4 00 	lds	r18, 0x00E4
     ed2:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ed6:	28 17       	cp	r18, r24
     ed8:	39 07       	cpc	r19, r25
     eda:	51 f3       	breq	.-44     	; 0xeb0 <Endpoint_WaitUntilReady+0xa>
     edc:	41 50       	subi	r20, 0x01	; 1
     ede:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ee0:	39 f7       	brne	.-50     	; 0xeb0 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     ee2:	84 e0       	ldi	r24, 0x04	; 4
     ee4:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     eea:	83 e0       	ldi	r24, 0x03	; 3
     eec:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ef6:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     efa:	20 ff       	sbrs	r18, 0
     efc:	de cf       	rjmp	.-68     	; 0xeba <Endpoint_WaitUntilReady+0x14>
     efe:	f9 cf       	rjmp	.-14     	; 0xef2 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f00:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     f04:	22 ff       	sbrs	r18, 2
     f06:	d9 cf       	rjmp	.-78     	; 0xeba <Endpoint_WaitUntilReady+0x14>
     f08:	f4 cf       	rjmp	.-24     	; 0xef2 <Endpoint_WaitUntilReady+0x4c>

00000f0a <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     f0a:	0e 94 fb 07 	call	0xff6	; 0xff6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     f0e:	0e 94 03 08 	call	0x1006	; 0x1006 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     f12:	e0 ee       	ldi	r30, 0xE0	; 224
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	81 60       	ori	r24, 0x01	; 1
     f1a:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     f1c:	e8 ed       	ldi	r30, 0xD8	; 216
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8f 77       	andi	r24, 0x7F	; 127
     f24:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f26:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     f28:	a7 ed       	ldi	r26, 0xD7	; 215
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	8c 91       	ld	r24, X
     f2e:	8e 7f       	andi	r24, 0xFE	; 254
     f30:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     f32:	80 81       	ld	r24, Z
     f34:	8f 7e       	andi	r24, 0xEF	; 239
     f36:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     f38:	10 92 b7 01 	sts	0x01B7, r1
     f3c:	08 95       	ret

00000f3e <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
     f3e:	cf 92       	push	r12
     f40:	df 92       	push	r13
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     f46:	0e 94 fb 07 	call	0xff6	; 0xff6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     f4a:	0e 94 03 08 	call	0x1006	; 0x1006 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     f4e:	88 ed       	ldi	r24, 0xD8	; 216
     f50:	e8 2e       	mov	r14, r24
     f52:	f1 2c       	mov	r15, r1
     f54:	f7 01       	movw	r30, r14
     f56:	80 81       	ld	r24, Z
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     f5c:	80 81       	ld	r24, Z
     f5e:	80 68       	ori	r24, 0x80	; 128
     f60:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     f62:	80 81       	ld	r24, Z
     f64:	8f 7d       	andi	r24, 0xDF	; 223
     f66:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     f68:	e7 ed       	ldi	r30, 0xD7	; 215
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 68       	ori	r24, 0x80	; 128
     f70:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f72:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     f74:	10 92 b8 01 	sts	0x01B8, r1
	USB_Device_ConfigurationNumber  = 0;
     f78:	10 92 b4 01 	sts	0x01B4, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     f7c:	10 92 b6 01 	sts	0x01B6, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     f80:	10 92 b5 01 	sts	0x01B5, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     f84:	90 ee       	ldi	r25, 0xE0	; 224
     f86:	c9 2e       	mov	r12, r25
     f88:	d1 2c       	mov	r13, r1
     f8a:	f6 01       	movw	r30, r12
     f8c:	80 81       	ld	r24, Z
     f8e:	8b 7f       	andi	r24, 0xFB	; 251
     f90:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     f92:	f7 01       	movw	r30, r14
     f94:	80 81       	ld	r24, Z
     f96:	81 60       	ori	r24, 0x01	; 1
     f98:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     f9a:	42 e0       	ldi	r20, 0x02	; 2
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     fa4:	e1 ee       	ldi	r30, 0xE1	; 225
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	8e 7f       	andi	r24, 0xFE	; 254
     fac:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     fae:	e2 ee       	ldi	r30, 0xE2	; 226
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	81 60       	ori	r24, 0x01	; 1
     fb6:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     fb8:	80 81       	ld	r24, Z
     fba:	88 60       	ori	r24, 0x08	; 8
     fbc:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     fbe:	f6 01       	movw	r30, r12
     fc0:	80 81       	ld	r24, Z
     fc2:	8e 7f       	andi	r24, 0xFE	; 254
     fc4:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     fc6:	f7 01       	movw	r30, r14
     fc8:	80 81       	ld	r24, Z
     fca:	80 61       	ori	r24, 0x10	; 16
     fcc:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	df 90       	pop	r13
     fd4:	cf 90       	pop	r12
     fd6:	08 95       	ret

00000fd8 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     fd8:	e8 ed       	ldi	r30, 0xD8	; 216
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8f 7e       	andi	r24, 0xEF	; 239
     fe0:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     fe2:	e7 ed       	ldi	r30, 0xD7	; 215
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	81 60       	ori	r24, 0x01	; 1
     fea:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	80 93 b7 01 	sts	0x01B7, r24

	USB_ResetInterface();
     ff2:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <USB_ResetInterface>

00000ff6 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ff6:	e8 ed       	ldi	r30, 0xD8	; 216
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	8c 7f       	andi	r24, 0xFC	; 252
     ffe:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1000:	10 92 e2 00 	sts	0x00E2, r1
    1004:	08 95       	ret

00001006 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1006:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    100a:	10 92 e1 00 	sts	0x00E1, r1
    100e:	08 95       	ret

00001010 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	0b b6       	in	r0, 0x3b	; 59
    101c:	0f 92       	push	r0
    101e:	2f 93       	push	r18
    1020:	3f 93       	push	r19
    1022:	4f 93       	push	r20
    1024:	5f 93       	push	r21
    1026:	6f 93       	push	r22
    1028:	7f 93       	push	r23
    102a:	8f 93       	push	r24
    102c:	9f 93       	push	r25
    102e:	af 93       	push	r26
    1030:	bf 93       	push	r27
    1032:	ef 93       	push	r30
    1034:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1036:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    103a:	82 ff       	sbrs	r24, 2
    103c:	0b c0       	rjmp	.+22     	; 0x1054 <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    103e:	80 91 e2 00 	lds	r24, 0x00E2
    1042:	82 ff       	sbrs	r24, 2
    1044:	07 c0       	rjmp	.+14     	; 0x1054 <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1046:	80 91 e1 00 	lds	r24, 0x00E1
    104a:	8b 7f       	andi	r24, 0xFB	; 251
    104c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1050:	0e 94 8f 0a 	call	0x151e	; 0x151e <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1054:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1058:	80 ff       	sbrs	r24, 0
    105a:	1f c0       	rjmp	.+62     	; 0x109a <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    105c:	80 91 d8 00 	lds	r24, 0x00D8
    1060:	80 ff       	sbrs	r24, 0
    1062:	1b c0       	rjmp	.+54     	; 0x109a <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1064:	80 91 da 00 	lds	r24, 0x00DA
    1068:	8e 7f       	andi	r24, 0xFE	; 254
    106a:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    106e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1072:	80 ff       	sbrs	r24, 0
    1074:	0d c0       	rjmp	.+26     	; 0x1090 <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1076:	84 e1       	ldi	r24, 0x14	; 20
    1078:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    107a:	86 e1       	ldi	r24, 0x16	; 22
    107c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    107e:	09 b4       	in	r0, 0x29	; 41
    1080:	00 fe       	sbrs	r0, 0
    1082:	fd cf       	rjmp	.-6      	; 0x107e <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	80 93 b8 01 	sts	0x01B8, r24
			EVENT_USB_Device_Connect();
    108a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <EVENT_USB_Device_Connect>
    108e:	05 c0       	rjmp	.+10     	; 0x109a <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1090:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1092:	10 92 b8 01 	sts	0x01B8, r1
			EVENT_USB_Device_Disconnect();
    1096:	0e 94 7e 04 	call	0x8fc	; 0x8fc <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    109a:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    109e:	80 ff       	sbrs	r24, 0
    10a0:	19 c0       	rjmp	.+50     	; 0x10d4 <__vector_10+0xc4>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    10a2:	80 91 e2 00 	lds	r24, 0x00E2
    10a6:	80 ff       	sbrs	r24, 0
    10a8:	15 c0       	rjmp	.+42     	; 0x10d4 <__vector_10+0xc4>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    10aa:	80 91 e2 00 	lds	r24, 0x00E2
    10ae:	8e 7f       	andi	r24, 0xFE	; 254
    10b0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    10b4:	80 91 e2 00 	lds	r24, 0x00E2
    10b8:	80 61       	ori	r24, 0x10	; 16
    10ba:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    10be:	80 91 d8 00 	lds	r24, 0x00D8
    10c2:	80 62       	ori	r24, 0x20	; 32
    10c4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    10c8:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    10ca:	85 e0       	ldi	r24, 0x05	; 5
    10cc:	80 93 b8 01 	sts	0x01B8, r24
		EVENT_USB_Device_Suspend();
    10d0:	0e 94 82 04 	call	0x904	; 0x904 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    10d4:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    10d8:	84 ff       	sbrs	r24, 4
    10da:	30 c0       	rjmp	.+96     	; 0x113c <__vector_10+0x12c>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    10dc:	80 91 e2 00 	lds	r24, 0x00E2
    10e0:	84 ff       	sbrs	r24, 4
    10e2:	2c c0       	rjmp	.+88     	; 0x113c <__vector_10+0x12c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    10e4:	84 e1       	ldi	r24, 0x14	; 20
    10e6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    10e8:	86 e1       	ldi	r24, 0x16	; 22
    10ea:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    10ec:	09 b4       	in	r0, 0x29	; 41
    10ee:	00 fe       	sbrs	r0, 0
    10f0:	fd cf       	rjmp	.-6      	; 0x10ec <__vector_10+0xdc>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    10f2:	80 91 d8 00 	lds	r24, 0x00D8
    10f6:	8f 7d       	andi	r24, 0xDF	; 223
    10f8:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    10fc:	80 91 e1 00 	lds	r24, 0x00E1
    1100:	8f 7e       	andi	r24, 0xEF	; 239
    1102:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1106:	80 91 e2 00 	lds	r24, 0x00E2
    110a:	8f 7e       	andi	r24, 0xEF	; 239
    110c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1110:	80 91 e2 00 	lds	r24, 0x00E2
    1114:	81 60       	ori	r24, 0x01	; 1
    1116:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    111a:	80 91 b4 01 	lds	r24, 0x01B4
    111e:	88 23       	and	r24, r24
    1120:	11 f0       	breq	.+4      	; 0x1126 <__vector_10+0x116>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1122:	84 e0       	ldi	r24, 0x04	; 4
    1124:	07 c0       	rjmp	.+14     	; 0x1134 <__vector_10+0x124>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1126:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    112a:	87 ff       	sbrs	r24, 7
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <__vector_10+0x122>
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <__vector_10+0x124>
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	80 93 b8 01 	sts	0x01B8, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1138:	0e 94 84 04 	call	0x908	; 0x908 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    113c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1140:	83 ff       	sbrs	r24, 3
    1142:	29 c0       	rjmp	.+82     	; 0x1196 <__vector_10+0x186>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1144:	80 91 e2 00 	lds	r24, 0x00E2
    1148:	83 ff       	sbrs	r24, 3
    114a:	25 c0       	rjmp	.+74     	; 0x1196 <__vector_10+0x186>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    114c:	80 91 e1 00 	lds	r24, 0x00E1
    1150:	87 7f       	andi	r24, 0xF7	; 247
    1152:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	80 93 b8 01 	sts	0x01B8, r24
		USB_Device_ConfigurationNumber = 0;
    115c:	10 92 b4 01 	sts	0x01B4, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1160:	80 91 e1 00 	lds	r24, 0x00E1
    1164:	8e 7f       	andi	r24, 0xFE	; 254
    1166:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    116a:	80 91 e2 00 	lds	r24, 0x00E2
    116e:	8e 7f       	andi	r24, 0xFE	; 254
    1170:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1174:	80 91 e2 00 	lds	r24, 0x00E2
    1178:	80 61       	ori	r24, 0x10	; 16
    117a:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    117e:	42 e0       	ldi	r20, 0x02	; 2
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1188:	80 91 f0 00 	lds	r24, 0x00F0
    118c:	88 60       	ori	r24, 0x08	; 8
    118e:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1192:	0e 94 81 04 	call	0x902	; 0x902 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1196:	ff 91       	pop	r31
    1198:	ef 91       	pop	r30
    119a:	bf 91       	pop	r27
    119c:	af 91       	pop	r26
    119e:	9f 91       	pop	r25
    11a0:	8f 91       	pop	r24
    11a2:	7f 91       	pop	r23
    11a4:	6f 91       	pop	r22
    11a6:	5f 91       	pop	r21
    11a8:	4f 91       	pop	r20
    11aa:	3f 91       	pop	r19
    11ac:	2f 91       	pop	r18
    11ae:	0f 90       	pop	r0
    11b0:	0b be       	out	0x3b, r0	; 59
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	0f 90       	pop	r0
    11b8:	1f 90       	pop	r1
    11ba:	18 95       	reti

000011bc <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    11bc:	1f 92       	push	r1
    11be:	0f 92       	push	r0
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	0f 92       	push	r0
    11c4:	11 24       	eor	r1, r1
    11c6:	0b b6       	in	r0, 0x3b	; 59
    11c8:	0f 92       	push	r0
    11ca:	2f 93       	push	r18
    11cc:	3f 93       	push	r19
    11ce:	4f 93       	push	r20
    11d0:	5f 93       	push	r21
    11d2:	6f 93       	push	r22
    11d4:	7f 93       	push	r23
    11d6:	8f 93       	push	r24
    11d8:	9f 93       	push	r25
    11da:	af 93       	push	r26
    11dc:	bf 93       	push	r27
    11de:	cf 93       	push	r28
    11e0:	ef 93       	push	r30
    11e2:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11e4:	80 91 e9 00 	lds	r24, 0x00E9
    11e8:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    11ea:	90 91 ec 00 	lds	r25, 0x00EC
    11ee:	90 ff       	sbrs	r25, 0
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <__vector_11+0x3a>
    11f2:	90 e8       	ldi	r25, 0x80	; 128
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <__vector_11+0x3c>
    11f6:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11f8:	c9 2f       	mov	r28, r25
    11fa:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11fc:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1200:	80 91 f0 00 	lds	r24, 0x00F0
    1204:	87 7f       	andi	r24, 0xF7	; 247
    1206:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    120a:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    120c:	0e 94 26 09 	call	0x124c	; 0x124c <USB_Device_ProcessControlRequest>
    1210:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1214:	80 91 f0 00 	lds	r24, 0x00F0
    1218:	88 60       	ori	r24, 0x08	; 8
    121a:	80 93 f0 00 	sts	0x00F0, r24
    121e:	cf 70       	andi	r28, 0x0F	; 15
    1220:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1224:	ff 91       	pop	r31
    1226:	ef 91       	pop	r30
    1228:	cf 91       	pop	r28
    122a:	bf 91       	pop	r27
    122c:	af 91       	pop	r26
    122e:	9f 91       	pop	r25
    1230:	8f 91       	pop	r24
    1232:	7f 91       	pop	r23
    1234:	6f 91       	pop	r22
    1236:	5f 91       	pop	r21
    1238:	4f 91       	pop	r20
    123a:	3f 91       	pop	r19
    123c:	2f 91       	pop	r18
    123e:	0f 90       	pop	r0
    1240:	0b be       	out	0x3b, r0	; 59
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	0f 90       	pop	r0
    1248:	1f 90       	pop	r1
    124a:	18 95       	reti

0000124c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	ac 97       	sbiw	r28, 0x2c	; 44
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    1262:	e9 eb       	ldi	r30, 0xB9	; 185
    1264:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1266:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    126a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    126c:	21 e0       	ldi	r18, 0x01	; 1
    126e:	e1 3c       	cpi	r30, 0xC1	; 193
    1270:	f2 07       	cpc	r31, r18
    1272:	c9 f7       	brne	.-14     	; 0x1266 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1274:	0e 94 91 04 	call	0x922	; 0x922 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1278:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    127c:	83 ff       	sbrs	r24, 3
    127e:	37 c1       	rjmp	.+622    	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1280:	80 91 b9 01 	lds	r24, 0x01B9

		switch (USB_ControlRequest.bRequest)
    1284:	90 91 ba 01 	lds	r25, 0x01BA
    1288:	95 30       	cpi	r25, 0x05	; 5
    128a:	09 f4       	brne	.+2      	; 0x128e <USB_Device_ProcessControlRequest+0x42>
    128c:	88 c0       	rjmp	.+272    	; 0x139e <USB_Device_ProcessControlRequest+0x152>
    128e:	38 f4       	brcc	.+14     	; 0x129e <USB_Device_ProcessControlRequest+0x52>
    1290:	91 30       	cpi	r25, 0x01	; 1
    1292:	b1 f1       	breq	.+108    	; 0x1300 <USB_Device_ProcessControlRequest+0xb4>
    1294:	70 f0       	brcs	.+28     	; 0x12b2 <USB_Device_ProcessControlRequest+0x66>
    1296:	93 30       	cpi	r25, 0x03	; 3
    1298:	09 f0       	breq	.+2      	; 0x129c <USB_Device_ProcessControlRequest+0x50>
    129a:	29 c1       	rjmp	.+594    	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
    129c:	31 c0       	rjmp	.+98     	; 0x1300 <USB_Device_ProcessControlRequest+0xb4>
    129e:	98 30       	cpi	r25, 0x08	; 8
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <USB_Device_ProcessControlRequest+0x58>
    12a2:	f8 c0       	rjmp	.+496    	; 0x1494 <USB_Device_ProcessControlRequest+0x248>
    12a4:	99 30       	cpi	r25, 0x09	; 9
    12a6:	09 f4       	brne	.+2      	; 0x12aa <USB_Device_ProcessControlRequest+0x5e>
    12a8:	04 c1       	rjmp	.+520    	; 0x14b2 <USB_Device_ProcessControlRequest+0x266>
    12aa:	96 30       	cpi	r25, 0x06	; 6
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <USB_Device_ProcessControlRequest+0x64>
    12ae:	1f c1       	rjmp	.+574    	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
    12b0:	9d c0       	rjmp	.+314    	; 0x13ec <USB_Device_ProcessControlRequest+0x1a0>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    12b2:	80 38       	cpi	r24, 0x80	; 128
    12b4:	21 f0       	breq	.+8      	; 0x12be <USB_Device_ProcessControlRequest+0x72>
    12b6:	82 38       	cpi	r24, 0x82	; 130
    12b8:	09 f0       	breq	.+2      	; 0x12bc <USB_Device_ProcessControlRequest+0x70>
    12ba:	19 c1       	rjmp	.+562    	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
    12bc:	08 c0       	rjmp	.+16     	; 0x12ce <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    12be:	80 91 b5 01 	lds	r24, 0x01B5
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    12c2:	90 91 b6 01 	lds	r25, 0x01B6
    12c6:	99 23       	and	r25, r25
    12c8:	89 f0       	breq	.+34     	; 0x12ec <USB_Device_ProcessControlRequest+0xa0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    12ca:	82 60       	ori	r24, 0x02	; 2
    12cc:	0f c0       	rjmp	.+30     	; 0x12ec <USB_Device_ProcessControlRequest+0xa0>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    12ce:	80 91 bd 01 	lds	r24, 0x01BD
    12d2:	90 91 be 01 	lds	r25, 0x01BE
    12d6:	8f 70       	andi	r24, 0x0F	; 15
    12d8:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12da:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    12de:	80 91 eb 00 	lds	r24, 0x00EB
    12e2:	85 fb       	bst	r24, 5
    12e4:	88 27       	eor	r24, r24
    12e6:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12e8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12ec:	90 91 e8 00 	lds	r25, 0x00E8
    12f0:	97 7f       	andi	r25, 0xF7	; 247
    12f2:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    12f6:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    12fa:	10 92 f1 00 	sts	0x00F1, r1
    12fe:	d5 c0       	rjmp	.+426    	; 0x14aa <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1300:	88 23       	and	r24, r24
    1302:	19 f0       	breq	.+6      	; 0x130a <USB_Device_ProcessControlRequest+0xbe>
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	09 f0       	breq	.+2      	; 0x130a <USB_Device_ProcessControlRequest+0xbe>
    1308:	f2 c0       	rjmp	.+484    	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    130a:	8f 71       	andi	r24, 0x1F	; 31
    130c:	21 f0       	breq	.+8      	; 0x1316 <USB_Device_ProcessControlRequest+0xca>
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	09 f0       	breq	.+2      	; 0x1314 <USB_Device_ProcessControlRequest+0xc8>
    1312:	ed c0       	rjmp	.+474    	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
    1314:	0b c0       	rjmp	.+22     	; 0x132c <USB_Device_ProcessControlRequest+0xe0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1316:	80 91 bb 01 	lds	r24, 0x01BB
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	09 f0       	breq	.+2      	; 0x1320 <USB_Device_ProcessControlRequest+0xd4>
    131e:	e7 c0       	rjmp	.+462    	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1320:	93 30       	cpi	r25, 0x03	; 3
    1322:	09 f0       	breq	.+2      	; 0x1326 <USB_Device_ProcessControlRequest+0xda>
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	80 93 b6 01 	sts	0x01B6, r24
    132a:	2f c0       	rjmp	.+94     	; 0x138a <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    132c:	80 91 bb 01 	lds	r24, 0x01BB
    1330:	81 11       	cpse	r24, r1
    1332:	2b c0       	rjmp	.+86     	; 0x138a <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1334:	80 91 bd 01 	lds	r24, 0x01BD
    1338:	90 91 be 01 	lds	r25, 0x01BE
    133c:	8f 70       	andi	r24, 0x0F	; 15
    133e:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	09 f4       	brne	.+2      	; 0x1346 <USB_Device_ProcessControlRequest+0xfa>
    1344:	d4 c0       	rjmp	.+424    	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1346:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    134a:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    134e:	20 ff       	sbrs	r18, 0
    1350:	1c c0       	rjmp	.+56     	; 0x138a <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1352:	20 91 ba 01 	lds	r18, 0x01BA
    1356:	23 30       	cpi	r18, 0x03	; 3
    1358:	21 f4       	brne	.+8      	; 0x1362 <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    135a:	80 91 eb 00 	lds	r24, 0x00EB
    135e:	80 62       	ori	r24, 0x20	; 32
    1360:	12 c0       	rjmp	.+36     	; 0x1386 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1362:	90 91 eb 00 	lds	r25, 0x00EB
    1366:	90 61       	ori	r25, 0x10	; 16
    1368:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    136c:	21 e0       	ldi	r18, 0x01	; 1
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	01 c0       	rjmp	.+2      	; 0x1374 <USB_Device_ProcessControlRequest+0x128>
    1372:	22 0f       	add	r18, r18
    1374:	8a 95       	dec	r24
    1376:	ea f7       	brpl	.-6      	; 0x1372 <USB_Device_ProcessControlRequest+0x126>
    1378:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    137c:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1380:	80 91 eb 00 	lds	r24, 0x00EB
    1384:	88 60       	ori	r24, 0x08	; 8
    1386:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    138a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    138e:	80 91 e8 00 	lds	r24, 0x00E8
    1392:	87 7f       	andi	r24, 0xF7	; 247
    1394:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1398:	0e 94 32 07 	call	0xe64	; 0xe64 <Endpoint_ClearStatusStage>
    139c:	a8 c0       	rjmp	.+336    	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    139e:	81 11       	cpse	r24, r1
    13a0:	a6 c0       	rjmp	.+332    	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    13a2:	80 91 bb 01 	lds	r24, 0x01BB
    13a6:	90 91 bc 01 	lds	r25, 0x01BC
    13aa:	8f 77       	andi	r24, 0x7F	; 127
    13ac:	99 27       	eor	r25, r25
    13ae:	18 2f       	mov	r17, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    13b0:	90 91 e3 00 	lds	r25, 0x00E3
    13b4:	90 78       	andi	r25, 0x80	; 128
    13b6:	98 2b       	or	r25, r24
    13b8:	90 93 e3 00 	sts	0x00E3, r25
    13bc:	80 91 e8 00 	lds	r24, 0x00E8
    13c0:	87 7f       	andi	r24, 0xF7	; 247
    13c2:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    13c6:	0e 94 32 07 	call	0xe64	; 0xe64 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    13ca:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    13ce:	80 ff       	sbrs	r24, 0
    13d0:	fc cf       	rjmp	.-8      	; 0x13ca <USB_Device_ProcessControlRequest+0x17e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    13d2:	80 91 e3 00 	lds	r24, 0x00E3
    13d6:	80 68       	ori	r24, 0x80	; 128
    13d8:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    13dc:	11 23       	and	r17, r17
    13de:	11 f0       	breq	.+4      	; 0x13e4 <USB_Device_ProcessControlRequest+0x198>
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <USB_Device_ProcessControlRequest+0x19a>
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	80 93 b8 01 	sts	0x01B8, r24
    13ea:	81 c0       	rjmp	.+258    	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    13ec:	80 58       	subi	r24, 0x80	; 128
    13ee:	82 30       	cpi	r24, 0x02	; 2
    13f0:	08 f0       	brcs	.+2      	; 0x13f4 <USB_Device_ProcessControlRequest+0x1a8>
    13f2:	7d c0       	rjmp	.+250    	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    13f4:	80 91 bb 01 	lds	r24, 0x01BB
    13f8:	90 91 bc 01 	lds	r25, 0x01BC
    13fc:	8c 3d       	cpi	r24, 0xDC	; 220
    13fe:	23 e0       	ldi	r18, 0x03	; 3
    1400:	92 07       	cpc	r25, r18
    1402:	79 f5       	brne	.+94     	; 0x1462 <USB_Device_ProcessControlRequest+0x216>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1404:	83 e0       	ldi	r24, 0x03	; 3
    1406:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1408:	8a e2       	ldi	r24, 0x2A	; 42
    140a:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    140c:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    140e:	f8 94       	cli

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    1410:	de 01       	movw	r26, r28
    1412:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1414:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1416:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1418:	51 e2       	ldi	r21, 0x21	; 33
    141a:	e3 2f       	mov	r30, r19
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	50 93 57 00 	sts	0x0057, r21
    1422:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1424:	20 ff       	sbrs	r18, 0
    1426:	03 c0       	rjmp	.+6      	; 0x142e <USB_Device_ProcessControlRequest+0x1e2>
					{
						SerialByte >>= 4;
    1428:	e2 95       	swap	r30
    142a:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    142c:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    142e:	ef 70       	andi	r30, 0x0F	; 15
    1430:	8e 2f       	mov	r24, r30
    1432:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1434:	ea 30       	cpi	r30, 0x0A	; 10
    1436:	10 f0       	brcs	.+4      	; 0x143c <USB_Device_ProcessControlRequest+0x1f0>
    1438:	c7 96       	adiw	r24, 0x37	; 55
    143a:	01 c0       	rjmp	.+2      	; 0x143e <USB_Device_ProcessControlRequest+0x1f2>
    143c:	c0 96       	adiw	r24, 0x30	; 48
    143e:	8d 93       	st	X+, r24
    1440:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1442:	2f 5f       	subi	r18, 0xFF	; 255
    1444:	24 31       	cpi	r18, 0x14	; 20
    1446:	49 f7       	brne	.-46     	; 0x141a <USB_Device_ProcessControlRequest+0x1ce>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1448:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    144a:	80 91 e8 00 	lds	r24, 0x00E8
    144e:	87 7f       	andi	r24, 0xF7	; 247
    1450:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1454:	6a e2       	ldi	r22, 0x2A	; 42
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	ce 01       	movw	r24, r28
    145a:	01 96       	adiw	r24, 0x01	; 1
    145c:	0e 94 40 06 	call	0xc80	; 0xc80 <Endpoint_Write_Control_Stream_LE>
    1460:	13 c0       	rjmp	.+38     	; 0x1488 <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1462:	ae 01       	movw	r20, r28
    1464:	45 5d       	subi	r20, 0xD5	; 213
    1466:	5f 4f       	sbci	r21, 0xFF	; 255
    1468:	60 91 bd 01 	lds	r22, 0x01BD
    146c:	0e 94 81 05 	call	0xb02	; 0xb02 <CALLBACK_USB_GetDescriptor>
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	e9 f1       	breq	.+122    	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
    1474:	20 91 e8 00 	lds	r18, 0x00E8
    1478:	27 7f       	andi	r18, 0xF7	; 247
    147a:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    147e:	bc 01       	movw	r22, r24
    1480:	8b a5       	ldd	r24, Y+43	; 0x2b
    1482:	9c a5       	ldd	r25, Y+44	; 0x2c
    1484:	0e 94 9c 06 	call	0xd38	; 0xd38 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1488:	80 91 e8 00 	lds	r24, 0x00E8
    148c:	8b 77       	andi	r24, 0x7B	; 123
    148e:	80 93 e8 00 	sts	0x00E8, r24
    1492:	2d c0       	rjmp	.+90     	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1494:	80 38       	cpi	r24, 0x80	; 128
    1496:	59 f5       	brne	.+86     	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1498:	80 91 e8 00 	lds	r24, 0x00E8
    149c:	87 7f       	andi	r24, 0xF7	; 247
    149e:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    14a2:	80 91 b4 01 	lds	r24, 0x01B4
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14a6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14aa:	80 91 e8 00 	lds	r24, 0x00E8
    14ae:	8e 77       	andi	r24, 0x7E	; 126
    14b0:	71 cf       	rjmp	.-286    	; 0x1394 <USB_Device_ProcessControlRequest+0x148>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    14b2:	81 11       	cpse	r24, r1
    14b4:	1c c0       	rjmp	.+56     	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    14b6:	90 91 bb 01 	lds	r25, 0x01BB
    14ba:	92 30       	cpi	r25, 0x02	; 2
    14bc:	c0 f4       	brcc	.+48     	; 0x14ee <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14be:	80 91 e8 00 	lds	r24, 0x00E8
    14c2:	87 7f       	andi	r24, 0xF7	; 247
    14c4:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    14c8:	90 93 b4 01 	sts	0x01B4, r25

	Endpoint_ClearStatusStage();
    14cc:	0e 94 32 07 	call	0xe64	; 0xe64 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    14d0:	80 91 b4 01 	lds	r24, 0x01B4
    14d4:	81 11       	cpse	r24, r1
    14d6:	04 c0       	rjmp	.+8      	; 0x14e0 <USB_Device_ProcessControlRequest+0x294>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    14d8:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    14dc:	87 ff       	sbrs	r24, 7
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <USB_Device_ProcessControlRequest+0x298>
    14e0:	84 e0       	ldi	r24, 0x04	; 4
    14e2:	01 c0       	rjmp	.+2      	; 0x14e6 <USB_Device_ProcessControlRequest+0x29a>
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	80 93 b8 01 	sts	0x01B8, r24

	EVENT_USB_Device_ConfigurationChanged();
    14ea:	0e 94 8c 04 	call	0x918	; 0x918 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    14ee:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    14f2:	83 ff       	sbrs	r24, 3
    14f4:	0a c0       	rjmp	.+20     	; 0x150a <USB_Device_ProcessControlRequest+0x2be>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14f6:	80 91 e8 00 	lds	r24, 0x00E8
    14fa:	87 7f       	andi	r24, 0xF7	; 247
    14fc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1500:	80 91 eb 00 	lds	r24, 0x00EB
    1504:	80 62       	ori	r24, 0x20	; 32
    1506:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    150a:	ac 96       	adiw	r28, 0x2c	; 44
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	08 95       	ret

0000151e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    151e:	08 95       	ret

00001520 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    1520:	90 93 3b 01 	sts	0x013B, r25
    1524:	80 93 3a 01 	sts	0x013A, r24
    1528:	08 95       	ret

0000152a <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    152a:	e0 91 3a 01 	lds	r30, 0x013A
    152e:	f0 91 3b 01 	lds	r31, 0x013B
    1532:	30 97       	sbiw	r30, 0x00	; 0
    1534:	21 f0       	breq	.+8      	; 0x153e <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    1536:	01 90       	ld	r0, Z+
    1538:	f0 81       	ld	r31, Z
    153a:	e0 2d       	mov	r30, r0
    153c:	09 94       	ijmp
}
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	08 95       	ret

00001542 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    if (!driver) return;
    1542:	e0 91 3a 01 	lds	r30, 0x013A
    1546:	f0 91 3b 01 	lds	r31, 0x013B
    154a:	30 97       	sbiw	r30, 0x00	; 0
    154c:	21 f0       	breq	.+8      	; 0x1556 <host_keyboard_send+0x14>
    (*driver->send_keyboard)(report);
    154e:	02 80       	ldd	r0, Z+2	; 0x02
    1550:	f3 81       	ldd	r31, Z+3	; 0x03
    1552:	e0 2d       	mov	r30, r0
    1554:	09 94       	ijmp
    1556:	08 95       	ret

00001558 <host_system_send>:
    (*driver->send_mouse)(report);
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    1558:	20 91 3c 01 	lds	r18, 0x013C
    155c:	30 91 3d 01 	lds	r19, 0x013D
    1560:	82 17       	cp	r24, r18
    1562:	93 07       	cpc	r25, r19
    1564:	71 f0       	breq	.+28     	; 0x1582 <host_system_send+0x2a>
    last_system_report = report;
    1566:	90 93 3d 01 	sts	0x013D, r25
    156a:	80 93 3c 01 	sts	0x013C, r24

    if (!driver) return;
    156e:	e0 91 3a 01 	lds	r30, 0x013A
    1572:	f0 91 3b 01 	lds	r31, 0x013B
    1576:	30 97       	sbiw	r30, 0x00	; 0
    1578:	21 f0       	breq	.+8      	; 0x1582 <host_system_send+0x2a>
    (*driver->send_system)(report);
    157a:	06 80       	ldd	r0, Z+6	; 0x06
    157c:	f7 81       	ldd	r31, Z+7	; 0x07
    157e:	e0 2d       	mov	r30, r0
    1580:	09 94       	ijmp
    1582:	08 95       	ret

00001584 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    1584:	20 91 3e 01 	lds	r18, 0x013E
    1588:	30 91 3f 01 	lds	r19, 0x013F
    158c:	82 17       	cp	r24, r18
    158e:	93 07       	cpc	r25, r19
    1590:	71 f0       	breq	.+28     	; 0x15ae <host_consumer_send+0x2a>
    last_consumer_report = report;
    1592:	90 93 3f 01 	sts	0x013F, r25
    1596:	80 93 3e 01 	sts	0x013E, r24

    if (!driver) return;
    159a:	e0 91 3a 01 	lds	r30, 0x013A
    159e:	f0 91 3b 01 	lds	r31, 0x013B
    15a2:	30 97       	sbiw	r30, 0x00	; 0
    15a4:	21 f0       	breq	.+8      	; 0x15ae <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    15a6:	00 84       	ldd	r0, Z+8	; 0x08
    15a8:	f1 85       	ldd	r31, Z+9	; 0x09
    15aa:	e0 2d       	mov	r30, r0
    15ac:	09 94       	ijmp
    15ae:	08 95       	ret

000015b0 <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    15b0:	08 95       	ret

000015b2 <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    15b2:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <matrix_setup>

000015b6 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    15b6:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <timer_init>
    matrix_init();
    15ba:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <matrix_init>

000015be <keyboard_set_leds>:
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    15be:	0c 94 c9 03 	jmp	0x792	; 0x792 <led_set>

000015c2 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    15c2:	2f 92       	push	r2
    15c4:	3f 92       	push	r3
    15c6:	4f 92       	push	r4
    15c8:	5f 92       	push	r5
    15ca:	6f 92       	push	r6
    15cc:	7f 92       	push	r7
    15ce:	8f 92       	push	r8
    15d0:	9f 92       	push	r9
    15d2:	af 92       	push	r10
    15d4:	bf 92       	push	r11
    15d6:	cf 92       	push	r12
    15d8:	df 92       	push	r13
    15da:	ef 92       	push	r14
    15dc:	ff 92       	push	r15
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	2a 97       	sbiw	r28, 0x0a	; 10
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    15f6:	0e 94 a3 02 	call	0x546	; 0x546 <matrix_scan>
    15fa:	90 e4       	ldi	r25, 0x40	; 64
    15fc:	49 2e       	mov	r4, r25
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	59 2e       	mov	r5, r25
    1602:	20 e5       	ldi	r18, 0x50	; 80
    1604:	a2 2e       	mov	r10, r18
    1606:	21 e0       	ldi	r18, 0x01	; 1
    1608:	b2 2e       	mov	r11, r18
    160a:	e1 2c       	mov	r14, r1
    160c:	f1 2c       	mov	r15, r1
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    160e:	22 24       	eor	r2, r2
    1610:	23 94       	inc	r2
    1612:	31 2c       	mov	r3, r1
    1614:	0e 2d       	mov	r16, r14
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    1616:	8e 2d       	mov	r24, r14
    1618:	0e 94 bf 03 	call	0x77e	; 0x77e <matrix_get_row>
    161c:	6c 01       	movw	r12, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    161e:	f2 01       	movw	r30, r4
    1620:	81 90       	ld	r8, Z+
    1622:	91 90       	ld	r9, Z+
    1624:	2f 01       	movw	r4, r30
    1626:	88 26       	eor	r8, r24
    1628:	99 26       	eor	r9, r25
        if (matrix_change) {
    162a:	81 14       	cp	r8, r1
    162c:	91 04       	cpc	r9, r1
    162e:	09 f4       	brne	.+2      	; 0x1632 <keyboard_task+0x70>
    1630:	5a c0       	rjmp	.+180    	; 0x16e6 <keyboard_task+0x124>


#ifdef MATRIX_HAS_GHOST
static bool has_ghost_in_row(uint8_t row)
{
    matrix_row_t matrix_row = matrix_get_row(row);
    1632:	8e 2d       	mov	r24, r14
    1634:	0e 94 bf 03 	call	0x77e	; 0x77e <matrix_get_row>
    1638:	3c 01       	movw	r6, r24
    // No ghost exists when less than 2 keys are down on the row
    if (((matrix_row - 1) & matrix_row) == 0)
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	86 21       	and	r24, r6
    163e:	97 21       	and	r25, r7
    1640:	89 2b       	or	r24, r25
    1642:	09 f4       	brne	.+2      	; 0x1646 <keyboard_task+0x84>
    1644:	8f c0       	rjmp	.+286    	; 0x1764 <keyboard_task+0x1a2>
    1646:	10 e0       	ldi	r17, 0x00	; 0
        return false;

    // Ghost occurs when the row shares column line with other row
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        if (i != row && (matrix_get_row(i) & matrix_row))
    1648:	10 13       	cpse	r17, r16
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <keyboard_task+0x92>
    // No ghost exists when less than 2 keys are down on the row
    if (((matrix_row - 1) & matrix_row) == 0)
        return false;

    // Ghost occurs when the row shares column line with other row
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    164c:	1f 5f       	subi	r17, 0xFF	; 255
    164e:	18 30       	cpi	r17, 0x08	; 8
    1650:	d9 f7       	brne	.-10     	; 0x1648 <keyboard_task+0x86>
    1652:	88 c0       	rjmp	.+272    	; 0x1764 <keyboard_task+0x1a2>
        if (i != row && (matrix_get_row(i) & matrix_row))
    1654:	81 2f       	mov	r24, r17
    1656:	0e 94 bf 03 	call	0x77e	; 0x77e <matrix_get_row>
    165a:	86 21       	and	r24, r6
    165c:	97 21       	and	r25, r7
    165e:	89 2b       	or	r24, r25
    1660:	a9 f3       	breq	.-22     	; 0x164c <keyboard_task+0x8a>
    1662:	88 c0       	rjmp	.+272    	; 0x1774 <keyboard_task+0x1b2>
            if (has_ghost_in_row(r)) {
                /* Keep track of whether ghosted status has changed for
                 * debugging. But don't update matrix_prev until un-ghosted, or
                 * the last key would be lost.
                 */
                if (debug_matrix && matrix_ghost[r] != matrix_row) {
    1664:	f5 01       	movw	r30, r10
    1666:	80 81       	ld	r24, Z
    1668:	91 81       	ldd	r25, Z+1	; 0x01
    166a:	8c 15       	cp	r24, r12
    166c:	9d 05       	cpc	r25, r13
    166e:	11 f0       	breq	.+4      	; 0x1674 <keyboard_task+0xb2>
                    matrix_print();
    1670:	0e 94 c8 03 	call	0x790	; 0x790 <matrix_print>
                }
                matrix_ghost[r] = matrix_row;
    1674:	f5 01       	movw	r30, r10
    1676:	d1 82       	std	Z+1, r13	; 0x01
    1678:	c0 82       	st	Z, r12
                continue;
    167a:	35 c0       	rjmp	.+106    	; 0x16e6 <keyboard_task+0x124>
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    167c:	0e 94 c8 03 	call	0x790	; 0x790 <matrix_print>
#ifdef MATRIX_HAS_GHOST
static bool has_ghost_in_row(uint8_t row)
{
    matrix_row_t matrix_row = matrix_get_row(row);
    // No ghost exists when less than 2 keys are down on the row
    if (((matrix_row - 1) & matrix_row) == 0)
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1684:	31 01       	movw	r6, r2
    1686:	08 2e       	mov	r0, r24
    1688:	02 c0       	rjmp	.+4      	; 0x168e <keyboard_task+0xcc>
    168a:	66 0c       	add	r6, r6
    168c:	77 1c       	adc	r7, r7
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <keyboard_task+0xc8>
    1692:	93 01       	movw	r18, r6
    1694:	28 21       	and	r18, r8
    1696:	39 21       	and	r19, r9
    1698:	23 2b       	or	r18, r19
    169a:	09 f1       	breq	.+66     	; 0x16de <keyboard_task+0x11c>
                    action_exec((keyevent_t){
    169c:	8e 83       	std	Y+6, r24	; 0x06
    169e:	0f 83       	std	Y+7, r16	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    16a0:	c6 20       	and	r12, r6
    16a2:	d7 20       	and	r13, r7
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	cd 28       	or	r12, r13
    16a8:	09 f4       	brne	.+2      	; 0x16ac <keyboard_task+0xea>
    16aa:	80 e0       	ldi	r24, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    16ac:	88 87       	std	Y+8, r24	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    16ae:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <timer_read>
    16b2:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    16b4:	78 2f       	mov	r23, r24
    16b6:	9a 87       	std	Y+10, r25	; 0x0a
    16b8:	89 87       	std	Y+9, r24	; 0x09
    16ba:	4e 81       	ldd	r20, Y+6	; 0x06
    16bc:	5f 81       	ldd	r21, Y+7	; 0x07
    16be:	68 85       	ldd	r22, Y+8	; 0x08
    16c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c2:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    16c6:	f7 01       	movw	r30, r14
    16c8:	ee 0f       	add	r30, r30
    16ca:	ff 1f       	adc	r31, r31
    16cc:	e0 5c       	subi	r30, 0xC0	; 192
    16ce:	fe 4f       	sbci	r31, 0xFE	; 254
    16d0:	80 81       	ld	r24, Z
    16d2:	91 81       	ldd	r25, Z+1	; 0x01
    16d4:	86 25       	eor	r24, r6
    16d6:	97 25       	eor	r25, r7
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    16dc:	1f c0       	rjmp	.+62     	; 0x171c <keyboard_task+0x15a>
    16de:	01 96       	adiw	r24, 0x01	; 1
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    16e0:	80 31       	cpi	r24, 0x10	; 16
    16e2:	91 05       	cpc	r25, r1
    16e4:	79 f6       	brne	.-98     	; 0x1684 <keyboard_task+0xc2>
    16e6:	ff ef       	ldi	r31, 0xFF	; 255
    16e8:	ef 1a       	sub	r14, r31
    16ea:	ff 0a       	sbc	r15, r31
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	a8 0e       	add	r10, r24
    16f0:	b1 1c       	adc	r11, r1
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    16f2:	e8 e0       	ldi	r30, 0x08	; 8
    16f4:	ee 16       	cp	r14, r30
    16f6:	f1 04       	cpc	r15, r1
    16f8:	09 f0       	breq	.+2      	; 0x16fc <keyboard_task+0x13a>
    16fa:	8c cf       	rjmp	.-232    	; 0x1614 <keyboard_task+0x52>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    16fc:	8f ef       	ldi	r24, 0xFF	; 255
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	8a 83       	std	Y+2, r24	; 0x02
    1702:	1b 82       	std	Y+3, r1	; 0x03
    1704:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <timer_read>
    1708:	81 60       	ori	r24, 0x01	; 1
    170a:	78 2f       	mov	r23, r24
    170c:	9d 83       	std	Y+5, r25	; 0x05
    170e:	8c 83       	std	Y+4, r24	; 0x04
    1710:	49 81       	ldd	r20, Y+1	; 0x01
    1712:	5a 81       	ldd	r21, Y+2	; 0x02
    1714:	6b 81       	ldd	r22, Y+3	; 0x03
    1716:	8d 81       	ldd	r24, Y+5	; 0x05
    1718:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <action_exec>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    171c:	10 91 60 01 	lds	r17, 0x0160
    1720:	0e 94 95 0a 	call	0x152a	; 0x152a <host_keyboard_leds>
    1724:	18 17       	cp	r17, r24
    1726:	59 f1       	breq	.+86     	; 0x177e <keyboard_task+0x1bc>
        led_status = host_keyboard_leds();
    1728:	0e 94 95 0a 	call	0x152a	; 0x152a <host_keyboard_leds>
    172c:	80 93 60 01 	sts	0x0160, r24
        keyboard_set_leds(led_status);
    }
}
    1730:	2a 96       	adiw	r28, 0x0a	; 10
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	df 90       	pop	r13
    174a:	cf 90       	pop	r12
    174c:	bf 90       	pop	r11
    174e:	af 90       	pop	r10
    1750:	9f 90       	pop	r9
    1752:	8f 90       	pop	r8
    1754:	7f 90       	pop	r7
    1756:	6f 90       	pop	r6
    1758:	5f 90       	pop	r5
    175a:	4f 90       	pop	r4
    175c:	3f 90       	pop	r3
    175e:	2f 90       	pop	r2
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    1760:	0c 94 df 0a 	jmp	0x15be	; 0x15be <keyboard_set_leds>
                    matrix_print();
                }
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
    1764:	f5 01       	movw	r30, r10
    1766:	d1 82       	std	Z+1, r13	; 0x01
    1768:	c0 82       	st	Z, r12
#endif
            if (debug_matrix) matrix_print();
    176a:	80 91 ac 01 	lds	r24, 0x01AC
    176e:	81 ff       	sbrs	r24, 1
    1770:	87 cf       	rjmp	.-242    	; 0x1680 <keyboard_task+0xbe>
    1772:	84 cf       	rjmp	.-248    	; 0x167c <keyboard_task+0xba>
            if (has_ghost_in_row(r)) {
                /* Keep track of whether ghosted status has changed for
                 * debugging. But don't update matrix_prev until un-ghosted, or
                 * the last key would be lost.
                 */
                if (debug_matrix && matrix_ghost[r] != matrix_row) {
    1774:	80 91 ac 01 	lds	r24, 0x01AC
    1778:	81 fd       	sbrc	r24, 1
    177a:	74 cf       	rjmp	.-280    	; 0x1664 <keyboard_task+0xa2>
    177c:	7b cf       	rjmp	.-266    	; 0x1674 <keyboard_task+0xb2>
    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    }
}
    177e:	2a 96       	adiw	r28, 0x0a	; 10
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	ff 90       	pop	r15
    1794:	ef 90       	pop	r14
    1796:	df 90       	pop	r13
    1798:	cf 90       	pop	r12
    179a:	bf 90       	pop	r11
    179c:	af 90       	pop	r10
    179e:	9f 90       	pop	r9
    17a0:	8f 90       	pop	r8
    17a2:	7f 90       	pop	r7
    17a4:	6f 90       	pop	r6
    17a6:	5f 90       	pop	r5
    17a8:	4f 90       	pop	r4
    17aa:	3f 90       	pop	r3
    17ac:	2f 90       	pop	r2
    17ae:	08 95       	ret

000017b0 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	2b 97       	sbiw	r28, 0x0b	; 11
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	4f 83       	std	Y+7, r20	; 0x07
    17c6:	58 87       	std	Y+8, r21	; 0x08
    17c8:	69 87       	std	Y+9, r22	; 0x09
    17ca:	7a 87       	std	Y+10, r23	; 0x0a
    17cc:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    17ce:	de 01       	movw	r26, r28
    17d0:	11 96       	adiw	r26, 0x01	; 1
    17d2:	86 e0       	ldi	r24, 0x06	; 6
    17d4:	fd 01       	movw	r30, r26
    17d6:	11 92       	st	Z+, r1
    17d8:	8a 95       	dec	r24
    17da:	e9 f7       	brne	.-6      	; 0x17d6 <action_exec+0x26>
    17dc:	85 e0       	ldi	r24, 0x05	; 5
    17de:	fe 01       	movw	r30, r28
    17e0:	37 96       	adiw	r30, 0x07	; 7
    17e2:	01 90       	ld	r0, Z+
    17e4:	0d 92       	st	X+, r0
    17e6:	8a 95       	dec	r24
    17e8:	e1 f7       	brne	.-8      	; 0x17e2 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    17ea:	49 81       	ldd	r20, Y+1	; 0x01
    17ec:	5a 81       	ldd	r21, Y+2	; 0x02
    17ee:	6b 81       	ldd	r22, Y+3	; 0x03
    17f0:	7c 81       	ldd	r23, Y+4	; 0x04
    17f2:	8d 81       	ldd	r24, Y+5	; 0x05
    17f4:	9e 81       	ldd	r25, Y+6	; 0x06
    17f6:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    17fa:	2b 96       	adiw	r28, 0x0b	; 11
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <register_code>:
/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    if (code == KC_NO) {
    180c:	88 23       	and	r24, r24
    180e:	09 f4       	brne	.+2      	; 0x1812 <register_code+0x6>
    1810:	91 c0       	rjmp	.+290    	; 0x1934 <register_code+0x128>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    1812:	98 2f       	mov	r25, r24
    1814:	94 50       	subi	r25, 0x04	; 4
    1816:	91 3a       	cpi	r25, 0xA1	; 161
    1818:	18 f4       	brcc	.+6      	; 0x1820 <register_code+0x14>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    181a:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <add_key>
    181e:	0e c0       	rjmp	.+28     	; 0x183c <register_code+0x30>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    1820:	98 2f       	mov	r25, r24
    1822:	90 5e       	subi	r25, 0xE0	; 224
    1824:	98 30       	cpi	r25, 0x08	; 8
    1826:	60 f4       	brcc	.+24     	; 0x1840 <register_code+0x34>
        add_mods(MOD_BIT(code));
    1828:	28 2f       	mov	r18, r24
    182a:	27 70       	andi	r18, 0x07	; 7
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	01 c0       	rjmp	.+2      	; 0x1834 <register_code+0x28>
    1832:	88 0f       	add	r24, r24
    1834:	2a 95       	dec	r18
    1836:	ea f7       	brpl	.-6      	; 0x1832 <register_code+0x26>
    1838:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <add_mods>
        send_keyboard_report();
    183c:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    1840:	98 2f       	mov	r25, r24
    1842:	95 5a       	subi	r25, 0xA5	; 165
    1844:	93 30       	cpi	r25, 0x03	; 3
    1846:	70 f4       	brcc	.+28     	; 0x1864 <register_code+0x58>
        host_system_send(KEYCODE2SYSTEM(code));
    1848:	85 3a       	cpi	r24, 0xA5	; 165
    184a:	29 f0       	breq	.+10     	; 0x1856 <register_code+0x4a>
    184c:	86 3a       	cpi	r24, 0xA6	; 166
    184e:	31 f4       	brne	.+12     	; 0x185c <register_code+0x50>
    1850:	82 e8       	ldi	r24, 0x82	; 130
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	05 c0       	rjmp	.+10     	; 0x1860 <register_code+0x54>
    1856:	81 e8       	ldi	r24, 0x81	; 129
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <register_code+0x54>
    185c:	83 e8       	ldi	r24, 0x83	; 131
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    1864:	98 2f       	mov	r25, r24
    1866:	98 5a       	subi	r25, 0xA8	; 168
    1868:	93 31       	cpi	r25, 0x13	; 19
    186a:	08 f0       	brcs	.+2      	; 0x186e <register_code+0x62>
    186c:	63 c0       	rjmp	.+198    	; 0x1934 <register_code+0x128>
        host_consumer_send(KEYCODE2CONSUMER(code));
    186e:	88 3a       	cpi	r24, 0xA8	; 168
    1870:	39 f1       	breq	.+78     	; 0x18c0 <register_code+0xb4>
    1872:	89 3a       	cpi	r24, 0xA9	; 169
    1874:	41 f1       	breq	.+80     	; 0x18c6 <register_code+0xba>
    1876:	8a 3a       	cpi	r24, 0xAA	; 170
    1878:	49 f1       	breq	.+82     	; 0x18cc <register_code+0xc0>
    187a:	8b 3a       	cpi	r24, 0xAB	; 171
    187c:	51 f1       	breq	.+84     	; 0x18d2 <register_code+0xc6>
    187e:	8c 3a       	cpi	r24, 0xAC	; 172
    1880:	59 f1       	breq	.+86     	; 0x18d8 <register_code+0xcc>
    1882:	8d 3a       	cpi	r24, 0xAD	; 173
    1884:	61 f1       	breq	.+88     	; 0x18de <register_code+0xd2>
    1886:	80 3b       	cpi	r24, 0xB0	; 176
    1888:	69 f1       	breq	.+90     	; 0x18e4 <register_code+0xd8>
    188a:	8e 3a       	cpi	r24, 0xAE	; 174
    188c:	71 f1       	breq	.+92     	; 0x18ea <register_code+0xde>
    188e:	8f 3a       	cpi	r24, 0xAF	; 175
    1890:	79 f1       	breq	.+94     	; 0x18f0 <register_code+0xe4>
    1892:	81 3b       	cpi	r24, 0xB1	; 177
    1894:	81 f1       	breq	.+96     	; 0x18f6 <register_code+0xea>
    1896:	82 3b       	cpi	r24, 0xB2	; 178
    1898:	89 f1       	breq	.+98     	; 0x18fc <register_code+0xf0>
    189a:	83 3b       	cpi	r24, 0xB3	; 179
    189c:	91 f1       	breq	.+100    	; 0x1902 <register_code+0xf6>
    189e:	84 3b       	cpi	r24, 0xB4	; 180
    18a0:	99 f1       	breq	.+102    	; 0x1908 <register_code+0xfc>
    18a2:	85 3b       	cpi	r24, 0xB5	; 181
    18a4:	a1 f1       	breq	.+104    	; 0x190e <register_code+0x102>
    18a6:	86 3b       	cpi	r24, 0xB6	; 182
    18a8:	a9 f1       	breq	.+106    	; 0x1914 <register_code+0x108>
    18aa:	87 3b       	cpi	r24, 0xB7	; 183
    18ac:	b1 f1       	breq	.+108    	; 0x191a <register_code+0x10e>
    18ae:	88 3b       	cpi	r24, 0xB8	; 184
    18b0:	b9 f1       	breq	.+110    	; 0x1920 <register_code+0x114>
    18b2:	89 3b       	cpi	r24, 0xB9	; 185
    18b4:	c1 f1       	breq	.+112    	; 0x1926 <register_code+0x11a>
    18b6:	8a 3b       	cpi	r24, 0xBA	; 186
    18b8:	c9 f5       	brne	.+114    	; 0x192c <register_code+0x120>
    18ba:	8a e2       	ldi	r24, 0x2A	; 42
    18bc:	92 e0       	ldi	r25, 0x02	; 2
    18be:	38 c0       	rjmp	.+112    	; 0x1930 <register_code+0x124>
    18c0:	82 ee       	ldi	r24, 0xE2	; 226
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	35 c0       	rjmp	.+106    	; 0x1930 <register_code+0x124>
    18c6:	89 ee       	ldi	r24, 0xE9	; 233
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	32 c0       	rjmp	.+100    	; 0x1930 <register_code+0x124>
    18cc:	8a ee       	ldi	r24, 0xEA	; 234
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	2f c0       	rjmp	.+94     	; 0x1930 <register_code+0x124>
    18d2:	85 eb       	ldi	r24, 0xB5	; 181
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	2c c0       	rjmp	.+88     	; 0x1930 <register_code+0x124>
    18d8:	86 eb       	ldi	r24, 0xB6	; 182
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	29 c0       	rjmp	.+82     	; 0x1930 <register_code+0x124>
    18de:	87 eb       	ldi	r24, 0xB7	; 183
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	26 c0       	rjmp	.+76     	; 0x1930 <register_code+0x124>
    18e4:	8c ec       	ldi	r24, 0xCC	; 204
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	23 c0       	rjmp	.+70     	; 0x1930 <register_code+0x124>
    18ea:	8d ec       	ldi	r24, 0xCD	; 205
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	20 c0       	rjmp	.+64     	; 0x1930 <register_code+0x124>
    18f0:	83 e8       	ldi	r24, 0x83	; 131
    18f2:	91 e0       	ldi	r25, 0x01	; 1
    18f4:	1d c0       	rjmp	.+58     	; 0x1930 <register_code+0x124>
    18f6:	8a e8       	ldi	r24, 0x8A	; 138
    18f8:	91 e0       	ldi	r25, 0x01	; 1
    18fa:	1a c0       	rjmp	.+52     	; 0x1930 <register_code+0x124>
    18fc:	82 e9       	ldi	r24, 0x92	; 146
    18fe:	91 e0       	ldi	r25, 0x01	; 1
    1900:	17 c0       	rjmp	.+46     	; 0x1930 <register_code+0x124>
    1902:	84 e9       	ldi	r24, 0x94	; 148
    1904:	91 e0       	ldi	r25, 0x01	; 1
    1906:	14 c0       	rjmp	.+40     	; 0x1930 <register_code+0x124>
    1908:	81 e2       	ldi	r24, 0x21	; 33
    190a:	92 e0       	ldi	r25, 0x02	; 2
    190c:	11 c0       	rjmp	.+34     	; 0x1930 <register_code+0x124>
    190e:	83 e2       	ldi	r24, 0x23	; 35
    1910:	92 e0       	ldi	r25, 0x02	; 2
    1912:	0e c0       	rjmp	.+28     	; 0x1930 <register_code+0x124>
    1914:	84 e2       	ldi	r24, 0x24	; 36
    1916:	92 e0       	ldi	r25, 0x02	; 2
    1918:	0b c0       	rjmp	.+22     	; 0x1930 <register_code+0x124>
    191a:	85 e2       	ldi	r24, 0x25	; 37
    191c:	92 e0       	ldi	r25, 0x02	; 2
    191e:	08 c0       	rjmp	.+16     	; 0x1930 <register_code+0x124>
    1920:	86 e2       	ldi	r24, 0x26	; 38
    1922:	92 e0       	ldi	r25, 0x02	; 2
    1924:	05 c0       	rjmp	.+10     	; 0x1930 <register_code+0x124>
    1926:	87 e2       	ldi	r24, 0x27	; 39
    1928:	92 e0       	ldi	r25, 0x02	; 2
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <register_code+0x124>
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <host_consumer_send>
    1934:	08 95       	ret

00001936 <unregister_code>:
    }
}

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    1936:	88 23       	and	r24, r24
    1938:	31 f1       	breq	.+76     	; 0x1986 <unregister_code+0x50>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    193a:	98 2f       	mov	r25, r24
    193c:	94 50       	subi	r25, 0x04	; 4
    193e:	91 3a       	cpi	r25, 0xA1	; 161
    1940:	18 f4       	brcc	.+6      	; 0x1948 <unregister_code+0x12>
        del_key(code);
    1942:	0e 94 13 15 	call	0x2a26	; 0x2a26 <del_key>
    1946:	0e c0       	rjmp	.+28     	; 0x1964 <unregister_code+0x2e>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    1948:	98 2f       	mov	r25, r24
    194a:	90 5e       	subi	r25, 0xE0	; 224
    194c:	98 30       	cpi	r25, 0x08	; 8
    194e:	60 f4       	brcc	.+24     	; 0x1968 <unregister_code+0x32>
        del_mods(MOD_BIT(code));
    1950:	28 2f       	mov	r18, r24
    1952:	27 70       	andi	r18, 0x07	; 7
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	01 c0       	rjmp	.+2      	; 0x195c <unregister_code+0x26>
    195a:	88 0f       	add	r24, r24
    195c:	2a 95       	dec	r18
    195e:	ea f7       	brpl	.-6      	; 0x195a <unregister_code+0x24>
    1960:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <del_mods>
        send_keyboard_report();
    1964:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    1968:	98 2f       	mov	r25, r24
    196a:	95 5a       	subi	r25, 0xA5	; 165
    196c:	93 30       	cpi	r25, 0x03	; 3
    196e:	20 f4       	brcc	.+8      	; 0x1978 <unregister_code+0x42>
        host_system_send(0);
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    1978:	88 5a       	subi	r24, 0xA8	; 168
    197a:	83 31       	cpi	r24, 0x13	; 19
    197c:	20 f4       	brcc	.+8      	; 0x1986 <unregister_code+0x50>
        host_consumer_send(0);
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <host_consumer_send>
    1986:	08 95       	ret

00001988 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    1988:	88 23       	and	r24, r24
    198a:	21 f0       	breq	.+8      	; 0x1994 <register_mods+0xc>
        add_mods(mods);
    198c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <add_mods>
        send_keyboard_report();
    1990:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <send_keyboard_report>
    1994:	08 95       	ret

00001996 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    1996:	88 23       	and	r24, r24
    1998:	21 f0       	breq	.+8      	; 0x19a2 <unregister_mods+0xc>
        del_mods(mods);
    199a:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <del_mods>
        send_keyboard_report();
    199e:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <send_keyboard_report>
    19a2:	08 95       	ret

000019a4 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    19a4:	8f 92       	push	r8
    19a6:	9f 92       	push	r9
    19a8:	af 92       	push	r10
    19aa:	bf 92       	push	r11
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <process_action+0x12>
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <process_action+0x14>
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <process_action+0x16>
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	5c 01       	movw	r10, r24
    keyevent_t event = record->event;
    19c0:	85 e0       	ldi	r24, 0x05	; 5
    19c2:	f5 01       	movw	r30, r10
    19c4:	de 01       	movw	r26, r28
    19c6:	11 96       	adiw	r26, 0x01	; 1
    19c8:	01 90       	ld	r0, Z+
    19ca:	0d 92       	st	X+, r0
    19cc:	8a 95       	dec	r24
    19ce:	e1 f7       	brne	.-8      	; 0x19c8 <process_action+0x24>
    19d0:	f5 01       	movw	r30, r10
    19d2:	30 81       	ld	r19, Z
    19d4:	21 81       	ldd	r18, Z+1	; 0x01
    19d6:	92 80       	ldd	r9, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    19d8:	15 81       	ldd	r17, Z+5	; 0x05
    19da:	12 95       	swap	r17
    19dc:	1f 70       	andi	r17, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    19de:	83 81       	ldd	r24, Z+3	; 0x03
    19e0:	94 81       	ldd	r25, Z+4	; 0x04
    19e2:	89 2b       	or	r24, r25
    19e4:	39 f0       	breq	.+14     	; 0x19f4 <process_action+0x50>
    19e6:	2f 3f       	cpi	r18, 0xFF	; 255
    19e8:	41 f4       	brne	.+16     	; 0x19fa <process_action+0x56>
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	3f 3f       	cpi	r19, 0xFF	; 255
    19f0:	31 f0       	breq	.+12     	; 0x19fe <process_action+0x5a>
    19f2:	03 c0       	rjmp	.+6      	; 0x19fa <process_action+0x56>
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <process_action+0x5a>
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    19fe:	80 fd       	sbrc	r24, 0
    1a00:	94 c2       	rjmp	.+1320   	; 0x1f2a <process_action+0x586>

    action_t action = layer_switch_get_action(event.key);
    1a02:	39 83       	std	Y+1, r19	; 0x01
    1a04:	2a 83       	std	Y+2, r18	; 0x02
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0a:	0e 94 ac 14 	call	0x2958	; 0x2958 <layer_switch_get_action>
    1a0e:	09 2f       	mov	r16, r25
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    1a10:	8e 83       	std	Y+6, r24	; 0x06
    1a12:	0e 94 ab 14 	call	0x2956	; 0x2956 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    1a16:	0e 94 d5 13 	call	0x27aa	; 0x27aa <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    1a1a:	20 2f       	mov	r18, r16
    1a1c:	22 95       	swap	r18
    1a1e:	2f 70       	andi	r18, 0x0F	; 15
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	6e 81       	ldd	r22, Y+6	; 0x06
    1a24:	28 30       	cpi	r18, 0x08	; 8
    1a26:	31 05       	cpc	r19, r1
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <process_action+0x88>
    1a2a:	a2 c0       	rjmp	.+324    	; 0x1b70 <process_action+0x1cc>
    1a2c:	44 f4       	brge	.+16     	; 0x1a3e <process_action+0x9a>
    1a2e:	22 30       	cpi	r18, 0x02	; 2
    1a30:	31 05       	cpc	r19, r1
    1a32:	a4 f0       	brlt	.+40     	; 0x1a5c <process_action+0xb8>
    1a34:	24 30       	cpi	r18, 0x04	; 4
    1a36:	31 05       	cpc	r19, r1
    1a38:	0c f0       	brlt	.+2      	; 0x1a3c <process_action+0x98>
    1a3a:	77 c2       	rjmp	.+1262   	; 0x1f2a <process_action+0x586>
    1a3c:	3d c0       	rjmp	.+122    	; 0x1ab8 <process_action+0x114>
    1a3e:	2c 30       	cpi	r18, 0x0C	; 12
    1a40:	31 05       	cpc	r19, r1
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <process_action+0xa2>
    1a44:	4a c2       	rjmp	.+1172   	; 0x1eda <process_action+0x536>
    1a46:	2c f4       	brge	.+10     	; 0x1a52 <process_action+0xae>
    1a48:	2a 30       	cpi	r18, 0x0A	; 10
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	0c f4       	brge	.+2      	; 0x1a50 <process_action+0xac>
    1a4e:	6d c2       	rjmp	.+1242   	; 0x1f2a <process_action+0x586>
    1a50:	86 c1       	rjmp	.+780    	; 0x1d5e <process_action+0x3ba>
    1a52:	2f 30       	cpi	r18, 0x0F	; 15
    1a54:	31 05       	cpc	r19, r1
    1a56:	09 f0       	breq	.+2      	; 0x1a5a <process_action+0xb6>
    1a58:	68 c2       	rjmp	.+1232   	; 0x1f2a <process_action+0x586>
    1a5a:	54 c2       	rjmp	.+1192   	; 0x1f04 <process_action+0x560>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    1a5c:	80 2f       	mov	r24, r16
    1a5e:	80 7f       	andi	r24, 0xF0	; 240
    1a60:	10 2f       	mov	r17, r16
    1a62:	1f 70       	andi	r17, 0x0F	; 15
    1a64:	88 23       	and	r24, r24
    1a66:	11 f0       	breq	.+4      	; 0x1a6c <process_action+0xc8>
    1a68:	12 95       	swap	r17
    1a6a:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    1a6c:	99 20       	and	r9, r9
    1a6e:	59 f0       	breq	.+22     	; 0x1a86 <process_action+0xe2>
                    if (mods) {
    1a70:	11 23       	and	r17, r17
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <process_action+0xd2>
    1a74:	0d c2       	rjmp	.+1050   	; 0x1e90 <process_action+0x4ec>
                        add_weak_mods(mods);
    1a76:	81 2f       	mov	r24, r17
    1a78:	6e 83       	std	Y+6, r22	; 0x06
    1a7a:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <add_weak_mods>
                        send_keyboard_report();
    1a7e:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <send_keyboard_report>
    1a82:	6e 81       	ldd	r22, Y+6	; 0x06
    1a84:	05 c2       	rjmp	.+1034   	; 0x1e90 <process_action+0x4ec>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    1a86:	86 2f       	mov	r24, r22
    1a88:	0e 94 9b 0c 	call	0x1936	; 0x1936 <unregister_code>
                    if (mods) {
    1a8c:	11 23       	and	r17, r17
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <process_action+0xee>
    1a90:	4c c2       	rjmp	.+1176   	; 0x1f2a <process_action+0x586>
                        del_weak_mods(mods);
    1a92:	81 2f       	mov	r24, r17
    1a94:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    1a98:	26 96       	adiw	r28, 0x06	; 6
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	bf 90       	pop	r11
    1aae:	af 90       	pop	r10
    1ab0:	9f 90       	pop	r9
    1ab2:	8f 90       	pop	r8
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    1ab4:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    1ab8:	80 2f       	mov	r24, r16
    1aba:	80 7f       	andi	r24, 0xF0	; 240
    1abc:	0f 70       	andi	r16, 0x0F	; 15
    1abe:	80 32       	cpi	r24, 0x20	; 32
    1ac0:	11 f0       	breq	.+4      	; 0x1ac6 <process_action+0x122>
    1ac2:	02 95       	swap	r16
    1ac4:	00 7f       	andi	r16, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    1ac6:	66 23       	and	r22, r22
    1ac8:	21 f0       	breq	.+8      	; 0x1ad2 <process_action+0x12e>
    1aca:	61 30       	cpi	r22, 0x01	; 1
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <process_action+0x12c>
    1ace:	41 c0       	rjmp	.+130    	; 0x1b52 <process_action+0x1ae>
    1ad0:	21 c0       	rjmp	.+66     	; 0x1b14 <process_action+0x170>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    1ad2:	99 20       	and	r9, r9
    1ad4:	b1 f0       	breq	.+44     	; 0x1b02 <process_action+0x15e>
                            if (tap_count == 0) {
                                register_mods(mods);
    1ad6:	80 2f       	mov	r24, r16
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    1ad8:	11 11       	cpse	r17, r1
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <process_action+0x13a>
    1adc:	26 c0       	rjmp	.+76     	; 0x1b2a <process_action+0x186>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    1ade:	11 30       	cpi	r17, 0x01	; 1
    1ae0:	21 f5       	brne	.+72     	; 0x1b2a <process_action+0x186>
            break;
#endif
        default:
            break;
    }
}
    1ae2:	26 96       	adiw	r28, 0x06	; 6
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	1f 91       	pop	r17
    1af4:	0f 91       	pop	r16
    1af6:	bf 90       	pop	r11
    1af8:	af 90       	pop	r10
    1afa:	9f 90       	pop	r9
    1afc:	8f 90       	pop	r8
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    1afe:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    1b02:	11 11       	cpse	r17, r1
    1b04:	01 c0       	rjmp	.+2      	; 0x1b08 <process_action+0x164>
    1b06:	03 c0       	rjmp	.+6      	; 0x1b0e <process_action+0x16a>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    1b08:	11 30       	cpi	r17, 0x01	; 1
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <process_action+0x16a>
    1b0c:	0e c2       	rjmp	.+1052   	; 0x1f2a <process_action+0x586>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    1b0e:	0e 94 5d 15 	call	0x2aba	; 0x2aba <clear_oneshot_mods>
    1b12:	2c c0       	rjmp	.+88     	; 0x1b6c <process_action+0x1c8>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    1b14:	99 20       	and	r9, r9
    1b16:	c9 f0       	breq	.+50     	; 0x1b4a <process_action+0x1a6>
                            if (tap_count <= TAPPING_TOGGLE) {
    1b18:	16 30       	cpi	r17, 0x06	; 6
    1b1a:	08 f0       	brcs	.+2      	; 0x1b1e <process_action+0x17a>
    1b1c:	06 c2       	rjmp	.+1036   	; 0x1f2a <process_action+0x586>
                                if (mods & get_mods()) {
    1b1e:	0e 94 34 15 	call	0x2a68	; 0x2a68 <get_mods>
    1b22:	80 23       	and	r24, r16
    1b24:	09 f0       	breq	.+2      	; 0x1b28 <process_action+0x184>
    1b26:	22 c0       	rjmp	.+68     	; 0x1b6c <process_action+0x1c8>
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    1b28:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    1b2a:	26 96       	adiw	r28, 0x06	; 6
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	1f 91       	pop	r17
    1b3c:	0f 91       	pop	r16
    1b3e:	bf 90       	pop	r11
    1b40:	af 90       	pop	r10
    1b42:	9f 90       	pop	r9
    1b44:	8f 90       	pop	r8
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    1b46:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    1b4a:	15 30       	cpi	r17, 0x05	; 5
    1b4c:	08 f0       	brcs	.+2      	; 0x1b50 <process_action+0x1ac>
    1b4e:	ed c1       	rjmp	.+986    	; 0x1f2a <process_action+0x586>
    1b50:	0d c0       	rjmp	.+26     	; 0x1b6c <process_action+0x1c8>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    1b52:	99 20       	and	r9, r9
    1b54:	49 f0       	breq	.+18     	; 0x1b68 <process_action+0x1c4>
                            if (tap_count > 0) {
    1b56:	11 23       	and	r17, r17
    1b58:	39 f3       	breq	.-50     	; 0x1b28 <process_action+0x184>
                                if (record->tap.interrupted) {
    1b5a:	f5 01       	movw	r30, r10
    1b5c:	85 81       	ldd	r24, Z+5	; 0x05
    1b5e:	80 ff       	sbrs	r24, 0
    1b60:	97 c1       	rjmp	.+814    	; 0x1e90 <process_action+0x4ec>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    1b62:	8f 70       	andi	r24, 0x0F	; 15
    1b64:	85 83       	std	Z+5, r24	; 0x05
    1b66:	e0 cf       	rjmp	.-64     	; 0x1b28 <process_action+0x184>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    1b68:	11 11       	cpse	r17, r1
    1b6a:	a6 c1       	rjmp	.+844    	; 0x1eb8 <process_action+0x514>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    1b6c:	80 2f       	mov	r24, r16
    1b6e:	13 c1       	rjmp	.+550    	; 0x1d96 <process_action+0x3f2>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    1b70:	80 2f       	mov	r24, r16
    1b72:	83 70       	andi	r24, 0x03	; 3
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <process_action+0x1d4>
    1b76:	76 c0       	rjmp	.+236    	; 0x1c64 <process_action+0x2c0>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    1b78:	91 10       	cpse	r9, r1
    1b7a:	d7 c1       	rjmp	.+942    	; 0x1f2a <process_action+0x586>
                    uint8_t shift = action.layer_bitop.part*4;
    1b7c:	26 2f       	mov	r18, r22
    1b7e:	22 95       	swap	r18
    1b80:	26 95       	lsr	r18
    1b82:	27 70       	andi	r18, 0x07	; 7
    1b84:	22 0f       	add	r18, r18
    1b86:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    1b88:	86 2f       	mov	r24, r22
    1b8a:	8f 70       	andi	r24, 0x0F	; 15
    1b8c:	88 2e       	mov	r8, r24
    1b8e:	91 2c       	mov	r9, r1
    1b90:	a1 2c       	mov	r10, r1
    1b92:	b1 2c       	mov	r11, r1
    1b94:	02 2e       	mov	r0, r18
    1b96:	04 c0       	rjmp	.+8      	; 0x1ba0 <process_action+0x1fc>
    1b98:	88 0c       	add	r8, r8
    1b9a:	99 1c       	adc	r9, r9
    1b9c:	aa 1c       	adc	r10, r10
    1b9e:	bb 1c       	adc	r11, r11
    1ba0:	0a 94       	dec	r0
    1ba2:	d2 f7       	brpl	.-12     	; 0x1b98 <process_action+0x1f4>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    1ba4:	64 ff       	sbrs	r22, 4
    1ba6:	10 c0       	rjmp	.+32     	; 0x1bc8 <process_action+0x224>
    1ba8:	6f e0       	ldi	r22, 0x0F	; 15
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	04 c0       	rjmp	.+8      	; 0x1bba <process_action+0x216>
    1bb2:	66 0f       	add	r22, r22
    1bb4:	77 1f       	adc	r23, r23
    1bb6:	88 1f       	adc	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	2a 95       	dec	r18
    1bbc:	d2 f7       	brpl	.-12     	; 0x1bb2 <process_action+0x20e>
    1bbe:	60 95       	com	r22
    1bc0:	70 95       	com	r23
    1bc2:	80 95       	com	r24
    1bc4:	90 95       	com	r25
    1bc6:	03 c0       	rjmp	.+6      	; 0x1bce <process_action+0x22a>
    1bc8:	60 e0       	ldi	r22, 0x00	; 0
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    1bce:	20 2f       	mov	r18, r16
    1bd0:	26 95       	lsr	r18
    1bd2:	26 95       	lsr	r18
    1bd4:	23 70       	andi	r18, 0x03	; 3
    1bd6:	42 2f       	mov	r20, r18
    1bd8:	50 e0       	ldi	r21, 0x00	; 0
    1bda:	42 30       	cpi	r20, 0x02	; 2
    1bdc:	51 05       	cpc	r21, r1
    1bde:	d1 f0       	breq	.+52     	; 0x1c14 <process_action+0x270>
    1be0:	43 30       	cpi	r20, 0x03	; 3
    1be2:	51 05       	cpc	r21, r1
    1be4:	59 f1       	breq	.+86     	; 0x1c3c <process_action+0x298>
    1be6:	68 29       	or	r22, r8
    1be8:	79 29       	or	r23, r9
    1bea:	8a 29       	or	r24, r10
    1bec:	9b 29       	or	r25, r11
    1bee:	41 30       	cpi	r20, 0x01	; 1
    1bf0:	51 05       	cpc	r21, r1
    1bf2:	41 f1       	breq	.+80     	; 0x1c44 <process_action+0x2a0>
            break;
#endif
        default:
            break;
    }
}
    1bf4:	26 96       	adiw	r28, 0x06	; 6
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	1f 91       	pop	r17
    1c06:	0f 91       	pop	r16
    1c08:	bf 90       	pop	r11
    1c0a:	af 90       	pop	r10
    1c0c:	9f 90       	pop	r9
    1c0e:	8f 90       	pop	r8
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    1c10:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    1c14:	68 29       	or	r22, r8
    1c16:	79 29       	or	r23, r9
    1c18:	8a 29       	or	r24, r10
    1c1a:	9b 29       	or	r25, r11
            break;
#endif
        default:
            break;
    }
}
    1c1c:	26 96       	adiw	r28, 0x06	; 6
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	1f 91       	pop	r17
    1c2e:	0f 91       	pop	r16
    1c30:	bf 90       	pop	r11
    1c32:	af 90       	pop	r10
    1c34:	9f 90       	pop	r9
    1c36:	8f 90       	pop	r8
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    1c38:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    1c3c:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <default_layer_and>
    1c40:	c5 01       	movw	r24, r10
    1c42:	b4 01       	movw	r22, r8
            break;
#endif
        default:
            break;
    }
}
    1c44:	26 96       	adiw	r28, 0x06	; 6
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	df 91       	pop	r29
    1c52:	cf 91       	pop	r28
    1c54:	1f 91       	pop	r17
    1c56:	0f 91       	pop	r16
    1c58:	bf 90       	pop	r11
    1c5a:	af 90       	pop	r10
    1c5c:	9f 90       	pop	r9
    1c5e:	8f 90       	pop	r8
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    1c60:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    1c64:	99 20       	and	r9, r9
    1c66:	19 f0       	breq	.+6      	; 0x1c6e <process_action+0x2ca>
    1c68:	80 2f       	mov	r24, r16
    1c6a:	81 70       	andi	r24, 0x01	; 1
    1c6c:	01 c0       	rjmp	.+2      	; 0x1c70 <process_action+0x2cc>
    1c6e:	86 95       	lsr	r24
    1c70:	88 23       	and	r24, r24
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <process_action+0x2d2>
    1c74:	5a c1       	rjmp	.+692    	; 0x1f2a <process_action+0x586>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    1c76:	26 2f       	mov	r18, r22
    1c78:	22 95       	swap	r18
    1c7a:	26 95       	lsr	r18
    1c7c:	27 70       	andi	r18, 0x07	; 7
    1c7e:	22 0f       	add	r18, r18
    1c80:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    1c82:	86 2f       	mov	r24, r22
    1c84:	8f 70       	andi	r24, 0x0F	; 15
    1c86:	88 2e       	mov	r8, r24
    1c88:	91 2c       	mov	r9, r1
    1c8a:	a1 2c       	mov	r10, r1
    1c8c:	b1 2c       	mov	r11, r1
    1c8e:	02 2e       	mov	r0, r18
    1c90:	04 c0       	rjmp	.+8      	; 0x1c9a <process_action+0x2f6>
    1c92:	88 0c       	add	r8, r8
    1c94:	99 1c       	adc	r9, r9
    1c96:	aa 1c       	adc	r10, r10
    1c98:	bb 1c       	adc	r11, r11
    1c9a:	0a 94       	dec	r0
    1c9c:	d2 f7       	brpl	.-12     	; 0x1c92 <process_action+0x2ee>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    1c9e:	64 ff       	sbrs	r22, 4
    1ca0:	10 c0       	rjmp	.+32     	; 0x1cc2 <process_action+0x31e>
    1ca2:	6f e0       	ldi	r22, 0x0F	; 15
    1ca4:	70 e0       	ldi	r23, 0x00	; 0
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	04 c0       	rjmp	.+8      	; 0x1cb4 <process_action+0x310>
    1cac:	66 0f       	add	r22, r22
    1cae:	77 1f       	adc	r23, r23
    1cb0:	88 1f       	adc	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	2a 95       	dec	r18
    1cb6:	d2 f7       	brpl	.-12     	; 0x1cac <process_action+0x308>
    1cb8:	60 95       	com	r22
    1cba:	70 95       	com	r23
    1cbc:	80 95       	com	r24
    1cbe:	90 95       	com	r25
    1cc0:	03 c0       	rjmp	.+6      	; 0x1cc8 <process_action+0x324>
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
    1cc4:	70 e0       	ldi	r23, 0x00	; 0
    1cc6:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    1cc8:	20 2f       	mov	r18, r16
    1cca:	26 95       	lsr	r18
    1ccc:	26 95       	lsr	r18
    1cce:	23 70       	andi	r18, 0x03	; 3
    1cd0:	42 2f       	mov	r20, r18
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	42 30       	cpi	r20, 0x02	; 2
    1cd6:	51 05       	cpc	r21, r1
    1cd8:	d1 f0       	breq	.+52     	; 0x1d0e <process_action+0x36a>
    1cda:	43 30       	cpi	r20, 0x03	; 3
    1cdc:	51 05       	cpc	r21, r1
    1cde:	59 f1       	breq	.+86     	; 0x1d36 <process_action+0x392>
    1ce0:	68 29       	or	r22, r8
    1ce2:	79 29       	or	r23, r9
    1ce4:	8a 29       	or	r24, r10
    1ce6:	9b 29       	or	r25, r11
    1ce8:	41 30       	cpi	r20, 0x01	; 1
    1cea:	51 05       	cpc	r21, r1
    1cec:	41 f1       	breq	.+80     	; 0x1d3e <process_action+0x39a>
            break;
#endif
        default:
            break;
    }
}
    1cee:	26 96       	adiw	r28, 0x06	; 6
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	1f 91       	pop	r17
    1d00:	0f 91       	pop	r16
    1d02:	bf 90       	pop	r11
    1d04:	af 90       	pop	r10
    1d06:	9f 90       	pop	r9
    1d08:	8f 90       	pop	r8
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    1d0a:	0c 94 87 14 	jmp	0x290e	; 0x290e <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    1d0e:	68 29       	or	r22, r8
    1d10:	79 29       	or	r23, r9
    1d12:	8a 29       	or	r24, r10
    1d14:	9b 29       	or	r25, r11
            break;
#endif
        default:
            break;
    }
}
    1d16:	26 96       	adiw	r28, 0x06	; 6
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	1f 91       	pop	r17
    1d28:	0f 91       	pop	r16
    1d2a:	bf 90       	pop	r11
    1d2c:	af 90       	pop	r10
    1d2e:	9f 90       	pop	r9
    1d30:	8f 90       	pop	r8
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    1d32:	0c 94 99 14 	jmp	0x2932	; 0x2932 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    1d36:	0e 94 87 14 	call	0x290e	; 0x290e <layer_and>
    1d3a:	c5 01       	movw	r24, r10
    1d3c:	b4 01       	movw	r22, r8
            break;
#endif
        default:
            break;
    }
}
    1d3e:	26 96       	adiw	r28, 0x06	; 6
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	1f 91       	pop	r17
    1d50:	0f 91       	pop	r16
    1d52:	bf 90       	pop	r11
    1d54:	af 90       	pop	r10
    1d56:	9f 90       	pop	r9
    1d58:	8f 90       	pop	r8
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    1d5a:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    1d5e:	60 3f       	cpi	r22, 0xF0	; 240
    1d60:	51 f1       	breq	.+84     	; 0x1db6 <process_action+0x412>
    1d62:	20 f4       	brcc	.+8      	; 0x1d6c <process_action+0x3c8>
    1d64:	60 3e       	cpi	r22, 0xE0	; 224
    1d66:	08 f4       	brcc	.+2      	; 0x1d6a <process_action+0x3c6>
    1d68:	8e c0       	rjmp	.+284    	; 0x1e86 <process_action+0x4e2>
    1d6a:	08 c0       	rjmp	.+16     	; 0x1d7c <process_action+0x3d8>
    1d6c:	62 3f       	cpi	r22, 0xF2	; 242
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <process_action+0x3ce>
    1d70:	63 c0       	rjmp	.+198    	; 0x1e38 <process_action+0x494>
    1d72:	e0 f1       	brcs	.+120    	; 0x1dec <process_action+0x448>
    1d74:	63 3f       	cpi	r22, 0xF3	; 243
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <process_action+0x3d6>
    1d78:	86 c0       	rjmp	.+268    	; 0x1e86 <process_action+0x4e2>
    1d7a:	61 c0       	rjmp	.+194    	; 0x1e3e <process_action+0x49a>
    1d7c:	16 2f       	mov	r17, r22
    1d7e:	1f 70       	andi	r17, 0x0F	; 15
    1d80:	80 2f       	mov	r24, r16
    1d82:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    1d84:	99 20       	and	r9, r9
    1d86:	21 f0       	breq	.+8      	; 0x1d90 <process_action+0x3ec>
                        layer_on(action.layer_tap.val);
    1d88:	0e 94 20 14 	call	0x2840	; 0x2840 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    1d8c:	81 2f       	mov	r24, r17
    1d8e:	cd ce       	rjmp	.-614    	; 0x1b2a <process_action+0x186>
                    } else {
                        layer_off(action.layer_tap.val);
    1d90:	0e 94 3b 14 	call	0x2876	; 0x2876 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    1d94:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    1d96:	26 96       	adiw	r28, 0x06	; 6
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	0f 91       	pop	r16
    1daa:	bf 90       	pop	r11
    1dac:	af 90       	pop	r10
    1dae:	9f 90       	pop	r9
    1db0:	8f 90       	pop	r8
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    1db2:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    1db6:	99 20       	and	r9, r9
    1db8:	a9 f0       	breq	.+42     	; 0x1de4 <process_action+0x440>
                        if (tap_count < TAPPING_TOGGLE) {
    1dba:	15 30       	cpi	r17, 0x05	; 5
    1dbc:	08 f0       	brcs	.+2      	; 0x1dc0 <process_action+0x41c>
    1dbe:	b5 c0       	rjmp	.+362    	; 0x1f2a <process_action+0x586>
                            layer_invert(action.layer_tap.val);
    1dc0:	80 2f       	mov	r24, r16
    1dc2:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    1dc4:	26 96       	adiw	r28, 0x06	; 6
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	bf 90       	pop	r11
    1dda:	af 90       	pop	r10
    1ddc:	9f 90       	pop	r9
    1dde:	8f 90       	pop	r8
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    1de0:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    1de4:	16 30       	cpi	r17, 0x06	; 6
    1de6:	08 f0       	brcs	.+2      	; 0x1dea <process_action+0x446>
    1de8:	a0 c0       	rjmp	.+320    	; 0x1f2a <process_action+0x586>
    1dea:	ea cf       	rjmp	.-44     	; 0x1dc0 <process_action+0x41c>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    1dec:	99 20       	and	r9, r9
    1dee:	91 f0       	breq	.+36     	; 0x1e14 <process_action+0x470>
    1df0:	80 2f       	mov	r24, r16
    1df2:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    1df4:	26 96       	adiw	r28, 0x06	; 6
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	1f 91       	pop	r17
    1e06:	0f 91       	pop	r16
    1e08:	bf 90       	pop	r11
    1e0a:	af 90       	pop	r10
    1e0c:	9f 90       	pop	r9
    1e0e:	8f 90       	pop	r8
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    1e10:	0c 94 20 14 	jmp	0x2840	; 0x2840 <layer_on>
                                    layer_off(action.layer_tap.val);
    1e14:	80 2f       	mov	r24, r16
    1e16:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    1e18:	26 96       	adiw	r28, 0x06	; 6
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	1f 91       	pop	r17
    1e2a:	0f 91       	pop	r16
    1e2c:	bf 90       	pop	r11
    1e2e:	af 90       	pop	r10
    1e30:	9f 90       	pop	r9
    1e32:	8f 90       	pop	r8
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    1e34:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <layer_off>
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    1e38:	91 10       	cpse	r9, r1
    1e3a:	ec cf       	rjmp	.-40     	; 0x1e14 <process_action+0x470>
    1e3c:	d9 cf       	rjmp	.-78     	; 0x1df0 <process_action+0x44c>
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    1e3e:	99 20       	and	r9, r9
    1e40:	91 f0       	breq	.+36     	; 0x1e66 <process_action+0x4c2>
    1e42:	80 2f       	mov	r24, r16
    1e44:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    1e46:	26 96       	adiw	r28, 0x06	; 6
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	de bf       	out	0x3e, r29	; 62
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	cd bf       	out	0x3d, r28	; 61
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	bf 90       	pop	r11
    1e5c:	af 90       	pop	r10
    1e5e:	9f 90       	pop	r9
    1e60:	8f 90       	pop	r8
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    1e62:	0c 94 11 14 	jmp	0x2822	; 0x2822 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    1e66:	26 96       	adiw	r28, 0x06	; 6
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	bf 90       	pop	r11
    1e7c:	af 90       	pop	r10
    1e7e:	9f 90       	pop	r9
    1e80:	8f 90       	pop	r8
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    1e82:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    1e86:	99 20       	and	r9, r9
    1e88:	a1 f0       	breq	.+40     	; 0x1eb2 <process_action+0x50e>
                        if (tap_count > 0) {
    1e8a:	11 23       	and	r17, r17
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <process_action+0x4ec>
    1e8e:	b0 cf       	rjmp	.-160    	; 0x1df0 <process_action+0x44c>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    1e90:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    1e92:	26 96       	adiw	r28, 0x06	; 6
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	1f 91       	pop	r17
    1ea4:	0f 91       	pop	r16
    1ea6:	bf 90       	pop	r11
    1ea8:	af 90       	pop	r10
    1eaa:	9f 90       	pop	r9
    1eac:	8f 90       	pop	r8
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    1eae:	0c 94 06 0c 	jmp	0x180c	; 0x180c <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    1eb2:	11 23       	and	r17, r17
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <process_action+0x514>
    1eb6:	ae cf       	rjmp	.-164    	; 0x1e14 <process_action+0x470>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    1eb8:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    1eba:	26 96       	adiw	r28, 0x06	; 6
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	1f 91       	pop	r17
    1ecc:	0f 91       	pop	r16
    1ece:	bf 90       	pop	r11
    1ed0:	af 90       	pop	r10
    1ed2:	9f 90       	pop	r9
    1ed4:	8f 90       	pop	r8
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    1ed6:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    1eda:	40 2f       	mov	r20, r16
    1edc:	4f 70       	andi	r20, 0x0F	; 15
    1ede:	c5 01       	movw	r24, r10
    1ee0:	0e 94 65 16 	call	0x2cca	; 0x2cca <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    1ee4:	26 96       	adiw	r28, 0x06	; 6
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	1f 91       	pop	r17
    1ef6:	0f 91       	pop	r16
    1ef8:	bf 90       	pop	r11
    1efa:	af 90       	pop	r10
    1efc:	9f 90       	pop	r9
    1efe:	8f 90       	pop	r8
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    1f00:	0c 94 22 13 	jmp	0x2644	; 0x2644 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    1f04:	40 2f       	mov	r20, r16
    1f06:	4f 70       	andi	r20, 0x0F	; 15
    1f08:	c5 01       	movw	r24, r10
            break;
#endif
        default:
            break;
    }
}
    1f0a:	26 96       	adiw	r28, 0x06	; 6
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61
    1f16:	df 91       	pop	r29
    1f18:	cf 91       	pop	r28
    1f1a:	1f 91       	pop	r17
    1f1c:	0f 91       	pop	r16
    1f1e:	bf 90       	pop	r11
    1f20:	af 90       	pop	r10
    1f22:	9f 90       	pop	r9
    1f24:	8f 90       	pop	r8
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    1f26:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <action_function>
            break;
#endif
        default:
            break;
    }
}
    1f2a:	26 96       	adiw	r28, 0x06	; 6
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	1f 91       	pop	r17
    1f3c:	0f 91       	pop	r16
    1f3e:	bf 90       	pop	r11
    1f40:	af 90       	pop	r10
    1f42:	9f 90       	pop	r9
    1f44:	8f 90       	pop	r8
    1f46:	08 95       	ret

00001f48 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    1f48:	0e 94 57 15 	call	0x2aae	; 0x2aae <clear_weak_mods>
    clear_keys();
    1f4c:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <clear_keys>
    send_keyboard_report();
    1f50:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <send_keyboard_report>

00001f54 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    1f54:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <clear_mods>
    clear_keyboard_but_mods();
    1f58:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <clear_keyboard_but_mods>

00001f5c <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    1f5c:	0e 94 ac 14 	call	0x2958	; 0x2958 <layer_switch_get_action>

    switch (action.kind.id) {
    1f60:	29 2f       	mov	r18, r25
    1f62:	22 95       	swap	r18
    1f64:	2f 70       	andi	r18, 0x0F	; 15
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	2c 30       	cpi	r18, 0x0C	; 12
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	4c f4       	brge	.+18     	; 0x1f80 <is_tap_key+0x24>
    1f6e:	2a 30       	cpi	r18, 0x0A	; 10
    1f70:	31 05       	cpc	r19, r1
    1f72:	6c f4       	brge	.+26     	; 0x1f8e <is_tap_key+0x32>
    1f74:	22 50       	subi	r18, 0x02	; 2
    1f76:	31 09       	sbc	r19, r1
    1f78:	22 30       	cpi	r18, 0x02	; 2
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	90 f4       	brcc	.+36     	; 0x1fa2 <is_tap_key+0x46>
    1f7e:	07 c0       	rjmp	.+14     	; 0x1f8e <is_tap_key+0x32>
    1f80:	2c 30       	cpi	r18, 0x0C	; 12
    1f82:	31 05       	cpc	r19, r1
    1f84:	51 f0       	breq	.+20     	; 0x1f9a <is_tap_key+0x3e>
    1f86:	2f 30       	cpi	r18, 0x0F	; 15
    1f88:	31 05       	cpc	r19, r1
    1f8a:	59 f4       	brne	.+22     	; 0x1fa2 <is_tap_key+0x46>
    1f8c:	06 c0       	rjmp	.+12     	; 0x1f9a <is_tap_key+0x3e>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    1f8e:	80 3e       	cpi	r24, 0xE0	; 224
    1f90:	10 f0       	brcs	.+4      	; 0x1f96 <is_tap_key+0x3a>
    1f92:	80 3f       	cpi	r24, 0xF0	; 240
    1f94:	31 f4       	brne	.+12     	; 0x1fa2 <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    1f9a:	93 fb       	bst	r25, 3
    1f9c:	88 27       	eor	r24, r24
    1f9e:	80 f9       	bld	r24, 0
    1fa0:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    1fa4:	08 95       	ret

00001fa6 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	00 d0       	rcall	.+0      	; 0x1fac <debug_event+0x6>
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <debug_event+0x8>
    1fae:	1f 92       	push	r1
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	08 95       	ret

00001fc4 <debug_record>:

void debug_record(keyrecord_t record)
{
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <debug_record+0x6>
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <debug_record+0x8>
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <debug_record+0xa>
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    1fd2:	26 96       	adiw	r28, 0x06	; 6
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	08 95       	ret

00001fe4 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	cf 93       	push	r28
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    1fea:	90 91 97 01 	lds	r25, 0x0197
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    1fee:	c6 e0       	ldi	r28, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    1ff0:	15 c0       	rjmp	.+42     	; 0x201c <debug_waiting_buffer+0x38>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    1ff2:	e9 2e       	mov	r14, r25
    1ff4:	f1 2c       	mov	r15, r1
    1ff6:	ce 9d       	mul	r28, r14
    1ff8:	f0 01       	movw	r30, r0
    1ffa:	cf 9d       	mul	r28, r15
    1ffc:	f0 0d       	add	r31, r0
    1ffe:	11 24       	eor	r1, r1
    2000:	e9 59       	subi	r30, 0x99	; 153
    2002:	fe 4f       	sbci	r31, 0xFE	; 254
    2004:	40 81       	ld	r20, Z
    2006:	51 81       	ldd	r21, Z+1	; 0x01
    2008:	62 81       	ldd	r22, Z+2	; 0x02
    200a:	73 81       	ldd	r23, Z+3	; 0x03
    200c:	84 81       	ldd	r24, Z+4	; 0x04
    200e:	95 81       	ldd	r25, Z+5	; 0x05
    2010:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2014:	c7 01       	movw	r24, r14
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	98 2f       	mov	r25, r24
    201a:	97 70       	andi	r25, 0x07	; 7
    201c:	80 91 98 01 	lds	r24, 0x0198
    2020:	98 13       	cpse	r25, r24
    2022:	e7 cf       	rjmp	.-50     	; 0x1ff2 <debug_waiting_buffer+0xe>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2024:	cf 91       	pop	r28
    2026:	ff 90       	pop	r15
    2028:	ef 90       	pop	r14
    202a:	08 95       	ret

0000202c <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    202c:	40 91 61 01 	lds	r20, 0x0161
    2030:	50 91 62 01 	lds	r21, 0x0162
    2034:	60 91 63 01 	lds	r22, 0x0163
    2038:	70 91 64 01 	lds	r23, 0x0164
    203c:	80 91 65 01 	lds	r24, 0x0165
    2040:	90 91 66 01 	lds	r25, 0x0166
    2044:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <debug_record>

00002048 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2048:	0f 93       	push	r16
    204a:	1f 93       	push	r17
    204c:	cf 93       	push	r28
    204e:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2050:	80 91 66 01 	lds	r24, 0x0166
    2054:	82 95       	swap	r24
    2056:	8f 70       	andi	r24, 0x0F	; 15
    2058:	09 f0       	breq	.+2      	; 0x205c <waiting_buffer_scan_tap+0x14>
    205a:	69 c0       	rjmp	.+210    	; 0x212e <__stack+0x2f>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    205c:	80 91 63 01 	lds	r24, 0x0163
    2060:	88 23       	and	r24, r24
    2062:	09 f4       	brne	.+2      	; 0x2066 <waiting_buffer_scan_tap+0x1e>
    2064:	64 c0       	rjmp	.+200    	; 0x212e <__stack+0x2f>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2066:	a0 91 97 01 	lds	r26, 0x0197
    206a:	d0 91 98 01 	lds	r29, 0x0198
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    206e:	b0 91 61 01 	lds	r27, 0x0161
    2072:	c0 91 62 01 	lds	r28, 0x0162
    2076:	80 91 64 01 	lds	r24, 0x0164
    207a:	90 91 65 01 	lds	r25, 0x0165
    207e:	21 e0       	ldi	r18, 0x01	; 1
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	bf 3f       	cpi	r27, 0xFF	; 255
    2084:	11 f0       	breq	.+4      	; 0x208a <waiting_buffer_scan_tap+0x42>
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	12 2f       	mov	r17, r18
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    208c:	bc 01       	movw	r22, r24
    208e:	60 95       	com	r22
    2090:	70 95       	com	r23
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2092:	06 e0       	ldi	r16, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2094:	4a c0       	rjmp	.+148    	; 0x212a <__stack+0x2b>
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	21 f0       	breq	.+8      	; 0x20a2 <waiting_buffer_scan_tap+0x5a>
    209a:	cf 3f       	cpi	r28, 0xFF	; 255
    209c:	29 f4       	brne	.+10     	; 0x20a8 <waiting_buffer_scan_tap+0x60>
    209e:	21 2f       	mov	r18, r17
    20a0:	05 c0       	rjmp	.+10     	; 0x20ac <waiting_buffer_scan_tap+0x64>
    20a2:	21 e0       	ldi	r18, 0x01	; 1
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <waiting_buffer_scan_tap+0x64>
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    20ac:	20 fd       	sbrc	r18, 0
    20ae:	3b c0       	rjmp	.+118    	; 0x2126 <__stack+0x27>
    20b0:	4a 2f       	mov	r20, r26
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	04 9f       	mul	r16, r20
    20b6:	f0 01       	movw	r30, r0
    20b8:	05 9f       	mul	r16, r21
    20ba:	f0 0d       	add	r31, r0
    20bc:	11 24       	eor	r1, r1
    20be:	e9 59       	subi	r30, 0x99	; 153
    20c0:	fe 4f       	sbci	r31, 0xFE	; 254
    20c2:	21 81       	ldd	r18, Z+1	; 0x01
    20c4:	c2 13       	cpse	r28, r18
    20c6:	2f c0       	rjmp	.+94     	; 0x2126 <__stack+0x27>
    20c8:	20 81       	ld	r18, Z
    20ca:	b2 13       	cpse	r27, r18
    20cc:	2c c0       	rjmp	.+88     	; 0x2126 <__stack+0x27>
    20ce:	22 81       	ldd	r18, Z+2	; 0x02
    20d0:	21 11       	cpse	r18, r1
    20d2:	29 c0       	rjmp	.+82     	; 0x2126 <__stack+0x27>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    20d4:	23 81       	ldd	r18, Z+3	; 0x03
    20d6:	34 81       	ldd	r19, Z+4	; 0x04
    20d8:	28 17       	cp	r18, r24
    20da:	39 07       	cpc	r19, r25
    20dc:	18 f0       	brcs	.+6      	; 0x20e4 <waiting_buffer_scan_tap+0x9c>
    20de:	28 1b       	sub	r18, r24
    20e0:	39 0b       	sbc	r19, r25
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <waiting_buffer_scan_tap+0xa0>
    20e4:	26 0f       	add	r18, r22
    20e6:	37 1f       	adc	r19, r23
    20e8:	28 3c       	cpi	r18, 0xC8	; 200
    20ea:	31 05       	cpc	r19, r1
    20ec:	e0 f4       	brcc	.+56     	; 0x2126 <__stack+0x27>
            tapping_key.tap.count = 1;
    20ee:	80 91 66 01 	lds	r24, 0x0166
    20f2:	8f 70       	andi	r24, 0x0F	; 15
    20f4:	80 61       	ori	r24, 0x10	; 16
    20f6:	80 93 66 01 	sts	0x0166, r24
            waiting_buffer[i].tap.count = 1;
    20fa:	86 e0       	ldi	r24, 0x06	; 6
    20fc:	84 9f       	mul	r24, r20
    20fe:	f0 01       	movw	r30, r0
    2100:	85 9f       	mul	r24, r21
    2102:	f0 0d       	add	r31, r0
    2104:	11 24       	eor	r1, r1
    2106:	e4 59       	subi	r30, 0x94	; 148
    2108:	fe 4f       	sbci	r31, 0xFE	; 254
    210a:	80 81       	ld	r24, Z
    210c:	8f 70       	andi	r24, 0x0F	; 15
    210e:	80 61       	ori	r24, 0x10	; 16
    2110:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2112:	81 e6       	ldi	r24, 0x61	; 97
    2114:	91 e0       	ldi	r25, 0x01	; 1
    2116:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2122:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2126:	af 5f       	subi	r26, 0xFF	; 255
    2128:	a7 70       	andi	r26, 0x07	; 7
    212a:	ad 13       	cpse	r26, r29
    212c:	b4 cf       	rjmp	.-152    	; 0x2096 <waiting_buffer_scan_tap+0x4e>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	1f 91       	pop	r17
    2134:	0f 91       	pop	r16
    2136:	08 95       	ret

00002138 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2138:	cf 92       	push	r12
    213a:	df 92       	push	r13
    213c:	ef 92       	push	r14
    213e:	ff 92       	push	r15
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	62 97       	sbiw	r28, 0x12	; 18
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	f8 94       	cli
    214e:	de bf       	out	0x3e, r29	; 62
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	cd bf       	out	0x3d, r28	; 61
    2154:	7c 01       	movw	r14, r24
    keyevent_t event = keyp->event;
    2156:	85 e0       	ldi	r24, 0x05	; 5
    2158:	f7 01       	movw	r30, r14
    215a:	de 01       	movw	r26, r28
    215c:	1d 96       	adiw	r26, 0x0d	; 13
    215e:	01 90       	ld	r0, Z+
    2160:	0d 92       	st	X+, r0
    2162:	8a 95       	dec	r24
    2164:	e1 f7       	brne	.-8      	; 0x215e <process_tapping+0x26>
    2166:	d7 01       	movw	r26, r14
    2168:	4c 91       	ld	r20, X
    216a:	11 96       	adiw	r26, 0x01	; 1
    216c:	5c 91       	ld	r21, X
    216e:	11 97       	sbiw	r26, 0x01	; 1
    2170:	12 96       	adiw	r26, 0x02	; 2
    2172:	6c 91       	ld	r22, X
    2174:	12 97       	sbiw	r26, 0x02	; 2
    2176:	13 96       	adiw	r26, 0x03	; 3
    2178:	cd 90       	ld	r12, X+
    217a:	dc 90       	ld	r13, X
    217c:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    217e:	70 91 61 01 	lds	r23, 0x0161
    2182:	e0 91 62 01 	lds	r30, 0x0162
    2186:	80 91 64 01 	lds	r24, 0x0164
    218a:	90 91 65 01 	lds	r25, 0x0165
    218e:	00 97       	sbiw	r24, 0x00	; 0
    2190:	39 f0       	breq	.+14     	; 0x21a0 <process_tapping+0x68>
    2192:	ef 3f       	cpi	r30, 0xFF	; 255
    2194:	41 f4       	brne	.+16     	; 0x21a6 <process_tapping+0x6e>
    2196:	21 e0       	ldi	r18, 0x01	; 1
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	7f 3f       	cpi	r23, 0xFF	; 255
    219c:	31 f0       	breq	.+12     	; 0x21aa <process_tapping+0x72>
    219e:	03 c0       	rjmp	.+6      	; 0x21a6 <process_tapping+0x6e>
    21a0:	21 e0       	ldi	r18, 0x01	; 1
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <process_tapping+0x72>
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	20 fd       	sbrc	r18, 0
    21ac:	5c c1       	rjmp	.+696    	; 0x2466 <process_tapping+0x32e>
    21ae:	20 91 63 01 	lds	r18, 0x0163
    21b2:	22 23       	and	r18, r18
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <process_tapping+0x80>
    21b6:	f1 c0       	rjmp	.+482    	; 0x239a <process_tapping+0x262>
        if (WITHIN_TAPPING_TERM(event)) {
    21b8:	c8 16       	cp	r12, r24
    21ba:	d9 06       	cpc	r13, r25
    21bc:	28 f0       	brcs	.+10     	; 0x21c8 <process_tapping+0x90>
    21be:	96 01       	movw	r18, r12
    21c0:	28 1b       	sub	r18, r24
    21c2:	39 0b       	sbc	r19, r25
    21c4:	c9 01       	movw	r24, r18
    21c6:	04 c0       	rjmp	.+8      	; 0x21d0 <process_tapping+0x98>
    21c8:	80 95       	com	r24
    21ca:	90 95       	com	r25
    21cc:	8c 0d       	add	r24, r12
    21ce:	9d 1d       	adc	r25, r13
    21d0:	88 3c       	cpi	r24, 0xC8	; 200
    21d2:	91 05       	cpc	r25, r1
    21d4:	08 f0       	brcs	.+2      	; 0x21d8 <process_tapping+0xa0>
    21d6:	98 c0       	rjmp	.+304    	; 0x2308 <process_tapping+0x1d0>
            if (tapping_key.tap.count == 0) {
    21d8:	80 91 66 01 	lds	r24, 0x0166
    21dc:	98 2f       	mov	r25, r24
    21de:	90 7f       	andi	r25, 0xF0	; 240
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <process_tapping+0xac>
    21e2:	64 c0       	rjmp	.+200    	; 0x22ac <process_tapping+0x174>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    21e4:	e5 13       	cpse	r30, r21
    21e6:	14 c0       	rjmp	.+40     	; 0x2210 <process_tapping+0xd8>
    21e8:	74 13       	cpse	r23, r20
    21ea:	12 c0       	rjmp	.+36     	; 0x2210 <process_tapping+0xd8>
    21ec:	61 11       	cpse	r22, r1
    21ee:	10 c0       	rjmp	.+32     	; 0x2210 <process_tapping+0xd8>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    21f0:	8f 70       	andi	r24, 0x0F	; 15
    21f2:	80 61       	ori	r24, 0x10	; 16
    21f4:	80 93 66 01 	sts	0x0166, r24
                    debug_tapping_key();
    21f8:	0e 94 16 10 	call	0x202c	; 0x202c <debug_tapping_key>
                    process_action(&tapping_key);
    21fc:	81 e6       	ldi	r24, 0x61	; 97
    21fe:	91 e0       	ldi	r25, 0x01	; 1
    2200:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2204:	80 91 66 01 	lds	r24, 0x0166
    2208:	d7 01       	movw	r26, r14
    220a:	15 96       	adiw	r26, 0x05	; 5
    220c:	8c 93       	st	X, r24
    220e:	43 c1       	rjmp	.+646    	; 0x2496 <process_tapping+0x35e>
    2210:	cd 28       	or	r12, r13
    2212:	39 f0       	breq	.+14     	; 0x2222 <process_tapping+0xea>
    2214:	5f 3f       	cpi	r21, 0xFF	; 255
    2216:	41 f4       	brne	.+16     	; 0x2228 <process_tapping+0xf0>
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	4f 3f       	cpi	r20, 0xFF	; 255
    221e:	31 f0       	breq	.+12     	; 0x222c <process_tapping+0xf4>
    2220:	03 c0       	rjmp	.+6      	; 0x2228 <process_tapping+0xf0>
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	02 c0       	rjmp	.+4      	; 0x222c <process_tapping+0xf4>
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	90 e0       	ldi	r25, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    222c:	80 fd       	sbrc	r24, 0
    222e:	03 c0       	rjmp	.+6      	; 0x2236 <process_tapping+0xfe>
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	86 27       	eor	r24, r22
    2234:	02 c0       	rjmp	.+4      	; 0x223a <process_tapping+0x102>
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    223a:	80 ff       	sbrs	r24, 0
    223c:	2e c0       	rjmp	.+92     	; 0x229a <process_tapping+0x162>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    223e:	80 91 97 01 	lds	r24, 0x0197
    2242:	20 91 98 01 	lds	r18, 0x0198
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2246:	36 e0       	ldi	r19, 0x06	; 6
    2248:	13 c0       	rjmp	.+38     	; 0x2270 <process_tapping+0x138>
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	38 9f       	mul	r19, r24
    224e:	f0 01       	movw	r30, r0
    2250:	39 9f       	mul	r19, r25
    2252:	f0 0d       	add	r31, r0
    2254:	11 24       	eor	r1, r1
    2256:	e9 59       	subi	r30, 0x99	; 153
    2258:	fe 4f       	sbci	r31, 0xFE	; 254
    225a:	71 81       	ldd	r23, Z+1	; 0x01
    225c:	57 13       	cpse	r21, r23
    225e:	06 c0       	rjmp	.+12     	; 0x226c <process_tapping+0x134>
    2260:	70 81       	ld	r23, Z
    2262:	47 13       	cpse	r20, r23
    2264:	03 c0       	rjmp	.+6      	; 0x226c <process_tapping+0x134>
    2266:	72 81       	ldd	r23, Z+2	; 0x02
    2268:	67 13       	cpse	r22, r23
    226a:	17 c0       	rjmp	.+46     	; 0x229a <process_tapping+0x162>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    226c:	01 96       	adiw	r24, 0x01	; 1
    226e:	87 70       	andi	r24, 0x07	; 7
    2270:	82 13       	cpse	r24, r18
    2272:	eb cf       	rjmp	.-42     	; 0x224a <process_tapping+0x112>
    2274:	12 c1       	rjmp	.+548    	; 0x249a <process_tapping+0x362>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    2276:	9f 70       	andi	r25, 0x0F	; 15
    2278:	59 f0       	breq	.+22     	; 0x2290 <process_tapping+0x158>
    227a:	88 23       	and	r24, r24
    227c:	09 f4       	brne	.+2      	; 0x2280 <process_tapping+0x148>
    227e:	0b c1       	rjmp	.+534    	; 0x2496 <process_tapping+0x35e>
    2280:	07 c0       	rjmp	.+14     	; 0x2290 <process_tapping+0x158>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2282:	9f 70       	andi	r25, 0x0F	; 15
    2284:	29 f0       	breq	.+10     	; 0x2290 <process_tapping+0x158>
    2286:	f7 01       	movw	r30, r14
    2288:	95 81       	ldd	r25, Z+5	; 0x05
    228a:	90 7f       	andi	r25, 0xF0	; 240
    228c:	09 f4       	brne	.+2      	; 0x2290 <process_tapping+0x158>
    228e:	03 c1       	rjmp	.+518    	; 0x2496 <process_tapping+0x35e>
                            if (IS_MOD(action.key.code)) return false;
    2290:	80 5e       	subi	r24, 0xE0	; 224
    2292:	88 30       	cpi	r24, 0x08	; 8
    2294:	08 f4       	brcc	.+2      	; 0x2298 <process_tapping+0x160>
    2296:	ff c0       	rjmp	.+510    	; 0x2496 <process_tapping+0x35e>
    2298:	d2 c0       	rjmp	.+420    	; 0x243e <process_tapping+0x306>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    229a:	66 23       	and	r22, r22
    229c:	09 f4       	brne	.+2      	; 0x22a0 <process_tapping+0x168>
    229e:	fb c0       	rjmp	.+502    	; 0x2496 <process_tapping+0x35e>
                        tapping_key.tap.interrupted = true;
    22a0:	80 91 66 01 	lds	r24, 0x0166
    22a4:	81 60       	ori	r24, 0x01	; 1
    22a6:	80 93 66 01 	sts	0x0166, r24
    22aa:	f5 c0       	rjmp	.+490    	; 0x2496 <process_tapping+0x35e>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    22ac:	e5 13       	cpse	r30, r21
    22ae:	08 c0       	rjmp	.+16     	; 0x22c0 <process_tapping+0x188>
    22b0:	74 13       	cpse	r23, r20
    22b2:	06 c0       	rjmp	.+12     	; 0x22c0 <process_tapping+0x188>
    22b4:	61 11       	cpse	r22, r1
    22b6:	04 c0       	rjmp	.+8      	; 0x22c0 <process_tapping+0x188>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    22b8:	d7 01       	movw	r26, r14
    22ba:	15 96       	adiw	r26, 0x05	; 5
    22bc:	8c 93       	st	X, r24
    22be:	9d c0       	rjmp	.+314    	; 0x23fa <process_tapping+0x2c2>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    22c0:	4d 87       	std	Y+13, r20	; 0x0d
    22c2:	5e 87       	std	Y+14, r21	; 0x0e
    22c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c8:	6a 8b       	std	Y+18, r22	; 0x12
    22ca:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <is_tap_key>
    22ce:	6a 89       	ldd	r22, Y+18	; 0x12
    22d0:	88 23       	and	r24, r24
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <process_tapping+0x19e>
    22d4:	b4 c0       	rjmp	.+360    	; 0x243e <process_tapping+0x306>
    22d6:	66 23       	and	r22, r22
    22d8:	09 f4       	brne	.+2      	; 0x22dc <process_tapping+0x1a4>
    22da:	b1 c0       	rjmp	.+354    	; 0x243e <process_tapping+0x306>
                    if (tapping_key.tap.count > 1) {
    22dc:	20 91 66 01 	lds	r18, 0x0166
    22e0:	82 2f       	mov	r24, r18
    22e2:	82 95       	swap	r24
    22e4:	8f 70       	andi	r24, 0x0F	; 15
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	02 97       	sbiw	r24, 0x02	; 2
    22ea:	0c f4       	brge	.+2      	; 0x22ee <process_tapping+0x1b6>
    22ec:	c6 c0       	rjmp	.+396    	; 0x247a <process_tapping+0x342>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    22ee:	80 91 61 01 	lds	r24, 0x0161
    22f2:	90 91 62 01 	lds	r25, 0x0162
    22f6:	98 87       	std	Y+8, r25	; 0x08
    22f8:	8f 83       	std	Y+7, r24	; 0x07
    22fa:	19 86       	std	Y+9, r1	; 0x09
    22fc:	db 86       	std	Y+11, r13	; 0x0b
    22fe:	ca 86       	std	Y+10, r12	; 0x0a
    2300:	2c 87       	std	Y+12, r18	; 0x0c
    2302:	ce 01       	movw	r24, r28
    2304:	07 96       	adiw	r24, 0x07	; 7
    2306:	46 c0       	rjmp	.+140    	; 0x2394 <process_tapping+0x25c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2308:	80 91 66 01 	lds	r24, 0x0166
    230c:	98 2f       	mov	r25, r24
    230e:	90 7f       	andi	r25, 0xF0	; 240
    2310:	59 f4       	brne	.+22     	; 0x2328 <process_tapping+0x1f0>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2312:	7c 2d       	mov	r23, r12
    2314:	d9 8a       	std	Y+17, r13	; 0x11
    2316:	c8 8a       	std	Y+16, r12	; 0x10
    2318:	89 89       	ldd	r24, Y+17	; 0x11
    231a:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <debug_event>
                process_action(&tapping_key);
    231e:	81 e6       	ldi	r24, 0x61	; 97
    2320:	91 e0       	ldi	r25, 0x01	; 1
    2322:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <process_action>
    2326:	95 c0       	rjmp	.+298    	; 0x2452 <process_tapping+0x31a>
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2328:	e5 13       	cpse	r30, r21
    232a:	11 c0       	rjmp	.+34     	; 0x234e <process_tapping+0x216>
    232c:	74 13       	cpse	r23, r20
    232e:	0f c0       	rjmp	.+30     	; 0x234e <process_tapping+0x216>
    2330:	61 11       	cpse	r22, r1
    2332:	0d c0       	rjmp	.+26     	; 0x234e <process_tapping+0x216>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    2334:	f7 01       	movw	r30, r14
    2336:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    2338:	c7 01       	movw	r24, r14
    233a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <process_action>
                    tapping_key = (keyrecord_t){};
    233e:	e1 e6       	ldi	r30, 0x61	; 97
    2340:	f1 e0       	ldi	r31, 0x01	; 1
    2342:	86 e0       	ldi	r24, 0x06	; 6
    2344:	df 01       	movw	r26, r30
    2346:	1d 92       	st	X+, r1
    2348:	8a 95       	dec	r24
    234a:	e9 f7       	brne	.-6      	; 0x2346 <process_tapping+0x20e>
    234c:	a2 c0       	rjmp	.+324    	; 0x2492 <process_tapping+0x35a>
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    234e:	4d 87       	std	Y+13, r20	; 0x0d
    2350:	5e 87       	std	Y+14, r21	; 0x0e
    2352:	8d 85       	ldd	r24, Y+13	; 0x0d
    2354:	9e 85       	ldd	r25, Y+14	; 0x0e
    2356:	6a 8b       	std	Y+18, r22	; 0x12
    2358:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <is_tap_key>
    235c:	6a 89       	ldd	r22, Y+18	; 0x12
    235e:	88 23       	and	r24, r24
    2360:	09 f4       	brne	.+2      	; 0x2364 <process_tapping+0x22c>
    2362:	6d c0       	rjmp	.+218    	; 0x243e <process_tapping+0x306>
    2364:	66 23       	and	r22, r22
    2366:	09 f4       	brne	.+2      	; 0x236a <process_tapping+0x232>
    2368:	6a c0       	rjmp	.+212    	; 0x243e <process_tapping+0x306>
                    if (tapping_key.tap.count > 1) {
    236a:	20 91 66 01 	lds	r18, 0x0166
    236e:	82 2f       	mov	r24, r18
    2370:	82 95       	swap	r24
    2372:	8f 70       	andi	r24, 0x0F	; 15
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	02 97       	sbiw	r24, 0x02	; 2
    2378:	0c f4       	brge	.+2      	; 0x237c <process_tapping+0x244>
    237a:	7f c0       	rjmp	.+254    	; 0x247a <process_tapping+0x342>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    237c:	80 91 61 01 	lds	r24, 0x0161
    2380:	90 91 62 01 	lds	r25, 0x0162
    2384:	9a 83       	std	Y+2, r25	; 0x02
    2386:	89 83       	std	Y+1, r24	; 0x01
    2388:	1b 82       	std	Y+3, r1	; 0x03
    238a:	dd 82       	std	Y+5, r13	; 0x05
    238c:	cc 82       	std	Y+4, r12	; 0x04
    238e:	2e 83       	std	Y+6, r18	; 0x06
    2390:	ce 01       	movw	r24, r28
    2392:	01 96       	adiw	r24, 0x01	; 1
    2394:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <process_action>
    2398:	70 c0       	rjmp	.+224    	; 0x247a <process_tapping+0x342>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    239a:	c8 16       	cp	r12, r24
    239c:	d9 06       	cpc	r13, r25
    239e:	28 f0       	brcs	.+10     	; 0x23aa <process_tapping+0x272>
    23a0:	96 01       	movw	r18, r12
    23a2:	28 1b       	sub	r18, r24
    23a4:	39 0b       	sbc	r19, r25
    23a6:	c9 01       	movw	r24, r18
    23a8:	04 c0       	rjmp	.+8      	; 0x23b2 <process_tapping+0x27a>
    23aa:	80 95       	com	r24
    23ac:	90 95       	com	r25
    23ae:	8c 0d       	add	r24, r12
    23b0:	9d 1d       	adc	r25, r13
    23b2:	88 3c       	cpi	r24, 0xC8	; 200
    23b4:	91 05       	cpc	r25, r1
    23b6:	08 f0       	brcs	.+2      	; 0x23ba <process_tapping+0x282>
    23b8:	46 c0       	rjmp	.+140    	; 0x2446 <process_tapping+0x30e>
            if (event.pressed) {
    23ba:	66 23       	and	r22, r22
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <process_tapping+0x288>
    23be:	3f c0       	rjmp	.+126    	; 0x243e <process_tapping+0x306>
                if (IS_TAPPING_KEY(event.key)) {
    23c0:	e5 13       	cpse	r30, r21
    23c2:	30 c0       	rjmp	.+96     	; 0x2424 <process_tapping+0x2ec>
    23c4:	74 13       	cpse	r23, r20
    23c6:	2e c0       	rjmp	.+92     	; 0x2424 <process_tapping+0x2ec>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    23c8:	20 91 66 01 	lds	r18, 0x0166
    23cc:	20 fd       	sbrc	r18, 0
    23ce:	21 c0       	rjmp	.+66     	; 0x2412 <process_tapping+0x2da>
    23d0:	32 2f       	mov	r19, r18
    23d2:	32 95       	swap	r19
    23d4:	3f 70       	andi	r19, 0x0F	; 15
    23d6:	83 2f       	mov	r24, r19
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	d1 f0       	breq	.+52     	; 0x2412 <process_tapping+0x2da>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    23de:	d7 01       	movw	r26, r14
    23e0:	15 96       	adiw	r26, 0x05	; 5
    23e2:	2c 93       	st	X, r18
    23e4:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    23e6:	0f 97       	sbiw	r24, 0x0f	; 15
    23e8:	41 f0       	breq	.+16     	; 0x23fa <process_tapping+0x2c2>
    23ea:	83 2f       	mov	r24, r19
    23ec:	8f 5f       	subi	r24, 0xFF	; 255
    23ee:	82 95       	swap	r24
    23f0:	80 7f       	andi	r24, 0xF0	; 240
    23f2:	2f 70       	andi	r18, 0x0F	; 15
    23f4:	28 2b       	or	r18, r24
    23f6:	15 96       	adiw	r26, 0x05	; 5
    23f8:	2c 93       	st	X, r18
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    23fa:	c7 01       	movw	r24, r14
    23fc:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <process_action>
                        tapping_key = *keyp;
    2400:	86 e0       	ldi	r24, 0x06	; 6
    2402:	f7 01       	movw	r30, r14
    2404:	a1 e6       	ldi	r26, 0x61	; 97
    2406:	b1 e0       	ldi	r27, 0x01	; 1
    2408:	01 90       	ld	r0, Z+
    240a:	0d 92       	st	X+, r0
    240c:	8a 95       	dec	r24
    240e:	e1 f7       	brne	.-8      	; 0x2408 <process_tapping+0x2d0>
    2410:	3e c0       	rjmp	.+124    	; 0x248e <process_tapping+0x356>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    2412:	86 e0       	ldi	r24, 0x06	; 6
    2414:	f7 01       	movw	r30, r14
    2416:	a1 e6       	ldi	r26, 0x61	; 97
    2418:	b1 e0       	ldi	r27, 0x01	; 1
    241a:	01 90       	ld	r0, Z+
    241c:	0d 92       	st	X+, r0
    241e:	8a 95       	dec	r24
    2420:	e1 f7       	brne	.-8      	; 0x241a <process_tapping+0x2e2>
    2422:	37 c0       	rjmp	.+110    	; 0x2492 <process_tapping+0x35a>
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
    2424:	4d 87       	std	Y+13, r20	; 0x0d
    2426:	5e 87       	std	Y+14, r21	; 0x0e
    2428:	8d 85       	ldd	r24, Y+13	; 0x0d
    242a:	9e 85       	ldd	r25, Y+14	; 0x0e
    242c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <is_tap_key>
    2430:	81 11       	cpse	r24, r1
    2432:	23 c0       	rjmp	.+70     	; 0x247a <process_tapping+0x342>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    2434:	80 91 66 01 	lds	r24, 0x0166
    2438:	81 60       	ori	r24, 0x01	; 1
    243a:	80 93 66 01 	sts	0x0166, r24
                    process_action(keyp);
    243e:	c7 01       	movw	r24, r14
    2440:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <process_action>
    2444:	26 c0       	rjmp	.+76     	; 0x2492 <process_tapping+0x35a>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    2446:	7c 2d       	mov	r23, r12
    2448:	d9 8a       	std	Y+17, r13	; 0x11
    244a:	c8 8a       	std	Y+16, r12	; 0x10
    244c:	89 89       	ldd	r24, Y+17	; 0x11
    244e:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <debug_event>
            tapping_key = (keyrecord_t){};
    2452:	e1 e6       	ldi	r30, 0x61	; 97
    2454:	f1 e0       	ldi	r31, 0x01	; 1
    2456:	86 e0       	ldi	r24, 0x06	; 6
    2458:	df 01       	movw	r26, r30
    245a:	1d 92       	st	X+, r1
    245c:	8a 95       	dec	r24
    245e:	e9 f7       	brne	.-6      	; 0x245a <process_tapping+0x322>
            debug_tapping_key();
    2460:	0e 94 16 10 	call	0x202c	; 0x202c <debug_tapping_key>
    2464:	18 c0       	rjmp	.+48     	; 0x2496 <process_tapping+0x35e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    2466:	66 23       	and	r22, r22
    2468:	51 f3       	breq	.-44     	; 0x243e <process_tapping+0x306>
    246a:	4d 87       	std	Y+13, r20	; 0x0d
    246c:	5e 87       	std	Y+14, r21	; 0x0e
    246e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2470:	9e 85       	ldd	r25, Y+14	; 0x0e
    2472:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <is_tap_key>
    2476:	88 23       	and	r24, r24
    2478:	11 f3       	breq	.-60     	; 0x243e <process_tapping+0x306>
            debug("Tapping: Start(Press tap key).\n");
            tapping_key = *keyp;
    247a:	86 e0       	ldi	r24, 0x06	; 6
    247c:	f7 01       	movw	r30, r14
    247e:	a1 e6       	ldi	r26, 0x61	; 97
    2480:	b1 e0       	ldi	r27, 0x01	; 1
    2482:	01 90       	ld	r0, Z+
    2484:	0d 92       	st	X+, r0
    2486:	8a 95       	dec	r24
    2488:	e1 f7       	brne	.-8      	; 0x2482 <process_tapping+0x34a>
            waiting_buffer_scan_tap();
    248a:	0e 94 24 10 	call	0x2048	; 0x2048 <waiting_buffer_scan_tap>
            debug_tapping_key();
    248e:	0e 94 16 10 	call	0x202c	; 0x202c <debug_tapping_key>
            return true;
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	14 c0       	rjmp	.+40     	; 0x24be <process_tapping+0x386>
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
                        tapping_key.tap.interrupted = true;
                    }
                    // enqueue 
                    return false;
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	12 c0       	rjmp	.+36     	; 0x24be <process_tapping+0x386>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    249a:	4d 87       	std	Y+13, r20	; 0x0d
    249c:	5e 87       	std	Y+14, r21	; 0x0e
    249e:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a2:	0e 94 ac 14 	call	0x2958	; 0x2958 <layer_switch_get_action>
                    switch (action.kind.id) {
    24a6:	29 2f       	mov	r18, r25
    24a8:	22 95       	swap	r18
    24aa:	2f 70       	andi	r18, 0x0F	; 15
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	22 30       	cpi	r18, 0x02	; 2
    24b0:	31 05       	cpc	r19, r1
    24b2:	0c f4       	brge	.+2      	; 0x24b6 <process_tapping+0x37e>
    24b4:	e0 ce       	rjmp	.-576    	; 0x2276 <process_tapping+0x13e>
    24b6:	24 30       	cpi	r18, 0x04	; 4
    24b8:	31 05       	cpc	r19, r1
    24ba:	0c f6       	brge	.-126    	; 0x243e <process_tapping+0x306>
    24bc:	e2 ce       	rjmp	.-572    	; 0x2282 <process_tapping+0x14a>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    24be:	62 96       	adiw	r28, 0x12	; 18
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	de bf       	out	0x3e, r29	; 62
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	cd bf       	out	0x3d, r28	; 61
    24ca:	df 91       	pop	r29
    24cc:	cf 91       	pop	r28
    24ce:	ff 90       	pop	r15
    24d0:	ef 90       	pop	r14
    24d2:	df 90       	pop	r13
    24d4:	cf 90       	pop	r12
    24d6:	08 95       	ret

000024d8 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	2c 97       	sbiw	r28, 0x0c	; 12
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	4f 83       	std	Y+7, r20	; 0x07
    24f0:	58 87       	std	Y+8, r21	; 0x08
    24f2:	69 87       	std	Y+9, r22	; 0x09
    24f4:	7a 87       	std	Y+10, r23	; 0x0a
    24f6:	8b 87       	std	Y+11, r24	; 0x0b
    24f8:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    24fa:	ce 01       	movw	r24, r28
    24fc:	07 96       	adiw	r24, 0x07	; 7
    24fe:	0e 94 9c 10 	call	0x2138	; 0x2138 <process_tapping>
    2502:	88 23       	and	r24, r24
    2504:	d9 f0       	breq	.+54     	; 0x253c <action_tapping_process+0x64>
        if (!IS_NOEVENT(record.event)) {
    2506:	2f 81       	ldd	r18, Y+7	; 0x07
    2508:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    250a:	8a 85       	ldd	r24, Y+10	; 0x0a
    250c:	9b 85       	ldd	r25, Y+11	; 0x0b
    250e:	89 2b       	or	r24, r25
    2510:	39 f0       	breq	.+14     	; 0x2520 <action_tapping_process+0x48>
    2512:	3f 3f       	cpi	r19, 0xFF	; 255
    2514:	19 f0       	breq	.+6      	; 0x251c <action_tapping_process+0x44>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	04 c0       	rjmp	.+8      	; 0x2524 <action_tapping_process+0x4c>
    251c:	2f 3f       	cpi	r18, 0xFF	; 255
    251e:	d9 f7       	brne	.-10     	; 0x2516 <action_tapping_process+0x3e>
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	89 2b       	or	r24, r25
    2526:	09 f0       	breq	.+2      	; 0x252a <action_tapping_process+0x52>
    2528:	6d c0       	rjmp	.+218    	; 0x2604 <action_tapping_process+0x12c>
            debug("processed: "); debug_record(record); debug("\n");
    252a:	4f 81       	ldd	r20, Y+7	; 0x07
    252c:	58 85       	ldd	r21, Y+8	; 0x08
    252e:	69 85       	ldd	r22, Y+9	; 0x09
    2530:	7a 85       	ldd	r23, Y+10	; 0x0a
    2532:	8b 85       	ldd	r24, Y+11	; 0x0b
    2534:	9c 85       	ldd	r25, Y+12	; 0x0c
    2536:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <debug_record>
    253a:	64 c0       	rjmp	.+200    	; 0x2604 <action_tapping_process+0x12c>
    253c:	86 e0       	ldi	r24, 0x06	; 6
    253e:	fe 01       	movw	r30, r28
    2540:	37 96       	adiw	r30, 0x07	; 7
    2542:	de 01       	movw	r26, r28
    2544:	11 96       	adiw	r26, 0x01	; 1
    2546:	01 90       	ld	r0, Z+
    2548:	0d 92       	st	X+, r0
    254a:	8a 95       	dec	r24
    254c:	e1 f7       	brne	.-8      	; 0x2546 <action_tapping_process+0x6e>
    254e:	ff 81       	ldd	r31, Y+7	; 0x07
    2550:	e8 85       	ldd	r30, Y+8	; 0x08
    2552:	4a 85       	ldd	r20, Y+10	; 0x0a
    2554:	5b 85       	ldd	r21, Y+11	; 0x0b
    2556:	41 15       	cp	r20, r1
    2558:	51 05       	cpc	r21, r1
    255a:	39 f0       	breq	.+14     	; 0x256a <action_tapping_process+0x92>
    255c:	ef 3f       	cpi	r30, 0xFF	; 255
    255e:	41 f4       	brne	.+16     	; 0x2570 <action_tapping_process+0x98>
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	ff 3f       	cpi	r31, 0xFF	; 255
    2566:	31 f0       	breq	.+12     	; 0x2574 <action_tapping_process+0x9c>
    2568:	03 c0       	rjmp	.+6      	; 0x2570 <action_tapping_process+0x98>
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <action_tapping_process+0x9c>
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	90 e0       	ldi	r25, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    2574:	80 fd       	sbrc	r24, 0
    2576:	46 c0       	rjmp	.+140    	; 0x2604 <action_tapping_process+0x12c>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    2578:	20 91 98 01 	lds	r18, 0x0198
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	c9 01       	movw	r24, r18
    2580:	01 96       	adiw	r24, 0x01	; 1
    2582:	87 70       	andi	r24, 0x07	; 7
    2584:	99 27       	eor	r25, r25
    2586:	60 91 97 01 	lds	r22, 0x0197
    258a:	70 e0       	ldi	r23, 0x00	; 0
    258c:	86 17       	cp	r24, r22
    258e:	97 07       	cpc	r25, r23
    2590:	09 f4       	brne	.+2      	; 0x2594 <action_tapping_process+0xbc>
    2592:	40 c0       	rjmp	.+128    	; 0x2614 <action_tapping_process+0x13c>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    2594:	f9 83       	std	Y+1, r31	; 0x01
    2596:	ea 83       	std	Y+2, r30	; 0x02
    2598:	5d 83       	std	Y+5, r21	; 0x05
    259a:	4c 83       	std	Y+4, r20	; 0x04
    259c:	96 e0       	ldi	r25, 0x06	; 6
    259e:	92 9f       	mul	r25, r18
    25a0:	d0 01       	movw	r26, r0
    25a2:	93 9f       	mul	r25, r19
    25a4:	b0 0d       	add	r27, r0
    25a6:	11 24       	eor	r1, r1
    25a8:	a9 59       	subi	r26, 0x99	; 153
    25aa:	be 4f       	sbci	r27, 0xFE	; 254
    25ac:	fe 01       	movw	r30, r28
    25ae:	31 96       	adiw	r30, 0x01	; 1
    25b0:	01 90       	ld	r0, Z+
    25b2:	0d 92       	st	X+, r0
    25b4:	9a 95       	dec	r25
    25b6:	e1 f7       	brne	.-8      	; 0x25b0 <action_tapping_process+0xd8>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    25b8:	80 93 98 01 	sts	0x0198, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    25bc:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <debug_waiting_buffer>
    25c0:	21 c0       	rjmp	.+66     	; 0x2604 <action_tapping_process+0x12c>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    25c2:	18 9f       	mul	r17, r24
    25c4:	c0 01       	movw	r24, r0
    25c6:	11 24       	eor	r1, r1
    25c8:	89 59       	subi	r24, 0x99	; 153
    25ca:	9e 4f       	sbci	r25, 0xFE	; 254
    25cc:	0e 94 9c 10 	call	0x2138	; 0x2138 <process_tapping>
    25d0:	88 23       	and	r24, r24
    25d2:	71 f1       	breq	.+92     	; 0x2630 <action_tapping_process+0x158>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    25d4:	e0 91 97 01 	lds	r30, 0x0197
    25d8:	1e 9f       	mul	r17, r30
    25da:	f0 01       	movw	r30, r0
    25dc:	11 24       	eor	r1, r1
    25de:	e9 59       	subi	r30, 0x99	; 153
    25e0:	fe 4f       	sbci	r31, 0xFE	; 254
    25e2:	40 81       	ld	r20, Z
    25e4:	51 81       	ldd	r21, Z+1	; 0x01
    25e6:	62 81       	ldd	r22, Z+2	; 0x02
    25e8:	73 81       	ldd	r23, Z+3	; 0x03
    25ea:	84 81       	ldd	r24, Z+4	; 0x04
    25ec:	95 81       	ldd	r25, Z+5	; 0x05
    25ee:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    25f2:	80 91 97 01 	lds	r24, 0x0197
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	01 96       	adiw	r24, 0x01	; 1
    25fa:	87 70       	andi	r24, 0x07	; 7
    25fc:	99 27       	eor	r25, r25
    25fe:	80 93 97 01 	sts	0x0197, r24
    2602:	01 c0       	rjmp	.+2      	; 0x2606 <action_tapping_process+0x12e>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2604:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2606:	80 91 97 01 	lds	r24, 0x0197
    260a:	90 91 98 01 	lds	r25, 0x0198
    260e:	89 13       	cpse	r24, r25
    2610:	d8 cf       	rjmp	.-80     	; 0x25c2 <action_tapping_process+0xea>
    2612:	0e c0       	rjmp	.+28     	; 0x2630 <action_tapping_process+0x158>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    2614:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    2618:	10 92 98 01 	sts	0x0198, r1
    waiting_buffer_tail = 0;
    261c:	10 92 97 01 	sts	0x0197, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    2620:	e1 e6       	ldi	r30, 0x61	; 97
    2622:	f1 e0       	ldi	r31, 0x01	; 1
    2624:	86 e0       	ldi	r24, 0x06	; 6
    2626:	df 01       	movw	r26, r30
    2628:	1d 92       	st	X+, r1
    262a:	8a 95       	dec	r24
    262c:	e9 f7       	brne	.-6      	; 0x2628 <action_tapping_process+0x150>
    262e:	ea cf       	rjmp	.-44     	; 0x2604 <action_tapping_process+0x12c>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    2630:	2c 96       	adiw	r28, 0x0c	; 12
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	df 91       	pop	r29
    263e:	cf 91       	pop	r28
    2640:	1f 91       	pop	r17
    2642:	08 95       	ret

00002644 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    2644:	cf 92       	push	r12
    2646:	df 92       	push	r13
    2648:	ef 92       	push	r14
    264a:	ff 92       	push	r15
    264c:	cf 93       	push	r28
    264e:	df 93       	push	r29
    2650:	9c 01       	movw	r18, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	09 f4       	brne	.+2      	; 0x2658 <action_macro_play+0x14>
    2656:	8e c0       	rjmp	.+284    	; 0x2774 <action_macro_play+0x130>
    2658:	d0 e0       	ldi	r29, 0x00	; 0
    265a:	c0 e0       	ldi	r28, 0x00	; 0
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    265c:	cc 24       	eor	r12, r12
    265e:	c3 94       	inc	r12
    2660:	d1 2c       	mov	r13, r1

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    2662:	79 01       	movw	r14, r18
    2664:	8f ef       	ldi	r24, 0xFF	; 255
    2666:	e8 1a       	sub	r14, r24
    2668:	f8 0a       	sbc	r15, r24
    266a:	f9 01       	movw	r30, r18
    266c:	84 91       	lpm	r24, Z
    266e:	85 37       	cpi	r24, 0x75	; 117
    2670:	09 f4       	brne	.+2      	; 0x2674 <action_macro_play+0x30>
    2672:	5b c0       	rjmp	.+182    	; 0x272a <action_macro_play+0xe6>
    2674:	60 f4       	brcc	.+24     	; 0x268e <action_macro_play+0x4a>
    2676:	84 37       	cpi	r24, 0x74	; 116
    2678:	08 f0       	brcs	.+2      	; 0x267c <action_macro_play+0x38>
    267a:	46 c0       	rjmp	.+140    	; 0x2708 <action_macro_play+0xc4>
    267c:	84 30       	cpi	r24, 0x04	; 4
    267e:	08 f0       	brcs	.+2      	; 0x2682 <action_macro_play+0x3e>
    2680:	66 c0       	rjmp	.+204    	; 0x274e <action_macro_play+0x10a>
    2682:	81 30       	cpi	r24, 0x01	; 1
    2684:	a9 f0       	breq	.+42     	; 0x26b0 <action_macro_play+0x6c>
    2686:	82 30       	cpi	r24, 0x02	; 2
    2688:	09 f0       	breq	.+2      	; 0x268c <action_macro_play+0x48>
    268a:	74 c0       	rjmp	.+232    	; 0x2774 <action_macro_play+0x130>
    268c:	26 c0       	rjmp	.+76     	; 0x26da <action_macro_play+0x96>
    268e:	88 37       	cpi	r24, 0x78	; 120
    2690:	09 f4       	brne	.+2      	; 0x2694 <action_macro_play+0x50>
    2692:	5a c0       	rjmp	.+180    	; 0x2748 <action_macro_play+0x104>
    2694:	38 f4       	brcc	.+14     	; 0x26a4 <action_macro_play+0x60>
    2696:	86 37       	cpi	r24, 0x76	; 118
    2698:	09 f4       	brne	.+2      	; 0x269c <action_macro_play+0x58>
    269a:	4e c0       	rjmp	.+156    	; 0x2738 <action_macro_play+0xf4>
    269c:	87 37       	cpi	r24, 0x77	; 119
    269e:	09 f0       	breq	.+2      	; 0x26a2 <action_macro_play+0x5e>
    26a0:	69 c0       	rjmp	.+210    	; 0x2774 <action_macro_play+0x130>
    26a2:	4e c0       	rjmp	.+156    	; 0x2740 <action_macro_play+0xfc>
    26a4:	98 2f       	mov	r25, r24
    26a6:	94 58       	subi	r25, 0x84	; 132
    26a8:	90 37       	cpi	r25, 0x70	; 112
    26aa:	08 f0       	brcs	.+2      	; 0x26ae <action_macro_play+0x6a>
    26ac:	63 c0       	rjmp	.+198    	; 0x2774 <action_macro_play+0x130>
    26ae:	52 c0       	rjmp	.+164    	; 0x2754 <action_macro_play+0x110>
            case KEY_DOWN:
                MACRO_READ();
    26b0:	f7 01       	movw	r30, r14
    26b2:	79 01       	movw	r14, r18
    26b4:	82 e0       	ldi	r24, 0x02	; 2
    26b6:	e8 0e       	add	r14, r24
    26b8:	f1 1c       	adc	r15, r1
    26ba:	e4 91       	lpm	r30, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    26bc:	8e 2f       	mov	r24, r30
    26be:	80 5e       	subi	r24, 0xE0	; 224
    26c0:	88 30       	cpi	r24, 0x08	; 8
    26c2:	48 f4       	brcc	.+18     	; 0x26d6 <action_macro_play+0x92>
                    add_weak_mods(MOD_BIT(macro));
    26c4:	e7 70       	andi	r30, 0x07	; 7
    26c6:	8c 2d       	mov	r24, r12
    26c8:	01 c0       	rjmp	.+2      	; 0x26cc <action_macro_play+0x88>
    26ca:	88 0f       	add	r24, r24
    26cc:	ea 95       	dec	r30
    26ce:	ea f7       	brpl	.-6      	; 0x26ca <action_macro_play+0x86>
    26d0:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <add_weak_mods>
    26d4:	14 c0       	rjmp	.+40     	; 0x26fe <action_macro_play+0xba>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    26d6:	8e 2f       	mov	r24, r30
    26d8:	3a c0       	rjmp	.+116    	; 0x274e <action_macro_play+0x10a>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    26da:	f7 01       	movw	r30, r14
    26dc:	79 01       	movw	r14, r18
    26de:	82 e0       	ldi	r24, 0x02	; 2
    26e0:	e8 0e       	add	r14, r24
    26e2:	f1 1c       	adc	r15, r1
    26e4:	e4 91       	lpm	r30, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    26e6:	8e 2f       	mov	r24, r30
    26e8:	80 5e       	subi	r24, 0xE0	; 224
    26ea:	88 30       	cpi	r24, 0x08	; 8
    26ec:	58 f4       	brcc	.+22     	; 0x2704 <action_macro_play+0xc0>
                    del_weak_mods(MOD_BIT(macro));
    26ee:	e7 70       	andi	r30, 0x07	; 7
    26f0:	8c 2d       	mov	r24, r12
    26f2:	01 c0       	rjmp	.+2      	; 0x26f6 <action_macro_play+0xb2>
    26f4:	88 0f       	add	r24, r24
    26f6:	ea 95       	dec	r30
    26f8:	ea f7       	brpl	.-6      	; 0x26f4 <action_macro_play+0xb0>
    26fa:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <del_weak_mods>
                    send_keyboard_report();
    26fe:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <send_keyboard_report>
    2702:	2b c0       	rjmp	.+86     	; 0x275a <action_macro_play+0x116>
                } else {
                    unregister_code(macro);
    2704:	8e 2f       	mov	r24, r30
    2706:	27 c0       	rjmp	.+78     	; 0x2756 <action_macro_play+0x112>
                }
                break;
            case WAIT:
                MACRO_READ();
    2708:	f7 01       	movw	r30, r14
    270a:	79 01       	movw	r14, r18
    270c:	82 e0       	ldi	r24, 0x02	; 2
    270e:	e8 0e       	add	r14, r24
    2710:	f1 1c       	adc	r15, r1
    2712:	94 91       	lpm	r25, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    2714:	07 c0       	rjmp	.+14     	; 0x2724 <action_macro_play+0xe0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2716:	ef e9       	ldi	r30, 0x9F	; 159
    2718:	ff e0       	ldi	r31, 0x0F	; 15
    271a:	31 97       	sbiw	r30, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <action_macro_play+0xd6>
    271e:	00 c0       	rjmp	.+0      	; 0x2720 <action_macro_play+0xdc>
    2720:	00 00       	nop
    2722:	91 50       	subi	r25, 0x01	; 1
    2724:	91 11       	cpse	r25, r1
    2726:	f7 cf       	rjmp	.-18     	; 0x2716 <action_macro_play+0xd2>
    2728:	18 c0       	rjmp	.+48     	; 0x275a <action_macro_play+0x116>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    272a:	f7 01       	movw	r30, r14
    272c:	79 01       	movw	r14, r18
    272e:	82 e0       	ldi	r24, 0x02	; 2
    2730:	e8 0e       	add	r14, r24
    2732:	f1 1c       	adc	r15, r1
    2734:	c4 91       	lpm	r28, Z
                dprintf("INTERVAL(%u)\n", interval);
                break;
    2736:	11 c0       	rjmp	.+34     	; 0x275a <action_macro_play+0x116>
            case MOD_STORE:
                mod_storage = get_mods();
    2738:	0e 94 34 15 	call	0x2a68	; 0x2a68 <get_mods>
    273c:	d8 2f       	mov	r29, r24
                break;
    273e:	0d c0       	rjmp	.+26     	; 0x275a <action_macro_play+0x116>
            case MOD_RESTORE:
                set_mods(mod_storage);
    2740:	8d 2f       	mov	r24, r29
    2742:	0e 94 44 15 	call	0x2a88	; 0x2a88 <set_mods>
    2746:	db cf       	rjmp	.-74     	; 0x26fe <action_macro_play+0xba>
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    2748:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <clear_mods>
    274c:	d8 cf       	rjmp	.-80     	; 0x26fe <action_macro_play+0xba>
                send_keyboard_report();
                break;
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    274e:	0e 94 06 0c 	call	0x180c	; 0x180c <register_code>
                break;
    2752:	03 c0       	rjmp	.+6      	; 0x275a <action_macro_play+0x116>
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    2754:	8f 77       	andi	r24, 0x7F	; 127
    2756:	0e 94 9b 0c 	call	0x1936	; 0x1936 <unregister_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    275a:	9c 2f       	mov	r25, r28
    275c:	07 c0       	rjmp	.+14     	; 0x276c <action_macro_play+0x128>
    275e:	91 50       	subi	r25, 0x01	; 1
    2760:	ef e9       	ldi	r30, 0x9F	; 159
    2762:	ff e0       	ldi	r31, 0x0F	; 15
    2764:	31 97       	sbiw	r30, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <action_macro_play+0x120>
    2768:	00 c0       	rjmp	.+0      	; 0x276a <action_macro_play+0x126>
    276a:	00 00       	nop
    276c:	91 11       	cpse	r25, r1
    276e:	f7 cf       	rjmp	.-18     	; 0x275e <action_macro_play+0x11a>
    2770:	97 01       	movw	r18, r14
    2772:	77 cf       	rjmp	.-274    	; 0x2662 <action_macro_play+0x1e>
    }
}
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	ff 90       	pop	r15
    277a:	ef 90       	pop	r14
    277c:	df 90       	pop	r13
    277e:	cf 90       	pop	r12
    2780:	08 95       	ret

00002782 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2782:	60 93 9d 01 	sts	0x019D, r22
    2786:	70 93 9e 01 	sts	0x019E, r23
    278a:	80 93 9f 01 	sts	0x019F, r24
    278e:	90 93 a0 01 	sts	0x01A0, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2792:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <clear_keyboard_but_mods>

00002796 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2796:	60 93 99 01 	sts	0x0199, r22
    279a:	70 93 9a 01 	sts	0x019A, r23
    279e:	80 93 9b 01 	sts	0x019B, r24
    27a2:	90 93 9c 01 	sts	0x019C, r25
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    27a6:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <clear_keyboard_but_mods>

000027aa <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    27aa:	08 95       	ret

000027ac <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    27b0:	00 91 9d 01 	lds	r16, 0x019D
    27b4:	10 91 9e 01 	lds	r17, 0x019E
    27b8:	20 91 9f 01 	lds	r18, 0x019F
    27bc:	30 91 a0 01 	lds	r19, 0x01A0
    27c0:	60 2b       	or	r22, r16
    27c2:	71 2b       	or	r23, r17
    27c4:	82 2b       	or	r24, r18
    27c6:	93 2b       	or	r25, r19
}
    27c8:	1f 91       	pop	r17
    27ca:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    27cc:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <default_layer_state_set>

000027d0 <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    27d0:	0f 93       	push	r16
    27d2:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    27d4:	00 91 9d 01 	lds	r16, 0x019D
    27d8:	10 91 9e 01 	lds	r17, 0x019E
    27dc:	20 91 9f 01 	lds	r18, 0x019F
    27e0:	30 91 a0 01 	lds	r19, 0x01A0
    27e4:	60 23       	and	r22, r16
    27e6:	71 23       	and	r23, r17
    27e8:	82 23       	and	r24, r18
    27ea:	93 23       	and	r25, r19
}
    27ec:	1f 91       	pop	r17
    27ee:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    27f0:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <default_layer_state_set>

000027f4 <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    27f4:	0f 93       	push	r16
    27f6:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    27f8:	00 91 9d 01 	lds	r16, 0x019D
    27fc:	10 91 9e 01 	lds	r17, 0x019E
    2800:	20 91 9f 01 	lds	r18, 0x019F
    2804:	30 91 a0 01 	lds	r19, 0x01A0
    2808:	60 27       	eor	r22, r16
    280a:	71 27       	eor	r23, r17
    280c:	82 27       	eor	r24, r18
    280e:	93 27       	eor	r25, r19
}
    2810:	1f 91       	pop	r17
    2812:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    2814:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <default_layer_state_set>

00002818 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	70 e0       	ldi	r23, 0x00	; 0
    281c:	cb 01       	movw	r24, r22
    281e:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <layer_state_set>

00002822 <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	50 e0       	ldi	r21, 0x00	; 0
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	70 e0       	ldi	r23, 0x00	; 0
    282a:	04 c0       	rjmp	.+8      	; 0x2834 <layer_move+0x12>
    282c:	44 0f       	add	r20, r20
    282e:	55 1f       	adc	r21, r21
    2830:	66 1f       	adc	r22, r22
    2832:	77 1f       	adc	r23, r23
    2834:	8a 95       	dec	r24
    2836:	d2 f7       	brpl	.-12     	; 0x282c <layer_move+0xa>
    2838:	cb 01       	movw	r24, r22
    283a:	ba 01       	movw	r22, r20
    283c:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <layer_state_set>

00002840 <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    2840:	41 e0       	ldi	r20, 0x01	; 1
    2842:	50 e0       	ldi	r21, 0x00	; 0
    2844:	60 e0       	ldi	r22, 0x00	; 0
    2846:	70 e0       	ldi	r23, 0x00	; 0
    2848:	04 c0       	rjmp	.+8      	; 0x2852 <layer_on+0x12>
    284a:	44 0f       	add	r20, r20
    284c:	55 1f       	adc	r21, r21
    284e:	66 1f       	adc	r22, r22
    2850:	77 1f       	adc	r23, r23
    2852:	8a 95       	dec	r24
    2854:	d2 f7       	brpl	.-12     	; 0x284a <layer_on+0xa>
    2856:	80 91 99 01 	lds	r24, 0x0199
    285a:	90 91 9a 01 	lds	r25, 0x019A
    285e:	a0 91 9b 01 	lds	r26, 0x019B
    2862:	b0 91 9c 01 	lds	r27, 0x019C
    2866:	48 2b       	or	r20, r24
    2868:	59 2b       	or	r21, r25
    286a:	6a 2b       	or	r22, r26
    286c:	7b 2b       	or	r23, r27
    286e:	cb 01       	movw	r24, r22
    2870:	ba 01       	movw	r22, r20
    2872:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <layer_state_set>

00002876 <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    2876:	41 e0       	ldi	r20, 0x01	; 1
    2878:	50 e0       	ldi	r21, 0x00	; 0
    287a:	60 e0       	ldi	r22, 0x00	; 0
    287c:	70 e0       	ldi	r23, 0x00	; 0
    287e:	04 c0       	rjmp	.+8      	; 0x2888 <layer_off+0x12>
    2880:	44 0f       	add	r20, r20
    2882:	55 1f       	adc	r21, r21
    2884:	66 1f       	adc	r22, r22
    2886:	77 1f       	adc	r23, r23
    2888:	8a 95       	dec	r24
    288a:	d2 f7       	brpl	.-12     	; 0x2880 <layer_off+0xa>
    288c:	40 95       	com	r20
    288e:	50 95       	com	r21
    2890:	60 95       	com	r22
    2892:	70 95       	com	r23
    2894:	80 91 99 01 	lds	r24, 0x0199
    2898:	90 91 9a 01 	lds	r25, 0x019A
    289c:	a0 91 9b 01 	lds	r26, 0x019B
    28a0:	b0 91 9c 01 	lds	r27, 0x019C
    28a4:	48 23       	and	r20, r24
    28a6:	59 23       	and	r21, r25
    28a8:	6a 23       	and	r22, r26
    28aa:	7b 23       	and	r23, r27
    28ac:	cb 01       	movw	r24, r22
    28ae:	ba 01       	movw	r22, r20
    28b0:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <layer_state_set>

000028b4 <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    28b4:	41 e0       	ldi	r20, 0x01	; 1
    28b6:	50 e0       	ldi	r21, 0x00	; 0
    28b8:	60 e0       	ldi	r22, 0x00	; 0
    28ba:	70 e0       	ldi	r23, 0x00	; 0
    28bc:	04 c0       	rjmp	.+8      	; 0x28c6 <layer_invert+0x12>
    28be:	44 0f       	add	r20, r20
    28c0:	55 1f       	adc	r21, r21
    28c2:	66 1f       	adc	r22, r22
    28c4:	77 1f       	adc	r23, r23
    28c6:	8a 95       	dec	r24
    28c8:	d2 f7       	brpl	.-12     	; 0x28be <layer_invert+0xa>
    28ca:	80 91 99 01 	lds	r24, 0x0199
    28ce:	90 91 9a 01 	lds	r25, 0x019A
    28d2:	a0 91 9b 01 	lds	r26, 0x019B
    28d6:	b0 91 9c 01 	lds	r27, 0x019C
    28da:	48 27       	eor	r20, r24
    28dc:	59 27       	eor	r21, r25
    28de:	6a 27       	eor	r22, r26
    28e0:	7b 27       	eor	r23, r27
    28e2:	cb 01       	movw	r24, r22
    28e4:	ba 01       	movw	r22, r20
    28e6:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <layer_state_set>

000028ea <layer_or>:
}

void layer_or(uint32_t state)
{
    28ea:	0f 93       	push	r16
    28ec:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    28ee:	00 91 99 01 	lds	r16, 0x0199
    28f2:	10 91 9a 01 	lds	r17, 0x019A
    28f6:	20 91 9b 01 	lds	r18, 0x019B
    28fa:	30 91 9c 01 	lds	r19, 0x019C
    28fe:	60 2b       	or	r22, r16
    2900:	71 2b       	or	r23, r17
    2902:	82 2b       	or	r24, r18
    2904:	93 2b       	or	r25, r19
}
    2906:	1f 91       	pop	r17
    2908:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    290a:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <layer_state_set>

0000290e <layer_and>:
}
void layer_and(uint32_t state)
{
    290e:	0f 93       	push	r16
    2910:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    2912:	00 91 99 01 	lds	r16, 0x0199
    2916:	10 91 9a 01 	lds	r17, 0x019A
    291a:	20 91 9b 01 	lds	r18, 0x019B
    291e:	30 91 9c 01 	lds	r19, 0x019C
    2922:	60 23       	and	r22, r16
    2924:	71 23       	and	r23, r17
    2926:	82 23       	and	r24, r18
    2928:	93 23       	and	r25, r19
}
    292a:	1f 91       	pop	r17
    292c:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    292e:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <layer_state_set>

00002932 <layer_xor>:
}
void layer_xor(uint32_t state)
{
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    2936:	00 91 99 01 	lds	r16, 0x0199
    293a:	10 91 9a 01 	lds	r17, 0x019A
    293e:	20 91 9b 01 	lds	r18, 0x019B
    2942:	30 91 9c 01 	lds	r19, 0x019C
    2946:	60 27       	eor	r22, r16
    2948:	71 27       	eor	r23, r17
    294a:	82 27       	eor	r24, r18
    294c:	93 27       	eor	r25, r19
}
    294e:	1f 91       	pop	r17
    2950:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    2952:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <layer_state_set>

00002956 <layer_debug>:
}

void layer_debug(void)
{
    2956:	08 95       	ret

00002958 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    2958:	8f 92       	push	r8
    295a:	9f 92       	push	r9
    295c:	af 92       	push	r10
    295e:	bf 92       	push	r11
    2960:	cf 92       	push	r12
    2962:	df 92       	push	r13
    2964:	ef 92       	push	r14
    2966:	ff 92       	push	r15
    2968:	6c 01       	movw	r12, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    296a:	80 90 9d 01 	lds	r8, 0x019D
    296e:	90 90 9e 01 	lds	r9, 0x019E
    2972:	a0 90 9f 01 	lds	r10, 0x019F
    2976:	b0 90 a0 01 	lds	r11, 0x01A0
    297a:	40 91 99 01 	lds	r20, 0x0199
    297e:	50 91 9a 01 	lds	r21, 0x019A
    2982:	60 91 9b 01 	lds	r22, 0x019B
    2986:	70 91 9c 01 	lds	r23, 0x019C
    298a:	84 2a       	or	r8, r20
    298c:	95 2a       	or	r9, r21
    298e:	a6 2a       	or	r10, r22
    2990:	b7 2a       	or	r11, r23
    2992:	8f e1       	ldi	r24, 0x1F	; 31
    2994:	e8 2e       	mov	r14, r24
    2996:	f1 2c       	mov	r15, r1
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    2998:	b5 01       	movw	r22, r10
    299a:	a4 01       	movw	r20, r8
    299c:	0e 2c       	mov	r0, r14
    299e:	04 c0       	rjmp	.+8      	; 0x29a8 <layer_switch_get_action+0x50>
    29a0:	76 95       	lsr	r23
    29a2:	67 95       	ror	r22
    29a4:	57 95       	ror	r21
    29a6:	47 95       	ror	r20
    29a8:	0a 94       	dec	r0
    29aa:	d2 f7       	brpl	.-12     	; 0x29a0 <layer_switch_get_action+0x48>
    29ac:	40 ff       	sbrs	r20, 0
    29ae:	08 c0       	rjmp	.+16     	; 0x29c0 <layer_switch_get_action+0x68>
            action = action_for_key(i, key);
    29b0:	b6 01       	movw	r22, r12
    29b2:	8e 2d       	mov	r24, r14
    29b4:	0e 94 99 15 	call	0x2b32	; 0x2b32 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    29b8:	81 30       	cpi	r24, 0x01	; 1
    29ba:	91 05       	cpc	r25, r1
    29bc:	09 f0       	breq	.+2      	; 0x29c0 <layer_switch_get_action+0x68>
    29be:	08 c0       	rjmp	.+16     	; 0x29d0 <layer_switch_get_action+0x78>
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	e8 1a       	sub	r14, r24
    29c4:	f1 08       	sbc	r15, r1
    29c6:	40 f7       	brcc	.-48     	; 0x2998 <layer_switch_get_action+0x40>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    29c8:	b6 01       	movw	r22, r12
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	0e 94 99 15 	call	0x2b32	; 0x2b32 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    29d0:	ff 90       	pop	r15
    29d2:	ef 90       	pop	r14
    29d4:	df 90       	pop	r13
    29d6:	cf 90       	pop	r12
    29d8:	bf 90       	pop	r11
    29da:	af 90       	pop	r10
    29dc:	9f 90       	pop	r9
    29de:	8f 90       	pop	r8
    29e0:	08 95       	ret

000029e2 <add_key>:
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    29e2:	40 91 0c 01 	lds	r20, 0x010C
    29e6:	50 91 0d 01 	lds	r21, 0x010D
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    keyboard_report->keys[cb_tail] = code;
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    29ee:	9f ef       	ldi	r25, 0xFF	; 255
#endif
    host_keyboard_send(keyboard_report);
}

/* key */
void add_key(uint8_t key)
    29f0:	fa 01       	movw	r30, r20
    29f2:	e2 0f       	add	r30, r18
    29f4:	f3 1f       	adc	r31, r19
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    29f6:	62 81       	ldd	r22, Z+2	; 0x02
    29f8:	68 17       	cp	r22, r24
    29fa:	a1 f0       	breq	.+40     	; 0x2a24 <add_key+0x42>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    29fc:	9f 3f       	cpi	r25, 0xFF	; 255
    29fe:	19 f4       	brne	.+6      	; 0x2a06 <add_key+0x24>
    2a00:	61 11       	cpse	r22, r1
    2a02:	01 c0       	rjmp	.+2      	; 0x2a06 <add_key+0x24>
    2a04:	92 2f       	mov	r25, r18
    2a06:	2f 5f       	subi	r18, 0xFF	; 255
    2a08:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    2a0a:	26 30       	cpi	r18, 0x06	; 6
    2a0c:	31 05       	cpc	r19, r1
    2a0e:	81 f7       	brne	.-32     	; 0x29f0 <add_key+0xe>
    2a10:	07 c0       	rjmp	.+14     	; 0x2a20 <add_key+0x3e>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
            keyboard_report->keys[empty] = code;
    2a12:	fa 01       	movw	r30, r20
    2a14:	e9 0f       	add	r30, r25
    2a16:	f1 1d       	adc	r31, r1
    2a18:	97 fd       	sbrc	r25, 7
    2a1a:	fa 95       	dec	r31
    2a1c:	82 83       	std	Z+2, r24	; 0x02
    2a1e:	08 95       	ret
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    2a20:	9f 3f       	cpi	r25, 0xFF	; 255
    2a22:	b9 f7       	brne	.-18     	; 0x2a12 <add_key+0x30>
    2a24:	08 95       	ret

00002a26 <del_key>:
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    2a26:	40 91 0c 01 	lds	r20, 0x010C
    2a2a:	50 91 0d 01 	lds	r21, 0x010D
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    }
#endif
    add_key_byte(key);
}

void del_key(uint8_t key)
    2a32:	fa 01       	movw	r30, r20
    2a34:	e2 0f       	add	r30, r18
    2a36:	f3 1f       	adc	r31, r19
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    2a38:	92 81       	ldd	r25, Z+2	; 0x02
    2a3a:	98 13       	cpse	r25, r24
    2a3c:	01 c0       	rjmp	.+2      	; 0x2a40 <del_key+0x1a>
            keyboard_report->keys[i] = 0;
    2a3e:	12 82       	std	Z+2, r1	; 0x02
    2a40:	2f 5f       	subi	r18, 0xFF	; 255
    2a42:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    2a44:	26 30       	cpi	r18, 0x06	; 6
    2a46:	31 05       	cpc	r19, r1
    2a48:	a1 f7       	brne	.-24     	; 0x2a32 <del_key+0xc>
        del_key_bit(key);
        return;
    }
#endif
    del_key_byte(key);
}
    2a4a:	08 95       	ret

00002a4c <clear_keys>:

void clear_keys(void)
{
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    2a50:	e0 91 0c 01 	lds	r30, 0x010C
    2a54:	f0 91 0d 01 	lds	r31, 0x010D
    2a58:	e8 0f       	add	r30, r24
    2a5a:	f9 1f       	adc	r31, r25
    2a5c:	10 82       	st	Z, r1
    2a5e:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    2a60:	88 30       	cpi	r24, 0x08	; 8
    2a62:	91 05       	cpc	r25, r1
    2a64:	a9 f7       	brne	.-22     	; 0x2a50 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    2a66:	08 95       	ret

00002a68 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    2a68:	80 91 a1 01 	lds	r24, 0x01A1
    2a6c:	08 95       	ret

00002a6e <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    2a6e:	90 91 a1 01 	lds	r25, 0x01A1
    2a72:	98 2b       	or	r25, r24
    2a74:	90 93 a1 01 	sts	0x01A1, r25
    2a78:	08 95       	ret

00002a7a <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    2a7a:	80 95       	com	r24
    2a7c:	90 91 a1 01 	lds	r25, 0x01A1
    2a80:	98 23       	and	r25, r24
    2a82:	90 93 a1 01 	sts	0x01A1, r25
    2a86:	08 95       	ret

00002a88 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    2a88:	80 93 a1 01 	sts	0x01A1, r24
    2a8c:	08 95       	ret

00002a8e <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    2a8e:	10 92 a1 01 	sts	0x01A1, r1
    2a92:	08 95       	ret

00002a94 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    2a94:	90 91 a2 01 	lds	r25, 0x01A2
    2a98:	98 2b       	or	r25, r24
    2a9a:	90 93 a2 01 	sts	0x01A2, r25
    2a9e:	08 95       	ret

00002aa0 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    2aa0:	80 95       	com	r24
    2aa2:	90 91 a2 01 	lds	r25, 0x01A2
    2aa6:	98 23       	and	r25, r24
    2aa8:	90 93 a2 01 	sts	0x01A2, r25
    2aac:	08 95       	ret

00002aae <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    2aae:	10 92 a2 01 	sts	0x01A2, r1
    2ab2:	08 95       	ret

00002ab4 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    2ab4:	80 93 a3 01 	sts	0x01A3, r24
    2ab8:	08 95       	ret

00002aba <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    2aba:	10 92 a3 01 	sts	0x01A3, r1
    2abe:	08 95       	ret

00002ac0 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    2ac0:	40 91 0c 01 	lds	r20, 0x010C
    2ac4:	50 91 0d 01 	lds	r21, 0x010D
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    2acc:	80 e0       	ldi	r24, 0x00	; 0


/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
    2ace:	fa 01       	movw	r30, r20
    2ad0:	e2 0f       	add	r30, r18
    2ad2:	f3 1f       	adc	r31, r19
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    2ad4:	91 81       	ldd	r25, Z+1	; 0x01
    2ad6:	91 11       	cpse	r25, r1
            cnt++;
    2ad8:	8f 5f       	subi	r24, 0xFF	; 255
    2ada:	2f 5f       	subi	r18, 0xFF	; 255
    2adc:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    2ade:	27 30       	cpi	r18, 0x07	; 7
    2ae0:	31 05       	cpc	r19, r1
    2ae2:	a9 f7       	brne	.-22     	; 0x2ace <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    2ae4:	08 95       	ret

00002ae6 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    2ae6:	e0 91 0c 01 	lds	r30, 0x010C
    2aea:	f0 91 0d 01 	lds	r31, 0x010D
    2aee:	80 91 a1 01 	lds	r24, 0x01A1
    2af2:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    2af4:	e0 91 0c 01 	lds	r30, 0x010C
    2af8:	f0 91 0d 01 	lds	r31, 0x010D
    2afc:	80 81       	ld	r24, Z
    2afe:	90 91 a2 01 	lds	r25, 0x01A2
    2b02:	89 2b       	or	r24, r25
    2b04:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    2b06:	90 91 a3 01 	lds	r25, 0x01A3
    2b0a:	99 23       	and	r25, r25
    2b0c:	61 f0       	breq	.+24     	; 0x2b26 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    2b0e:	e0 91 0c 01 	lds	r30, 0x010C
    2b12:	f0 91 0d 01 	lds	r31, 0x010D
    2b16:	80 81       	ld	r24, Z
    2b18:	89 2b       	or	r24, r25
    2b1a:	80 83       	st	Z, r24
        if (has_anykey()) {
    2b1c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <has_anykey>
    2b20:	81 11       	cpse	r24, r1
            clear_oneshot_mods();
    2b22:	0e 94 5d 15 	call	0x2aba	; 0x2aba <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    2b26:	80 91 0c 01 	lds	r24, 0x010C
    2b2a:	90 91 0d 01 	lds	r25, 0x010D
    2b2e:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <host_keyboard_send>

00002b32 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    2b32:	0e 94 48 02 	call	0x490	; 0x490 <keymap_key_to_keycode>
    switch (keycode) {
    2b36:	98 2f       	mov	r25, r24
    2b38:	90 5c       	subi	r25, 0xC0	; 192
    2b3a:	90 32       	cpi	r25, 0x20	; 32
    2b3c:	18 f4       	brcc	.+6      	; 0x2b44 <action_for_key+0x12>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    2b3e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <keymap_fn_to_action>
    2b42:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    2b44:	8d 3b       	cpi	r24, 0xBD	; 189
    2b46:	50 f4       	brcc	.+20     	; 0x2b5c <action_for_key+0x2a>
    2b48:	88 3a       	cpi	r24, 0xA8	; 168
    2b4a:	18 f5       	brcc	.+70     	; 0x2b92 <action_for_key+0x60>
    2b4c:	85 3a       	cpi	r24, 0xA5	; 165
    2b4e:	c0 f4       	brcc	.+48     	; 0x2b80 <action_for_key+0x4e>
    2b50:	84 30       	cpi	r24, 0x04	; 4
    2b52:	98 f4       	brcc	.+38     	; 0x2b7a <action_for_key+0x48>
    2b54:	81 30       	cpi	r24, 0x01	; 1
    2b56:	09 f0       	breq	.+2      	; 0x2b5a <action_for_key+0x28>
    2b58:	6f c0       	rjmp	.+222    	; 0x2c38 <action_for_key+0x106>
    2b5a:	0c c0       	rjmp	.+24     	; 0x2b74 <action_for_key+0x42>
    2b5c:	88 3e       	cpi	r24, 0xE8	; 232
    2b5e:	30 f4       	brcc	.+12     	; 0x2b6c <action_for_key+0x3a>
    2b60:	80 3e       	cpi	r24, 0xE0	; 224
    2b62:	58 f4       	brcc	.+22     	; 0x2b7a <action_for_key+0x48>
    2b64:	8f 3b       	cpi	r24, 0xBF	; 191
    2b66:	09 f0       	breq	.+2      	; 0x2b6a <action_for_key+0x38>
    2b68:	67 c0       	rjmp	.+206    	; 0x2c38 <action_for_key+0x106>
    2b6a:	59 c0       	rjmp	.+178    	; 0x2c1e <action_for_key+0xec>
    2b6c:	80 3f       	cpi	r24, 0xF0	; 240
    2b6e:	08 f4       	brcc	.+2      	; 0x2b72 <action_for_key+0x40>
    2b70:	63 c0       	rjmp	.+198    	; 0x2c38 <action_for_key+0x106>
    2b72:	51 c0       	rjmp	.+162    	; 0x2c16 <action_for_key+0xe4>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    2b74:	21 e0       	ldi	r18, 0x01	; 1
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	a6 c0       	rjmp	.+332    	; 0x2cc6 <action_for_key+0x194>
{
    action_t action = {};
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    2b7a:	28 2f       	mov	r18, r24
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	a3 c0       	rjmp	.+326    	; 0x2cc6 <action_for_key+0x194>
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    2b80:	85 3a       	cpi	r24, 0xA5	; 165
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <action_for_key+0x54>
    2b84:	5c c0       	rjmp	.+184    	; 0x2c3e <action_for_key+0x10c>
    2b86:	86 3a       	cpi	r24, 0xA6	; 166
    2b88:	09 f0       	breq	.+2      	; 0x2b8c <action_for_key+0x5a>
    2b8a:	5c c0       	rjmp	.+184    	; 0x2c44 <action_for_key+0x112>
    2b8c:	22 e8       	ldi	r18, 0x82	; 130
    2b8e:	30 e4       	ldi	r19, 0x40	; 64
    2b90:	9a c0       	rjmp	.+308    	; 0x2cc6 <action_for_key+0x194>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    2b92:	88 3a       	cpi	r24, 0xA8	; 168
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <action_for_key+0x66>
    2b96:	59 c0       	rjmp	.+178    	; 0x2c4a <action_for_key+0x118>
    2b98:	89 3a       	cpi	r24, 0xA9	; 169
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <action_for_key+0x6c>
    2b9c:	59 c0       	rjmp	.+178    	; 0x2c50 <action_for_key+0x11e>
    2b9e:	8a 3a       	cpi	r24, 0xAA	; 170
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <action_for_key+0x72>
    2ba2:	59 c0       	rjmp	.+178    	; 0x2c56 <action_for_key+0x124>
    2ba4:	8b 3a       	cpi	r24, 0xAB	; 171
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <action_for_key+0x78>
    2ba8:	59 c0       	rjmp	.+178    	; 0x2c5c <action_for_key+0x12a>
    2baa:	8c 3a       	cpi	r24, 0xAC	; 172
    2bac:	09 f4       	brne	.+2      	; 0x2bb0 <action_for_key+0x7e>
    2bae:	59 c0       	rjmp	.+178    	; 0x2c62 <action_for_key+0x130>
    2bb0:	8b 3b       	cpi	r24, 0xBB	; 187
    2bb2:	09 f4       	brne	.+2      	; 0x2bb6 <action_for_key+0x84>
    2bb4:	59 c0       	rjmp	.+178    	; 0x2c68 <action_for_key+0x136>
    2bb6:	8c 3b       	cpi	r24, 0xBC	; 188
    2bb8:	09 f4       	brne	.+2      	; 0x2bbc <action_for_key+0x8a>
    2bba:	59 c0       	rjmp	.+178    	; 0x2c6e <action_for_key+0x13c>
    2bbc:	8d 3a       	cpi	r24, 0xAD	; 173
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <action_for_key+0x90>
    2bc0:	59 c0       	rjmp	.+178    	; 0x2c74 <action_for_key+0x142>
    2bc2:	80 3b       	cpi	r24, 0xB0	; 176
    2bc4:	09 f4       	brne	.+2      	; 0x2bc8 <action_for_key+0x96>
    2bc6:	59 c0       	rjmp	.+178    	; 0x2c7a <action_for_key+0x148>
    2bc8:	8e 3a       	cpi	r24, 0xAE	; 174
    2bca:	09 f4       	brne	.+2      	; 0x2bce <action_for_key+0x9c>
    2bcc:	59 c0       	rjmp	.+178    	; 0x2c80 <action_for_key+0x14e>
    2bce:	8f 3a       	cpi	r24, 0xAF	; 175
    2bd0:	09 f4       	brne	.+2      	; 0x2bd4 <action_for_key+0xa2>
    2bd2:	59 c0       	rjmp	.+178    	; 0x2c86 <action_for_key+0x154>
    2bd4:	81 3b       	cpi	r24, 0xB1	; 177
    2bd6:	09 f4       	brne	.+2      	; 0x2bda <action_for_key+0xa8>
    2bd8:	59 c0       	rjmp	.+178    	; 0x2c8c <action_for_key+0x15a>
    2bda:	82 3b       	cpi	r24, 0xB2	; 178
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <action_for_key+0xae>
    2bde:	59 c0       	rjmp	.+178    	; 0x2c92 <action_for_key+0x160>
    2be0:	83 3b       	cpi	r24, 0xB3	; 179
    2be2:	09 f4       	brne	.+2      	; 0x2be6 <action_for_key+0xb4>
    2be4:	59 c0       	rjmp	.+178    	; 0x2c98 <action_for_key+0x166>
    2be6:	84 3b       	cpi	r24, 0xB4	; 180
    2be8:	09 f4       	brne	.+2      	; 0x2bec <action_for_key+0xba>
    2bea:	59 c0       	rjmp	.+178    	; 0x2c9e <action_for_key+0x16c>
    2bec:	85 3b       	cpi	r24, 0xB5	; 181
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <action_for_key+0xc0>
    2bf0:	59 c0       	rjmp	.+178    	; 0x2ca4 <action_for_key+0x172>
    2bf2:	86 3b       	cpi	r24, 0xB6	; 182
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <action_for_key+0xc6>
    2bf6:	59 c0       	rjmp	.+178    	; 0x2caa <action_for_key+0x178>
    2bf8:	87 3b       	cpi	r24, 0xB7	; 183
    2bfa:	09 f4       	brne	.+2      	; 0x2bfe <action_for_key+0xcc>
    2bfc:	59 c0       	rjmp	.+178    	; 0x2cb0 <action_for_key+0x17e>
    2bfe:	88 3b       	cpi	r24, 0xB8	; 184
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <action_for_key+0xd2>
    2c02:	59 c0       	rjmp	.+178    	; 0x2cb6 <action_for_key+0x184>
    2c04:	89 3b       	cpi	r24, 0xB9	; 185
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <action_for_key+0xd8>
    2c08:	59 c0       	rjmp	.+178    	; 0x2cbc <action_for_key+0x18a>
    2c0a:	8a 3b       	cpi	r24, 0xBA	; 186
    2c0c:	09 f0       	breq	.+2      	; 0x2c10 <action_for_key+0xde>
    2c0e:	59 c0       	rjmp	.+178    	; 0x2cc2 <action_for_key+0x190>
    2c10:	2a e2       	ldi	r18, 0x2A	; 42
    2c12:	36 e4       	ldi	r19, 0x46	; 70
    2c14:	58 c0       	rjmp	.+176    	; 0x2cc6 <action_for_key+0x194>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	30 65       	ori	r19, 0x50	; 80
    2c1c:	54 c0       	rjmp	.+168    	; 0x2cc6 <action_for_key+0x194>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    2c1e:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <clear_keyboard>
    2c22:	2f ef       	ldi	r18, 0xFF	; 255
    2c24:	80 e7       	ldi	r24, 0x70	; 112
    2c26:	92 e0       	ldi	r25, 0x02	; 2
    2c28:	21 50       	subi	r18, 0x01	; 1
    2c2a:	80 40       	sbci	r24, 0x00	; 0
    2c2c:	90 40       	sbci	r25, 0x00	; 0
    2c2e:	e1 f7       	brne	.-8      	; 0x2c28 <action_for_key+0xf6>
    2c30:	00 c0       	rjmp	.+0      	; 0x2c32 <action_for_key+0x100>
    2c32:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    2c34:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <bootloader_jump>
            break;
        default:
            action.code = ACTION_NO;
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	44 c0       	rjmp	.+136    	; 0x2cc6 <action_for_key+0x194>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    2c3e:	21 e8       	ldi	r18, 0x81	; 129
    2c40:	30 e4       	ldi	r19, 0x40	; 64
    2c42:	41 c0       	rjmp	.+130    	; 0x2cc6 <action_for_key+0x194>
    2c44:	23 e8       	ldi	r18, 0x83	; 131
    2c46:	30 e4       	ldi	r19, 0x40	; 64
    2c48:	3e c0       	rjmp	.+124    	; 0x2cc6 <action_for_key+0x194>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    2c4a:	22 ee       	ldi	r18, 0xE2	; 226
    2c4c:	34 e4       	ldi	r19, 0x44	; 68
    2c4e:	3b c0       	rjmp	.+118    	; 0x2cc6 <action_for_key+0x194>
    2c50:	29 ee       	ldi	r18, 0xE9	; 233
    2c52:	34 e4       	ldi	r19, 0x44	; 68
    2c54:	38 c0       	rjmp	.+112    	; 0x2cc6 <action_for_key+0x194>
    2c56:	2a ee       	ldi	r18, 0xEA	; 234
    2c58:	34 e4       	ldi	r19, 0x44	; 68
    2c5a:	35 c0       	rjmp	.+106    	; 0x2cc6 <action_for_key+0x194>
    2c5c:	25 eb       	ldi	r18, 0xB5	; 181
    2c5e:	34 e4       	ldi	r19, 0x44	; 68
    2c60:	32 c0       	rjmp	.+100    	; 0x2cc6 <action_for_key+0x194>
    2c62:	26 eb       	ldi	r18, 0xB6	; 182
    2c64:	34 e4       	ldi	r19, 0x44	; 68
    2c66:	2f c0       	rjmp	.+94     	; 0x2cc6 <action_for_key+0x194>
    2c68:	23 eb       	ldi	r18, 0xB3	; 179
    2c6a:	34 e4       	ldi	r19, 0x44	; 68
    2c6c:	2c c0       	rjmp	.+88     	; 0x2cc6 <action_for_key+0x194>
    2c6e:	24 eb       	ldi	r18, 0xB4	; 180
    2c70:	34 e4       	ldi	r19, 0x44	; 68
    2c72:	29 c0       	rjmp	.+82     	; 0x2cc6 <action_for_key+0x194>
    2c74:	27 eb       	ldi	r18, 0xB7	; 183
    2c76:	34 e4       	ldi	r19, 0x44	; 68
    2c78:	26 c0       	rjmp	.+76     	; 0x2cc6 <action_for_key+0x194>
    2c7a:	2c ec       	ldi	r18, 0xCC	; 204
    2c7c:	34 e4       	ldi	r19, 0x44	; 68
    2c7e:	23 c0       	rjmp	.+70     	; 0x2cc6 <action_for_key+0x194>
    2c80:	2d ec       	ldi	r18, 0xCD	; 205
    2c82:	34 e4       	ldi	r19, 0x44	; 68
    2c84:	20 c0       	rjmp	.+64     	; 0x2cc6 <action_for_key+0x194>
    2c86:	23 e8       	ldi	r18, 0x83	; 131
    2c88:	35 e4       	ldi	r19, 0x45	; 69
    2c8a:	1d c0       	rjmp	.+58     	; 0x2cc6 <action_for_key+0x194>
    2c8c:	2a e8       	ldi	r18, 0x8A	; 138
    2c8e:	35 e4       	ldi	r19, 0x45	; 69
    2c90:	1a c0       	rjmp	.+52     	; 0x2cc6 <action_for_key+0x194>
    2c92:	22 e9       	ldi	r18, 0x92	; 146
    2c94:	35 e4       	ldi	r19, 0x45	; 69
    2c96:	17 c0       	rjmp	.+46     	; 0x2cc6 <action_for_key+0x194>
    2c98:	24 e9       	ldi	r18, 0x94	; 148
    2c9a:	35 e4       	ldi	r19, 0x45	; 69
    2c9c:	14 c0       	rjmp	.+40     	; 0x2cc6 <action_for_key+0x194>
    2c9e:	21 e2       	ldi	r18, 0x21	; 33
    2ca0:	36 e4       	ldi	r19, 0x46	; 70
    2ca2:	11 c0       	rjmp	.+34     	; 0x2cc6 <action_for_key+0x194>
    2ca4:	23 e2       	ldi	r18, 0x23	; 35
    2ca6:	36 e4       	ldi	r19, 0x46	; 70
    2ca8:	0e c0       	rjmp	.+28     	; 0x2cc6 <action_for_key+0x194>
    2caa:	24 e2       	ldi	r18, 0x24	; 36
    2cac:	36 e4       	ldi	r19, 0x46	; 70
    2cae:	0b c0       	rjmp	.+22     	; 0x2cc6 <action_for_key+0x194>
    2cb0:	25 e2       	ldi	r18, 0x25	; 37
    2cb2:	36 e4       	ldi	r19, 0x46	; 70
    2cb4:	08 c0       	rjmp	.+16     	; 0x2cc6 <action_for_key+0x194>
    2cb6:	26 e2       	ldi	r18, 0x26	; 38
    2cb8:	36 e4       	ldi	r19, 0x46	; 70
    2cba:	05 c0       	rjmp	.+10     	; 0x2cc6 <action_for_key+0x194>
    2cbc:	27 e2       	ldi	r18, 0x27	; 39
    2cbe:	36 e4       	ldi	r19, 0x46	; 70
    2cc0:	02 c0       	rjmp	.+4      	; 0x2cc6 <action_for_key+0x194>
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	34 e4       	ldi	r19, 0x44	; 68
    2cc6:	c9 01       	movw	r24, r18
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    }
}
    2cc8:	08 95       	ret

00002cca <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	08 95       	ret

00002cd0 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    2cd0:	80 91 b8 01 	lds	r24, 0x01B8
    2cd4:	84 30       	cpi	r24, 0x04	; 4
    2cd6:	09 f1       	breq	.+66     	; 0x2d1a <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    2cd8:	10 92 ad 01 	sts	0x01AD, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    2cdc:	20 e4       	ldi	r18, 0x40	; 64
    2cde:	88 e1       	ldi	r24, 0x18	; 24
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	a8 95       	wdr
    2ce8:	80 93 60 00 	sts	0x0060, r24
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    2cf2:	83 b7       	in	r24, 0x33	; 51
    2cf4:	81 7f       	andi	r24, 0xF1	; 241
    2cf6:	84 60       	ori	r24, 0x04	; 4
    2cf8:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    2cfa:	83 b7       	in	r24, 0x33	; 51
    2cfc:	81 60       	ori	r24, 0x01	; 1
    2cfe:	83 bf       	out	0x33, r24	; 51
    sei();
    2d00:	78 94       	sei
    sleep_cpu();
    2d02:	88 95       	sleep
    sleep_disable();
    2d04:	83 b7       	in	r24, 0x33	; 51
    2d06:	8e 7f       	andi	r24, 0xFE	; 254
    2d08:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    2d0a:	88 e1       	ldi	r24, 0x18	; 24
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	f8 94       	cli
    2d10:	80 93 60 00 	sts	0x0060, r24
    2d14:	10 92 60 00 	sts	0x0060, r1
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	08 95       	ret

00002d1c <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    2d1c:	08 95       	ret

00002d1e <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    2d1e:	08 95       	ret

00002d20 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    2d20:	cf 93       	push	r28
    matrix_power_up();
    2d22:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <matrix_power_up>
    matrix_scan();
    2d26:	0e 94 a3 02 	call	0x546	; 0x546 <matrix_scan>
    matrix_power_down();
    2d2a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2d2e:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    2d30:	8c 2f       	mov	r24, r28
    2d32:	0e 94 bf 03 	call	0x77e	; 0x77e <matrix_get_row>
    2d36:	89 2b       	or	r24, r25
    2d38:	29 f4       	brne	.+10     	; 0x2d44 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2d3a:	cf 5f       	subi	r28, 0xFF	; 255
    2d3c:	c8 30       	cpi	r28, 0x08	; 8
    2d3e:	c1 f7       	brne	.-16     	; 0x2d30 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	01 c0       	rjmp	.+2      	; 0x2d46 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    2d46:	cf 91       	pop	r28
    2d48:	08 95       	ret

00002d4a <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    2d4a:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <clear_keyboard>

00002d4e <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    2d4e:	82 e0       	ldi	r24, 0x02	; 2
    2d50:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    2d52:	93 e0       	ldi	r25, 0x03	; 3
    2d54:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    2d56:	9a ef       	ldi	r25, 0xFA	; 250
    2d58:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    2d5a:	80 93 6e 00 	sts	0x006E, r24
    2d5e:	08 95       	ret

00002d60 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    2d60:	8f b7       	in	r24, 0x3f	; 63
    cli();
    2d62:	f8 94       	cli
    t = timer_count;
    2d64:	40 91 ae 01 	lds	r20, 0x01AE
    2d68:	50 91 af 01 	lds	r21, 0x01AF
    2d6c:	60 91 b0 01 	lds	r22, 0x01B0
    2d70:	70 91 b1 01 	lds	r23, 0x01B1
    SREG = sreg;
    2d74:	8f bf       	out	0x3f, r24	; 63

    return (t & 0xFFFF);
}
    2d76:	ca 01       	movw	r24, r20
    2d78:	08 95       	ret

00002d7a <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    2d7a:	1f 92       	push	r1
    2d7c:	0f 92       	push	r0
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	0f 92       	push	r0
    2d82:	11 24       	eor	r1, r1
    2d84:	8f 93       	push	r24
    2d86:	9f 93       	push	r25
    2d88:	af 93       	push	r26
    2d8a:	bf 93       	push	r27
    timer_count++;
    2d8c:	80 91 ae 01 	lds	r24, 0x01AE
    2d90:	90 91 af 01 	lds	r25, 0x01AF
    2d94:	a0 91 b0 01 	lds	r26, 0x01B0
    2d98:	b0 91 b1 01 	lds	r27, 0x01B1
    2d9c:	01 96       	adiw	r24, 0x01	; 1
    2d9e:	a1 1d       	adc	r26, r1
    2da0:	b1 1d       	adc	r27, r1
    2da2:	80 93 ae 01 	sts	0x01AE, r24
    2da6:	90 93 af 01 	sts	0x01AF, r25
    2daa:	a0 93 b0 01 	sts	0x01B0, r26
    2dae:	b0 93 b1 01 	sts	0x01B1, r27
}
    2db2:	bf 91       	pop	r27
    2db4:	af 91       	pop	r26
    2db6:	9f 91       	pop	r25
    2db8:	8f 91       	pop	r24
    2dba:	0f 90       	pop	r0
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	0f 90       	pop	r0
    2dc0:	1f 90       	pop	r1
    2dc2:	18 95       	reti

00002dc4 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    2dc4:	0e 94 85 07 	call	0xf0a	; 0xf0a <USB_Disable>
    cli();
    2dc8:	f8 94       	cli
    2dca:	2f ef       	ldi	r18, 0xFF	; 255
    2dcc:	87 ea       	ldi	r24, 0xA7	; 167
    2dce:	91 e6       	ldi	r25, 0x61	; 97
    2dd0:	21 50       	subi	r18, 0x01	; 1
    2dd2:	80 40       	sbci	r24, 0x00	; 0
    2dd4:	90 40       	sbci	r25, 0x00	; 0
    2dd6:	e1 f7       	brne	.-8      	; 0x2dd0 <bootloader_jump+0xc>
    2dd8:	00 c0       	rjmp	.+0      	; 0x2dda <bootloader_jump+0x16>
    2dda:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    2ddc:	87 e0       	ldi	r24, 0x07	; 7
    2dde:	90 eb       	ldi	r25, 0xB0	; 176
    2de0:	dc 01       	movw	r26, r24
    2de2:	80 93 c1 01 	sts	0x01C1, r24
    2de6:	90 93 c2 01 	sts	0x01C2, r25
    2dea:	a0 93 c3 01 	sts	0x01C3, r26
    2dee:	b0 93 c4 01 	sts	0x01C4, r27
    wdt_enable(WDTO_250MS);
    2df2:	2c e0       	ldi	r18, 0x0C	; 12
    2df4:	88 e1       	ldi	r24, 0x18	; 24
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	f8 94       	cli
    2dfc:	a8 95       	wdr
    2dfe:	80 93 60 00 	sts	0x0060, r24
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	20 93 60 00 	sts	0x0060, r18
    2e08:	ff cf       	rjmp	.-2      	; 0x2e08 <bootloader_jump+0x44>

00002e0a <sleep_led_init>:

void sleep_led_init(void)
{
    /* Timer1 setup */
    /* CTC mode */
    TCCR1B |= _BV(WGM12);
    2e0a:	e1 e8       	ldi	r30, 0x81	; 129
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	88 60       	ori	r24, 0x08	; 8
    2e12:	80 83       	st	Z, r24
    /* Clock selelct: clk/1 */
    TCCR1B |= _BV(CS10);
    2e14:	80 81       	ld	r24, Z
    2e16:	81 60       	ori	r24, 0x01	; 1
    2e18:	80 83       	st	Z, r24
    /* Set TOP value */
    uint8_t sreg = SREG;
    2e1a:	8f b7       	in	r24, 0x3f	; 63
    cli();
    2e1c:	f8 94       	cli
    OCR1AH = (SLEEP_LED_TIMER_TOP>>8)&0xff;
    2e1e:	93 e0       	ldi	r25, 0x03	; 3
    2e20:	90 93 89 00 	sts	0x0089, r25
    OCR1AL = SLEEP_LED_TIMER_TOP&0xff;
    2e24:	90 ed       	ldi	r25, 0xD0	; 208
    2e26:	90 93 88 00 	sts	0x0088, r25
    SREG = sreg;
    2e2a:	8f bf       	out	0x3f, r24	; 63
    2e2c:	08 95       	ret

00002e2e <sleep_led_enable>:
}

void sleep_led_enable(void)
{
    /* Enable Compare Match Interrupt */
    TIMSK1 |= _BV(OCIE1A);
    2e2e:	ef e6       	ldi	r30, 0x6F	; 111
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	82 60       	ori	r24, 0x02	; 2
    2e36:	80 83       	st	Z, r24
    2e38:	08 95       	ret

00002e3a <sleep_led_disable>:
}

void sleep_led_disable(void)
{
    /* Disable Compare Match Interrupt */
    TIMSK1 &= ~_BV(OCIE1A);
    2e3a:	ef e6       	ldi	r30, 0x6F	; 111
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	8d 7f       	andi	r24, 0xFD	; 253
    2e42:	80 83       	st	Z, r24
    2e44:	08 95       	ret

00002e46 <__vector_17>:
255, 252, 245, 233, 218, 199, 179, 157, 135, 113, 93, 74, 58, 44, 32, 23,
15, 10, 6, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

ISR(TIMER1_COMPA_vect)
{
    2e46:	1f 92       	push	r1
    2e48:	0f 92       	push	r0
    2e4a:	0f b6       	in	r0, 0x3f	; 63
    2e4c:	0f 92       	push	r0
    2e4e:	11 24       	eor	r1, r1
    2e50:	0b b6       	in	r0, 0x3b	; 59
    2e52:	0f 92       	push	r0
    2e54:	2f 93       	push	r18
    2e56:	3f 93       	push	r19
    2e58:	4f 93       	push	r20
    2e5a:	5f 93       	push	r21
    2e5c:	6f 93       	push	r22
    2e5e:	7f 93       	push	r23
    2e60:	8f 93       	push	r24
    2e62:	9f 93       	push	r25
    2e64:	af 93       	push	r26
    2e66:	bf 93       	push	r27
    2e68:	ef 93       	push	r30
    2e6a:	ff 93       	push	r31
            uint8_t duration:2;
            uint8_t index:6;
        } pwm;
    } timer = { .row = 0 };

    timer.row++;
    2e6c:	80 91 b2 01 	lds	r24, 0x01B2
    2e70:	90 91 b3 01 	lds	r25, 0x01B3
    2e74:	01 96       	adiw	r24, 0x01	; 1
    2e76:	90 93 b3 01 	sts	0x01B3, r25
    2e7a:	80 93 b2 01 	sts	0x01B2, r24
    
    // LED on
    if (timer.pwm.count == 0) {
    2e7e:	81 11       	cpse	r24, r1
    2e80:	03 c0       	rjmp	.+6      	; 0x2e88 <__vector_17+0x42>
        led_set(1<<USB_LED_CAPS_LOCK);
    2e82:	82 e0       	ldi	r24, 0x02	; 2
    2e84:	0e 94 c9 03 	call	0x792	; 0x792 <led_set>
    }
    // LED off
    if (timer.pwm.count == pgm_read_byte(&breathing_table[timer.pwm.index])) {
    2e88:	e0 91 b3 01 	lds	r30, 0x01B3
    2e8c:	e6 95       	lsr	r30
    2e8e:	e6 95       	lsr	r30
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	e9 52       	subi	r30, 0x29	; 41
    2e94:	fd 4f       	sbci	r31, 0xFD	; 253
    2e96:	e4 91       	lpm	r30, Z
    2e98:	80 91 b2 01 	lds	r24, 0x01B2
    2e9c:	8e 13       	cpse	r24, r30
    2e9e:	03 c0       	rjmp	.+6      	; 0x2ea6 <__vector_17+0x60>
        led_set(0);
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	0e 94 c9 03 	call	0x792	; 0x792 <led_set>
    }
}
    2ea6:	ff 91       	pop	r31
    2ea8:	ef 91       	pop	r30
    2eaa:	bf 91       	pop	r27
    2eac:	af 91       	pop	r26
    2eae:	9f 91       	pop	r25
    2eb0:	8f 91       	pop	r24
    2eb2:	7f 91       	pop	r23
    2eb4:	6f 91       	pop	r22
    2eb6:	5f 91       	pop	r21
    2eb8:	4f 91       	pop	r20
    2eba:	3f 91       	pop	r19
    2ebc:	2f 91       	pop	r18
    2ebe:	0f 90       	pop	r0
    2ec0:	0b be       	out	0x3b, r0	; 59
    2ec2:	0f 90       	pop	r0
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	0f 90       	pop	r0
    2ec8:	1f 90       	pop	r1
    2eca:	18 95       	reti

00002ecc <_exit>:
    2ecc:	f8 94       	cli

00002ece <__stop_program>:
    2ece:	ff cf       	rjmp	.-2      	; 0x2ece <__stop_program>
