   1               		.file	"keymap_ssk.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.action_function,"ax",@progbits
  12               	.global	action_function
  14               	action_function:
  15               	.LFB4:
  16               		.file 1 "keymap_ssk.c"
   1:keymap_ssk.c  **** #include "keymap_common.h"
   2:keymap_ssk.c  **** #include "led.h"
   3:keymap_ssk.c  **** #include "keyboard.h"
   4:keymap_ssk.c  **** #include "action_layer.h"
   5:keymap_ssk.c  **** #include <avr/io.h>
   6:keymap_ssk.c  **** #include "bootloader.h"
   7:keymap_ssk.c  **** 
   8:keymap_ssk.c  **** /* Holding shift and pressing Scroll Lock/Number Lock enables/disables the integrated number pad.
   9:keymap_ssk.c  ****  * Pressing Scroll Lock/Number Lock without shift while the number pad is enabled switches between 
  10:keymap_ssk.c  ****  * and cursor keys by turning Number Lock on or off through the host OS.
  11:keymap_ssk.c  ****  * 
  12:keymap_ssk.c  ****  * Holding Caps Lock + Right Shift + Pause puts the controller into DFU mode.
  13:keymap_ssk.c  ****  * 
  14:keymap_ssk.c  ****  */
  15:keymap_ssk.c  **** 
  16:keymap_ssk.c  **** const uint8_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
  17:keymap_ssk.c  ****     /* Keymap 0: Default Layer
  18:keymap_ssk.c  ****      * ,-------------------------------------------------------------------------------------.
  19:keymap_ssk.c  ****      * |Esc|     | F1| F2| F3| F4| F5| F6| F7| F8| F9| F10| F11| F12|   PSCR|  SCRL|  PAUS|  |
  20:keymap_ssk.c  ****      * |-------------------------------------------------------------------------------------|
  21:keymap_ssk.c  ****      * |-------------------------------------------------------------------------------------|
  22:keymap_ssk.c  ****      * |`  |  1|  2|  3|  4|  5|  6|  7|  8|  9|  0|  -|  =| * Bspc|     INS|  HOME|  PGUP|
  23:keymap_ssk.c  ****      * |-------------------------------------------------------------------------------------|
  24:keymap_ssk.c  ****      * |Tab  |  Q|  W|  E|  R|  T|  Y|  U|  I|  O|  P|  [|  ]|    \|     DEL|   END|  PGDN|
  25:keymap_ssk.c  ****      * |-------------------------------------------------------------------------------------|
  26:keymap_ssk.c  ****      * |Caps  |  A|  S|  D|  F|  G|  H|  J|  K|  L|  ;|  '|* Return|
  27:keymap_ssk.c  ****      * |-------------------------------------------------------------------------------------|
  28:keymap_ssk.c  ****      * |Shift * |  Z|  X|  C|  V|  B|  N|  M|  ,|  .|  /| *   Shift|        |   UP |         |
  29:keymap_ssk.c  ****      * |-------------------------------------------------------------------------------------|
  30:keymap_ssk.c  ****      * |Ctrl|    |Alt |            Space          |Alt |    |Ctrl  |    LEFT| DOWN | RIGHT|  |
  31:keymap_ssk.c  ****      * `-------------------------------------------------------------------------------------'
  32:keymap_ssk.c  ****      */    
  33:keymap_ssk.c  ****     KEYMAP( \
  34:keymap_ssk.c  ****         ESC,        F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,   F9,   F10,   F11,   F12,         PSCR,
  35:keymap_ssk.c  ****         GRV,  1,    2,   3,   4,   5,   6,   7,   8,   9,    0,    MINS,  EQL,   BSLS, BSPC,  INS, 
  36:keymap_ssk.c  ****         TAB,  Q,    W,   E,   R,   T,   Y,   U,   I,   O,    P,    LBRC,  RBRC,  BSLS,        DEL, 
  37:keymap_ssk.c  ****         FN0,  A,    S,   D,   F,   G,   H,   J,   K,   L,    SCLN, QUOT,  BSLS,  ENT, \
  38:keymap_ssk.c  ****         LSFT, NUBS, Z,   X,   C,   V,   B,   N,   M,   COMM, DOT,  SLSH,  NO,    RSFT,             
  39:keymap_ssk.c  ****         LCTL,       LALT,                    SPC,                  RALT,         RCTL,        LEFT,
  40:keymap_ssk.c  ****         
  41:keymap_ssk.c  ****     KEYMAP( \
  42:keymap_ssk.c  ****         TRNS,       TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS,        TRNS,
  43:keymap_ssk.c  ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,P7,  P8,  P9,   TRNS, PMNS,  PPLS,  TRNS, TRNS,  TRNS,
  44:keymap_ssk.c  ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,P4,  P5,  P6,   TRNS, TRNS,  TRNS,  TRNS,        TRNS,
  45:keymap_ssk.c  ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,P1,  P2,  P3,   PAST, TRNS,  TRNS,  PENT, \
  46:keymap_ssk.c  ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,P0,  PCMM, PDOT, PSLS,  TRNS,  TRNS,             
  47:keymap_ssk.c  ****         TRNS,       TRNS,                    TRNS,                 TRNS,         TRNS,        TRNS,
  48:keymap_ssk.c  **** 	
  49:keymap_ssk.c  ****     KEYMAP( \
  50:keymap_ssk.c  ****         TRNS,       TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS,        TRNS,
  51:keymap_ssk.c  ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS, TRNS,  TRNS,
  52:keymap_ssk.c  ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS,        TRNS,
  53:keymap_ssk.c  ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS, \
  54:keymap_ssk.c  ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS,             
  55:keymap_ssk.c  ****         TRNS,       TRNS,                    TRNS,                 TRNS,         TRNS,        TRNS,
  56:keymap_ssk.c  ****          
  57:keymap_ssk.c  **** };
  58:keymap_ssk.c  **** 
  59:keymap_ssk.c  **** /*
  60:keymap_ssk.c  **** * user defined action function
  61:keymap_ssk.c  **** */
  62:keymap_ssk.c  **** enum function_id {
  63:keymap_ssk.c  ****     SHIFT_NUM, // Shift + SCRL -> Num Pad Layer On
  64:keymap_ssk.c  ****     SHIFT_NUM1, // Shift + Num -> Num Pad Layer Off
  65:keymap_ssk.c  ****     PAUS_BOOT, // Caps Lock + Right Shift + Pause = DFU    
  66:keymap_ssk.c  **** };
  67:keymap_ssk.c  **** 
  68:keymap_ssk.c  **** void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
  69:keymap_ssk.c  **** {
  17               		.loc 1 69 0
  18               		.cfi_startproc
  19               	.LVL0:
  20 0000 EF92      		push r14
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 14, -2
  24 0002 FF92      		push r15
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 15, -3
  28               	/* prologue: function */
  29               	/* frame size = 0 */
  30               	/* stack size = 2 */
  31               	.L__stack_usage = 2
  32 0004 7C01      		movw r14,r24
  70:keymap_ssk.c  ****     if (record->event.pressed) dprint("P"); else dprint("R");
  71:keymap_ssk.c  ****     if (record->tap.interrupted) dprint("i");
  72:keymap_ssk.c  **** 
  73:keymap_ssk.c  **** #   define MODS_SHIFT_MASK   (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT))
  74:keymap_ssk.c  ****     static uint8_t shift_mod;
  75:keymap_ssk.c  ****     
  76:keymap_ssk.c  **** #   define MODS_RSHIFT_MASK   (MOD_BIT(KC_RSHIFT))
  77:keymap_ssk.c  ****     static uint8_t r_shift_mod;
  78:keymap_ssk.c  ****     
  79:keymap_ssk.c  ****     switch (id) {
  33               		.loc 1 79 0
  34 0006 6130      		cpi r22,lo8(1)
  35 0008 01F0      		breq .L4
  36 000a 00F0      		brlo .L3
  37 000c 6230      		cpi r22,lo8(2)
  38 000e 01F0      		breq .+2
  39 0010 00C0      		rjmp .L1
  40 0012 00C0      		rjmp .L5
  41               	.L3:
  42               	.LBB2:
  80:keymap_ssk.c  ****         // Shift + Scroll Lock -> Num Pad Layer On
  81:keymap_ssk.c  ****         case SHIFT_NUM:
  82:keymap_ssk.c  ****             shift_mod = get_mods()&MODS_SHIFT_MASK;
  43               		.loc 1 82 0
  44 0014 0E94 0000 		call get_mods
  45               	.LVL1:
  46 0018 8272      		andi r24,34
  47 001a 9927      		clr r25
  48 001c 8093 0000 		sts shift_mod.2114,r24
  83:keymap_ssk.c  ****             if (record->event.pressed) {
  49               		.loc 1 83 0
  50 0020 F701      		movw r30,r14
  51 0022 3281      		ldd r19,Z+2
  52 0024 3323      		tst r19
  53 0026 01F0      		breq .L6
  84:keymap_ssk.c  ****                 if (shift_mod) {
  54               		.loc 1 84 0
  55 0028 8111      		cpse r24,__zero_reg__
  56 002a 00C0      		rjmp .L14
  57               	.L7:
  58               	.LBB3:
  85:keymap_ssk.c  **** 		    layer_invert(1); // toggle number pad layer
  86:keymap_ssk.c  **** 		    DDR_NUMLAYER ^= (1<<BIT_NUMLAYER); // turn on layer LED
  87:keymap_ssk.c  ****                 } else {
  88:keymap_ssk.c  ****                     del_mods(shift_mod); // remove shift
  59               		.loc 1 88 0
  60 002c 0E94 0000 		call del_mods
  61               	.LVL2:
  89:keymap_ssk.c  ****                     add_key(KC_SLCK);
  62               		.loc 1 89 0
  63 0030 87E4      		ldi r24,lo8(71)
  64 0032 90E0      		ldi r25,0
  65 0034 00C0      		rjmp .L15
  66               	.L6:
  67               	.LBE3:
  90:keymap_ssk.c  ****                     send_keyboard_report(); // send Scroll Lock
  91:keymap_ssk.c  ****                     add_mods(shift_mod); // return shift but not sent
  92:keymap_ssk.c  ****                 }
  93:keymap_ssk.c  ****             } else {
  94:keymap_ssk.c  ****                 if (shift_mod) {                    
  68               		.loc 1 94 0
  69 0036 8111      		cpse r24,__zero_reg__
  70 0038 00C0      		rjmp .L1
  71               	.LBB4:
  95:keymap_ssk.c  ****                 } else {
  96:keymap_ssk.c  ****                     del_key(KC_SLCK);
  72               		.loc 1 96 0
  73 003a 87E4      		ldi r24,lo8(71)
  74 003c 90E0      		ldi r25,0
  75 003e 00C0      		rjmp .L16
  76               	.LVL3:
  77               	.L4:
  78               	.LBE4:
  97:keymap_ssk.c  ****                     send_keyboard_report();
  98:keymap_ssk.c  ****                 }
  99:keymap_ssk.c  ****             }
 100:keymap_ssk.c  ****             break;
 101:keymap_ssk.c  **** 	    
 102:keymap_ssk.c  **** 	// Shift + Num Lock -> Num Pad Layer Off
 103:keymap_ssk.c  ****         case SHIFT_NUM1:
 104:keymap_ssk.c  ****             shift_mod = get_mods()&MODS_SHIFT_MASK;
  79               		.loc 1 104 0
  80 0040 0E94 0000 		call get_mods
  81               	.LVL4:
  82 0044 8272      		andi r24,34
  83 0046 9927      		clr r25
  84 0048 8093 0000 		sts shift_mod.2114,r24
 105:keymap_ssk.c  ****             if (record->event.pressed) {
  85               		.loc 1 105 0
  86 004c F701      		movw r30,r14
  87 004e 3281      		ldd r19,Z+2
  88 0050 3323      		tst r19
  89 0052 01F0      		breq .L9
 106:keymap_ssk.c  ****                 if (shift_mod) {
  90               		.loc 1 106 0
  91 0054 8823      		tst r24
  92 0056 01F0      		breq .L10
  93               	.L14:
 107:keymap_ssk.c  **** 		    layer_invert(1); // toggle number pad layer
  94               		.loc 1 107 0
  95 0058 81E0      		ldi r24,lo8(1)
  96 005a 0E94 0000 		call layer_invert
  97               	.LVL5:
 108:keymap_ssk.c  **** 		    DDR_NUMLAYER ^= (1<<BIT_NUMLAYER); // turn off layer LED
  98               		.loc 1 108 0
  99 005e 84B1      		in r24,0x4
 100 0060 98E0      		ldi r25,lo8(8)
 101 0062 8927      		eor r24,r25
 102 0064 84B9      		out 0x4,r24
 103 0066 00C0      		rjmp .L1
 104               	.L10:
 105               	.LBB5:
 109:keymap_ssk.c  ****                 } else {
 110:keymap_ssk.c  ****                     del_mods(shift_mod); // remove shift
 106               		.loc 1 110 0
 107 0068 0E94 0000 		call del_mods
 108               	.LVL6:
 111:keymap_ssk.c  ****                     add_key(KC_NLCK);
 109               		.loc 1 111 0
 110 006c 83E5      		ldi r24,lo8(83)
 111 006e 90E0      		ldi r25,0
 112               	.L15:
 113 0070 0E94 0000 		call add_key
 114               	.LVL7:
 112:keymap_ssk.c  ****                     send_keyboard_report(); // send Num Lock
 115               		.loc 1 112 0
 116 0074 0E94 0000 		call send_keyboard_report
 117               	.LVL8:
 113:keymap_ssk.c  ****                     add_mods(shift_mod); // return shift but not sent
 118               		.loc 1 113 0
 119 0078 8091 0000 		lds r24,shift_mod.2114
 120               	.L17:
 121 007c 90E0      		ldi r25,0
 122               	/* epilogue start */
 123               	.LBE5:
 124               	.LBE2:
 114:keymap_ssk.c  ****                 }
 115:keymap_ssk.c  ****             } else {
 116:keymap_ssk.c  ****                 if (shift_mod) {
 117:keymap_ssk.c  ****                 } else {
 118:keymap_ssk.c  ****                     del_key(KC_NLCK);
 119:keymap_ssk.c  ****                     send_keyboard_report();
 120:keymap_ssk.c  ****                 }
 121:keymap_ssk.c  ****             }
 122:keymap_ssk.c  ****             break;
 123:keymap_ssk.c  **** 
 124:keymap_ssk.c  ****         // Caps Lock + Right Shift + Pause = DFU
 125:keymap_ssk.c  ****         case PAUS_BOOT:
 126:keymap_ssk.c  ****             r_shift_mod = get_mods()&MODS_RSHIFT_MASK;
 127:keymap_ssk.c  ****             if (record->event.pressed) {
 128:keymap_ssk.c  ****                 if (r_shift_mod) {
 129:keymap_ssk.c  **** 		    del_mods(r_shift_mod);
 130:keymap_ssk.c  **** 		    send_keyboard_report();
 131:keymap_ssk.c  **** 		    bootloader_jump(); // JUMP TO DFU BOOTLOADER
 132:keymap_ssk.c  ****                 } else {
 133:keymap_ssk.c  ****                     del_mods(r_shift_mod); // remove shift
 134:keymap_ssk.c  ****                     add_key(KC_PAUS);
 135:keymap_ssk.c  ****                     send_keyboard_report(); // send Scroll Lock
 136:keymap_ssk.c  ****                     add_mods(r_shift_mod); // return shift but not sent
 137:keymap_ssk.c  ****                 }
 138:keymap_ssk.c  ****             } else {
 139:keymap_ssk.c  ****                 if (r_shift_mod) {                   
 140:keymap_ssk.c  ****                 } else {
 141:keymap_ssk.c  ****                     del_key(KC_PAUS);
 142:keymap_ssk.c  ****                     send_keyboard_report();
 143:keymap_ssk.c  ****                 }
 144:keymap_ssk.c  ****             }
 145:keymap_ssk.c  ****             break;
 146:keymap_ssk.c  ****     }
 147:keymap_ssk.c  ****   
 148:keymap_ssk.c  **** };
 125               		.loc 1 148 0
 126 007e FF90      		pop r15
 127 0080 EF90      		pop r14
 128               	.LVL9:
 129               	.LBB13:
 130               	.LBB6:
 113:keymap_ssk.c  ****                     add_mods(shift_mod); // return shift but not sent
 131               		.loc 1 113 0
 132 0082 0C94 0000 		jmp add_mods
 133               	.LVL10:
 134               	.L9:
 135               	.LBE6:
 116:keymap_ssk.c  ****                 if (shift_mod) {
 136               		.loc 1 116 0
 137 0086 8111      		cpse r24,__zero_reg__
 138 0088 00C0      		rjmp .L1
 139               	.LBB7:
 118:keymap_ssk.c  ****                     del_key(KC_NLCK);
 140               		.loc 1 118 0
 141 008a 83E5      		ldi r24,lo8(83)
 142 008c 90E0      		ldi r25,0
 143 008e 00C0      		rjmp .L16
 144               	.LVL11:
 145               	.L5:
 146               	.LBE7:
 126:keymap_ssk.c  ****             r_shift_mod = get_mods()&MODS_RSHIFT_MASK;
 147               		.loc 1 126 0
 148 0090 0E94 0000 		call get_mods
 149               	.LVL12:
 150 0094 8072      		andi r24,32
 151 0096 9927      		clr r25
 152 0098 8093 0000 		sts r_shift_mod.2115,r24
 127:keymap_ssk.c  ****             if (record->event.pressed) {
 153               		.loc 1 127 0
 154 009c F701      		movw r30,r14
 155 009e 3281      		ldd r19,Z+2
 156 00a0 3323      		tst r19
 157 00a2 01F0      		breq .L12
 128:keymap_ssk.c  ****                 if (r_shift_mod) {
 158               		.loc 1 128 0
 159 00a4 8823      		tst r24
 160 00a6 01F0      		breq .L13
 161               	.LBB8:
 129:keymap_ssk.c  **** 		    del_mods(r_shift_mod);
 162               		.loc 1 129 0
 163 00a8 0E94 0000 		call del_mods
 164               	.LVL13:
 130:keymap_ssk.c  **** 		    send_keyboard_report();
 165               		.loc 1 130 0
 166 00ac 0E94 0000 		call send_keyboard_report
 167               	.LVL14:
 168               	/* epilogue start */
 169               	.LBE8:
 170               	.LBE13:
 171               		.loc 1 148 0
 172 00b0 FF90      		pop r15
 173 00b2 EF90      		pop r14
 174               	.LVL15:
 175               	.LBB14:
 176               	.LBB9:
 131:keymap_ssk.c  **** 		    bootloader_jump(); // JUMP TO DFU BOOTLOADER
 177               		.loc 1 131 0
 178 00b4 0C94 0000 		jmp bootloader_jump
 179               	.LVL16:
 180               	.L13:
 181               	.LBE9:
 182               	.LBB10:
 133:keymap_ssk.c  ****                     del_mods(r_shift_mod); // remove shift
 183               		.loc 1 133 0
 184 00b8 0E94 0000 		call del_mods
 185               	.LVL17:
 134:keymap_ssk.c  ****                     add_key(KC_PAUS);
 186               		.loc 1 134 0
 187 00bc 88E4      		ldi r24,lo8(72)
 188 00be 90E0      		ldi r25,0
 189 00c0 0E94 0000 		call add_key
 190               	.LVL18:
 135:keymap_ssk.c  ****                     send_keyboard_report(); // send Scroll Lock
 191               		.loc 1 135 0
 192 00c4 0E94 0000 		call send_keyboard_report
 193               	.LVL19:
 136:keymap_ssk.c  ****                     add_mods(r_shift_mod); // return shift but not sent
 194               		.loc 1 136 0
 195 00c8 8091 0000 		lds r24,r_shift_mod.2115
 196 00cc 00C0      		rjmp .L17
 197               	.L12:
 198               	.LBE10:
 139:keymap_ssk.c  ****                 if (r_shift_mod) {                   
 199               		.loc 1 139 0
 200 00ce 8111      		cpse r24,__zero_reg__
 201 00d0 00C0      		rjmp .L1
 202               	.LBB11:
 141:keymap_ssk.c  ****                     del_key(KC_PAUS);
 203               		.loc 1 141 0
 204 00d2 88E4      		ldi r24,lo8(72)
 205 00d4 90E0      		ldi r25,0
 206               	.L16:
 207 00d6 0E94 0000 		call del_key
 208               	.LVL20:
 209               	/* epilogue start */
 210               	.LBE11:
 211               	.LBE14:
 212               		.loc 1 148 0
 213 00da FF90      		pop r15
 214 00dc EF90      		pop r14
 215               	.LVL21:
 216               	.LBB15:
 217               	.LBB12:
 142:keymap_ssk.c  ****                     send_keyboard_report();
 218               		.loc 1 142 0
 219 00de 0C94 0000 		jmp send_keyboard_report
 220               	.LVL22:
 221               	.L1:
 222               	/* epilogue start */
 223               	.LBE12:
 224               	.LBE15:
 225               		.loc 1 148 0
 226 00e2 FF90      		pop r15
 227 00e4 EF90      		pop r14
 228               	.LVL23:
 229 00e6 0895      		ret
 230               		.cfi_endproc
 231               	.LFE4:
 233               	.global	fn_actions
 234               		.section	.progmem.data.fn_actions,"a",@progbits
 237               	fn_actions:
 238 0000 39A2      		.word	-24007
 239 0002 00F0      		.word	-4096
 240 0004 01F0      		.word	-4095
 241 0006 02F0      		.word	-4094
 242               	.global	keymaps
 243               		.section	.progmem.data.keymaps,"a",@progbits
 246               	keymaps:
 247 0000 00        		.byte	0
 248 0001 00        		.byte	0
 249 0002 00        		.byte	0
 250 0003 00        		.byte	0
 251 0004 00        		.byte	0
 252 0005 05        		.byte	5
 253 0006 2C        		.byte	44
 254 0007 11        		.byte	17
 255 0008 00        		.byte	0
 256 0009 00        		.byte	0
 257 000a 38        		.byte	56
 258 000b 51        		.byte	81
 259 000c 4F        		.byte	79
 260 000d 00        		.byte	0
 261 000e 50        		.byte	80
 262 000f E6        		.byte	-26
 263 0010 E4        		.byte	-28
 264 0011 E5        		.byte	-27
 265 0012 1D        		.byte	29
 266 0013 1B        		.byte	27
 267 0014 06        		.byte	6
 268 0015 19        		.byte	25
 269 0016 28        		.byte	40
 270 0017 10        		.byte	16
 271 0018 36        		.byte	54
 272 0019 37        		.byte	55
 273 001a 31        		.byte	49
 274 001b 00        		.byte	0
 275 001c 00        		.byte	0
 276 001d 00        		.byte	0
 277 001e 48        		.byte	72
 278 001f 00        		.byte	0
 279 0020 00        		.byte	0
 280 0021 00        		.byte	0
 281 0022 04        		.byte	4
 282 0023 16        		.byte	22
 283 0024 07        		.byte	7
 284 0025 09        		.byte	9
 285 0026 31        		.byte	49
 286 0027 0D        		.byte	13
 287 0028 0E        		.byte	14
 288 0029 0F        		.byte	15
 289 002a 33        		.byte	51
 290 002b 00        		.byte	0
 291 002c 00        		.byte	0
 292 002d 00        		.byte	0
 293 002e 00        		.byte	0
 294 002f 00        		.byte	0
 295 0030 00        		.byte	0
 296 0031 00        		.byte	0
 297 0032 14        		.byte	20
 298 0033 1A        		.byte	26
 299 0034 08        		.byte	8
 300 0035 15        		.byte	21
 301 0036 31        		.byte	49
 302 0037 18        		.byte	24
 303 0038 0C        		.byte	12
 304 0039 12        		.byte	18
 305 003a 13        		.byte	19
 306 003b 00        		.byte	0
 307 003c 00        		.byte	0
 308 003d 00        		.byte	0
 309 003e 00        		.byte	0
 310 003f C1        		.byte	-63
 311 0040 00        		.byte	0
 312 0041 00        		.byte	0
 313 0042 1E        		.byte	30
 314 0043 1F        		.byte	31
 315 0044 20        		.byte	32
 316 0045 21        		.byte	33
 317 0046 43        		.byte	67
 318 0047 24        		.byte	36
 319 0048 25        		.byte	37
 320 0049 26        		.byte	38
 321 004a 27        		.byte	39
 322 004b 44        		.byte	68
 323 004c 45        		.byte	69
 324 004d 4E        		.byte	78
 325 004e 4D        		.byte	77
 326 004f 46        		.byte	70
 327 0050 E0        		.byte	-32
 328 0051 00        		.byte	0
 329 0052 35        		.byte	53
 330 0053 3A        		.byte	58
 331 0054 3B        		.byte	59
 332 0055 22        		.byte	34
 333 0056 42        		.byte	66
 334 0057 23        		.byte	35
 335 0058 2E        		.byte	46
 336 0059 41        		.byte	65
 337 005a 2D        		.byte	45
 338 005b 4C        		.byte	76
 339 005c 49        		.byte	73
 340 005d 4B        		.byte	75
 341 005e 4A        		.byte	74
 342 005f 00        		.byte	0
 343 0060 00        		.byte	0
 344 0061 E1        		.byte	-31
 345 0062 2B        		.byte	43
 346 0063 C0        		.byte	-64
 347 0064 3C        		.byte	60
 348 0065 17        		.byte	23
 349 0066 2A        		.byte	42
 350 0067 1C        		.byte	28
 351 0068 30        		.byte	48
 352 0069 40        		.byte	64
 353 006a 2F        		.byte	47
 354 006b 00        		.byte	0
 355 006c 00        		.byte	0
 356 006d 00        		.byte	0
 357 006e 00        		.byte	0
 358 006f 00        		.byte	0
 359 0070 00        		.byte	0
 360 0071 00        		.byte	0
 361 0072 29        		.byte	41
 362 0073 64        		.byte	100
 363 0074 3D        		.byte	61
 364 0075 0A        		.byte	10
 365 0076 3E        		.byte	62
 366 0077 0B        		.byte	11
 367 0078 3F        		.byte	63
 368 0079 00        		.byte	0
 369 007a 34        		.byte	52
 370 007b 00        		.byte	0
 371 007c 00        		.byte	0
 372 007d 00        		.byte	0
 373 007e 52        		.byte	82
 374 007f E2        		.byte	-30
 375 0080 00        		.byte	0
 376 0081 00        		.byte	0
 377 0082 00        		.byte	0
 378 0083 00        		.byte	0
 379 0084 00        		.byte	0
 380 0085 01        		.byte	1
 381 0086 01        		.byte	1
 382 0087 01        		.byte	1
 383 0088 01        		.byte	1
 384 0089 00        		.byte	0
 385 008a 54        		.byte	84
 386 008b 01        		.byte	1
 387 008c 01        		.byte	1
 388 008d 00        		.byte	0
 389 008e 01        		.byte	1
 390 008f 01        		.byte	1
 391 0090 01        		.byte	1
 392 0091 01        		.byte	1
 393 0092 01        		.byte	1
 394 0093 01        		.byte	1
 395 0094 01        		.byte	1
 396 0095 01        		.byte	1
 397 0096 58        		.byte	88
 398 0097 62        		.byte	98
 399 0098 85        		.byte	-123
 400 0099 63        		.byte	99
 401 009a 01        		.byte	1
 402 009b 00        		.byte	0
 403 009c 00        		.byte	0
 404 009d 00        		.byte	0
 405 009e 01        		.byte	1
 406 009f 00        		.byte	0
 407 00a0 00        		.byte	0
 408 00a1 00        		.byte	0
 409 00a2 01        		.byte	1
 410 00a3 01        		.byte	1
 411 00a4 01        		.byte	1
 412 00a5 01        		.byte	1
 413 00a6 01        		.byte	1
 414 00a7 59        		.byte	89
 415 00a8 5A        		.byte	90
 416 00a9 5B        		.byte	91
 417 00aa 55        		.byte	85
 418 00ab 00        		.byte	0
 419 00ac 00        		.byte	0
 420 00ad 00        		.byte	0
 421 00ae 00        		.byte	0
 422 00af 00        		.byte	0
 423 00b0 00        		.byte	0
 424 00b1 00        		.byte	0
 425 00b2 01        		.byte	1
 426 00b3 01        		.byte	1
 427 00b4 01        		.byte	1
 428 00b5 01        		.byte	1
 429 00b6 01        		.byte	1
 430 00b7 5C        		.byte	92
 431 00b8 5D        		.byte	93
 432 00b9 5E        		.byte	94
 433 00ba 01        		.byte	1
 434 00bb 00        		.byte	0
 435 00bc 00        		.byte	0
 436 00bd 00        		.byte	0
 437 00be 00        		.byte	0
 438 00bf C2        		.byte	-62
 439 00c0 00        		.byte	0
 440 00c1 00        		.byte	0
 441 00c2 01        		.byte	1
 442 00c3 01        		.byte	1
 443 00c4 01        		.byte	1
 444 00c5 01        		.byte	1
 445 00c6 01        		.byte	1
 446 00c7 5F        		.byte	95
 447 00c8 60        		.byte	96
 448 00c9 61        		.byte	97
 449 00ca 01        		.byte	1
 450 00cb 01        		.byte	1
 451 00cc 01        		.byte	1
 452 00cd 01        		.byte	1
 453 00ce 01        		.byte	1
 454 00cf 01        		.byte	1
 455 00d0 01        		.byte	1
 456 00d1 00        		.byte	0
 457 00d2 01        		.byte	1
 458 00d3 01        		.byte	1
 459 00d4 01        		.byte	1
 460 00d5 01        		.byte	1
 461 00d6 01        		.byte	1
 462 00d7 01        		.byte	1
 463 00d8 57        		.byte	87
 464 00d9 01        		.byte	1
 465 00da 56        		.byte	86
 466 00db 01        		.byte	1
 467 00dc 01        		.byte	1
 468 00dd 01        		.byte	1
 469 00de 01        		.byte	1
 470 00df 00        		.byte	0
 471 00e0 00        		.byte	0
 472 00e1 01        		.byte	1
 473 00e2 01        		.byte	1
 474 00e3 01        		.byte	1
 475 00e4 01        		.byte	1
 476 00e5 01        		.byte	1
 477 00e6 01        		.byte	1
 478 00e7 01        		.byte	1
 479 00e8 01        		.byte	1
 480 00e9 01        		.byte	1
 481 00ea 01        		.byte	1
 482 00eb 00        		.byte	0
 483 00ec 00        		.byte	0
 484 00ed 00        		.byte	0
 485 00ee 00        		.byte	0
 486 00ef 00        		.byte	0
 487 00f0 00        		.byte	0
 488 00f1 00        		.byte	0
 489 00f2 01        		.byte	1
 490 00f3 01        		.byte	1
 491 00f4 01        		.byte	1
 492 00f5 01        		.byte	1
 493 00f6 01        		.byte	1
 494 00f7 01        		.byte	1
 495 00f8 01        		.byte	1
 496 00f9 00        		.byte	0
 497 00fa 01        		.byte	1
 498 00fb 00        		.byte	0
 499 00fc 00        		.byte	0
 500 00fd 00        		.byte	0
 501 00fe 01        		.byte	1
 502 00ff 01        		.byte	1
 503 0100 00        		.byte	0
 504 0101 00        		.byte	0
 505 0102 00        		.byte	0
 506 0103 00        		.byte	0
 507 0104 00        		.byte	0
 508 0105 01        		.byte	1
 509 0106 01        		.byte	1
 510 0107 01        		.byte	1
 511 0108 01        		.byte	1
 512 0109 00        		.byte	0
 513 010a 01        		.byte	1
 514 010b 01        		.byte	1
 515 010c 01        		.byte	1
 516 010d 00        		.byte	0
 517 010e 01        		.byte	1
 518 010f 01        		.byte	1
 519 0110 01        		.byte	1
 520 0111 01        		.byte	1
 521 0112 01        		.byte	1
 522 0113 01        		.byte	1
 523 0114 01        		.byte	1
 524 0115 01        		.byte	1
 525 0116 01        		.byte	1
 526 0117 01        		.byte	1
 527 0118 01        		.byte	1
 528 0119 01        		.byte	1
 529 011a 01        		.byte	1
 530 011b 00        		.byte	0
 531 011c 00        		.byte	0
 532 011d 00        		.byte	0
 533 011e C3        		.byte	-61
 534 011f 00        		.byte	0
 535 0120 00        		.byte	0
 536 0121 00        		.byte	0
 537 0122 01        		.byte	1
 538 0123 01        		.byte	1
 539 0124 01        		.byte	1
 540 0125 01        		.byte	1
 541 0126 01        		.byte	1
 542 0127 01        		.byte	1
 543 0128 01        		.byte	1
 544 0129 01        		.byte	1
 545 012a 01        		.byte	1
 546 012b 00        		.byte	0
 547 012c 00        		.byte	0
 548 012d 00        		.byte	0
 549 012e 00        		.byte	0
 550 012f 00        		.byte	0
 551 0130 00        		.byte	0
 552 0131 00        		.byte	0
 553 0132 01        		.byte	1
 554 0133 01        		.byte	1
 555 0134 01        		.byte	1
 556 0135 01        		.byte	1
 557 0136 01        		.byte	1
 558 0137 01        		.byte	1
 559 0138 01        		.byte	1
 560 0139 01        		.byte	1
 561 013a 01        		.byte	1
 562 013b 00        		.byte	0
 563 013c 00        		.byte	0
 564 013d 00        		.byte	0
 565 013e 00        		.byte	0
 566 013f 01        		.byte	1
 567 0140 00        		.byte	0
 568 0141 00        		.byte	0
 569 0142 01        		.byte	1
 570 0143 01        		.byte	1
 571 0144 01        		.byte	1
 572 0145 01        		.byte	1
 573 0146 01        		.byte	1
 574 0147 01        		.byte	1
 575 0148 01        		.byte	1
 576 0149 01        		.byte	1
 577 014a 01        		.byte	1
 578 014b 01        		.byte	1
 579 014c 01        		.byte	1
 580 014d 01        		.byte	1
 581 014e 01        		.byte	1
 582 014f 01        		.byte	1
 583 0150 01        		.byte	1
 584 0151 00        		.byte	0
 585 0152 01        		.byte	1
 586 0153 01        		.byte	1
 587 0154 01        		.byte	1
 588 0155 01        		.byte	1
 589 0156 01        		.byte	1
 590 0157 01        		.byte	1
 591 0158 01        		.byte	1
 592 0159 01        		.byte	1
 593 015a 01        		.byte	1
 594 015b 01        		.byte	1
 595 015c 01        		.byte	1
 596 015d 01        		.byte	1
 597 015e 01        		.byte	1
 598 015f 00        		.byte	0
 599 0160 00        		.byte	0
 600 0161 01        		.byte	1
 601 0162 01        		.byte	1
 602 0163 01        		.byte	1
 603 0164 01        		.byte	1
 604 0165 01        		.byte	1
 605 0166 01        		.byte	1
 606 0167 01        		.byte	1
 607 0168 01        		.byte	1
 608 0169 01        		.byte	1
 609 016a 01        		.byte	1
 610 016b 00        		.byte	0
 611 016c 00        		.byte	0
 612 016d 00        		.byte	0
 613 016e 00        		.byte	0
 614 016f 00        		.byte	0
 615 0170 00        		.byte	0
 616 0171 00        		.byte	0
 617 0172 01        		.byte	1
 618 0173 01        		.byte	1
 619 0174 01        		.byte	1
 620 0175 01        		.byte	1
 621 0176 01        		.byte	1
 622 0177 01        		.byte	1
 623 0178 01        		.byte	1
 624 0179 00        		.byte	0
 625 017a 01        		.byte	1
 626 017b 00        		.byte	0
 627 017c 00        		.byte	0
 628 017d 00        		.byte	0
 629 017e 01        		.byte	1
 630 017f 01        		.byte	1
 631               		.section	.bss.shift_mod.2114,"aw",@nobits
 634               	shift_mod.2114:
 635 0000 00        		.zero	1
 636               		.section	.bss.r_shift_mod.2115,"aw",@nobits
 639               	r_shift_mod.2115:
 640 0000 00        		.zero	1
 641               		.text
 642               	.Letext0:
 643               		.file 2 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/stdint.h"
 644               		.file 3 "../../../../tmk_core/common/keycode.h"
 645               		.file 4 "../../../../tmk_core/common/keyboard.h"
 646               		.file 5 "../../../../tmk_core/common/action_code.h"
 647               		.file 6 "../../../../tmk_core/common/action.h"
 648               		.file 7 "../../../../tmk_core/common/action_layer.h"
 649               		.file 8 "../../../../tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keymap_ssk.c
     /tmp/ccImpd57.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccImpd57.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccImpd57.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccImpd57.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccImpd57.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccImpd57.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccImpd57.s:14     .text.action_function:0000000000000000 action_function
     /tmp/ccImpd57.s:634    .bss.shift_mod.2114:0000000000000000 shift_mod.2114
     /tmp/ccImpd57.s:639    .bss.r_shift_mod.2115:0000000000000000 r_shift_mod.2115
     /tmp/ccImpd57.s:237    .progmem.data.fn_actions:0000000000000000 fn_actions
     /tmp/ccImpd57.s:246    .progmem.data.keymaps:0000000000000000 keymaps

UNDEFINED SYMBOLS
get_mods
del_mods
layer_invert
add_key
send_keyboard_report
add_mods
bootloader_jump
del_key
__do_clear_bss
