
colossus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000343a  000034ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000343a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  00800118  00800118  000034e6  2**0
                  ALLOC
  3 .noinit       00000004  008001cf  008001cf  000034e6  2**0
                  ALLOC
  4 .stab         00001410  00000000  00000000  000034e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  000048f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00004aca  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008d8  00000000  00000000  00004adb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000d1fc  00000000  00000000  000053b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003710  00000000  00000000  000125af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004dd4  00000000  00000000  00015cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001790  00000000  00000000  0001aa94  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003f4b  00000000  00000000  0001c224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006d0c  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000aa8  00000000  00000000  00026e7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 bc 01 	jmp	0x378	; 0x378 <__ctors_end>
       4:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
       8:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
       c:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      10:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      14:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      18:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      1c:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      20:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      24:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      28:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__vector_10>
      2c:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__vector_11>
      30:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      34:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      38:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      3c:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      40:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      44:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <__vector_17>
      48:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      4c:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      50:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      54:	0c 94 66 19 	jmp	0x32cc	; 0x32cc <__vector_21>
      58:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      5c:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      60:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      64:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      68:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      6c:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      70:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      74:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      78:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      7c:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      80:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      84:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      88:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      8c:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      90:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>
      94:	0c 94 02 02 	jmp	0x404	; 0x404 <__bad_interrupt>

00000098 <fn_actions>:
      98:	39 a1 00 f0                                         9...

0000009c <keymaps>:
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      9c:	00 00 00 00 00 05 2c 11 e5 00 38 51 4f 56 50 e6     ......,...8QOVP.
      ac:	e4 e5 1d 1b 06 19 28 10 36 37 31 53 54 55 48 00     ......(.671STUH.

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      bc:	00 00 04 16 07 09 31 0d 0e 0f 33 59 5a 5b 58 00     ......1...3YZ[X.
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      cc:	00 00 14 1a 08 15 31 18 0c 12 13 5f 60 61 57 47     ......1...._`aWG

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      dc:	00 00 1e 1f 20 21 43 24 25 26 27 44 45 4e 4d 46     .... !C$%&'DENMF
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
      ec:	e0 00 35 3a 3b 22 42 23 2e 41 2d 4c 49 4b 4a 00     ..5:;"B#.A-LIKJ.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
      fc:	00 e1 2b c0 3c 17 2a 1c 30 40 2f 5c 5d 5e 00 00     ..+.<.*.0@/\]^..
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     10c:	00 00 29 64 3d 0a 3e 0b 3f 00 34 00 62 63 52 e2     ..)d=.>.?.4.bcR.
     11c:	00 00 00 00 00 01 01 01 01 00 01 01 01 01 01 01     ................
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     12c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 c1 00     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     13c:	00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     14c:	00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     15c:	00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
				ReportSize     -= 2;
     16c:	01 00 01 01 01 01 01 01 01 01 01 01 01 01 01 00     ................
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     17c:	00 01 01 01 01 01 01 01 01 01 01 01 01 01 01 00     ................
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     18c:	00 00 01 01 01 01 01 01 01 00 01 01 01 01 01 01     ................

0000019c <__c.2135>:
     19c:	50 00                                               P.

0000019e <__c.2137>:
     19e:	52 00                                               R.

000001a0 <__c.2139>:
     1a0:	69 00                                               i.

000001a2 <__c.1778>:
     1a2:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

000001ac <__c.1780>:
     1ac:	25 30 32 58 00                                      %02X.

000001b1 <__c.1782>:
     1b1:	0a 00                                               ..

000001b3 <__c.1804>:
     1b3:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     1c3:	42 43 44 45 46 0a 00                                BCDEF..

000001ca <__c.1807>:
     1ca:	25 30 32 58 00                                      %02X.

000001cf <__c.1809>:
     1cf:	3a 20 00                                            : .

000001d2 <__c.1811>:
     1d2:	25 30 31 36 62 00                                   %016b.

000001d8 <__c.1813>:
     1d8:	0a 00                                               ..

000001da <__c.4540>:
     1da:	5b 43 5d 00                                         [C].

000001de <__c.4545>:
     1de:	5b 44 5d 00                                         [D].

000001e2 <__c.4550>:
     1e2:	5b 52 5d 00                                         [R].

000001e6 <__c.4554>:
     1e6:	5b 53 5d 00                                         [S].

000001ea <__c.4558>:
     1ea:	5b 57 5d 00                                         [W].

000001ee <__c.4652>:
     1ee:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     1fe:	00                                                  .

000001ff <__c.4654>:
     1ff:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     20f:	00                                                  .

00000210 <__c.4656>:
     210:	5b 73 5d 00                                         [s].

00000214 <ProductString>:
     214:	1a 03 4d 00 6f 00 64 00 65 00 6c 00 5f 00 4d 00     ..M.o.d.e.l._.M.
     224:	5f 00 56 00 31 00 2e 00 30 00 00 00                 _.V.1...0...

00000230 <ManufacturerString>:
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     230:	1a 03 50 00 68 00 6f 00 73 00 70 00 68 00 6f 00     ..P.h.o.s.p.h.o.
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     240:	72 00 47 00 6c 00 6f 00 77 00 00 00                 r.G.l.o.w...

0000024c <LanguageString>:

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     24c:	04 03 09 04                                         ....

00000250 <ConfigurationDescriptor>:
     250:	09 02 42 00 02 01 00 a0 32 09 04 00 00 01 03 01     ..B.....2.......

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     260:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     270:	00 0a 09 04 01 00 02 03 00 00 00 09 21 11 01 00     ............!...
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     280:	01 22 20 00 07 05 82 03 20 00 01 07 05 02 03 20     ." ..... ...... 
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
				break;
     290:	00 01                                               ..

00000292 <DeviceDescriptor>:

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     292:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     2a2:	00 01                                               ..

000002a4 <ConsoleReport>:
     2a4:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2b4:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

000002c4 <KeyboardReport>:
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
     2c4:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     2d4:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2e4:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2f4:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

00000303 <__c.1908>:
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     303:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     313:	20 00                                                .

00000315 <__c.1911>:

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     315:	25 30 32 58 20 00                                   %02X .

0000031b <__c.1916>:
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     31b:	0a 00                                               ..

0000031d <__c.2230>:
     31d:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
     32d:	3a 20 00                                            : .

00000330 <__c.2232>:
     330:	25 30 32 58 00                                      %02X.

00000335 <__c.2234>:
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     335:	0a 00                                               ..

00000337 <breathing_table>:
     337:	00 00 00 00 00 00 00 00 00 00 00 01 02 04 06 0a     ................
					}
				}

				ParserData->UsingReportIDs = true;

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     347:	0f 17 20 2c 3a 4a 5d 71 87 9d b3 c7 da e9 f5 fc     .. ,:J]q........
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     357:	ff fc f5 e9 da c7 b3 9d 87 71 5d 4a 3a 2c 20 17     .........q]J:, .
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     367:	0f 0a 06 04 02 01 00 00 00 00 00 00 00 00 00 00     ................
				break;
     377:	00                                                  .

00000378 <__ctors_end>:
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     378:	11 24       	eor	r1, r1
     37a:	1f be       	out	0x3f, r1	; 63
     37c:	cf ef       	ldi	r28, 0xFF	; 255
     37e:	d0 e2       	ldi	r29, 0x20	; 32
     380:	de bf       	out	0x3e, r29	; 62
     382:	cd bf       	out	0x3d, r28	; 61

00000384 <bootloader_jump_after_watchdog_reset>:
     384:	04 b6       	in	r0, 0x34	; 52

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     386:	03 fe       	sbrs	r0, 3
     388:	24 c0       	rjmp	.+72     	; 0x3d2 <__do_copy_data>
     38a:	80 91 cf 01 	lds	r24, 0x01CF
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     38e:	90 91 d0 01 	lds	r25, 0x01D0
     392:	a0 91 d1 01 	lds	r26, 0x01D1
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     396:	b0 91 d2 01 	lds	r27, 0x01D2
     39a:	87 30       	cpi	r24, 0x07	; 7
     39c:	90 4b       	sbci	r25, 0xB0	; 176
     39e:	a7 40       	sbci	r26, 0x07	; 7

					while (CurrCollectionPath->Parent != NULL)
     3a0:	b0 4b       	sbci	r27, 0xB0	; 176
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3a2:	b9 f4       	brne	.+46     	; 0x3d2 <__do_copy_data>
     3a4:	10 92 cf 01 	sts	0x01CF, r1
     3a8:	10 92 d0 01 	sts	0x01D0, r1
     3ac:	10 92 d1 01 	sts	0x01D1, r1
     3b0:	10 92 d2 01 	sts	0x01D2, r1
     3b4:	14 be       	out	0x34, r1	; 52
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3b6:	84 b7       	in	r24, 0x34	; 52
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3b8:	87 7f       	andi	r24, 0xF7	; 247
     3ba:	84 bf       	out	0x34, r24	; 52
     3bc:	88 e1       	ldi	r24, 0x18	; 24
     3be:	0f b6       	in	r0, 0x3f	; 63
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3c0:	f8 94       	cli
     3c2:	80 93 60 00 	sts	0x0060, r24
				}

				CurrCollectionPath->Type       = ReportItemData;
     3c6:	10 92 60 00 	sts	0x0060, r1
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	e0 e0       	ldi	r30, 0x00	; 0
     3ce:	f0 ef       	ldi	r31, 0xF0	; 240
     3d0:	09 95       	icall

000003d2 <__do_copy_data>:
     3d2:	11 e0       	ldi	r17, 0x01	; 1
     3d4:	a0 e0       	ldi	r26, 0x00	; 0
     3d6:	b1 e0       	ldi	r27, 0x01	; 1

				if (UsageListSize)
     3d8:	ea e3       	ldi	r30, 0x3A	; 58
     3da:	f4 e3       	ldi	r31, 0x34	; 52
     3dc:	00 e0       	ldi	r16, 0x00	; 0
     3de:	0b bf       	out	0x3b, r16	; 59
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <__do_copy_data+0x14>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     3e2:	07 90       	elpm	r0, Z+
     3e4:	0d 92       	st	X+, r0
     3e6:	a8 31       	cpi	r26, 0x18	; 24
     3e8:	b1 07       	cpc	r27, r17
     3ea:	d9 f7       	brne	.-10     	; 0x3e2 <__do_copy_data+0x10>

000003ec <__do_clear_bss>:
     3ec:	11 e0       	ldi	r17, 0x01	; 1
     3ee:	a8 e1       	ldi	r26, 0x18	; 24
     3f0:	b1 e0       	ldi	r27, 0x01	; 1
     3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <.do_clear_bss_start>

000003f4 <.do_clear_bss_loop>:
     3f4:	1d 92       	st	X+, r1

000003f6 <.do_clear_bss_start>:
     3f6:	af 3c       	cpi	r26, 0xCF	; 207

					for (uint8_t i = 1; i < UsageListSize; i++)
     3f8:	b1 07       	cpc	r27, r17
     3fa:	e1 f7       	brne	.-8      	; 0x3f4 <.do_clear_bss_loop>
					  UsageList[i - 1] = UsageList[i];
     3fc:	0e 94 39 07 	call	0xe72	; 0xe72 <main>
     400:	0c 94 1b 1a 	jmp	0x3436	; 0x3436 <_exit>

00000404 <__bad_interrupt>:

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     404:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000408 <xputc>:
     408:	ff 93       	push	r31
     40a:	ef 93       	push	r30
     40c:	e0 91 18 01 	lds	r30, 0x0118
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     410:	f0 91 19 01 	lds	r31, 0x0119
     414:	30 97       	sbiw	r30, 0x00	; 0
     416:	09 f0       	breq	.+2      	; 0x41a <xputc+0x12>
     418:	09 95       	icall
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     41a:	ef 91       	pop	r30
     41c:	ff 91       	pop	r31
     41e:	08 95       	ret

00000420 <xputs>:
     420:	fc 01       	movw	r30, r24
     422:	85 91       	lpm	r24, Z+
     424:	80 30       	cpi	r24, 0x00	; 0
     426:	11 f0       	breq	.+4      	; 0x42c <xputs+0xc>
     428:	ef df       	rcall	.-34     	; 0x408 <xputc>
     42a:	fb cf       	rjmp	.-10     	; 0x422 <xputs+0x2>
     42c:	08 95       	ret

0000042e <xitoa>:
     42e:	ff 27       	eor	r31, r31
     430:	e0 e2       	ldi	r30, 0x20	; 32
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     432:	30 e2       	ldi	r19, 0x20	; 32
     434:	47 ff       	sbrs	r20, 7
     436:	0c c0       	rjmp	.+24     	; 0x450 <xitoa+0x22>
     438:	41 95       	neg	r20
     43a:	97 ff       	sbrs	r25, 7
     43c:	09 c0       	rjmp	.+18     	; 0x450 <xitoa+0x22>
     43e:	ed e2       	ldi	r30, 0x2D	; 45
     440:	60 95       	com	r22
     442:	70 95       	com	r23
     444:	80 95       	com	r24
     446:	90 95       	com	r25
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     448:	61 1d       	adc	r22, r1
     44a:	71 1d       	adc	r23, r1
     44c:	81 1d       	adc	r24, r1
     44e:	91 1d       	adc	r25, r1
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     450:	27 ff       	sbrs	r18, 7
     452:	02 c0       	rjmp	.+4      	; 0x458 <xitoa+0x2a>
     454:	21 95       	neg	r18
				break;
     456:	30 e3       	ldi	r19, 0x30	; 48
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     458:	50 e2       	ldi	r21, 0x20	; 32
     45a:	aa 27       	eor	r26, r26
     45c:	66 0f       	add	r22, r22
     45e:	77 1f       	adc	r23, r23
     460:	88 1f       	adc	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	aa 1f       	adc	r26, r26
     466:	a4 17       	cp	r26, r20
     468:	10 f0       	brcs	.+4      	; 0x46e <xitoa+0x40>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     46a:	a4 1b       	sub	r26, r20
     46c:	63 95       	inc	r22
					NewReportItem.CollectionPath = CurrCollectionPath;
     46e:	5a 95       	dec	r21
     470:	a9 f7       	brne	.-22     	; 0x45c <xitoa+0x2e>
     472:	aa 30       	cpi	r26, 0x0A	; 10
     474:	08 f0       	brcs	.+2      	; 0x478 <xitoa+0x4a>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     476:	a9 5f       	subi	r26, 0xF9	; 249
     478:	a0 5d       	subi	r26, 0xD0	; 208
     47a:	af 93       	push	r26
     47c:	f3 95       	inc	r31

					if (UsageListSize)
     47e:	61 15       	cp	r22, r1
     480:	71 05       	cpc	r23, r1
     482:	81 05       	cpc	r24, r1
     484:	91 05       	cpc	r25, r1
     486:	41 f7       	brne	.-48     	; 0x458 <xitoa+0x2a>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     488:	ed 32       	cpi	r30, 0x2D	; 45
     48a:	11 f4       	brne	.+4      	; 0x490 <xitoa+0x62>
     48c:	ef 93       	push	r30
     48e:	f3 95       	inc	r31
     490:	f2 17       	cp	r31, r18
     492:	18 f4       	brcc	.+6      	; 0x49a <xitoa+0x6c>
     494:	3f 93       	push	r19
     496:	f3 95       	inc	r31
     498:	fb cf       	rjmp	.-10     	; 0x490 <xitoa+0x62>
     49a:	8f 91       	pop	r24
     49c:	b5 df       	rcall	.-150    	; 0x408 <xputc>

						for (uint8_t i = 1; i < UsageListSize; i++)
     49e:	fa 95       	dec	r31
     4a0:	e1 f7       	brne	.-8      	; 0x49a <xitoa+0x6c>
						  UsageList[i - 1] = UsageList[i];
     4a2:	08 95       	ret

000004a4 <xvprintf>:
     4a4:	e9 91       	ld	r30, Y+
     4a6:	f9 91       	ld	r31, Y+
     4a8:	85 91       	lpm	r24, Z+

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     4aa:	80 30       	cpi	r24, 0x00	; 0
     4ac:	21 f0       	breq	.+8      	; 0x4b6 <xvprintf+0x12>
     4ae:	85 32       	cpi	r24, 0x25	; 37
     4b0:	19 f0       	breq	.+6      	; 0x4b8 <xvprintf+0x14>
     4b2:	aa df       	rcall	.-172    	; 0x408 <xputc>
     4b4:	f9 cf       	rjmp	.-14     	; 0x4a8 <xvprintf+0x4>
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     4b6:	08 95       	ret
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	e8 94       	clt
     4bc:	55 91       	lpm	r21, Z+
     4be:	55 32       	cpi	r21, 0x25	; 37
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4c0:	c1 f3       	breq	.-16     	; 0x4b2 <xvprintf+0xe>
     4c2:	50 33       	cpi	r21, 0x30	; 48
     4c4:	11 f4       	brne	.+4      	; 0x4ca <xvprintf+0x26>
     4c6:	68 94       	set
     4c8:	55 91       	lpm	r21, Z+
     4ca:	5a 33       	cpi	r21, 0x3A	; 58
     4cc:	48 f4       	brcc	.+18     	; 0x4e0 <xvprintf+0x3c>
     4ce:	50 53       	subi	r21, 0x30	; 48
     4d0:	90 f3       	brcs	.-28     	; 0x4b6 <xvprintf+0x12>
     4d2:	22 0f       	add	r18, r18
     4d4:	02 2e       	mov	r0, r18
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     4d6:	22 0f       	add	r18, r18
     4d8:	22 0f       	add	r18, r18
     4da:	20 0d       	add	r18, r0
     4dc:	25 0f       	add	r18, r21
     4de:	f4 cf       	rjmp	.-24     	; 0x4c8 <xvprintf+0x24>
     4e0:	0e f4       	brtc	.+2      	; 0x4e4 <xvprintf+0x40>
     4e2:	21 95       	neg	r18
     4e4:	89 91       	ld	r24, Y+
     4e6:	99 91       	ld	r25, Y+
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     4e8:	53 36       	cpi	r21, 0x63	; 99
     4ea:	19 f3       	breq	.-58     	; 0x4b2 <xvprintf+0xe>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     4ec:	53 37       	cpi	r21, 0x73	; 115
     4ee:	29 f1       	breq	.+74     	; 0x53a <xvprintf+0x96>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     4f0:	53 35       	cpi	r21, 0x53	; 83
     4f2:	59 f1       	breq	.+86     	; 0x54a <xvprintf+0xa6>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     4f4:	bc 01       	movw	r22, r24
     4f6:	88 27       	eor	r24, r24
     4f8:	99 27       	eor	r25, r25
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     4fa:	e8 94       	clt
     4fc:	5c 36       	cpi	r21, 0x6C	; 108

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     4fe:	21 f4       	brne	.+8      	; 0x508 <xvprintf+0x64>
     500:	89 91       	ld	r24, Y+
     502:	99 91       	ld	r25, Y+
     504:	68 94       	set
     506:	55 91       	lpm	r21, Z+
     508:	54 36       	cpi	r21, 0x64	; 100
     50a:	39 f4       	brne	.+14     	; 0x51a <xvprintf+0x76>
     50c:	46 ef       	ldi	r20, 0xF6	; 246
     50e:	7e f0       	brts	.+30     	; 0x52e <xvprintf+0x8a>
     510:	77 ff       	sbrs	r23, 7

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     512:	0d c0       	rjmp	.+26     	; 0x52e <xvprintf+0x8a>
     514:	8f ef       	ldi	r24, 0xFF	; 255
     516:	9f ef       	ldi	r25, 0xFF	; 255
     518:	0a c0       	rjmp	.+20     	; 0x52e <xvprintf+0x8a>
     51a:	55 37       	cpi	r21, 0x75	; 117
     51c:	4a e0       	ldi	r20, 0x0A	; 10
     51e:	39 f0       	breq	.+14     	; 0x52e <xvprintf+0x8a>
     520:	58 35       	cpi	r21, 0x58	; 88

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     522:	40 e1       	ldi	r20, 0x10	; 16
     524:	21 f0       	breq	.+8      	; 0x52e <xvprintf+0x8a>
     526:	52 36       	cpi	r21, 0x62	; 98
     528:	42 e0       	ldi	r20, 0x02	; 2
     52a:	09 f0       	breq	.+2      	; 0x52e <xvprintf+0x8a>
     52c:	08 95       	ret
     52e:	ff 93       	push	r31
     530:	ef 93       	push	r30
     532:	7d df       	rcall	.-262    	; 0x42e <xitoa>
     534:	ef 91       	pop	r30
     536:	ff 91       	pop	r31
     538:	b7 cf       	rjmp	.-146    	; 0x4a8 <xvprintf+0x4>
     53a:	ff 93       	push	r31
     53c:	ef 93       	push	r30
     53e:	fc 01       	movw	r30, r24
     540:	81 91       	ld	r24, Z+
     542:	80 30       	cpi	r24, 0x00	; 0
     544:	b9 f3       	breq	.-18     	; 0x534 <xvprintf+0x90>
     546:	60 df       	rcall	.-320    	; 0x408 <xputc>
     548:	fb cf       	rjmp	.-10     	; 0x540 <xvprintf+0x9c>
     54a:	ff 93       	push	r31
     54c:	ef 93       	push	r30
     54e:	68 df       	rcall	.-304    	; 0x420 <xputs>
     550:	f1 cf       	rjmp	.-30     	; 0x534 <xvprintf+0x90>

00000552 <__xprintf>:
     552:	df 93       	push	r29
     554:	cf 93       	push	r28
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
     55a:	25 96       	adiw	r28, 0x05	; 5
     55c:	a3 df       	rcall	.-186    	; 0x4a4 <xvprintf>
     55e:	cf 91       	pop	r28

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     560:	df 91       	pop	r29
     562:	08 95       	ret

00000564 <action_function>:
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
					  return HID_PARSE_InsufficientReportItems;
     568:	cf 93       	push	r28
     56a:	7c 01       	movw	r14, r24

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     56c:	c6 2f       	mov	r28, r22
     56e:	fc 01       	movw	r30, r24
     570:	92 81       	ldd	r25, Z+2	; 0x02
     572:	80 91 ba 01 	lds	r24, 0x01BA
     576:	99 23       	and	r25, r25
     578:	29 f0       	breq	.+10     	; 0x584 <action_function+0x20>
     57a:	80 ff       	sbrs	r24, 0
     57c:	09 c0       	rjmp	.+18     	; 0x590 <action_function+0x2c>
     57e:	8c e9       	ldi	r24, 0x9C	; 156
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	04 c0       	rjmp	.+8      	; 0x58c <action_function+0x28>
     584:	80 ff       	sbrs	r24, 0
     586:	04 c0       	rjmp	.+8      	; 0x590 <action_function+0x2c>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     588:	8e e9       	ldi	r24, 0x9E	; 158
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	0e 94 10 02 	call	0x420	; 0x420 <xputs>
     590:	f7 01       	movw	r30, r14
     592:	85 81       	ldd	r24, Z+5	; 0x05
     594:	80 ff       	sbrs	r24, 0
     596:	08 c0       	rjmp	.+16     	; 0x5a8 <action_function+0x44>
     598:	80 91 ba 01 	lds	r24, 0x01BA
     59c:	80 ff       	sbrs	r24, 0
     59e:	04 c0       	rjmp	.+8      	; 0x5a8 <action_function+0x44>
     5a0:	80 ea       	ldi	r24, 0xA0	; 160
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 10 02 	call	0x420	; 0x420 <xputs>
     5a8:	c1 11       	cpse	r28, r1
     5aa:	2c c0       	rjmp	.+88     	; 0x604 <action_function+0xa0>
     5ac:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <get_mods>
     5b0:	80 72       	andi	r24, 0x20	; 32
     5b2:	99 27       	eor	r25, r25
     5b4:	80 93 1a 01 	sts	0x011A, r24
     5b8:	f7 01       	movw	r30, r14
     5ba:	32 81       	ldd	r19, Z+2	; 0x02
     5bc:	33 23       	and	r19, r19
     5be:	b9 f0       	breq	.+46     	; 0x5ee <action_function+0x8a>
     5c0:	88 23       	and	r24, r24
     5c2:	29 f0       	breq	.+10     	; 0x5ce <action_function+0x6a>
     5c4:	cf 91       	pop	r28
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <bootloader_jump>
     5ce:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <del_mods>
     5d2:	88 e4       	ldi	r24, 0x48	; 72
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <add_key>
     5da:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <send_keyboard_report>
     5de:	80 91 1a 01 	lds	r24, 0x011A
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	cf 91       	pop	r28
     5e6:	ff 90       	pop	r15
     5e8:	ef 90       	pop	r14
     5ea:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <add_mods>
     5ee:	81 11       	cpse	r24, r1
     5f0:	09 c0       	rjmp	.+18     	; 0x604 <action_function+0xa0>
     5f2:	88 e4       	ldi	r24, 0x48	; 72
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <del_key>
     5fa:	cf 91       	pop	r28
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <send_keyboard_report>
     604:	cf 91       	pop	r28
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	08 95       	ret

0000060c <keymap_key_to_keycode>:
     60c:	e7 2f       	mov	r30, r23
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	98 e0       	ldi	r25, 0x08	; 8
     612:	89 9f       	mul	r24, r25
     614:	e0 0d       	add	r30, r0
     616:	f1 1d       	adc	r31, r1
     618:	11 24       	eor	r1, r1
     61a:	84 e0       	ldi	r24, 0x04	; 4
     61c:	ee 0f       	add	r30, r30
     61e:	ff 1f       	adc	r31, r31
     620:	8a 95       	dec	r24
     622:	e1 f7       	brne	.-8      	; 0x61c <keymap_key_to_keycode+0x10>
     624:	e6 0f       	add	r30, r22
					  ParserData->TotalReportItems++;
     626:	f1 1d       	adc	r31, r1
     628:	e4 56       	subi	r30, 0x64	; 100
     62a:	ff 4f       	sbci	r31, 0xFF	; 255
     62c:	84 91       	lpm	r24, Z
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     62e:	08 95       	ret

00000630 <keymap_fn_to_action>:
     630:	e8 2f       	mov	r30, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     632:	f0 e0       	ldi	r31, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     634:	ee 0f       	add	r30, r30
     636:	ff 1f       	adc	r31, r31
     638:	e8 5e       	subi	r30, 0xE8	; 232
     63a:	f0 40       	sbci	r31, 0x00	; 0
     63c:	25 91       	lpm	r18, Z+
     63e:	34 91       	lpm	r19, Z
     640:	c9 01       	movw	r24, r18
     642:	08 95       	ret

00000644 <unselect_rows>:
     644:	84 b1       	in	r24, 0x04	; 4
     646:	8f 71       	andi	r24, 0x1F	; 31
     648:	84 b9       	out	0x04, r24	; 4
     64a:	85 b1       	in	r24, 0x05	; 5
     64c:	8f 71       	andi	r24, 0x1F	; 31
     64e:	85 b9       	out	0x05, r24	; 5
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     650:	8d b1       	in	r24, 0x0d	; 13
     652:	8f 7c       	andi	r24, 0xCF	; 207
     654:	8d b9       	out	0x0d, r24	; 13
     656:	8e b1       	in	r24, 0x0e	; 14
     658:	8f 7c       	andi	r24, 0xCF	; 207
     65a:	8e b9       	out	0x0e, r24	; 14
     65c:	8a b1       	in	r24, 0x0a	; 10
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     65e:	8c 7e       	andi	r24, 0xEC	; 236
     660:	8a b9       	out	0x0a, r24	; 10

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     662:	8b b1       	in	r24, 0x0b	; 11
     664:	8c 7e       	andi	r24, 0xEC	; 236
     666:	8b b9       	out	0x0b, r24	; 11
     668:	08 95       	ret

0000066a <matrix_init>:
     66a:	85 b7       	in	r24, 0x35	; 53
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     66c:	80 68       	ori	r24, 0x80	; 128
     66e:	85 bf       	out	0x35, r24	; 53
     670:	85 b7       	in	r24, 0x35	; 53
     672:	80 68       	ori	r24, 0x80	; 128
     674:	85 bf       	out	0x35, r24	; 53
     676:	0e 94 22 03 	call	0x644	; 0x644 <unselect_rows>
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     67a:	81 b1       	in	r24, 0x01	; 1
     67c:	8f 70       	andi	r24, 0x0F	; 15
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     67e:	81 b9       	out	0x01, r24	; 1
     680:	82 b1       	in	r24, 0x02	; 2
     682:	80 6f       	ori	r24, 0xF0	; 240
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     684:	82 b9       	out	0x02, r24	; 2
     686:	87 b1       	in	r24, 0x07	; 7
     688:	17 b8       	out	0x07, r1	; 7
     68a:	88 b1       	in	r24, 0x08	; 8
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	88 b9       	out	0x08, r24	; 8
     690:	8d b1       	in	r24, 0x0d	; 13
     692:	8c 7f       	andi	r24, 0xFC	; 252
	  return HID_PARSE_NoUnfilteredReportItems;
     694:	8d b9       	out	0x0d, r24	; 13
     696:	8e b1       	in	r24, 0x0e	; 14

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     698:	83 60       	ori	r24, 0x03	; 3
     69a:	8e b9       	out	0x0e, r24	; 14
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     69c:	8a b1       	in	r24, 0x0a	; 10
     69e:	8f 75       	andi	r24, 0x5F	; 95
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6a0:	8a b9       	out	0x0a, r24	; 10
     6a2:	8b b1       	in	r24, 0x0b	; 11
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6a4:	80 6a       	ori	r24, 0xA0	; 160
     6a6:	8b b9       	out	0x0b, r24	; 11

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6a8:	eb e1       	ldi	r30, 0x1B	; 27
     6aa:	f1 e0       	ldi	r31, 0x01	; 1
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6ac:	ab e2       	ldi	r26, 0x2B	; 43
     6ae:	b1 e0       	ldi	r27, 0x01	; 1
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6b0:	11 92       	st	Z+, r1
     6b2:	11 92       	st	Z+, r1
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     6b4:	1d 92       	st	X+, r1
     6b6:	1d 92       	st	X+, r1
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	eb 32       	cpi	r30, 0x2B	; 43

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6bc:	f8 07       	cpc	r31, r24
     6be:	c1 f7       	brne	.-16     	; 0x6b0 <matrix_init+0x46>
     6c0:	08 95       	ret

000006c2 <matrix_scan>:
     6c2:	af 92       	push	r10
     6c4:	bf 92       	push	r11
     6c6:	cf 92       	push	r12
     6c8:	df 92       	push	r13
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	1f 93       	push	r17
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	ab e2       	ldi	r26, 0x2B	; 43
     6d6:	ca 2e       	mov	r12, r26
     6d8:	a1 e0       	ldi	r26, 0x01	; 1
     6da:	da 2e       	mov	r13, r26
     6dc:	76 01       	movw	r14, r12
     6de:	10 e0       	ldi	r17, 0x00	; 0
     6e0:	c1 e0       	ldi	r28, 0x01	; 1
     6e2:	d5 e0       	ldi	r29, 0x05	; 5
     6e4:	14 30       	cpi	r17, 0x04	; 4
     6e6:	a9 f0       	breq	.+42     	; 0x712 <matrix_scan+0x50>
     6e8:	30 f4       	brcc	.+12     	; 0x6f6 <matrix_scan+0x34>
     6ea:	12 30       	cpi	r17, 0x02	; 2
     6ec:	c1 f0       	breq	.+48     	; 0x71e <matrix_scan+0x5c>
     6ee:	a0 f4       	brcc	.+40     	; 0x718 <matrix_scan+0x56>
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     6f0:	11 30       	cpi	r17, 0x01	; 1
     6f2:	d9 f4       	brne	.+54     	; 0x72a <matrix_scan+0x68>
     6f4:	17 c0       	rjmp	.+46     	; 0x724 <matrix_scan+0x62>
     6f6:	16 30       	cpi	r17, 0x06	; 6
     6f8:	31 f0       	breq	.+12     	; 0x706 <matrix_scan+0x44>
     6fa:	40 f0       	brcs	.+16     	; 0x70c <matrix_scan+0x4a>
     6fc:	17 30       	cpi	r17, 0x07	; 7
     6fe:	a9 f4       	brne	.+42     	; 0x72a <matrix_scan+0x68>
        case 7:
            DDRD  |= (1<<4);
     700:	54 9a       	sbi	0x0a, 4	; 10
            PORTD &= ~(1<<4);
     702:	5c 98       	cbi	0x0b, 4	; 11
     704:	14 c0       	rjmp	.+40     	; 0x72e <matrix_scan+0x6c>
            break;
        case 6:
            DDRD  |= (1<<1);
     706:	51 9a       	sbi	0x0a, 1	; 10
            PORTD &= ~(1<<1);
     708:	59 98       	cbi	0x0b, 1	; 11
     70a:	11 c0       	rjmp	.+34     	; 0x72e <matrix_scan+0x6c>
            break;
        case 5:
            DDRD  |= (1<<0);
     70c:	50 9a       	sbi	0x0a, 0	; 10
            PORTD &= ~(1<<0);
     70e:	58 98       	cbi	0x0b, 0	; 11
     710:	0e c0       	rjmp	.+28     	; 0x72e <matrix_scan+0x6c>
            break;
        case 4:
            DDRE  |= (1<<5);
     712:	6d 9a       	sbi	0x0d, 5	; 13
            PORTE &= ~(1<<5);
     714:	75 98       	cbi	0x0e, 5	; 14
     716:	0b c0       	rjmp	.+22     	; 0x72e <matrix_scan+0x6c>
            break;
        case 3:
            DDRE  |= (1<<4);
     718:	6c 9a       	sbi	0x0d, 4	; 13
            PORTE &= ~(1<<4);
     71a:	74 98       	cbi	0x0e, 4	; 14
     71c:	08 c0       	rjmp	.+16     	; 0x72e <matrix_scan+0x6c>
            break;
        case 2:
            DDRB  |= (1<<7);
     71e:	27 9a       	sbi	0x04, 7	; 4
            PORTB &= ~(1<<7);
     720:	2f 98       	cbi	0x05, 7	; 5
     722:	05 c0       	rjmp	.+10     	; 0x72e <matrix_scan+0x6c>
            break;
        case 1:
            DDRB  |= (1<<6);
     724:	26 9a       	sbi	0x04, 6	; 4
            PORTB &= ~(1<<6);
     726:	2e 98       	cbi	0x05, 6	; 5
     728:	02 c0       	rjmp	.+4      	; 0x72e <matrix_scan+0x6c>
            break;
        case 0:
            DDRB  |= (1<<5);
     72a:	25 9a       	sbi	0x04, 5	; 4
            PORTB &= ~(1<<5);
     72c:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     72e:	80 ea       	ldi	r24, 0xA0	; 160
     730:	8a 95       	dec	r24
     732:	f1 f7       	brne	.-4      	; 0x730 <matrix_scan+0x6e>
    PORTD |=  (1<<7 | 1<<5);  
}

static matrix_row_t read_cols(void)
{
    return (PINA&(1<<4) ? 0 : (1<<0)) |
     734:	80 b1       	in	r24, 0x00	; 0
     736:	82 95       	swap	r24
     738:	8f 70       	andi	r24, 0x0F	; 15
     73a:	8c 27       	eor	r24, r28
     73c:	80 fb       	bst	r24, 0
     73e:	aa 24       	eor	r10, r10
     740:	a0 f8       	bld	r10, 0
     742:	b1 2c       	mov	r11, r1
           (PINA&(1<<5) ? 0 : (1<<1)) |
     744:	05 9b       	sbis	0x00, 5	; 0
     746:	03 c0       	rjmp	.+6      	; 0x74e <matrix_scan+0x8c>
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	02 c0       	rjmp	.+4      	; 0x752 <matrix_scan+0x90>
     74e:	22 e0       	ldi	r18, 0x02	; 2
     750:	30 e0       	ldi	r19, 0x00	; 0
    PORTD |=  (1<<7 | 1<<5);  
}

static matrix_row_t read_cols(void)
{
    return (PINA&(1<<4) ? 0 : (1<<0)) |
     752:	2a 29       	or	r18, r10
     754:	3b 29       	or	r19, r11
           (PINA&(1<<5) ? 0 : (1<<1)) |
           (PINA&(1<<6) ? 0 : (1<<2)) |
     756:	06 9b       	sbis	0x00, 6	; 0
     758:	03 c0       	rjmp	.+6      	; 0x760 <matrix_scan+0x9e>
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	02 c0       	rjmp	.+4      	; 0x764 <matrix_scan+0xa2>
     760:	84 e0       	ldi	r24, 0x04	; 4
     762:	90 e0       	ldi	r25, 0x00	; 0
}

static matrix_row_t read_cols(void)
{
    return (PINA&(1<<4) ? 0 : (1<<0)) |
           (PINA&(1<<5) ? 0 : (1<<1)) |
     764:	28 2b       	or	r18, r24
     766:	39 2b       	or	r19, r25
           (PINA&(1<<6) ? 0 : (1<<2)) |
           (PINA&(1<<7) ? 0 : (1<<3)) |
     768:	80 b1       	in	r24, 0x00	; 0
     76a:	99 27       	eor	r25, r25
     76c:	87 fd       	sbrc	r24, 7
     76e:	90 95       	com	r25
     770:	80 95       	com	r24
     772:	90 95       	com	r25
     774:	88 27       	eor	r24, r24
     776:	99 0f       	add	r25, r25
     778:	88 1f       	adc	r24, r24
     77a:	99 27       	eor	r25, r25
     77c:	73 e0       	ldi	r23, 0x03	; 3
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25
     782:	7a 95       	dec	r23
     784:	e1 f7       	brne	.-8      	; 0x77e <matrix_scan+0xbc>

static matrix_row_t read_cols(void)
{
    return (PINA&(1<<4) ? 0 : (1<<0)) |
           (PINA&(1<<5) ? 0 : (1<<1)) |
           (PINA&(1<<6) ? 0 : (1<<2)) |
     786:	28 2b       	or	r18, r24
     788:	39 2b       	or	r19, r25
           (PINA&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<7) ? 0 : (1<<4)) |
     78a:	86 b1       	in	r24, 0x06	; 6
     78c:	99 27       	eor	r25, r25
     78e:	87 fd       	sbrc	r24, 7
     790:	90 95       	com	r25
     792:	80 95       	com	r24
     794:	90 95       	com	r25
     796:	88 27       	eor	r24, r24
     798:	99 0f       	add	r25, r25
     79a:	88 1f       	adc	r24, r24
     79c:	99 27       	eor	r25, r25
     79e:	f4 e0       	ldi	r31, 0x04	; 4
     7a0:	88 0f       	add	r24, r24
     7a2:	99 1f       	adc	r25, r25
     7a4:	fa 95       	dec	r31
     7a6:	e1 f7       	brne	.-8      	; 0x7a0 <matrix_scan+0xde>
static matrix_row_t read_cols(void)
{
    return (PINA&(1<<4) ? 0 : (1<<0)) |
           (PINA&(1<<5) ? 0 : (1<<1)) |
           (PINA&(1<<6) ? 0 : (1<<2)) |
           (PINA&(1<<7) ? 0 : (1<<3)) |
     7a8:	28 2b       	or	r18, r24
     7aa:	39 2b       	or	r19, r25
           (PINC&(1<<7) ? 0 : (1<<4)) |
           (PINC&(1<<6) ? 0 : (1<<5)) |
     7ac:	36 9b       	sbis	0x06, 6	; 6
     7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <matrix_scan+0xf4>
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <matrix_scan+0xf8>
     7b6:	80 e2       	ldi	r24, 0x20	; 32
     7b8:	90 e0       	ldi	r25, 0x00	; 0
{
    return (PINA&(1<<4) ? 0 : (1<<0)) |
           (PINA&(1<<5) ? 0 : (1<<1)) |
           (PINA&(1<<6) ? 0 : (1<<2)) |
           (PINA&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<7) ? 0 : (1<<4)) |
     7ba:	28 2b       	or	r18, r24
     7bc:	39 2b       	or	r19, r25
           (PINC&(1<<6) ? 0 : (1<<5)) |
           (PINC&(1<<5) ? 0 : (1<<6)) |
     7be:	35 9b       	sbis	0x06, 5	; 6
     7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <matrix_scan+0x106>
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <matrix_scan+0x10a>
     7c8:	80 e4       	ldi	r24, 0x40	; 64
     7ca:	90 e0       	ldi	r25, 0x00	; 0
    return (PINA&(1<<4) ? 0 : (1<<0)) |
           (PINA&(1<<5) ? 0 : (1<<1)) |
           (PINA&(1<<6) ? 0 : (1<<2)) |
           (PINA&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<7) ? 0 : (1<<4)) |
           (PINC&(1<<6) ? 0 : (1<<5)) |
     7cc:	28 2b       	or	r18, r24
     7ce:	39 2b       	or	r19, r25
           (PINC&(1<<5) ? 0 : (1<<6)) |
           (PINC&(1<<4) ? 0 : (1<<7)) |
     7d0:	34 9b       	sbis	0x06, 4	; 6
     7d2:	03 c0       	rjmp	.+6      	; 0x7da <matrix_scan+0x118>
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <matrix_scan+0x11c>
     7da:	60 e8       	ldi	r22, 0x80	; 128
     7dc:	70 e0       	ldi	r23, 0x00	; 0
           (PINA&(1<<5) ? 0 : (1<<1)) |
           (PINA&(1<<6) ? 0 : (1<<2)) |
           (PINA&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<7) ? 0 : (1<<4)) |
           (PINC&(1<<6) ? 0 : (1<<5)) |
           (PINC&(1<<5) ? 0 : (1<<6)) |
     7de:	26 2b       	or	r18, r22
     7e0:	37 2b       	or	r19, r23
           (PINC&(1<<4) ? 0 : (1<<7)) |
           (PINC&(1<<3) ? 0 : (1<<8)) |
     7e2:	33 9b       	sbis	0x06, 3	; 6
     7e4:	03 c0       	rjmp	.+6      	; 0x7ec <matrix_scan+0x12a>
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <matrix_scan+0x12e>
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	51 e0       	ldi	r21, 0x01	; 1
           (PINA&(1<<6) ? 0 : (1<<2)) |
           (PINA&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<7) ? 0 : (1<<4)) |
           (PINC&(1<<6) ? 0 : (1<<5)) |
           (PINC&(1<<5) ? 0 : (1<<6)) |
           (PINC&(1<<4) ? 0 : (1<<7)) |
     7f0:	24 2b       	or	r18, r20
     7f2:	35 2b       	or	r19, r21
           (PINC&(1<<3) ? 0 : (1<<8)) |
           (PINC&(1<<2) ? 0 : (1<<9)) |
     7f4:	32 9b       	sbis	0x06, 2	; 6
     7f6:	03 c0       	rjmp	.+6      	; 0x7fe <matrix_scan+0x13c>
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <matrix_scan+0x140>
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	92 e0       	ldi	r25, 0x02	; 2
           (PINA&(1<<7) ? 0 : (1<<3)) |
           (PINC&(1<<7) ? 0 : (1<<4)) |
           (PINC&(1<<6) ? 0 : (1<<5)) |
           (PINC&(1<<5) ? 0 : (1<<6)) |
           (PINC&(1<<4) ? 0 : (1<<7)) |
           (PINC&(1<<3) ? 0 : (1<<8)) |
     802:	28 2b       	or	r18, r24
     804:	39 2b       	or	r19, r25
           (PINC&(1<<2) ? 0 : (1<<9)) |
           (PINC&(1<<1) ? 0 : (1<<10)) |
     806:	31 9b       	sbis	0x06, 1	; 6
     808:	03 c0       	rjmp	.+6      	; 0x810 <matrix_scan+0x14e>
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	02 c0       	rjmp	.+4      	; 0x814 <matrix_scan+0x152>
     810:	60 e0       	ldi	r22, 0x00	; 0
     812:	74 e0       	ldi	r23, 0x04	; 4
           (PINC&(1<<7) ? 0 : (1<<4)) |
           (PINC&(1<<6) ? 0 : (1<<5)) |
           (PINC&(1<<5) ? 0 : (1<<6)) |
           (PINC&(1<<4) ? 0 : (1<<7)) |
           (PINC&(1<<3) ? 0 : (1<<8)) |
           (PINC&(1<<2) ? 0 : (1<<9)) |
     814:	26 2b       	or	r18, r22
     816:	37 2b       	or	r19, r23
           (PINC&(1<<1) ? 0 : (1<<10)) |
           (PINC&(1<<0) ? 0 : (1<<11)) |
     818:	30 9b       	sbis	0x06, 0	; 6
     81a:	03 c0       	rjmp	.+6      	; 0x822 <matrix_scan+0x160>
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	02 c0       	rjmp	.+4      	; 0x826 <matrix_scan+0x164>
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	58 e0       	ldi	r21, 0x08	; 8
           (PINC&(1<<6) ? 0 : (1<<5)) |
           (PINC&(1<<5) ? 0 : (1<<6)) |
           (PINC&(1<<4) ? 0 : (1<<7)) |
           (PINC&(1<<3) ? 0 : (1<<8)) |
           (PINC&(1<<2) ? 0 : (1<<9)) |
           (PINC&(1<<1) ? 0 : (1<<10)) |
     826:	24 2b       	or	r18, r20
     828:	35 2b       	or	r19, r21
           (PINC&(1<<0) ? 0 : (1<<11)) |
           (PINE&(1<<1) ? 0 : (1<<12)) |
     82a:	61 9b       	sbis	0x0c, 1	; 12
     82c:	03 c0       	rjmp	.+6      	; 0x834 <matrix_scan+0x172>
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	02 c0       	rjmp	.+4      	; 0x838 <matrix_scan+0x176>
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e1       	ldi	r25, 0x10	; 16
           (PINC&(1<<5) ? 0 : (1<<6)) |
           (PINC&(1<<4) ? 0 : (1<<7)) |
           (PINC&(1<<3) ? 0 : (1<<8)) |
           (PINC&(1<<2) ? 0 : (1<<9)) |
           (PINC&(1<<1) ? 0 : (1<<10)) |
           (PINC&(1<<0) ? 0 : (1<<11)) |
     838:	28 2b       	or	r18, r24
     83a:	39 2b       	or	r19, r25
           (PINE&(1<<1) ? 0 : (1<<12)) |
           (PINE&(1<<0) ? 0 : (1<<13)) |
     83c:	60 9b       	sbis	0x0c, 0	; 12
     83e:	03 c0       	rjmp	.+6      	; 0x846 <matrix_scan+0x184>
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	02 c0       	rjmp	.+4      	; 0x84a <matrix_scan+0x188>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e2       	ldi	r25, 0x20	; 32
           (PINC&(1<<4) ? 0 : (1<<7)) |
           (PINC&(1<<3) ? 0 : (1<<8)) |
           (PINC&(1<<2) ? 0 : (1<<9)) |
           (PINC&(1<<1) ? 0 : (1<<10)) |
           (PINC&(1<<0) ? 0 : (1<<11)) |
           (PINE&(1<<1) ? 0 : (1<<12)) |
     84a:	28 2b       	or	r18, r24
     84c:	39 2b       	or	r19, r25
           (PINE&(1<<0) ? 0 : (1<<13)) |
           (PIND&(1<<7) ? 0 : (1<<14)) |
     84e:	89 b1       	in	r24, 0x09	; 9
     850:	99 27       	eor	r25, r25
     852:	87 fd       	sbrc	r24, 7
     854:	90 95       	com	r25
     856:	80 95       	com	r24
     858:	90 95       	com	r25
     85a:	88 27       	eor	r24, r24
     85c:	99 0f       	add	r25, r25
     85e:	88 1f       	adc	r24, r24
     860:	99 27       	eor	r25, r25
     862:	90 e4       	ldi	r25, 0x40	; 64
     864:	89 9f       	mul	r24, r25
     866:	90 2d       	mov	r25, r0
     868:	88 27       	eor	r24, r24
     86a:	11 24       	eor	r1, r1
           (PINC&(1<<3) ? 0 : (1<<8)) |
           (PINC&(1<<2) ? 0 : (1<<9)) |
           (PINC&(1<<1) ? 0 : (1<<10)) |
           (PINC&(1<<0) ? 0 : (1<<11)) |
           (PINE&(1<<1) ? 0 : (1<<12)) |
           (PINE&(1<<0) ? 0 : (1<<13)) |
     86c:	28 2b       	or	r18, r24
     86e:	39 2b       	or	r19, r25
           (PIND&(1<<7) ? 0 : (1<<14)) |
           (PIND&(1<<5) ? 0 : (1<<15));
     870:	4d 9b       	sbis	0x09, 5	; 9
     872:	03 c0       	rjmp	.+6      	; 0x87a <matrix_scan+0x1b8>
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	02 c0       	rjmp	.+4      	; 0x87e <matrix_scan+0x1bc>
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	90 e8       	ldi	r25, 0x80	; 128
           (PINC&(1<<2) ? 0 : (1<<9)) |
           (PINC&(1<<1) ? 0 : (1<<10)) |
           (PINC&(1<<0) ? 0 : (1<<11)) |
           (PINE&(1<<1) ? 0 : (1<<12)) |
           (PINE&(1<<0) ? 0 : (1<<13)) |
           (PIND&(1<<7) ? 0 : (1<<14)) |
     87e:	28 2b       	or	r18, r24
     880:	39 2b       	or	r19, r25
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
     882:	d7 01       	movw	r26, r14
     884:	8d 91       	ld	r24, X+
     886:	9c 91       	ld	r25, X
     888:	11 97       	sbiw	r26, 0x01	; 1
     88a:	82 17       	cp	r24, r18
     88c:	93 07       	cpc	r25, r19
     88e:	51 f1       	breq	.+84     	; 0x8e4 <matrix_scan+0x222>
            matrix_debouncing[i] = cols;
     890:	2d 93       	st	X+, r18
     892:	3c 93       	st	X, r19
            if (debouncing) {
     894:	80 91 00 01 	lds	r24, 0x0100
     898:	88 23       	and	r24, r24
     89a:	11 f1       	breq	.+68     	; 0x8e0 <matrix_scan+0x21e>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     89c:	80 91 ba 01 	lds	r24, 0x01BA
     8a0:	80 ff       	sbrs	r24, 0
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <matrix_scan+0x1ea>
     8a4:	82 ea       	ldi	r24, 0xA2	; 162
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	0e 94 10 02 	call	0x420	; 0x420 <xputs>
     8ac:	80 91 ba 01 	lds	r24, 0x01BA
     8b0:	80 ff       	sbrs	r24, 0
     8b2:	0e c0       	rjmp	.+28     	; 0x8d0 <matrix_scan+0x20e>
     8b4:	80 91 00 01 	lds	r24, 0x0100
     8b8:	1f 92       	push	r1
     8ba:	8f 93       	push	r24
     8bc:	8c ea       	ldi	r24, 0xAC	; 172
     8be:	91 e0       	ldi	r25, 0x01	; 1
     8c0:	9f 93       	push	r25
     8c2:	8f 93       	push	r24
     8c4:	0e 94 a9 02 	call	0x552	; 0x552 <__xprintf>
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	80 91 ba 01 	lds	r24, 0x01BA
     8d4:	80 ff       	sbrs	r24, 0
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <matrix_scan+0x21e>
     8d8:	81 eb       	ldi	r24, 0xB1	; 177
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	0e 94 10 02 	call	0x420	; 0x420 <xputs>
            }
            debouncing = DEBOUNCE;
     8e0:	d0 93 00 01 	sts	0x0100, r29
        }
        unselect_rows();
     8e4:	0e 94 22 03 	call	0x644	; 0x644 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     8e8:	1f 5f       	subi	r17, 0xFF	; 255
     8ea:	b2 e0       	ldi	r27, 0x02	; 2
     8ec:	eb 0e       	add	r14, r27
     8ee:	f1 1c       	adc	r15, r1
     8f0:	18 30       	cpi	r17, 0x08	; 8
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <matrix_scan+0x234>
     8f4:	f7 ce       	rjmp	.-530    	; 0x6e4 <matrix_scan+0x22>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
     8f6:	80 91 00 01 	lds	r24, 0x0100
     8fa:	88 23       	and	r24, r24
     8fc:	c9 f0       	breq	.+50     	; 0x930 <matrix_scan+0x26e>
        if (--debouncing) {
     8fe:	81 50       	subi	r24, 0x01	; 1
     900:	80 93 00 01 	sts	0x0100, r24
     904:	88 23       	and	r24, r24
     906:	39 f0       	breq	.+14     	; 0x916 <matrix_scan+0x254>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     908:	ef e9       	ldi	r30, 0x9F	; 159
     90a:	ff e0       	ldi	r31, 0x0F	; 15
     90c:	31 97       	sbiw	r30, 0x01	; 1
     90e:	f1 f7       	brne	.-4      	; 0x90c <matrix_scan+0x24a>
     910:	00 c0       	rjmp	.+0      	; 0x912 <matrix_scan+0x250>
     912:	00 00       	nop
     914:	0d c0       	rjmp	.+26     	; 0x930 <matrix_scan+0x26e>
     916:	eb e1       	ldi	r30, 0x1B	; 27
     918:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
     91a:	d6 01       	movw	r26, r12
     91c:	8d 91       	ld	r24, X+
     91e:	9d 91       	ld	r25, X+
     920:	6d 01       	movw	r12, r26
     922:	81 93       	st	Z+, r24
     924:	91 93       	st	Z+, r25

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     926:	bb e3       	ldi	r27, 0x3B	; 59
     928:	cb 16       	cp	r12, r27
     92a:	b1 e0       	ldi	r27, 0x01	; 1
     92c:	db 06       	cpc	r13, r27
     92e:	a9 f7       	brne	.-22     	; 0x91a <matrix_scan+0x258>
            }
        }
    }

    return 1;
}
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	1f 91       	pop	r17
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	df 90       	pop	r13
     93e:	cf 90       	pop	r12
     940:	bf 90       	pop	r11
     942:	af 90       	pop	r10
     944:	08 95       	ret

00000946 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
     946:	e8 2f       	mov	r30, r24
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	ee 0f       	add	r30, r30
     94c:	ff 1f       	adc	r31, r31
     94e:	e5 5e       	subi	r30, 0xE5	; 229
     950:	fe 4f       	sbci	r31, 0xFE	; 254
}
     952:	80 81       	ld	r24, Z
     954:	91 81       	ldd	r25, Z+1	; 0x01
     956:	08 95       	ret

00000958 <matrix_print>:

void matrix_print(void)
{
     958:	8f 92       	push	r8
     95a:	9f 92       	push	r9
     95c:	af 92       	push	r10
     95e:	bf 92       	push	r11
     960:	cf 92       	push	r12
     962:	df 92       	push	r13
     964:	ef 92       	push	r14
     966:	ff 92       	push	r15
    print("\nr/c 0123456789ABCDEF\n");
     968:	83 eb       	ldi	r24, 0xB3	; 179
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	0e 94 10 02 	call	0x420	; 0x420 <xputs>
     970:	9b e1       	ldi	r25, 0x1B	; 27
     972:	a9 2e       	mov	r10, r25
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	b9 2e       	mov	r11, r25
     978:	e1 2c       	mov	r14, r1
     97a:	f1 2c       	mov	r15, r1
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
     97c:	2a ec       	ldi	r18, 0xCA	; 202
     97e:	82 2e       	mov	r8, r18
     980:	21 e0       	ldi	r18, 0x01	; 1
     982:	92 2e       	mov	r9, r18
        pbin_reverse16(matrix_get_row(row));
     984:	32 ed       	ldi	r19, 0xD2	; 210
     986:	c3 2e       	mov	r12, r19
     988:	31 e0       	ldi	r19, 0x01	; 1
     98a:	d3 2e       	mov	r13, r19

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
     98c:	ff 92       	push	r15
     98e:	ef 92       	push	r14
     990:	9f 92       	push	r9
     992:	8f 92       	push	r8
     994:	0e 94 a9 02 	call	0x552	; 0x552 <__xprintf>
     998:	8f ec       	ldi	r24, 0xCF	; 207
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 10 02 	call	0x420	; 0x420 <xputs>
        pbin_reverse16(matrix_get_row(row));
     9a0:	f5 01       	movw	r30, r10
     9a2:	81 91       	ld	r24, Z+
     9a4:	91 91       	ld	r25, Z+
     9a6:	5f 01       	movw	r10, r30
     9a8:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <bitrev16>
     9ac:	9f 93       	push	r25
     9ae:	8f 93       	push	r24
     9b0:	df 92       	push	r13
     9b2:	cf 92       	push	r12
     9b4:	0e 94 a9 02 	call	0x552	; 0x552 <__xprintf>
        print("\n");
     9b8:	88 ed       	ldi	r24, 0xD8	; 216
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 10 02 	call	0x420	; 0x420 <xputs>
     9c0:	ff ef       	ldi	r31, 0xFF	; 255
     9c2:	ef 1a       	sub	r14, r31
     9c4:	ff 0a       	sbc	r15, r31
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
     9c6:	8d b7       	in	r24, 0x3d	; 61
     9c8:	9e b7       	in	r25, 0x3e	; 62
     9ca:	08 96       	adiw	r24, 0x08	; 8
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	9e bf       	out	0x3e, r25	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	8d bf       	out	0x3d, r24	; 61
     9d6:	98 e0       	ldi	r25, 0x08	; 8
     9d8:	e9 16       	cp	r14, r25
     9da:	f1 04       	cpc	r15, r1
     9dc:	b9 f6       	brne	.-82     	; 0x98c <matrix_print+0x34>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
     9de:	ff 90       	pop	r15
     9e0:	ef 90       	pop	r14
     9e2:	df 90       	pop	r13
     9e4:	cf 90       	pop	r12
     9e6:	bf 90       	pop	r11
     9e8:	af 90       	pop	r10
     9ea:	9f 90       	pop	r9
     9ec:	8f 90       	pop	r8
     9ee:	08 95       	ret

000009f0 <led_set>:
 * 
 */

 void led_set(uint8_t usb_led)
{
    DDR_CAPSLCK |= (1<<BIT_CAPSLCK);
     9f0:	22 9a       	sbi	0x04, 2	; 4
    DDR_NUMLCK |= (1<<BIT_NUMLCK);
     9f2:	20 9a       	sbi	0x04, 0	; 4
    DDR_SCROLLLCK |= (1<<BIT_SCROLLLCK);
     9f4:	23 9a       	sbi	0x04, 3	; 4

    if (usb_led & (1<<USB_LED_CAPS_LOCK))
     9f6:	81 ff       	sbrs	r24, 1
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <led_set+0xe>
    {
        
        PORT_CAPSLCK &= ~(1<<BIT_CAPSLCK);
     9fa:	2a 98       	cbi	0x05, 2	; 5
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <led_set+0x10>
    }
    else
    {
        PORT_CAPSLCK |= (1<<BIT_CAPSLCK);
     9fe:	2a 9a       	sbi	0x05, 2	; 5
    }

    if (usb_led & (1<<USB_LED_NUM_LOCK))
     a00:	80 ff       	sbrs	r24, 0
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <led_set+0x18>
    {
        PORT_NUMLCK &= ~(1<<BIT_NUMLCK);
     a04:	28 98       	cbi	0x05, 0	; 5
     a06:	01 c0       	rjmp	.+2      	; 0xa0a <led_set+0x1a>
    }
    else
    {
        PORT_NUMLCK |= (1<<BIT_NUMLCK);
     a08:	28 9a       	sbi	0x05, 0	; 5
    }

    if (usb_led & (1<<USB_LED_SCROLL_LOCK))
     a0a:	82 ff       	sbrs	r24, 2
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <led_set+0x22>
    {
        PORT_SCROLLLCK &= ~(1<<BIT_SCROLLLCK);
     a0e:	2b 98       	cbi	0x05, 3	; 5
     a10:	08 95       	ret
    }
    else
    {
        PORT_SCROLLLCK |= (1<<BIT_SCROLLLCK);
     a12:	2b 9a       	sbi	0x05, 3	; 5
     a14:	08 95       	ret

00000a16 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     a16:	80 91 44 01 	lds	r24, 0x0144
     a1a:	08 95       	ret

00000a1c <send_mouse>:

    keyboard_report_sent = *report;
}

static void send_mouse(report_mouse_t *report)
{
     a1c:	08 95       	ret

00000a1e <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
     a1e:	9f b7       	in	r25, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	10 92 46 01 	sts	0x0146, r1
     a26:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
     a28:	90 91 c6 01 	lds	r25, 0x01C6
     a2c:	94 30       	cpi	r25, 0x04	; 4
     a2e:	09 f0       	breq	.+2      	; 0xa32 <sendchar+0x14>
     a30:	58 c0       	rjmp	.+176    	; 0xae2 <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a32:	90 91 e9 00 	lds	r25, 0x00E9
     a36:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a38:	20 91 ec 00 	lds	r18, 0x00EC
     a3c:	20 ff       	sbrs	r18, 0
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <sendchar+0x26>
     a40:	20 e8       	ldi	r18, 0x80	; 128
     a42:	01 c0       	rjmp	.+2      	; 0xa46 <sendchar+0x28>
     a44:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a46:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a48:	92 e0       	ldi	r25, 0x02	; 2
     a4a:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     a4e:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
     a52:	90 ff       	sbrs	r25, 0
     a54:	43 c0       	rjmp	.+134    	; 0xadc <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     a56:	90 91 ee 00 	lds	r25, 0x00EE
     a5a:	97 ff       	sbrs	r25, 7
     a5c:	3f c0       	rjmp	.+126    	; 0xadc <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
     a5e:	90 91 47 01 	lds	r25, 0x0147
     a62:	99 23       	and	r25, r25
     a64:	21 f0       	breq	.+8      	; 0xa6e <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a66:	90 91 e8 00 	lds	r25, 0x00E8
     a6a:	95 ff       	sbrs	r25, 5
     a6c:	37 c0       	rjmp	.+110    	; 0xadc <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
     a6e:	10 92 47 01 	sts	0x0147, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
     a72:	96 e0       	ldi	r25, 0x06	; 6
     a74:	14 c0       	rjmp	.+40     	; 0xa9e <sendchar+0x80>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
     a76:	30 91 c6 01 	lds	r19, 0x01C6
     a7a:	34 30       	cpi	r19, 0x04	; 4
     a7c:	79 f5       	brne	.+94     	; 0xadc <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a7e:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
     a82:	35 fd       	sbrc	r19, 5
     a84:	2b c0       	rjmp	.+86     	; 0xadc <sendchar+0xbe>
     a86:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
     a88:	21 f4       	brne	.+8      	; 0xa92 <sendchar+0x74>
            timeouted = true;
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	80 93 47 01 	sts	0x0147, r24
            goto ERROR_EXIT;
     a90:	25 c0       	rjmp	.+74     	; 0xadc <sendchar+0xbe>
     a92:	ef e9       	ldi	r30, 0x9F	; 159
     a94:	ff e0       	ldi	r31, 0x0F	; 15
     a96:	31 97       	sbiw	r30, 0x01	; 1
     a98:	f1 f7       	brne	.-4      	; 0xa96 <sendchar+0x78>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <sendchar+0x7e>
     a9c:	00 00       	nop
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     a9e:	30 91 e8 00 	lds	r19, 0x00E8
    }

    timeouted = false;

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
     aa2:	35 ff       	sbrs	r19, 5
     aa4:	e8 cf       	rjmp	.-48     	; 0xa76 <sendchar+0x58>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     aa6:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     aaa:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
     aae:	85 fd       	sbrc	r24, 5
     ab0:	0a c0       	rjmp	.+20     	; 0xac6 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ab2:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
     ab6:	80 ff       	sbrs	r24, 0
     ab8:	fc cf       	rjmp	.-8      	; 0xab2 <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     aba:	80 91 e8 00 	lds	r24, 0x00E8
     abe:	8e 77       	andi	r24, 0x7E	; 126
     ac0:	80 93 e8 00 	sts	0x00E8, r24
     ac4:	06 c0       	rjmp	.+12     	; 0xad2 <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
     ac6:	8f b7       	in	r24, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	90 93 46 01 	sts	0x0146, r25
     ad0:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ad2:	2f 70       	andi	r18, 0x0F	; 15
     ad4:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	08 95       	ret
     adc:	2f 70       	andi	r18, 0x0F	; 15
     ade:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
     ae2:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
     ae4:	08 95       	ret

00000ae6 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	00 d0       	rcall	.+0      	; 0xaec <send_consumer+0x6>
     aec:	1f 92       	push	r1
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     af2:	20 91 c6 01 	lds	r18, 0x01C6
     af6:	24 30       	cpi	r18, 0x04	; 4
     af8:	29 f5       	brne	.+74     	; 0xb44 <send_consumer+0x5e>
        return;

    report_extra_t r = {
     afa:	23 e0       	ldi	r18, 0x03	; 3
     afc:	29 83       	std	Y+1, r18	; 0x01
     afe:	9b 83       	std	Y+3, r25	; 0x03
     b00:	8a 83       	std	Y+2, r24	; 0x02
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	80 93 e9 00 	sts	0x00E9, r24
     b08:	8f ef       	ldi	r24, 0xFF	; 255
     b0a:	06 c0       	rjmp	.+12     	; 0xb18 <send_consumer+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b0c:	95 ed       	ldi	r25, 0xD5	; 213
     b0e:	9a 95       	dec	r25
     b10:	f1 f7       	brne	.-4      	; 0xb0e <send_consumer+0x28>
     b12:	00 00       	nop
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     b14:	88 23       	and	r24, r24
     b16:	29 f0       	breq	.+10     	; 0xb22 <send_consumer+0x3c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     b18:	90 91 e8 00 	lds	r25, 0x00E8
     b1c:	81 50       	subi	r24, 0x01	; 1
     b1e:	95 ff       	sbrs	r25, 5
     b20:	f5 cf       	rjmp	.-22     	; 0xb0c <send_consumer+0x26>
     b22:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
     b26:	85 ff       	sbrs	r24, 5
     b28:	0d c0       	rjmp	.+26     	; 0xb44 <send_consumer+0x5e>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     b2a:	40 e0       	ldi	r20, 0x00	; 0
     b2c:	50 e0       	ldi	r21, 0x00	; 0
     b2e:	63 e0       	ldi	r22, 0x03	; 3
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	0e 94 03 08 	call	0x1006	; 0x1006 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b3a:	80 91 e8 00 	lds	r24, 0x00E8
     b3e:	8e 77       	andi	r24, 0x7E	; 126
     b40:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	08 95       	ret

00000b50 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	00 d0       	rcall	.+0      	; 0xb56 <send_system+0x6>
     b56:	1f 92       	push	r1
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     b5c:	20 91 c6 01 	lds	r18, 0x01C6
     b60:	24 30       	cpi	r18, 0x04	; 4
     b62:	29 f5       	brne	.+74     	; 0xbae <send_system+0x5e>
        return;

    report_extra_t r = {
     b64:	22 e0       	ldi	r18, 0x02	; 2
     b66:	29 83       	std	Y+1, r18	; 0x01
     b68:	9b 83       	std	Y+3, r25	; 0x03
     b6a:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	80 93 e9 00 	sts	0x00E9, r24
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	06 c0       	rjmp	.+12     	; 0xb82 <send_system+0x32>
     b76:	95 ed       	ldi	r25, 0xD5	; 213
     b78:	9a 95       	dec	r25
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <send_system+0x28>
     b7c:	00 00       	nop
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     b7e:	88 23       	and	r24, r24
     b80:	29 f0       	breq	.+10     	; 0xb8c <send_system+0x3c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     b82:	90 91 e8 00 	lds	r25, 0x00E8
     b86:	81 50       	subi	r24, 0x01	; 1
     b88:	95 ff       	sbrs	r25, 5
     b8a:	f5 cf       	rjmp	.-22     	; 0xb76 <send_system+0x26>
     b8c:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
     b90:	85 ff       	sbrs	r24, 5
     b92:	0d c0       	rjmp	.+26     	; 0xbae <send_system+0x5e>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	63 e0       	ldi	r22, 0x03	; 3
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	0e 94 03 08 	call	0x1006	; 0x1006 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ba4:	80 91 e8 00 	lds	r24, 0x00E8
     ba8:	8e 77       	andi	r24, 0x7E	; 126
     baa:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	08 95       	ret

00000bba <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
     bba:	ef 92       	push	r14
     bbc:	ff 92       	push	r15
     bbe:	7c 01       	movw	r14, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     bc0:	80 91 c6 01 	lds	r24, 0x01C6
     bc4:	84 30       	cpi	r24, 0x04	; 4
     bc6:	41 f5       	brne	.+80     	; 0xc18 <send_keyboard+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	80 93 e9 00 	sts	0x00E9, r24
     bce:	8f ef       	ldi	r24, 0xFF	; 255
     bd0:	06 c0       	rjmp	.+12     	; 0xbde <send_keyboard+0x24>
     bd2:	95 ed       	ldi	r25, 0xD5	; 213
     bd4:	9a 95       	dec	r25
     bd6:	f1 f7       	brne	.-4      	; 0xbd4 <send_keyboard+0x1a>
     bd8:	00 00       	nop
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     bda:	88 23       	and	r24, r24
     bdc:	29 f0       	breq	.+10     	; 0xbe8 <send_keyboard+0x2e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     bde:	90 91 e8 00 	lds	r25, 0x00E8
     be2:	81 50       	subi	r24, 0x01	; 1
     be4:	95 ff       	sbrs	r25, 5
     be6:	f5 cf       	rjmp	.-22     	; 0xbd2 <send_keyboard+0x18>
     be8:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
     bec:	85 ff       	sbrs	r24, 5
     bee:	14 c0       	rjmp	.+40     	; 0xc18 <send_keyboard+0x5e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	68 e0       	ldi	r22, 0x08	; 8
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	c7 01       	movw	r24, r14
     bfa:	0e 94 03 08 	call	0x1006	; 0x1006 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bfe:	80 91 e8 00 	lds	r24, 0x00E8
     c02:	8e 77       	andi	r24, 0x7E	; 126
     c04:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
     c08:	88 e0       	ldi	r24, 0x08	; 8
     c0a:	f7 01       	movw	r30, r14
     c0c:	ac e3       	ldi	r26, 0x3C	; 60
     c0e:	b1 e0       	ldi	r27, 0x01	; 1
     c10:	01 90       	ld	r0, Z+
     c12:	0d 92       	st	X+, r0
     c14:	8a 95       	dec	r24
     c16:	e1 f7       	brne	.-8      	; 0xc10 <send_keyboard+0x56>
}
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	08 95       	ret

00000c1e <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
     c1e:	8a ed       	ldi	r24, 0xDA	; 218
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	0e 94 10 02 	call	0x420	; 0x420 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
     c26:	80 91 c5 01 	lds	r24, 0x01C5
     c2a:	81 11       	cpse	r24, r1
     c2c:	09 c0       	rjmp	.+18     	; 0xc40 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
     c2e:	0e 94 9b 09 	call	0x1336	; 0x1336 <USB_Disable>
        USB_Init();
     c32:	0e 94 02 0a 	call	0x1404	; 0x1404 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     c36:	80 91 e2 00 	lds	r24, 0x00E2
     c3a:	84 60       	ori	r24, 0x04	; 4
     c3c:	80 93 e2 00 	sts	0x00E2, r24
     c40:	08 95       	ret

00000c42 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
     c42:	8e ed       	ldi	r24, 0xDE	; 222
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	0e 94 10 02 	call	0x420	; 0x420 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
     c4a:	10 92 c5 01 	sts	0x01C5, r1
     c4e:	08 95       	ret

00000c50 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
     c50:	82 ee       	ldi	r24, 0xE2	; 226
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	0c 94 10 02 	jmp	0x420	; 0x420 <xputs>

00000c58 <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
     c58:	86 ee       	ldi	r24, 0xE6	; 230
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	0e 94 10 02 	call	0x420	; 0x420 <xputs>
#ifdef SLEEP_LED_ENABLE
    sleep_led_enable();
     c60:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <sleep_led_enable>

00000c64 <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
     c64:	8a ee       	ldi	r24, 0xEA	; 234
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	0e 94 10 02 	call	0x420	; 0x420 <xputs>
    suspend_wakeup_init();
     c6c:	0e 94 4e 19 	call	0x329c	; 0x329c <suspend_wakeup_init>

#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
     c70:	0e 94 c6 19 	call	0x338c	; 0x338c <sleep_led_disable>
    // NOTE: converters may not accept this
    led_set(host_keyboard_leds());
     c74:	0e 94 aa 0c 	call	0x1954	; 0x1954 <host_keyboard_leds>
     c78:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <led_set>

00000c7c <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
     c7c:	80 91 45 01 	lds	r24, 0x0145
     c80:	8f 5f       	subi	r24, 0xFF	; 255
     c82:	80 93 45 01 	sts	0x0145, r24
     c86:	62 e3       	ldi	r22, 0x32	; 50
     c88:	0e 94 0f 1a 	call	0x341e	; 0x341e <__udivmodqi4>
     c8c:	91 11       	cpse	r25, r1
     c8e:	35 c0       	rjmp	.+106    	; 0xcfa <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
     c90:	10 92 45 01 	sts	0x0145, r1

    if (!console_flush) return;
     c94:	80 91 46 01 	lds	r24, 0x0146
     c98:	88 23       	and	r24, r24
     c9a:	79 f1       	breq	.+94     	; 0xcfa <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
     c9c:	80 91 c6 01 	lds	r24, 0x01C6
     ca0:	84 30       	cpi	r24, 0x04	; 4
     ca2:	49 f5       	brne	.+82     	; 0xcf6 <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ca4:	80 91 e9 00 	lds	r24, 0x00E9
     ca8:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     caa:	90 91 ec 00 	lds	r25, 0x00EC
     cae:	90 ff       	sbrs	r25, 0
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <EVENT_USB_Device_StartOfFrame+0x3a>
     cb2:	90 e8       	ldi	r25, 0x80	; 128
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <EVENT_USB_Device_StartOfFrame+0x3c>
     cb6:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     cb8:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     cc0:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
     cc4:	80 ff       	sbrs	r24, 0
     cc6:	14 c0       	rjmp	.+40     	; 0xcf0 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     cc8:	80 91 ee 00 	lds	r24, 0x00EE
     ccc:	87 fd       	sbrc	r24, 7
     cce:	03 c0       	rjmp	.+6      	; 0xcd6 <EVENT_USB_Device_StartOfFrame+0x5a>
     cd0:	0f c0       	rjmp	.+30     	; 0xcf0 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cd2:	10 92 f1 00 	sts	0x00F1, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     cd6:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
     cda:	85 fd       	sbrc	r24, 5
     cdc:	fa cf       	rjmp	.-12     	; 0xcd2 <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     cde:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
     ce2:	80 ff       	sbrs	r24, 0
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ce6:	80 91 e8 00 	lds	r24, 0x00E8
     cea:	8e 77       	andi	r24, 0x7E	; 126
     cec:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cf0:	9f 70       	andi	r25, 0x0F	; 15
     cf2:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
     cf6:	10 92 46 01 	sts	0x0146, r1
     cfa:	08 95       	ret

00000cfc <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     cfc:	42 e0       	ldi	r20, 0x02	; 2
     cfe:	61 ec       	ldi	r22, 0xC1	; 193
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	0e 94 11 09 	call	0x1222	; 0x1222 <Endpoint_ConfigureEndpoint_Prv>
     d06:	42 e2       	ldi	r20, 0x22	; 34
     d08:	61 ec       	ldi	r22, 0xC1	; 193
     d0a:	82 e0       	ldi	r24, 0x02	; 2
     d0c:	0c 94 11 09 	jmp	0x1222	; 0x1222 <Endpoint_ConfigureEndpoint_Prv>

00000d10 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
     d10:	80 91 c8 01 	lds	r24, 0x01C8
     d14:	83 30       	cpi	r24, 0x03	; 3
     d16:	09 f4       	brne	.+2      	; 0xd1a <EVENT_USB_Device_ControlRequest+0xa>
     d18:	54 c0       	rjmp	.+168    	; 0xdc2 <EVENT_USB_Device_ControlRequest+0xb2>
     d1a:	30 f4       	brcc	.+12     	; 0xd28 <EVENT_USB_Device_ControlRequest+0x18>
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	71 f0       	breq	.+28     	; 0xd3c <EVENT_USB_Device_ControlRequest+0x2c>
     d20:	82 30       	cpi	r24, 0x02	; 2
     d22:	09 f0       	breq	.+2      	; 0xd26 <EVENT_USB_Device_ControlRequest+0x16>
     d24:	a5 c0       	rjmp	.+330    	; 0xe70 <EVENT_USB_Device_ControlRequest+0x160>
     d26:	8c c0       	rjmp	.+280    	; 0xe40 <EVENT_USB_Device_ControlRequest+0x130>
     d28:	8a 30       	cpi	r24, 0x0A	; 10
     d2a:	09 f4       	brne	.+2      	; 0xd2e <EVENT_USB_Device_ControlRequest+0x1e>
     d2c:	79 c0       	rjmp	.+242    	; 0xe20 <EVENT_USB_Device_ControlRequest+0x110>
     d2e:	8b 30       	cpi	r24, 0x0B	; 11
     d30:	09 f4       	brne	.+2      	; 0xd34 <EVENT_USB_Device_ControlRequest+0x24>
     d32:	5f c0       	rjmp	.+190    	; 0xdf2 <EVENT_USB_Device_ControlRequest+0xe2>
     d34:	89 30       	cpi	r24, 0x09	; 9
     d36:	09 f0       	breq	.+2      	; 0xd3a <EVENT_USB_Device_ControlRequest+0x2a>
     d38:	9b c0       	rjmp	.+310    	; 0xe70 <EVENT_USB_Device_ControlRequest+0x160>
     d3a:	20 c0       	rjmp	.+64     	; 0xd7c <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d3c:	80 91 c7 01 	lds	r24, 0x01C7
     d40:	81 3a       	cpi	r24, 0xA1	; 161
     d42:	09 f0       	breq	.+2      	; 0xd46 <EVENT_USB_Device_ControlRequest+0x36>
     d44:	95 c0       	rjmp	.+298    	; 0xe70 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d46:	80 91 e8 00 	lds	r24, 0x00E8
     d4a:	87 7f       	andi	r24, 0xF7	; 247
     d4c:	80 93 e8 00 	sts	0x00E8, r24
     d50:	80 91 cb 01 	lds	r24, 0x01CB
     d54:	90 91 cc 01 	lds	r25, 0x01CC
     d58:	89 2b       	or	r24, r25
     d5a:	21 f0       	breq	.+8      	; 0xd64 <EVENT_USB_Device_ControlRequest+0x54>
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <EVENT_USB_Device_ControlRequest+0x5a>
     d64:	68 e0       	ldi	r22, 0x08	; 8
     d66:	8c e3       	ldi	r24, 0x3C	; 60
     d68:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	0e 94 56 08 	call	0x10ac	; 0x10ac <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d70:	80 91 e8 00 	lds	r24, 0x00E8
     d74:	8b 77       	andi	r24, 0x7B	; 123
     d76:	80 93 e8 00 	sts	0x00E8, r24
     d7a:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     d7c:	80 91 c7 01 	lds	r24, 0x01C7
     d80:	81 32       	cpi	r24, 0x21	; 33
     d82:	09 f0       	breq	.+2      	; 0xd86 <EVENT_USB_Device_ControlRequest+0x76>
     d84:	75 c0       	rjmp	.+234    	; 0xe70 <EVENT_USB_Device_ControlRequest+0x160>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
     d86:	80 91 cb 01 	lds	r24, 0x01CB
     d8a:	90 91 cc 01 	lds	r25, 0x01CC
     d8e:	89 2b       	or	r24, r25
     d90:	09 f0       	breq	.+2      	; 0xd94 <EVENT_USB_Device_ControlRequest+0x84>
     d92:	6e c0       	rjmp	.+220    	; 0xe70 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d94:	80 91 e8 00 	lds	r24, 0x00E8
     d98:	87 7f       	andi	r24, 0xF7	; 247
     d9a:	80 93 e8 00 	sts	0x00E8, r24
     d9e:	05 c0       	rjmp	.+10     	; 0xdaa <EVENT_USB_Device_ControlRequest+0x9a>
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
     da0:	80 91 c6 01 	lds	r24, 0x01C6
     da4:	88 23       	and	r24, r24
     da6:	09 f4       	brne	.+2      	; 0xdaa <EVENT_USB_Device_ControlRequest+0x9a>
     da8:	63 c0       	rjmp	.+198    	; 0xe70 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     daa:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
     dae:	82 ff       	sbrs	r24, 2
     db0:	f7 cf       	rjmp	.-18     	; 0xda0 <EVENT_USB_Device_ControlRequest+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     db2:	80 91 f1 00 	lds	r24, 0x00F1
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
     db6:	80 93 44 01 	sts	0x0144, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dba:	80 91 e8 00 	lds	r24, 0x00E8
     dbe:	8b 77       	andi	r24, 0x7B	; 123
     dc0:	53 c0       	rjmp	.+166    	; 0xe68 <EVENT_USB_Device_ControlRequest+0x158>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     dc2:	80 91 c7 01 	lds	r24, 0x01C7
     dc6:	81 3a       	cpi	r24, 0xA1	; 161
     dc8:	09 f0       	breq	.+2      	; 0xdcc <EVENT_USB_Device_ControlRequest+0xbc>
     dca:	52 c0       	rjmp	.+164    	; 0xe70 <EVENT_USB_Device_ControlRequest+0x160>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
     dcc:	80 91 cb 01 	lds	r24, 0x01CB
     dd0:	90 91 cc 01 	lds	r25, 0x01CC
     dd4:	89 2b       	or	r24, r25
     dd6:	09 f0       	breq	.+2      	; 0xdda <EVENT_USB_Device_ControlRequest+0xca>
     dd8:	4b c0       	rjmp	.+150    	; 0xe70 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dda:	80 91 e8 00 	lds	r24, 0x00E8
     dde:	87 7f       	andi	r24, 0xF7	; 247
     de0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     de4:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
     de8:	80 ff       	sbrs	r24, 0
     dea:	fc cf       	rjmp	.-8      	; 0xde4 <EVENT_USB_Device_ControlRequest+0xd4>
                    Endpoint_Write_8(keyboard_protocol);
     dec:	80 91 0b 01 	lds	r24, 0x010B
     df0:	36 c0       	rjmp	.+108    	; 0xe5e <EVENT_USB_Device_ControlRequest+0x14e>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     df2:	80 91 c7 01 	lds	r24, 0x01C7
     df6:	81 32       	cpi	r24, 0x21	; 33
     df8:	d9 f5       	brne	.+118    	; 0xe70 <EVENT_USB_Device_ControlRequest+0x160>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
     dfa:	80 91 cb 01 	lds	r24, 0x01CB
     dfe:	90 91 cc 01 	lds	r25, 0x01CC
     e02:	89 2b       	or	r24, r25
     e04:	a9 f5       	brne	.+106    	; 0xe70 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e06:	80 91 e8 00 	lds	r24, 0x00E8
     e0a:	87 7f       	andi	r24, 0xF7	; 247
     e0c:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
     e10:	0e 94 48 09 	call	0x1290	; 0x1290 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
     e14:	80 91 c9 01 	lds	r24, 0x01C9
     e18:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
     e1c:	0c 94 25 12 	jmp	0x244a	; 0x244a <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e20:	80 91 c7 01 	lds	r24, 0x01C7
     e24:	81 32       	cpi	r24, 0x21	; 33
     e26:	21 f5       	brne	.+72     	; 0xe70 <EVENT_USB_Device_ControlRequest+0x160>
     e28:	80 91 e8 00 	lds	r24, 0x00E8
     e2c:	87 7f       	andi	r24, 0xF7	; 247
     e2e:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
     e32:	0e 94 48 09 	call	0x1290	; 0x1290 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
     e36:	80 91 ca 01 	lds	r24, 0x01CA
     e3a:	80 93 3b 01 	sts	0x013B, r24
     e3e:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e40:	80 91 c7 01 	lds	r24, 0x01C7
     e44:	81 3a       	cpi	r24, 0xA1	; 161
     e46:	a1 f4       	brne	.+40     	; 0xe70 <EVENT_USB_Device_ControlRequest+0x160>
     e48:	80 91 e8 00 	lds	r24, 0x00E8
     e4c:	87 7f       	andi	r24, 0xF7	; 247
     e4e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e52:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
     e56:	80 ff       	sbrs	r24, 0
     e58:	fc cf       	rjmp	.-8      	; 0xe52 <EVENT_USB_Device_ControlRequest+0x142>
                Endpoint_Write_8(keyboard_idle);
     e5a:	80 91 3b 01 	lds	r24, 0x013B
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e5e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e62:	80 91 e8 00 	lds	r24, 0x00E8
     e66:	8e 77       	andi	r24, 0x7E	; 126
     e68:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
     e6c:	0c 94 48 09 	jmp	0x1290	; 0x1290 <Endpoint_ClearStatusStage>
     e70:	08 95       	ret

00000e72 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     e72:	84 b7       	in	r24, 0x34	; 52
     e74:	87 7f       	andi	r24, 0xF7	; 247
     e76:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
     e78:	88 e1       	ldi	r24, 0x18	; 24
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	80 93 60 00 	sts	0x0060, r24
     e82:	10 92 60 00 	sts	0x0060, r1
     e86:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	80 e8       	ldi	r24, 0x80	; 128
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	80 93 61 00 	sts	0x0061, r24
     e94:	90 93 61 00 	sts	0x0061, r25
     e98:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    keyboard_setup();
     e9a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
     e9e:	0e 94 9b 09 	call	0x1336	; 0x1336 <USB_Disable>

    USB_Init();
     ea2:	0e 94 02 0a 	call	0x1404	; 0x1404 <USB_Init>
     ea6:	80 91 e2 00 	lds	r24, 0x00E2
     eaa:	84 60       	ori	r24, 0x04	; 4
     eac:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
     eb0:	8f e0       	ldi	r24, 0x0F	; 15
     eb2:	95 e0       	ldi	r25, 0x05	; 5
     eb4:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <print_set_sendchar>
int main(void)
{
    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
     eb8:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
     eba:	80 91 c6 01 	lds	r24, 0x01C6
     ebe:	84 30       	cpi	r24, 0x04	; 4
     ec0:	e1 f7       	brne	.-8      	; 0xeba <main+0x48>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
     ec2:	8e ee       	ldi	r24, 0xEE	; 238
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	0e 94 10 02 	call	0x420	; 0x420 <xputs>

    /* init modules */
    keyboard_init();
     eca:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <keyboard_init>
    host_set_driver(&lufa_driver);
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	0e 94 a5 0c 	call	0x194a	; 0x194a <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
     ed6:	0e 94 ae 19 	call	0x335c	; 0x335c <sleep_led_init>
#endif

    print("Keyboard start.\n");
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	0e 94 10 02 	call	0x420	; 0x420 <xputs>
     ee2:	0f c0       	rjmp	.+30     	; 0xf02 <main+0x90>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
            print("[s]");
     ee4:	80 e1       	ldi	r24, 0x10	; 16
     ee6:	92 e0       	ldi	r25, 0x02	; 2
     ee8:	0e 94 10 02 	call	0x420	; 0x420 <xputs>
            suspend_power_down();
     eec:	0e 94 11 19 	call	0x3222	; 0x3222 <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
     ef0:	80 91 c4 01 	lds	r24, 0x01C4
     ef4:	88 23       	and	r24, r24
     ef6:	29 f0       	breq	.+10     	; 0xf02 <main+0x90>
     ef8:	0e 94 39 19 	call	0x3272	; 0x3272 <suspend_wakeup_condition>
     efc:	81 11       	cpse	r24, r1
                    USB_Device_SendRemoteWakeup();
     efe:	0e 94 ed 07 	call	0xfda	; 0xfda <USB_Device_SendRemoteWakeup>
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
     f02:	80 91 c6 01 	lds	r24, 0x01C6
     f06:	85 30       	cpi	r24, 0x05	; 5
     f08:	69 f3       	breq	.-38     	; 0xee4 <main+0x72>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
                    USB_Device_SendRemoteWakeup();
            }
        }

        keyboard_task();
     f0a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
     f0e:	f9 cf       	rjmp	.-14     	; 0xf02 <main+0x90>

00000f10 <CALLBACK_USB_GetDescriptor>:
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
     f10:	29 2f       	mov	r18, r25
     f12:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     f14:	23 30       	cpi	r18, 0x03	; 3
     f16:	31 05       	cpc	r19, r1
     f18:	b1 f0       	breq	.+44     	; 0xf46 <CALLBACK_USB_GetDescriptor+0x36>
     f1a:	4c f4       	brge	.+18     	; 0xf2e <CALLBACK_USB_GetDescriptor+0x1e>
     f1c:	21 30       	cpi	r18, 0x01	; 1
     f1e:	31 05       	cpc	r19, r1
     f20:	09 f4       	brne	.+2      	; 0xf24 <CALLBACK_USB_GetDescriptor+0x14>
     f22:	4d c0       	rjmp	.+154    	; 0xfbe <CALLBACK_USB_GetDescriptor+0xae>
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	09 f0       	breq	.+2      	; 0xf2c <CALLBACK_USB_GetDescriptor+0x1c>
     f2a:	4e c0       	rjmp	.+156    	; 0xfc8 <CALLBACK_USB_GetDescriptor+0xb8>
     f2c:	07 c0       	rjmp	.+14     	; 0xf3c <CALLBACK_USB_GetDescriptor+0x2c>
     f2e:	21 32       	cpi	r18, 0x21	; 33
     f30:	31 05       	cpc	r19, r1
     f32:	41 f1       	breq	.+80     	; 0xf84 <CALLBACK_USB_GetDescriptor+0x74>
     f34:	22 32       	cpi	r18, 0x22	; 34
     f36:	31 05       	cpc	r19, r1
     f38:	91 f1       	breq	.+100    	; 0xf9e <CALLBACK_USB_GetDescriptor+0x8e>
     f3a:	46 c0       	rjmp	.+140    	; 0xfc8 <CALLBACK_USB_GetDescriptor+0xb8>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
     f3c:	e2 e4       	ldi	r30, 0x42	; 66
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
     f40:	80 e5       	ldi	r24, 0x50	; 80
     f42:	92 e0       	ldi	r25, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
     f44:	45 c0       	rjmp	.+138    	; 0xfd0 <CALLBACK_USB_GetDescriptor+0xc0>
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
     f46:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	91 05       	cpc	r25, r1
     f4c:	69 f0       	breq	.+26     	; 0xf68 <CALLBACK_USB_GetDescriptor+0x58>
     f4e:	82 30       	cpi	r24, 0x02	; 2
     f50:	91 05       	cpc	r25, r1
     f52:	89 f0       	breq	.+34     	; 0xf76 <CALLBACK_USB_GetDescriptor+0x66>
     f54:	89 2b       	or	r24, r25
     f56:	09 f0       	breq	.+2      	; 0xf5a <CALLBACK_USB_GetDescriptor+0x4a>
     f58:	37 c0       	rjmp	.+110    	; 0xfc8 <CALLBACK_USB_GetDescriptor+0xb8>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
     f5a:	ec e4       	ldi	r30, 0x4C	; 76
     f5c:	f2 e0       	ldi	r31, 0x02	; 2
     f5e:	e4 91       	lpm	r30, Z
     f60:	f0 e0       	ldi	r31, 0x00	; 0
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
            {
                case 0x00:
                    Address = &LanguageString;
     f62:	8c e4       	ldi	r24, 0x4C	; 76
     f64:	92 e0       	ldi	r25, 0x02	; 2
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
     f66:	34 c0       	rjmp	.+104    	; 0xfd0 <CALLBACK_USB_GetDescriptor+0xc0>
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     f68:	e0 e3       	ldi	r30, 0x30	; 48
     f6a:	f2 e0       	ldi	r31, 0x02	; 2
     f6c:	e4 91       	lpm	r30, Z
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case 0x01:
                    Address = &ManufacturerString;
     f70:	80 e3       	ldi	r24, 0x30	; 48
     f72:	92 e0       	ldi	r25, 0x02	; 2
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
     f74:	2d c0       	rjmp	.+90     	; 0xfd0 <CALLBACK_USB_GetDescriptor+0xc0>
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
     f76:	e4 e1       	ldi	r30, 0x14	; 20
     f78:	f2 e0       	ldi	r31, 0x02	; 2
     f7a:	e4 91       	lpm	r30, Z
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
     f7e:	84 e1       	ldi	r24, 0x14	; 20
     f80:	92 e0       	ldi	r25, 0x02	; 2
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
     f82:	26 c0       	rjmp	.+76     	; 0xfd0 <CALLBACK_USB_GetDescriptor+0xc0>
     f84:	62 30       	cpi	r22, 0x02	; 2
     f86:	00 f5       	brcc	.+64     	; 0xfc8 <CALLBACK_USB_GetDescriptor+0xb8>
     f88:	e6 2f       	mov	r30, r22
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	ee 0f       	add	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	e2 5f       	subi	r30, 0xF2	; 242
     f92:	fe 4f       	sbci	r31, 0xFE	; 254
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
     f98:	e9 e0       	ldi	r30, 0x09	; 9
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	19 c0       	rjmp	.+50     	; 0xfd0 <CALLBACK_USB_GetDescriptor+0xc0>
     f9e:	62 30       	cpi	r22, 0x02	; 2
     fa0:	98 f4       	brcc	.+38     	; 0xfc8 <CALLBACK_USB_GetDescriptor+0xb8>
     fa2:	e6 2f       	mov	r30, r22
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	df 01       	movw	r26, r30
     fa8:	aa 0f       	add	r26, r26
     faa:	bb 1f       	adc	r27, r27
     fac:	ae 5e       	subi	r26, 0xEE	; 238
     fae:	be 4f       	sbci	r27, 0xFE	; 254
     fb0:	8d 91       	ld	r24, X+
     fb2:	9c 91       	ld	r25, X
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
     fb4:	ea 5e       	subi	r30, 0xEA	; 234
     fb6:	fe 4f       	sbci	r31, 0xFE	; 254
     fb8:	e0 81       	ld	r30, Z
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	09 c0       	rjmp	.+18     	; 0xfd0 <CALLBACK_USB_GetDescriptor+0xc0>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
     fbe:	e2 e1       	ldi	r30, 0x12	; 18
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
     fc2:	82 e9       	ldi	r24, 0x92	; 146
     fc4:	92 e0       	ldi	r25, 0x02	; 2
     fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <CALLBACK_USB_GetDescriptor+0xc0>
     fc8:	e0 e0       	ldi	r30, 0x00	; 0
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
     fd0:	da 01       	movw	r26, r20
     fd2:	8d 93       	st	X+, r24
     fd4:	9c 93       	st	X, r25
    return Size;
}
     fd6:	cf 01       	movw	r24, r30
     fd8:	08 95       	ret

00000fda <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     fda:	84 e1       	ldi	r24, 0x14	; 20
     fdc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     fde:	86 e1       	ldi	r24, 0x16	; 22
     fe0:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     fe2:	09 b4       	in	r0, 0x29	; 41
     fe4:	00 fe       	sbrs	r0, 0
     fe6:	fd cf       	rjmp	.-6      	; 0xfe2 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     fe8:	80 91 d8 00 	lds	r24, 0x00D8
     fec:	8f 7d       	andi	r24, 0xDF	; 223
     fee:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
     ff2:	80 91 e0 00 	lds	r24, 0x00E0
     ff6:	82 60       	ori	r24, 0x02	; 2
     ff8:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
     ffc:	80 91 e0 00 	lds	r24, 0x00E0
    1000:	81 fd       	sbrc	r24, 1
    1002:	fc cf       	rjmp	.-8      	; 0xffc <USB_Device_SendRemoteWakeup+0x22>
}
    1004:	08 95       	ret

00001006 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1006:	8f 92       	push	r8
    1008:	9f 92       	push	r9
    100a:	af 92       	push	r10
    100c:	bf 92       	push	r11
    100e:	cf 92       	push	r12
    1010:	df 92       	push	r13
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	cf 93       	push	r28
    1018:	5c 01       	movw	r10, r24
    101a:	6b 01       	movw	r12, r22
    101c:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    101e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <Endpoint_WaitUntilReady>
    1022:	c8 2f       	mov	r28, r24
    1024:	81 11       	cpse	r24, r1
    1026:	37 c0       	rjmp	.+110    	; 0x1096 <Endpoint_Write_Stream_LE+0x90>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1028:	e1 14       	cp	r14, r1
    102a:	f1 04       	cpc	r15, r1
    102c:	39 f0       	breq	.+14     	; 0x103c <Endpoint_Write_Stream_LE+0x36>
	{
		Length -= *BytesProcessed;
    102e:	f7 01       	movw	r30, r14
    1030:	20 81       	ld	r18, Z
    1032:	31 81       	ldd	r19, Z+1	; 0x01
    1034:	c2 1a       	sub	r12, r18
    1036:	d3 0a       	sbc	r13, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1038:	a2 0e       	add	r10, r18
    103a:	b3 1e       	adc	r11, r19

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    103c:	81 2c       	mov	r8, r1
    103e:	91 2c       	mov	r9, r1
    1040:	25 c0       	rjmp	.+74     	; 0x108c <Endpoint_Write_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1042:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1046:	85 fd       	sbrc	r24, 5
    1048:	16 c0       	rjmp	.+44     	; 0x1076 <Endpoint_Write_Stream_LE+0x70>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    104a:	80 91 e8 00 	lds	r24, 0x00E8
    104e:	8e 77       	andi	r24, 0x7E	; 126
    1050:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1054:	e1 14       	cp	r14, r1
    1056:	f1 04       	cpc	r15, r1
    1058:	49 f0       	breq	.+18     	; 0x106c <Endpoint_Write_Stream_LE+0x66>
			{
				*BytesProcessed += BytesInTransfer;
    105a:	f7 01       	movw	r30, r14
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	88 0d       	add	r24, r8
    1062:	99 1d       	adc	r25, r9
    1064:	91 83       	std	Z+1, r25	; 0x01
    1066:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1068:	c5 e0       	ldi	r28, 0x05	; 5
    106a:	15 c0       	rjmp	.+42     	; 0x1096 <Endpoint_Write_Stream_LE+0x90>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    106c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <Endpoint_WaitUntilReady>
    1070:	88 23       	and	r24, r24
    1072:	61 f0       	breq	.+24     	; 0x108c <Endpoint_Write_Stream_LE+0x86>
    1074:	0f c0       	rjmp	.+30     	; 0x1094 <Endpoint_Write_Stream_LE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1076:	f5 01       	movw	r30, r10
    1078:	81 91       	ld	r24, Z+
    107a:	5f 01       	movw	r10, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    107c:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1080:	f1 e0       	ldi	r31, 0x01	; 1
    1082:	cf 1a       	sub	r12, r31
    1084:	d1 08       	sbc	r13, r1
			BytesInTransfer++;
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	88 1a       	sub	r8, r24
    108a:	98 0a       	sbc	r9, r24
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    108c:	c1 14       	cp	r12, r1
    108e:	d1 04       	cpc	r13, r1
    1090:	c1 f6       	brne	.-80     	; 0x1042 <Endpoint_Write_Stream_LE+0x3c>
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <Endpoint_Write_Stream_LE+0x90>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1094:	c8 2f       	mov	r28, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1096:	8c 2f       	mov	r24, r28
    1098:	cf 91       	pop	r28
    109a:	ff 90       	pop	r15
    109c:	ef 90       	pop	r14
    109e:	df 90       	pop	r13
    10a0:	cf 90       	pop	r12
    10a2:	bf 90       	pop	r11
    10a4:	af 90       	pop	r10
    10a6:	9f 90       	pop	r9
    10a8:	8f 90       	pop	r8
    10aa:	08 95       	ret

000010ac <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    10ac:	20 91 cd 01 	lds	r18, 0x01CD
    10b0:	30 91 ce 01 	lds	r19, 0x01CE
    10b4:	26 17       	cp	r18, r22
    10b6:	37 07       	cpc	r19, r23
    10b8:	48 f0       	brcs	.+18     	; 0x10cc <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    10ba:	61 15       	cp	r22, r1
    10bc:	71 05       	cpc	r23, r1
    10be:	39 f4       	brne	.+14     	; 0x10ce <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10c0:	20 91 e8 00 	lds	r18, 0x00E8
    10c4:	2e 77       	andi	r18, 0x7E	; 126
    10c6:	20 93 e8 00 	sts	0x00E8, r18
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    10cc:	b9 01       	movw	r22, r18
    10ce:	fc 01       	movw	r30, r24
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	2c c0       	rjmp	.+88     	; 0x112c <Endpoint_Write_Control_Stream_LE+0x80>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    10d4:	80 91 c6 01 	lds	r24, 0x01C6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    10d8:	88 23       	and	r24, r24
    10da:	f1 f1       	breq	.+124    	; 0x1158 <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    10dc:	85 30       	cpi	r24, 0x05	; 5
    10de:	f1 f1       	breq	.+124    	; 0x115c <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    10e0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    10e4:	83 fd       	sbrc	r24, 3
    10e6:	3c c0       	rjmp	.+120    	; 0x1160 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10e8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    10ec:	82 fd       	sbrc	r24, 2
    10ee:	2e c0       	rjmp	.+92     	; 0x114c <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10f0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    10f4:	80 ff       	sbrs	r24, 0
    10f6:	1a c0       	rjmp	.+52     	; 0x112c <Endpoint_Write_Control_Stream_LE+0x80>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    10f8:	80 91 f2 00 	lds	r24, 0x00F2
    10fc:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1100:	06 c0       	rjmp	.+12     	; 0x110e <Endpoint_Write_Control_Stream_LE+0x62>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1102:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1104:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1108:	61 50       	subi	r22, 0x01	; 1
    110a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    110c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    110e:	61 15       	cp	r22, r1
    1110:	71 05       	cpc	r23, r1
    1112:	19 f0       	breq	.+6      	; 0x111a <Endpoint_Write_Control_Stream_LE+0x6e>
    1114:	88 30       	cpi	r24, 0x08	; 8
    1116:	91 05       	cpc	r25, r1
    1118:	a0 f3       	brcs	.-24     	; 0x1102 <Endpoint_Write_Control_Stream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    111a:	21 e0       	ldi	r18, 0x01	; 1
    111c:	08 97       	sbiw	r24, 0x08	; 8
    111e:	09 f0       	breq	.+2      	; 0x1122 <Endpoint_Write_Control_Stream_LE+0x76>
    1120:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1122:	80 91 e8 00 	lds	r24, 0x00E8
    1126:	8e 77       	andi	r24, 0x7E	; 126
    1128:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    112c:	61 15       	cp	r22, r1
    112e:	71 05       	cpc	r23, r1
    1130:	89 f6       	brne	.-94     	; 0x10d4 <Endpoint_Write_Control_Stream_LE+0x28>
    1132:	21 11       	cpse	r18, r1
    1134:	cf cf       	rjmp	.-98     	; 0x10d4 <Endpoint_Write_Control_Stream_LE+0x28>
    1136:	0a c0       	rjmp	.+20     	; 0x114c <Endpoint_Write_Control_Stream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1138:	80 91 c6 01 	lds	r24, 0x01C6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    113c:	88 23       	and	r24, r24
    113e:	61 f0       	breq	.+24     	; 0x1158 <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1140:	85 30       	cpi	r24, 0x05	; 5
    1142:	61 f0       	breq	.+24     	; 0x115c <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1144:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1148:	83 fd       	sbrc	r24, 3
    114a:	0a c0       	rjmp	.+20     	; 0x1160 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    114c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1150:	82 ff       	sbrs	r24, 2
    1152:	f2 cf       	rjmp	.-28     	; 0x1138 <Endpoint_Write_Control_Stream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    115c:	83 e0       	ldi	r24, 0x03	; 3
    115e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1160:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1162:	08 95       	ret

00001164 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1164:	20 91 cd 01 	lds	r18, 0x01CD
    1168:	30 91 ce 01 	lds	r19, 0x01CE
    116c:	26 17       	cp	r18, r22
    116e:	37 07       	cpc	r19, r23
    1170:	48 f0       	brcs	.+18     	; 0x1184 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1172:	61 15       	cp	r22, r1
    1174:	71 05       	cpc	r23, r1
    1176:	39 f4       	brne	.+14     	; 0x1186 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1178:	20 91 e8 00 	lds	r18, 0x00E8
    117c:	2e 77       	andi	r18, 0x7E	; 126
    117e:	20 93 e8 00 	sts	0x00E8, r18
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1184:	b9 01       	movw	r22, r18
    1186:	fc 01       	movw	r30, r24
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	2f c0       	rjmp	.+94     	; 0x11ea <Endpoint_Write_Control_PStream_LE+0x86>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    118c:	80 91 c6 01 	lds	r24, 0x01C6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1190:	88 23       	and	r24, r24
    1192:	09 f4       	brne	.+2      	; 0x1196 <Endpoint_Write_Control_PStream_LE+0x32>
    1194:	40 c0       	rjmp	.+128    	; 0x1216 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1196:	85 30       	cpi	r24, 0x05	; 5
    1198:	09 f4       	brne	.+2      	; 0x119c <Endpoint_Write_Control_PStream_LE+0x38>
    119a:	3f c0       	rjmp	.+126    	; 0x121a <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    119c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    11a0:	83 fd       	sbrc	r24, 3
    11a2:	3d c0       	rjmp	.+122    	; 0x121e <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11a4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    11a8:	82 fd       	sbrc	r24, 2
    11aa:	2f c0       	rjmp	.+94     	; 0x120a <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11ac:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    11b0:	80 ff       	sbrs	r24, 0
    11b2:	1b c0       	rjmp	.+54     	; 0x11ea <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    11b4:	80 91 f2 00 	lds	r24, 0x00F2
    11b8:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    11bc:	07 c0       	rjmp	.+14     	; 0x11cc <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    11be:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11c0:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    11c4:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    11c6:	61 50       	subi	r22, 0x01	; 1
    11c8:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    11ca:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    11cc:	61 15       	cp	r22, r1
    11ce:	71 05       	cpc	r23, r1
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <Endpoint_Write_Control_PStream_LE+0x74>
    11d2:	88 30       	cpi	r24, 0x08	; 8
    11d4:	91 05       	cpc	r25, r1
    11d6:	98 f3       	brcs	.-26     	; 0x11be <Endpoint_Write_Control_PStream_LE+0x5a>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    11d8:	21 e0       	ldi	r18, 0x01	; 1
    11da:	08 97       	sbiw	r24, 0x08	; 8
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <Endpoint_Write_Control_PStream_LE+0x7c>
    11de:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11e0:	80 91 e8 00 	lds	r24, 0x00E8
    11e4:	8e 77       	andi	r24, 0x7E	; 126
    11e6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    11ea:	61 15       	cp	r22, r1
    11ec:	71 05       	cpc	r23, r1
    11ee:	71 f6       	brne	.-100    	; 0x118c <Endpoint_Write_Control_PStream_LE+0x28>
    11f0:	21 11       	cpse	r18, r1
    11f2:	cc cf       	rjmp	.-104    	; 0x118c <Endpoint_Write_Control_PStream_LE+0x28>
    11f4:	0a c0       	rjmp	.+20     	; 0x120a <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    11f6:	80 91 c6 01 	lds	r24, 0x01C6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    11fa:	88 23       	and	r24, r24
    11fc:	61 f0       	breq	.+24     	; 0x1216 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    11fe:	85 30       	cpi	r24, 0x05	; 5
    1200:	61 f0       	breq	.+24     	; 0x121a <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1202:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1206:	83 fd       	sbrc	r24, 3
    1208:	0a c0       	rjmp	.+20     	; 0x121e <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    120a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    120e:	82 ff       	sbrs	r24, 2
    1210:	f2 cf       	rjmp	.-28     	; 0x11f6 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    121a:	83 e0       	ldi	r24, 0x03	; 3
    121c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    121e:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1220:	08 95       	ret

00001222 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1222:	98 2f       	mov	r25, r24
    1224:	2c c0       	rjmp	.+88     	; 0x127e <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1226:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    122a:	98 17       	cp	r25, r24
    122c:	39 f0       	breq	.+14     	; 0x123c <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    122e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1232:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1236:	50 91 f0 00 	lds	r21, 0x00F0
    123a:	03 c0       	rjmp	.+6      	; 0x1242 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    123c:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    123e:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1240:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1242:	21 fd       	sbrc	r18, 1
    1244:	02 c0       	rjmp	.+4      	; 0x124a <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1246:	9f 5f       	subi	r25, 0xFF	; 255
    1248:	1a c0       	rjmp	.+52     	; 0x127e <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    124a:	30 91 eb 00 	lds	r19, 0x00EB
    124e:	3e 7f       	andi	r19, 0xFE	; 254
    1250:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1254:	30 91 ed 00 	lds	r19, 0x00ED
    1258:	3d 7f       	andi	r19, 0xFD	; 253
    125a:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    125e:	30 91 eb 00 	lds	r19, 0x00EB
    1262:	31 60       	ori	r19, 0x01	; 1
    1264:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1268:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    126c:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1270:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1274:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1278:	27 fd       	sbrc	r18, 7
    127a:	e5 cf       	rjmp	.-54     	; 0x1246 <Endpoint_ConfigureEndpoint_Prv+0x24>
    127c:	07 c0       	rjmp	.+14     	; 0x128c <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    127e:	97 30       	cpi	r25, 0x07	; 7
    1280:	90 f2       	brcs	.-92     	; 0x1226 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1282:	8f 70       	andi	r24, 0x0F	; 15
    1284:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    128c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    128e:	08 95       	ret

00001290 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1290:	80 91 c7 01 	lds	r24, 0x01C7
    1294:	87 fd       	sbrc	r24, 7
    1296:	05 c0       	rjmp	.+10     	; 0x12a2 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1298:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    129c:	80 ff       	sbrs	r24, 0
    129e:	0e c0       	rjmp	.+28     	; 0x12bc <Endpoint_ClearStatusStage+0x2c>
    12a0:	12 c0       	rjmp	.+36     	; 0x12c6 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12a2:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    12a6:	82 fd       	sbrc	r24, 2
    12a8:	05 c0       	rjmp	.+10     	; 0x12b4 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    12aa:	80 91 c6 01 	lds	r24, 0x01C6
    12ae:	81 11       	cpse	r24, r1
    12b0:	f8 cf       	rjmp	.-16     	; 0x12a2 <Endpoint_ClearStatusStage+0x12>
    12b2:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12b4:	80 91 e8 00 	lds	r24, 0x00E8
    12b8:	8b 77       	andi	r24, 0x7B	; 123
    12ba:	08 c0       	rjmp	.+16     	; 0x12cc <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    12bc:	80 91 c6 01 	lds	r24, 0x01C6
    12c0:	81 11       	cpse	r24, r1
    12c2:	ea cf       	rjmp	.-44     	; 0x1298 <Endpoint_ClearStatusStage+0x8>
    12c4:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12c6:	80 91 e8 00 	lds	r24, 0x00E8
    12ca:	8e 77       	andi	r24, 0x7E	; 126
    12cc:	80 93 e8 00 	sts	0x00E8, r24
    12d0:	08 95       	ret

000012d2 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    12d2:	80 91 e4 00 	lds	r24, 0x00E4
    12d6:	90 91 e5 00 	lds	r25, 0x00E5
    12da:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    12dc:	20 91 ec 00 	lds	r18, 0x00EC
    12e0:	20 fd       	sbrc	r18, 0
    12e2:	1f c0       	rjmp	.+62     	; 0x1322 <Endpoint_WaitUntilReady+0x50>
    12e4:	23 c0       	rjmp	.+70     	; 0x132c <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    12e6:	20 91 c6 01 	lds	r18, 0x01C6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    12ea:	22 23       	and	r18, r18
    12ec:	91 f0       	breq	.+36     	; 0x1312 <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    12ee:	25 30       	cpi	r18, 0x05	; 5
    12f0:	91 f0       	breq	.+36     	; 0x1316 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    12f2:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    12f6:	25 fd       	sbrc	r18, 5
    12f8:	10 c0       	rjmp	.+32     	; 0x131a <Endpoint_WaitUntilReady+0x48>
    12fa:	20 91 e4 00 	lds	r18, 0x00E4
    12fe:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1302:	28 17       	cp	r18, r24
    1304:	39 07       	cpc	r19, r25
    1306:	51 f3       	breq	.-44     	; 0x12dc <Endpoint_WaitUntilReady+0xa>
    1308:	41 50       	subi	r20, 0x01	; 1
    130a:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    130c:	39 f7       	brne	.-50     	; 0x12dc <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    130e:	84 e0       	ldi	r24, 0x04	; 4
    1310:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1312:	82 e0       	ldi	r24, 0x02	; 2
    1314:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1316:	83 e0       	ldi	r24, 0x03	; 3
    1318:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1322:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1326:	20 ff       	sbrs	r18, 0
    1328:	de cf       	rjmp	.-68     	; 0x12e6 <Endpoint_WaitUntilReady+0x14>
    132a:	f9 cf       	rjmp	.-14     	; 0x131e <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    132c:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1330:	22 ff       	sbrs	r18, 2
    1332:	d9 cf       	rjmp	.-78     	; 0x12e6 <Endpoint_WaitUntilReady+0x14>
    1334:	f4 cf       	rjmp	.-24     	; 0x131e <Endpoint_WaitUntilReady+0x4c>

00001336 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1336:	0e 94 11 0a 	call	0x1422	; 0x1422 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    133a:	0e 94 19 0a 	call	0x1432	; 0x1432 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    133e:	e0 ee       	ldi	r30, 0xE0	; 224
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	81 60       	ori	r24, 0x01	; 1
    1346:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1348:	e8 ed       	ldi	r30, 0xD8	; 216
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	8f 77       	andi	r24, 0x7F	; 127
    1350:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1352:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1354:	a7 ed       	ldi	r26, 0xD7	; 215
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	8c 91       	ld	r24, X
    135a:	8e 7f       	andi	r24, 0xFE	; 254
    135c:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    135e:	80 81       	ld	r24, Z
    1360:	8f 7e       	andi	r24, 0xEF	; 239
    1362:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1364:	10 92 c5 01 	sts	0x01C5, r1
    1368:	08 95       	ret

0000136a <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    136a:	cf 92       	push	r12
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1372:	0e 94 11 0a 	call	0x1422	; 0x1422 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1376:	0e 94 19 0a 	call	0x1432	; 0x1432 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    137a:	88 ed       	ldi	r24, 0xD8	; 216
    137c:	e8 2e       	mov	r14, r24
    137e:	f1 2c       	mov	r15, r1
    1380:	f7 01       	movw	r30, r14
    1382:	80 81       	ld	r24, Z
    1384:	8f 77       	andi	r24, 0x7F	; 127
    1386:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    1388:	80 81       	ld	r24, Z
    138a:	80 68       	ori	r24, 0x80	; 128
    138c:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    138e:	80 81       	ld	r24, Z
    1390:	8f 7d       	andi	r24, 0xDF	; 223
    1392:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1394:	e7 ed       	ldi	r30, 0xD7	; 215
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	80 68       	ori	r24, 0x80	; 128
    139c:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    139e:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    13a0:	10 92 c6 01 	sts	0x01C6, r1
	USB_Device_ConfigurationNumber  = 0;
    13a4:	10 92 c2 01 	sts	0x01C2, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    13a8:	10 92 c4 01 	sts	0x01C4, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    13ac:	10 92 c3 01 	sts	0x01C3, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    13b0:	90 ee       	ldi	r25, 0xE0	; 224
    13b2:	c9 2e       	mov	r12, r25
    13b4:	d1 2c       	mov	r13, r1
    13b6:	f6 01       	movw	r30, r12
    13b8:	80 81       	ld	r24, Z
    13ba:	8b 7f       	andi	r24, 0xFB	; 251
    13bc:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    13be:	f7 01       	movw	r30, r14
    13c0:	80 81       	ld	r24, Z
    13c2:	81 60       	ori	r24, 0x01	; 1
    13c4:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    13c6:	42 e0       	ldi	r20, 0x02	; 2
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	0e 94 11 09 	call	0x1222	; 0x1222 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    13d0:	e1 ee       	ldi	r30, 0xE1	; 225
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	8e 7f       	andi	r24, 0xFE	; 254
    13d8:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    13da:	e2 ee       	ldi	r30, 0xE2	; 226
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	81 60       	ori	r24, 0x01	; 1
    13e2:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    13e4:	80 81       	ld	r24, Z
    13e6:	88 60       	ori	r24, 0x08	; 8
    13e8:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    13ea:	f6 01       	movw	r30, r12
    13ec:	80 81       	ld	r24, Z
    13ee:	8e 7f       	andi	r24, 0xFE	; 254
    13f0:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    13f2:	f7 01       	movw	r30, r14
    13f4:	80 81       	ld	r24, Z
    13f6:	80 61       	ori	r24, 0x10	; 16
    13f8:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    13fa:	ff 90       	pop	r15
    13fc:	ef 90       	pop	r14
    13fe:	df 90       	pop	r13
    1400:	cf 90       	pop	r12
    1402:	08 95       	ret

00001404 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1404:	e8 ed       	ldi	r30, 0xD8	; 216
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	8f 7e       	andi	r24, 0xEF	; 239
    140c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    140e:	e7 ed       	ldi	r30, 0xD7	; 215
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	81 60       	ori	r24, 0x01	; 1
    1416:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	80 93 c5 01 	sts	0x01C5, r24

	USB_ResetInterface();
    141e:	0c 94 b5 09 	jmp	0x136a	; 0x136a <USB_ResetInterface>

00001422 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1422:	e8 ed       	ldi	r30, 0xD8	; 216
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	8c 7f       	andi	r24, 0xFC	; 252
    142a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    142c:	10 92 e2 00 	sts	0x00E2, r1
    1430:	08 95       	ret

00001432 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1432:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1436:	10 92 e1 00 	sts	0x00E1, r1
    143a:	08 95       	ret

0000143c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    143c:	1f 92       	push	r1
    143e:	0f 92       	push	r0
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	0f 92       	push	r0
    1444:	11 24       	eor	r1, r1
    1446:	0b b6       	in	r0, 0x3b	; 59
    1448:	0f 92       	push	r0
    144a:	2f 93       	push	r18
    144c:	3f 93       	push	r19
    144e:	4f 93       	push	r20
    1450:	5f 93       	push	r21
    1452:	6f 93       	push	r22
    1454:	7f 93       	push	r23
    1456:	8f 93       	push	r24
    1458:	9f 93       	push	r25
    145a:	af 93       	push	r26
    145c:	bf 93       	push	r27
    145e:	ef 93       	push	r30
    1460:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1462:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1466:	82 ff       	sbrs	r24, 2
    1468:	0b c0       	rjmp	.+22     	; 0x1480 <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    146a:	80 91 e2 00 	lds	r24, 0x00E2
    146e:	82 ff       	sbrs	r24, 2
    1470:	07 c0       	rjmp	.+14     	; 0x1480 <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1472:	80 91 e1 00 	lds	r24, 0x00E1
    1476:	8b 7f       	andi	r24, 0xFB	; 251
    1478:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    147c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1480:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1484:	80 ff       	sbrs	r24, 0
    1486:	1f c0       	rjmp	.+62     	; 0x14c6 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1488:	80 91 d8 00 	lds	r24, 0x00D8
    148c:	80 ff       	sbrs	r24, 0
    148e:	1b c0       	rjmp	.+54     	; 0x14c6 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1490:	80 91 da 00 	lds	r24, 0x00DA
    1494:	8e 7f       	andi	r24, 0xFE	; 254
    1496:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    149a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    149e:	80 ff       	sbrs	r24, 0
    14a0:	0d c0       	rjmp	.+26     	; 0x14bc <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    14a2:	84 e1       	ldi	r24, 0x14	; 20
    14a4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    14a6:	86 e1       	ldi	r24, 0x16	; 22
    14a8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    14aa:	09 b4       	in	r0, 0x29	; 41
    14ac:	00 fe       	sbrs	r0, 0
    14ae:	fd cf       	rjmp	.-6      	; 0x14aa <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	80 93 c6 01 	sts	0x01C6, r24
			EVENT_USB_Device_Connect();
    14b6:	0e 94 0f 06 	call	0xc1e	; 0xc1e <EVENT_USB_Device_Connect>
    14ba:	05 c0       	rjmp	.+10     	; 0x14c6 <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    14bc:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    14be:	10 92 c6 01 	sts	0x01C6, r1
			EVENT_USB_Device_Disconnect();
    14c2:	0e 94 21 06 	call	0xc42	; 0xc42 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    14c6:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    14ca:	80 ff       	sbrs	r24, 0
    14cc:	19 c0       	rjmp	.+50     	; 0x1500 <__vector_10+0xc4>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    14ce:	80 91 e2 00 	lds	r24, 0x00E2
    14d2:	80 ff       	sbrs	r24, 0
    14d4:	15 c0       	rjmp	.+42     	; 0x1500 <__vector_10+0xc4>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    14d6:	80 91 e2 00 	lds	r24, 0x00E2
    14da:	8e 7f       	andi	r24, 0xFE	; 254
    14dc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    14e0:	80 91 e2 00 	lds	r24, 0x00E2
    14e4:	80 61       	ori	r24, 0x10	; 16
    14e6:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    14ea:	80 91 d8 00 	lds	r24, 0x00D8
    14ee:	80 62       	ori	r24, 0x20	; 32
    14f0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    14f4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    14f6:	85 e0       	ldi	r24, 0x05	; 5
    14f8:	80 93 c6 01 	sts	0x01C6, r24
		EVENT_USB_Device_Suspend();
    14fc:	0e 94 2c 06 	call	0xc58	; 0xc58 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1500:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1504:	84 ff       	sbrs	r24, 4
    1506:	30 c0       	rjmp	.+96     	; 0x1568 <__vector_10+0x12c>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1508:	80 91 e2 00 	lds	r24, 0x00E2
    150c:	84 ff       	sbrs	r24, 4
    150e:	2c c0       	rjmp	.+88     	; 0x1568 <__vector_10+0x12c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1510:	84 e1       	ldi	r24, 0x14	; 20
    1512:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1514:	86 e1       	ldi	r24, 0x16	; 22
    1516:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1518:	09 b4       	in	r0, 0x29	; 41
    151a:	00 fe       	sbrs	r0, 0
    151c:	fd cf       	rjmp	.-6      	; 0x1518 <__vector_10+0xdc>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    151e:	80 91 d8 00 	lds	r24, 0x00D8
    1522:	8f 7d       	andi	r24, 0xDF	; 223
    1524:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1528:	80 91 e1 00 	lds	r24, 0x00E1
    152c:	8f 7e       	andi	r24, 0xEF	; 239
    152e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1532:	80 91 e2 00 	lds	r24, 0x00E2
    1536:	8f 7e       	andi	r24, 0xEF	; 239
    1538:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    153c:	80 91 e2 00 	lds	r24, 0x00E2
    1540:	81 60       	ori	r24, 0x01	; 1
    1542:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1546:	80 91 c2 01 	lds	r24, 0x01C2
    154a:	88 23       	and	r24, r24
    154c:	11 f0       	breq	.+4      	; 0x1552 <__vector_10+0x116>
		  USB_DeviceState = DEVICE_STATE_Configured;
    154e:	84 e0       	ldi	r24, 0x04	; 4
    1550:	07 c0       	rjmp	.+14     	; 0x1560 <__vector_10+0x124>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1552:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1556:	87 ff       	sbrs	r24, 7
    1558:	02 c0       	rjmp	.+4      	; 0x155e <__vector_10+0x122>
    155a:	83 e0       	ldi	r24, 0x03	; 3
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <__vector_10+0x124>
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	80 93 c6 01 	sts	0x01C6, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1564:	0e 94 32 06 	call	0xc64	; 0xc64 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1568:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    156c:	83 ff       	sbrs	r24, 3
    156e:	29 c0       	rjmp	.+82     	; 0x15c2 <__vector_10+0x186>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1570:	80 91 e2 00 	lds	r24, 0x00E2
    1574:	83 ff       	sbrs	r24, 3
    1576:	25 c0       	rjmp	.+74     	; 0x15c2 <__vector_10+0x186>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1578:	80 91 e1 00 	lds	r24, 0x00E1
    157c:	87 7f       	andi	r24, 0xF7	; 247
    157e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	80 93 c6 01 	sts	0x01C6, r24
		USB_Device_ConfigurationNumber = 0;
    1588:	10 92 c2 01 	sts	0x01C2, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    158c:	80 91 e1 00 	lds	r24, 0x00E1
    1590:	8e 7f       	andi	r24, 0xFE	; 254
    1592:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1596:	80 91 e2 00 	lds	r24, 0x00E2
    159a:	8e 7f       	andi	r24, 0xFE	; 254
    159c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    15a0:	80 91 e2 00 	lds	r24, 0x00E2
    15a4:	80 61       	ori	r24, 0x10	; 16
    15a6:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    15aa:	42 e0       	ldi	r20, 0x02	; 2
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	0e 94 11 09 	call	0x1222	; 0x1222 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    15b4:	80 91 f0 00 	lds	r24, 0x00F0
    15b8:	88 60       	ori	r24, 0x08	; 8
    15ba:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    15be:	0e 94 28 06 	call	0xc50	; 0xc50 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    15c2:	ff 91       	pop	r31
    15c4:	ef 91       	pop	r30
    15c6:	bf 91       	pop	r27
    15c8:	af 91       	pop	r26
    15ca:	9f 91       	pop	r25
    15cc:	8f 91       	pop	r24
    15ce:	7f 91       	pop	r23
    15d0:	6f 91       	pop	r22
    15d2:	5f 91       	pop	r21
    15d4:	4f 91       	pop	r20
    15d6:	3f 91       	pop	r19
    15d8:	2f 91       	pop	r18
    15da:	0f 90       	pop	r0
    15dc:	0b be       	out	0x3b, r0	; 59
    15de:	0f 90       	pop	r0
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	0f 90       	pop	r0
    15e4:	1f 90       	pop	r1
    15e6:	18 95       	reti

000015e8 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    15e8:	1f 92       	push	r1
    15ea:	0f 92       	push	r0
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	0f 92       	push	r0
    15f0:	11 24       	eor	r1, r1
    15f2:	0b b6       	in	r0, 0x3b	; 59
    15f4:	0f 92       	push	r0
    15f6:	2f 93       	push	r18
    15f8:	3f 93       	push	r19
    15fa:	4f 93       	push	r20
    15fc:	5f 93       	push	r21
    15fe:	6f 93       	push	r22
    1600:	7f 93       	push	r23
    1602:	8f 93       	push	r24
    1604:	9f 93       	push	r25
    1606:	af 93       	push	r26
    1608:	bf 93       	push	r27
    160a:	cf 93       	push	r28
    160c:	ef 93       	push	r30
    160e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1610:	80 91 e9 00 	lds	r24, 0x00E9
    1614:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1616:	90 91 ec 00 	lds	r25, 0x00EC
    161a:	90 ff       	sbrs	r25, 0
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <__vector_11+0x3a>
    161e:	90 e8       	ldi	r25, 0x80	; 128
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <__vector_11+0x3c>
    1622:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1624:	c9 2f       	mov	r28, r25
    1626:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1628:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    162c:	80 91 f0 00 	lds	r24, 0x00F0
    1630:	87 7f       	andi	r24, 0xF7	; 247
    1632:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1636:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1638:	0e 94 3c 0b 	call	0x1678	; 0x1678 <USB_Device_ProcessControlRequest>
    163c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1640:	80 91 f0 00 	lds	r24, 0x00F0
    1644:	88 60       	ori	r24, 0x08	; 8
    1646:	80 93 f0 00 	sts	0x00F0, r24
    164a:	cf 70       	andi	r28, 0x0F	; 15
    164c:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1650:	ff 91       	pop	r31
    1652:	ef 91       	pop	r30
    1654:	cf 91       	pop	r28
    1656:	bf 91       	pop	r27
    1658:	af 91       	pop	r26
    165a:	9f 91       	pop	r25
    165c:	8f 91       	pop	r24
    165e:	7f 91       	pop	r23
    1660:	6f 91       	pop	r22
    1662:	5f 91       	pop	r21
    1664:	4f 91       	pop	r20
    1666:	3f 91       	pop	r19
    1668:	2f 91       	pop	r18
    166a:	0f 90       	pop	r0
    166c:	0b be       	out	0x3b, r0	; 59
    166e:	0f 90       	pop	r0
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	0f 90       	pop	r0
    1674:	1f 90       	pop	r1
    1676:	18 95       	reti

00001678 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	ac 97       	sbiw	r28, 0x2c	; 44
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    168e:	e7 ec       	ldi	r30, 0xC7	; 199
    1690:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1692:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1696:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1698:	21 e0       	ldi	r18, 0x01	; 1
    169a:	ef 3c       	cpi	r30, 0xCF	; 207
    169c:	f2 07       	cpc	r31, r18
    169e:	c9 f7       	brne	.-14     	; 0x1692 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    16a0:	0e 94 88 06 	call	0xd10	; 0xd10 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16a4:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    16a8:	83 ff       	sbrs	r24, 3
    16aa:	37 c1       	rjmp	.+622    	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    16ac:	80 91 c7 01 	lds	r24, 0x01C7

		switch (USB_ControlRequest.bRequest)
    16b0:	90 91 c8 01 	lds	r25, 0x01C8
    16b4:	95 30       	cpi	r25, 0x05	; 5
    16b6:	09 f4       	brne	.+2      	; 0x16ba <USB_Device_ProcessControlRequest+0x42>
    16b8:	88 c0       	rjmp	.+272    	; 0x17ca <USB_Device_ProcessControlRequest+0x152>
    16ba:	38 f4       	brcc	.+14     	; 0x16ca <USB_Device_ProcessControlRequest+0x52>
    16bc:	91 30       	cpi	r25, 0x01	; 1
    16be:	b1 f1       	breq	.+108    	; 0x172c <USB_Device_ProcessControlRequest+0xb4>
    16c0:	70 f0       	brcs	.+28     	; 0x16de <USB_Device_ProcessControlRequest+0x66>
    16c2:	93 30       	cpi	r25, 0x03	; 3
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <USB_Device_ProcessControlRequest+0x50>
    16c6:	29 c1       	rjmp	.+594    	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
    16c8:	31 c0       	rjmp	.+98     	; 0x172c <USB_Device_ProcessControlRequest+0xb4>
    16ca:	98 30       	cpi	r25, 0x08	; 8
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <USB_Device_ProcessControlRequest+0x58>
    16ce:	f8 c0       	rjmp	.+496    	; 0x18c0 <USB_Device_ProcessControlRequest+0x248>
    16d0:	99 30       	cpi	r25, 0x09	; 9
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <USB_Device_ProcessControlRequest+0x5e>
    16d4:	04 c1       	rjmp	.+520    	; 0x18de <USB_Device_ProcessControlRequest+0x266>
    16d6:	96 30       	cpi	r25, 0x06	; 6
    16d8:	09 f0       	breq	.+2      	; 0x16dc <USB_Device_ProcessControlRequest+0x64>
    16da:	1f c1       	rjmp	.+574    	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
    16dc:	9d c0       	rjmp	.+314    	; 0x1818 <USB_Device_ProcessControlRequest+0x1a0>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    16de:	80 38       	cpi	r24, 0x80	; 128
    16e0:	21 f0       	breq	.+8      	; 0x16ea <USB_Device_ProcessControlRequest+0x72>
    16e2:	82 38       	cpi	r24, 0x82	; 130
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <USB_Device_ProcessControlRequest+0x70>
    16e6:	19 c1       	rjmp	.+562    	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
    16e8:	08 c0       	rjmp	.+16     	; 0x16fa <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    16ea:	80 91 c3 01 	lds	r24, 0x01C3
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    16ee:	90 91 c4 01 	lds	r25, 0x01C4
    16f2:	99 23       	and	r25, r25
    16f4:	89 f0       	breq	.+34     	; 0x1718 <USB_Device_ProcessControlRequest+0xa0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    16f6:	82 60       	ori	r24, 0x02	; 2
    16f8:	0f c0       	rjmp	.+30     	; 0x1718 <USB_Device_ProcessControlRequest+0xa0>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    16fa:	80 91 cb 01 	lds	r24, 0x01CB
    16fe:	90 91 cc 01 	lds	r25, 0x01CC
    1702:	8f 70       	andi	r24, 0x0F	; 15
    1704:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1706:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    170a:	80 91 eb 00 	lds	r24, 0x00EB
    170e:	85 fb       	bst	r24, 5
    1710:	88 27       	eor	r24, r24
    1712:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1714:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1718:	90 91 e8 00 	lds	r25, 0x00E8
    171c:	97 7f       	andi	r25, 0xF7	; 247
    171e:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1722:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1726:	10 92 f1 00 	sts	0x00F1, r1
    172a:	d5 c0       	rjmp	.+426    	; 0x18d6 <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    172c:	88 23       	and	r24, r24
    172e:	19 f0       	breq	.+6      	; 0x1736 <USB_Device_ProcessControlRequest+0xbe>
    1730:	82 30       	cpi	r24, 0x02	; 2
    1732:	09 f0       	breq	.+2      	; 0x1736 <USB_Device_ProcessControlRequest+0xbe>
    1734:	f2 c0       	rjmp	.+484    	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1736:	8f 71       	andi	r24, 0x1F	; 31
    1738:	21 f0       	breq	.+8      	; 0x1742 <USB_Device_ProcessControlRequest+0xca>
    173a:	82 30       	cpi	r24, 0x02	; 2
    173c:	09 f0       	breq	.+2      	; 0x1740 <USB_Device_ProcessControlRequest+0xc8>
    173e:	ed c0       	rjmp	.+474    	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
    1740:	0b c0       	rjmp	.+22     	; 0x1758 <USB_Device_ProcessControlRequest+0xe0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1742:	80 91 c9 01 	lds	r24, 0x01C9
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	09 f0       	breq	.+2      	; 0x174c <USB_Device_ProcessControlRequest+0xd4>
    174a:	e7 c0       	rjmp	.+462    	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    174c:	93 30       	cpi	r25, 0x03	; 3
    174e:	09 f0       	breq	.+2      	; 0x1752 <USB_Device_ProcessControlRequest+0xda>
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	80 93 c4 01 	sts	0x01C4, r24
    1756:	2f c0       	rjmp	.+94     	; 0x17b6 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1758:	80 91 c9 01 	lds	r24, 0x01C9
    175c:	81 11       	cpse	r24, r1
    175e:	2b c0       	rjmp	.+86     	; 0x17b6 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1760:	80 91 cb 01 	lds	r24, 0x01CB
    1764:	90 91 cc 01 	lds	r25, 0x01CC
    1768:	8f 70       	andi	r24, 0x0F	; 15
    176a:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	09 f4       	brne	.+2      	; 0x1772 <USB_Device_ProcessControlRequest+0xfa>
    1770:	d4 c0       	rjmp	.+424    	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1772:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1776:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    177a:	20 ff       	sbrs	r18, 0
    177c:	1c c0       	rjmp	.+56     	; 0x17b6 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    177e:	20 91 c8 01 	lds	r18, 0x01C8
    1782:	23 30       	cpi	r18, 0x03	; 3
    1784:	21 f4       	brne	.+8      	; 0x178e <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1786:	80 91 eb 00 	lds	r24, 0x00EB
    178a:	80 62       	ori	r24, 0x20	; 32
    178c:	12 c0       	rjmp	.+36     	; 0x17b2 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    178e:	90 91 eb 00 	lds	r25, 0x00EB
    1792:	90 61       	ori	r25, 0x10	; 16
    1794:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1798:	21 e0       	ldi	r18, 0x01	; 1
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	01 c0       	rjmp	.+2      	; 0x17a0 <USB_Device_ProcessControlRequest+0x128>
    179e:	22 0f       	add	r18, r18
    17a0:	8a 95       	dec	r24
    17a2:	ea f7       	brpl	.-6      	; 0x179e <USB_Device_ProcessControlRequest+0x126>
    17a4:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    17a8:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    17ac:	80 91 eb 00 	lds	r24, 0x00EB
    17b0:	88 60       	ori	r24, 0x08	; 8
    17b2:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17b6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17ba:	80 91 e8 00 	lds	r24, 0x00E8
    17be:	87 7f       	andi	r24, 0xF7	; 247
    17c0:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    17c4:	0e 94 48 09 	call	0x1290	; 0x1290 <Endpoint_ClearStatusStage>
    17c8:	a8 c0       	rjmp	.+336    	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    17ca:	81 11       	cpse	r24, r1
    17cc:	a6 c0       	rjmp	.+332    	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    17ce:	80 91 c9 01 	lds	r24, 0x01C9
    17d2:	90 91 ca 01 	lds	r25, 0x01CA
    17d6:	8f 77       	andi	r24, 0x7F	; 127
    17d8:	99 27       	eor	r25, r25
    17da:	18 2f       	mov	r17, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    17dc:	90 91 e3 00 	lds	r25, 0x00E3
    17e0:	90 78       	andi	r25, 0x80	; 128
    17e2:	98 2b       	or	r25, r24
    17e4:	90 93 e3 00 	sts	0x00E3, r25
    17e8:	80 91 e8 00 	lds	r24, 0x00E8
    17ec:	87 7f       	andi	r24, 0xF7	; 247
    17ee:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    17f2:	0e 94 48 09 	call	0x1290	; 0x1290 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17f6:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    17fa:	80 ff       	sbrs	r24, 0
    17fc:	fc cf       	rjmp	.-8      	; 0x17f6 <USB_Device_ProcessControlRequest+0x17e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    17fe:	80 91 e3 00 	lds	r24, 0x00E3
    1802:	80 68       	ori	r24, 0x80	; 128
    1804:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1808:	11 23       	and	r17, r17
    180a:	11 f0       	breq	.+4      	; 0x1810 <USB_Device_ProcessControlRequest+0x198>
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <USB_Device_ProcessControlRequest+0x19a>
    1810:	82 e0       	ldi	r24, 0x02	; 2
    1812:	80 93 c6 01 	sts	0x01C6, r24
    1816:	81 c0       	rjmp	.+258    	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1818:	80 58       	subi	r24, 0x80	; 128
    181a:	82 30       	cpi	r24, 0x02	; 2
    181c:	08 f0       	brcs	.+2      	; 0x1820 <USB_Device_ProcessControlRequest+0x1a8>
    181e:	7d c0       	rjmp	.+250    	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1820:	80 91 c9 01 	lds	r24, 0x01C9
    1824:	90 91 ca 01 	lds	r25, 0x01CA
    1828:	8c 3d       	cpi	r24, 0xDC	; 220
    182a:	23 e0       	ldi	r18, 0x03	; 3
    182c:	92 07       	cpc	r25, r18
    182e:	79 f5       	brne	.+94     	; 0x188e <USB_Device_ProcessControlRequest+0x216>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1830:	83 e0       	ldi	r24, 0x03	; 3
    1832:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1834:	8a e2       	ldi	r24, 0x2A	; 42
    1836:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1838:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    183a:	f8 94       	cli

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    183c:	de 01       	movw	r26, r28
    183e:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1840:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1842:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1844:	51 e2       	ldi	r21, 0x21	; 33
    1846:	e3 2f       	mov	r30, r19
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	50 93 57 00 	sts	0x0057, r21
    184e:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1850:	20 ff       	sbrs	r18, 0
    1852:	03 c0       	rjmp	.+6      	; 0x185a <USB_Device_ProcessControlRequest+0x1e2>
					{
						SerialByte >>= 4;
    1854:	e2 95       	swap	r30
    1856:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1858:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    185a:	ef 70       	andi	r30, 0x0F	; 15
    185c:	8e 2f       	mov	r24, r30
    185e:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1860:	ea 30       	cpi	r30, 0x0A	; 10
    1862:	10 f0       	brcs	.+4      	; 0x1868 <USB_Device_ProcessControlRequest+0x1f0>
    1864:	c7 96       	adiw	r24, 0x37	; 55
    1866:	01 c0       	rjmp	.+2      	; 0x186a <USB_Device_ProcessControlRequest+0x1f2>
    1868:	c0 96       	adiw	r24, 0x30	; 48
    186a:	8d 93       	st	X+, r24
    186c:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    186e:	2f 5f       	subi	r18, 0xFF	; 255
    1870:	24 31       	cpi	r18, 0x14	; 20
    1872:	49 f7       	brne	.-46     	; 0x1846 <USB_Device_ProcessControlRequest+0x1ce>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1874:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1876:	80 91 e8 00 	lds	r24, 0x00E8
    187a:	87 7f       	andi	r24, 0xF7	; 247
    187c:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1880:	6a e2       	ldi	r22, 0x2A	; 42
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	ce 01       	movw	r24, r28
    1886:	01 96       	adiw	r24, 0x01	; 1
    1888:	0e 94 56 08 	call	0x10ac	; 0x10ac <Endpoint_Write_Control_Stream_LE>
    188c:	13 c0       	rjmp	.+38     	; 0x18b4 <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    188e:	ae 01       	movw	r20, r28
    1890:	45 5d       	subi	r20, 0xD5	; 213
    1892:	5f 4f       	sbci	r21, 0xFF	; 255
    1894:	60 91 cb 01 	lds	r22, 0x01CB
    1898:	0e 94 88 07 	call	0xf10	; 0xf10 <CALLBACK_USB_GetDescriptor>
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	e9 f1       	breq	.+122    	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
    18a0:	20 91 e8 00 	lds	r18, 0x00E8
    18a4:	27 7f       	andi	r18, 0xF7	; 247
    18a6:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    18aa:	bc 01       	movw	r22, r24
    18ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    18ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b0:	0e 94 b2 08 	call	0x1164	; 0x1164 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    18b4:	80 91 e8 00 	lds	r24, 0x00E8
    18b8:	8b 77       	andi	r24, 0x7B	; 123
    18ba:	80 93 e8 00 	sts	0x00E8, r24
    18be:	2d c0       	rjmp	.+90     	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    18c0:	80 38       	cpi	r24, 0x80	; 128
    18c2:	59 f5       	brne	.+86     	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18c4:	80 91 e8 00 	lds	r24, 0x00E8
    18c8:	87 7f       	andi	r24, 0xF7	; 247
    18ca:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    18ce:	80 91 c2 01 	lds	r24, 0x01C2
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18d2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18d6:	80 91 e8 00 	lds	r24, 0x00E8
    18da:	8e 77       	andi	r24, 0x7E	; 126
    18dc:	71 cf       	rjmp	.-286    	; 0x17c0 <USB_Device_ProcessControlRequest+0x148>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    18de:	81 11       	cpse	r24, r1
    18e0:	1c c0       	rjmp	.+56     	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    18e2:	90 91 c9 01 	lds	r25, 0x01C9
    18e6:	92 30       	cpi	r25, 0x02	; 2
    18e8:	c0 f4       	brcc	.+48     	; 0x191a <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18ea:	80 91 e8 00 	lds	r24, 0x00E8
    18ee:	87 7f       	andi	r24, 0xF7	; 247
    18f0:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    18f4:	90 93 c2 01 	sts	0x01C2, r25

	Endpoint_ClearStatusStage();
    18f8:	0e 94 48 09 	call	0x1290	; 0x1290 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    18fc:	80 91 c2 01 	lds	r24, 0x01C2
    1900:	81 11       	cpse	r24, r1
    1902:	04 c0       	rjmp	.+8      	; 0x190c <USB_Device_ProcessControlRequest+0x294>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1904:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1908:	87 ff       	sbrs	r24, 7
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <USB_Device_ProcessControlRequest+0x298>
    190c:	84 e0       	ldi	r24, 0x04	; 4
    190e:	01 c0       	rjmp	.+2      	; 0x1912 <USB_Device_ProcessControlRequest+0x29a>
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	80 93 c6 01 	sts	0x01C6, r24

	EVENT_USB_Device_ConfigurationChanged();
    1916:	0e 94 7e 06 	call	0xcfc	; 0xcfc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    191a:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    191e:	83 ff       	sbrs	r24, 3
    1920:	0a c0       	rjmp	.+20     	; 0x1936 <USB_Device_ProcessControlRequest+0x2be>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1922:	80 91 e8 00 	lds	r24, 0x00E8
    1926:	87 7f       	andi	r24, 0xF7	; 247
    1928:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    192c:	80 91 eb 00 	lds	r24, 0x00EB
    1930:	80 62       	ori	r24, 0x20	; 32
    1932:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1936:	ac 96       	adiw	r28, 0x2c	; 44
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	08 95       	ret

0000194a <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    194a:	90 93 49 01 	sts	0x0149, r25
    194e:	80 93 48 01 	sts	0x0148, r24
    1952:	08 95       	ret

00001954 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1954:	e0 91 48 01 	lds	r30, 0x0148
    1958:	f0 91 49 01 	lds	r31, 0x0149
    195c:	30 97       	sbiw	r30, 0x00	; 0
    195e:	21 f0       	breq	.+8      	; 0x1968 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    1960:	01 90       	ld	r0, Z+
    1962:	f0 81       	ld	r31, Z
    1964:	e0 2d       	mov	r30, r0
    1966:	09 94       	ijmp
}
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	08 95       	ret

0000196c <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    196c:	cf 92       	push	r12
    196e:	df 92       	push	r13
    1970:	ef 92       	push	r14
    1972:	ff 92       	push	r15
    1974:	cf 93       	push	r28
    1976:	d8 2e       	mov	r13, r24
    1978:	c9 2f       	mov	r28, r25
    if (!driver) return;
    197a:	e0 91 48 01 	lds	r30, 0x0148
    197e:	f0 91 49 01 	lds	r31, 0x0149
    1982:	30 97       	sbiw	r30, 0x00	; 0
    1984:	c1 f1       	breq	.+112    	; 0x19f6 <host_keyboard_send+0x8a>
    (*driver->send_keyboard)(report);
    1986:	02 80       	ldd	r0, Z+2	; 0x02
    1988:	f3 81       	ldd	r31, Z+3	; 0x03
    198a:	e0 2d       	mov	r30, r0
    198c:	09 95       	icall

    if (debug_keyboard) {
    198e:	80 91 ba 01 	lds	r24, 0x01BA
    1992:	82 ff       	sbrs	r24, 2
    1994:	30 c0       	rjmp	.+96     	; 0x19f6 <host_keyboard_send+0x8a>
        dprint("keyboard_report: ");
    1996:	80 ff       	sbrs	r24, 0
    1998:	04 c0       	rjmp	.+8      	; 0x19a2 <host_keyboard_send+0x36>
    199a:	83 e0       	ldi	r24, 0x03	; 3
    199c:	93 e0       	ldi	r25, 0x03	; 3
    199e:	0e 94 10 02 	call	0x420	; 0x420 <xputs>
    19a2:	ed 2c       	mov	r14, r13
    19a4:	fc 2e       	mov	r15, r28
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    19a6:	c8 e0       	ldi	r28, 0x08	; 8
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    19a8:	85 e1       	ldi	r24, 0x15	; 21
    19aa:	c8 2e       	mov	r12, r24
    19ac:	83 e0       	ldi	r24, 0x03	; 3
    19ae:	d8 2e       	mov	r13, r24
    19b0:	80 91 ba 01 	lds	r24, 0x01BA
    19b4:	80 ff       	sbrs	r24, 0
    19b6:	0c c0       	rjmp	.+24     	; 0x19d0 <host_keyboard_send+0x64>
    19b8:	f7 01       	movw	r30, r14
    19ba:	80 81       	ld	r24, Z
    19bc:	1f 92       	push	r1
    19be:	8f 93       	push	r24
    19c0:	df 92       	push	r13
    19c2:	cf 92       	push	r12
    19c4:	0e 94 a9 02 	call	0x552	; 0x552 <__xprintf>
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	c1 50       	subi	r28, 0x01	; 1
    19d2:	ff ef       	ldi	r31, 0xFF	; 255
    19d4:	ef 1a       	sub	r14, r31
    19d6:	ff 0a       	sbc	r15, r31
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    19d8:	c1 11       	cpse	r28, r1
    19da:	ea cf       	rjmp	.-44     	; 0x19b0 <host_keyboard_send+0x44>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    19dc:	80 91 ba 01 	lds	r24, 0x01BA
    19e0:	80 ff       	sbrs	r24, 0
    19e2:	09 c0       	rjmp	.+18     	; 0x19f6 <host_keyboard_send+0x8a>
    19e4:	8b e1       	ldi	r24, 0x1B	; 27
    19e6:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    19e8:	cf 91       	pop	r28
    19ea:	ff 90       	pop	r15
    19ec:	ef 90       	pop	r14
    19ee:	df 90       	pop	r13
    19f0:	cf 90       	pop	r12
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    19f2:	0c 94 10 02 	jmp	0x420	; 0x420 <xputs>
    }
}
    19f6:	cf 91       	pop	r28
    19f8:	ff 90       	pop	r15
    19fa:	ef 90       	pop	r14
    19fc:	df 90       	pop	r13
    19fe:	cf 90       	pop	r12
    1a00:	08 95       	ret

00001a02 <host_system_send>:
    (*driver->send_mouse)(report);
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    1a02:	20 91 4a 01 	lds	r18, 0x014A
    1a06:	30 91 4b 01 	lds	r19, 0x014B
    1a0a:	82 17       	cp	r24, r18
    1a0c:	93 07       	cpc	r25, r19
    1a0e:	71 f0       	breq	.+28     	; 0x1a2c <host_system_send+0x2a>
    last_system_report = report;
    1a10:	90 93 4b 01 	sts	0x014B, r25
    1a14:	80 93 4a 01 	sts	0x014A, r24

    if (!driver) return;
    1a18:	e0 91 48 01 	lds	r30, 0x0148
    1a1c:	f0 91 49 01 	lds	r31, 0x0149
    1a20:	30 97       	sbiw	r30, 0x00	; 0
    1a22:	21 f0       	breq	.+8      	; 0x1a2c <host_system_send+0x2a>
    (*driver->send_system)(report);
    1a24:	06 80       	ldd	r0, Z+6	; 0x06
    1a26:	f7 81       	ldd	r31, Z+7	; 0x07
    1a28:	e0 2d       	mov	r30, r0
    1a2a:	09 94       	ijmp
    1a2c:	08 95       	ret

00001a2e <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    1a2e:	20 91 4c 01 	lds	r18, 0x014C
    1a32:	30 91 4d 01 	lds	r19, 0x014D
    1a36:	82 17       	cp	r24, r18
    1a38:	93 07       	cpc	r25, r19
    1a3a:	71 f0       	breq	.+28     	; 0x1a58 <host_consumer_send+0x2a>
    last_consumer_report = report;
    1a3c:	90 93 4d 01 	sts	0x014D, r25
    1a40:	80 93 4c 01 	sts	0x014C, r24

    if (!driver) return;
    1a44:	e0 91 48 01 	lds	r30, 0x0148
    1a48:	f0 91 49 01 	lds	r31, 0x0149
    1a4c:	30 97       	sbiw	r30, 0x00	; 0
    1a4e:	21 f0       	breq	.+8      	; 0x1a58 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    1a50:	00 84       	ldd	r0, Z+8	; 0x08
    1a52:	f1 85       	ldd	r31, Z+9	; 0x09
    1a54:	e0 2d       	mov	r30, r0
    1a56:	09 94       	ijmp
    1a58:	08 95       	ret

00001a5a <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    1a5a:	08 95       	ret

00001a5c <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    1a5c:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <matrix_setup>

00001a60 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    1a60:	0e 94 50 19 	call	0x32a0	; 0x32a0 <timer_init>
    matrix_init();
    1a64:	0c 94 35 03 	jmp	0x66a	; 0x66a <matrix_init>

00001a68 <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    1a68:	cf 93       	push	r28
    1a6a:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    1a6c:	80 91 ba 01 	lds	r24, 0x01BA
    1a70:	82 ff       	sbrs	r24, 2
    1a72:	1e c0       	rjmp	.+60     	; 0x1ab0 <keyboard_set_leds+0x48>
    1a74:	80 ff       	sbrs	r24, 0
    1a76:	04 c0       	rjmp	.+8      	; 0x1a80 <keyboard_set_leds+0x18>
    1a78:	8d e1       	ldi	r24, 0x1D	; 29
    1a7a:	93 e0       	ldi	r25, 0x03	; 3
    1a7c:	0e 94 10 02 	call	0x420	; 0x420 <xputs>
    1a80:	80 91 ba 01 	lds	r24, 0x01BA
    1a84:	80 ff       	sbrs	r24, 0
    1a86:	0c c0       	rjmp	.+24     	; 0x1aa0 <keyboard_set_leds+0x38>
    1a88:	1f 92       	push	r1
    1a8a:	cf 93       	push	r28
    1a8c:	20 e3       	ldi	r18, 0x30	; 48
    1a8e:	33 e0       	ldi	r19, 0x03	; 3
    1a90:	3f 93       	push	r19
    1a92:	2f 93       	push	r18
    1a94:	0e 94 a9 02 	call	0x552	; 0x552 <__xprintf>
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	80 91 ba 01 	lds	r24, 0x01BA
    1aa4:	80 ff       	sbrs	r24, 0
    1aa6:	04 c0       	rjmp	.+8      	; 0x1ab0 <keyboard_set_leds+0x48>
    1aa8:	85 e3       	ldi	r24, 0x35	; 53
    1aaa:	93 e0       	ldi	r25, 0x03	; 3
    1aac:	0e 94 10 02 	call	0x420	; 0x420 <xputs>
    led_set(leds);
    1ab0:	8c 2f       	mov	r24, r28
}
    1ab2:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    1ab4:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <led_set>

00001ab8 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    1ab8:	2f 92       	push	r2
    1aba:	3f 92       	push	r3
    1abc:	4f 92       	push	r4
    1abe:	5f 92       	push	r5
    1ac0:	6f 92       	push	r6
    1ac2:	7f 92       	push	r7
    1ac4:	8f 92       	push	r8
    1ac6:	9f 92       	push	r9
    1ac8:	af 92       	push	r10
    1aca:	bf 92       	push	r11
    1acc:	cf 92       	push	r12
    1ace:	df 92       	push	r13
    1ad0:	ef 92       	push	r14
    1ad2:	ff 92       	push	r15
    1ad4:	0f 93       	push	r16
    1ad6:	1f 93       	push	r17
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	2a 97       	sbiw	r28, 0x0a	; 10
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1aec:	0e 94 61 03 	call	0x6c2	; 0x6c2 <matrix_scan>
    1af0:	9e e4       	ldi	r25, 0x4E	; 78
    1af2:	49 2e       	mov	r4, r25
    1af4:	91 e0       	ldi	r25, 0x01	; 1
    1af6:	59 2e       	mov	r5, r25
    1af8:	2e e5       	ldi	r18, 0x5E	; 94
    1afa:	a2 2e       	mov	r10, r18
    1afc:	21 e0       	ldi	r18, 0x01	; 1
    1afe:	b2 2e       	mov	r11, r18
    1b00:	e1 2c       	mov	r14, r1
    1b02:	f1 2c       	mov	r15, r1
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1b04:	22 24       	eor	r2, r2
    1b06:	23 94       	inc	r2
    1b08:	31 2c       	mov	r3, r1
    1b0a:	0e 2d       	mov	r16, r14
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    1b0c:	8e 2d       	mov	r24, r14
    1b0e:	0e 94 a3 04 	call	0x946	; 0x946 <matrix_get_row>
    1b12:	6c 01       	movw	r12, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    1b14:	f2 01       	movw	r30, r4
    1b16:	81 90       	ld	r8, Z+
    1b18:	91 90       	ld	r9, Z+
    1b1a:	2f 01       	movw	r4, r30
    1b1c:	88 26       	eor	r8, r24
    1b1e:	99 26       	eor	r9, r25
        if (matrix_change) {
    1b20:	81 14       	cp	r8, r1
    1b22:	91 04       	cpc	r9, r1
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <keyboard_task+0x70>
    1b26:	5a c0       	rjmp	.+180    	; 0x1bdc <keyboard_task+0x124>


#ifdef MATRIX_HAS_GHOST
static bool has_ghost_in_row(uint8_t row)
{
    matrix_row_t matrix_row = matrix_get_row(row);
    1b28:	8e 2d       	mov	r24, r14
    1b2a:	0e 94 a3 04 	call	0x946	; 0x946 <matrix_get_row>
    1b2e:	3c 01       	movw	r6, r24
    // No ghost exists when less than 2 keys are down on the row
    if (((matrix_row - 1) & matrix_row) == 0)
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	86 21       	and	r24, r6
    1b34:	97 21       	and	r25, r7
    1b36:	89 2b       	or	r24, r25
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <keyboard_task+0x84>
    1b3a:	8f c0       	rjmp	.+286    	; 0x1c5a <keyboard_task+0x1a2>
    1b3c:	10 e0       	ldi	r17, 0x00	; 0
        return false;

    // Ghost occurs when the row shares column line with other row
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        if (i != row && (matrix_get_row(i) & matrix_row))
    1b3e:	10 13       	cpse	r17, r16
    1b40:	04 c0       	rjmp	.+8      	; 0x1b4a <keyboard_task+0x92>
    // No ghost exists when less than 2 keys are down on the row
    if (((matrix_row - 1) & matrix_row) == 0)
        return false;

    // Ghost occurs when the row shares column line with other row
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    1b42:	1f 5f       	subi	r17, 0xFF	; 255
    1b44:	18 30       	cpi	r17, 0x08	; 8
    1b46:	d9 f7       	brne	.-10     	; 0x1b3e <keyboard_task+0x86>
    1b48:	88 c0       	rjmp	.+272    	; 0x1c5a <keyboard_task+0x1a2>
        if (i != row && (matrix_get_row(i) & matrix_row))
    1b4a:	81 2f       	mov	r24, r17
    1b4c:	0e 94 a3 04 	call	0x946	; 0x946 <matrix_get_row>
    1b50:	86 21       	and	r24, r6
    1b52:	97 21       	and	r25, r7
    1b54:	89 2b       	or	r24, r25
    1b56:	a9 f3       	breq	.-22     	; 0x1b42 <keyboard_task+0x8a>
    1b58:	88 c0       	rjmp	.+272    	; 0x1c6a <keyboard_task+0x1b2>
            if (has_ghost_in_row(r)) {
                /* Keep track of whether ghosted status has changed for
                 * debugging. But don't update matrix_prev until un-ghosted, or
                 * the last key would be lost.
                 */
                if (debug_matrix && matrix_ghost[r] != matrix_row) {
    1b5a:	f5 01       	movw	r30, r10
    1b5c:	80 81       	ld	r24, Z
    1b5e:	91 81       	ldd	r25, Z+1	; 0x01
    1b60:	8c 15       	cp	r24, r12
    1b62:	9d 05       	cpc	r25, r13
    1b64:	11 f0       	breq	.+4      	; 0x1b6a <keyboard_task+0xb2>
                    matrix_print();
    1b66:	0e 94 ac 04 	call	0x958	; 0x958 <matrix_print>
                }
                matrix_ghost[r] = matrix_row;
    1b6a:	f5 01       	movw	r30, r10
    1b6c:	d1 82       	std	Z+1, r13	; 0x01
    1b6e:	c0 82       	st	Z, r12
                continue;
    1b70:	35 c0       	rjmp	.+106    	; 0x1bdc <keyboard_task+0x124>
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    1b72:	0e 94 ac 04 	call	0x958	; 0x958 <matrix_print>
#ifdef MATRIX_HAS_GHOST
static bool has_ghost_in_row(uint8_t row)
{
    matrix_row_t matrix_row = matrix_get_row(row);
    // No ghost exists when less than 2 keys are down on the row
    if (((matrix_row - 1) & matrix_row) == 0)
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1b7a:	31 01       	movw	r6, r2
    1b7c:	08 2e       	mov	r0, r24
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <keyboard_task+0xcc>
    1b80:	66 0c       	add	r6, r6
    1b82:	77 1c       	adc	r7, r7
    1b84:	0a 94       	dec	r0
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <keyboard_task+0xc8>
    1b88:	93 01       	movw	r18, r6
    1b8a:	28 21       	and	r18, r8
    1b8c:	39 21       	and	r19, r9
    1b8e:	23 2b       	or	r18, r19
    1b90:	09 f1       	breq	.+66     	; 0x1bd4 <keyboard_task+0x11c>
                    action_exec((keyevent_t){
    1b92:	8e 83       	std	Y+6, r24	; 0x06
    1b94:	0f 83       	std	Y+7, r16	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    1b96:	c6 20       	and	r12, r6
    1b98:	d7 20       	and	r13, r7
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	cd 28       	or	r12, r13
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <keyboard_task+0xea>
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    1ba2:	88 87       	std	Y+8, r24	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    1ba4:	0e 94 59 19 	call	0x32b2	; 0x32b2 <timer_read>
    1ba8:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    1baa:	78 2f       	mov	r23, r24
    1bac:	9a 87       	std	Y+10, r25	; 0x0a
    1bae:	89 87       	std	Y+9, r24	; 0x09
    1bb0:	4e 81       	ldd	r20, Y+6	; 0x06
    1bb2:	5f 81       	ldd	r21, Y+7	; 0x07
    1bb4:	68 85       	ldd	r22, Y+8	; 0x08
    1bb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bb8:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    1bbc:	f7 01       	movw	r30, r14
    1bbe:	ee 0f       	add	r30, r30
    1bc0:	ff 1f       	adc	r31, r31
    1bc2:	e2 5b       	subi	r30, 0xB2	; 178
    1bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc6:	80 81       	ld	r24, Z
    1bc8:	91 81       	ldd	r25, Z+1	; 0x01
    1bca:	86 25       	eor	r24, r6
    1bcc:	97 25       	eor	r25, r7
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    1bd2:	1f c0       	rjmp	.+62     	; 0x1c12 <keyboard_task+0x15a>
    1bd4:	01 96       	adiw	r24, 0x01	; 1
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    1bd6:	80 31       	cpi	r24, 0x10	; 16
    1bd8:	91 05       	cpc	r25, r1
    1bda:	79 f6       	brne	.-98     	; 0x1b7a <keyboard_task+0xc2>
    1bdc:	ff ef       	ldi	r31, 0xFF	; 255
    1bde:	ef 1a       	sub	r14, r31
    1be0:	ff 0a       	sbc	r15, r31
    1be2:	82 e0       	ldi	r24, 0x02	; 2
    1be4:	a8 0e       	add	r10, r24
    1be6:	b1 1c       	adc	r11, r1
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    1be8:	e8 e0       	ldi	r30, 0x08	; 8
    1bea:	ee 16       	cp	r14, r30
    1bec:	f1 04       	cpc	r15, r1
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <keyboard_task+0x13a>
    1bf0:	8c cf       	rjmp	.-232    	; 0x1b0a <keyboard_task+0x52>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    1bf2:	8f ef       	ldi	r24, 0xFF	; 255
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	8a 83       	std	Y+2, r24	; 0x02
    1bf8:	1b 82       	std	Y+3, r1	; 0x03
    1bfa:	0e 94 59 19 	call	0x32b2	; 0x32b2 <timer_read>
    1bfe:	81 60       	ori	r24, 0x01	; 1
    1c00:	78 2f       	mov	r23, r24
    1c02:	9d 83       	std	Y+5, r25	; 0x05
    1c04:	8c 83       	std	Y+4, r24	; 0x04
    1c06:	49 81       	ldd	r20, Y+1	; 0x01
    1c08:	5a 81       	ldd	r21, Y+2	; 0x02
    1c0a:	6b 81       	ldd	r22, Y+3	; 0x03
    1c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0e:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <action_exec>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    1c12:	10 91 6e 01 	lds	r17, 0x016E
    1c16:	0e 94 aa 0c 	call	0x1954	; 0x1954 <host_keyboard_leds>
    1c1a:	18 17       	cp	r17, r24
    1c1c:	59 f1       	breq	.+86     	; 0x1c74 <keyboard_task+0x1bc>
        led_status = host_keyboard_leds();
    1c1e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <host_keyboard_leds>
    1c22:	80 93 6e 01 	sts	0x016E, r24
        keyboard_set_leds(led_status);
    }
}
    1c26:	2a 96       	adiw	r28, 0x0a	; 10
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	ef 90       	pop	r14
    1c3e:	df 90       	pop	r13
    1c40:	cf 90       	pop	r12
    1c42:	bf 90       	pop	r11
    1c44:	af 90       	pop	r10
    1c46:	9f 90       	pop	r9
    1c48:	8f 90       	pop	r8
    1c4a:	7f 90       	pop	r7
    1c4c:	6f 90       	pop	r6
    1c4e:	5f 90       	pop	r5
    1c50:	4f 90       	pop	r4
    1c52:	3f 90       	pop	r3
    1c54:	2f 90       	pop	r2
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    1c56:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <keyboard_set_leds>
                    matrix_print();
                }
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
    1c5a:	f5 01       	movw	r30, r10
    1c5c:	d1 82       	std	Z+1, r13	; 0x01
    1c5e:	c0 82       	st	Z, r12
#endif
            if (debug_matrix) matrix_print();
    1c60:	80 91 ba 01 	lds	r24, 0x01BA
    1c64:	81 ff       	sbrs	r24, 1
    1c66:	87 cf       	rjmp	.-242    	; 0x1b76 <keyboard_task+0xbe>
    1c68:	84 cf       	rjmp	.-248    	; 0x1b72 <keyboard_task+0xba>
            if (has_ghost_in_row(r)) {
                /* Keep track of whether ghosted status has changed for
                 * debugging. But don't update matrix_prev until un-ghosted, or
                 * the last key would be lost.
                 */
                if (debug_matrix && matrix_ghost[r] != matrix_row) {
    1c6a:	80 91 ba 01 	lds	r24, 0x01BA
    1c6e:	81 fd       	sbrc	r24, 1
    1c70:	74 cf       	rjmp	.-280    	; 0x1b5a <keyboard_task+0xa2>
    1c72:	7b cf       	rjmp	.-266    	; 0x1b6a <keyboard_task+0xb2>
    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    }
}
    1c74:	2a 96       	adiw	r28, 0x0a	; 10
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	1f 91       	pop	r17
    1c86:	0f 91       	pop	r16
    1c88:	ff 90       	pop	r15
    1c8a:	ef 90       	pop	r14
    1c8c:	df 90       	pop	r13
    1c8e:	cf 90       	pop	r12
    1c90:	bf 90       	pop	r11
    1c92:	af 90       	pop	r10
    1c94:	9f 90       	pop	r9
    1c96:	8f 90       	pop	r8
    1c98:	7f 90       	pop	r7
    1c9a:	6f 90       	pop	r6
    1c9c:	5f 90       	pop	r5
    1c9e:	4f 90       	pop	r4
    1ca0:	3f 90       	pop	r3
    1ca2:	2f 90       	pop	r2
    1ca4:	08 95       	ret

00001ca6 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	2b 97       	sbiw	r28, 0x0b	; 11
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	de bf       	out	0x3e, r29	; 62
    1cb6:	0f be       	out	0x3f, r0	; 63
    1cb8:	cd bf       	out	0x3d, r28	; 61
    1cba:	4f 83       	std	Y+7, r20	; 0x07
    1cbc:	58 87       	std	Y+8, r21	; 0x08
    1cbe:	69 87       	std	Y+9, r22	; 0x09
    1cc0:	7a 87       	std	Y+10, r23	; 0x0a
    1cc2:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    1cc4:	de 01       	movw	r26, r28
    1cc6:	11 96       	adiw	r26, 0x01	; 1
    1cc8:	86 e0       	ldi	r24, 0x06	; 6
    1cca:	fd 01       	movw	r30, r26
    1ccc:	11 92       	st	Z+, r1
    1cce:	8a 95       	dec	r24
    1cd0:	e9 f7       	brne	.-6      	; 0x1ccc <action_exec+0x26>
    1cd2:	85 e0       	ldi	r24, 0x05	; 5
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	37 96       	adiw	r30, 0x07	; 7
    1cd8:	01 90       	ld	r0, Z+
    1cda:	0d 92       	st	X+, r0
    1cdc:	8a 95       	dec	r24
    1cde:	e1 f7       	brne	.-8      	; 0x1cd8 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    1ce0:	49 81       	ldd	r20, Y+1	; 0x01
    1ce2:	5a 81       	ldd	r21, Y+2	; 0x02
    1ce4:	6b 81       	ldd	r22, Y+3	; 0x03
    1ce6:	7c 81       	ldd	r23, Y+4	; 0x04
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	9e 81       	ldd	r25, Y+6	; 0x06
    1cec:	0e 94 e7 14 	call	0x29ce	; 0x29ce <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    1cf0:	2b 96       	adiw	r28, 0x0b	; 11
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	08 95       	ret

00001d02 <register_code>:
/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    if (code == KC_NO) {
    1d02:	88 23       	and	r24, r24
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <register_code+0x6>
    1d06:	91 c0       	rjmp	.+290    	; 0x1e2a <register_code+0x128>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    1d08:	98 2f       	mov	r25, r24
    1d0a:	94 50       	subi	r25, 0x04	; 4
    1d0c:	91 3a       	cpi	r25, 0xA1	; 161
    1d0e:	18 f4       	brcc	.+6      	; 0x1d16 <register_code+0x14>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    1d10:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <add_key>
    1d14:	0e c0       	rjmp	.+28     	; 0x1d32 <register_code+0x30>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    1d16:	98 2f       	mov	r25, r24
    1d18:	90 5e       	subi	r25, 0xE0	; 224
    1d1a:	98 30       	cpi	r25, 0x08	; 8
    1d1c:	60 f4       	brcc	.+24     	; 0x1d36 <register_code+0x34>
        add_mods(MOD_BIT(code));
    1d1e:	28 2f       	mov	r18, r24
    1d20:	27 70       	andi	r18, 0x07	; 7
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	01 c0       	rjmp	.+2      	; 0x1d2a <register_code+0x28>
    1d28:	88 0f       	add	r24, r24
    1d2a:	2a 95       	dec	r18
    1d2c:	ea f7       	brpl	.-6      	; 0x1d28 <register_code+0x26>
    1d2e:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <add_mods>
        send_keyboard_report();
    1d32:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    1d36:	98 2f       	mov	r25, r24
    1d38:	95 5a       	subi	r25, 0xA5	; 165
    1d3a:	93 30       	cpi	r25, 0x03	; 3
    1d3c:	70 f4       	brcc	.+28     	; 0x1d5a <register_code+0x58>
        host_system_send(KEYCODE2SYSTEM(code));
    1d3e:	85 3a       	cpi	r24, 0xA5	; 165
    1d40:	29 f0       	breq	.+10     	; 0x1d4c <register_code+0x4a>
    1d42:	86 3a       	cpi	r24, 0xA6	; 166
    1d44:	31 f4       	brne	.+12     	; 0x1d52 <register_code+0x50>
    1d46:	82 e8       	ldi	r24, 0x82	; 130
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	05 c0       	rjmp	.+10     	; 0x1d56 <register_code+0x54>
    1d4c:	81 e8       	ldi	r24, 0x81	; 129
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <register_code+0x54>
    1d52:	83 e8       	ldi	r24, 0x83	; 131
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    1d5a:	98 2f       	mov	r25, r24
    1d5c:	98 5a       	subi	r25, 0xA8	; 168
    1d5e:	93 31       	cpi	r25, 0x13	; 19
    1d60:	08 f0       	brcs	.+2      	; 0x1d64 <register_code+0x62>
    1d62:	63 c0       	rjmp	.+198    	; 0x1e2a <register_code+0x128>
        host_consumer_send(KEYCODE2CONSUMER(code));
    1d64:	88 3a       	cpi	r24, 0xA8	; 168
    1d66:	39 f1       	breq	.+78     	; 0x1db6 <register_code+0xb4>
    1d68:	89 3a       	cpi	r24, 0xA9	; 169
    1d6a:	41 f1       	breq	.+80     	; 0x1dbc <register_code+0xba>
    1d6c:	8a 3a       	cpi	r24, 0xAA	; 170
    1d6e:	49 f1       	breq	.+82     	; 0x1dc2 <register_code+0xc0>
    1d70:	8b 3a       	cpi	r24, 0xAB	; 171
    1d72:	51 f1       	breq	.+84     	; 0x1dc8 <register_code+0xc6>
    1d74:	8c 3a       	cpi	r24, 0xAC	; 172
    1d76:	59 f1       	breq	.+86     	; 0x1dce <register_code+0xcc>
    1d78:	8d 3a       	cpi	r24, 0xAD	; 173
    1d7a:	61 f1       	breq	.+88     	; 0x1dd4 <register_code+0xd2>
    1d7c:	80 3b       	cpi	r24, 0xB0	; 176
    1d7e:	69 f1       	breq	.+90     	; 0x1dda <register_code+0xd8>
    1d80:	8e 3a       	cpi	r24, 0xAE	; 174
    1d82:	71 f1       	breq	.+92     	; 0x1de0 <register_code+0xde>
    1d84:	8f 3a       	cpi	r24, 0xAF	; 175
    1d86:	79 f1       	breq	.+94     	; 0x1de6 <register_code+0xe4>
    1d88:	81 3b       	cpi	r24, 0xB1	; 177
    1d8a:	81 f1       	breq	.+96     	; 0x1dec <register_code+0xea>
    1d8c:	82 3b       	cpi	r24, 0xB2	; 178
    1d8e:	89 f1       	breq	.+98     	; 0x1df2 <register_code+0xf0>
    1d90:	83 3b       	cpi	r24, 0xB3	; 179
    1d92:	91 f1       	breq	.+100    	; 0x1df8 <register_code+0xf6>
    1d94:	84 3b       	cpi	r24, 0xB4	; 180
    1d96:	99 f1       	breq	.+102    	; 0x1dfe <register_code+0xfc>
    1d98:	85 3b       	cpi	r24, 0xB5	; 181
    1d9a:	a1 f1       	breq	.+104    	; 0x1e04 <register_code+0x102>
    1d9c:	86 3b       	cpi	r24, 0xB6	; 182
    1d9e:	a9 f1       	breq	.+106    	; 0x1e0a <register_code+0x108>
    1da0:	87 3b       	cpi	r24, 0xB7	; 183
    1da2:	b1 f1       	breq	.+108    	; 0x1e10 <register_code+0x10e>
    1da4:	88 3b       	cpi	r24, 0xB8	; 184
    1da6:	b9 f1       	breq	.+110    	; 0x1e16 <register_code+0x114>
    1da8:	89 3b       	cpi	r24, 0xB9	; 185
    1daa:	c1 f1       	breq	.+112    	; 0x1e1c <register_code+0x11a>
    1dac:	8a 3b       	cpi	r24, 0xBA	; 186
    1dae:	c9 f5       	brne	.+114    	; 0x1e22 <register_code+0x120>
    1db0:	8a e2       	ldi	r24, 0x2A	; 42
    1db2:	92 e0       	ldi	r25, 0x02	; 2
    1db4:	38 c0       	rjmp	.+112    	; 0x1e26 <register_code+0x124>
    1db6:	82 ee       	ldi	r24, 0xE2	; 226
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	35 c0       	rjmp	.+106    	; 0x1e26 <register_code+0x124>
    1dbc:	89 ee       	ldi	r24, 0xE9	; 233
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	32 c0       	rjmp	.+100    	; 0x1e26 <register_code+0x124>
    1dc2:	8a ee       	ldi	r24, 0xEA	; 234
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	2f c0       	rjmp	.+94     	; 0x1e26 <register_code+0x124>
    1dc8:	85 eb       	ldi	r24, 0xB5	; 181
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	2c c0       	rjmp	.+88     	; 0x1e26 <register_code+0x124>
    1dce:	86 eb       	ldi	r24, 0xB6	; 182
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	29 c0       	rjmp	.+82     	; 0x1e26 <register_code+0x124>
    1dd4:	87 eb       	ldi	r24, 0xB7	; 183
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	26 c0       	rjmp	.+76     	; 0x1e26 <register_code+0x124>
    1dda:	8c ec       	ldi	r24, 0xCC	; 204
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	23 c0       	rjmp	.+70     	; 0x1e26 <register_code+0x124>
    1de0:	8d ec       	ldi	r24, 0xCD	; 205
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	20 c0       	rjmp	.+64     	; 0x1e26 <register_code+0x124>
    1de6:	83 e8       	ldi	r24, 0x83	; 131
    1de8:	91 e0       	ldi	r25, 0x01	; 1
    1dea:	1d c0       	rjmp	.+58     	; 0x1e26 <register_code+0x124>
    1dec:	8a e8       	ldi	r24, 0x8A	; 138
    1dee:	91 e0       	ldi	r25, 0x01	; 1
    1df0:	1a c0       	rjmp	.+52     	; 0x1e26 <register_code+0x124>
    1df2:	82 e9       	ldi	r24, 0x92	; 146
    1df4:	91 e0       	ldi	r25, 0x01	; 1
    1df6:	17 c0       	rjmp	.+46     	; 0x1e26 <register_code+0x124>
    1df8:	84 e9       	ldi	r24, 0x94	; 148
    1dfa:	91 e0       	ldi	r25, 0x01	; 1
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <register_code+0x124>
    1dfe:	81 e2       	ldi	r24, 0x21	; 33
    1e00:	92 e0       	ldi	r25, 0x02	; 2
    1e02:	11 c0       	rjmp	.+34     	; 0x1e26 <register_code+0x124>
    1e04:	83 e2       	ldi	r24, 0x23	; 35
    1e06:	92 e0       	ldi	r25, 0x02	; 2
    1e08:	0e c0       	rjmp	.+28     	; 0x1e26 <register_code+0x124>
    1e0a:	84 e2       	ldi	r24, 0x24	; 36
    1e0c:	92 e0       	ldi	r25, 0x02	; 2
    1e0e:	0b c0       	rjmp	.+22     	; 0x1e26 <register_code+0x124>
    1e10:	85 e2       	ldi	r24, 0x25	; 37
    1e12:	92 e0       	ldi	r25, 0x02	; 2
    1e14:	08 c0       	rjmp	.+16     	; 0x1e26 <register_code+0x124>
    1e16:	86 e2       	ldi	r24, 0x26	; 38
    1e18:	92 e0       	ldi	r25, 0x02	; 2
    1e1a:	05 c0       	rjmp	.+10     	; 0x1e26 <register_code+0x124>
    1e1c:	87 e2       	ldi	r24, 0x27	; 39
    1e1e:	92 e0       	ldi	r25, 0x02	; 2
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <register_code+0x124>
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <host_consumer_send>
    1e2a:	08 95       	ret

00001e2c <unregister_code>:
    }
}

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    1e2c:	88 23       	and	r24, r24
    1e2e:	31 f1       	breq	.+76     	; 0x1e7c <unregister_code+0x50>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    1e30:	98 2f       	mov	r25, r24
    1e32:	94 50       	subi	r25, 0x04	; 4
    1e34:	91 3a       	cpi	r25, 0xA1	; 161
    1e36:	18 f4       	brcc	.+6      	; 0x1e3e <unregister_code+0x12>
        del_key(code);
    1e38:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <del_key>
    1e3c:	0e c0       	rjmp	.+28     	; 0x1e5a <unregister_code+0x2e>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    1e3e:	98 2f       	mov	r25, r24
    1e40:	90 5e       	subi	r25, 0xE0	; 224
    1e42:	98 30       	cpi	r25, 0x08	; 8
    1e44:	60 f4       	brcc	.+24     	; 0x1e5e <unregister_code+0x32>
        del_mods(MOD_BIT(code));
    1e46:	28 2f       	mov	r18, r24
    1e48:	27 70       	andi	r18, 0x07	; 7
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	01 c0       	rjmp	.+2      	; 0x1e52 <unregister_code+0x26>
    1e50:	88 0f       	add	r24, r24
    1e52:	2a 95       	dec	r18
    1e54:	ea f7       	brpl	.-6      	; 0x1e50 <unregister_code+0x24>
    1e56:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <del_mods>
        send_keyboard_report();
    1e5a:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    1e5e:	98 2f       	mov	r25, r24
    1e60:	95 5a       	subi	r25, 0xA5	; 165
    1e62:	93 30       	cpi	r25, 0x03	; 3
    1e64:	20 f4       	brcc	.+8      	; 0x1e6e <unregister_code+0x42>
        host_system_send(0);
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    1e6e:	88 5a       	subi	r24, 0xA8	; 168
    1e70:	83 31       	cpi	r24, 0x13	; 19
    1e72:	20 f4       	brcc	.+8      	; 0x1e7c <unregister_code+0x50>
        host_consumer_send(0);
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <host_consumer_send>
    1e7c:	08 95       	ret

00001e7e <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    1e7e:	88 23       	and	r24, r24
    1e80:	21 f0       	breq	.+8      	; 0x1e8a <register_mods+0xc>
        add_mods(mods);
    1e82:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <add_mods>
        send_keyboard_report();
    1e86:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <send_keyboard_report>
    1e8a:	08 95       	ret

00001e8c <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    1e8c:	88 23       	and	r24, r24
    1e8e:	21 f0       	breq	.+8      	; 0x1e98 <unregister_mods+0xc>
        del_mods(mods);
    1e90:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <del_mods>
        send_keyboard_report();
    1e94:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <send_keyboard_report>
    1e98:	08 95       	ret

00001e9a <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    1e9a:	8f 92       	push	r8
    1e9c:	9f 92       	push	r9
    1e9e:	af 92       	push	r10
    1ea0:	bf 92       	push	r11
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <process_action+0x12>
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <process_action+0x14>
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <process_action+0x16>
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	5c 01       	movw	r10, r24
    keyevent_t event = record->event;
    1eb6:	85 e0       	ldi	r24, 0x05	; 5
    1eb8:	f5 01       	movw	r30, r10
    1eba:	de 01       	movw	r26, r28
    1ebc:	11 96       	adiw	r26, 0x01	; 1
    1ebe:	01 90       	ld	r0, Z+
    1ec0:	0d 92       	st	X+, r0
    1ec2:	8a 95       	dec	r24
    1ec4:	e1 f7       	brne	.-8      	; 0x1ebe <process_action+0x24>
    1ec6:	f5 01       	movw	r30, r10
    1ec8:	30 81       	ld	r19, Z
    1eca:	21 81       	ldd	r18, Z+1	; 0x01
    1ecc:	92 80       	ldd	r9, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    1ece:	15 81       	ldd	r17, Z+5	; 0x05
    1ed0:	12 95       	swap	r17
    1ed2:	1f 70       	andi	r17, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    1ed4:	83 81       	ldd	r24, Z+3	; 0x03
    1ed6:	94 81       	ldd	r25, Z+4	; 0x04
    1ed8:	89 2b       	or	r24, r25
    1eda:	39 f0       	breq	.+14     	; 0x1eea <process_action+0x50>
    1edc:	2f 3f       	cpi	r18, 0xFF	; 255
    1ede:	41 f4       	brne	.+16     	; 0x1ef0 <process_action+0x56>
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	3f 3f       	cpi	r19, 0xFF	; 255
    1ee6:	31 f0       	breq	.+12     	; 0x1ef4 <process_action+0x5a>
    1ee8:	03 c0       	rjmp	.+6      	; 0x1ef0 <process_action+0x56>
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <process_action+0x5a>
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    1ef4:	80 fd       	sbrc	r24, 0
    1ef6:	94 c2       	rjmp	.+1320   	; 0x2420 <__stack+0x321>

    action_t action = layer_switch_get_action(event.key);
    1ef8:	39 83       	std	Y+1, r19	; 0x01
    1efa:	2a 83       	std	Y+2, r18	; 0x02
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	9a 81       	ldd	r25, Y+2	; 0x02
    1f00:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <layer_switch_get_action>
    1f04:	09 2f       	mov	r16, r25
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    1f06:	8e 83       	std	Y+6, r24	; 0x06
    1f08:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    1f0c:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    1f10:	20 2f       	mov	r18, r16
    1f12:	22 95       	swap	r18
    1f14:	2f 70       	andi	r18, 0x0F	; 15
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	6e 81       	ldd	r22, Y+6	; 0x06
    1f1a:	28 30       	cpi	r18, 0x08	; 8
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <process_action+0x88>
    1f20:	a2 c0       	rjmp	.+324    	; 0x2066 <process_action+0x1cc>
    1f22:	44 f4       	brge	.+16     	; 0x1f34 <process_action+0x9a>
    1f24:	22 30       	cpi	r18, 0x02	; 2
    1f26:	31 05       	cpc	r19, r1
    1f28:	a4 f0       	brlt	.+40     	; 0x1f52 <process_action+0xb8>
    1f2a:	24 30       	cpi	r18, 0x04	; 4
    1f2c:	31 05       	cpc	r19, r1
    1f2e:	0c f0       	brlt	.+2      	; 0x1f32 <process_action+0x98>
    1f30:	77 c2       	rjmp	.+1262   	; 0x2420 <__stack+0x321>
    1f32:	3d c0       	rjmp	.+122    	; 0x1fae <process_action+0x114>
    1f34:	2c 30       	cpi	r18, 0x0C	; 12
    1f36:	31 05       	cpc	r19, r1
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <process_action+0xa2>
    1f3a:	4a c2       	rjmp	.+1172   	; 0x23d0 <__stack+0x2d1>
    1f3c:	2c f4       	brge	.+10     	; 0x1f48 <process_action+0xae>
    1f3e:	2a 30       	cpi	r18, 0x0A	; 10
    1f40:	31 05       	cpc	r19, r1
    1f42:	0c f4       	brge	.+2      	; 0x1f46 <process_action+0xac>
    1f44:	6d c2       	rjmp	.+1242   	; 0x2420 <__stack+0x321>
    1f46:	86 c1       	rjmp	.+780    	; 0x2254 <__stack+0x155>
    1f48:	2f 30       	cpi	r18, 0x0F	; 15
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <process_action+0xb6>
    1f4e:	68 c2       	rjmp	.+1232   	; 0x2420 <__stack+0x321>
    1f50:	54 c2       	rjmp	.+1192   	; 0x23fa <__stack+0x2fb>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    1f52:	80 2f       	mov	r24, r16
    1f54:	80 7f       	andi	r24, 0xF0	; 240
    1f56:	10 2f       	mov	r17, r16
    1f58:	1f 70       	andi	r17, 0x0F	; 15
    1f5a:	88 23       	and	r24, r24
    1f5c:	11 f0       	breq	.+4      	; 0x1f62 <process_action+0xc8>
    1f5e:	12 95       	swap	r17
    1f60:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    1f62:	99 20       	and	r9, r9
    1f64:	59 f0       	breq	.+22     	; 0x1f7c <process_action+0xe2>
                    if (mods) {
    1f66:	11 23       	and	r17, r17
    1f68:	09 f4       	brne	.+2      	; 0x1f6c <process_action+0xd2>
    1f6a:	0d c2       	rjmp	.+1050   	; 0x2386 <__stack+0x287>
                        add_weak_mods(mods);
    1f6c:	81 2f       	mov	r24, r17
    1f6e:	6e 83       	std	Y+6, r22	; 0x06
    1f70:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <add_weak_mods>
                        send_keyboard_report();
    1f74:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <send_keyboard_report>
    1f78:	6e 81       	ldd	r22, Y+6	; 0x06
    1f7a:	05 c2       	rjmp	.+1034   	; 0x2386 <__stack+0x287>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    1f7c:	86 2f       	mov	r24, r22
    1f7e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <unregister_code>
                    if (mods) {
    1f82:	11 23       	and	r17, r17
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <process_action+0xee>
    1f86:	4c c2       	rjmp	.+1176   	; 0x2420 <__stack+0x321>
                        del_weak_mods(mods);
    1f88:	81 2f       	mov	r24, r17
    1f8a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    1f8e:	26 96       	adiw	r28, 0x06	; 6
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	bf 90       	pop	r11
    1fa4:	af 90       	pop	r10
    1fa6:	9f 90       	pop	r9
    1fa8:	8f 90       	pop	r8
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    1faa:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    1fae:	80 2f       	mov	r24, r16
    1fb0:	80 7f       	andi	r24, 0xF0	; 240
    1fb2:	0f 70       	andi	r16, 0x0F	; 15
    1fb4:	80 32       	cpi	r24, 0x20	; 32
    1fb6:	11 f0       	breq	.+4      	; 0x1fbc <process_action+0x122>
    1fb8:	02 95       	swap	r16
    1fba:	00 7f       	andi	r16, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    1fbc:	66 23       	and	r22, r22
    1fbe:	21 f0       	breq	.+8      	; 0x1fc8 <process_action+0x12e>
    1fc0:	61 30       	cpi	r22, 0x01	; 1
    1fc2:	09 f0       	breq	.+2      	; 0x1fc6 <process_action+0x12c>
    1fc4:	41 c0       	rjmp	.+130    	; 0x2048 <process_action+0x1ae>
    1fc6:	21 c0       	rjmp	.+66     	; 0x200a <process_action+0x170>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    1fc8:	99 20       	and	r9, r9
    1fca:	b1 f0       	breq	.+44     	; 0x1ff8 <process_action+0x15e>
                            if (tap_count == 0) {
                                register_mods(mods);
    1fcc:	80 2f       	mov	r24, r16
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    1fce:	11 11       	cpse	r17, r1
    1fd0:	01 c0       	rjmp	.+2      	; 0x1fd4 <process_action+0x13a>
    1fd2:	26 c0       	rjmp	.+76     	; 0x2020 <process_action+0x186>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    1fd4:	11 30       	cpi	r17, 0x01	; 1
    1fd6:	21 f5       	brne	.+72     	; 0x2020 <process_action+0x186>
            break;
#endif
        default:
            break;
    }
}
    1fd8:	26 96       	adiw	r28, 0x06	; 6
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	df 91       	pop	r29
    1fe6:	cf 91       	pop	r28
    1fe8:	1f 91       	pop	r17
    1fea:	0f 91       	pop	r16
    1fec:	bf 90       	pop	r11
    1fee:	af 90       	pop	r10
    1ff0:	9f 90       	pop	r9
    1ff2:	8f 90       	pop	r8
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    1ff4:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    1ff8:	11 11       	cpse	r17, r1
    1ffa:	01 c0       	rjmp	.+2      	; 0x1ffe <process_action+0x164>
    1ffc:	03 c0       	rjmp	.+6      	; 0x2004 <process_action+0x16a>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    1ffe:	11 30       	cpi	r17, 0x01	; 1
    2000:	09 f4       	brne	.+2      	; 0x2004 <process_action+0x16a>
    2002:	0e c2       	rjmp	.+1052   	; 0x2420 <__stack+0x321>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2004:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <clear_oneshot_mods>
    2008:	2c c0       	rjmp	.+88     	; 0x2062 <process_action+0x1c8>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    200a:	99 20       	and	r9, r9
    200c:	c9 f0       	breq	.+50     	; 0x2040 <process_action+0x1a6>
                            if (tap_count <= TAPPING_TOGGLE) {
    200e:	16 30       	cpi	r17, 0x06	; 6
    2010:	08 f0       	brcs	.+2      	; 0x2014 <process_action+0x17a>
    2012:	06 c2       	rjmp	.+1036   	; 0x2420 <__stack+0x321>
                                if (mods & get_mods()) {
    2014:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <get_mods>
    2018:	80 23       	and	r24, r16
    201a:	09 f0       	breq	.+2      	; 0x201e <process_action+0x184>
    201c:	22 c0       	rjmp	.+68     	; 0x2062 <process_action+0x1c8>
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    201e:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2020:	26 96       	adiw	r28, 0x06	; 6
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	bf 90       	pop	r11
    2036:	af 90       	pop	r10
    2038:	9f 90       	pop	r9
    203a:	8f 90       	pop	r8
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    203c:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2040:	15 30       	cpi	r17, 0x05	; 5
    2042:	08 f0       	brcs	.+2      	; 0x2046 <process_action+0x1ac>
    2044:	ed c1       	rjmp	.+986    	; 0x2420 <__stack+0x321>
    2046:	0d c0       	rjmp	.+26     	; 0x2062 <process_action+0x1c8>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2048:	99 20       	and	r9, r9
    204a:	49 f0       	breq	.+18     	; 0x205e <process_action+0x1c4>
                            if (tap_count > 0) {
    204c:	11 23       	and	r17, r17
    204e:	39 f3       	breq	.-50     	; 0x201e <process_action+0x184>
                                if (record->tap.interrupted) {
    2050:	f5 01       	movw	r30, r10
    2052:	85 81       	ldd	r24, Z+5	; 0x05
    2054:	80 ff       	sbrs	r24, 0
    2056:	97 c1       	rjmp	.+814    	; 0x2386 <__stack+0x287>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2058:	8f 70       	andi	r24, 0x0F	; 15
    205a:	85 83       	std	Z+5, r24	; 0x05
    205c:	e0 cf       	rjmp	.-64     	; 0x201e <process_action+0x184>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    205e:	11 11       	cpse	r17, r1
    2060:	a6 c1       	rjmp	.+844    	; 0x23ae <__stack+0x2af>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    2062:	80 2f       	mov	r24, r16
    2064:	13 c1       	rjmp	.+550    	; 0x228c <__stack+0x18d>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2066:	80 2f       	mov	r24, r16
    2068:	83 70       	andi	r24, 0x03	; 3
    206a:	09 f0       	breq	.+2      	; 0x206e <process_action+0x1d4>
    206c:	76 c0       	rjmp	.+236    	; 0x215a <__stack+0x5b>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    206e:	91 10       	cpse	r9, r1
    2070:	d7 c1       	rjmp	.+942    	; 0x2420 <__stack+0x321>
                    uint8_t shift = action.layer_bitop.part*4;
    2072:	26 2f       	mov	r18, r22
    2074:	22 95       	swap	r18
    2076:	26 95       	lsr	r18
    2078:	27 70       	andi	r18, 0x07	; 7
    207a:	22 0f       	add	r18, r18
    207c:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    207e:	86 2f       	mov	r24, r22
    2080:	8f 70       	andi	r24, 0x0F	; 15
    2082:	88 2e       	mov	r8, r24
    2084:	91 2c       	mov	r9, r1
    2086:	a1 2c       	mov	r10, r1
    2088:	b1 2c       	mov	r11, r1
    208a:	02 2e       	mov	r0, r18
    208c:	04 c0       	rjmp	.+8      	; 0x2096 <process_action+0x1fc>
    208e:	88 0c       	add	r8, r8
    2090:	99 1c       	adc	r9, r9
    2092:	aa 1c       	adc	r10, r10
    2094:	bb 1c       	adc	r11, r11
    2096:	0a 94       	dec	r0
    2098:	d2 f7       	brpl	.-12     	; 0x208e <process_action+0x1f4>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    209a:	64 ff       	sbrs	r22, 4
    209c:	10 c0       	rjmp	.+32     	; 0x20be <process_action+0x224>
    209e:	6f e0       	ldi	r22, 0x0F	; 15
    20a0:	70 e0       	ldi	r23, 0x00	; 0
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	04 c0       	rjmp	.+8      	; 0x20b0 <process_action+0x216>
    20a8:	66 0f       	add	r22, r22
    20aa:	77 1f       	adc	r23, r23
    20ac:	88 1f       	adc	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	2a 95       	dec	r18
    20b2:	d2 f7       	brpl	.-12     	; 0x20a8 <process_action+0x20e>
    20b4:	60 95       	com	r22
    20b6:	70 95       	com	r23
    20b8:	80 95       	com	r24
    20ba:	90 95       	com	r25
    20bc:	03 c0       	rjmp	.+6      	; 0x20c4 <process_action+0x22a>
    20be:	60 e0       	ldi	r22, 0x00	; 0
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    20c4:	20 2f       	mov	r18, r16
    20c6:	26 95       	lsr	r18
    20c8:	26 95       	lsr	r18
    20ca:	23 70       	andi	r18, 0x03	; 3
    20cc:	42 2f       	mov	r20, r18
    20ce:	50 e0       	ldi	r21, 0x00	; 0
    20d0:	42 30       	cpi	r20, 0x02	; 2
    20d2:	51 05       	cpc	r21, r1
    20d4:	d1 f0       	breq	.+52     	; 0x210a <__stack+0xb>
    20d6:	43 30       	cpi	r20, 0x03	; 3
    20d8:	51 05       	cpc	r21, r1
    20da:	59 f1       	breq	.+86     	; 0x2132 <__stack+0x33>
    20dc:	68 29       	or	r22, r8
    20de:	79 29       	or	r23, r9
    20e0:	8a 29       	or	r24, r10
    20e2:	9b 29       	or	r25, r11
    20e4:	41 30       	cpi	r20, 0x01	; 1
    20e6:	51 05       	cpc	r21, r1
    20e8:	41 f1       	breq	.+80     	; 0x213a <__stack+0x3b>
            break;
#endif
        default:
            break;
    }
}
    20ea:	26 96       	adiw	r28, 0x06	; 6
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	1f 91       	pop	r17
    20fc:	0f 91       	pop	r16
    20fe:	bf 90       	pop	r11
    2100:	af 90       	pop	r10
    2102:	9f 90       	pop	r9
    2104:	8f 90       	pop	r8
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2106:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    210a:	68 29       	or	r22, r8
    210c:	79 29       	or	r23, r9
    210e:	8a 29       	or	r24, r10
    2110:	9b 29       	or	r25, r11
            break;
#endif
        default:
            break;
    }
}
    2112:	26 96       	adiw	r28, 0x06	; 6
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	bf 90       	pop	r11
    2128:	af 90       	pop	r10
    212a:	9f 90       	pop	r9
    212c:	8f 90       	pop	r8
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    212e:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2132:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <default_layer_and>
    2136:	c5 01       	movw	r24, r10
    2138:	b4 01       	movw	r22, r8
            break;
#endif
        default:
            break;
    }
}
    213a:	26 96       	adiw	r28, 0x06	; 6
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd bf       	out	0x3d, r28	; 61
    2146:	df 91       	pop	r29
    2148:	cf 91       	pop	r28
    214a:	1f 91       	pop	r17
    214c:	0f 91       	pop	r16
    214e:	bf 90       	pop	r11
    2150:	af 90       	pop	r10
    2152:	9f 90       	pop	r9
    2154:	8f 90       	pop	r8
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2156:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    215a:	99 20       	and	r9, r9
    215c:	19 f0       	breq	.+6      	; 0x2164 <__stack+0x65>
    215e:	80 2f       	mov	r24, r16
    2160:	81 70       	andi	r24, 0x01	; 1
    2162:	01 c0       	rjmp	.+2      	; 0x2166 <__stack+0x67>
    2164:	86 95       	lsr	r24
    2166:	88 23       	and	r24, r24
    2168:	09 f4       	brne	.+2      	; 0x216c <__stack+0x6d>
    216a:	5a c1       	rjmp	.+692    	; 0x2420 <__stack+0x321>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    216c:	26 2f       	mov	r18, r22
    216e:	22 95       	swap	r18
    2170:	26 95       	lsr	r18
    2172:	27 70       	andi	r18, 0x07	; 7
    2174:	22 0f       	add	r18, r18
    2176:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2178:	86 2f       	mov	r24, r22
    217a:	8f 70       	andi	r24, 0x0F	; 15
    217c:	88 2e       	mov	r8, r24
    217e:	91 2c       	mov	r9, r1
    2180:	a1 2c       	mov	r10, r1
    2182:	b1 2c       	mov	r11, r1
    2184:	02 2e       	mov	r0, r18
    2186:	04 c0       	rjmp	.+8      	; 0x2190 <__stack+0x91>
    2188:	88 0c       	add	r8, r8
    218a:	99 1c       	adc	r9, r9
    218c:	aa 1c       	adc	r10, r10
    218e:	bb 1c       	adc	r11, r11
    2190:	0a 94       	dec	r0
    2192:	d2 f7       	brpl	.-12     	; 0x2188 <__stack+0x89>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2194:	64 ff       	sbrs	r22, 4
    2196:	10 c0       	rjmp	.+32     	; 0x21b8 <__stack+0xb9>
    2198:	6f e0       	ldi	r22, 0x0F	; 15
    219a:	70 e0       	ldi	r23, 0x00	; 0
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	04 c0       	rjmp	.+8      	; 0x21aa <__stack+0xab>
    21a2:	66 0f       	add	r22, r22
    21a4:	77 1f       	adc	r23, r23
    21a6:	88 1f       	adc	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	2a 95       	dec	r18
    21ac:	d2 f7       	brpl	.-12     	; 0x21a2 <__stack+0xa3>
    21ae:	60 95       	com	r22
    21b0:	70 95       	com	r23
    21b2:	80 95       	com	r24
    21b4:	90 95       	com	r25
    21b6:	03 c0       	rjmp	.+6      	; 0x21be <__stack+0xbf>
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	70 e0       	ldi	r23, 0x00	; 0
    21bc:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    21be:	20 2f       	mov	r18, r16
    21c0:	26 95       	lsr	r18
    21c2:	26 95       	lsr	r18
    21c4:	23 70       	andi	r18, 0x03	; 3
    21c6:	42 2f       	mov	r20, r18
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	42 30       	cpi	r20, 0x02	; 2
    21cc:	51 05       	cpc	r21, r1
    21ce:	d1 f0       	breq	.+52     	; 0x2204 <__stack+0x105>
    21d0:	43 30       	cpi	r20, 0x03	; 3
    21d2:	51 05       	cpc	r21, r1
    21d4:	59 f1       	breq	.+86     	; 0x222c <__stack+0x12d>
    21d6:	68 29       	or	r22, r8
    21d8:	79 29       	or	r23, r9
    21da:	8a 29       	or	r24, r10
    21dc:	9b 29       	or	r25, r11
    21de:	41 30       	cpi	r20, 0x01	; 1
    21e0:	51 05       	cpc	r21, r1
    21e2:	41 f1       	breq	.+80     	; 0x2234 <__stack+0x135>
            break;
#endif
        default:
            break;
    }
}
    21e4:	26 96       	adiw	r28, 0x06	; 6
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	df 91       	pop	r29
    21f2:	cf 91       	pop	r28
    21f4:	1f 91       	pop	r17
    21f6:	0f 91       	pop	r16
    21f8:	bf 90       	pop	r11
    21fa:	af 90       	pop	r10
    21fc:	9f 90       	pop	r9
    21fe:	8f 90       	pop	r8
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2200:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2204:	68 29       	or	r22, r8
    2206:	79 29       	or	r23, r9
    2208:	8a 29       	or	r24, r10
    220a:	9b 29       	or	r25, r11
            break;
#endif
        default:
            break;
    }
}
    220c:	26 96       	adiw	r28, 0x06	; 6
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	df 91       	pop	r29
    221a:	cf 91       	pop	r28
    221c:	1f 91       	pop	r17
    221e:	0f 91       	pop	r16
    2220:	bf 90       	pop	r11
    2222:	af 90       	pop	r10
    2224:	9f 90       	pop	r9
    2226:	8f 90       	pop	r8
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2228:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    222c:	0e 94 02 17 	call	0x2e04	; 0x2e04 <layer_and>
    2230:	c5 01       	movw	r24, r10
    2232:	b4 01       	movw	r22, r8
            break;
#endif
        default:
            break;
    }
}
    2234:	26 96       	adiw	r28, 0x06	; 6
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	df 91       	pop	r29
    2242:	cf 91       	pop	r28
    2244:	1f 91       	pop	r17
    2246:	0f 91       	pop	r16
    2248:	bf 90       	pop	r11
    224a:	af 90       	pop	r10
    224c:	9f 90       	pop	r9
    224e:	8f 90       	pop	r8
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2250:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2254:	60 3f       	cpi	r22, 0xF0	; 240
    2256:	51 f1       	breq	.+84     	; 0x22ac <__stack+0x1ad>
    2258:	20 f4       	brcc	.+8      	; 0x2262 <__stack+0x163>
    225a:	60 3e       	cpi	r22, 0xE0	; 224
    225c:	08 f4       	brcc	.+2      	; 0x2260 <__stack+0x161>
    225e:	8e c0       	rjmp	.+284    	; 0x237c <__stack+0x27d>
    2260:	08 c0       	rjmp	.+16     	; 0x2272 <__stack+0x173>
    2262:	62 3f       	cpi	r22, 0xF2	; 242
    2264:	09 f4       	brne	.+2      	; 0x2268 <__stack+0x169>
    2266:	63 c0       	rjmp	.+198    	; 0x232e <__stack+0x22f>
    2268:	e0 f1       	brcs	.+120    	; 0x22e2 <__stack+0x1e3>
    226a:	63 3f       	cpi	r22, 0xF3	; 243
    226c:	09 f0       	breq	.+2      	; 0x2270 <__stack+0x171>
    226e:	86 c0       	rjmp	.+268    	; 0x237c <__stack+0x27d>
    2270:	61 c0       	rjmp	.+194    	; 0x2334 <__stack+0x235>
    2272:	16 2f       	mov	r17, r22
    2274:	1f 70       	andi	r17, 0x0F	; 15
    2276:	80 2f       	mov	r24, r16
    2278:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    227a:	99 20       	and	r9, r9
    227c:	21 f0       	breq	.+8      	; 0x2286 <__stack+0x187>
                        layer_on(action.layer_tap.val);
    227e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2282:	81 2f       	mov	r24, r17
    2284:	cd ce       	rjmp	.-614    	; 0x2020 <process_action+0x186>
                    } else {
                        layer_off(action.layer_tap.val);
    2286:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    228a:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    228c:	26 96       	adiw	r28, 0x06	; 6
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	de bf       	out	0x3e, r29	; 62
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	cd bf       	out	0x3d, r28	; 61
    2298:	df 91       	pop	r29
    229a:	cf 91       	pop	r28
    229c:	1f 91       	pop	r17
    229e:	0f 91       	pop	r16
    22a0:	bf 90       	pop	r11
    22a2:	af 90       	pop	r10
    22a4:	9f 90       	pop	r9
    22a6:	8f 90       	pop	r8
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    22a8:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    22ac:	99 20       	and	r9, r9
    22ae:	a9 f0       	breq	.+42     	; 0x22da <__stack+0x1db>
                        if (tap_count < TAPPING_TOGGLE) {
    22b0:	15 30       	cpi	r17, 0x05	; 5
    22b2:	08 f0       	brcs	.+2      	; 0x22b6 <__stack+0x1b7>
    22b4:	b5 c0       	rjmp	.+362    	; 0x2420 <__stack+0x321>
                            layer_invert(action.layer_tap.val);
    22b6:	80 2f       	mov	r24, r16
    22b8:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    22ba:	26 96       	adiw	r28, 0x06	; 6
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	de bf       	out	0x3e, r29	; 62
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	cd bf       	out	0x3d, r28	; 61
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	1f 91       	pop	r17
    22cc:	0f 91       	pop	r16
    22ce:	bf 90       	pop	r11
    22d0:	af 90       	pop	r10
    22d2:	9f 90       	pop	r9
    22d4:	8f 90       	pop	r8
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    22d6:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    22da:	16 30       	cpi	r17, 0x06	; 6
    22dc:	08 f0       	brcs	.+2      	; 0x22e0 <__stack+0x1e1>
    22de:	a0 c0       	rjmp	.+320    	; 0x2420 <__stack+0x321>
    22e0:	ea cf       	rjmp	.-44     	; 0x22b6 <__stack+0x1b7>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    22e2:	99 20       	and	r9, r9
    22e4:	91 f0       	breq	.+36     	; 0x230a <__stack+0x20b>
    22e6:	80 2f       	mov	r24, r16
    22e8:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    22ea:	26 96       	adiw	r28, 0x06	; 6
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	1f 91       	pop	r17
    22fc:	0f 91       	pop	r16
    22fe:	bf 90       	pop	r11
    2300:	af 90       	pop	r10
    2302:	9f 90       	pop	r9
    2304:	8f 90       	pop	r8
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2306:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <layer_on>
                                    layer_off(action.layer_tap.val);
    230a:	80 2f       	mov	r24, r16
    230c:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    230e:	26 96       	adiw	r28, 0x06	; 6
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	cd bf       	out	0x3d, r28	; 61
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	bf 90       	pop	r11
    2324:	af 90       	pop	r10
    2326:	9f 90       	pop	r9
    2328:	8f 90       	pop	r8
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    232a:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <layer_off>
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    232e:	91 10       	cpse	r9, r1
    2330:	ec cf       	rjmp	.-40     	; 0x230a <__stack+0x20b>
    2332:	d9 cf       	rjmp	.-78     	; 0x22e6 <__stack+0x1e7>
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2334:	99 20       	and	r9, r9
    2336:	91 f0       	breq	.+36     	; 0x235c <__stack+0x25d>
    2338:	80 2f       	mov	r24, r16
    233a:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    233c:	26 96       	adiw	r28, 0x06	; 6
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	1f 91       	pop	r17
    234e:	0f 91       	pop	r16
    2350:	bf 90       	pop	r11
    2352:	af 90       	pop	r10
    2354:	9f 90       	pop	r9
    2356:	8f 90       	pop	r8
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2358:	0c 94 8c 16 	jmp	0x2d18	; 0x2d18 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    235c:	26 96       	adiw	r28, 0x06	; 6
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	1f 91       	pop	r17
    236e:	0f 91       	pop	r16
    2370:	bf 90       	pop	r11
    2372:	af 90       	pop	r10
    2374:	9f 90       	pop	r9
    2376:	8f 90       	pop	r8
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2378:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    237c:	99 20       	and	r9, r9
    237e:	a1 f0       	breq	.+40     	; 0x23a8 <__stack+0x2a9>
                        if (tap_count > 0) {
    2380:	11 23       	and	r17, r17
    2382:	09 f4       	brne	.+2      	; 0x2386 <__stack+0x287>
    2384:	b0 cf       	rjmp	.-160    	; 0x22e6 <__stack+0x1e7>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2386:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2388:	26 96       	adiw	r28, 0x06	; 6
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
    239c:	bf 90       	pop	r11
    239e:	af 90       	pop	r10
    23a0:	9f 90       	pop	r9
    23a2:	8f 90       	pop	r8
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    23a4:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    23a8:	11 23       	and	r17, r17
    23aa:	09 f4       	brne	.+2      	; 0x23ae <__stack+0x2af>
    23ac:	ae cf       	rjmp	.-164    	; 0x230a <__stack+0x20b>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    23ae:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    23b0:	26 96       	adiw	r28, 0x06	; 6
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	1f 91       	pop	r17
    23c2:	0f 91       	pop	r16
    23c4:	bf 90       	pop	r11
    23c6:	af 90       	pop	r10
    23c8:	9f 90       	pop	r9
    23ca:	8f 90       	pop	r8
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    23cc:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    23d0:	40 2f       	mov	r20, r16
    23d2:	4f 70       	andi	r20, 0x0F	; 15
    23d4:	c5 01       	movw	r24, r10
    23d6:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    23da:	26 96       	adiw	r28, 0x06	; 6
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	bf 90       	pop	r11
    23f0:	af 90       	pop	r10
    23f2:	9f 90       	pop	r9
    23f4:	8f 90       	pop	r8
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    23f6:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    23fa:	40 2f       	mov	r20, r16
    23fc:	4f 70       	andi	r20, 0x0F	; 15
    23fe:	c5 01       	movw	r24, r10
            break;
#endif
        default:
            break;
    }
}
    2400:	26 96       	adiw	r28, 0x06	; 6
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	de bf       	out	0x3e, r29	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	cd bf       	out	0x3d, r28	; 61
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	1f 91       	pop	r17
    2412:	0f 91       	pop	r16
    2414:	bf 90       	pop	r11
    2416:	af 90       	pop	r10
    2418:	9f 90       	pop	r9
    241a:	8f 90       	pop	r8
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    241c:	0c 94 b2 02 	jmp	0x564	; 0x564 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2420:	26 96       	adiw	r28, 0x06	; 6
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	1f 91       	pop	r17
    2432:	0f 91       	pop	r16
    2434:	bf 90       	pop	r11
    2436:	af 90       	pop	r10
    2438:	9f 90       	pop	r9
    243a:	8f 90       	pop	r8
    243c:	08 95       	ret

0000243e <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    243e:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <clear_weak_mods>
    clear_keys();
    2442:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <clear_keys>
    send_keyboard_report();
    2446:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <send_keyboard_report>

0000244a <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    244a:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <clear_mods>
    clear_keyboard_but_mods();
    244e:	0c 94 1f 12 	jmp	0x243e	; 0x243e <clear_keyboard_but_mods>

00002452 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2452:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <layer_switch_get_action>

    switch (action.kind.id) {
    2456:	29 2f       	mov	r18, r25
    2458:	22 95       	swap	r18
    245a:	2f 70       	andi	r18, 0x0F	; 15
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	2c 30       	cpi	r18, 0x0C	; 12
    2460:	31 05       	cpc	r19, r1
    2462:	4c f4       	brge	.+18     	; 0x2476 <is_tap_key+0x24>
    2464:	2a 30       	cpi	r18, 0x0A	; 10
    2466:	31 05       	cpc	r19, r1
    2468:	6c f4       	brge	.+26     	; 0x2484 <is_tap_key+0x32>
    246a:	22 50       	subi	r18, 0x02	; 2
    246c:	31 09       	sbc	r19, r1
    246e:	22 30       	cpi	r18, 0x02	; 2
    2470:	31 05       	cpc	r19, r1
    2472:	90 f4       	brcc	.+36     	; 0x2498 <is_tap_key+0x46>
    2474:	07 c0       	rjmp	.+14     	; 0x2484 <is_tap_key+0x32>
    2476:	2c 30       	cpi	r18, 0x0C	; 12
    2478:	31 05       	cpc	r19, r1
    247a:	51 f0       	breq	.+20     	; 0x2490 <is_tap_key+0x3e>
    247c:	2f 30       	cpi	r18, 0x0F	; 15
    247e:	31 05       	cpc	r19, r1
    2480:	59 f4       	brne	.+22     	; 0x2498 <is_tap_key+0x46>
    2482:	06 c0       	rjmp	.+12     	; 0x2490 <is_tap_key+0x3e>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2484:	80 3e       	cpi	r24, 0xE0	; 224
    2486:	10 f0       	brcs	.+4      	; 0x248c <is_tap_key+0x3a>
    2488:	80 3f       	cpi	r24, 0xF0	; 240
    248a:	31 f4       	brne	.+12     	; 0x2498 <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2490:	93 fb       	bst	r25, 3
    2492:	88 27       	eor	r24, r24
    2494:	80 f9       	bld	r24, 0
    2496:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    2498:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    249a:	08 95       	ret

0000249c <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    249c:	cf 93       	push	r28
    249e:	df 93       	push	r29
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <debug_event+0x6>
    24a2:	00 d0       	rcall	.+0      	; 0x24a4 <debug_event+0x8>
    24a4:	1f 92       	push	r1
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	08 95       	ret

000024ba <debug_record>:

void debug_record(keyrecord_t record)
{
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <debug_record+0x6>
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <debug_record+0x8>
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <debug_record+0xa>
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    24c8:	26 96       	adiw	r28, 0x06	; 6
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	df 91       	pop	r29
    24d6:	cf 91       	pop	r28
    24d8:	08 95       	ret

000024da <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    24da:	ef 92       	push	r14
    24dc:	ff 92       	push	r15
    24de:	cf 93       	push	r28
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    24e0:	90 91 a5 01 	lds	r25, 0x01A5
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    24e4:	c6 e0       	ldi	r28, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    24e6:	15 c0       	rjmp	.+42     	; 0x2512 <debug_waiting_buffer+0x38>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    24e8:	e9 2e       	mov	r14, r25
    24ea:	f1 2c       	mov	r15, r1
    24ec:	ce 9d       	mul	r28, r14
    24ee:	f0 01       	movw	r30, r0
    24f0:	cf 9d       	mul	r28, r15
    24f2:	f0 0d       	add	r31, r0
    24f4:	11 24       	eor	r1, r1
    24f6:	eb 58       	subi	r30, 0x8B	; 139
    24f8:	fe 4f       	sbci	r31, 0xFE	; 254
    24fa:	40 81       	ld	r20, Z
    24fc:	51 81       	ldd	r21, Z+1	; 0x01
    24fe:	62 81       	ldd	r22, Z+2	; 0x02
    2500:	73 81       	ldd	r23, Z+3	; 0x03
    2502:	84 81       	ldd	r24, Z+4	; 0x04
    2504:	95 81       	ldd	r25, Z+5	; 0x05
    2506:	0e 94 5d 12 	call	0x24ba	; 0x24ba <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    250a:	c7 01       	movw	r24, r14
    250c:	01 96       	adiw	r24, 0x01	; 1
    250e:	98 2f       	mov	r25, r24
    2510:	97 70       	andi	r25, 0x07	; 7
    2512:	80 91 a6 01 	lds	r24, 0x01A6
    2516:	98 13       	cpse	r25, r24
    2518:	e7 cf       	rjmp	.-50     	; 0x24e8 <debug_waiting_buffer+0xe>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    251a:	cf 91       	pop	r28
    251c:	ff 90       	pop	r15
    251e:	ef 90       	pop	r14
    2520:	08 95       	ret

00002522 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2522:	40 91 6f 01 	lds	r20, 0x016F
    2526:	50 91 70 01 	lds	r21, 0x0170
    252a:	60 91 71 01 	lds	r22, 0x0171
    252e:	70 91 72 01 	lds	r23, 0x0172
    2532:	80 91 73 01 	lds	r24, 0x0173
    2536:	90 91 74 01 	lds	r25, 0x0174
    253a:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <debug_record>

0000253e <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    253e:	0f 93       	push	r16
    2540:	1f 93       	push	r17
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2546:	80 91 74 01 	lds	r24, 0x0174
    254a:	82 95       	swap	r24
    254c:	8f 70       	andi	r24, 0x0F	; 15
    254e:	09 f0       	breq	.+2      	; 0x2552 <waiting_buffer_scan_tap+0x14>
    2550:	69 c0       	rjmp	.+210    	; 0x2624 <waiting_buffer_scan_tap+0xe6>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2552:	80 91 71 01 	lds	r24, 0x0171
    2556:	88 23       	and	r24, r24
    2558:	09 f4       	brne	.+2      	; 0x255c <waiting_buffer_scan_tap+0x1e>
    255a:	64 c0       	rjmp	.+200    	; 0x2624 <waiting_buffer_scan_tap+0xe6>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    255c:	a0 91 a5 01 	lds	r26, 0x01A5
    2560:	d0 91 a6 01 	lds	r29, 0x01A6
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2564:	b0 91 6f 01 	lds	r27, 0x016F
    2568:	c0 91 70 01 	lds	r28, 0x0170
    256c:	80 91 72 01 	lds	r24, 0x0172
    2570:	90 91 73 01 	lds	r25, 0x0173
    2574:	21 e0       	ldi	r18, 0x01	; 1
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	bf 3f       	cpi	r27, 0xFF	; 255
    257a:	11 f0       	breq	.+4      	; 0x2580 <waiting_buffer_scan_tap+0x42>
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	12 2f       	mov	r17, r18
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2582:	bc 01       	movw	r22, r24
    2584:	60 95       	com	r22
    2586:	70 95       	com	r23
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2588:	06 e0       	ldi	r16, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    258a:	4a c0       	rjmp	.+148    	; 0x2620 <waiting_buffer_scan_tap+0xe2>
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	21 f0       	breq	.+8      	; 0x2598 <waiting_buffer_scan_tap+0x5a>
    2590:	cf 3f       	cpi	r28, 0xFF	; 255
    2592:	29 f4       	brne	.+10     	; 0x259e <waiting_buffer_scan_tap+0x60>
    2594:	21 2f       	mov	r18, r17
    2596:	05 c0       	rjmp	.+10     	; 0x25a2 <waiting_buffer_scan_tap+0x64>
    2598:	21 e0       	ldi	r18, 0x01	; 1
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <waiting_buffer_scan_tap+0x64>
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    25a2:	20 fd       	sbrc	r18, 0
    25a4:	3b c0       	rjmp	.+118    	; 0x261c <waiting_buffer_scan_tap+0xde>
    25a6:	4a 2f       	mov	r20, r26
    25a8:	50 e0       	ldi	r21, 0x00	; 0
    25aa:	04 9f       	mul	r16, r20
    25ac:	f0 01       	movw	r30, r0
    25ae:	05 9f       	mul	r16, r21
    25b0:	f0 0d       	add	r31, r0
    25b2:	11 24       	eor	r1, r1
    25b4:	eb 58       	subi	r30, 0x8B	; 139
    25b6:	fe 4f       	sbci	r31, 0xFE	; 254
    25b8:	21 81       	ldd	r18, Z+1	; 0x01
    25ba:	c2 13       	cpse	r28, r18
    25bc:	2f c0       	rjmp	.+94     	; 0x261c <waiting_buffer_scan_tap+0xde>
    25be:	20 81       	ld	r18, Z
    25c0:	b2 13       	cpse	r27, r18
    25c2:	2c c0       	rjmp	.+88     	; 0x261c <waiting_buffer_scan_tap+0xde>
    25c4:	22 81       	ldd	r18, Z+2	; 0x02
    25c6:	21 11       	cpse	r18, r1
    25c8:	29 c0       	rjmp	.+82     	; 0x261c <waiting_buffer_scan_tap+0xde>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    25ca:	23 81       	ldd	r18, Z+3	; 0x03
    25cc:	34 81       	ldd	r19, Z+4	; 0x04
    25ce:	28 17       	cp	r18, r24
    25d0:	39 07       	cpc	r19, r25
    25d2:	18 f0       	brcs	.+6      	; 0x25da <waiting_buffer_scan_tap+0x9c>
    25d4:	28 1b       	sub	r18, r24
    25d6:	39 0b       	sbc	r19, r25
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <waiting_buffer_scan_tap+0xa0>
    25da:	26 0f       	add	r18, r22
    25dc:	37 1f       	adc	r19, r23
    25de:	28 3c       	cpi	r18, 0xC8	; 200
    25e0:	31 05       	cpc	r19, r1
    25e2:	e0 f4       	brcc	.+56     	; 0x261c <waiting_buffer_scan_tap+0xde>
            tapping_key.tap.count = 1;
    25e4:	80 91 74 01 	lds	r24, 0x0174
    25e8:	8f 70       	andi	r24, 0x0F	; 15
    25ea:	80 61       	ori	r24, 0x10	; 16
    25ec:	80 93 74 01 	sts	0x0174, r24
            waiting_buffer[i].tap.count = 1;
    25f0:	86 e0       	ldi	r24, 0x06	; 6
    25f2:	84 9f       	mul	r24, r20
    25f4:	f0 01       	movw	r30, r0
    25f6:	85 9f       	mul	r24, r21
    25f8:	f0 0d       	add	r31, r0
    25fa:	11 24       	eor	r1, r1
    25fc:	e6 58       	subi	r30, 0x86	; 134
    25fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2600:	80 81       	ld	r24, Z
    2602:	8f 70       	andi	r24, 0x0F	; 15
    2604:	80 61       	ori	r24, 0x10	; 16
    2606:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2608:	8f e6       	ldi	r24, 0x6F	; 111
    260a:	91 e0       	ldi	r25, 0x01	; 1
    260c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2618:	0c 94 6d 12 	jmp	0x24da	; 0x24da <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    261c:	af 5f       	subi	r26, 0xFF	; 255
    261e:	a7 70       	andi	r26, 0x07	; 7
    2620:	ad 13       	cpse	r26, r29
    2622:	b4 cf       	rjmp	.-152    	; 0x258c <waiting_buffer_scan_tap+0x4e>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2624:	df 91       	pop	r29
    2626:	cf 91       	pop	r28
    2628:	1f 91       	pop	r17
    262a:	0f 91       	pop	r16
    262c:	08 95       	ret

0000262e <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    262e:	cf 92       	push	r12
    2630:	df 92       	push	r13
    2632:	ef 92       	push	r14
    2634:	ff 92       	push	r15
    2636:	cf 93       	push	r28
    2638:	df 93       	push	r29
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	62 97       	sbiw	r28, 0x12	; 18
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	7c 01       	movw	r14, r24
    keyevent_t event = keyp->event;
    264c:	85 e0       	ldi	r24, 0x05	; 5
    264e:	f7 01       	movw	r30, r14
    2650:	de 01       	movw	r26, r28
    2652:	1d 96       	adiw	r26, 0x0d	; 13
    2654:	01 90       	ld	r0, Z+
    2656:	0d 92       	st	X+, r0
    2658:	8a 95       	dec	r24
    265a:	e1 f7       	brne	.-8      	; 0x2654 <process_tapping+0x26>
    265c:	d7 01       	movw	r26, r14
    265e:	4c 91       	ld	r20, X
    2660:	11 96       	adiw	r26, 0x01	; 1
    2662:	5c 91       	ld	r21, X
    2664:	11 97       	sbiw	r26, 0x01	; 1
    2666:	12 96       	adiw	r26, 0x02	; 2
    2668:	6c 91       	ld	r22, X
    266a:	12 97       	sbiw	r26, 0x02	; 2
    266c:	13 96       	adiw	r26, 0x03	; 3
    266e:	cd 90       	ld	r12, X+
    2670:	dc 90       	ld	r13, X
    2672:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2674:	70 91 6f 01 	lds	r23, 0x016F
    2678:	e0 91 70 01 	lds	r30, 0x0170
    267c:	80 91 72 01 	lds	r24, 0x0172
    2680:	90 91 73 01 	lds	r25, 0x0173
    2684:	00 97       	sbiw	r24, 0x00	; 0
    2686:	39 f0       	breq	.+14     	; 0x2696 <process_tapping+0x68>
    2688:	ef 3f       	cpi	r30, 0xFF	; 255
    268a:	41 f4       	brne	.+16     	; 0x269c <process_tapping+0x6e>
    268c:	21 e0       	ldi	r18, 0x01	; 1
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	7f 3f       	cpi	r23, 0xFF	; 255
    2692:	31 f0       	breq	.+12     	; 0x26a0 <process_tapping+0x72>
    2694:	03 c0       	rjmp	.+6      	; 0x269c <process_tapping+0x6e>
    2696:	21 e0       	ldi	r18, 0x01	; 1
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	02 c0       	rjmp	.+4      	; 0x26a0 <process_tapping+0x72>
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	20 fd       	sbrc	r18, 0
    26a2:	5c c1       	rjmp	.+696    	; 0x295c <process_tapping+0x32e>
    26a4:	20 91 71 01 	lds	r18, 0x0171
    26a8:	22 23       	and	r18, r18
    26aa:	09 f4       	brne	.+2      	; 0x26ae <process_tapping+0x80>
    26ac:	f1 c0       	rjmp	.+482    	; 0x2890 <process_tapping+0x262>
        if (WITHIN_TAPPING_TERM(event)) {
    26ae:	c8 16       	cp	r12, r24
    26b0:	d9 06       	cpc	r13, r25
    26b2:	28 f0       	brcs	.+10     	; 0x26be <process_tapping+0x90>
    26b4:	96 01       	movw	r18, r12
    26b6:	28 1b       	sub	r18, r24
    26b8:	39 0b       	sbc	r19, r25
    26ba:	c9 01       	movw	r24, r18
    26bc:	04 c0       	rjmp	.+8      	; 0x26c6 <process_tapping+0x98>
    26be:	80 95       	com	r24
    26c0:	90 95       	com	r25
    26c2:	8c 0d       	add	r24, r12
    26c4:	9d 1d       	adc	r25, r13
    26c6:	88 3c       	cpi	r24, 0xC8	; 200
    26c8:	91 05       	cpc	r25, r1
    26ca:	08 f0       	brcs	.+2      	; 0x26ce <process_tapping+0xa0>
    26cc:	98 c0       	rjmp	.+304    	; 0x27fe <process_tapping+0x1d0>
            if (tapping_key.tap.count == 0) {
    26ce:	80 91 74 01 	lds	r24, 0x0174
    26d2:	98 2f       	mov	r25, r24
    26d4:	90 7f       	andi	r25, 0xF0	; 240
    26d6:	09 f0       	breq	.+2      	; 0x26da <process_tapping+0xac>
    26d8:	64 c0       	rjmp	.+200    	; 0x27a2 <process_tapping+0x174>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    26da:	e5 13       	cpse	r30, r21
    26dc:	14 c0       	rjmp	.+40     	; 0x2706 <process_tapping+0xd8>
    26de:	74 13       	cpse	r23, r20
    26e0:	12 c0       	rjmp	.+36     	; 0x2706 <process_tapping+0xd8>
    26e2:	61 11       	cpse	r22, r1
    26e4:	10 c0       	rjmp	.+32     	; 0x2706 <process_tapping+0xd8>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    26e6:	8f 70       	andi	r24, 0x0F	; 15
    26e8:	80 61       	ori	r24, 0x10	; 16
    26ea:	80 93 74 01 	sts	0x0174, r24
                    debug_tapping_key();
    26ee:	0e 94 91 12 	call	0x2522	; 0x2522 <debug_tapping_key>
                    process_action(&tapping_key);
    26f2:	8f e6       	ldi	r24, 0x6F	; 111
    26f4:	91 e0       	ldi	r25, 0x01	; 1
    26f6:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    26fa:	80 91 74 01 	lds	r24, 0x0174
    26fe:	d7 01       	movw	r26, r14
    2700:	15 96       	adiw	r26, 0x05	; 5
    2702:	8c 93       	st	X, r24
    2704:	43 c1       	rjmp	.+646    	; 0x298c <process_tapping+0x35e>
    2706:	cd 28       	or	r12, r13
    2708:	39 f0       	breq	.+14     	; 0x2718 <process_tapping+0xea>
    270a:	5f 3f       	cpi	r21, 0xFF	; 255
    270c:	41 f4       	brne	.+16     	; 0x271e <process_tapping+0xf0>
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	4f 3f       	cpi	r20, 0xFF	; 255
    2714:	31 f0       	breq	.+12     	; 0x2722 <process_tapping+0xf4>
    2716:	03 c0       	rjmp	.+6      	; 0x271e <process_tapping+0xf0>
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <process_tapping+0xf4>
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	90 e0       	ldi	r25, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2722:	80 fd       	sbrc	r24, 0
    2724:	03 c0       	rjmp	.+6      	; 0x272c <process_tapping+0xfe>
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	86 27       	eor	r24, r22
    272a:	02 c0       	rjmp	.+4      	; 0x2730 <process_tapping+0x102>
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2730:	80 ff       	sbrs	r24, 0
    2732:	2e c0       	rjmp	.+92     	; 0x2790 <process_tapping+0x162>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2734:	80 91 a5 01 	lds	r24, 0x01A5
    2738:	20 91 a6 01 	lds	r18, 0x01A6
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    273c:	36 e0       	ldi	r19, 0x06	; 6
    273e:	13 c0       	rjmp	.+38     	; 0x2766 <process_tapping+0x138>
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	38 9f       	mul	r19, r24
    2744:	f0 01       	movw	r30, r0
    2746:	39 9f       	mul	r19, r25
    2748:	f0 0d       	add	r31, r0
    274a:	11 24       	eor	r1, r1
    274c:	eb 58       	subi	r30, 0x8B	; 139
    274e:	fe 4f       	sbci	r31, 0xFE	; 254
    2750:	71 81       	ldd	r23, Z+1	; 0x01
    2752:	57 13       	cpse	r21, r23
    2754:	06 c0       	rjmp	.+12     	; 0x2762 <process_tapping+0x134>
    2756:	70 81       	ld	r23, Z
    2758:	47 13       	cpse	r20, r23
    275a:	03 c0       	rjmp	.+6      	; 0x2762 <process_tapping+0x134>
    275c:	72 81       	ldd	r23, Z+2	; 0x02
    275e:	67 13       	cpse	r22, r23
    2760:	17 c0       	rjmp	.+46     	; 0x2790 <process_tapping+0x162>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2762:	01 96       	adiw	r24, 0x01	; 1
    2764:	87 70       	andi	r24, 0x07	; 7
    2766:	82 13       	cpse	r24, r18
    2768:	eb cf       	rjmp	.-42     	; 0x2740 <process_tapping+0x112>
    276a:	12 c1       	rjmp	.+548    	; 0x2990 <process_tapping+0x362>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    276c:	9f 70       	andi	r25, 0x0F	; 15
    276e:	59 f0       	breq	.+22     	; 0x2786 <process_tapping+0x158>
    2770:	88 23       	and	r24, r24
    2772:	09 f4       	brne	.+2      	; 0x2776 <process_tapping+0x148>
    2774:	0b c1       	rjmp	.+534    	; 0x298c <process_tapping+0x35e>
    2776:	07 c0       	rjmp	.+14     	; 0x2786 <process_tapping+0x158>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2778:	9f 70       	andi	r25, 0x0F	; 15
    277a:	29 f0       	breq	.+10     	; 0x2786 <process_tapping+0x158>
    277c:	f7 01       	movw	r30, r14
    277e:	95 81       	ldd	r25, Z+5	; 0x05
    2780:	90 7f       	andi	r25, 0xF0	; 240
    2782:	09 f4       	brne	.+2      	; 0x2786 <process_tapping+0x158>
    2784:	03 c1       	rjmp	.+518    	; 0x298c <process_tapping+0x35e>
                            if (IS_MOD(action.key.code)) return false;
    2786:	80 5e       	subi	r24, 0xE0	; 224
    2788:	88 30       	cpi	r24, 0x08	; 8
    278a:	08 f4       	brcc	.+2      	; 0x278e <process_tapping+0x160>
    278c:	ff c0       	rjmp	.+510    	; 0x298c <process_tapping+0x35e>
    278e:	d2 c0       	rjmp	.+420    	; 0x2934 <process_tapping+0x306>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2790:	66 23       	and	r22, r22
    2792:	09 f4       	brne	.+2      	; 0x2796 <process_tapping+0x168>
    2794:	fb c0       	rjmp	.+502    	; 0x298c <process_tapping+0x35e>
                        tapping_key.tap.interrupted = true;
    2796:	80 91 74 01 	lds	r24, 0x0174
    279a:	81 60       	ori	r24, 0x01	; 1
    279c:	80 93 74 01 	sts	0x0174, r24
    27a0:	f5 c0       	rjmp	.+490    	; 0x298c <process_tapping+0x35e>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    27a2:	e5 13       	cpse	r30, r21
    27a4:	08 c0       	rjmp	.+16     	; 0x27b6 <process_tapping+0x188>
    27a6:	74 13       	cpse	r23, r20
    27a8:	06 c0       	rjmp	.+12     	; 0x27b6 <process_tapping+0x188>
    27aa:	61 11       	cpse	r22, r1
    27ac:	04 c0       	rjmp	.+8      	; 0x27b6 <process_tapping+0x188>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    27ae:	d7 01       	movw	r26, r14
    27b0:	15 96       	adiw	r26, 0x05	; 5
    27b2:	8c 93       	st	X, r24
    27b4:	9d c0       	rjmp	.+314    	; 0x28f0 <process_tapping+0x2c2>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    27b6:	4d 87       	std	Y+13, r20	; 0x0d
    27b8:	5e 87       	std	Y+14, r21	; 0x0e
    27ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    27bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27be:	6a 8b       	std	Y+18, r22	; 0x12
    27c0:	0e 94 29 12 	call	0x2452	; 0x2452 <is_tap_key>
    27c4:	6a 89       	ldd	r22, Y+18	; 0x12
    27c6:	88 23       	and	r24, r24
    27c8:	09 f4       	brne	.+2      	; 0x27cc <process_tapping+0x19e>
    27ca:	b4 c0       	rjmp	.+360    	; 0x2934 <process_tapping+0x306>
    27cc:	66 23       	and	r22, r22
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <process_tapping+0x1a4>
    27d0:	b1 c0       	rjmp	.+354    	; 0x2934 <process_tapping+0x306>
                    if (tapping_key.tap.count > 1) {
    27d2:	20 91 74 01 	lds	r18, 0x0174
    27d6:	82 2f       	mov	r24, r18
    27d8:	82 95       	swap	r24
    27da:	8f 70       	andi	r24, 0x0F	; 15
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	02 97       	sbiw	r24, 0x02	; 2
    27e0:	0c f4       	brge	.+2      	; 0x27e4 <process_tapping+0x1b6>
    27e2:	c6 c0       	rjmp	.+396    	; 0x2970 <process_tapping+0x342>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    27e4:	80 91 6f 01 	lds	r24, 0x016F
    27e8:	90 91 70 01 	lds	r25, 0x0170
    27ec:	98 87       	std	Y+8, r25	; 0x08
    27ee:	8f 83       	std	Y+7, r24	; 0x07
    27f0:	19 86       	std	Y+9, r1	; 0x09
    27f2:	db 86       	std	Y+11, r13	; 0x0b
    27f4:	ca 86       	std	Y+10, r12	; 0x0a
    27f6:	2c 87       	std	Y+12, r18	; 0x0c
    27f8:	ce 01       	movw	r24, r28
    27fa:	07 96       	adiw	r24, 0x07	; 7
    27fc:	46 c0       	rjmp	.+140    	; 0x288a <process_tapping+0x25c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    27fe:	80 91 74 01 	lds	r24, 0x0174
    2802:	98 2f       	mov	r25, r24
    2804:	90 7f       	andi	r25, 0xF0	; 240
    2806:	59 f4       	brne	.+22     	; 0x281e <process_tapping+0x1f0>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2808:	7c 2d       	mov	r23, r12
    280a:	d9 8a       	std	Y+17, r13	; 0x11
    280c:	c8 8a       	std	Y+16, r12	; 0x10
    280e:	89 89       	ldd	r24, Y+17	; 0x11
    2810:	0e 94 4e 12 	call	0x249c	; 0x249c <debug_event>
                process_action(&tapping_key);
    2814:	8f e6       	ldi	r24, 0x6F	; 111
    2816:	91 e0       	ldi	r25, 0x01	; 1
    2818:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <process_action>
    281c:	95 c0       	rjmp	.+298    	; 0x2948 <process_tapping+0x31a>
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    281e:	e5 13       	cpse	r30, r21
    2820:	11 c0       	rjmp	.+34     	; 0x2844 <process_tapping+0x216>
    2822:	74 13       	cpse	r23, r20
    2824:	0f c0       	rjmp	.+30     	; 0x2844 <process_tapping+0x216>
    2826:	61 11       	cpse	r22, r1
    2828:	0d c0       	rjmp	.+26     	; 0x2844 <process_tapping+0x216>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    282a:	f7 01       	movw	r30, r14
    282c:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    282e:	c7 01       	movw	r24, r14
    2830:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <process_action>
                    tapping_key = (keyrecord_t){};
    2834:	ef e6       	ldi	r30, 0x6F	; 111
    2836:	f1 e0       	ldi	r31, 0x01	; 1
    2838:	86 e0       	ldi	r24, 0x06	; 6
    283a:	df 01       	movw	r26, r30
    283c:	1d 92       	st	X+, r1
    283e:	8a 95       	dec	r24
    2840:	e9 f7       	brne	.-6      	; 0x283c <process_tapping+0x20e>
    2842:	a2 c0       	rjmp	.+324    	; 0x2988 <process_tapping+0x35a>
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2844:	4d 87       	std	Y+13, r20	; 0x0d
    2846:	5e 87       	std	Y+14, r21	; 0x0e
    2848:	8d 85       	ldd	r24, Y+13	; 0x0d
    284a:	9e 85       	ldd	r25, Y+14	; 0x0e
    284c:	6a 8b       	std	Y+18, r22	; 0x12
    284e:	0e 94 29 12 	call	0x2452	; 0x2452 <is_tap_key>
    2852:	6a 89       	ldd	r22, Y+18	; 0x12
    2854:	88 23       	and	r24, r24
    2856:	09 f4       	brne	.+2      	; 0x285a <process_tapping+0x22c>
    2858:	6d c0       	rjmp	.+218    	; 0x2934 <process_tapping+0x306>
    285a:	66 23       	and	r22, r22
    285c:	09 f4       	brne	.+2      	; 0x2860 <process_tapping+0x232>
    285e:	6a c0       	rjmp	.+212    	; 0x2934 <process_tapping+0x306>
                    if (tapping_key.tap.count > 1) {
    2860:	20 91 74 01 	lds	r18, 0x0174
    2864:	82 2f       	mov	r24, r18
    2866:	82 95       	swap	r24
    2868:	8f 70       	andi	r24, 0x0F	; 15
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	02 97       	sbiw	r24, 0x02	; 2
    286e:	0c f4       	brge	.+2      	; 0x2872 <process_tapping+0x244>
    2870:	7f c0       	rjmp	.+254    	; 0x2970 <process_tapping+0x342>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2872:	80 91 6f 01 	lds	r24, 0x016F
    2876:	90 91 70 01 	lds	r25, 0x0170
    287a:	9a 83       	std	Y+2, r25	; 0x02
    287c:	89 83       	std	Y+1, r24	; 0x01
    287e:	1b 82       	std	Y+3, r1	; 0x03
    2880:	dd 82       	std	Y+5, r13	; 0x05
    2882:	cc 82       	std	Y+4, r12	; 0x04
    2884:	2e 83       	std	Y+6, r18	; 0x06
    2886:	ce 01       	movw	r24, r28
    2888:	01 96       	adiw	r24, 0x01	; 1
    288a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <process_action>
    288e:	70 c0       	rjmp	.+224    	; 0x2970 <process_tapping+0x342>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2890:	c8 16       	cp	r12, r24
    2892:	d9 06       	cpc	r13, r25
    2894:	28 f0       	brcs	.+10     	; 0x28a0 <process_tapping+0x272>
    2896:	96 01       	movw	r18, r12
    2898:	28 1b       	sub	r18, r24
    289a:	39 0b       	sbc	r19, r25
    289c:	c9 01       	movw	r24, r18
    289e:	04 c0       	rjmp	.+8      	; 0x28a8 <process_tapping+0x27a>
    28a0:	80 95       	com	r24
    28a2:	90 95       	com	r25
    28a4:	8c 0d       	add	r24, r12
    28a6:	9d 1d       	adc	r25, r13
    28a8:	88 3c       	cpi	r24, 0xC8	; 200
    28aa:	91 05       	cpc	r25, r1
    28ac:	08 f0       	brcs	.+2      	; 0x28b0 <process_tapping+0x282>
    28ae:	46 c0       	rjmp	.+140    	; 0x293c <process_tapping+0x30e>
            if (event.pressed) {
    28b0:	66 23       	and	r22, r22
    28b2:	09 f4       	brne	.+2      	; 0x28b6 <process_tapping+0x288>
    28b4:	3f c0       	rjmp	.+126    	; 0x2934 <process_tapping+0x306>
                if (IS_TAPPING_KEY(event.key)) {
    28b6:	e5 13       	cpse	r30, r21
    28b8:	30 c0       	rjmp	.+96     	; 0x291a <process_tapping+0x2ec>
    28ba:	74 13       	cpse	r23, r20
    28bc:	2e c0       	rjmp	.+92     	; 0x291a <process_tapping+0x2ec>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    28be:	20 91 74 01 	lds	r18, 0x0174
    28c2:	20 fd       	sbrc	r18, 0
    28c4:	21 c0       	rjmp	.+66     	; 0x2908 <process_tapping+0x2da>
    28c6:	32 2f       	mov	r19, r18
    28c8:	32 95       	swap	r19
    28ca:	3f 70       	andi	r19, 0x0F	; 15
    28cc:	83 2f       	mov	r24, r19
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	00 97       	sbiw	r24, 0x00	; 0
    28d2:	d1 f0       	breq	.+52     	; 0x2908 <process_tapping+0x2da>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    28d4:	d7 01       	movw	r26, r14
    28d6:	15 96       	adiw	r26, 0x05	; 5
    28d8:	2c 93       	st	X, r18
    28da:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    28dc:	0f 97       	sbiw	r24, 0x0f	; 15
    28de:	41 f0       	breq	.+16     	; 0x28f0 <process_tapping+0x2c2>
    28e0:	83 2f       	mov	r24, r19
    28e2:	8f 5f       	subi	r24, 0xFF	; 255
    28e4:	82 95       	swap	r24
    28e6:	80 7f       	andi	r24, 0xF0	; 240
    28e8:	2f 70       	andi	r18, 0x0F	; 15
    28ea:	28 2b       	or	r18, r24
    28ec:	15 96       	adiw	r26, 0x05	; 5
    28ee:	2c 93       	st	X, r18
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    28f0:	c7 01       	movw	r24, r14
    28f2:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <process_action>
                        tapping_key = *keyp;
    28f6:	86 e0       	ldi	r24, 0x06	; 6
    28f8:	f7 01       	movw	r30, r14
    28fa:	af e6       	ldi	r26, 0x6F	; 111
    28fc:	b1 e0       	ldi	r27, 0x01	; 1
    28fe:	01 90       	ld	r0, Z+
    2900:	0d 92       	st	X+, r0
    2902:	8a 95       	dec	r24
    2904:	e1 f7       	brne	.-8      	; 0x28fe <process_tapping+0x2d0>
    2906:	3e c0       	rjmp	.+124    	; 0x2984 <process_tapping+0x356>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    2908:	86 e0       	ldi	r24, 0x06	; 6
    290a:	f7 01       	movw	r30, r14
    290c:	af e6       	ldi	r26, 0x6F	; 111
    290e:	b1 e0       	ldi	r27, 0x01	; 1
    2910:	01 90       	ld	r0, Z+
    2912:	0d 92       	st	X+, r0
    2914:	8a 95       	dec	r24
    2916:	e1 f7       	brne	.-8      	; 0x2910 <process_tapping+0x2e2>
    2918:	37 c0       	rjmp	.+110    	; 0x2988 <process_tapping+0x35a>
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
    291a:	4d 87       	std	Y+13, r20	; 0x0d
    291c:	5e 87       	std	Y+14, r21	; 0x0e
    291e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2920:	9e 85       	ldd	r25, Y+14	; 0x0e
    2922:	0e 94 29 12 	call	0x2452	; 0x2452 <is_tap_key>
    2926:	81 11       	cpse	r24, r1
    2928:	23 c0       	rjmp	.+70     	; 0x2970 <process_tapping+0x342>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    292a:	80 91 74 01 	lds	r24, 0x0174
    292e:	81 60       	ori	r24, 0x01	; 1
    2930:	80 93 74 01 	sts	0x0174, r24
                    process_action(keyp);
    2934:	c7 01       	movw	r24, r14
    2936:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <process_action>
    293a:	26 c0       	rjmp	.+76     	; 0x2988 <process_tapping+0x35a>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    293c:	7c 2d       	mov	r23, r12
    293e:	d9 8a       	std	Y+17, r13	; 0x11
    2940:	c8 8a       	std	Y+16, r12	; 0x10
    2942:	89 89       	ldd	r24, Y+17	; 0x11
    2944:	0e 94 4e 12 	call	0x249c	; 0x249c <debug_event>
            tapping_key = (keyrecord_t){};
    2948:	ef e6       	ldi	r30, 0x6F	; 111
    294a:	f1 e0       	ldi	r31, 0x01	; 1
    294c:	86 e0       	ldi	r24, 0x06	; 6
    294e:	df 01       	movw	r26, r30
    2950:	1d 92       	st	X+, r1
    2952:	8a 95       	dec	r24
    2954:	e9 f7       	brne	.-6      	; 0x2950 <process_tapping+0x322>
            debug_tapping_key();
    2956:	0e 94 91 12 	call	0x2522	; 0x2522 <debug_tapping_key>
    295a:	18 c0       	rjmp	.+48     	; 0x298c <process_tapping+0x35e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    295c:	66 23       	and	r22, r22
    295e:	51 f3       	breq	.-44     	; 0x2934 <process_tapping+0x306>
    2960:	4d 87       	std	Y+13, r20	; 0x0d
    2962:	5e 87       	std	Y+14, r21	; 0x0e
    2964:	8d 85       	ldd	r24, Y+13	; 0x0d
    2966:	9e 85       	ldd	r25, Y+14	; 0x0e
    2968:	0e 94 29 12 	call	0x2452	; 0x2452 <is_tap_key>
    296c:	88 23       	and	r24, r24
    296e:	11 f3       	breq	.-60     	; 0x2934 <process_tapping+0x306>
            debug("Tapping: Start(Press tap key).\n");
            tapping_key = *keyp;
    2970:	86 e0       	ldi	r24, 0x06	; 6
    2972:	f7 01       	movw	r30, r14
    2974:	af e6       	ldi	r26, 0x6F	; 111
    2976:	b1 e0       	ldi	r27, 0x01	; 1
    2978:	01 90       	ld	r0, Z+
    297a:	0d 92       	st	X+, r0
    297c:	8a 95       	dec	r24
    297e:	e1 f7       	brne	.-8      	; 0x2978 <process_tapping+0x34a>
            waiting_buffer_scan_tap();
    2980:	0e 94 9f 12 	call	0x253e	; 0x253e <waiting_buffer_scan_tap>
            debug_tapping_key();
    2984:	0e 94 91 12 	call	0x2522	; 0x2522 <debug_tapping_key>
            return true;
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	14 c0       	rjmp	.+40     	; 0x29b4 <process_tapping+0x386>
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
                        tapping_key.tap.interrupted = true;
                    }
                    // enqueue 
                    return false;
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	12 c0       	rjmp	.+36     	; 0x29b4 <process_tapping+0x386>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    2990:	4d 87       	std	Y+13, r20	; 0x0d
    2992:	5e 87       	std	Y+14, r21	; 0x0e
    2994:	8d 85       	ldd	r24, Y+13	; 0x0d
    2996:	9e 85       	ldd	r25, Y+14	; 0x0e
    2998:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <layer_switch_get_action>
                    switch (action.kind.id) {
    299c:	29 2f       	mov	r18, r25
    299e:	22 95       	swap	r18
    29a0:	2f 70       	andi	r18, 0x0F	; 15
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	22 30       	cpi	r18, 0x02	; 2
    29a6:	31 05       	cpc	r19, r1
    29a8:	0c f4       	brge	.+2      	; 0x29ac <process_tapping+0x37e>
    29aa:	e0 ce       	rjmp	.-576    	; 0x276c <process_tapping+0x13e>
    29ac:	24 30       	cpi	r18, 0x04	; 4
    29ae:	31 05       	cpc	r19, r1
    29b0:	0c f6       	brge	.-126    	; 0x2934 <process_tapping+0x306>
    29b2:	e2 ce       	rjmp	.-572    	; 0x2778 <process_tapping+0x14a>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    29b4:	62 96       	adiw	r28, 0x12	; 18
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	df 91       	pop	r29
    29c2:	cf 91       	pop	r28
    29c4:	ff 90       	pop	r15
    29c6:	ef 90       	pop	r14
    29c8:	df 90       	pop	r13
    29ca:	cf 90       	pop	r12
    29cc:	08 95       	ret

000029ce <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    29ce:	1f 93       	push	r17
    29d0:	cf 93       	push	r28
    29d2:	df 93       	push	r29
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
    29d8:	2c 97       	sbiw	r28, 0x0c	; 12
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	4f 83       	std	Y+7, r20	; 0x07
    29e6:	58 87       	std	Y+8, r21	; 0x08
    29e8:	69 87       	std	Y+9, r22	; 0x09
    29ea:	7a 87       	std	Y+10, r23	; 0x0a
    29ec:	8b 87       	std	Y+11, r24	; 0x0b
    29ee:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    29f0:	ce 01       	movw	r24, r28
    29f2:	07 96       	adiw	r24, 0x07	; 7
    29f4:	0e 94 17 13 	call	0x262e	; 0x262e <process_tapping>
    29f8:	88 23       	and	r24, r24
    29fa:	d9 f0       	breq	.+54     	; 0x2a32 <action_tapping_process+0x64>
        if (!IS_NOEVENT(record.event)) {
    29fc:	2f 81       	ldd	r18, Y+7	; 0x07
    29fe:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2a00:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a02:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a04:	89 2b       	or	r24, r25
    2a06:	39 f0       	breq	.+14     	; 0x2a16 <action_tapping_process+0x48>
    2a08:	3f 3f       	cpi	r19, 0xFF	; 255
    2a0a:	19 f0       	breq	.+6      	; 0x2a12 <action_tapping_process+0x44>
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	04 c0       	rjmp	.+8      	; 0x2a1a <action_tapping_process+0x4c>
    2a12:	2f 3f       	cpi	r18, 0xFF	; 255
    2a14:	d9 f7       	brne	.-10     	; 0x2a0c <action_tapping_process+0x3e>
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	89 2b       	or	r24, r25
    2a1c:	09 f0       	breq	.+2      	; 0x2a20 <action_tapping_process+0x52>
    2a1e:	6d c0       	rjmp	.+218    	; 0x2afa <action_tapping_process+0x12c>
            debug("processed: "); debug_record(record); debug("\n");
    2a20:	4f 81       	ldd	r20, Y+7	; 0x07
    2a22:	58 85       	ldd	r21, Y+8	; 0x08
    2a24:	69 85       	ldd	r22, Y+9	; 0x09
    2a26:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a28:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a2c:	0e 94 5d 12 	call	0x24ba	; 0x24ba <debug_record>
    2a30:	64 c0       	rjmp	.+200    	; 0x2afa <action_tapping_process+0x12c>
    2a32:	86 e0       	ldi	r24, 0x06	; 6
    2a34:	fe 01       	movw	r30, r28
    2a36:	37 96       	adiw	r30, 0x07	; 7
    2a38:	de 01       	movw	r26, r28
    2a3a:	11 96       	adiw	r26, 0x01	; 1
    2a3c:	01 90       	ld	r0, Z+
    2a3e:	0d 92       	st	X+, r0
    2a40:	8a 95       	dec	r24
    2a42:	e1 f7       	brne	.-8      	; 0x2a3c <action_tapping_process+0x6e>
    2a44:	ff 81       	ldd	r31, Y+7	; 0x07
    2a46:	e8 85       	ldd	r30, Y+8	; 0x08
    2a48:	4a 85       	ldd	r20, Y+10	; 0x0a
    2a4a:	5b 85       	ldd	r21, Y+11	; 0x0b
    2a4c:	41 15       	cp	r20, r1
    2a4e:	51 05       	cpc	r21, r1
    2a50:	39 f0       	breq	.+14     	; 0x2a60 <action_tapping_process+0x92>
    2a52:	ef 3f       	cpi	r30, 0xFF	; 255
    2a54:	41 f4       	brne	.+16     	; 0x2a66 <action_tapping_process+0x98>
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	ff 3f       	cpi	r31, 0xFF	; 255
    2a5c:	31 f0       	breq	.+12     	; 0x2a6a <action_tapping_process+0x9c>
    2a5e:	03 c0       	rjmp	.+6      	; 0x2a66 <action_tapping_process+0x98>
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	02 c0       	rjmp	.+4      	; 0x2a6a <action_tapping_process+0x9c>
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	90 e0       	ldi	r25, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    2a6a:	80 fd       	sbrc	r24, 0
    2a6c:	46 c0       	rjmp	.+140    	; 0x2afa <action_tapping_process+0x12c>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    2a6e:	20 91 a6 01 	lds	r18, 0x01A6
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	c9 01       	movw	r24, r18
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	87 70       	andi	r24, 0x07	; 7
    2a7a:	99 27       	eor	r25, r25
    2a7c:	60 91 a5 01 	lds	r22, 0x01A5
    2a80:	70 e0       	ldi	r23, 0x00	; 0
    2a82:	86 17       	cp	r24, r22
    2a84:	97 07       	cpc	r25, r23
    2a86:	09 f4       	brne	.+2      	; 0x2a8a <action_tapping_process+0xbc>
    2a88:	40 c0       	rjmp	.+128    	; 0x2b0a <action_tapping_process+0x13c>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    2a8a:	f9 83       	std	Y+1, r31	; 0x01
    2a8c:	ea 83       	std	Y+2, r30	; 0x02
    2a8e:	5d 83       	std	Y+5, r21	; 0x05
    2a90:	4c 83       	std	Y+4, r20	; 0x04
    2a92:	96 e0       	ldi	r25, 0x06	; 6
    2a94:	92 9f       	mul	r25, r18
    2a96:	d0 01       	movw	r26, r0
    2a98:	93 9f       	mul	r25, r19
    2a9a:	b0 0d       	add	r27, r0
    2a9c:	11 24       	eor	r1, r1
    2a9e:	ab 58       	subi	r26, 0x8B	; 139
    2aa0:	be 4f       	sbci	r27, 0xFE	; 254
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	31 96       	adiw	r30, 0x01	; 1
    2aa6:	01 90       	ld	r0, Z+
    2aa8:	0d 92       	st	X+, r0
    2aaa:	9a 95       	dec	r25
    2aac:	e1 f7       	brne	.-8      	; 0x2aa6 <action_tapping_process+0xd8>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    2aae:	80 93 a6 01 	sts	0x01A6, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    2ab2:	0e 94 6d 12 	call	0x24da	; 0x24da <debug_waiting_buffer>
    2ab6:	21 c0       	rjmp	.+66     	; 0x2afa <action_tapping_process+0x12c>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2ab8:	18 9f       	mul	r17, r24
    2aba:	c0 01       	movw	r24, r0
    2abc:	11 24       	eor	r1, r1
    2abe:	8b 58       	subi	r24, 0x8B	; 139
    2ac0:	9e 4f       	sbci	r25, 0xFE	; 254
    2ac2:	0e 94 17 13 	call	0x262e	; 0x262e <process_tapping>
    2ac6:	88 23       	and	r24, r24
    2ac8:	71 f1       	breq	.+92     	; 0x2b26 <action_tapping_process+0x158>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    2aca:	e0 91 a5 01 	lds	r30, 0x01A5
    2ace:	1e 9f       	mul	r17, r30
    2ad0:	f0 01       	movw	r30, r0
    2ad2:	11 24       	eor	r1, r1
    2ad4:	eb 58       	subi	r30, 0x8B	; 139
    2ad6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad8:	40 81       	ld	r20, Z
    2ada:	51 81       	ldd	r21, Z+1	; 0x01
    2adc:	62 81       	ldd	r22, Z+2	; 0x02
    2ade:	73 81       	ldd	r23, Z+3	; 0x03
    2ae0:	84 81       	ldd	r24, Z+4	; 0x04
    2ae2:	95 81       	ldd	r25, Z+5	; 0x05
    2ae4:	0e 94 5d 12 	call	0x24ba	; 0x24ba <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2ae8:	80 91 a5 01 	lds	r24, 0x01A5
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	01 96       	adiw	r24, 0x01	; 1
    2af0:	87 70       	andi	r24, 0x07	; 7
    2af2:	99 27       	eor	r25, r25
    2af4:	80 93 a5 01 	sts	0x01A5, r24
    2af8:	01 c0       	rjmp	.+2      	; 0x2afc <action_tapping_process+0x12e>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2afa:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2afc:	80 91 a5 01 	lds	r24, 0x01A5
    2b00:	90 91 a6 01 	lds	r25, 0x01A6
    2b04:	89 13       	cpse	r24, r25
    2b06:	d8 cf       	rjmp	.-80     	; 0x2ab8 <action_tapping_process+0xea>
    2b08:	0e c0       	rjmp	.+28     	; 0x2b26 <action_tapping_process+0x158>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    2b0a:	0e 94 25 12 	call	0x244a	; 0x244a <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    2b0e:	10 92 a6 01 	sts	0x01A6, r1
    waiting_buffer_tail = 0;
    2b12:	10 92 a5 01 	sts	0x01A5, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    2b16:	ef e6       	ldi	r30, 0x6F	; 111
    2b18:	f1 e0       	ldi	r31, 0x01	; 1
    2b1a:	86 e0       	ldi	r24, 0x06	; 6
    2b1c:	df 01       	movw	r26, r30
    2b1e:	1d 92       	st	X+, r1
    2b20:	8a 95       	dec	r24
    2b22:	e9 f7       	brne	.-6      	; 0x2b1e <action_tapping_process+0x150>
    2b24:	ea cf       	rjmp	.-44     	; 0x2afa <action_tapping_process+0x12c>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    2b26:	2c 96       	adiw	r28, 0x0c	; 12
    2b28:	0f b6       	in	r0, 0x3f	; 63
    2b2a:	f8 94       	cli
    2b2c:	de bf       	out	0x3e, r29	; 62
    2b2e:	0f be       	out	0x3f, r0	; 63
    2b30:	cd bf       	out	0x3d, r28	; 61
    2b32:	df 91       	pop	r29
    2b34:	cf 91       	pop	r28
    2b36:	1f 91       	pop	r17
    2b38:	08 95       	ret

00002b3a <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    2b3a:	cf 92       	push	r12
    2b3c:	df 92       	push	r13
    2b3e:	ef 92       	push	r14
    2b40:	ff 92       	push	r15
    2b42:	cf 93       	push	r28
    2b44:	df 93       	push	r29
    2b46:	9c 01       	movw	r18, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	09 f4       	brne	.+2      	; 0x2b4e <action_macro_play+0x14>
    2b4c:	8e c0       	rjmp	.+284    	; 0x2c6a <action_macro_play+0x130>
    2b4e:	d0 e0       	ldi	r29, 0x00	; 0
    2b50:	c0 e0       	ldi	r28, 0x00	; 0
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    2b52:	cc 24       	eor	r12, r12
    2b54:	c3 94       	inc	r12
    2b56:	d1 2c       	mov	r13, r1

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    2b58:	79 01       	movw	r14, r18
    2b5a:	8f ef       	ldi	r24, 0xFF	; 255
    2b5c:	e8 1a       	sub	r14, r24
    2b5e:	f8 0a       	sbc	r15, r24
    2b60:	f9 01       	movw	r30, r18
    2b62:	84 91       	lpm	r24, Z
    2b64:	85 37       	cpi	r24, 0x75	; 117
    2b66:	09 f4       	brne	.+2      	; 0x2b6a <action_macro_play+0x30>
    2b68:	5b c0       	rjmp	.+182    	; 0x2c20 <action_macro_play+0xe6>
    2b6a:	60 f4       	brcc	.+24     	; 0x2b84 <action_macro_play+0x4a>
    2b6c:	84 37       	cpi	r24, 0x74	; 116
    2b6e:	08 f0       	brcs	.+2      	; 0x2b72 <action_macro_play+0x38>
    2b70:	46 c0       	rjmp	.+140    	; 0x2bfe <action_macro_play+0xc4>
    2b72:	84 30       	cpi	r24, 0x04	; 4
    2b74:	08 f0       	brcs	.+2      	; 0x2b78 <action_macro_play+0x3e>
    2b76:	66 c0       	rjmp	.+204    	; 0x2c44 <action_macro_play+0x10a>
    2b78:	81 30       	cpi	r24, 0x01	; 1
    2b7a:	a9 f0       	breq	.+42     	; 0x2ba6 <action_macro_play+0x6c>
    2b7c:	82 30       	cpi	r24, 0x02	; 2
    2b7e:	09 f0       	breq	.+2      	; 0x2b82 <action_macro_play+0x48>
    2b80:	74 c0       	rjmp	.+232    	; 0x2c6a <action_macro_play+0x130>
    2b82:	26 c0       	rjmp	.+76     	; 0x2bd0 <action_macro_play+0x96>
    2b84:	88 37       	cpi	r24, 0x78	; 120
    2b86:	09 f4       	brne	.+2      	; 0x2b8a <action_macro_play+0x50>
    2b88:	5a c0       	rjmp	.+180    	; 0x2c3e <action_macro_play+0x104>
    2b8a:	38 f4       	brcc	.+14     	; 0x2b9a <action_macro_play+0x60>
    2b8c:	86 37       	cpi	r24, 0x76	; 118
    2b8e:	09 f4       	brne	.+2      	; 0x2b92 <action_macro_play+0x58>
    2b90:	4e c0       	rjmp	.+156    	; 0x2c2e <action_macro_play+0xf4>
    2b92:	87 37       	cpi	r24, 0x77	; 119
    2b94:	09 f0       	breq	.+2      	; 0x2b98 <action_macro_play+0x5e>
    2b96:	69 c0       	rjmp	.+210    	; 0x2c6a <action_macro_play+0x130>
    2b98:	4e c0       	rjmp	.+156    	; 0x2c36 <action_macro_play+0xfc>
    2b9a:	98 2f       	mov	r25, r24
    2b9c:	94 58       	subi	r25, 0x84	; 132
    2b9e:	90 37       	cpi	r25, 0x70	; 112
    2ba0:	08 f0       	brcs	.+2      	; 0x2ba4 <action_macro_play+0x6a>
    2ba2:	63 c0       	rjmp	.+198    	; 0x2c6a <action_macro_play+0x130>
    2ba4:	52 c0       	rjmp	.+164    	; 0x2c4a <action_macro_play+0x110>
            case KEY_DOWN:
                MACRO_READ();
    2ba6:	f7 01       	movw	r30, r14
    2ba8:	79 01       	movw	r14, r18
    2baa:	82 e0       	ldi	r24, 0x02	; 2
    2bac:	e8 0e       	add	r14, r24
    2bae:	f1 1c       	adc	r15, r1
    2bb0:	e4 91       	lpm	r30, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    2bb2:	8e 2f       	mov	r24, r30
    2bb4:	80 5e       	subi	r24, 0xE0	; 224
    2bb6:	88 30       	cpi	r24, 0x08	; 8
    2bb8:	48 f4       	brcc	.+18     	; 0x2bcc <action_macro_play+0x92>
                    add_weak_mods(MOD_BIT(macro));
    2bba:	e7 70       	andi	r30, 0x07	; 7
    2bbc:	8c 2d       	mov	r24, r12
    2bbe:	01 c0       	rjmp	.+2      	; 0x2bc2 <action_macro_play+0x88>
    2bc0:	88 0f       	add	r24, r24
    2bc2:	ea 95       	dec	r30
    2bc4:	ea f7       	brpl	.-6      	; 0x2bc0 <action_macro_play+0x86>
    2bc6:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <add_weak_mods>
    2bca:	14 c0       	rjmp	.+40     	; 0x2bf4 <action_macro_play+0xba>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    2bcc:	8e 2f       	mov	r24, r30
    2bce:	3a c0       	rjmp	.+116    	; 0x2c44 <action_macro_play+0x10a>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    2bd0:	f7 01       	movw	r30, r14
    2bd2:	79 01       	movw	r14, r18
    2bd4:	82 e0       	ldi	r24, 0x02	; 2
    2bd6:	e8 0e       	add	r14, r24
    2bd8:	f1 1c       	adc	r15, r1
    2bda:	e4 91       	lpm	r30, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    2bdc:	8e 2f       	mov	r24, r30
    2bde:	80 5e       	subi	r24, 0xE0	; 224
    2be0:	88 30       	cpi	r24, 0x08	; 8
    2be2:	58 f4       	brcc	.+22     	; 0x2bfa <action_macro_play+0xc0>
                    del_weak_mods(MOD_BIT(macro));
    2be4:	e7 70       	andi	r30, 0x07	; 7
    2be6:	8c 2d       	mov	r24, r12
    2be8:	01 c0       	rjmp	.+2      	; 0x2bec <action_macro_play+0xb2>
    2bea:	88 0f       	add	r24, r24
    2bec:	ea 95       	dec	r30
    2bee:	ea f7       	brpl	.-6      	; 0x2bea <action_macro_play+0xb0>
    2bf0:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <del_weak_mods>
                    send_keyboard_report();
    2bf4:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <send_keyboard_report>
    2bf8:	2b c0       	rjmp	.+86     	; 0x2c50 <action_macro_play+0x116>
                } else {
                    unregister_code(macro);
    2bfa:	8e 2f       	mov	r24, r30
    2bfc:	27 c0       	rjmp	.+78     	; 0x2c4c <action_macro_play+0x112>
                }
                break;
            case WAIT:
                MACRO_READ();
    2bfe:	f7 01       	movw	r30, r14
    2c00:	79 01       	movw	r14, r18
    2c02:	82 e0       	ldi	r24, 0x02	; 2
    2c04:	e8 0e       	add	r14, r24
    2c06:	f1 1c       	adc	r15, r1
    2c08:	94 91       	lpm	r25, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    2c0a:	07 c0       	rjmp	.+14     	; 0x2c1a <action_macro_play+0xe0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2c0c:	ef e9       	ldi	r30, 0x9F	; 159
    2c0e:	ff e0       	ldi	r31, 0x0F	; 15
    2c10:	31 97       	sbiw	r30, 0x01	; 1
    2c12:	f1 f7       	brne	.-4      	; 0x2c10 <action_macro_play+0xd6>
    2c14:	00 c0       	rjmp	.+0      	; 0x2c16 <action_macro_play+0xdc>
    2c16:	00 00       	nop
    2c18:	91 50       	subi	r25, 0x01	; 1
    2c1a:	91 11       	cpse	r25, r1
    2c1c:	f7 cf       	rjmp	.-18     	; 0x2c0c <action_macro_play+0xd2>
    2c1e:	18 c0       	rjmp	.+48     	; 0x2c50 <action_macro_play+0x116>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    2c20:	f7 01       	movw	r30, r14
    2c22:	79 01       	movw	r14, r18
    2c24:	82 e0       	ldi	r24, 0x02	; 2
    2c26:	e8 0e       	add	r14, r24
    2c28:	f1 1c       	adc	r15, r1
    2c2a:	c4 91       	lpm	r28, Z
                dprintf("INTERVAL(%u)\n", interval);
                break;
    2c2c:	11 c0       	rjmp	.+34     	; 0x2c50 <action_macro_play+0x116>
            case MOD_STORE:
                mod_storage = get_mods();
    2c2e:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <get_mods>
    2c32:	d8 2f       	mov	r29, r24
                break;
    2c34:	0d c0       	rjmp	.+26     	; 0x2c50 <action_macro_play+0x116>
            case MOD_RESTORE:
                set_mods(mod_storage);
    2c36:	8d 2f       	mov	r24, r29
    2c38:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <set_mods>
    2c3c:	db cf       	rjmp	.-74     	; 0x2bf4 <action_macro_play+0xba>
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    2c3e:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <clear_mods>
    2c42:	d8 cf       	rjmp	.-80     	; 0x2bf4 <action_macro_play+0xba>
                send_keyboard_report();
                break;
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    2c44:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <register_code>
                break;
    2c48:	03 c0       	rjmp	.+6      	; 0x2c50 <action_macro_play+0x116>
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    2c4a:	8f 77       	andi	r24, 0x7F	; 127
    2c4c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <unregister_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    2c50:	9c 2f       	mov	r25, r28
    2c52:	07 c0       	rjmp	.+14     	; 0x2c62 <action_macro_play+0x128>
    2c54:	91 50       	subi	r25, 0x01	; 1
    2c56:	ef e9       	ldi	r30, 0x9F	; 159
    2c58:	ff e0       	ldi	r31, 0x0F	; 15
    2c5a:	31 97       	sbiw	r30, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <action_macro_play+0x120>
    2c5e:	00 c0       	rjmp	.+0      	; 0x2c60 <action_macro_play+0x126>
    2c60:	00 00       	nop
    2c62:	91 11       	cpse	r25, r1
    2c64:	f7 cf       	rjmp	.-18     	; 0x2c54 <action_macro_play+0x11a>
    2c66:	97 01       	movw	r18, r14
    2c68:	77 cf       	rjmp	.-274    	; 0x2b58 <action_macro_play+0x1e>
    }
}
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	ff 90       	pop	r15
    2c70:	ef 90       	pop	r14
    2c72:	df 90       	pop	r13
    2c74:	cf 90       	pop	r12
    2c76:	08 95       	ret

00002c78 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    2c78:	60 93 ab 01 	sts	0x01AB, r22
    2c7c:	70 93 ac 01 	sts	0x01AC, r23
    2c80:	80 93 ad 01 	sts	0x01AD, r24
    2c84:	90 93 ae 01 	sts	0x01AE, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2c88:	0c 94 1f 12 	jmp	0x243e	; 0x243e <clear_keyboard_but_mods>

00002c8c <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2c8c:	60 93 a7 01 	sts	0x01A7, r22
    2c90:	70 93 a8 01 	sts	0x01A8, r23
    2c94:	80 93 a9 01 	sts	0x01A9, r24
    2c98:	90 93 aa 01 	sts	0x01AA, r25
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2c9c:	0c 94 1f 12 	jmp	0x243e	; 0x243e <clear_keyboard_but_mods>

00002ca0 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    2ca0:	08 95       	ret

00002ca2 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    2ca2:	0f 93       	push	r16
    2ca4:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    2ca6:	00 91 ab 01 	lds	r16, 0x01AB
    2caa:	10 91 ac 01 	lds	r17, 0x01AC
    2cae:	20 91 ad 01 	lds	r18, 0x01AD
    2cb2:	30 91 ae 01 	lds	r19, 0x01AE
    2cb6:	60 2b       	or	r22, r16
    2cb8:	71 2b       	or	r23, r17
    2cba:	82 2b       	or	r24, r18
    2cbc:	93 2b       	or	r25, r19
}
    2cbe:	1f 91       	pop	r17
    2cc0:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    2cc2:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <default_layer_state_set>

00002cc6 <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    2cc6:	0f 93       	push	r16
    2cc8:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    2cca:	00 91 ab 01 	lds	r16, 0x01AB
    2cce:	10 91 ac 01 	lds	r17, 0x01AC
    2cd2:	20 91 ad 01 	lds	r18, 0x01AD
    2cd6:	30 91 ae 01 	lds	r19, 0x01AE
    2cda:	60 23       	and	r22, r16
    2cdc:	71 23       	and	r23, r17
    2cde:	82 23       	and	r24, r18
    2ce0:	93 23       	and	r25, r19
}
    2ce2:	1f 91       	pop	r17
    2ce4:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    2ce6:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <default_layer_state_set>

00002cea <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    2cea:	0f 93       	push	r16
    2cec:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    2cee:	00 91 ab 01 	lds	r16, 0x01AB
    2cf2:	10 91 ac 01 	lds	r17, 0x01AC
    2cf6:	20 91 ad 01 	lds	r18, 0x01AD
    2cfa:	30 91 ae 01 	lds	r19, 0x01AE
    2cfe:	60 27       	eor	r22, r16
    2d00:	71 27       	eor	r23, r17
    2d02:	82 27       	eor	r24, r18
    2d04:	93 27       	eor	r25, r19
}
    2d06:	1f 91       	pop	r17
    2d08:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    2d0a:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <default_layer_state_set>

00002d0e <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    2d0e:	60 e0       	ldi	r22, 0x00	; 0
    2d10:	70 e0       	ldi	r23, 0x00	; 0
    2d12:	cb 01       	movw	r24, r22
    2d14:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <layer_state_set>

00002d18 <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    2d18:	41 e0       	ldi	r20, 0x01	; 1
    2d1a:	50 e0       	ldi	r21, 0x00	; 0
    2d1c:	60 e0       	ldi	r22, 0x00	; 0
    2d1e:	70 e0       	ldi	r23, 0x00	; 0
    2d20:	04 c0       	rjmp	.+8      	; 0x2d2a <layer_move+0x12>
    2d22:	44 0f       	add	r20, r20
    2d24:	55 1f       	adc	r21, r21
    2d26:	66 1f       	adc	r22, r22
    2d28:	77 1f       	adc	r23, r23
    2d2a:	8a 95       	dec	r24
    2d2c:	d2 f7       	brpl	.-12     	; 0x2d22 <layer_move+0xa>
    2d2e:	cb 01       	movw	r24, r22
    2d30:	ba 01       	movw	r22, r20
    2d32:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <layer_state_set>

00002d36 <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    2d36:	41 e0       	ldi	r20, 0x01	; 1
    2d38:	50 e0       	ldi	r21, 0x00	; 0
    2d3a:	60 e0       	ldi	r22, 0x00	; 0
    2d3c:	70 e0       	ldi	r23, 0x00	; 0
    2d3e:	04 c0       	rjmp	.+8      	; 0x2d48 <layer_on+0x12>
    2d40:	44 0f       	add	r20, r20
    2d42:	55 1f       	adc	r21, r21
    2d44:	66 1f       	adc	r22, r22
    2d46:	77 1f       	adc	r23, r23
    2d48:	8a 95       	dec	r24
    2d4a:	d2 f7       	brpl	.-12     	; 0x2d40 <layer_on+0xa>
    2d4c:	80 91 a7 01 	lds	r24, 0x01A7
    2d50:	90 91 a8 01 	lds	r25, 0x01A8
    2d54:	a0 91 a9 01 	lds	r26, 0x01A9
    2d58:	b0 91 aa 01 	lds	r27, 0x01AA
    2d5c:	48 2b       	or	r20, r24
    2d5e:	59 2b       	or	r21, r25
    2d60:	6a 2b       	or	r22, r26
    2d62:	7b 2b       	or	r23, r27
    2d64:	cb 01       	movw	r24, r22
    2d66:	ba 01       	movw	r22, r20
    2d68:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <layer_state_set>

00002d6c <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    2d6c:	41 e0       	ldi	r20, 0x01	; 1
    2d6e:	50 e0       	ldi	r21, 0x00	; 0
    2d70:	60 e0       	ldi	r22, 0x00	; 0
    2d72:	70 e0       	ldi	r23, 0x00	; 0
    2d74:	04 c0       	rjmp	.+8      	; 0x2d7e <layer_off+0x12>
    2d76:	44 0f       	add	r20, r20
    2d78:	55 1f       	adc	r21, r21
    2d7a:	66 1f       	adc	r22, r22
    2d7c:	77 1f       	adc	r23, r23
    2d7e:	8a 95       	dec	r24
    2d80:	d2 f7       	brpl	.-12     	; 0x2d76 <layer_off+0xa>
    2d82:	40 95       	com	r20
    2d84:	50 95       	com	r21
    2d86:	60 95       	com	r22
    2d88:	70 95       	com	r23
    2d8a:	80 91 a7 01 	lds	r24, 0x01A7
    2d8e:	90 91 a8 01 	lds	r25, 0x01A8
    2d92:	a0 91 a9 01 	lds	r26, 0x01A9
    2d96:	b0 91 aa 01 	lds	r27, 0x01AA
    2d9a:	48 23       	and	r20, r24
    2d9c:	59 23       	and	r21, r25
    2d9e:	6a 23       	and	r22, r26
    2da0:	7b 23       	and	r23, r27
    2da2:	cb 01       	movw	r24, r22
    2da4:	ba 01       	movw	r22, r20
    2da6:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <layer_state_set>

00002daa <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    2daa:	41 e0       	ldi	r20, 0x01	; 1
    2dac:	50 e0       	ldi	r21, 0x00	; 0
    2dae:	60 e0       	ldi	r22, 0x00	; 0
    2db0:	70 e0       	ldi	r23, 0x00	; 0
    2db2:	04 c0       	rjmp	.+8      	; 0x2dbc <layer_invert+0x12>
    2db4:	44 0f       	add	r20, r20
    2db6:	55 1f       	adc	r21, r21
    2db8:	66 1f       	adc	r22, r22
    2dba:	77 1f       	adc	r23, r23
    2dbc:	8a 95       	dec	r24
    2dbe:	d2 f7       	brpl	.-12     	; 0x2db4 <layer_invert+0xa>
    2dc0:	80 91 a7 01 	lds	r24, 0x01A7
    2dc4:	90 91 a8 01 	lds	r25, 0x01A8
    2dc8:	a0 91 a9 01 	lds	r26, 0x01A9
    2dcc:	b0 91 aa 01 	lds	r27, 0x01AA
    2dd0:	48 27       	eor	r20, r24
    2dd2:	59 27       	eor	r21, r25
    2dd4:	6a 27       	eor	r22, r26
    2dd6:	7b 27       	eor	r23, r27
    2dd8:	cb 01       	movw	r24, r22
    2dda:	ba 01       	movw	r22, r20
    2ddc:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <layer_state_set>

00002de0 <layer_or>:
}

void layer_or(uint32_t state)
{
    2de0:	0f 93       	push	r16
    2de2:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    2de4:	00 91 a7 01 	lds	r16, 0x01A7
    2de8:	10 91 a8 01 	lds	r17, 0x01A8
    2dec:	20 91 a9 01 	lds	r18, 0x01A9
    2df0:	30 91 aa 01 	lds	r19, 0x01AA
    2df4:	60 2b       	or	r22, r16
    2df6:	71 2b       	or	r23, r17
    2df8:	82 2b       	or	r24, r18
    2dfa:	93 2b       	or	r25, r19
}
    2dfc:	1f 91       	pop	r17
    2dfe:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    2e00:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <layer_state_set>

00002e04 <layer_and>:
}
void layer_and(uint32_t state)
{
    2e04:	0f 93       	push	r16
    2e06:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    2e08:	00 91 a7 01 	lds	r16, 0x01A7
    2e0c:	10 91 a8 01 	lds	r17, 0x01A8
    2e10:	20 91 a9 01 	lds	r18, 0x01A9
    2e14:	30 91 aa 01 	lds	r19, 0x01AA
    2e18:	60 23       	and	r22, r16
    2e1a:	71 23       	and	r23, r17
    2e1c:	82 23       	and	r24, r18
    2e1e:	93 23       	and	r25, r19
}
    2e20:	1f 91       	pop	r17
    2e22:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    2e24:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <layer_state_set>

00002e28 <layer_xor>:
}
void layer_xor(uint32_t state)
{
    2e28:	0f 93       	push	r16
    2e2a:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    2e2c:	00 91 a7 01 	lds	r16, 0x01A7
    2e30:	10 91 a8 01 	lds	r17, 0x01A8
    2e34:	20 91 a9 01 	lds	r18, 0x01A9
    2e38:	30 91 aa 01 	lds	r19, 0x01AA
    2e3c:	60 27       	eor	r22, r16
    2e3e:	71 27       	eor	r23, r17
    2e40:	82 27       	eor	r24, r18
    2e42:	93 27       	eor	r25, r19
}
    2e44:	1f 91       	pop	r17
    2e46:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    2e48:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <layer_state_set>

00002e4c <layer_debug>:
}

void layer_debug(void)
{
    2e4c:	08 95       	ret

00002e4e <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    2e4e:	8f 92       	push	r8
    2e50:	9f 92       	push	r9
    2e52:	af 92       	push	r10
    2e54:	bf 92       	push	r11
    2e56:	cf 92       	push	r12
    2e58:	df 92       	push	r13
    2e5a:	ef 92       	push	r14
    2e5c:	ff 92       	push	r15
    2e5e:	6c 01       	movw	r12, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    2e60:	80 90 ab 01 	lds	r8, 0x01AB
    2e64:	90 90 ac 01 	lds	r9, 0x01AC
    2e68:	a0 90 ad 01 	lds	r10, 0x01AD
    2e6c:	b0 90 ae 01 	lds	r11, 0x01AE
    2e70:	40 91 a7 01 	lds	r20, 0x01A7
    2e74:	50 91 a8 01 	lds	r21, 0x01A8
    2e78:	60 91 a9 01 	lds	r22, 0x01A9
    2e7c:	70 91 aa 01 	lds	r23, 0x01AA
    2e80:	84 2a       	or	r8, r20
    2e82:	95 2a       	or	r9, r21
    2e84:	a6 2a       	or	r10, r22
    2e86:	b7 2a       	or	r11, r23
    2e88:	8f e1       	ldi	r24, 0x1F	; 31
    2e8a:	e8 2e       	mov	r14, r24
    2e8c:	f1 2c       	mov	r15, r1
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    2e8e:	b5 01       	movw	r22, r10
    2e90:	a4 01       	movw	r20, r8
    2e92:	0e 2c       	mov	r0, r14
    2e94:	04 c0       	rjmp	.+8      	; 0x2e9e <layer_switch_get_action+0x50>
    2e96:	76 95       	lsr	r23
    2e98:	67 95       	ror	r22
    2e9a:	57 95       	ror	r21
    2e9c:	47 95       	ror	r20
    2e9e:	0a 94       	dec	r0
    2ea0:	d2 f7       	brpl	.-12     	; 0x2e96 <layer_switch_get_action+0x48>
    2ea2:	40 ff       	sbrs	r20, 0
    2ea4:	08 c0       	rjmp	.+16     	; 0x2eb6 <layer_switch_get_action+0x68>
            action = action_for_key(i, key);
    2ea6:	b6 01       	movw	r22, r12
    2ea8:	8e 2d       	mov	r24, r14
    2eaa:	0e 94 14 18 	call	0x3028	; 0x3028 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    2eae:	81 30       	cpi	r24, 0x01	; 1
    2eb0:	91 05       	cpc	r25, r1
    2eb2:	09 f0       	breq	.+2      	; 0x2eb6 <layer_switch_get_action+0x68>
    2eb4:	08 c0       	rjmp	.+16     	; 0x2ec6 <layer_switch_get_action+0x78>
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	e8 1a       	sub	r14, r24
    2eba:	f1 08       	sbc	r15, r1
    2ebc:	40 f7       	brcc	.-48     	; 0x2e8e <layer_switch_get_action+0x40>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    2ebe:	b6 01       	movw	r22, r12
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	0e 94 14 18 	call	0x3028	; 0x3028 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    2ec6:	ff 90       	pop	r15
    2ec8:	ef 90       	pop	r14
    2eca:	df 90       	pop	r13
    2ecc:	cf 90       	pop	r12
    2ece:	bf 90       	pop	r11
    2ed0:	af 90       	pop	r10
    2ed2:	9f 90       	pop	r9
    2ed4:	8f 90       	pop	r8
    2ed6:	08 95       	ret

00002ed8 <add_key>:
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    2ed8:	40 91 0c 01 	lds	r20, 0x010C
    2edc:	50 91 0d 01 	lds	r21, 0x010D
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    keyboard_report->keys[cb_tail] = code;
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    2ee4:	9f ef       	ldi	r25, 0xFF	; 255
#endif
    host_keyboard_send(keyboard_report);
}

/* key */
void add_key(uint8_t key)
    2ee6:	fa 01       	movw	r30, r20
    2ee8:	e2 0f       	add	r30, r18
    2eea:	f3 1f       	adc	r31, r19
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    2eec:	62 81       	ldd	r22, Z+2	; 0x02
    2eee:	68 17       	cp	r22, r24
    2ef0:	a1 f0       	breq	.+40     	; 0x2f1a <add_key+0x42>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    2ef2:	9f 3f       	cpi	r25, 0xFF	; 255
    2ef4:	19 f4       	brne	.+6      	; 0x2efc <add_key+0x24>
    2ef6:	61 11       	cpse	r22, r1
    2ef8:	01 c0       	rjmp	.+2      	; 0x2efc <add_key+0x24>
    2efa:	92 2f       	mov	r25, r18
    2efc:	2f 5f       	subi	r18, 0xFF	; 255
    2efe:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    2f00:	26 30       	cpi	r18, 0x06	; 6
    2f02:	31 05       	cpc	r19, r1
    2f04:	81 f7       	brne	.-32     	; 0x2ee6 <add_key+0xe>
    2f06:	07 c0       	rjmp	.+14     	; 0x2f16 <add_key+0x3e>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
            keyboard_report->keys[empty] = code;
    2f08:	fa 01       	movw	r30, r20
    2f0a:	e9 0f       	add	r30, r25
    2f0c:	f1 1d       	adc	r31, r1
    2f0e:	97 fd       	sbrc	r25, 7
    2f10:	fa 95       	dec	r31
    2f12:	82 83       	std	Z+2, r24	; 0x02
    2f14:	08 95       	ret
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    2f16:	9f 3f       	cpi	r25, 0xFF	; 255
    2f18:	b9 f7       	brne	.-18     	; 0x2f08 <add_key+0x30>
    2f1a:	08 95       	ret

00002f1c <del_key>:
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    2f1c:	40 91 0c 01 	lds	r20, 0x010C
    2f20:	50 91 0d 01 	lds	r21, 0x010D
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    }
#endif
    add_key_byte(key);
}

void del_key(uint8_t key)
    2f28:	fa 01       	movw	r30, r20
    2f2a:	e2 0f       	add	r30, r18
    2f2c:	f3 1f       	adc	r31, r19
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    2f2e:	92 81       	ldd	r25, Z+2	; 0x02
    2f30:	98 13       	cpse	r25, r24
    2f32:	01 c0       	rjmp	.+2      	; 0x2f36 <del_key+0x1a>
            keyboard_report->keys[i] = 0;
    2f34:	12 82       	std	Z+2, r1	; 0x02
    2f36:	2f 5f       	subi	r18, 0xFF	; 255
    2f38:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    2f3a:	26 30       	cpi	r18, 0x06	; 6
    2f3c:	31 05       	cpc	r19, r1
    2f3e:	a1 f7       	brne	.-24     	; 0x2f28 <del_key+0xc>
        del_key_bit(key);
        return;
    }
#endif
    del_key_byte(key);
}
    2f40:	08 95       	ret

00002f42 <clear_keys>:

void clear_keys(void)
{
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    2f46:	e0 91 0c 01 	lds	r30, 0x010C
    2f4a:	f0 91 0d 01 	lds	r31, 0x010D
    2f4e:	e8 0f       	add	r30, r24
    2f50:	f9 1f       	adc	r31, r25
    2f52:	10 82       	st	Z, r1
    2f54:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    2f56:	88 30       	cpi	r24, 0x08	; 8
    2f58:	91 05       	cpc	r25, r1
    2f5a:	a9 f7       	brne	.-22     	; 0x2f46 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    2f5c:	08 95       	ret

00002f5e <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    2f5e:	80 91 af 01 	lds	r24, 0x01AF
    2f62:	08 95       	ret

00002f64 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    2f64:	90 91 af 01 	lds	r25, 0x01AF
    2f68:	98 2b       	or	r25, r24
    2f6a:	90 93 af 01 	sts	0x01AF, r25
    2f6e:	08 95       	ret

00002f70 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    2f70:	80 95       	com	r24
    2f72:	90 91 af 01 	lds	r25, 0x01AF
    2f76:	98 23       	and	r25, r24
    2f78:	90 93 af 01 	sts	0x01AF, r25
    2f7c:	08 95       	ret

00002f7e <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    2f7e:	80 93 af 01 	sts	0x01AF, r24
    2f82:	08 95       	ret

00002f84 <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    2f84:	10 92 af 01 	sts	0x01AF, r1
    2f88:	08 95       	ret

00002f8a <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    2f8a:	90 91 b0 01 	lds	r25, 0x01B0
    2f8e:	98 2b       	or	r25, r24
    2f90:	90 93 b0 01 	sts	0x01B0, r25
    2f94:	08 95       	ret

00002f96 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    2f96:	80 95       	com	r24
    2f98:	90 91 b0 01 	lds	r25, 0x01B0
    2f9c:	98 23       	and	r25, r24
    2f9e:	90 93 b0 01 	sts	0x01B0, r25
    2fa2:	08 95       	ret

00002fa4 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    2fa4:	10 92 b0 01 	sts	0x01B0, r1
    2fa8:	08 95       	ret

00002faa <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    2faa:	80 93 b1 01 	sts	0x01B1, r24
    2fae:	08 95       	ret

00002fb0 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    2fb0:	10 92 b1 01 	sts	0x01B1, r1
    2fb4:	08 95       	ret

00002fb6 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    2fb6:	40 91 0c 01 	lds	r20, 0x010C
    2fba:	50 91 0d 01 	lds	r21, 0x010D
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    2fc2:	80 e0       	ldi	r24, 0x00	; 0


/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
    2fc4:	fa 01       	movw	r30, r20
    2fc6:	e2 0f       	add	r30, r18
    2fc8:	f3 1f       	adc	r31, r19
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    2fca:	91 81       	ldd	r25, Z+1	; 0x01
    2fcc:	91 11       	cpse	r25, r1
            cnt++;
    2fce:	8f 5f       	subi	r24, 0xFF	; 255
    2fd0:	2f 5f       	subi	r18, 0xFF	; 255
    2fd2:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    2fd4:	27 30       	cpi	r18, 0x07	; 7
    2fd6:	31 05       	cpc	r19, r1
    2fd8:	a9 f7       	brne	.-22     	; 0x2fc4 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    2fda:	08 95       	ret

00002fdc <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    2fdc:	e0 91 0c 01 	lds	r30, 0x010C
    2fe0:	f0 91 0d 01 	lds	r31, 0x010D
    2fe4:	80 91 af 01 	lds	r24, 0x01AF
    2fe8:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    2fea:	e0 91 0c 01 	lds	r30, 0x010C
    2fee:	f0 91 0d 01 	lds	r31, 0x010D
    2ff2:	80 81       	ld	r24, Z
    2ff4:	90 91 b0 01 	lds	r25, 0x01B0
    2ff8:	89 2b       	or	r24, r25
    2ffa:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    2ffc:	90 91 b1 01 	lds	r25, 0x01B1
    3000:	99 23       	and	r25, r25
    3002:	61 f0       	breq	.+24     	; 0x301c <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3004:	e0 91 0c 01 	lds	r30, 0x010C
    3008:	f0 91 0d 01 	lds	r31, 0x010D
    300c:	80 81       	ld	r24, Z
    300e:	89 2b       	or	r24, r25
    3010:	80 83       	st	Z, r24
        if (has_anykey()) {
    3012:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <has_anykey>
    3016:	81 11       	cpse	r24, r1
            clear_oneshot_mods();
    3018:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    301c:	80 91 0c 01 	lds	r24, 0x010C
    3020:	90 91 0d 01 	lds	r25, 0x010D
    3024:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <host_keyboard_send>

00003028 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3028:	0e 94 06 03 	call	0x60c	; 0x60c <keymap_key_to_keycode>
    switch (keycode) {
    302c:	98 2f       	mov	r25, r24
    302e:	90 5c       	subi	r25, 0xC0	; 192
    3030:	90 32       	cpi	r25, 0x20	; 32
    3032:	18 f4       	brcc	.+6      	; 0x303a <action_for_key+0x12>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3034:	0e 94 18 03 	call	0x630	; 0x630 <keymap_fn_to_action>
    3038:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    303a:	8d 3b       	cpi	r24, 0xBD	; 189
    303c:	50 f4       	brcc	.+20     	; 0x3052 <action_for_key+0x2a>
    303e:	88 3a       	cpi	r24, 0xA8	; 168
    3040:	18 f5       	brcc	.+70     	; 0x3088 <action_for_key+0x60>
    3042:	85 3a       	cpi	r24, 0xA5	; 165
    3044:	c0 f4       	brcc	.+48     	; 0x3076 <action_for_key+0x4e>
    3046:	84 30       	cpi	r24, 0x04	; 4
    3048:	98 f4       	brcc	.+38     	; 0x3070 <action_for_key+0x48>
    304a:	81 30       	cpi	r24, 0x01	; 1
    304c:	09 f0       	breq	.+2      	; 0x3050 <action_for_key+0x28>
    304e:	6f c0       	rjmp	.+222    	; 0x312e <action_for_key+0x106>
    3050:	0c c0       	rjmp	.+24     	; 0x306a <action_for_key+0x42>
    3052:	88 3e       	cpi	r24, 0xE8	; 232
    3054:	30 f4       	brcc	.+12     	; 0x3062 <action_for_key+0x3a>
    3056:	80 3e       	cpi	r24, 0xE0	; 224
    3058:	58 f4       	brcc	.+22     	; 0x3070 <action_for_key+0x48>
    305a:	8f 3b       	cpi	r24, 0xBF	; 191
    305c:	09 f0       	breq	.+2      	; 0x3060 <action_for_key+0x38>
    305e:	67 c0       	rjmp	.+206    	; 0x312e <action_for_key+0x106>
    3060:	59 c0       	rjmp	.+178    	; 0x3114 <action_for_key+0xec>
    3062:	80 3f       	cpi	r24, 0xF0	; 240
    3064:	08 f4       	brcc	.+2      	; 0x3068 <action_for_key+0x40>
    3066:	63 c0       	rjmp	.+198    	; 0x312e <action_for_key+0x106>
    3068:	51 c0       	rjmp	.+162    	; 0x310c <action_for_key+0xe4>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    306a:	21 e0       	ldi	r18, 0x01	; 1
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	a6 c0       	rjmp	.+332    	; 0x31bc <action_for_key+0x194>
{
    action_t action = {};
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3070:	28 2f       	mov	r18, r24
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	a3 c0       	rjmp	.+326    	; 0x31bc <action_for_key+0x194>
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3076:	85 3a       	cpi	r24, 0xA5	; 165
    3078:	09 f4       	brne	.+2      	; 0x307c <action_for_key+0x54>
    307a:	5c c0       	rjmp	.+184    	; 0x3134 <action_for_key+0x10c>
    307c:	86 3a       	cpi	r24, 0xA6	; 166
    307e:	09 f0       	breq	.+2      	; 0x3082 <action_for_key+0x5a>
    3080:	5c c0       	rjmp	.+184    	; 0x313a <action_for_key+0x112>
    3082:	22 e8       	ldi	r18, 0x82	; 130
    3084:	30 e4       	ldi	r19, 0x40	; 64
    3086:	9a c0       	rjmp	.+308    	; 0x31bc <action_for_key+0x194>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3088:	88 3a       	cpi	r24, 0xA8	; 168
    308a:	09 f4       	brne	.+2      	; 0x308e <action_for_key+0x66>
    308c:	59 c0       	rjmp	.+178    	; 0x3140 <action_for_key+0x118>
    308e:	89 3a       	cpi	r24, 0xA9	; 169
    3090:	09 f4       	brne	.+2      	; 0x3094 <action_for_key+0x6c>
    3092:	59 c0       	rjmp	.+178    	; 0x3146 <action_for_key+0x11e>
    3094:	8a 3a       	cpi	r24, 0xAA	; 170
    3096:	09 f4       	brne	.+2      	; 0x309a <action_for_key+0x72>
    3098:	59 c0       	rjmp	.+178    	; 0x314c <action_for_key+0x124>
    309a:	8b 3a       	cpi	r24, 0xAB	; 171
    309c:	09 f4       	brne	.+2      	; 0x30a0 <action_for_key+0x78>
    309e:	59 c0       	rjmp	.+178    	; 0x3152 <action_for_key+0x12a>
    30a0:	8c 3a       	cpi	r24, 0xAC	; 172
    30a2:	09 f4       	brne	.+2      	; 0x30a6 <action_for_key+0x7e>
    30a4:	59 c0       	rjmp	.+178    	; 0x3158 <action_for_key+0x130>
    30a6:	8b 3b       	cpi	r24, 0xBB	; 187
    30a8:	09 f4       	brne	.+2      	; 0x30ac <action_for_key+0x84>
    30aa:	59 c0       	rjmp	.+178    	; 0x315e <action_for_key+0x136>
    30ac:	8c 3b       	cpi	r24, 0xBC	; 188
    30ae:	09 f4       	brne	.+2      	; 0x30b2 <action_for_key+0x8a>
    30b0:	59 c0       	rjmp	.+178    	; 0x3164 <action_for_key+0x13c>
    30b2:	8d 3a       	cpi	r24, 0xAD	; 173
    30b4:	09 f4       	brne	.+2      	; 0x30b8 <action_for_key+0x90>
    30b6:	59 c0       	rjmp	.+178    	; 0x316a <action_for_key+0x142>
    30b8:	80 3b       	cpi	r24, 0xB0	; 176
    30ba:	09 f4       	brne	.+2      	; 0x30be <action_for_key+0x96>
    30bc:	59 c0       	rjmp	.+178    	; 0x3170 <action_for_key+0x148>
    30be:	8e 3a       	cpi	r24, 0xAE	; 174
    30c0:	09 f4       	brne	.+2      	; 0x30c4 <action_for_key+0x9c>
    30c2:	59 c0       	rjmp	.+178    	; 0x3176 <action_for_key+0x14e>
    30c4:	8f 3a       	cpi	r24, 0xAF	; 175
    30c6:	09 f4       	brne	.+2      	; 0x30ca <action_for_key+0xa2>
    30c8:	59 c0       	rjmp	.+178    	; 0x317c <action_for_key+0x154>
    30ca:	81 3b       	cpi	r24, 0xB1	; 177
    30cc:	09 f4       	brne	.+2      	; 0x30d0 <action_for_key+0xa8>
    30ce:	59 c0       	rjmp	.+178    	; 0x3182 <action_for_key+0x15a>
    30d0:	82 3b       	cpi	r24, 0xB2	; 178
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <action_for_key+0xae>
    30d4:	59 c0       	rjmp	.+178    	; 0x3188 <action_for_key+0x160>
    30d6:	83 3b       	cpi	r24, 0xB3	; 179
    30d8:	09 f4       	brne	.+2      	; 0x30dc <action_for_key+0xb4>
    30da:	59 c0       	rjmp	.+178    	; 0x318e <action_for_key+0x166>
    30dc:	84 3b       	cpi	r24, 0xB4	; 180
    30de:	09 f4       	brne	.+2      	; 0x30e2 <action_for_key+0xba>
    30e0:	59 c0       	rjmp	.+178    	; 0x3194 <action_for_key+0x16c>
    30e2:	85 3b       	cpi	r24, 0xB5	; 181
    30e4:	09 f4       	brne	.+2      	; 0x30e8 <action_for_key+0xc0>
    30e6:	59 c0       	rjmp	.+178    	; 0x319a <action_for_key+0x172>
    30e8:	86 3b       	cpi	r24, 0xB6	; 182
    30ea:	09 f4       	brne	.+2      	; 0x30ee <action_for_key+0xc6>
    30ec:	59 c0       	rjmp	.+178    	; 0x31a0 <action_for_key+0x178>
    30ee:	87 3b       	cpi	r24, 0xB7	; 183
    30f0:	09 f4       	brne	.+2      	; 0x30f4 <action_for_key+0xcc>
    30f2:	59 c0       	rjmp	.+178    	; 0x31a6 <action_for_key+0x17e>
    30f4:	88 3b       	cpi	r24, 0xB8	; 184
    30f6:	09 f4       	brne	.+2      	; 0x30fa <action_for_key+0xd2>
    30f8:	59 c0       	rjmp	.+178    	; 0x31ac <action_for_key+0x184>
    30fa:	89 3b       	cpi	r24, 0xB9	; 185
    30fc:	09 f4       	brne	.+2      	; 0x3100 <action_for_key+0xd8>
    30fe:	59 c0       	rjmp	.+178    	; 0x31b2 <action_for_key+0x18a>
    3100:	8a 3b       	cpi	r24, 0xBA	; 186
    3102:	09 f0       	breq	.+2      	; 0x3106 <action_for_key+0xde>
    3104:	59 c0       	rjmp	.+178    	; 0x31b8 <action_for_key+0x190>
    3106:	2a e2       	ldi	r18, 0x2A	; 42
    3108:	36 e4       	ldi	r19, 0x46	; 70
    310a:	58 c0       	rjmp	.+176    	; 0x31bc <action_for_key+0x194>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    310c:	28 2f       	mov	r18, r24
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	30 65       	ori	r19, 0x50	; 80
    3112:	54 c0       	rjmp	.+168    	; 0x31bc <action_for_key+0x194>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    3114:	0e 94 25 12 	call	0x244a	; 0x244a <clear_keyboard>
    3118:	2f ef       	ldi	r18, 0xFF	; 255
    311a:	80 e7       	ldi	r24, 0x70	; 112
    311c:	92 e0       	ldi	r25, 0x02	; 2
    311e:	21 50       	subi	r18, 0x01	; 1
    3120:	80 40       	sbci	r24, 0x00	; 0
    3122:	90 40       	sbci	r25, 0x00	; 0
    3124:	e1 f7       	brne	.-8      	; 0x311e <action_for_key+0xf6>
    3126:	00 c0       	rjmp	.+0      	; 0x3128 <action_for_key+0x100>
    3128:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    312a:	0e 94 8b 19 	call	0x3316	; 0x3316 <bootloader_jump>
            break;
        default:
            action.code = ACTION_NO;
    312e:	20 e0       	ldi	r18, 0x00	; 0
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	44 c0       	rjmp	.+136    	; 0x31bc <action_for_key+0x194>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3134:	21 e8       	ldi	r18, 0x81	; 129
    3136:	30 e4       	ldi	r19, 0x40	; 64
    3138:	41 c0       	rjmp	.+130    	; 0x31bc <action_for_key+0x194>
    313a:	23 e8       	ldi	r18, 0x83	; 131
    313c:	30 e4       	ldi	r19, 0x40	; 64
    313e:	3e c0       	rjmp	.+124    	; 0x31bc <action_for_key+0x194>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3140:	22 ee       	ldi	r18, 0xE2	; 226
    3142:	34 e4       	ldi	r19, 0x44	; 68
    3144:	3b c0       	rjmp	.+118    	; 0x31bc <action_for_key+0x194>
    3146:	29 ee       	ldi	r18, 0xE9	; 233
    3148:	34 e4       	ldi	r19, 0x44	; 68
    314a:	38 c0       	rjmp	.+112    	; 0x31bc <action_for_key+0x194>
    314c:	2a ee       	ldi	r18, 0xEA	; 234
    314e:	34 e4       	ldi	r19, 0x44	; 68
    3150:	35 c0       	rjmp	.+106    	; 0x31bc <action_for_key+0x194>
    3152:	25 eb       	ldi	r18, 0xB5	; 181
    3154:	34 e4       	ldi	r19, 0x44	; 68
    3156:	32 c0       	rjmp	.+100    	; 0x31bc <action_for_key+0x194>
    3158:	26 eb       	ldi	r18, 0xB6	; 182
    315a:	34 e4       	ldi	r19, 0x44	; 68
    315c:	2f c0       	rjmp	.+94     	; 0x31bc <action_for_key+0x194>
    315e:	23 eb       	ldi	r18, 0xB3	; 179
    3160:	34 e4       	ldi	r19, 0x44	; 68
    3162:	2c c0       	rjmp	.+88     	; 0x31bc <action_for_key+0x194>
    3164:	24 eb       	ldi	r18, 0xB4	; 180
    3166:	34 e4       	ldi	r19, 0x44	; 68
    3168:	29 c0       	rjmp	.+82     	; 0x31bc <action_for_key+0x194>
    316a:	27 eb       	ldi	r18, 0xB7	; 183
    316c:	34 e4       	ldi	r19, 0x44	; 68
    316e:	26 c0       	rjmp	.+76     	; 0x31bc <action_for_key+0x194>
    3170:	2c ec       	ldi	r18, 0xCC	; 204
    3172:	34 e4       	ldi	r19, 0x44	; 68
    3174:	23 c0       	rjmp	.+70     	; 0x31bc <action_for_key+0x194>
    3176:	2d ec       	ldi	r18, 0xCD	; 205
    3178:	34 e4       	ldi	r19, 0x44	; 68
    317a:	20 c0       	rjmp	.+64     	; 0x31bc <action_for_key+0x194>
    317c:	23 e8       	ldi	r18, 0x83	; 131
    317e:	35 e4       	ldi	r19, 0x45	; 69
    3180:	1d c0       	rjmp	.+58     	; 0x31bc <action_for_key+0x194>
    3182:	2a e8       	ldi	r18, 0x8A	; 138
    3184:	35 e4       	ldi	r19, 0x45	; 69
    3186:	1a c0       	rjmp	.+52     	; 0x31bc <action_for_key+0x194>
    3188:	22 e9       	ldi	r18, 0x92	; 146
    318a:	35 e4       	ldi	r19, 0x45	; 69
    318c:	17 c0       	rjmp	.+46     	; 0x31bc <action_for_key+0x194>
    318e:	24 e9       	ldi	r18, 0x94	; 148
    3190:	35 e4       	ldi	r19, 0x45	; 69
    3192:	14 c0       	rjmp	.+40     	; 0x31bc <action_for_key+0x194>
    3194:	21 e2       	ldi	r18, 0x21	; 33
    3196:	36 e4       	ldi	r19, 0x46	; 70
    3198:	11 c0       	rjmp	.+34     	; 0x31bc <action_for_key+0x194>
    319a:	23 e2       	ldi	r18, 0x23	; 35
    319c:	36 e4       	ldi	r19, 0x46	; 70
    319e:	0e c0       	rjmp	.+28     	; 0x31bc <action_for_key+0x194>
    31a0:	24 e2       	ldi	r18, 0x24	; 36
    31a2:	36 e4       	ldi	r19, 0x46	; 70
    31a4:	0b c0       	rjmp	.+22     	; 0x31bc <action_for_key+0x194>
    31a6:	25 e2       	ldi	r18, 0x25	; 37
    31a8:	36 e4       	ldi	r19, 0x46	; 70
    31aa:	08 c0       	rjmp	.+16     	; 0x31bc <action_for_key+0x194>
    31ac:	26 e2       	ldi	r18, 0x26	; 38
    31ae:	36 e4       	ldi	r19, 0x46	; 70
    31b0:	05 c0       	rjmp	.+10     	; 0x31bc <action_for_key+0x194>
    31b2:	27 e2       	ldi	r18, 0x27	; 39
    31b4:	36 e4       	ldi	r19, 0x46	; 70
    31b6:	02 c0       	rjmp	.+4      	; 0x31bc <action_for_key+0x194>
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	34 e4       	ldi	r19, 0x44	; 68
    31bc:	c9 01       	movw	r24, r18
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    }
}
    31be:	08 95       	ret

000031c0 <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	08 95       	ret

000031c6 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    31c6:	90 93 19 01 	sts	0x0119, r25
    31ca:	80 93 18 01 	sts	0x0118, r24
    31ce:	08 95       	ret

000031d0 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    31d0:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    31d2:	98 2f       	mov	r25, r24
    31d4:	9c 7c       	andi	r25, 0xCC	; 204
    31d6:	96 95       	lsr	r25
    31d8:	96 95       	lsr	r25
    31da:	83 73       	andi	r24, 0x33	; 51
    31dc:	44 e0       	ldi	r20, 0x04	; 4
    31de:	84 9f       	mul	r24, r20
    31e0:	90 01       	movw	r18, r0
    31e2:	11 24       	eor	r1, r1
    31e4:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    31e6:	89 2f       	mov	r24, r25
    31e8:	8a 7a       	andi	r24, 0xAA	; 170
    31ea:	86 95       	lsr	r24
    31ec:	95 75       	andi	r25, 0x55	; 85
    31ee:	99 0f       	add	r25, r25
    return bits;
}
    31f0:	89 2b       	or	r24, r25
    31f2:	08 95       	ret

000031f4 <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    31f4:	1f 93       	push	r17
    31f6:	cf 93       	push	r28
    31f8:	df 93       	push	r29
    31fa:	1f 92       	push	r1
    31fc:	cd b7       	in	r28, 0x3d	; 61
    31fe:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3200:	99 83       	std	Y+1, r25	; 0x01
    3202:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <bitrev>
    3206:	18 2f       	mov	r17, r24
    3208:	99 81       	ldd	r25, Y+1	; 0x01
    320a:	89 2f       	mov	r24, r25
    320c:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <bitrev>
    3210:	31 2f       	mov	r19, r17
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	28 2b       	or	r18, r24
    return bits;
}
    3216:	c9 01       	movw	r24, r18
    3218:	0f 90       	pop	r0
    321a:	df 91       	pop	r29
    321c:	cf 91       	pop	r28
    321e:	1f 91       	pop	r17
    3220:	08 95       	ret

00003222 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3222:	80 91 c6 01 	lds	r24, 0x01C6
    3226:	84 30       	cpi	r24, 0x04	; 4
    3228:	09 f1       	breq	.+66     	; 0x326c <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    322a:	10 92 bb 01 	sts	0x01BB, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    322e:	20 e4       	ldi	r18, 0x40	; 64
    3230:	88 e1       	ldi	r24, 0x18	; 24
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	0f b6       	in	r0, 0x3f	; 63
    3236:	f8 94       	cli
    3238:	a8 95       	wdr
    323a:	80 93 60 00 	sts	0x0060, r24
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3244:	83 b7       	in	r24, 0x33	; 51
    3246:	81 7f       	andi	r24, 0xF1	; 241
    3248:	84 60       	ori	r24, 0x04	; 4
    324a:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    324c:	83 b7       	in	r24, 0x33	; 51
    324e:	81 60       	ori	r24, 0x01	; 1
    3250:	83 bf       	out	0x33, r24	; 51
    sei();
    3252:	78 94       	sei
    sleep_cpu();
    3254:	88 95       	sleep
    sleep_disable();
    3256:	83 b7       	in	r24, 0x33	; 51
    3258:	8e 7f       	andi	r24, 0xFE	; 254
    325a:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    325c:	88 e1       	ldi	r24, 0x18	; 24
    325e:	0f b6       	in	r0, 0x3f	; 63
    3260:	f8 94       	cli
    3262:	80 93 60 00 	sts	0x0060, r24
    3266:	10 92 60 00 	sts	0x0060, r1
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	08 95       	ret

0000326e <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    326e:	08 95       	ret

00003270 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    3270:	08 95       	ret

00003272 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    3272:	cf 93       	push	r28
    matrix_power_up();
    3274:	0e 94 37 19 	call	0x326e	; 0x326e <matrix_power_up>
    matrix_scan();
    3278:	0e 94 61 03 	call	0x6c2	; 0x6c2 <matrix_scan>
    matrix_power_down();
    327c:	0e 94 38 19 	call	0x3270	; 0x3270 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3280:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3282:	8c 2f       	mov	r24, r28
    3284:	0e 94 a3 04 	call	0x946	; 0x946 <matrix_get_row>
    3288:	89 2b       	or	r24, r25
    328a:	29 f4       	brne	.+10     	; 0x3296 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    328c:	cf 5f       	subi	r28, 0xFF	; 255
    328e:	c8 30       	cpi	r28, 0x08	; 8
    3290:	c1 f7       	brne	.-16     	; 0x3282 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	01 c0       	rjmp	.+2      	; 0x3298 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3296:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3298:	cf 91       	pop	r28
    329a:	08 95       	ret

0000329c <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    329c:	0c 94 25 12 	jmp	0x244a	; 0x244a <clear_keyboard>

000032a0 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    32a0:	82 e0       	ldi	r24, 0x02	; 2
    32a2:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    32a4:	93 e0       	ldi	r25, 0x03	; 3
    32a6:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    32a8:	9a ef       	ldi	r25, 0xFA	; 250
    32aa:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    32ac:	80 93 6e 00 	sts	0x006E, r24
    32b0:	08 95       	ret

000032b2 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    32b2:	8f b7       	in	r24, 0x3f	; 63
    cli();
    32b4:	f8 94       	cli
    t = timer_count;
    32b6:	40 91 bc 01 	lds	r20, 0x01BC
    32ba:	50 91 bd 01 	lds	r21, 0x01BD
    32be:	60 91 be 01 	lds	r22, 0x01BE
    32c2:	70 91 bf 01 	lds	r23, 0x01BF
    SREG = sreg;
    32c6:	8f bf       	out	0x3f, r24	; 63

    return (t & 0xFFFF);
}
    32c8:	ca 01       	movw	r24, r20
    32ca:	08 95       	ret

000032cc <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    32cc:	1f 92       	push	r1
    32ce:	0f 92       	push	r0
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	0f 92       	push	r0
    32d4:	11 24       	eor	r1, r1
    32d6:	8f 93       	push	r24
    32d8:	9f 93       	push	r25
    32da:	af 93       	push	r26
    32dc:	bf 93       	push	r27
    timer_count++;
    32de:	80 91 bc 01 	lds	r24, 0x01BC
    32e2:	90 91 bd 01 	lds	r25, 0x01BD
    32e6:	a0 91 be 01 	lds	r26, 0x01BE
    32ea:	b0 91 bf 01 	lds	r27, 0x01BF
    32ee:	01 96       	adiw	r24, 0x01	; 1
    32f0:	a1 1d       	adc	r26, r1
    32f2:	b1 1d       	adc	r27, r1
    32f4:	80 93 bc 01 	sts	0x01BC, r24
    32f8:	90 93 bd 01 	sts	0x01BD, r25
    32fc:	a0 93 be 01 	sts	0x01BE, r26
    3300:	b0 93 bf 01 	sts	0x01BF, r27
}
    3304:	bf 91       	pop	r27
    3306:	af 91       	pop	r26
    3308:	9f 91       	pop	r25
    330a:	8f 91       	pop	r24
    330c:	0f 90       	pop	r0
    330e:	0f be       	out	0x3f, r0	; 63
    3310:	0f 90       	pop	r0
    3312:	1f 90       	pop	r1
    3314:	18 95       	reti

00003316 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3316:	0e 94 9b 09 	call	0x1336	; 0x1336 <USB_Disable>
    cli();
    331a:	f8 94       	cli
    331c:	2f ef       	ldi	r18, 0xFF	; 255
    331e:	87 ea       	ldi	r24, 0xA7	; 167
    3320:	91 e6       	ldi	r25, 0x61	; 97
    3322:	21 50       	subi	r18, 0x01	; 1
    3324:	80 40       	sbci	r24, 0x00	; 0
    3326:	90 40       	sbci	r25, 0x00	; 0
    3328:	e1 f7       	brne	.-8      	; 0x3322 <bootloader_jump+0xc>
    332a:	00 c0       	rjmp	.+0      	; 0x332c <bootloader_jump+0x16>
    332c:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    332e:	87 e0       	ldi	r24, 0x07	; 7
    3330:	90 eb       	ldi	r25, 0xB0	; 176
    3332:	dc 01       	movw	r26, r24
    3334:	80 93 cf 01 	sts	0x01CF, r24
    3338:	90 93 d0 01 	sts	0x01D0, r25
    333c:	a0 93 d1 01 	sts	0x01D1, r26
    3340:	b0 93 d2 01 	sts	0x01D2, r27
    wdt_enable(WDTO_250MS);
    3344:	2c e0       	ldi	r18, 0x0C	; 12
    3346:	88 e1       	ldi	r24, 0x18	; 24
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	0f b6       	in	r0, 0x3f	; 63
    334c:	f8 94       	cli
    334e:	a8 95       	wdr
    3350:	80 93 60 00 	sts	0x0060, r24
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	20 93 60 00 	sts	0x0060, r18
    335a:	ff cf       	rjmp	.-2      	; 0x335a <bootloader_jump+0x44>

0000335c <sleep_led_init>:

void sleep_led_init(void)
{
    /* Timer1 setup */
    /* CTC mode */
    TCCR1B |= _BV(WGM12);
    335c:	e1 e8       	ldi	r30, 0x81	; 129
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
    3362:	88 60       	ori	r24, 0x08	; 8
    3364:	80 83       	st	Z, r24
    /* Clock selelct: clk/1 */
    TCCR1B |= _BV(CS10);
    3366:	80 81       	ld	r24, Z
    3368:	81 60       	ori	r24, 0x01	; 1
    336a:	80 83       	st	Z, r24
    /* Set TOP value */
    uint8_t sreg = SREG;
    336c:	8f b7       	in	r24, 0x3f	; 63
    cli();
    336e:	f8 94       	cli
    OCR1AH = (SLEEP_LED_TIMER_TOP>>8)&0xff;
    3370:	93 e0       	ldi	r25, 0x03	; 3
    3372:	90 93 89 00 	sts	0x0089, r25
    OCR1AL = SLEEP_LED_TIMER_TOP&0xff;
    3376:	90 ed       	ldi	r25, 0xD0	; 208
    3378:	90 93 88 00 	sts	0x0088, r25
    SREG = sreg;
    337c:	8f bf       	out	0x3f, r24	; 63
    337e:	08 95       	ret

00003380 <sleep_led_enable>:
}

void sleep_led_enable(void)
{
    /* Enable Compare Match Interrupt */
    TIMSK1 |= _BV(OCIE1A);
    3380:	ef e6       	ldi	r30, 0x6F	; 111
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	80 81       	ld	r24, Z
    3386:	82 60       	ori	r24, 0x02	; 2
    3388:	80 83       	st	Z, r24
    338a:	08 95       	ret

0000338c <sleep_led_disable>:
}

void sleep_led_disable(void)
{
    /* Disable Compare Match Interrupt */
    TIMSK1 &= ~_BV(OCIE1A);
    338c:	ef e6       	ldi	r30, 0x6F	; 111
    338e:	f0 e0       	ldi	r31, 0x00	; 0
    3390:	80 81       	ld	r24, Z
    3392:	8d 7f       	andi	r24, 0xFD	; 253
    3394:	80 83       	st	Z, r24
    3396:	08 95       	ret

00003398 <__vector_17>:
255, 252, 245, 233, 218, 199, 179, 157, 135, 113, 93, 74, 58, 44, 32, 23,
15, 10, 6, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

ISR(TIMER1_COMPA_vect)
{
    3398:	1f 92       	push	r1
    339a:	0f 92       	push	r0
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	0f 92       	push	r0
    33a0:	11 24       	eor	r1, r1
    33a2:	0b b6       	in	r0, 0x3b	; 59
    33a4:	0f 92       	push	r0
    33a6:	2f 93       	push	r18
    33a8:	3f 93       	push	r19
    33aa:	4f 93       	push	r20
    33ac:	5f 93       	push	r21
    33ae:	6f 93       	push	r22
    33b0:	7f 93       	push	r23
    33b2:	8f 93       	push	r24
    33b4:	9f 93       	push	r25
    33b6:	af 93       	push	r26
    33b8:	bf 93       	push	r27
    33ba:	ef 93       	push	r30
    33bc:	ff 93       	push	r31
            uint8_t duration:2;
            uint8_t index:6;
        } pwm;
    } timer = { .row = 0 };

    timer.row++;
    33be:	80 91 c0 01 	lds	r24, 0x01C0
    33c2:	90 91 c1 01 	lds	r25, 0x01C1
    33c6:	01 96       	adiw	r24, 0x01	; 1
    33c8:	90 93 c1 01 	sts	0x01C1, r25
    33cc:	80 93 c0 01 	sts	0x01C0, r24
    
    // LED on
    if (timer.pwm.count == 0) {
    33d0:	81 11       	cpse	r24, r1
    33d2:	03 c0       	rjmp	.+6      	; 0x33da <__vector_17+0x42>
        led_set(1<<USB_LED_CAPS_LOCK);
    33d4:	82 e0       	ldi	r24, 0x02	; 2
    33d6:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <led_set>
    }
    // LED off
    if (timer.pwm.count == pgm_read_byte(&breathing_table[timer.pwm.index])) {
    33da:	e0 91 c1 01 	lds	r30, 0x01C1
    33de:	e6 95       	lsr	r30
    33e0:	e6 95       	lsr	r30
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	e9 5c       	subi	r30, 0xC9	; 201
    33e6:	fc 4f       	sbci	r31, 0xFC	; 252
    33e8:	e4 91       	lpm	r30, Z
    33ea:	80 91 c0 01 	lds	r24, 0x01C0
    33ee:	8e 13       	cpse	r24, r30
    33f0:	03 c0       	rjmp	.+6      	; 0x33f8 <__vector_17+0x60>
        led_set(0);
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <led_set>
    }
}
    33f8:	ff 91       	pop	r31
    33fa:	ef 91       	pop	r30
    33fc:	bf 91       	pop	r27
    33fe:	af 91       	pop	r26
    3400:	9f 91       	pop	r25
    3402:	8f 91       	pop	r24
    3404:	7f 91       	pop	r23
    3406:	6f 91       	pop	r22
    3408:	5f 91       	pop	r21
    340a:	4f 91       	pop	r20
    340c:	3f 91       	pop	r19
    340e:	2f 91       	pop	r18
    3410:	0f 90       	pop	r0
    3412:	0b be       	out	0x3b, r0	; 59
    3414:	0f 90       	pop	r0
    3416:	0f be       	out	0x3f, r0	; 63
    3418:	0f 90       	pop	r0
    341a:	1f 90       	pop	r1
    341c:	18 95       	reti

0000341e <__udivmodqi4>:
    341e:	99 1b       	sub	r25, r25
    3420:	79 e0       	ldi	r23, 0x09	; 9
    3422:	04 c0       	rjmp	.+8      	; 0x342c <__udivmodqi4_ep>

00003424 <__udivmodqi4_loop>:
    3424:	99 1f       	adc	r25, r25
    3426:	96 17       	cp	r25, r22
    3428:	08 f0       	brcs	.+2      	; 0x342c <__udivmodqi4_ep>
    342a:	96 1b       	sub	r25, r22

0000342c <__udivmodqi4_ep>:
    342c:	88 1f       	adc	r24, r24
    342e:	7a 95       	dec	r23
    3430:	c9 f7       	brne	.-14     	; 0x3424 <__udivmodqi4_loop>
    3432:	80 95       	com	r24
    3434:	08 95       	ret

00003436 <_exit>:
    3436:	f8 94       	cli

00003438 <__stop_program>:
    3438:	ff cf       	rjmp	.-2      	; 0x3438 <__stop_program>
