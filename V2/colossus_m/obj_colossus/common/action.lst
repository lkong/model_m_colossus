   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.action_exec,"ax",@progbits
  12               	.global	action_exec
  14               	action_exec:
  15               	.LFB4:
  16               		.file 1 "../../../../tmk_core/common/action.c"
   1:../../../../tmk_core/common/action.c **** /*
   2:../../../../tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../../../tmk_core/common/action.c **** 
   4:../../../../tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../../../../tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:../../../../tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../../../tmk_core/common/action.c **** (at your option) any later version.
   8:../../../../tmk_core/common/action.c **** 
   9:../../../../tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:../../../../tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../../../tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../../../tmk_core/common/action.c **** GNU General Public License for more details.
  13:../../../../tmk_core/common/action.c **** 
  14:../../../../tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:../../../../tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../../../tmk_core/common/action.c **** */
  17:../../../../tmk_core/common/action.c **** #include "host.h"
  18:../../../../tmk_core/common/action.c **** #include "keycode.h"
  19:../../../../tmk_core/common/action.c **** #include "keyboard.h"
  20:../../../../tmk_core/common/action.c **** #include "mousekey.h"
  21:../../../../tmk_core/common/action.c **** #include "command.h"
  22:../../../../tmk_core/common/action.c **** #include "led.h"
  23:../../../../tmk_core/common/action.c **** #include "backlight.h"
  24:../../../../tmk_core/common/action.c **** #include "action_layer.h"
  25:../../../../tmk_core/common/action.c **** #include "action_tapping.h"
  26:../../../../tmk_core/common/action.c **** #include "action_macro.h"
  27:../../../../tmk_core/common/action.c **** #include "action_util.h"
  28:../../../../tmk_core/common/action.c **** #include "action.h"
  29:../../../../tmk_core/common/action.c **** #include "hook.h"
  30:../../../../tmk_core/common/action.c **** 
  31:../../../../tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  32:../../../../tmk_core/common/action.c **** #include "debug.h"
  33:../../../../tmk_core/common/action.c **** #else
  34:../../../../tmk_core/common/action.c **** #include "nodebug.h"
  35:../../../../tmk_core/common/action.c **** #endif
  36:../../../../tmk_core/common/action.c **** 
  37:../../../../tmk_core/common/action.c **** 
  38:../../../../tmk_core/common/action.c **** void action_exec(keyevent_t event)
  39:../../../../tmk_core/common/action.c **** {
  17               		.loc 1 39 0
  18               		.cfi_startproc
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27 0004 CDB7      		in r28,__SP_L__
  28 0006 DEB7      		in r29,__SP_H__
  29               	.LCFI2:
  30               		.cfi_def_cfa_register 28
  31 0008 2B97      		sbiw r28,11
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 15
  34 000a 0FB6      		in __tmp_reg__,__SREG__
  35 000c F894      		cli
  36 000e DEBF      		out __SP_H__,r29
  37 0010 0FBE      		out __SREG__,__tmp_reg__
  38 0012 CDBF      		out __SP_L__,r28
  39               	/* prologue: function */
  40               	/* frame size = 11 */
  41               	/* stack size = 13 */
  42               	.L__stack_usage = 13
  43 0014 4F83      		std Y+7,r20
  44 0016 5887      		std Y+8,r21
  45 0018 6987      		std Y+9,r22
  46 001a 7A87      		std Y+10,r23
  47 001c 8B87      		std Y+11,r24
  48               	.LBB4:
  49               	.LBB5:
  50               		.file 2 "../../../../tmk_core/common/keyboard.h"
   1:../../../../tmk_core/common/keyboard.h **** /*
   2:../../../../tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../../../tmk_core/common/keyboard.h **** 
   4:../../../../tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../../../tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../../../tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../../../tmk_core/common/keyboard.h **** (at your option) any later version.
   8:../../../../tmk_core/common/keyboard.h **** 
   9:../../../../tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../../../tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../../../tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../../../tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:../../../../tmk_core/common/keyboard.h **** 
  14:../../../../tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../../../tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../../../tmk_core/common/keyboard.h **** */
  17:../../../../tmk_core/common/keyboard.h **** 
  18:../../../../tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../../../tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:../../../../tmk_core/common/keyboard.h **** 
  21:../../../../tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:../../../../tmk_core/common/keyboard.h **** #include <stdint.h>
  23:../../../../tmk_core/common/keyboard.h **** 
  24:../../../../tmk_core/common/keyboard.h **** 
  25:../../../../tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:../../../../tmk_core/common/keyboard.h **** extern "C" {
  27:../../../../tmk_core/common/keyboard.h **** #endif
  28:../../../../tmk_core/common/keyboard.h **** 
  29:../../../../tmk_core/common/keyboard.h **** /* key matrix position */
  30:../../../../tmk_core/common/keyboard.h **** typedef struct {
  31:../../../../tmk_core/common/keyboard.h ****     uint8_t col;
  32:../../../../tmk_core/common/keyboard.h ****     uint8_t row;
  33:../../../../tmk_core/common/keyboard.h **** } keypos_t;
  34:../../../../tmk_core/common/keyboard.h **** 
  35:../../../../tmk_core/common/keyboard.h **** /* key event */
  36:../../../../tmk_core/common/keyboard.h **** typedef struct {
  37:../../../../tmk_core/common/keyboard.h ****     keypos_t key;
  38:../../../../tmk_core/common/keyboard.h ****     bool     pressed;
  39:../../../../tmk_core/common/keyboard.h ****     uint16_t time;
  40:../../../../tmk_core/common/keyboard.h **** } keyevent_t;
  41:../../../../tmk_core/common/keyboard.h **** 
  42:../../../../tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../../../tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../../../tmk_core/common/keyboard.h **** 
  45:../../../../tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:../../../../tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../../../tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../../../tmk_core/common/keyboard.h ****  */
  49:../../../../tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  51               		.loc 2 49 0
  52 001e 8A85      		ldd r24,Y+10
  53 0020 9B85      		ldd r25,Y+11
  54 0022 892B      		or r24,r25
  55 0024 01F0      		breq .L5
  56 0026 5F3F      		cpi r21,lo8(-1)
  57 0028 01F4      		brne .L6
  58 002a 81E0      		ldi r24,lo8(1)
  59 002c 90E0      		ldi r25,0
  60 002e 4F3F      		cpi r20,lo8(-1)
  61 0030 01F0      		breq .L2
  62 0032 00C0      		rjmp .L6
  63               	.L5:
  64 0034 81E0      		ldi r24,lo8(1)
  65 0036 90E0      		ldi r25,0
  66 0038 00C0      		rjmp .L2
  67               	.L6:
  68 003a 80E0      		ldi r24,0
  69 003c 90E0      		ldi r25,0
  70               	.L2:
  71               	.LBE5:
  72               	.LBE4:
  40:../../../../tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  73               		.loc 1 40 0
  74 003e 80FD      		sbrc r24,0
  75 0040 00C0      		rjmp .L4
  41:../../../../tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  42:../../../../tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  43:../../../../tmk_core/common/action.c ****         hook_matrix_change(event);
  76               		.loc 1 43 0
  77 0042 4F81      		ldd r20,Y+7
  78 0044 5885      		ldd r21,Y+8
  79 0046 6985      		ldd r22,Y+9
  80 0048 7A85      		ldd r23,Y+10
  81 004a 8B85      		ldd r24,Y+11
  82 004c 0E94 0000 		call hook_matrix_change
  83               	.LVL0:
  84               	.L4:
  44:../../../../tmk_core/common/action.c ****     }
  45:../../../../tmk_core/common/action.c **** 
  46:../../../../tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  85               		.loc 1 46 0
  86 0050 DE01      		movw r26,r28
  87 0052 1196      		adiw r26,1
  88 0054 86E0      		ldi r24,lo8(6)
  89 0056 FD01      		movw r30,r26
  90               		0:
  91 0058 1192      		st Z+,__zero_reg__
  92 005a 8A95      		dec r24
  93 005c 01F4      		brne 0b
  94 005e 85E0      		ldi r24,lo8(5)
  95 0060 FE01      		movw r30,r28
  96 0062 3796      		adiw r30,7
  97               		0:
  98 0064 0190      		ld r0,Z+
  99 0066 0D92      		st X+,r0
 100 0068 8A95      		dec r24
 101 006a 01F4      		brne 0b
  47:../../../../tmk_core/common/action.c **** 
  48:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  49:../../../../tmk_core/common/action.c ****     action_tapping_process(record);
 102               		.loc 1 49 0
 103 006c 4981      		ldd r20,Y+1
 104 006e 5A81      		ldd r21,Y+2
 105 0070 6B81      		ldd r22,Y+3
 106 0072 7C81      		ldd r23,Y+4
 107 0074 8D81      		ldd r24,Y+5
 108 0076 9E81      		ldd r25,Y+6
 109 0078 0E94 0000 		call action_tapping_process
 110               	.LVL1:
 111               	/* epilogue start */
  50:../../../../tmk_core/common/action.c **** #else
  51:../../../../tmk_core/common/action.c ****     process_action(&record);
  52:../../../../tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  53:../../../../tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  54:../../../../tmk_core/common/action.c ****     }
  55:../../../../tmk_core/common/action.c **** #endif
  56:../../../../tmk_core/common/action.c **** }
 112               		.loc 1 56 0
 113 007c 2B96      		adiw r28,11
 114 007e 0FB6      		in __tmp_reg__,__SREG__
 115 0080 F894      		cli
 116 0082 DEBF      		out __SP_H__,r29
 117 0084 0FBE      		out __SREG__,__tmp_reg__
 118 0086 CDBF      		out __SP_L__,r28
 119 0088 DF91      		pop r29
 120 008a CF91      		pop r28
 121 008c 0895      		ret
 122               		.cfi_endproc
 123               	.LFE4:
 125               		.section	.text.register_code,"ax",@progbits
 126               	.global	register_code
 128               	register_code:
 129               	.LFB6:
  57:../../../../tmk_core/common/action.c **** 
  58:../../../../tmk_core/common/action.c **** void process_action(keyrecord_t *record)
  59:../../../../tmk_core/common/action.c **** {
  60:../../../../tmk_core/common/action.c ****     keyevent_t event = record->event;
  61:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  62:../../../../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
  63:../../../../tmk_core/common/action.c **** #endif
  64:../../../../tmk_core/common/action.c **** 
  65:../../../../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
  66:../../../../tmk_core/common/action.c **** 
  67:../../../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event.key);
  68:../../../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
  69:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
  70:../../../../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
  71:../../../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  72:../../../../tmk_core/common/action.c **** #endif
  73:../../../../tmk_core/common/action.c ****     dprintln();
  74:../../../../tmk_core/common/action.c **** 
  75:../../../../tmk_core/common/action.c ****     switch (action.kind.id) {
  76:../../../../tmk_core/common/action.c ****         /* Key and Mods */
  77:../../../../tmk_core/common/action.c ****         case ACT_LMODS:
  78:../../../../tmk_core/common/action.c ****         case ACT_RMODS:
  79:../../../../tmk_core/common/action.c ****             {
  80:../../../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  81:../../../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
  82:../../../../tmk_core/common/action.c ****                 if (event.pressed) {
  83:../../../../tmk_core/common/action.c ****                     if (mods) {
  84:../../../../tmk_core/common/action.c ****                         add_weak_mods(mods);
  85:../../../../tmk_core/common/action.c ****                         send_keyboard_report();
  86:../../../../tmk_core/common/action.c ****                     }
  87:../../../../tmk_core/common/action.c ****                     register_code(action.key.code);
  88:../../../../tmk_core/common/action.c ****                 } else {
  89:../../../../tmk_core/common/action.c ****                     unregister_code(action.key.code);
  90:../../../../tmk_core/common/action.c ****                     if (mods) {
  91:../../../../tmk_core/common/action.c ****                         del_weak_mods(mods);
  92:../../../../tmk_core/common/action.c ****                         send_keyboard_report();
  93:../../../../tmk_core/common/action.c ****                     }
  94:../../../../tmk_core/common/action.c ****                 }
  95:../../../../tmk_core/common/action.c ****             }
  96:../../../../tmk_core/common/action.c ****             break;
  97:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  98:../../../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
  99:../../../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 100:../../../../tmk_core/common/action.c ****             {
 101:../../../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 102:../../../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 103:../../../../tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 104:../../../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 105:../../../../tmk_core/common/action.c ****                     case MODS_ONESHOT:
 106:../../../../tmk_core/common/action.c ****                         // Oneshot modifier
 107:../../../../tmk_core/common/action.c ****                         if (event.pressed) {
 108:../../../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 109:../../../../tmk_core/common/action.c ****                                 register_mods(mods);
 110:../../../../tmk_core/common/action.c ****                             }
 111:../../../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 112:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 113:../../../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 114:../../../../tmk_core/common/action.c ****                             }
 115:../../../../tmk_core/common/action.c ****                             else {
 116:../../../../tmk_core/common/action.c ****                                 register_mods(mods);
 117:../../../../tmk_core/common/action.c ****                             }
 118:../../../../tmk_core/common/action.c ****                         } else {
 119:../../../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 120:../../../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 121:../../../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 122:../../../../tmk_core/common/action.c ****                             }
 123:../../../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 124:../../../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 125:../../../../tmk_core/common/action.c ****                             }
 126:../../../../tmk_core/common/action.c ****                             else {
 127:../../../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 128:../../../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 129:../../../../tmk_core/common/action.c ****                             }
 130:../../../../tmk_core/common/action.c ****                         }
 131:../../../../tmk_core/common/action.c ****                         break;
 132:../../../../tmk_core/common/action.c ****     #endif
 133:../../../../tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 134:../../../../tmk_core/common/action.c ****                         if (event.pressed) {
 135:../../../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 136:../../../../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 137:../../../../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods off\n");
 138:../../../../tmk_core/common/action.c ****                                     unregister_mods(mods);
 139:../../../../tmk_core/common/action.c ****                                 } else {
 140:../../../../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods on\n");
 141:../../../../tmk_core/common/action.c ****                                     register_mods(mods);
 142:../../../../tmk_core/common/action.c ****                                 }
 143:../../../../tmk_core/common/action.c ****                             }
 144:../../../../tmk_core/common/action.c ****                         } else {
 145:../../../../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 146:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP_TOGGLE: release : unregister_mods\n");
 147:../../../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 148:../../../../tmk_core/common/action.c ****                             }
 149:../../../../tmk_core/common/action.c ****                         }
 150:../../../../tmk_core/common/action.c ****                         break;
 151:../../../../tmk_core/common/action.c ****                     default:
 152:../../../../tmk_core/common/action.c ****                         if (event.pressed) {
 153:../../../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 154:../../../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 155:../../../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 156:../../../../tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 157:../../../../tmk_core/common/action.c ****                                     record->tap.count = 0;
 158:../../../../tmk_core/common/action.c ****                                     register_mods(mods);
 159:../../../../tmk_core/common/action.c ****                                 } else {
 160:../../../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 161:../../../../tmk_core/common/action.c ****                                     register_code(action.key.code);
 162:../../../../tmk_core/common/action.c ****                                 }
 163:../../../../tmk_core/common/action.c ****                             } else {
 164:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 165:../../../../tmk_core/common/action.c ****                                 register_mods(mods);
 166:../../../../tmk_core/common/action.c ****                             }
 167:../../../../tmk_core/common/action.c ****                         } else {
 168:../../../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 169:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 170:../../../../tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 171:../../../../tmk_core/common/action.c ****                             } else {
 172:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 173:../../../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 174:../../../../tmk_core/common/action.c ****                             }
 175:../../../../tmk_core/common/action.c ****                         }
 176:../../../../tmk_core/common/action.c ****                         break;
 177:../../../../tmk_core/common/action.c ****                 }
 178:../../../../tmk_core/common/action.c ****             }
 179:../../../../tmk_core/common/action.c ****             break;
 180:../../../../tmk_core/common/action.c **** #endif
 181:../../../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 182:../../../../tmk_core/common/action.c ****         /* other HID usage */
 183:../../../../tmk_core/common/action.c ****         case ACT_USAGE:
 184:../../../../tmk_core/common/action.c ****             switch (action.usage.page) {
 185:../../../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 186:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 187:../../../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 188:../../../../tmk_core/common/action.c ****                     } else {
 189:../../../../tmk_core/common/action.c ****                         host_system_send(0);
 190:../../../../tmk_core/common/action.c ****                     }
 191:../../../../tmk_core/common/action.c ****                     break;
 192:../../../../tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 193:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 194:../../../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 195:../../../../tmk_core/common/action.c ****                     } else {
 196:../../../../tmk_core/common/action.c ****                         host_consumer_send(0);
 197:../../../../tmk_core/common/action.c ****                     }
 198:../../../../tmk_core/common/action.c ****                     break;
 199:../../../../tmk_core/common/action.c ****             }
 200:../../../../tmk_core/common/action.c ****             break;
 201:../../../../tmk_core/common/action.c **** #endif
 202:../../../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 203:../../../../tmk_core/common/action.c ****         /* Mouse key */
 204:../../../../tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 205:../../../../tmk_core/common/action.c ****             if (event.pressed) {
 206:../../../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 207:../../../../tmk_core/common/action.c ****                 mousekey_send();
 208:../../../../tmk_core/common/action.c ****             } else {
 209:../../../../tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 210:../../../../tmk_core/common/action.c ****                 mousekey_send();
 211:../../../../tmk_core/common/action.c ****             }
 212:../../../../tmk_core/common/action.c ****             break;
 213:../../../../tmk_core/common/action.c **** #endif
 214:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 215:../../../../tmk_core/common/action.c ****         case ACT_LAYER:
 216:../../../../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 217:../../../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 218:../../../../tmk_core/common/action.c ****                 if (!event.pressed) {
 219:../../../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 220:../../../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 221:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 222:../../../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 223:../../../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 224:../../../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 225:../../../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 226:../../../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 227:../../../../tmk_core/common/action.c ****                     }
 228:../../../../tmk_core/common/action.c ****                 }
 229:../../../../tmk_core/common/action.c ****             } else {
 230:../../../../tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 231:../../../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 232:../../../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 233:../../../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 234:../../../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 235:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 236:../../../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 237:../../../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 238:../../../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 239:../../../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 240:../../../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 241:../../../../tmk_core/common/action.c ****                     }
 242:../../../../tmk_core/common/action.c ****                 }
 243:../../../../tmk_core/common/action.c ****             }
 244:../../../../tmk_core/common/action.c ****             break;
 245:../../../../tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 246:../../../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 247:../../../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 248:../../../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 249:../../../../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 250:../../../../tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 251:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 252:../../../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 253:../../../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 254:../../../../tmk_core/common/action.c ****                     } else {
 255:../../../../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 256:../../../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 257:../../../../tmk_core/common/action.c ****                     }
 258:../../../../tmk_core/common/action.c ****                     break;
 259:../../../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 260:../../../../tmk_core/common/action.c ****                     /* tap toggle */
 261:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 262:../../../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 263:../../../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 264:../../../../tmk_core/common/action.c ****                         }
 265:../../../../tmk_core/common/action.c ****                     } else {
 266:../../../../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 267:../../../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 268:../../../../tmk_core/common/action.c ****                         }
 269:../../../../tmk_core/common/action.c ****                     }
 270:../../../../tmk_core/common/action.c ****                     break;
 271:../../../../tmk_core/common/action.c ****                 case OP_ON_OFF:
 272:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 273:../../../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 274:../../../../tmk_core/common/action.c ****                     break;
 275:../../../../tmk_core/common/action.c ****                 case OP_OFF_ON:
 276:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 277:../../../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 278:../../../../tmk_core/common/action.c ****                     break;
 279:../../../../tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 280:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 281:../../../../tmk_core/common/action.c ****                                     layer_clear();
 282:../../../../tmk_core/common/action.c ****                     break;
 283:../../../../tmk_core/common/action.c ****                 default:
 284:../../../../tmk_core/common/action.c ****                     /* tap key */
 285:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 286:../../../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 287:../../../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 288:../../../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 289:../../../../tmk_core/common/action.c ****                         } else {
 290:../../../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 291:../../../../tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 292:../../../../tmk_core/common/action.c ****                         }
 293:../../../../tmk_core/common/action.c ****                     } else {
 294:../../../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 295:../../../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 296:../../../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 297:../../../../tmk_core/common/action.c ****                         } else {
 298:../../../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 299:../../../../tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 300:../../../../tmk_core/common/action.c ****                         }
 301:../../../../tmk_core/common/action.c ****                     }
 302:../../../../tmk_core/common/action.c ****                     break;
 303:../../../../tmk_core/common/action.c ****             }
 304:../../../../tmk_core/common/action.c ****             break;
 305:../../../../tmk_core/common/action.c ****     #endif
 306:../../../../tmk_core/common/action.c **** #endif
 307:../../../../tmk_core/common/action.c ****         /* Extentions */
 308:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 309:../../../../tmk_core/common/action.c ****         case ACT_MACRO:
 310:../../../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 311:../../../../tmk_core/common/action.c ****             break;
 312:../../../../tmk_core/common/action.c **** #endif
 313:../../../../tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 314:../../../../tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 315:../../../../tmk_core/common/action.c ****             if (!event.pressed) {
 316:../../../../tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 317:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 318:../../../../tmk_core/common/action.c ****                         backlight_increase();
 319:../../../../tmk_core/common/action.c ****                         break;
 320:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 321:../../../../tmk_core/common/action.c ****                         backlight_decrease();
 322:../../../../tmk_core/common/action.c ****                         break;
 323:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 324:../../../../tmk_core/common/action.c ****                         backlight_toggle();
 325:../../../../tmk_core/common/action.c ****                         break;
 326:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 327:../../../../tmk_core/common/action.c ****                         backlight_step();
 328:../../../../tmk_core/common/action.c ****                         break;
 329:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 330:../../../../tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 331:../../../../tmk_core/common/action.c ****                         break;
 332:../../../../tmk_core/common/action.c ****                 }
 333:../../../../tmk_core/common/action.c ****             }
 334:../../../../tmk_core/common/action.c ****             break;
 335:../../../../tmk_core/common/action.c **** #endif
 336:../../../../tmk_core/common/action.c ****         case ACT_COMMAND:
 337:../../../../tmk_core/common/action.c ****             break;
 338:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 339:../../../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 340:../../../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 341:../../../../tmk_core/common/action.c ****             break;
 342:../../../../tmk_core/common/action.c **** #endif
 343:../../../../tmk_core/common/action.c ****         default:
 344:../../../../tmk_core/common/action.c ****             break;
 345:../../../../tmk_core/common/action.c ****     }
 346:../../../../tmk_core/common/action.c **** }
 347:../../../../tmk_core/common/action.c **** 
 348:../../../../tmk_core/common/action.c **** 
 349:../../../../tmk_core/common/action.c **** 
 350:../../../../tmk_core/common/action.c **** 
 351:../../../../tmk_core/common/action.c **** /*
 352:../../../../tmk_core/common/action.c ****  * Utilities for actions.
 353:../../../../tmk_core/common/action.c ****  */
 354:../../../../tmk_core/common/action.c **** void register_code(uint8_t code)
 355:../../../../tmk_core/common/action.c **** {
 130               		.loc 1 355 0
 131               		.cfi_startproc
 132               	.LVL2:
 133               	/* prologue: function */
 134               	/* frame size = 0 */
 135               	/* stack size = 0 */
 136               	.L__stack_usage = 0
 356:../../../../tmk_core/common/action.c ****     if (code == KC_NO) {
 137               		.loc 1 356 0
 138 0000 8823      		tst r24
 139 0002 01F4      		brne .+2
 140 0004 00C0      		rjmp .L10
 357:../../../../tmk_core/common/action.c ****         return;
 358:../../../../tmk_core/common/action.c ****     }
 359:../../../../tmk_core/common/action.c **** 
 360:../../../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 361:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 362:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 363:../../../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 364:../../../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 365:../../../../tmk_core/common/action.c **** #endif
 366:../../../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 367:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 368:../../../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 369:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 370:../../../../tmk_core/common/action.c ****     }
 371:../../../../tmk_core/common/action.c **** 
 372:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 373:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 374:../../../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 375:../../../../tmk_core/common/action.c **** #endif
 376:../../../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 377:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 378:../../../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 379:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 380:../../../../tmk_core/common/action.c ****     }
 381:../../../../tmk_core/common/action.c **** 
 382:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 383:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 384:../../../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 385:../../../../tmk_core/common/action.c **** #endif
 386:../../../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 387:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 388:../../../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 389:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 390:../../../../tmk_core/common/action.c ****     }
 391:../../../../tmk_core/common/action.c **** #endif
 392:../../../../tmk_core/common/action.c **** 
 393:../../../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 141               		.loc 1 393 0
 142 0006 982F      		mov r25,r24
 143 0008 9450      		subi r25,lo8(-(-4))
 144 000a 913A      		cpi r25,lo8(-95)
 145 000c 00F4      		brsh .L12
 394:../../../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 395:../../../../tmk_core/common/action.c ****         if (command_proc(code)) return;
 396:../../../../tmk_core/common/action.c **** 
 397:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 398:../../../../tmk_core/common/action.c **** /* TODO: remove
 399:../../../../tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 400:../../../../tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 401:../../../../tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 402:../../../../tmk_core/common/action.c **** 
 403:../../../../tmk_core/common/action.c ****             add_key(code);
 404:../../../../tmk_core/common/action.c ****             send_keyboard_report();
 405:../../../../tmk_core/common/action.c **** 
 406:../../../../tmk_core/common/action.c ****             set_mods(tmp_mods);
 407:../../../../tmk_core/common/action.c ****             send_keyboard_report();
 408:../../../../tmk_core/common/action.c ****             oneshot_cancel();
 409:../../../../tmk_core/common/action.c ****         } else 
 410:../../../../tmk_core/common/action.c **** */
 411:../../../../tmk_core/common/action.c **** #endif
 412:../../../../tmk_core/common/action.c ****         {
 413:../../../../tmk_core/common/action.c ****             add_key(code);
 146               		.loc 1 413 0
 147 000e 0E94 0000 		call add_key
 148               	.LVL3:
 149 0012 00C0      		rjmp .L43
 150               	.LVL4:
 151               	.L12:
 414:../../../../tmk_core/common/action.c ****             send_keyboard_report();
 415:../../../../tmk_core/common/action.c ****         }
 416:../../../../tmk_core/common/action.c ****     }
 417:../../../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 152               		.loc 1 417 0
 153 0014 982F      		mov r25,r24
 154 0016 905E      		subi r25,lo8(-(32))
 155 0018 9830      		cpi r25,lo8(8)
 156 001a 00F4      		brsh .L13
 418:../../../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 157               		.loc 1 418 0
 158 001c 282F      		mov r18,r24
 159 001e 2770      		andi r18,lo8(7)
 160 0020 81E0      		ldi r24,lo8(1)
 161 0022 90E0      		ldi r25,0
 162               	.LVL5:
 163 0024 00C0      		rjmp 2f
 164               		1:
 165 0026 880F      		lsl r24
 166               		2:
 167 0028 2A95      		dec r18
 168 002a 02F4      		brpl 1b
 169 002c 0E94 0000 		call add_mods
 170               	.LVL6:
 171               	.L43:
 419:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 172               		.loc 1 419 0
 173 0030 0C94 0000 		jmp send_keyboard_report
 174               	.LVL7:
 175               	.L13:
 420:../../../../tmk_core/common/action.c ****     }
 421:../../../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 176               		.loc 1 421 0
 177 0034 982F      		mov r25,r24
 178 0036 955A      		subi r25,lo8(-(91))
 179 0038 9330      		cpi r25,lo8(3)
 180 003a 00F4      		brsh .L14
 422:../../../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 181               		.loc 1 422 0
 182 003c 853A      		cpi r24,lo8(-91)
 183 003e 01F0      		breq .L17
 184               		.loc 1 422 0 is_stmt 0 discriminator 1
 185 0040 863A      		cpi r24,lo8(-90)
 186 0042 01F4      		brne .L18
 187               		.loc 1 422 0
 188 0044 82E8      		ldi r24,lo8(-126)
 189 0046 90E0      		ldi r25,0
 190               	.LVL8:
 191 0048 00C0      		rjmp .L15
 192               	.LVL9:
 193               	.L17:
 194 004a 81E8      		ldi r24,lo8(-127)
 195 004c 90E0      		ldi r25,0
 196               	.LVL10:
 197 004e 00C0      		rjmp .L15
 198               	.LVL11:
 199               	.L18:
 200 0050 83E8      		ldi r24,lo8(-125)
 201 0052 90E0      		ldi r25,0
 202               	.LVL12:
 203               	.L15:
 204               		.loc 1 422 0 discriminator 9
 205 0054 0C94 0000 		jmp host_system_send
 206               	.LVL13:
 207               	.L14:
 423:../../../../tmk_core/common/action.c ****     }
 424:../../../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 208               		.loc 1 424 0 is_stmt 1
 209 0058 982F      		mov r25,r24
 210 005a 985A      		subi r25,lo8(-(88))
 211 005c 9531      		cpi r25,lo8(21)
 212 005e 00F0      		brlo .+2
 213 0060 00C0      		rjmp .L10
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 214               		.loc 1 425 0
 215 0062 883A      		cpi r24,lo8(-88)
 216 0064 01F0      		breq .L19
 217               		.loc 1 425 0 is_stmt 0 discriminator 1
 218 0066 893A      		cpi r24,lo8(-87)
 219 0068 01F0      		breq .L20
 220               		.loc 1 425 0 discriminator 3
 221 006a 8A3A      		cpi r24,lo8(-86)
 222 006c 01F0      		breq .L21
 223               		.loc 1 425 0 discriminator 5
 224 006e 8B3A      		cpi r24,lo8(-85)
 225 0070 01F0      		breq .L22
 226               		.loc 1 425 0 discriminator 7
 227 0072 8C3A      		cpi r24,lo8(-84)
 228 0074 01F0      		breq .L23
 229               		.loc 1 425 0 discriminator 9
 230 0076 8D3A      		cpi r24,lo8(-83)
 231 0078 01F0      		breq .L24
 232               		.loc 1 425 0 discriminator 11
 233 007a 8E3A      		cpi r24,lo8(-82)
 234 007c 01F0      		breq .L25
 235               		.loc 1 425 0 discriminator 13
 236 007e 8F3A      		cpi r24,lo8(-81)
 237 0080 01F0      		breq .L26
 238               		.loc 1 425 0 discriminator 15
 239 0082 813B      		cpi r24,lo8(-79)
 240 0084 01F0      		breq .L27
 241               		.loc 1 425 0 discriminator 17
 242 0086 803B      		cpi r24,lo8(-80)
 243 0088 01F0      		breq .L28
 244               		.loc 1 425 0 discriminator 19
 245 008a 823B      		cpi r24,lo8(-78)
 246 008c 01F0      		breq .L29
 247               		.loc 1 425 0 discriminator 21
 248 008e 833B      		cpi r24,lo8(-77)
 249 0090 01F0      		breq .L30
 250               		.loc 1 425 0 discriminator 23
 251 0092 843B      		cpi r24,lo8(-76)
 252 0094 01F0      		breq .L31
 253               		.loc 1 425 0 discriminator 25
 254 0096 853B      		cpi r24,lo8(-75)
 255 0098 01F0      		breq .L32
 256               		.loc 1 425 0 discriminator 27
 257 009a 863B      		cpi r24,lo8(-74)
 258 009c 01F0      		breq .L33
 259               		.loc 1 425 0 discriminator 29
 260 009e 873B      		cpi r24,lo8(-73)
 261 00a0 01F0      		breq .L34
 262               		.loc 1 425 0 discriminator 31
 263 00a2 883B      		cpi r24,lo8(-72)
 264 00a4 01F0      		breq .L35
 265               		.loc 1 425 0 discriminator 33
 266 00a6 893B      		cpi r24,lo8(-71)
 267 00a8 01F0      		breq .L36
 268               		.loc 1 425 0 discriminator 35
 269 00aa 8A3B      		cpi r24,lo8(-70)
 270 00ac 01F0      		breq .L37
 271               		.loc 1 425 0 discriminator 37
 272 00ae 8B3B      		cpi r24,lo8(-69)
 273 00b0 01F0      		breq .L38
 274               		.loc 1 425 0 discriminator 39
 275 00b2 8C3B      		cpi r24,lo8(-68)
 276 00b4 01F0      		breq .+2
 277 00b6 00C0      		rjmp .L39
 278               		.loc 1 425 0
 279 00b8 8AE2      		ldi r24,lo8(42)
 280 00ba 92E0      		ldi r25,lo8(2)
 281               	.LVL14:
 282 00bc 00C0      		rjmp .L16
 283               	.LVL15:
 284               	.L19:
 285 00be 82EE      		ldi r24,lo8(-30)
 286 00c0 90E0      		ldi r25,0
 287               	.LVL16:
 288 00c2 00C0      		rjmp .L16
 289               	.LVL17:
 290               	.L20:
 291 00c4 89EE      		ldi r24,lo8(-23)
 292 00c6 90E0      		ldi r25,0
 293               	.LVL18:
 294 00c8 00C0      		rjmp .L16
 295               	.LVL19:
 296               	.L21:
 297 00ca 8AEE      		ldi r24,lo8(-22)
 298 00cc 90E0      		ldi r25,0
 299               	.LVL20:
 300 00ce 00C0      		rjmp .L16
 301               	.LVL21:
 302               	.L22:
 303 00d0 85EB      		ldi r24,lo8(-75)
 304 00d2 90E0      		ldi r25,0
 305               	.LVL22:
 306 00d4 00C0      		rjmp .L16
 307               	.LVL23:
 308               	.L23:
 309 00d6 86EB      		ldi r24,lo8(-74)
 310 00d8 90E0      		ldi r25,0
 311               	.LVL24:
 312 00da 00C0      		rjmp .L16
 313               	.LVL25:
 314               	.L24:
 315 00dc 83EB      		ldi r24,lo8(-77)
 316 00de 90E0      		ldi r25,0
 317               	.LVL26:
 318 00e0 00C0      		rjmp .L16
 319               	.LVL27:
 320               	.L25:
 321 00e2 84EB      		ldi r24,lo8(-76)
 322 00e4 90E0      		ldi r25,0
 323               	.LVL28:
 324 00e6 00C0      		rjmp .L16
 325               	.LVL29:
 326               	.L26:
 327 00e8 87EB      		ldi r24,lo8(-73)
 328 00ea 90E0      		ldi r25,0
 329               	.LVL30:
 330 00ec 00C0      		rjmp .L16
 331               	.LVL31:
 332               	.L27:
 333 00ee 8CEC      		ldi r24,lo8(-52)
 334 00f0 90E0      		ldi r25,0
 335               	.LVL32:
 336 00f2 00C0      		rjmp .L16
 337               	.LVL33:
 338               	.L28:
 339 00f4 8DEC      		ldi r24,lo8(-51)
 340 00f6 90E0      		ldi r25,0
 341               	.LVL34:
 342 00f8 00C0      		rjmp .L16
 343               	.LVL35:
 344               	.L29:
 345 00fa 83E8      		ldi r24,lo8(-125)
 346 00fc 91E0      		ldi r25,lo8(1)
 347               	.LVL36:
 348 00fe 00C0      		rjmp .L16
 349               	.LVL37:
 350               	.L30:
 351 0100 8AE8      		ldi r24,lo8(-118)
 352 0102 91E0      		ldi r25,lo8(1)
 353               	.LVL38:
 354 0104 00C0      		rjmp .L16
 355               	.LVL39:
 356               	.L31:
 357 0106 82E9      		ldi r24,lo8(-110)
 358 0108 91E0      		ldi r25,lo8(1)
 359               	.LVL40:
 360 010a 00C0      		rjmp .L16
 361               	.LVL41:
 362               	.L32:
 363 010c 84E9      		ldi r24,lo8(-108)
 364 010e 91E0      		ldi r25,lo8(1)
 365               	.LVL42:
 366 0110 00C0      		rjmp .L16
 367               	.LVL43:
 368               	.L33:
 369 0112 81E2      		ldi r24,lo8(33)
 370 0114 92E0      		ldi r25,lo8(2)
 371               	.LVL44:
 372 0116 00C0      		rjmp .L16
 373               	.LVL45:
 374               	.L34:
 375 0118 83E2      		ldi r24,lo8(35)
 376 011a 92E0      		ldi r25,lo8(2)
 377               	.LVL46:
 378 011c 00C0      		rjmp .L16
 379               	.LVL47:
 380               	.L35:
 381 011e 84E2      		ldi r24,lo8(36)
 382 0120 92E0      		ldi r25,lo8(2)
 383               	.LVL48:
 384 0122 00C0      		rjmp .L16
 385               	.LVL49:
 386               	.L36:
 387 0124 85E2      		ldi r24,lo8(37)
 388 0126 92E0      		ldi r25,lo8(2)
 389               	.LVL50:
 390 0128 00C0      		rjmp .L16
 391               	.LVL51:
 392               	.L37:
 393 012a 86E2      		ldi r24,lo8(38)
 394 012c 92E0      		ldi r25,lo8(2)
 395               	.LVL52:
 396 012e 00C0      		rjmp .L16
 397               	.LVL53:
 398               	.L38:
 399 0130 87E2      		ldi r24,lo8(39)
 400 0132 92E0      		ldi r25,lo8(2)
 401               	.LVL54:
 402 0134 00C0      		rjmp .L16
 403               	.LVL55:
 404               	.L39:
 405 0136 80E0      		ldi r24,0
 406 0138 90E0      		ldi r25,0
 407               	.LVL56:
 408               	.L16:
 409               		.loc 1 425 0 discriminator 63
 410 013a 0C94 0000 		jmp host_consumer_send
 411               	.LVL57:
 412               	.L10:
 413 013e 0895      		ret
 414               		.cfi_endproc
 415               	.LFE6:
 417               		.section	.text.unregister_code,"ax",@progbits
 418               	.global	unregister_code
 420               	unregister_code:
 421               	.LFB7:
 426:../../../../tmk_core/common/action.c ****     }
 427:../../../../tmk_core/common/action.c **** }
 428:../../../../tmk_core/common/action.c **** 
 429:../../../../tmk_core/common/action.c **** void unregister_code(uint8_t code)
 430:../../../../tmk_core/common/action.c **** {
 422               		.loc 1 430 0 is_stmt 1
 423               		.cfi_startproc
 424               	.LVL58:
 425               	/* prologue: function */
 426               	/* frame size = 0 */
 427               	/* stack size = 0 */
 428               	.L__stack_usage = 0
 431:../../../../tmk_core/common/action.c ****     if (code == KC_NO) {
 429               		.loc 1 431 0
 430 0000 8823      		tst r24
 431 0002 01F0      		breq .L44
 432:../../../../tmk_core/common/action.c ****         return;
 433:../../../../tmk_core/common/action.c ****     }
 434:../../../../tmk_core/common/action.c **** 
 435:../../../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 436:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 437:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 438:../../../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 439:../../../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 440:../../../../tmk_core/common/action.c **** #endif
 441:../../../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 442:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 443:../../../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 444:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 445:../../../../tmk_core/common/action.c ****     }
 446:../../../../tmk_core/common/action.c **** 
 447:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 448:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 449:../../../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 450:../../../../tmk_core/common/action.c **** #endif
 451:../../../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 452:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 453:../../../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 454:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 455:../../../../tmk_core/common/action.c ****     }
 456:../../../../tmk_core/common/action.c **** 
 457:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 458:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 459:../../../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 460:../../../../tmk_core/common/action.c **** #endif
 461:../../../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 462:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 463:../../../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 464:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 465:../../../../tmk_core/common/action.c ****     }
 466:../../../../tmk_core/common/action.c **** #endif
 467:../../../../tmk_core/common/action.c **** 
 468:../../../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 432               		.loc 1 468 0
 433 0004 982F      		mov r25,r24
 434 0006 9450      		subi r25,lo8(-(-4))
 435 0008 913A      		cpi r25,lo8(-95)
 436 000a 00F4      		brsh .L46
 469:../../../../tmk_core/common/action.c ****         del_key(code);
 437               		.loc 1 469 0
 438 000c 0E94 0000 		call del_key
 439               	.LVL59:
 440 0010 00C0      		rjmp .L52
 441               	.LVL60:
 442               	.L46:
 470:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 471:../../../../tmk_core/common/action.c ****     }
 472:../../../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 443               		.loc 1 472 0
 444 0012 982F      		mov r25,r24
 445 0014 905E      		subi r25,lo8(-(32))
 446 0016 9830      		cpi r25,lo8(8)
 447 0018 00F4      		brsh .L47
 473:../../../../tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 448               		.loc 1 473 0
 449 001a 282F      		mov r18,r24
 450 001c 2770      		andi r18,lo8(7)
 451 001e 81E0      		ldi r24,lo8(1)
 452 0020 90E0      		ldi r25,0
 453               	.LVL61:
 454 0022 00C0      		rjmp 2f
 455               		1:
 456 0024 880F      		lsl r24
 457               		2:
 458 0026 2A95      		dec r18
 459 0028 02F4      		brpl 1b
 460 002a 0E94 0000 		call del_mods
 461               	.LVL62:
 462               	.L52:
 474:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 463               		.loc 1 474 0
 464 002e 0C94 0000 		jmp send_keyboard_report
 465               	.LVL63:
 466               	.L47:
 475:../../../../tmk_core/common/action.c ****     }
 476:../../../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 467               		.loc 1 476 0
 468 0032 982F      		mov r25,r24
 469 0034 955A      		subi r25,lo8(-(91))
 470 0036 9330      		cpi r25,lo8(3)
 471 0038 00F4      		brsh .L48
 477:../../../../tmk_core/common/action.c ****         host_system_send(0);
 472               		.loc 1 477 0
 473 003a 80E0      		ldi r24,0
 474 003c 90E0      		ldi r25,0
 475               	.LVL64:
 476 003e 0C94 0000 		jmp host_system_send
 477               	.LVL65:
 478               	.L48:
 478:../../../../tmk_core/common/action.c ****     }
 479:../../../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 479               		.loc 1 479 0
 480 0042 885A      		subi r24,lo8(-(88))
 481               	.LVL66:
 482 0044 8531      		cpi r24,lo8(21)
 483 0046 00F4      		brsh .L44
 480:../../../../tmk_core/common/action.c ****         host_consumer_send(0);
 484               		.loc 1 480 0
 485 0048 80E0      		ldi r24,0
 486 004a 90E0      		ldi r25,0
 487 004c 0C94 0000 		jmp host_consumer_send
 488               	.LVL67:
 489               	.L44:
 490 0050 0895      		ret
 491               		.cfi_endproc
 492               	.LFE7:
 494               		.section	.text.register_mods,"ax",@progbits
 495               	.global	register_mods
 497               	register_mods:
 498               	.LFB8:
 481:../../../../tmk_core/common/action.c ****     }
 482:../../../../tmk_core/common/action.c **** }
 483:../../../../tmk_core/common/action.c **** 
 484:../../../../tmk_core/common/action.c **** void register_mods(uint8_t mods)
 485:../../../../tmk_core/common/action.c **** {
 499               		.loc 1 485 0
 500               		.cfi_startproc
 501               	.LVL68:
 502               	/* prologue: function */
 503               	/* frame size = 0 */
 504               	/* stack size = 0 */
 505               	.L__stack_usage = 0
 486:../../../../tmk_core/common/action.c ****     if (mods) {
 506               		.loc 1 486 0
 507 0000 8823      		tst r24
 508 0002 01F0      		breq .L53
 487:../../../../tmk_core/common/action.c ****         add_mods(mods);
 509               		.loc 1 487 0
 510 0004 0E94 0000 		call add_mods
 511               	.LVL69:
 488:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 512               		.loc 1 488 0
 513 0008 0C94 0000 		jmp send_keyboard_report
 514               	.LVL70:
 515               	.L53:
 516 000c 0895      		ret
 517               		.cfi_endproc
 518               	.LFE8:
 520               		.section	.text.unregister_mods,"ax",@progbits
 521               	.global	unregister_mods
 523               	unregister_mods:
 524               	.LFB9:
 489:../../../../tmk_core/common/action.c ****     }
 490:../../../../tmk_core/common/action.c **** }
 491:../../../../tmk_core/common/action.c **** 
 492:../../../../tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 493:../../../../tmk_core/common/action.c **** {
 525               		.loc 1 493 0
 526               		.cfi_startproc
 527               	.LVL71:
 528               	/* prologue: function */
 529               	/* frame size = 0 */
 530               	/* stack size = 0 */
 531               	.L__stack_usage = 0
 494:../../../../tmk_core/common/action.c ****     if (mods) {
 532               		.loc 1 494 0
 533 0000 8823      		tst r24
 534 0002 01F0      		breq .L55
 495:../../../../tmk_core/common/action.c ****         del_mods(mods);
 535               		.loc 1 495 0
 536 0004 0E94 0000 		call del_mods
 537               	.LVL72:
 496:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 538               		.loc 1 496 0
 539 0008 0C94 0000 		jmp send_keyboard_report
 540               	.LVL73:
 541               	.L55:
 542 000c 0895      		ret
 543               		.cfi_endproc
 544               	.LFE9:
 546               		.section	.text.process_action,"ax",@progbits
 547               	.global	process_action
 549               	process_action:
 550               	.LFB5:
  59:../../../../tmk_core/common/action.c **** {
 551               		.loc 1 59 0
 552               		.cfi_startproc
 553               	.LVL74:
 554 0000 8F92      		push r8
 555               	.LCFI4:
 556               		.cfi_def_cfa_offset 3
 557               		.cfi_offset 8, -2
 558 0002 9F92      		push r9
 559               	.LCFI5:
 560               		.cfi_def_cfa_offset 4
 561               		.cfi_offset 9, -3
 562 0004 AF92      		push r10
 563               	.LCFI6:
 564               		.cfi_def_cfa_offset 5
 565               		.cfi_offset 10, -4
 566 0006 BF92      		push r11
 567               	.LCFI7:
 568               		.cfi_def_cfa_offset 6
 569               		.cfi_offset 11, -5
 570 0008 0F93      		push r16
 571               	.LCFI8:
 572               		.cfi_def_cfa_offset 7
 573               		.cfi_offset 16, -6
 574 000a 1F93      		push r17
 575               	.LCFI9:
 576               		.cfi_def_cfa_offset 8
 577               		.cfi_offset 17, -7
 578 000c CF93      		push r28
 579               	.LCFI10:
 580               		.cfi_def_cfa_offset 9
 581               		.cfi_offset 28, -8
 582 000e DF93      		push r29
 583               	.LCFI11:
 584               		.cfi_def_cfa_offset 10
 585               		.cfi_offset 29, -9
 586 0010 CDB7      		in r28,__SP_L__
 587 0012 DEB7      		in r29,__SP_H__
 588               	.LCFI12:
 589               		.cfi_def_cfa_register 28
 590 0014 2797      		sbiw r28,7
 591               	.LCFI13:
 592               		.cfi_def_cfa_offset 17
 593 0016 0FB6      		in __tmp_reg__,__SREG__
 594 0018 F894      		cli
 595 001a DEBF      		out __SP_H__,r29
 596 001c 0FBE      		out __SREG__,__tmp_reg__
 597 001e CDBF      		out __SP_L__,r28
 598               	/* prologue: function */
 599               	/* frame size = 7 */
 600               	/* stack size = 15 */
 601               	.L__stack_usage = 15
 602 0020 5C01      		movw r10,r24
  60:../../../../tmk_core/common/action.c ****     keyevent_t event = record->event;
 603               		.loc 1 60 0
 604 0022 85E0      		ldi r24,lo8(5)
 605               	.LVL75:
 606 0024 F501      		movw r30,r10
 607 0026 DE01      		movw r26,r28
 608 0028 1196      		adiw r26,1
 609               		0:
 610 002a 0190      		ld r0,Z+
 611 002c 0D92      		st X+,r0
 612 002e 8A95      		dec r24
 613 0030 01F4      		brne 0b
 614 0032 F501      		movw r30,r10
 615 0034 3081      		ld r19,Z
 616 0036 2181      		ldd r18,Z+1
 617 0038 0281      		ldd r16,Z+2
  62:../../../../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 618               		.loc 1 62 0
 619 003a 1581      		ldd r17,Z+5
 620 003c 1295      		swap r17
 621 003e 1F70      		andi r17,lo8(15)
 622               	.LVL76:
 623               	.LBB12:
 624               	.LBB13:
 625               		.loc 2 49 0
 626 0040 8381      		ldd r24,Z+3
 627 0042 9481      		ldd r25,Z+4
 628 0044 892B      		or r24,r25
 629 0046 01F0      		breq .L124
 630 0048 2F3F      		cpi r18,lo8(-1)
 631 004a 01F4      		brne .L125
 632 004c 81E0      		ldi r24,lo8(1)
 633 004e 90E0      		ldi r25,0
 634 0050 3F3F      		cpi r19,lo8(-1)
 635 0052 01F0      		breq .L58
 636 0054 00C0      		rjmp .L125
 637               	.L124:
 638 0056 81E0      		ldi r24,lo8(1)
 639 0058 90E0      		ldi r25,0
 640 005a 00C0      		rjmp .L58
 641               	.L125:
 642 005c 80E0      		ldi r24,0
 643 005e 90E0      		ldi r25,0
 644               	.L58:
 645               	.LBE13:
 646               	.LBE12:
  65:../../../../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
 647               		.loc 1 65 0
 648 0060 80FD      		sbrc r24,0
 649 0062 00C0      		rjmp .L57
  67:../../../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event.key);
 650               		.loc 1 67 0
 651 0064 3983      		std Y+1,r19
 652 0066 2A83      		std Y+2,r18
 653 0068 8981      		ldd r24,Y+1
 654 006a 9A81      		ldd r25,Y+2
 655 006c 0E94 0000 		call layer_switch_get_action
 656               	.LVL77:
  70:../../../../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 657               		.loc 1 70 0
 658 0070 9E83      		std Y+6,r25
 659 0072 8F83      		std Y+7,r24
 660 0074 0E94 0000 		call layer_debug
 661               	.LVL78:
  71:../../../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 662               		.loc 1 71 0
 663 0078 0E94 0000 		call default_layer_debug
 664               	.LVL79:
  75:../../../../tmk_core/common/action.c ****     switch (action.kind.id) {
 665               		.loc 1 75 0
 666 007c 4E81      		ldd r20,Y+6
 667 007e 242F      		mov r18,r20
 668               	.LVL80:
 669 0080 2295      		swap r18
 670 0082 2F70      		andi r18,lo8(15)
 671 0084 30E0      		ldi r19,0
 672 0086 6F81      		ldd r22,Y+7
 673 0088 2430      		cpi r18,4
 674 008a 3105      		cpc r19,__zero_reg__
 675 008c 01F4      		brne .+2
 676 008e 00C0      		rjmp .L64
 677 0090 04F4      		brge .L69
 678 0092 842F      		mov r24,r20
 679 0094 807F      		andi r24,lo8(-16)
 680 0096 942F      		mov r25,r20
 681 0098 9F70      		andi r25,lo8(15)
 682 009a 2230      		cpi r18,2
 683 009c 3105      		cpc r19,__zero_reg__
 684 009e 04F0      		brlt .L62
 685 00a0 00C0      		rjmp .L149
 686               	.L69:
 687 00a2 2C30      		cpi r18,12
 688 00a4 3105      		cpc r19,__zero_reg__
 689 00a6 04F4      		brge .L70
 690 00a8 2A30      		cpi r18,10
 691 00aa 3105      		cpc r19,__zero_reg__
 692 00ac 04F0      		brlt .+2
 693 00ae 00C0      		rjmp .L66
 694 00b0 2830      		cpi r18,8
 695 00b2 3105      		cpc r19,__zero_reg__
 696 00b4 01F0      		breq .+2
 697 00b6 00C0      		rjmp .L57
 698 00b8 00C0      		rjmp .L65
 699               	.L70:
 700 00ba 2C30      		cpi r18,12
 701 00bc 3105      		cpc r19,__zero_reg__
 702 00be 01F4      		brne .+2
 703 00c0 00C0      		rjmp .L67
 704 00c2 2F30      		cpi r18,15
 705 00c4 3105      		cpc r19,__zero_reg__
 706 00c6 01F0      		breq .+2
 707 00c8 00C0      		rjmp .L57
 708 00ca 00C0      		rjmp .L68
 709               	.L62:
 710               	.LBB14:
  80:../../../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 711               		.loc 1 80 0
 712 00cc 992E      		mov r9,r25
 713 00ce 8111      		cpse r24,__zero_reg__
 714 00d0 00C0      		rjmp .L71
 715 00d2 00C0      		rjmp .L72
 716               	.L71:
  80:../../../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 717               		.loc 1 80 0 is_stmt 0 discriminator 2
 718 00d4 9294      		swap r9
 719 00d6 90EF      		ldi r25,lo8(-16)
 720 00d8 9922      		and r9,r25
 721               	.L72:
 722               	.LVL81:
  82:../../../../tmk_core/common/action.c ****                 if (event.pressed) {
 723               		.loc 1 82 0 is_stmt 1 discriminator 3
 724 00da 0023      		tst r16
 725 00dc 01F0      		breq .L73
  83:../../../../tmk_core/common/action.c ****                     if (mods) {
 726               		.loc 1 83 0
 727 00de 9920      		tst r9
 728 00e0 01F4      		brne .+2
 729 00e2 00C0      		rjmp .L156
  84:../../../../tmk_core/common/action.c ****                         add_weak_mods(mods);
 730               		.loc 1 84 0
 731 00e4 892D      		mov r24,r9
 732 00e6 6F83      		std Y+7,r22
 733 00e8 0E94 0000 		call add_weak_mods
 734               	.LVL82:
  85:../../../../tmk_core/common/action.c ****                         send_keyboard_report();
 735               		.loc 1 85 0
 736 00ec 0E94 0000 		call send_keyboard_report
 737               	.LVL83:
 738 00f0 6F81      		ldd r22,Y+7
 739 00f2 00C0      		rjmp .L156
 740               	.L73:
 741               	.LVL84:
  89:../../../../tmk_core/common/action.c ****                     unregister_code(action.key.code);
 742               		.loc 1 89 0
 743 00f4 862F      		mov r24,r22
 744 00f6 0E94 0000 		call unregister_code
 745               	.LVL85:
  90:../../../../tmk_core/common/action.c ****                     if (mods) {
 746               		.loc 1 90 0
 747 00fa 9920      		tst r9
 748 00fc 01F4      		brne .+2
 749 00fe 00C0      		rjmp .L57
  91:../../../../tmk_core/common/action.c ****                         del_weak_mods(mods);
 750               		.loc 1 91 0
 751 0100 892D      		mov r24,r9
 752 0102 0E94 0000 		call del_weak_mods
 753               	.LVL86:
 754               	/* epilogue start */
 755               	.LBE14:
 346:../../../../tmk_core/common/action.c **** }
 756               		.loc 1 346 0
 757 0106 2796      		adiw r28,7
 758 0108 0FB6      		in __tmp_reg__,__SREG__
 759 010a F894      		cli
 760 010c DEBF      		out __SP_H__,r29
 761 010e 0FBE      		out __SREG__,__tmp_reg__
 762 0110 CDBF      		out __SP_L__,r28
 763 0112 DF91      		pop r29
 764 0114 CF91      		pop r28
 765 0116 1F91      		pop r17
 766               	.LVL87:
 767 0118 0F91      		pop r16
 768 011a BF90      		pop r11
 769 011c AF90      		pop r10
 770               	.LVL88:
 771 011e 9F90      		pop r9
 772               	.LVL89:
 773 0120 8F90      		pop r8
 774               	.LBB15:
  92:../../../../tmk_core/common/action.c ****                         send_keyboard_report();
 775               		.loc 1 92 0
 776 0122 0C94 0000 		jmp send_keyboard_report
 777               	.LVL90:
 778               	.L149:
 779               	.LBE15:
 780               	.LBB16:
 101:../../../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 781               		.loc 1 101 0
 782 0126 992E      		mov r9,r25
 783 0128 8032      		cpi r24,lo8(32)
 784 012a 01F4      		brne .L76
 785 012c 00C0      		rjmp .L77
 786               	.L76:
 101:../../../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 787               		.loc 1 101 0 is_stmt 0 discriminator 2
 788 012e 9294      		swap r9
 789 0130 80EF      		ldi r24,lo8(-16)
 790 0132 9822      		and r9,r24
 791               	.L77:
 792               	.LVL91:
 103:../../../../tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 793               		.loc 1 103 0 is_stmt 1 discriminator 3
 794 0134 6623      		tst r22
 795               	.LVL92:
 796 0136 01F0      		breq .L79
 797 0138 6130      		cpi r22,lo8(1)
 798 013a 01F0      		breq .+2
 799 013c 00C0      		rjmp .L150
 800 013e 00C0      		rjmp .L80
 801               	.L79:
 107:../../../../tmk_core/common/action.c ****                         if (event.pressed) {
 802               		.loc 1 107 0
 803 0140 0023      		tst r16
 804 0142 01F0      		breq .L81
 109:../../../../tmk_core/common/action.c ****                                 register_mods(mods);
 805               		.loc 1 109 0
 806 0144 892D      		mov r24,r9
 108:../../../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 807               		.loc 1 108 0
 808 0146 1111      		cpse r17,__zero_reg__
 809 0148 00C0      		rjmp .L82
 810 014a 00C0      		rjmp .L152
 811               	.L82:
 111:../../../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 812               		.loc 1 111 0
 813 014c 1130      		cpi r17,lo8(1)
 814 014e 01F4      		brne .L152
 815               	/* epilogue start */
 816               	.LBE16:
 346:../../../../tmk_core/common/action.c **** }
 817               		.loc 1 346 0
 818 0150 2796      		adiw r28,7
 819 0152 0FB6      		in __tmp_reg__,__SREG__
 820 0154 F894      		cli
 821 0156 DEBF      		out __SP_H__,r29
 822 0158 0FBE      		out __SREG__,__tmp_reg__
 823 015a CDBF      		out __SP_L__,r28
 824 015c DF91      		pop r29
 825 015e CF91      		pop r28
 826 0160 1F91      		pop r17
 827               	.LVL93:
 828 0162 0F91      		pop r16
 829 0164 BF90      		pop r11
 830 0166 AF90      		pop r10
 831               	.LVL94:
 832 0168 9F90      		pop r9
 833               	.LVL95:
 834 016a 8F90      		pop r8
 835               	.LBB17:
 113:../../../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 836               		.loc 1 113 0
 837 016c 0C94 0000 		jmp set_oneshot_mods
 838               	.LVL96:
 839               	.L81:
 119:../../../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 840               		.loc 1 119 0
 841 0170 1111      		cpse r17,__zero_reg__
 842 0172 00C0      		rjmp .L84
 843 0174 00C0      		rjmp .L153
 844               	.L84:
 123:../../../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 845               		.loc 1 123 0
 846 0176 1130      		cpi r17,lo8(1)
 847 0178 01F4      		brne .+2
 848 017a 00C0      		rjmp .L57
 849               	.L153:
 127:../../../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 850               		.loc 1 127 0
 851 017c 0E94 0000 		call clear_oneshot_mods
 852               	.LVL97:
 853 0180 00C0      		rjmp .L91
 854               	.LVL98:
 855               	.L80:
 134:../../../../tmk_core/common/action.c ****                         if (event.pressed) {
 856               		.loc 1 134 0
 857 0182 0023      		tst r16
 858 0184 01F0      		breq .L86
 135:../../../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 859               		.loc 1 135 0
 860 0186 1630      		cpi r17,lo8(6)
 861 0188 00F0      		brlo .+2
 862 018a 00C0      		rjmp .L57
 136:../../../../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 863               		.loc 1 136 0
 864 018c 0E94 0000 		call get_mods
 865               	.LVL99:
 866 0190 8921      		and r24,r9
 867 0192 01F0      		breq .L87
 868 0194 00C0      		rjmp .L91
 869               	.LVL100:
 870               	.L87:
 141:../../../../tmk_core/common/action.c ****                                     register_mods(mods);
 871               		.loc 1 141 0
 872 0196 892D      		mov r24,r9
 873               	.LVL101:
 874               	.L152:
 875               	/* epilogue start */
 876               	.LBE17:
 346:../../../../tmk_core/common/action.c **** }
 877               		.loc 1 346 0
 878 0198 2796      		adiw r28,7
 879 019a 0FB6      		in __tmp_reg__,__SREG__
 880 019c F894      		cli
 881 019e DEBF      		out __SP_H__,r29
 882 01a0 0FBE      		out __SREG__,__tmp_reg__
 883 01a2 CDBF      		out __SP_L__,r28
 884 01a4 DF91      		pop r29
 885 01a6 CF91      		pop r28
 886 01a8 1F91      		pop r17
 887 01aa 0F91      		pop r16
 888 01ac BF90      		pop r11
 889 01ae AF90      		pop r10
 890               	.LVL102:
 891 01b0 9F90      		pop r9
 892 01b2 8F90      		pop r8
 893               	.LBB18:
 141:../../../../tmk_core/common/action.c ****                                     register_mods(mods);
 894               		.loc 1 141 0
 895 01b4 0C94 0000 		jmp register_mods
 896               	.LVL103:
 897               	.L86:
 145:../../../../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 898               		.loc 1 145 0
 899 01b8 1530      		cpi r17,lo8(5)
 900 01ba 00F0      		brlo .+2
 901 01bc 00C0      		rjmp .L57
 902 01be 00C0      		rjmp .L91
 903               	.L150:
 152:../../../../tmk_core/common/action.c ****                         if (event.pressed) {
 904               		.loc 1 152 0
 905 01c0 0023      		tst r16
 906 01c2 01F0      		breq .L88
 153:../../../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 907               		.loc 1 153 0
 908 01c4 1123      		tst r17
 909 01c6 01F0      		breq .L87
 154:../../../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 910               		.loc 1 154 0
 911 01c8 F501      		movw r30,r10
 912 01ca 8581      		ldd r24,Z+5
 913 01cc 80FF      		sbrs r24,0
 914 01ce 00C0      		rjmp .L156
 157:../../../../tmk_core/common/action.c ****                                     record->tap.count = 0;
 915               		.loc 1 157 0
 916 01d0 8F70      		andi r24,lo8(15)
 917 01d2 8583      		std Z+5,r24
 918 01d4 00C0      		rjmp .L87
 919               	.L88:
 168:../../../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 920               		.loc 1 168 0
 921 01d6 1111      		cpse r17,__zero_reg__
 922 01d8 00C0      		rjmp .L157
 923               	.L91:
 173:../../../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 924               		.loc 1 173 0
 925 01da 892D      		mov r24,r9
 926 01dc 00C0      		rjmp .L158
 927               	.LVL104:
 928               	.L64:
 929               	.LBE18:
 184:../../../../tmk_core/common/action.c ****             switch (action.usage.page) {
 930               		.loc 1 184 0
 931 01de 242F      		mov r18,r20
 932 01e0 2695      		lsr r18
 933 01e2 2695      		lsr r18
 934 01e4 2370      		andi r18,lo8(3)
 935 01e6 30E0      		ldi r19,0
 936 01e8 2115      		cp r18,__zero_reg__
 937 01ea 3105      		cpc r19,__zero_reg__
 938 01ec 01F0      		breq .L92
 939 01ee 2130      		cpi r18,1
 940 01f0 3105      		cpc r19,__zero_reg__
 941 01f2 01F0      		breq .+2
 942 01f4 00C0      		rjmp .L57
 943 01f6 00C0      		rjmp .L93
 944               	.L92:
 186:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 945               		.loc 1 186 0
 946 01f8 0023      		tst r16
 947 01fa 01F0      		breq .L94
 948               	.LVL105:
 187:../../../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 949               		.loc 1 187 0
 950 01fc 862F      		mov r24,r22
 951 01fe 942F      		mov r25,r20
 952 0200 9370      		andi r25,lo8(3)
 953 0202 00C0      		rjmp .L159
 954               	.LVL106:
 955               	.L94:
 189:../../../../tmk_core/common/action.c ****                         host_system_send(0);
 956               		.loc 1 189 0
 957 0204 80E0      		ldi r24,0
 958 0206 90E0      		ldi r25,0
 959               	.LVL107:
 960               	.L159:
 961               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 962               		.loc 1 346 0
 963 0208 2796      		adiw r28,7
 964 020a 0FB6      		in __tmp_reg__,__SREG__
 965 020c F894      		cli
 966 020e DEBF      		out __SP_H__,r29
 967 0210 0FBE      		out __SREG__,__tmp_reg__
 968 0212 CDBF      		out __SP_L__,r28
 969 0214 DF91      		pop r29
 970 0216 CF91      		pop r28
 971 0218 1F91      		pop r17
 972               	.LVL108:
 973 021a 0F91      		pop r16
 974 021c BF90      		pop r11
 975 021e AF90      		pop r10
 976               	.LVL109:
 977 0220 9F90      		pop r9
 978 0222 8F90      		pop r8
 189:../../../../tmk_core/common/action.c ****                         host_system_send(0);
 979               		.loc 1 189 0
 980 0224 0C94 0000 		jmp host_system_send
 981               	.LVL110:
 982               	.L93:
 193:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 983               		.loc 1 193 0
 984 0228 0023      		tst r16
 985 022a 01F0      		breq .L95
 986               	.LVL111:
 194:../../../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 987               		.loc 1 194 0
 988 022c 862F      		mov r24,r22
 989 022e 942F      		mov r25,r20
 990 0230 9370      		andi r25,lo8(3)
 991 0232 00C0      		rjmp .L161
 992               	.LVL112:
 993               	.L95:
 196:../../../../tmk_core/common/action.c ****                         host_consumer_send(0);
 994               		.loc 1 196 0
 995 0234 80E0      		ldi r24,0
 996 0236 90E0      		ldi r25,0
 997               	.LVL113:
 998               	.L161:
 999               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1000               		.loc 1 346 0
 1001 0238 2796      		adiw r28,7
 1002 023a 0FB6      		in __tmp_reg__,__SREG__
 1003 023c F894      		cli
 1004 023e DEBF      		out __SP_H__,r29
 1005 0240 0FBE      		out __SREG__,__tmp_reg__
 1006 0242 CDBF      		out __SP_L__,r28
 1007 0244 DF91      		pop r29
 1008 0246 CF91      		pop r28
 1009 0248 1F91      		pop r17
 1010               	.LVL114:
 1011 024a 0F91      		pop r16
 1012 024c BF90      		pop r11
 1013 024e AF90      		pop r10
 1014               	.LVL115:
 1015 0250 9F90      		pop r9
 1016 0252 8F90      		pop r8
 196:../../../../tmk_core/common/action.c ****                         host_consumer_send(0);
 1017               		.loc 1 196 0
 1018 0254 0C94 0000 		jmp host_consumer_send
 1019               	.LVL116:
 1020               	.L65:
 216:../../../../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 1021               		.loc 1 216 0
 1022 0258 842F      		mov r24,r20
 1023 025a 8370      		andi r24,lo8(3)
 1024 025c 01F0      		breq .+2
 1025 025e 00C0      		rjmp .L96
 218:../../../../tmk_core/common/action.c ****                 if (!event.pressed) {
 1026               		.loc 1 218 0
 1027 0260 0111      		cpse r16,__zero_reg__
 1028 0262 00C0      		rjmp .L57
 1029               	.LVL117:
 1030               	.LBB19:
 219:../../../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1031               		.loc 1 219 0
 1032 0264 262F      		mov r18,r22
 1033 0266 2295      		swap r18
 1034 0268 2695      		lsr r18
 1035 026a 2770      		andi r18,lo8(7)
 1036 026c 220F      		lsl r18
 1037 026e 220F      		lsl r18
 220:../../../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1038               		.loc 1 220 0
 1039 0270 862F      		mov r24,r22
 1040 0272 8F70      		andi r24,lo8(15)
 1041 0274 882E      		mov r8,r24
 1042 0276 912C      		mov r9,__zero_reg__
 1043 0278 A12C      		mov r10,__zero_reg__
 1044 027a B12C      		mov r11,__zero_reg__
 1045               	.LVL118:
 1046 027c 022E      		mov r0,r18
 1047 027e 00C0      		rjmp 2f
 1048               		1:
 1049 0280 880C      		lsl r8
 1050 0282 991C      		rol r9
 1051 0284 AA1C      		rol r10
 1052 0286 BB1C      		rol r11
 1053               		2:
 1054 0288 0A94      		dec r0
 1055 028a 02F4      		brpl 1b
 1056               	.LVL119:
 221:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1057               		.loc 1 221 0
 1058 028c 64FF      		sbrs r22,4
 1059 028e 00C0      		rjmp .L126
 221:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1060               		.loc 1 221 0 is_stmt 0 discriminator 1
 1061 0290 6FE0      		ldi r22,lo8(15)
 1062 0292 70E0      		ldi r23,0
 1063 0294 80E0      		ldi r24,0
 1064 0296 90E0      		ldi r25,0
 1065               	.LVL120:
 1066 0298 00C0      		rjmp 2f
 1067               		1:
 1068 029a 660F      		lsl r22
 1069 029c 771F      		rol r23
 1070 029e 881F      		rol r24
 1071 02a0 991F      		rol r25
 1072               		2:
 1073 02a2 2A95      		dec r18
 1074 02a4 02F4      		brpl 1b
 1075 02a6 6095      		com r22
 1076 02a8 7095      		com r23
 1077 02aa 8095      		com r24
 1078 02ac 9095      		com r25
 1079 02ae 00C0      		rjmp .L97
 1080               	.LVL121:
 1081               	.L126:
 221:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1082               		.loc 1 221 0
 1083 02b0 60E0      		ldi r22,0
 1084 02b2 70E0      		ldi r23,0
 1085 02b4 CB01      		movw r24,r22
 1086               	.LVL122:
 1087               	.L97:
 222:../../../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1088               		.loc 1 222 0 is_stmt 1 discriminator 3
 1089 02b6 242F      		mov r18,r20
 1090 02b8 2695      		lsr r18
 1091 02ba 2695      		lsr r18
 1092 02bc 2370      		andi r18,lo8(3)
 1093 02be 422F      		mov r20,r18
 1094               	.LVL123:
 1095 02c0 50E0      		ldi r21,0
 1096 02c2 4230      		cpi r20,2
 1097 02c4 5105      		cpc r21,__zero_reg__
 1098 02c6 01F0      		breq .L100
 1099 02c8 4330      		cpi r20,3
 1100 02ca 5105      		cpc r21,__zero_reg__
 1101 02cc 01F0      		breq .L101
 1102 02ce 6829      		or r22,r8
 1103 02d0 7929      		or r23,r9
 1104 02d2 8A29      		or r24,r10
 1105 02d4 9B29      		or r25,r11
 1106               	.LVL124:
 1107 02d6 4130      		cpi r20,1
 1108 02d8 5105      		cpc r21,__zero_reg__
 1109 02da 01F0      		breq .L162
 1110               	/* epilogue start */
 1111               	.LBE19:
 346:../../../../tmk_core/common/action.c **** }
 1112               		.loc 1 346 0
 1113 02dc 2796      		adiw r28,7
 1114               	.LVL125:
 1115 02de 0FB6      		in __tmp_reg__,__SREG__
 1116 02e0 F894      		cli
 1117 02e2 DEBF      		out __SP_H__,r29
 1118 02e4 0FBE      		out __SREG__,__tmp_reg__
 1119 02e6 CDBF      		out __SP_L__,r28
 1120 02e8 DF91      		pop r29
 1121 02ea CF91      		pop r28
 1122               	.LVL126:
 1123 02ec 1F91      		pop r17
 1124               	.LVL127:
 1125 02ee 0F91      		pop r16
 1126 02f0 BF90      		pop r11
 1127 02f2 AF90      		pop r10
 1128 02f4 9F90      		pop r9
 1129 02f6 8F90      		pop r8
 1130               	.LVL128:
 1131               	.LBB20:
 223:../../../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1132               		.loc 1 223 0
 1133 02f8 0C94 0000 		jmp default_layer_and
 1134               	.LVL129:
 1135               	.L100:
 225:../../../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1136               		.loc 1 225 0
 1137 02fc 6829      		or r22,r8
 1138 02fe 7929      		or r23,r9
 1139 0300 8A29      		or r24,r10
 1140 0302 9B29      		or r25,r11
 1141               	.LVL130:
 1142               	/* epilogue start */
 1143               	.LBE20:
 346:../../../../tmk_core/common/action.c **** }
 1144               		.loc 1 346 0
 1145 0304 2796      		adiw r28,7
 1146               	.LVL131:
 1147 0306 0FB6      		in __tmp_reg__,__SREG__
 1148 0308 F894      		cli
 1149 030a DEBF      		out __SP_H__,r29
 1150 030c 0FBE      		out __SREG__,__tmp_reg__
 1151 030e CDBF      		out __SP_L__,r28
 1152 0310 DF91      		pop r29
 1153 0312 CF91      		pop r28
 1154               	.LVL132:
 1155 0314 1F91      		pop r17
 1156               	.LVL133:
 1157 0316 0F91      		pop r16
 1158 0318 BF90      		pop r11
 1159 031a AF90      		pop r10
 1160 031c 9F90      		pop r9
 1161 031e 8F90      		pop r8
 1162               	.LVL134:
 1163               	.LBB21:
 225:../../../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1164               		.loc 1 225 0
 1165 0320 0C94 0000 		jmp default_layer_xor
 1166               	.LVL135:
 1167               	.L101:
 226:../../../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1168               		.loc 1 226 0
 1169 0324 0E94 0000 		call default_layer_and
 1170               	.LVL136:
 1171 0328 C501      		movw r24,r10
 1172 032a B401      		movw r22,r8
 1173               	.L162:
 1174               	/* epilogue start */
 1175               	.LBE21:
 346:../../../../tmk_core/common/action.c **** }
 1176               		.loc 1 346 0
 1177 032c 2796      		adiw r28,7
 1178 032e 0FB6      		in __tmp_reg__,__SREG__
 1179 0330 F894      		cli
 1180 0332 DEBF      		out __SP_H__,r29
 1181 0334 0FBE      		out __SREG__,__tmp_reg__
 1182 0336 CDBF      		out __SP_L__,r28
 1183 0338 DF91      		pop r29
 1184 033a CF91      		pop r28
 1185 033c 1F91      		pop r17
 1186               	.LVL137:
 1187 033e 0F91      		pop r16
 1188 0340 BF90      		pop r11
 1189 0342 AF90      		pop r10
 1190 0344 9F90      		pop r9
 1191 0346 8F90      		pop r8
 1192               	.LVL138:
 1193               	.LBB22:
 226:../../../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1194               		.loc 1 226 0
 1195 0348 0C94 0000 		jmp default_layer_or
 1196               	.LVL139:
 1197               	.L96:
 1198               	.LBE22:
 231:../../../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1199               		.loc 1 231 0
 1200 034c 0023      		tst r16
 1201 034e 01F0      		breq .L102
 231:../../../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1202               		.loc 1 231 0 is_stmt 0 discriminator 1
 1203 0350 842F      		mov r24,r20
 1204 0352 8170      		andi r24,lo8(1)
 1205 0354 00C0      		rjmp .L103
 1206               	.L102:
 231:../../../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1207               		.loc 1 231 0 discriminator 2
 1208 0356 8695      		lsr r24
 1209               	.L103:
 231:../../../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1210               		.loc 1 231 0 discriminator 3
 1211 0358 8823      		tst r24
 1212 035a 01F4      		brne .+2
 1213 035c 00C0      		rjmp .L57
 1214               	.LVL140:
 1215               	.LBB23:
 233:../../../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1216               		.loc 1 233 0 is_stmt 1
 1217 035e 262F      		mov r18,r22
 1218 0360 2295      		swap r18
 1219 0362 2695      		lsr r18
 1220 0364 2770      		andi r18,lo8(7)
 1221 0366 220F      		lsl r18
 1222 0368 220F      		lsl r18
 234:../../../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1223               		.loc 1 234 0
 1224 036a 862F      		mov r24,r22
 1225 036c 8F70      		andi r24,lo8(15)
 1226 036e 882E      		mov r8,r24
 1227 0370 912C      		mov r9,__zero_reg__
 1228 0372 A12C      		mov r10,__zero_reg__
 1229 0374 B12C      		mov r11,__zero_reg__
 1230               	.LVL141:
 1231 0376 022E      		mov r0,r18
 1232 0378 00C0      		rjmp 2f
 1233               		1:
 1234 037a 880C      		lsl r8
 1235 037c 991C      		rol r9
 1236 037e AA1C      		rol r10
 1237 0380 BB1C      		rol r11
 1238               		2:
 1239 0382 0A94      		dec r0
 1240 0384 02F4      		brpl 1b
 1241               	.LVL142:
 235:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1242               		.loc 1 235 0
 1243 0386 64FF      		sbrs r22,4
 1244 0388 00C0      		rjmp .L127
 235:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1245               		.loc 1 235 0 is_stmt 0 discriminator 1
 1246 038a 6FE0      		ldi r22,lo8(15)
 1247 038c 70E0      		ldi r23,0
 1248 038e 80E0      		ldi r24,0
 1249 0390 90E0      		ldi r25,0
 1250               	.LVL143:
 1251 0392 00C0      		rjmp 2f
 1252               		1:
 1253 0394 660F      		lsl r22
 1254 0396 771F      		rol r23
 1255 0398 881F      		rol r24
 1256 039a 991F      		rol r25
 1257               		2:
 1258 039c 2A95      		dec r18
 1259 039e 02F4      		brpl 1b
 1260 03a0 6095      		com r22
 1261 03a2 7095      		com r23
 1262 03a4 8095      		com r24
 1263 03a6 9095      		com r25
 1264 03a8 00C0      		rjmp .L104
 1265               	.LVL144:
 1266               	.L127:
 235:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1267               		.loc 1 235 0
 1268 03aa 60E0      		ldi r22,0
 1269 03ac 70E0      		ldi r23,0
 1270 03ae CB01      		movw r24,r22
 1271               	.LVL145:
 1272               	.L104:
 236:../../../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1273               		.loc 1 236 0 is_stmt 1 discriminator 3
 1274 03b0 242F      		mov r18,r20
 1275 03b2 2695      		lsr r18
 1276 03b4 2695      		lsr r18
 1277 03b6 2370      		andi r18,lo8(3)
 1278 03b8 422F      		mov r20,r18
 1279               	.LVL146:
 1280 03ba 50E0      		ldi r21,0
 1281 03bc 4230      		cpi r20,2
 1282 03be 5105      		cpc r21,__zero_reg__
 1283 03c0 01F0      		breq .L107
 1284 03c2 4330      		cpi r20,3
 1285 03c4 5105      		cpc r21,__zero_reg__
 1286 03c6 01F0      		breq .L108
 1287 03c8 6829      		or r22,r8
 1288 03ca 7929      		or r23,r9
 1289 03cc 8A29      		or r24,r10
 1290 03ce 9B29      		or r25,r11
 1291               	.LVL147:
 1292 03d0 4130      		cpi r20,1
 1293 03d2 5105      		cpc r21,__zero_reg__
 1294 03d4 01F0      		breq .L160
 1295               	/* epilogue start */
 1296               	.LBE23:
 346:../../../../tmk_core/common/action.c **** }
 1297               		.loc 1 346 0
 1298 03d6 2796      		adiw r28,7
 1299               	.LVL148:
 1300 03d8 0FB6      		in __tmp_reg__,__SREG__
 1301 03da F894      		cli
 1302 03dc DEBF      		out __SP_H__,r29
 1303 03de 0FBE      		out __SREG__,__tmp_reg__
 1304 03e0 CDBF      		out __SP_L__,r28
 1305 03e2 DF91      		pop r29
 1306 03e4 CF91      		pop r28
 1307               	.LVL149:
 1308 03e6 1F91      		pop r17
 1309               	.LVL150:
 1310 03e8 0F91      		pop r16
 1311 03ea BF90      		pop r11
 1312 03ec AF90      		pop r10
 1313 03ee 9F90      		pop r9
 1314 03f0 8F90      		pop r8
 1315               	.LVL151:
 1316               	.LBB24:
 237:../../../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1317               		.loc 1 237 0
 1318 03f2 0C94 0000 		jmp layer_and
 1319               	.LVL152:
 1320               	.L107:
 239:../../../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1321               		.loc 1 239 0
 1322 03f6 6829      		or r22,r8
 1323 03f8 7929      		or r23,r9
 1324 03fa 8A29      		or r24,r10
 1325 03fc 9B29      		or r25,r11
 1326               	.LVL153:
 1327               	/* epilogue start */
 1328               	.LBE24:
 346:../../../../tmk_core/common/action.c **** }
 1329               		.loc 1 346 0
 1330 03fe 2796      		adiw r28,7
 1331               	.LVL154:
 1332 0400 0FB6      		in __tmp_reg__,__SREG__
 1333 0402 F894      		cli
 1334 0404 DEBF      		out __SP_H__,r29
 1335 0406 0FBE      		out __SREG__,__tmp_reg__
 1336 0408 CDBF      		out __SP_L__,r28
 1337 040a DF91      		pop r29
 1338 040c CF91      		pop r28
 1339               	.LVL155:
 1340 040e 1F91      		pop r17
 1341               	.LVL156:
 1342 0410 0F91      		pop r16
 1343 0412 BF90      		pop r11
 1344 0414 AF90      		pop r10
 1345 0416 9F90      		pop r9
 1346 0418 8F90      		pop r8
 1347               	.LVL157:
 1348               	.LBB25:
 239:../../../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1349               		.loc 1 239 0
 1350 041a 0C94 0000 		jmp layer_xor
 1351               	.LVL158:
 1352               	.L108:
 240:../../../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1353               		.loc 1 240 0
 1354 041e 0E94 0000 		call layer_and
 1355               	.LVL159:
 1356 0422 C501      		movw r24,r10
 1357 0424 B401      		movw r22,r8
 1358               	.L160:
 1359               	/* epilogue start */
 1360               	.LBE25:
 346:../../../../tmk_core/common/action.c **** }
 1361               		.loc 1 346 0
 1362 0426 2796      		adiw r28,7
 1363 0428 0FB6      		in __tmp_reg__,__SREG__
 1364 042a F894      		cli
 1365 042c DEBF      		out __SP_H__,r29
 1366 042e 0FBE      		out __SREG__,__tmp_reg__
 1367 0430 CDBF      		out __SP_L__,r28
 1368 0432 DF91      		pop r29
 1369 0434 CF91      		pop r28
 1370 0436 1F91      		pop r17
 1371               	.LVL160:
 1372 0438 0F91      		pop r16
 1373 043a BF90      		pop r11
 1374 043c AF90      		pop r10
 1375 043e 9F90      		pop r9
 1376 0440 8F90      		pop r8
 1377               	.LVL161:
 1378               	.LBB26:
 240:../../../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1379               		.loc 1 240 0
 1380 0442 0C94 0000 		jmp layer_or
 1381               	.LVL162:
 1382               	.L66:
 1383               	.LBE26:
 248:../../../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1384               		.loc 1 248 0
 1385 0446 603F      		cpi r22,lo8(-16)
 1386 0448 01F0      		breq .L111
 1387               	.LVL163:
 1388 044a 00F4      		brsh .L115
 1389 044c 603E      		cpi r22,lo8(-32)
 1390 044e 00F4      		brsh .+2
 1391 0450 00C0      		rjmp .L109
 1392 0452 00C0      		rjmp .L151
 1393               	.L115:
 1394 0454 623F      		cpi r22,lo8(-14)
 1395 0456 01F4      		brne .+2
 1396 0458 00C0      		rjmp .L113
 1397 045a 00F0      		brlo .L112
 1398 045c 633F      		cpi r22,lo8(-13)
 1399 045e 01F0      		breq .+2
 1400 0460 00C0      		rjmp .L109
 1401 0462 00C0      		rjmp .L114
 1402               	.L151:
 1403 0464 162F      		mov r17,r22
 1404               	.LVL164:
 1405 0466 1F70      		andi r17,lo8(15)
 1406 0468 842F      		mov r24,r20
 1407 046a 8F71      		andi r24,lo8(31)
 251:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 1408               		.loc 1 251 0
 1409 046c 0023      		tst r16
 1410 046e 01F0      		breq .L116
 252:../../../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1411               		.loc 1 252 0
 1412 0470 0E94 0000 		call layer_on
 1413               	.LVL165:
 253:../../../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1414               		.loc 1 253 0
 1415 0474 812F      		mov r24,r17
 1416 0476 00C0      		rjmp .L152
 1417               	.LVL166:
 1418               	.L116:
 255:../../../../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 1419               		.loc 1 255 0
 1420 0478 0E94 0000 		call layer_off
 1421               	.LVL167:
 256:../../../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1422               		.loc 1 256 0
 1423 047c 812F      		mov r24,r17
 1424               	.LVL168:
 1425               	.L158:
 1426               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1427               		.loc 1 346 0
 1428 047e 2796      		adiw r28,7
 1429 0480 0FB6      		in __tmp_reg__,__SREG__
 1430 0482 F894      		cli
 1431 0484 DEBF      		out __SP_H__,r29
 1432 0486 0FBE      		out __SREG__,__tmp_reg__
 1433 0488 CDBF      		out __SP_L__,r28
 1434 048a DF91      		pop r29
 1435 048c CF91      		pop r28
 1436 048e 1F91      		pop r17
 1437 0490 0F91      		pop r16
 1438 0492 BF90      		pop r11
 1439 0494 AF90      		pop r10
 1440               	.LVL169:
 1441 0496 9F90      		pop r9
 1442 0498 8F90      		pop r8
 256:../../../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1443               		.loc 1 256 0
 1444 049a 0C94 0000 		jmp unregister_mods
 1445               	.LVL170:
 1446               	.L111:
 261:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 1447               		.loc 1 261 0
 1448 049e 0023      		tst r16
 1449 04a0 01F0      		breq .L117
 262:../../../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1450               		.loc 1 262 0
 1451 04a2 1530      		cpi r17,lo8(5)
 1452 04a4 00F0      		brlo .+2
 1453 04a6 00C0      		rjmp .L57
 1454               	.L118:
 263:../../../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1455               		.loc 1 263 0
 1456 04a8 842F      		mov r24,r20
 1457 04aa 8F71      		andi r24,lo8(31)
 1458               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1459               		.loc 1 346 0
 1460 04ac 2796      		adiw r28,7
 1461 04ae 0FB6      		in __tmp_reg__,__SREG__
 1462 04b0 F894      		cli
 1463 04b2 DEBF      		out __SP_H__,r29
 1464 04b4 0FBE      		out __SREG__,__tmp_reg__
 1465 04b6 CDBF      		out __SP_L__,r28
 1466 04b8 DF91      		pop r29
 1467 04ba CF91      		pop r28
 1468 04bc 1F91      		pop r17
 1469               	.LVL171:
 1470 04be 0F91      		pop r16
 1471 04c0 BF90      		pop r11
 1472 04c2 AF90      		pop r10
 1473               	.LVL172:
 1474 04c4 9F90      		pop r9
 1475 04c6 8F90      		pop r8
 263:../../../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1476               		.loc 1 263 0
 1477 04c8 0C94 0000 		jmp layer_invert
 1478               	.LVL173:
 1479               	.L117:
 266:../../../../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1480               		.loc 1 266 0
 1481 04cc 1630      		cpi r17,lo8(6)
 1482 04ce 00F0      		brlo .+2
 1483 04d0 00C0      		rjmp .L57
 1484 04d2 00C0      		rjmp .L118
 1485               	.L112:
 272:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1486               		.loc 1 272 0
 1487 04d4 0023      		tst r16
 1488 04d6 01F0      		breq .L119
 1489               	.L120:
 272:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1490               		.loc 1 272 0 is_stmt 0 discriminator 1
 1491 04d8 842F      		mov r24,r20
 1492 04da 8F71      		andi r24,lo8(31)
 1493               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1494               		.loc 1 346 0 is_stmt 1 discriminator 1
 1495 04dc 2796      		adiw r28,7
 1496 04de 0FB6      		in __tmp_reg__,__SREG__
 1497 04e0 F894      		cli
 1498 04e2 DEBF      		out __SP_H__,r29
 1499 04e4 0FBE      		out __SREG__,__tmp_reg__
 1500 04e6 CDBF      		out __SP_L__,r28
 1501 04e8 DF91      		pop r29
 1502 04ea CF91      		pop r28
 1503 04ec 1F91      		pop r17
 1504               	.LVL174:
 1505 04ee 0F91      		pop r16
 1506 04f0 BF90      		pop r11
 1507 04f2 AF90      		pop r10
 1508               	.LVL175:
 1509 04f4 9F90      		pop r9
 1510 04f6 8F90      		pop r8
 272:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1511               		.loc 1 272 0 discriminator 1
 1512 04f8 0C94 0000 		jmp layer_on
 1513               	.LVL176:
 1514               	.L119:
 273:../../../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1515               		.loc 1 273 0
 1516 04fc 842F      		mov r24,r20
 1517 04fe 8F71      		andi r24,lo8(31)
 1518               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1519               		.loc 1 346 0
 1520 0500 2796      		adiw r28,7
 1521 0502 0FB6      		in __tmp_reg__,__SREG__
 1522 0504 F894      		cli
 1523 0506 DEBF      		out __SP_H__,r29
 1524 0508 0FBE      		out __SREG__,__tmp_reg__
 1525 050a CDBF      		out __SP_L__,r28
 1526 050c DF91      		pop r29
 1527 050e CF91      		pop r28
 1528 0510 1F91      		pop r17
 1529               	.LVL177:
 1530 0512 0F91      		pop r16
 1531 0514 BF90      		pop r11
 1532 0516 AF90      		pop r10
 1533               	.LVL178:
 1534 0518 9F90      		pop r9
 1535 051a 8F90      		pop r8
 273:../../../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1536               		.loc 1 273 0
 1537 051c 0C94 0000 		jmp layer_off
 1538               	.LVL179:
 1539               	.L113:
 276:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 1540               		.loc 1 276 0
 1541 0520 0111      		cpse r16,__zero_reg__
 1542 0522 00C0      		rjmp .L119
 1543 0524 00C0      		rjmp .L120
 1544               	.L114:
 280:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1545               		.loc 1 280 0
 1546 0526 0023      		tst r16
 1547 0528 01F0      		breq .L121
 280:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1548               		.loc 1 280 0 is_stmt 0 discriminator 1
 1549 052a 842F      		mov r24,r20
 1550 052c 8F71      		andi r24,lo8(31)
 1551               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1552               		.loc 1 346 0 is_stmt 1 discriminator 1
 1553 052e 2796      		adiw r28,7
 1554 0530 0FB6      		in __tmp_reg__,__SREG__
 1555 0532 F894      		cli
 1556 0534 DEBF      		out __SP_H__,r29
 1557 0536 0FBE      		out __SREG__,__tmp_reg__
 1558 0538 CDBF      		out __SP_L__,r28
 1559 053a DF91      		pop r29
 1560 053c CF91      		pop r28
 1561 053e 1F91      		pop r17
 1562               	.LVL180:
 1563 0540 0F91      		pop r16
 1564 0542 BF90      		pop r11
 1565 0544 AF90      		pop r10
 1566               	.LVL181:
 1567 0546 9F90      		pop r9
 1568 0548 8F90      		pop r8
 280:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1569               		.loc 1 280 0 discriminator 1
 1570 054a 0C94 0000 		jmp layer_move
 1571               	.LVL182:
 1572               	.L121:
 1573               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1574               		.loc 1 346 0
 1575 054e 2796      		adiw r28,7
 1576 0550 0FB6      		in __tmp_reg__,__SREG__
 1577 0552 F894      		cli
 1578 0554 DEBF      		out __SP_H__,r29
 1579 0556 0FBE      		out __SREG__,__tmp_reg__
 1580 0558 CDBF      		out __SP_L__,r28
 1581 055a DF91      		pop r29
 1582 055c CF91      		pop r28
 1583 055e 1F91      		pop r17
 1584               	.LVL183:
 1585 0560 0F91      		pop r16
 1586 0562 BF90      		pop r11
 1587 0564 AF90      		pop r10
 1588               	.LVL184:
 1589 0566 9F90      		pop r9
 1590 0568 8F90      		pop r8
 281:../../../../tmk_core/common/action.c ****                                     layer_clear();
 1591               		.loc 1 281 0
 1592 056a 0C94 0000 		jmp layer_clear
 1593               	.LVL185:
 1594               	.L109:
 285:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 1595               		.loc 1 285 0
 1596 056e 0023      		tst r16
 1597 0570 01F0      		breq .L122
 286:../../../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1598               		.loc 1 286 0
 1599 0572 1123      		tst r17
 1600 0574 01F4      		brne .+2
 1601 0576 00C0      		rjmp .L120
 1602               	.L156:
 288:../../../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1603               		.loc 1 288 0
 1604 0578 862F      		mov r24,r22
 1605               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1606               		.loc 1 346 0
 1607 057a 2796      		adiw r28,7
 1608 057c 0FB6      		in __tmp_reg__,__SREG__
 1609 057e F894      		cli
 1610 0580 DEBF      		out __SP_H__,r29
 1611 0582 0FBE      		out __SREG__,__tmp_reg__
 1612 0584 CDBF      		out __SP_L__,r28
 1613 0586 DF91      		pop r29
 1614 0588 CF91      		pop r28
 1615 058a 1F91      		pop r17
 1616               	.LVL186:
 1617 058c 0F91      		pop r16
 1618 058e BF90      		pop r11
 1619 0590 AF90      		pop r10
 1620               	.LVL187:
 1621 0592 9F90      		pop r9
 1622 0594 8F90      		pop r8
 288:../../../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1623               		.loc 1 288 0
 1624 0596 0C94 0000 		jmp register_code
 1625               	.LVL188:
 1626               	.L122:
 294:../../../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1627               		.loc 1 294 0
 1628 059a 1123      		tst r17
 1629 059c 01F4      		brne .+2
 1630 059e 00C0      		rjmp .L119
 1631               	.L157:
 296:../../../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 1632               		.loc 1 296 0
 1633 05a0 862F      		mov r24,r22
 1634               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1635               		.loc 1 346 0
 1636 05a2 2796      		adiw r28,7
 1637 05a4 0FB6      		in __tmp_reg__,__SREG__
 1638 05a6 F894      		cli
 1639 05a8 DEBF      		out __SP_H__,r29
 1640 05aa 0FBE      		out __SREG__,__tmp_reg__
 1641 05ac CDBF      		out __SP_L__,r28
 1642 05ae DF91      		pop r29
 1643 05b0 CF91      		pop r28
 1644 05b2 1F91      		pop r17
 1645               	.LVL189:
 1646 05b4 0F91      		pop r16
 1647 05b6 BF90      		pop r11
 1648 05b8 AF90      		pop r10
 1649               	.LVL190:
 1650 05ba 9F90      		pop r9
 1651 05bc 8F90      		pop r8
 296:../../../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 1652               		.loc 1 296 0
 1653 05be 0C94 0000 		jmp unregister_code
 1654               	.LVL191:
 1655               	.L67:
 310:../../../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1656               		.loc 1 310 0
 1657 05c2 4F70      		andi r20,lo8(15)
 1658 05c4 C501      		movw r24,r10
 1659 05c6 0E94 0000 		call action_get_macro
 1660               	.LVL192:
 1661               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1662               		.loc 1 346 0
 1663 05ca 2796      		adiw r28,7
 1664 05cc 0FB6      		in __tmp_reg__,__SREG__
 1665 05ce F894      		cli
 1666 05d0 DEBF      		out __SP_H__,r29
 1667 05d2 0FBE      		out __SREG__,__tmp_reg__
 1668 05d4 CDBF      		out __SP_L__,r28
 1669 05d6 DF91      		pop r29
 1670 05d8 CF91      		pop r28
 1671 05da 1F91      		pop r17
 1672               	.LVL193:
 1673 05dc 0F91      		pop r16
 1674 05de BF90      		pop r11
 1675 05e0 AF90      		pop r10
 1676               	.LVL194:
 1677 05e2 9F90      		pop r9
 1678 05e4 8F90      		pop r8
 310:../../../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1679               		.loc 1 310 0
 1680 05e6 0C94 0000 		jmp action_macro_play
 1681               	.LVL195:
 1682               	.L68:
 340:../../../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1683               		.loc 1 340 0
 1684 05ea 4F70      		andi r20,lo8(15)
 1685 05ec C501      		movw r24,r10
 1686               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1687               		.loc 1 346 0
 1688 05ee 2796      		adiw r28,7
 1689 05f0 0FB6      		in __tmp_reg__,__SREG__
 1690 05f2 F894      		cli
 1691 05f4 DEBF      		out __SP_H__,r29
 1692 05f6 0FBE      		out __SREG__,__tmp_reg__
 1693 05f8 CDBF      		out __SP_L__,r28
 1694 05fa DF91      		pop r29
 1695 05fc CF91      		pop r28
 1696 05fe 1F91      		pop r17
 1697               	.LVL196:
 1698 0600 0F91      		pop r16
 1699 0602 BF90      		pop r11
 1700 0604 AF90      		pop r10
 1701               	.LVL197:
 1702 0606 9F90      		pop r9
 1703 0608 8F90      		pop r8
 340:../../../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1704               		.loc 1 340 0
 1705 060a 0C94 0000 		jmp action_function
 1706               	.LVL198:
 1707               	.L57:
 1708               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1709               		.loc 1 346 0
 1710 060e 2796      		adiw r28,7
 1711 0610 0FB6      		in __tmp_reg__,__SREG__
 1712 0612 F894      		cli
 1713 0614 DEBF      		out __SP_H__,r29
 1714 0616 0FBE      		out __SREG__,__tmp_reg__
 1715 0618 CDBF      		out __SP_L__,r28
 1716 061a DF91      		pop r29
 1717 061c CF91      		pop r28
 1718 061e 1F91      		pop r17
 1719               	.LVL199:
 1720 0620 0F91      		pop r16
 1721 0622 BF90      		pop r11
 1722 0624 AF90      		pop r10
 1723               	.LVL200:
 1724 0626 9F90      		pop r9
 1725 0628 8F90      		pop r8
 1726 062a 0895      		ret
 1727               		.cfi_endproc
 1728               	.LFE5:
 1730               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1731               	.global	clear_keyboard_but_mods
 1733               	clear_keyboard_but_mods:
 1734               	.LFB11:
 497:../../../../tmk_core/common/action.c ****     }
 498:../../../../tmk_core/common/action.c **** }
 499:../../../../tmk_core/common/action.c **** 
 500:../../../../tmk_core/common/action.c **** void clear_keyboard(void)
 501:../../../../tmk_core/common/action.c **** {
 502:../../../../tmk_core/common/action.c ****     clear_mods();
 503:../../../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 504:../../../../tmk_core/common/action.c **** }
 505:../../../../tmk_core/common/action.c **** 
 506:../../../../tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 507:../../../../tmk_core/common/action.c **** {
 1735               		.loc 1 507 0
 1736               		.cfi_startproc
 1737               	/* prologue: function */
 1738               	/* frame size = 0 */
 1739               	/* stack size = 0 */
 1740               	.L__stack_usage = 0
 508:../../../../tmk_core/common/action.c ****     clear_weak_mods();
 1741               		.loc 1 508 0
 1742 0000 0E94 0000 		call clear_weak_mods
 1743               	.LVL201:
 509:../../../../tmk_core/common/action.c ****     clear_keys();
 1744               		.loc 1 509 0
 1745 0004 0E94 0000 		call clear_keys
 1746               	.LVL202:
 510:../../../../tmk_core/common/action.c ****     send_keyboard_report();
 1747               		.loc 1 510 0
 1748 0008 0E94 0000 		call send_keyboard_report
 1749               	.LVL203:
 511:../../../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 512:../../../../tmk_core/common/action.c ****     mousekey_clear();
 513:../../../../tmk_core/common/action.c ****     mousekey_send();
 514:../../../../tmk_core/common/action.c **** #endif
 515:../../../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 516:../../../../tmk_core/common/action.c ****     host_system_send(0);
 1750               		.loc 1 516 0
 1751 000c 80E0      		ldi r24,0
 1752 000e 90E0      		ldi r25,0
 1753 0010 0E94 0000 		call host_system_send
 1754               	.LVL204:
 517:../../../../tmk_core/common/action.c ****     host_consumer_send(0);
 1755               		.loc 1 517 0
 1756 0014 80E0      		ldi r24,0
 1757 0016 90E0      		ldi r25,0
 1758 0018 0C94 0000 		jmp host_consumer_send
 1759               	.LVL205:
 1760               		.cfi_endproc
 1761               	.LFE11:
 1763               		.section	.text.clear_keyboard,"ax",@progbits
 1764               	.global	clear_keyboard
 1766               	clear_keyboard:
 1767               	.LFB10:
 501:../../../../tmk_core/common/action.c **** {
 1768               		.loc 1 501 0
 1769               		.cfi_startproc
 1770               	/* prologue: function */
 1771               	/* frame size = 0 */
 1772               	/* stack size = 0 */
 1773               	.L__stack_usage = 0
 502:../../../../tmk_core/common/action.c ****     clear_mods();
 1774               		.loc 1 502 0
 1775 0000 0E94 0000 		call clear_mods
 1776               	.LVL206:
 503:../../../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1777               		.loc 1 503 0
 1778 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1779               	.LVL207:
 1780               		.cfi_endproc
 1781               	.LFE10:
 1783               		.section	.text.is_tap_key,"ax",@progbits
 1784               	.global	is_tap_key
 1786               	is_tap_key:
 1787               	.LFB12:
 518:../../../../tmk_core/common/action.c **** #endif
 519:../../../../tmk_core/common/action.c **** }
 520:../../../../tmk_core/common/action.c **** 
 521:../../../../tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 522:../../../../tmk_core/common/action.c **** {
 1788               		.loc 1 522 0
 1789               		.cfi_startproc
 1790               	.LVL208:
 1791               	/* prologue: function */
 1792               	/* frame size = 0 */
 1793               	/* stack size = 0 */
 1794               	.L__stack_usage = 0
 523:../../../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1795               		.loc 1 523 0
 1796 0000 0E94 0000 		call layer_switch_get_action
 1797               	.LVL209:
 524:../../../../tmk_core/common/action.c **** 
 525:../../../../tmk_core/common/action.c ****     switch (action.kind.id) {
 1798               		.loc 1 525 0
 1799 0004 292F      		mov r18,r25
 1800 0006 2295      		swap r18
 1801 0008 2F70      		andi r18,lo8(15)
 1802 000a 30E0      		ldi r19,0
 1803 000c 2C30      		cpi r18,12
 1804 000e 3105      		cpc r19,__zero_reg__
 1805 0010 04F4      		brge .L169
 1806 0012 2A30      		cpi r18,10
 1807 0014 3105      		cpc r19,__zero_reg__
 1808 0016 04F4      		brge .L167
 1809 0018 2250      		subi r18,2
 1810 001a 3109      		sbc r19,__zero_reg__
 1811 001c 2230      		cpi r18,2
 1812 001e 3105      		cpc r19,__zero_reg__
 1813 0020 00F4      		brsh .L182
 1814 0022 00C0      		rjmp .L167
 1815               	.L169:
 1816 0024 2C30      		cpi r18,12
 1817 0026 3105      		cpc r19,__zero_reg__
 1818 0028 01F0      		breq .L168
 1819 002a 2F30      		cpi r18,15
 1820 002c 3105      		cpc r19,__zero_reg__
 1821 002e 01F4      		brne .L182
 1822 0030 00C0      		rjmp .L168
 1823               	.L167:
 526:../../../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 527:../../../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 528:../../../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 529:../../../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 530:../../../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1824               		.loc 1 530 0
 1825 0032 803E      		cpi r24,lo8(-32)
 1826               	.LVL210:
 1827 0034 00F0      		brlo .L170
 1828 0036 803F      		cpi r24,lo8(-16)
 1829 0038 01F4      		brne .L182
 1830               	.L170:
 531:../../../../tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 532:../../../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 533:../../../../tmk_core/common/action.c ****                     return true;
 1831               		.loc 1 533 0
 1832 003a 81E0      		ldi r24,lo8(1)
 1833               	.LVL211:
 1834 003c 0895      		ret
 1835               	.L168:
 534:../../../../tmk_core/common/action.c ****             }
 535:../../../../tmk_core/common/action.c ****             return false;
 536:../../../../tmk_core/common/action.c ****         case ACT_MACRO:
 537:../../../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 538:../../../../tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1836               		.loc 1 538 0
 1837 003e 93FB      		bst r25,3
 1838 0040 8827      		clr r24
 1839 0042 80F9      		bld r24,0
 1840 0044 0895      		ret
 1841               	.LVL212:
 1842               	.L182:
 535:../../../../tmk_core/common/action.c ****             return false;
 1843               		.loc 1 535 0
 1844 0046 80E0      		ldi r24,0
 1845               	.LVL213:
 539:../../../../tmk_core/common/action.c ****             return false;
 540:../../../../tmk_core/common/action.c ****     }
 541:../../../../tmk_core/common/action.c ****     return false;
 542:../../../../tmk_core/common/action.c **** }
 1846               		.loc 1 542 0
 1847 0048 0895      		ret
 1848               		.cfi_endproc
 1849               	.LFE12:
 1851               		.section	.text.debug_event,"ax",@progbits
 1852               	.global	debug_event
 1854               	debug_event:
 1855               	.LFB13:
 543:../../../../tmk_core/common/action.c **** 
 544:../../../../tmk_core/common/action.c **** 
 545:../../../../tmk_core/common/action.c **** /*
 546:../../../../tmk_core/common/action.c ****  * debug print
 547:../../../../tmk_core/common/action.c ****  */
 548:../../../../tmk_core/common/action.c **** void debug_event(keyevent_t event)
 549:../../../../tmk_core/common/action.c **** {
 1856               		.loc 1 549 0
 1857               		.cfi_startproc
 1858 0000 CF93      		push r28
 1859               	.LCFI14:
 1860               		.cfi_def_cfa_offset 3
 1861               		.cfi_offset 28, -2
 1862 0002 DF93      		push r29
 1863               	.LCFI15:
 1864               		.cfi_def_cfa_offset 4
 1865               		.cfi_offset 29, -3
 1866 0004 00D0      		rcall .
 1867 0006 00D0      		rcall .
 1868 0008 1F92      		push __zero_reg__
 1869               	.LCFI16:
 1870               		.cfi_def_cfa_offset 9
 1871 000a CDB7      		in r28,__SP_L__
 1872 000c DEB7      		in r29,__SP_H__
 1873               	.LCFI17:
 1874               		.cfi_def_cfa_register 28
 1875               	/* prologue: function */
 1876               	/* frame size = 5 */
 1877               	/* stack size = 7 */
 1878               	.L__stack_usage = 7
 1879               	/* epilogue start */
 550:../../../../tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 551:../../../../tmk_core/common/action.c **** }
 1880               		.loc 1 551 0
 1881 000e 0F90      		pop __tmp_reg__
 1882 0010 0F90      		pop __tmp_reg__
 1883 0012 0F90      		pop __tmp_reg__
 1884 0014 0F90      		pop __tmp_reg__
 1885 0016 0F90      		pop __tmp_reg__
 1886 0018 DF91      		pop r29
 1887 001a CF91      		pop r28
 1888 001c 0895      		ret
 1889               		.cfi_endproc
 1890               	.LFE13:
 1892               		.section	.text.debug_record,"ax",@progbits
 1893               	.global	debug_record
 1895               	debug_record:
 1896               	.LFB14:
 552:../../../../tmk_core/common/action.c **** 
 553:../../../../tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 554:../../../../tmk_core/common/action.c **** {
 1897               		.loc 1 554 0
 1898               		.cfi_startproc
 1899 0000 CF93      		push r28
 1900               	.LCFI18:
 1901               		.cfi_def_cfa_offset 3
 1902               		.cfi_offset 28, -2
 1903 0002 DF93      		push r29
 1904               	.LCFI19:
 1905               		.cfi_def_cfa_offset 4
 1906               		.cfi_offset 29, -3
 1907 0004 00D0      		rcall .
 1908 0006 00D0      		rcall .
 1909 0008 00D0      		rcall .
 1910               	.LCFI20:
 1911               		.cfi_def_cfa_offset 10
 1912 000a CDB7      		in r28,__SP_L__
 1913 000c DEB7      		in r29,__SP_H__
 1914               	.LCFI21:
 1915               		.cfi_def_cfa_register 28
 1916               	/* prologue: function */
 1917               	/* frame size = 6 */
 1918               	/* stack size = 8 */
 1919               	.L__stack_usage = 8
 1920               	/* epilogue start */
 555:../../../../tmk_core/common/action.c ****     debug_event(record.event);
 556:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 557:../../../../tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 558:../../../../tmk_core/common/action.c **** #endif
 559:../../../../tmk_core/common/action.c **** }
 1921               		.loc 1 559 0
 1922 000e 2696      		adiw r28,6
 1923 0010 0FB6      		in __tmp_reg__,__SREG__
 1924 0012 F894      		cli
 1925 0014 DEBF      		out __SP_H__,r29
 1926 0016 0FBE      		out __SREG__,__tmp_reg__
 1927 0018 CDBF      		out __SP_L__,r28
 1928 001a DF91      		pop r29
 1929 001c CF91      		pop r28
 1930 001e 0895      		ret
 1931               		.cfi_endproc
 1932               	.LFE14:
 1934               		.section	.text.debug_action,"ax",@progbits
 1935               	.global	debug_action
 1937               	debug_action:
 1938               	.LFB15:
 560:../../../../tmk_core/common/action.c **** 
 561:../../../../tmk_core/common/action.c **** void debug_action(action_t action)
 562:../../../../tmk_core/common/action.c **** {
 1939               		.loc 1 562 0
 1940               		.cfi_startproc
 1941               	.LVL214:
 1942               	/* prologue: function */
 1943               	/* frame size = 0 */
 1944               	/* stack size = 0 */
 1945               	.L__stack_usage = 0
 1946 0000 0895      		ret
 1947               		.cfi_endproc
 1948               	.LFE15:
 1950               		.text
 1951               	.Letext0:
 1952               		.file 3 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/stdint.h"
 1953               		.file 4 "../../../../tmk_core/common/keycode.h"
 1954               		.file 5 "../../../../tmk_core/common/action_code.h"
 1955               		.file 6 "../../../../tmk_core/common/action_macro.h"
 1956               		.file 7 "../../../../tmk_core/common/action.h"
 1957               		.file 8 "../../../../tmk_core/common/hook.h"
 1958               		.file 9 "../../../../tmk_core/common/action_tapping.h"
 1959               		.file 10 "../../../../tmk_core/common/action_util.h"
 1960               		.file 11 "../../../../tmk_core/common/host.h"
 1961               		.file 12 "../../../../tmk_core/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/ccsR5y0R.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccsR5y0R.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccsR5y0R.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccsR5y0R.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccsR5y0R.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccsR5y0R.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccsR5y0R.s:14     .text.action_exec:0000000000000000 action_exec
     /tmp/ccsR5y0R.s:128    .text.register_code:0000000000000000 register_code
     /tmp/ccsR5y0R.s:420    .text.unregister_code:0000000000000000 unregister_code
     /tmp/ccsR5y0R.s:497    .text.register_mods:0000000000000000 register_mods
     /tmp/ccsR5y0R.s:523    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/ccsR5y0R.s:549    .text.process_action:0000000000000000 process_action
     /tmp/ccsR5y0R.s:1733   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/ccsR5y0R.s:1766   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/ccsR5y0R.s:1786   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/ccsR5y0R.s:1854   .text.debug_event:0000000000000000 debug_event
     /tmp/ccsR5y0R.s:1895   .text.debug_record:0000000000000000 debug_record
     /tmp/ccsR5y0R.s:1937   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
hook_matrix_change
action_tapping_process
add_key
add_mods
send_keyboard_report
host_system_send
host_consumer_send
del_key
del_mods
layer_switch_get_action
layer_debug
default_layer_debug
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
get_mods
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
clear_weak_mods
clear_keys
clear_mods
