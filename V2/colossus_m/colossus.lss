
colossus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00002f82  00003016  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b2  00800118  00800118  0000302e  2**0
                  ALLOC
  3 .noinit       00000004  008001ca  008001ca  0000302e  2**0
                  ALLOC
  4 .stab         00000a98  00000000  00000000  00003030  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001b2  00000000  00000000  00003ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00003c7a  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000938  00000000  00000000  00003c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000cdc9  00000000  00000000  000045c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003609  00000000  00000000  0001138c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00004c2b  00000000  00000000  00014995  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000178c  00000000  00000000  000195c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003fc5  00000000  00000000  0001ad4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006a91  00000000  00000000  0001ed11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b08  00000000  00000000  000257a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__ctors_end>
       4:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
       8:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
       c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      10:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      14:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      18:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      1c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      20:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      24:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      28:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__vector_10>
      2c:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__vector_11>
      30:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      34:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      38:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      3c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      40:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      44:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__vector_17>
      48:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      4c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      50:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      54:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__vector_21>
      58:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      5c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      60:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      64:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      68:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      6c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      70:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      74:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      78:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      7c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      80:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      84:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      88:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      8c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      90:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>
      94:	0c 94 b4 01 	jmp	0x368	; 0x368 <__bad_interrupt>

00000098 <fn_actions>:
      98:	00 f0 39 a1                                         ..9.

0000009c <keymaps>:
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      9c:	00 00 00 00 00 05 2c 11 e5 00 38 51 4f 56 50 e6     ......,...8QOVP.
      ac:	e4 e5 1d 1b 06 19 28 10 36 37 31 53 54 55 c0 00     ......(.671STU..

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      bc:	00 00 04 16 07 09 31 0d 0e 0f 33 59 5a 5b 58 00     ......1...3YZ[X.
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      cc:	00 00 14 1a 08 15 31 18 0c 12 13 5f 60 61 57 47     ......1...._`aWG

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      dc:	00 00 1e 1f 20 21 43 24 25 26 27 44 45 4e 4d 46     .... !C$%&'DENMF
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
      ec:	e0 00 35 3a 3b 22 42 23 2e 41 2d 4c 49 4b 4a 00     ..5:;"B#.A-LIKJ.
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
      fc:	00 e1 2b c1 3c 17 2a 1c 30 40 2f 5c 5d 5e 00 00     ..+.<.*.0@/\]^..
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     10c:	00 00 29 64 3d 0a 3e 0b 3f 00 34 00 62 63 52 e2     ..)d=.>.?.4.bcR.
     11c:	00 00 00 00 00 01 01 01 01 00 01 01 01 00 01 01     ................
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     12c:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 01 00     ................
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     13c:	00 00 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
				ReportData     += 4;
				break;

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     14c:	00 00 01 01 01 01 01 01 01 01 01 ac b0 ab 00 01     ................
     15c:	00 00 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
				ReportSize     -= 2;
     16c:	01 00 01 01 01 01 01 01 01 01 01 01 01 01 01 00     ................
				ReportData     += 2;
				break;

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     17c:	00 01 01 01 01 01 01 01 01 01 01 aa a8 a9 00 00     ................
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     18c:	00 00 01 01 01 01 01 01 01 00 01 00 00 00 01 01     ................

0000019c <ProductString>:
     19c:	1a 03 4d 00 6f 00 64 00 65 00 6c 00 5f 00 4d 00     ..M.o.d.e.l._.M.
     1ac:	5f 00 56 00 32 00 2e 00 30 00 00 00                 _.V.2...0...

000001b8 <ManufacturerString>:
     1b8:	1a 03 50 00 68 00 6f 00 73 00 70 00 68 00 6f 00     ..P.h.o.s.p.h.o.
     1c8:	72 00 47 00 6c 00 6f 00 77 00 00 00                 r.G.l.o.w...

000001d4 <LanguageString>:
     1d4:	04 03 09 04                                         ....

000001d8 <ConfigurationDescriptor>:
     1d8:	09 02 3b 00 02 01 00 a0 32 09 04 00 00 01 03 01     ..;.....2.......
     1e8:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     1f8:	00 0a 09 04 01 00 01 03 00 00 00 09 21 11 01 00     ............!...
     208:	01 22 36 00 07 05 82 03 08 00 0a                    ."6........

00000213 <DeviceDescriptor>:
     213:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
     223:	00 01                                               ..

00000225 <ExtrakeyReport>:
     225:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     235:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     245:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     255:	10 95 01 81 00 c0                                   ......

0000025b <KeyboardReport>:
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     25b:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     26b:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     27b:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     28b:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

0000029b <breathing_table>:
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     29b:	00 00 00 00 00 00 00 00 00 00 00 01 02 04 06 0a     ................
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2ab:	0f 17 20 2c 3a 4a 5d 71 87 9d b3 c7 da e9 f5 fc     .. ,:J]q........
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     2bb:	ff fc f5 e9 da c7 b3 9d 87 71 5d 4a 3a 2c 20 17     .........q]J:, .
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2cb:	0f 0a 06 04 02 01 00 00 00 00 00 00 00 00 00 00     ................

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2db:	00                                                  .

000002dc <__ctors_end>:
     2dc:	11 24       	eor	r1, r1
     2de:	1f be       	out	0x3f, r1	; 63
     2e0:	cf ef       	ldi	r28, 0xFF	; 255
     2e2:	d0 e2       	ldi	r29, 0x20	; 32
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	cd bf       	out	0x3d, r28	; 61

000002e8 <bootloader_jump_after_watchdog_reset>:
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2e8:	04 b6       	in	r0, 0x34	; 52

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     2ea:	03 fe       	sbrs	r0, 3
     2ec:	24 c0       	rjmp	.+72     	; 0x336 <__do_copy_data>
     2ee:	80 91 ca 01 	lds	r24, 0x01CA
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2f2:	90 91 cb 01 	lds	r25, 0x01CB
     2f6:	a0 91 cc 01 	lds	r26, 0x01CC
     2fa:	b0 91 cd 01 	lds	r27, 0x01CD
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     2fe:	87 30       	cpi	r24, 0x07	; 7
     300:	90 4b       	sbci	r25, 0xB0	; 176
     302:	a7 40       	sbci	r26, 0x07	; 7
     304:	b0 4b       	sbci	r27, 0xB0	; 176
     306:	b9 f4       	brne	.+46     	; 0x336 <__do_copy_data>
     308:	10 92 ca 01 	sts	0x01CA, r1
     30c:	10 92 cb 01 	sts	0x01CB, r1
     310:	10 92 cc 01 	sts	0x01CC, r1

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     314:	10 92 cd 01 	sts	0x01CD, r1
     318:	14 be       	out	0x34, r1	; 52
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     31a:	84 b7       	in	r24, 0x34	; 52
     31c:	87 7f       	andi	r24, 0xF7	; 247
     31e:	84 bf       	out	0x34, r24	; 52
     320:	88 e1       	ldi	r24, 0x18	; 24
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	f8 94       	cli
     326:	80 93 60 00 	sts	0x0060, r24
     32a:	10 92 60 00 	sts	0x0060, r1
     32e:	0f be       	out	0x3f, r0	; 63
     330:	e0 e0       	ldi	r30, 0x00	; 0
     332:	f0 ef       	ldi	r31, 0xF0	; 240
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     334:	09 95       	icall

00000336 <__do_copy_data>:
     336:	11 e0       	ldi	r17, 0x01	; 1
     338:	a0 e0       	ldi	r26, 0x00	; 0
     33a:	b1 e0       	ldi	r27, 0x01	; 1
					}
				}

				ParserData->UsingReportIDs = true;
     33c:	e2 e8       	ldi	r30, 0x82	; 130
     33e:	ff e2       	ldi	r31, 0x2F	; 47
     340:	00 e0       	ldi	r16, 0x00	; 0
     342:	0b bf       	out	0x3b, r16	; 59
     344:	02 c0       	rjmp	.+4      	; 0x34a <__do_copy_data+0x14>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     346:	07 90       	elpm	r0, Z+
     348:	0d 92       	st	X+, r0
     34a:	a8 31       	cpi	r26, 0x18	; 24
     34c:	b1 07       	cpc	r27, r17
				break;
     34e:	d9 f7       	brne	.-10     	; 0x346 <__do_copy_data+0x10>

00000350 <__do_clear_bss>:

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     350:	11 e0       	ldi	r17, 0x01	; 1
     352:	a8 e1       	ldi	r26, 0x18	; 24
     354:	b1 e0       	ldi	r27, 0x01	; 1
     356:	01 c0       	rjmp	.+2      	; 0x35a <.do_clear_bss_start>

00000358 <.do_clear_bss_loop>:
     358:	1d 92       	st	X+, r1

0000035a <.do_clear_bss_start>:
     35a:	aa 3c       	cpi	r26, 0xCA	; 202
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     35c:	b1 07       	cpc	r27, r17
     35e:	e1 f7       	brne	.-8      	; 0x358 <.do_clear_bss_loop>
     360:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <main>
     364:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <_exit>

00000368 <__bad_interrupt>:
     368:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000036c <action_function>:
     36c:	cf 92       	push	r12
     36e:	df 92       	push	r13
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	6c 01       	movw	r12, r24
				break;
     376:	61 11       	cpse	r22, r1
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     378:	40 c0       	rjmp	.+128    	; 0x3fa <action_function+0x8e>
     37a:	0e 94 79 15 	call	0x2af2	; 0x2af2 <get_mods>
     37e:	82 ff       	sbrs	r24, 2
     380:	07 c0       	rjmp	.+14     	; 0x390 <action_function+0x24>
     382:	0e 94 79 15 	call	0x2af2	; 0x2af2 <get_mods>

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     386:	86 fb       	bst	r24, 6
     388:	ee 24       	eor	r14, r14
     38a:	e0 f8       	bld	r14, 0
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     38c:	f1 2c       	mov	r15, r1
     38e:	02 c0       	rjmp	.+4      	; 0x394 <action_function+0x28>
     390:	e1 2c       	mov	r14, r1
     392:	f1 2c       	mov	r15, r1
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     394:	e0 92 18 01 	sts	0x0118, r14
     398:	f6 01       	movw	r30, r12
     39a:	92 81       	ldd	r25, Z+2	; 0x02
     39c:	99 23       	and	r25, r25
     39e:	09 f1       	breq	.+66     	; 0x3e2 <action_function+0x76>

					while (CurrCollectionPath->Parent != NULL)
     3a0:	ee 20       	and	r14, r14
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3a2:	69 f0       	breq	.+26     	; 0x3be <action_function+0x52>
     3a4:	c7 01       	movw	r24, r14
     3a6:	0e 94 82 15 	call	0x2b04	; 0x2b04 <del_mods>
     3aa:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <send_keyboard_report>
     3ae:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <clear_keyboard>
     3b2:	ff 90       	pop	r15
     3b4:	ef 90       	pop	r14
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3b6:	df 90       	pop	r13
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3b8:	cf 90       	pop	r12
     3ba:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <bootloader_jump>
     3be:	c7 01       	movw	r24, r14
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3c0:	0e 94 82 15 	call	0x2b04	; 0x2b04 <del_mods>
     3c4:	88 e4       	ldi	r24, 0x48	; 72
				}

				CurrCollectionPath->Type       = ReportItemData;
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <add_key>
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     3cc:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <send_keyboard_report>
     3d0:	80 91 18 01 	lds	r24, 0x0118
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	ff 90       	pop	r15

				if (UsageListSize)
     3d8:	ef 90       	pop	r14
     3da:	df 90       	pop	r13
     3dc:	cf 90       	pop	r12
     3de:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <add_mods>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     3e2:	e1 10       	cpse	r14, r1
     3e4:	0a c0       	rjmp	.+20     	; 0x3fa <action_function+0x8e>
     3e6:	88 e4       	ldi	r24, 0x48	; 72
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <del_key>
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	df 90       	pop	r13
     3f4:	cf 90       	pop	r12
     3f6:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <send_keyboard_report>

					for (uint8_t i = 1; i < UsageListSize; i++)
     3fa:	ff 90       	pop	r15
					  UsageList[i - 1] = UsageList[i];
     3fc:	ef 90       	pop	r14
     3fe:	df 90       	pop	r13
     400:	cf 90       	pop	r12
     402:	08 95       	ret

00000404 <keymap_key_to_keycode>:

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 1; i < UsageListSize; i++)
     404:	e7 2f       	mov	r30, r23
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	98 e0       	ldi	r25, 0x08	; 8
     40a:	89 9f       	mul	r24, r25
     40c:	e0 0d       	add	r30, r0
     40e:	f1 1d       	adc	r31, r1
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
     410:	11 24       	eor	r1, r1
     412:	84 e0       	ldi	r24, 0x04	; 4
     414:	ee 0f       	add	r30, r30
     416:	ff 1f       	adc	r31, r31
     418:	8a 95       	dec	r24
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     41a:	e1 f7       	brne	.-8      	; 0x414 <keymap_key_to_keycode+0x10>
     41c:	e6 0f       	add	r30, r22
     41e:	f1 1d       	adc	r31, r1
     420:	e4 56       	subi	r30, 0x64	; 100
     422:	ff 4f       	sbci	r31, 0xFF	; 255
     424:	84 91       	lpm	r24, Z
     426:	08 95       	ret

00000428 <keymap_fn_to_action>:
     428:	e8 2f       	mov	r30, r24
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	ee 0f       	add	r30, r30
     42e:	ff 1f       	adc	r31, r31
     430:	e8 5e       	subi	r30, 0xE8	; 232
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     432:	f0 40       	sbci	r31, 0x00	; 0
     434:	25 91       	lpm	r18, Z+
     436:	34 91       	lpm	r19, Z
     438:	c9 01       	movw	r24, r18
     43a:	08 95       	ret

0000043c <unselect_rows>:
     43c:	81 b1       	in	r24, 0x01	; 1
     43e:	8f 70       	andi	r24, 0x0F	; 15
     440:	81 b9       	out	0x01, r24	; 1
     442:	82 b1       	in	r24, 0x02	; 2
     444:	8f 70       	andi	r24, 0x0F	; 15
     446:	82 b9       	out	0x02, r24	; 2
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     448:	87 b1       	in	r24, 0x07	; 7
     44a:	8f 70       	andi	r24, 0x0F	; 15
     44c:	87 b9       	out	0x07, r24	; 7
     44e:	88 b1       	in	r24, 0x08	; 8
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     450:	8f 70       	andi	r24, 0x0F	; 15
     452:	88 b9       	out	0x08, r24	; 8
     454:	08 95       	ret

00000456 <matrix_init>:
				break;
     456:	85 b7       	in	r24, 0x35	; 53
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     458:	80 68       	ori	r24, 0x80	; 128
     45a:	85 bf       	out	0x35, r24	; 53
     45c:	85 b7       	in	r24, 0x35	; 53
     45e:	80 68       	ori	r24, 0x80	; 128
     460:	85 bf       	out	0x35, r24	; 53
     462:	0e 94 1e 02 	call	0x43c	; 0x43c <unselect_rows>
     466:	84 b1       	in	r24, 0x04	; 4
     468:	80 7f       	andi	r24, 0xF0	; 240
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     46a:	84 b9       	out	0x04, r24	; 4
     46c:	85 b1       	in	r24, 0x05	; 5
					NewReportItem.CollectionPath = CurrCollectionPath;
     46e:	8f 60       	ori	r24, 0x0F	; 15
     470:	85 b9       	out	0x05, r24	; 5
     472:	6b 98       	cbi	0x0d, 3	; 13
     474:	73 9a       	sbi	0x0e, 3	; 14
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     476:	80 b3       	in	r24, 0x10	; 16
     478:	81 70       	andi	r24, 0x01	; 1
     47a:	80 bb       	out	0x10, r24	; 16
     47c:	81 b3       	in	r24, 0x11	; 17

					if (UsageListSize)
     47e:	8e 6f       	ori	r24, 0xFE	; 254
     480:	81 bb       	out	0x11, r24	; 17
     482:	81 b1       	in	r24, 0x01	; 1
     484:	80 7f       	andi	r24, 0xF0	; 240
     486:	81 b9       	out	0x01, r24	; 1
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     488:	82 b1       	in	r24, 0x02	; 2
     48a:	8f 60       	ori	r24, 0x0F	; 15
     48c:	82 b9       	out	0x02, r24	; 2
     48e:	e9 e1       	ldi	r30, 0x19	; 25
     490:	f1 e0       	ldi	r31, 0x01	; 1
     492:	a9 e2       	ldi	r26, 0x29	; 41
     494:	b1 e0       	ldi	r27, 0x01	; 1
     496:	11 92       	st	Z+, r1
     498:	11 92       	st	Z+, r1
     49a:	1d 92       	st	X+, r1
     49c:	1d 92       	st	X+, r1

						for (uint8_t i = 1; i < UsageListSize; i++)
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	e9 32       	cpi	r30, 0x29	; 41
						  UsageList[i - 1] = UsageList[i];
     4a2:	f8 07       	cpc	r31, r24
     4a4:	c1 f7       	brne	.-16     	; 0x496 <matrix_init+0x40>
     4a6:	08 95       	ret

000004a8 <matrix_scan>:
     4a8:	af 92       	push	r10

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 1; i < UsageListSize; i++)
     4aa:	bf 92       	push	r11
     4ac:	cf 92       	push	r12
     4ae:	df 92       	push	r13
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	cf 93       	push	r28
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     4b6:	df 93       	push	r29
     4b8:	69 e2       	ldi	r22, 0x29	; 41
     4ba:	c6 2e       	mov	r12, r22
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	d6 2e       	mov	r13, r22
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4c0:	76 01       	movw	r14, r12
     4c2:	c0 e0       	ldi	r28, 0x00	; 0
     4c4:	d1 e0       	ldi	r29, 0x01	; 1
     4c6:	c4 30       	cpi	r28, 0x04	; 4
     4c8:	a9 f0       	breq	.+42     	; 0x4f4 <matrix_scan+0x4c>
     4ca:	30 f4       	brcc	.+12     	; 0x4d8 <matrix_scan+0x30>
     4cc:	c2 30       	cpi	r28, 0x02	; 2
     4ce:	c1 f0       	breq	.+48     	; 0x500 <matrix_scan+0x58>
     4d0:	a0 f4       	brcc	.+40     	; 0x4fa <matrix_scan+0x52>
     4d2:	c1 30       	cpi	r28, 0x01	; 1
     4d4:	d9 f4       	brne	.+54     	; 0x50c <matrix_scan+0x64>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     4d6:	17 c0       	rjmp	.+46     	; 0x506 <matrix_scan+0x5e>
     4d8:	c6 30       	cpi	r28, 0x06	; 6
     4da:	31 f0       	breq	.+12     	; 0x4e8 <matrix_scan+0x40>
     4dc:	40 f0       	brcs	.+16     	; 0x4ee <matrix_scan+0x46>
     4de:	c7 30       	cpi	r28, 0x07	; 7
     4e0:	a9 f4       	brne	.+42     	; 0x50c <matrix_scan+0x64>
     4e2:	0c 9a       	sbi	0x01, 4	; 1
     4e4:	14 98       	cbi	0x02, 4	; 2
     4e6:	14 c0       	rjmp	.+40     	; 0x510 <matrix_scan+0x68>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     4e8:	0d 9a       	sbi	0x01, 5	; 1
     4ea:	15 98       	cbi	0x02, 5	; 2
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     4ec:	11 c0       	rjmp	.+34     	; 0x510 <matrix_scan+0x68>
     4ee:	0e 9a       	sbi	0x01, 6	; 1
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     4f0:	16 98       	cbi	0x02, 6	; 2
     4f2:	0e c0       	rjmp	.+28     	; 0x510 <matrix_scan+0x68>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     4f4:	0f 9a       	sbi	0x01, 7	; 1
     4f6:	17 98       	cbi	0x02, 7	; 2
     4f8:	0b c0       	rjmp	.+22     	; 0x510 <matrix_scan+0x68>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     4fa:	3f 9a       	sbi	0x07, 7	; 7
     4fc:	47 98       	cbi	0x08, 7	; 8

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     4fe:	08 c0       	rjmp	.+16     	; 0x510 <matrix_scan+0x68>
     500:	3e 9a       	sbi	0x07, 6	; 7
     502:	46 98       	cbi	0x08, 6	; 8
     504:	05 c0       	rjmp	.+10     	; 0x510 <matrix_scan+0x68>
     506:	3d 9a       	sbi	0x07, 5	; 7
     508:	45 98       	cbi	0x08, 5	; 8
     50a:	02 c0       	rjmp	.+4      	; 0x510 <matrix_scan+0x68>
     50c:	3c 9a       	sbi	0x07, 4	; 7
     50e:	44 98       	cbi	0x08, 4	; 8
     510:	80 ea       	ldi	r24, 0xA0	; 160

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     512:	8a 95       	dec	r24
     514:	f1 f7       	brne	.-4      	; 0x512 <matrix_scan+0x6a>
     516:	83 b1       	in	r24, 0x03	; 3
     518:	86 95       	lsr	r24
     51a:	86 95       	lsr	r24
     51c:	86 95       	lsr	r24
     51e:	8d 27       	eor	r24, r29
     520:	80 fb       	bst	r24, 0

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     522:	aa 24       	eor	r10, r10
     524:	a0 f8       	bld	r10, 0
     526:	b1 2c       	mov	r11, r1
     528:	1a 9b       	sbis	0x03, 2	; 3
     52a:	03 c0       	rjmp	.+6      	; 0x532 <matrix_scan+0x8a>
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	02 c0       	rjmp	.+4      	; 0x536 <matrix_scan+0x8e>
     532:	22 e0       	ldi	r18, 0x02	; 2
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	c9 01       	movw	r24, r18
     538:	8a 29       	or	r24, r10
     53a:	9b 29       	or	r25, r11
     53c:	19 9b       	sbis	0x03, 1	; 3
     53e:	03 c0       	rjmp	.+6      	; 0x546 <matrix_scan+0x9e>
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	02 c0       	rjmp	.+4      	; 0x54a <matrix_scan+0xa2>
     546:	24 e0       	ldi	r18, 0x04	; 4
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	28 2b       	or	r18, r24
     54c:	39 2b       	or	r19, r25
     54e:	18 9b       	sbis	0x03, 0	; 3
     550:	03 c0       	rjmp	.+6      	; 0x558 <matrix_scan+0xb0>
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	02 c0       	rjmp	.+4      	; 0x55c <matrix_scan+0xb4>
     558:	88 e0       	ldi	r24, 0x08	; 8
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	82 2b       	or	r24, r18
     55e:	93 2b       	or	r25, r19

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     560:	63 9b       	sbis	0x0c, 3	; 12
     562:	03 c0       	rjmp	.+6      	; 0x56a <matrix_scan+0xc2>
     564:	40 e0       	ldi	r20, 0x00	; 0
     566:	50 e0       	ldi	r21, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;
     568:	02 c0       	rjmp	.+4      	; 0x56e <matrix_scan+0xc6>
     56a:	40 e1       	ldi	r20, 0x10	; 16

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	48 2b       	or	r20, r24
     570:	59 2b       	or	r21, r25
     572:	79 9b       	sbis	0x0f, 1	; 15
     574:	03 c0       	rjmp	.+6      	; 0x57c <matrix_scan+0xd4>
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	02 c0       	rjmp	.+4      	; 0x580 <matrix_scan+0xd8>
     57c:	20 e2       	ldi	r18, 0x20	; 32
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	24 2b       	or	r18, r20
     582:	35 2b       	or	r19, r21
     584:	7a 9b       	sbis	0x0f, 2	; 15
     586:	03 c0       	rjmp	.+6      	; 0x58e <matrix_scan+0xe6>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	02 c0       	rjmp	.+4      	; 0x592 <matrix_scan+0xea>
     58e:	80 e4       	ldi	r24, 0x40	; 64
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	28 2b       	or	r18, r24
     594:	39 2b       	or	r19, r25
     596:	7b 9b       	sbis	0x0f, 3	; 15
     598:	03 c0       	rjmp	.+6      	; 0x5a0 <matrix_scan+0xf8>
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <matrix_scan+0xfc>
     5a0:	60 e8       	ldi	r22, 0x80	; 128
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	26 2b       	or	r18, r22
     5a6:	37 2b       	or	r19, r23
     5a8:	7c 9b       	sbis	0x0f, 4	; 15
     5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <matrix_scan+0x10a>
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <matrix_scan+0x10e>
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	51 e0       	ldi	r21, 0x01	; 1
     5b6:	24 2b       	or	r18, r20
     5b8:	35 2b       	or	r19, r21
     5ba:	7d 9b       	sbis	0x0f, 5	; 15
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <matrix_scan+0x11c>
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <matrix_scan+0x120>
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	28 2b       	or	r18, r24
     5ca:	39 2b       	or	r19, r25
     5cc:	7e 9b       	sbis	0x0f, 6	; 15
     5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <matrix_scan+0x12e>
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <matrix_scan+0x132>
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	94 e0       	ldi	r25, 0x04	; 4
     5da:	28 2b       	or	r18, r24
     5dc:	39 2b       	or	r19, r25
     5de:	8f b1       	in	r24, 0x0f	; 15
     5e0:	99 27       	eor	r25, r25
     5e2:	87 fd       	sbrc	r24, 7
     5e4:	90 95       	com	r25
     5e6:	80 95       	com	r24
     5e8:	90 95       	com	r25
     5ea:	88 27       	eor	r24, r24
     5ec:	99 0f       	add	r25, r25
     5ee:	88 1f       	adc	r24, r24
     5f0:	99 27       	eor	r25, r25
     5f2:	98 2f       	mov	r25, r24
     5f4:	88 27       	eor	r24, r24
     5f6:	99 0f       	add	r25, r25
     5f8:	99 0f       	add	r25, r25
     5fa:	99 0f       	add	r25, r25
     5fc:	28 2b       	or	r18, r24
     5fe:	39 2b       	or	r19, r25
     600:	00 9b       	sbis	0x00, 0	; 0
     602:	03 c0       	rjmp	.+6      	; 0x60a <matrix_scan+0x162>
     604:	40 e0       	ldi	r20, 0x00	; 0
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	02 c0       	rjmp	.+4      	; 0x60e <matrix_scan+0x166>
     60a:	40 e0       	ldi	r20, 0x00	; 0
     60c:	50 e1       	ldi	r21, 0x10	; 16
     60e:	24 2b       	or	r18, r20
     610:	35 2b       	or	r19, r21
     612:	01 9b       	sbis	0x00, 1	; 0
     614:	03 c0       	rjmp	.+6      	; 0x61c <matrix_scan+0x174>
     616:	40 e0       	ldi	r20, 0x00	; 0
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	02 c0       	rjmp	.+4      	; 0x620 <matrix_scan+0x178>
     61c:	40 e0       	ldi	r20, 0x00	; 0
     61e:	50 e2       	ldi	r21, 0x20	; 32
     620:	24 2b       	or	r18, r20
     622:	35 2b       	or	r19, r21
     624:	02 9b       	sbis	0x00, 2	; 0
					  ParserData->TotalReportItems++;
     626:	03 c0       	rjmp	.+6      	; 0x62e <matrix_scan+0x186>
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	02 c0       	rjmp	.+4      	; 0x632 <matrix_scan+0x18a>
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	90 e4       	ldi	r25, 0x40	; 64
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     632:	28 2b       	or	r18, r24
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     634:	39 2b       	or	r19, r25
     636:	03 9b       	sbis	0x00, 3	; 0
     638:	03 c0       	rjmp	.+6      	; 0x640 <matrix_scan+0x198>
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	02 c0       	rjmp	.+4      	; 0x644 <matrix_scan+0x19c>
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e8       	ldi	r25, 0x80	; 128
     644:	28 2b       	or	r18, r24
     646:	39 2b       	or	r19, r25
     648:	d7 01       	movw	r26, r14
     64a:	8d 91       	ld	r24, X+
     64c:	9c 91       	ld	r25, X
     64e:	11 97       	sbiw	r26, 0x01	; 1
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     650:	82 17       	cp	r24, r18
     652:	93 07       	cpc	r25, r19
     654:	29 f0       	breq	.+10     	; 0x660 <matrix_scan+0x1b8>
     656:	2d 93       	st	X+, r18
     658:	3c 93       	st	X, r19
     65a:	85 e0       	ldi	r24, 0x05	; 5
     65c:	80 93 00 01 	sts	0x0100, r24
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     660:	0e 94 1e 02 	call	0x43c	; 0x43c <unselect_rows>

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     664:	cf 5f       	subi	r28, 0xFF	; 255
     666:	b2 e0       	ldi	r27, 0x02	; 2
     668:	eb 0e       	add	r14, r27
     66a:	f1 1c       	adc	r15, r1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     66c:	c8 30       	cpi	r28, 0x08	; 8
     66e:	09 f0       	breq	.+2      	; 0x672 <matrix_scan+0x1ca>
     670:	2a cf       	rjmp	.-428    	; 0x4c6 <matrix_scan+0x1e>
     672:	80 91 00 01 	lds	r24, 0x0100
     676:	88 23       	and	r24, r24
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     678:	c9 f0       	breq	.+50     	; 0x6ac <matrix_scan+0x204>
     67a:	81 50       	subi	r24, 0x01	; 1
     67c:	80 93 00 01 	sts	0x0100, r24
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     680:	88 23       	and	r24, r24
     682:	39 f0       	breq	.+14     	; 0x692 <matrix_scan+0x1ea>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     684:	ef e9       	ldi	r30, 0x9F	; 159
     686:	ff e0       	ldi	r31, 0x0F	; 15
     688:	31 97       	sbiw	r30, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <matrix_scan+0x1e0>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     68c:	00 c0       	rjmp	.+0      	; 0x68e <matrix_scan+0x1e6>
     68e:	00 00       	nop
     690:	0d c0       	rjmp	.+26     	; 0x6ac <matrix_scan+0x204>
     692:	e9 e1       	ldi	r30, 0x19	; 25
	  return HID_PARSE_NoUnfilteredReportItems;
     694:	f1 e0       	ldi	r31, 0x01	; 1
     696:	d6 01       	movw	r26, r12

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     698:	8d 91       	ld	r24, X+
     69a:	9d 91       	ld	r25, X+
				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     69c:	6d 01       	movw	r12, r26
     69e:	81 93       	st	Z+, r24
				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6a0:	91 93       	st	Z+, r25
     6a2:	b9 e3       	ldi	r27, 0x39	; 57
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6a4:	cb 16       	cp	r12, r27
     6a6:	b1 e0       	ldi	r27, 0x01	; 1

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6a8:	db 06       	cpc	r13, r27
     6aa:	a9 f7       	brne	.-22     	; 0x696 <matrix_scan+0x1ee>
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	df 91       	pop	r29
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6b0:	cf 91       	pop	r28
     6b2:	ff 90       	pop	r15
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     6b4:	ef 90       	pop	r14
     6b6:	df 90       	pop	r13
     6b8:	cf 90       	pop	r12
     6ba:	bf 90       	pop	r11

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6bc:	af 90       	pop	r10
     6be:	08 95       	ret

000006c0 <matrix_get_row>:
     6c0:	e8 2f       	mov	r30, r24
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	ee 0f       	add	r30, r30
     6c6:	ff 1f       	adc	r31, r31
     6c8:	e7 5e       	subi	r30, 0xE7	; 231
     6ca:	fe 4f       	sbci	r31, 0xFE	; 254
     6cc:	80 81       	ld	r24, Z
     6ce:	91 81       	ldd	r25, Z+1	; 0x01
     6d0:	08 95       	ret

000006d2 <matrix_print>:
     6d2:	08 95       	ret

000006d4 <led_set>:
     6d4:	3b 9a       	sbi	0x07, 3	; 7
     6d6:	39 9a       	sbi	0x07, 1	; 7
     6d8:	69 9a       	sbi	0x0d, 1	; 13
     6da:	81 ff       	sbrs	r24, 1
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <led_set+0xe>
     6de:	43 98       	cbi	0x08, 3	; 8
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <led_set+0x10>
     6e2:	43 9a       	sbi	0x08, 3	; 8
     6e4:	80 ff       	sbrs	r24, 0
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <led_set+0x18>
     6e8:	41 98       	cbi	0x08, 1	; 8
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <led_set+0x1a>
     6ec:	41 9a       	sbi	0x08, 1	; 8
     6ee:	82 ff       	sbrs	r24, 2
    else
    {
        PORT_NUMLCK |= (1<<BIT_NUMLCK);
    }

    if (usb_led & (1<<USB_LED_SCROLL_LOCK))
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <led_set+0x22>
    {
        PORT_SCROLLLCK &= ~(1<<BIT_SCROLLLCK);
     6f2:	71 98       	cbi	0x0e, 1	; 14
     6f4:	08 95       	ret
    }
    else
    {
        PORT_SCROLLLCK |= (1<<BIT_SCROLLLCK);
     6f6:	71 9a       	sbi	0x0e, 1	; 14
     6f8:	08 95       	ret

000006fa <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     6fa:	80 91 42 01 	lds	r24, 0x0142
     6fe:	08 95       	ret

00000700 <send_mouse>:

    keyboard_report_sent = *report;
}

static void send_mouse(report_mouse_t *report)
{
     700:	08 95       	ret

00000702 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	00 d0       	rcall	.+0      	; 0x708 <send_consumer+0x6>
     708:	1f 92       	push	r1
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     70e:	20 91 c1 01 	lds	r18, 0x01C1
     712:	24 30       	cpi	r18, 0x04	; 4
     714:	29 f5       	brne	.+74     	; 0x760 <send_consumer+0x5e>
        return;

    report_extra_t r = {
     716:	23 e0       	ldi	r18, 0x03	; 3
     718:	29 83       	std	Y+1, r18	; 0x01
     71a:	9b 83       	std	Y+3, r25	; 0x03
     71c:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	80 93 e9 00 	sts	0x00E9, r24
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	06 c0       	rjmp	.+12     	; 0x734 <send_consumer+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     728:	95 ed       	ldi	r25, 0xD5	; 213
     72a:	9a 95       	dec	r25
     72c:	f1 f7       	brne	.-4      	; 0x72a <send_consumer+0x28>
     72e:	00 00       	nop
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     730:	88 23       	and	r24, r24
     732:	29 f0       	breq	.+10     	; 0x73e <send_consumer+0x3c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     734:	90 91 e8 00 	lds	r25, 0x00E8
     738:	81 50       	subi	r24, 0x01	; 1
     73a:	95 ff       	sbrs	r25, 5
     73c:	f5 cf       	rjmp	.-22     	; 0x728 <send_consumer+0x26>
     73e:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
     742:	85 ff       	sbrs	r24, 5
     744:	0d c0       	rjmp	.+26     	; 0x760 <send_consumer+0x5e>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	63 e0       	ldi	r22, 0x03	; 3
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	ce 01       	movw	r24, r28
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	0e 94 ba 05 	call	0xb74	; 0xb74 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     756:	80 91 e8 00 	lds	r24, 0x00E8
     75a:	8e 77       	andi	r24, 0x7E	; 126
     75c:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	00 d0       	rcall	.+0      	; 0x772 <send_system+0x6>
     772:	1f 92       	push	r1
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     778:	20 91 c1 01 	lds	r18, 0x01C1
     77c:	24 30       	cpi	r18, 0x04	; 4
     77e:	21 f5       	brne	.+72     	; 0x7c8 <send_system+0x5c>
        return;

    report_extra_t r = {
     780:	22 e0       	ldi	r18, 0x02	; 2
     782:	29 83       	std	Y+1, r18	; 0x01
     784:	9b 83       	std	Y+3, r25	; 0x03
     786:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     788:	20 93 e9 00 	sts	0x00E9, r18
     78c:	8f ef       	ldi	r24, 0xFF	; 255
     78e:	06 c0       	rjmp	.+12     	; 0x79c <send_system+0x30>
     790:	95 ed       	ldi	r25, 0xD5	; 213
     792:	9a 95       	dec	r25
     794:	f1 f7       	brne	.-4      	; 0x792 <send_system+0x26>
     796:	00 00       	nop
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     798:	88 23       	and	r24, r24
     79a:	29 f0       	breq	.+10     	; 0x7a6 <send_system+0x3a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     79c:	90 91 e8 00 	lds	r25, 0x00E8
     7a0:	81 50       	subi	r24, 0x01	; 1
     7a2:	95 ff       	sbrs	r25, 5
     7a4:	f5 cf       	rjmp	.-22     	; 0x790 <send_system+0x24>
     7a6:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
     7aa:	85 ff       	sbrs	r24, 5
     7ac:	0d c0       	rjmp	.+26     	; 0x7c8 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	63 e0       	ldi	r22, 0x03	; 3
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	ce 01       	movw	r24, r28
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	0e 94 ba 05 	call	0xb74	; 0xb74 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7be:	80 91 e8 00 	lds	r24, 0x00E8
     7c2:	8e 77       	andi	r24, 0x7E	; 126
     7c4:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	08 95       	ret

000007d4 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	7c 01       	movw	r14, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     7da:	80 91 c1 01 	lds	r24, 0x01C1
     7de:	84 30       	cpi	r24, 0x04	; 4
     7e0:	41 f5       	brne	.+80     	; 0x832 <send_keyboard+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	80 93 e9 00 	sts	0x00E9, r24
     7e8:	8f ef       	ldi	r24, 0xFF	; 255
     7ea:	06 c0       	rjmp	.+12     	; 0x7f8 <send_keyboard+0x24>
     7ec:	95 ed       	ldi	r25, 0xD5	; 213
     7ee:	9a 95       	dec	r25
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <send_keyboard+0x1a>
     7f2:	00 00       	nop
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     7f4:	88 23       	and	r24, r24
     7f6:	29 f0       	breq	.+10     	; 0x802 <send_keyboard+0x2e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     7f8:	90 91 e8 00 	lds	r25, 0x00E8
     7fc:	81 50       	subi	r24, 0x01	; 1
     7fe:	95 ff       	sbrs	r25, 5
     800:	f5 cf       	rjmp	.-22     	; 0x7ec <send_keyboard+0x18>
     802:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
     806:	85 ff       	sbrs	r24, 5
     808:	14 c0       	rjmp	.+40     	; 0x832 <send_keyboard+0x5e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	68 e0       	ldi	r22, 0x08	; 8
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	c7 01       	movw	r24, r14
     814:	0e 94 ba 05 	call	0xb74	; 0xb74 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     818:	80 91 e8 00 	lds	r24, 0x00E8
     81c:	8e 77       	andi	r24, 0x7E	; 126
     81e:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
     822:	88 e0       	ldi	r24, 0x08	; 8
     824:	f7 01       	movw	r30, r14
     826:	aa e3       	ldi	r26, 0x3A	; 58
     828:	b1 e0       	ldi	r27, 0x01	; 1
     82a:	01 90       	ld	r0, Z+
     82c:	0d 92       	st	X+, r0
     82e:	8a 95       	dec	r24
     830:	e1 f7       	brne	.-8      	; 0x82a <send_keyboard+0x56>
}
     832:	ff 90       	pop	r15
     834:	ef 90       	pop	r14
     836:	08 95       	ret

00000838 <EVENT_USB_Device_Connect>:
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    /* For battery powered device */
    if (!USB_IsInitialized) {
     838:	80 91 c0 01 	lds	r24, 0x01C0
     83c:	81 11       	cpse	r24, r1
     83e:	09 c0       	rjmp	.+18     	; 0x852 <EVENT_USB_Device_Connect+0x1a>
        USB_Disable();
     840:	0e 94 52 07 	call	0xea4	; 0xea4 <USB_Disable>
        USB_Init();
     844:	0e 94 b9 07 	call	0xf72	; 0xf72 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     848:	80 91 e2 00 	lds	r24, 0x00E2
     84c:	84 60       	ori	r24, 0x04	; 4
     84e:	80 93 e2 00 	sts	0x00E2, r24
     852:	08 95       	ret

00000854 <EVENT_USB_Device_Disconnect>:

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    /* For battery powered device */
    USB_IsInitialized = false;
     854:	10 92 c0 01 	sts	0x01C0, r1
     858:	08 95       	ret

0000085a <EVENT_USB_Device_Reset>:
    }
*/
}

void EVENT_USB_Device_Reset(void)
{
     85a:	08 95       	ret

0000085c <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     85c:	42 e0       	ldi	r20, 0x02	; 2
     85e:	61 ec       	ldi	r22, 0xC1	; 193
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	0e 94 c8 06 	call	0xd90	; 0xd90 <Endpoint_ConfigureEndpoint_Prv>
     866:	42 e0       	ldi	r20, 0x02	; 2
     868:	61 ec       	ldi	r22, 0xC1	; 193
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <Endpoint_ConfigureEndpoint_Prv>

00000870 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
     870:	80 91 c3 01 	lds	r24, 0x01C3
     874:	83 30       	cpi	r24, 0x03	; 3
     876:	09 f4       	brne	.+2      	; 0x87a <EVENT_USB_Device_ControlRequest+0xa>
     878:	54 c0       	rjmp	.+168    	; 0x922 <EVENT_USB_Device_ControlRequest+0xb2>
     87a:	30 f4       	brcc	.+12     	; 0x888 <EVENT_USB_Device_ControlRequest+0x18>
     87c:	81 30       	cpi	r24, 0x01	; 1
     87e:	71 f0       	breq	.+28     	; 0x89c <EVENT_USB_Device_ControlRequest+0x2c>
     880:	82 30       	cpi	r24, 0x02	; 2
     882:	09 f0       	breq	.+2      	; 0x886 <EVENT_USB_Device_ControlRequest+0x16>
     884:	a5 c0       	rjmp	.+330    	; 0x9d0 <EVENT_USB_Device_ControlRequest+0x160>
     886:	8c c0       	rjmp	.+280    	; 0x9a0 <EVENT_USB_Device_ControlRequest+0x130>
     888:	8a 30       	cpi	r24, 0x0A	; 10
     88a:	09 f4       	brne	.+2      	; 0x88e <EVENT_USB_Device_ControlRequest+0x1e>
     88c:	79 c0       	rjmp	.+242    	; 0x980 <EVENT_USB_Device_ControlRequest+0x110>
     88e:	8b 30       	cpi	r24, 0x0B	; 11
     890:	09 f4       	brne	.+2      	; 0x894 <EVENT_USB_Device_ControlRequest+0x24>
     892:	5f c0       	rjmp	.+190    	; 0x952 <EVENT_USB_Device_ControlRequest+0xe2>
     894:	89 30       	cpi	r24, 0x09	; 9
     896:	09 f0       	breq	.+2      	; 0x89a <EVENT_USB_Device_ControlRequest+0x2a>
     898:	9b c0       	rjmp	.+310    	; 0x9d0 <EVENT_USB_Device_ControlRequest+0x160>
     89a:	20 c0       	rjmp	.+64     	; 0x8dc <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     89c:	80 91 c2 01 	lds	r24, 0x01C2
     8a0:	81 3a       	cpi	r24, 0xA1	; 161
     8a2:	09 f0       	breq	.+2      	; 0x8a6 <EVENT_USB_Device_ControlRequest+0x36>
     8a4:	95 c0       	rjmp	.+298    	; 0x9d0 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     8a6:	80 91 e8 00 	lds	r24, 0x00E8
     8aa:	87 7f       	andi	r24, 0xF7	; 247
     8ac:	80 93 e8 00 	sts	0x00E8, r24
     8b0:	80 91 c6 01 	lds	r24, 0x01C6
     8b4:	90 91 c7 01 	lds	r25, 0x01C7
     8b8:	89 2b       	or	r24, r25
     8ba:	21 f0       	breq	.+8      	; 0x8c4 <EVENT_USB_Device_ControlRequest+0x54>
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	03 c0       	rjmp	.+6      	; 0x8ca <EVENT_USB_Device_ControlRequest+0x5a>
     8c4:	68 e0       	ldi	r22, 0x08	; 8
     8c6:	8a e3       	ldi	r24, 0x3A	; 58
     8c8:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8d0:	80 91 e8 00 	lds	r24, 0x00E8
     8d4:	8b 77       	andi	r24, 0x7B	; 123
     8d6:	80 93 e8 00 	sts	0x00E8, r24
     8da:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     8dc:	80 91 c2 01 	lds	r24, 0x01C2
     8e0:	81 32       	cpi	r24, 0x21	; 33
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <EVENT_USB_Device_ControlRequest+0x76>
     8e4:	75 c0       	rjmp	.+234    	; 0x9d0 <EVENT_USB_Device_ControlRequest+0x160>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
     8e6:	80 91 c6 01 	lds	r24, 0x01C6
     8ea:	90 91 c7 01 	lds	r25, 0x01C7
     8ee:	89 2b       	or	r24, r25
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <EVENT_USB_Device_ControlRequest+0x84>
     8f2:	6e c0       	rjmp	.+220    	; 0x9d0 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     8f4:	80 91 e8 00 	lds	r24, 0x00E8
     8f8:	87 7f       	andi	r24, 0xF7	; 247
     8fa:	80 93 e8 00 	sts	0x00E8, r24
     8fe:	05 c0       	rjmp	.+10     	; 0x90a <EVENT_USB_Device_ControlRequest+0x9a>
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
     900:	80 91 c1 01 	lds	r24, 0x01C1
     904:	88 23       	and	r24, r24
     906:	09 f4       	brne	.+2      	; 0x90a <EVENT_USB_Device_ControlRequest+0x9a>
     908:	63 c0       	rjmp	.+198    	; 0x9d0 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     90a:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
     90e:	82 ff       	sbrs	r24, 2
     910:	f7 cf       	rjmp	.-18     	; 0x900 <EVENT_USB_Device_ControlRequest+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     912:	80 91 f1 00 	lds	r24, 0x00F1
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
     916:	80 93 42 01 	sts	0x0142, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     91a:	80 91 e8 00 	lds	r24, 0x00E8
     91e:	8b 77       	andi	r24, 0x7B	; 123
     920:	53 c0       	rjmp	.+166    	; 0x9c8 <EVENT_USB_Device_ControlRequest+0x158>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     922:	80 91 c2 01 	lds	r24, 0x01C2
     926:	81 3a       	cpi	r24, 0xA1	; 161
     928:	09 f0       	breq	.+2      	; 0x92c <EVENT_USB_Device_ControlRequest+0xbc>
     92a:	52 c0       	rjmp	.+164    	; 0x9d0 <EVENT_USB_Device_ControlRequest+0x160>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
     92c:	80 91 c6 01 	lds	r24, 0x01C6
     930:	90 91 c7 01 	lds	r25, 0x01C7
     934:	89 2b       	or	r24, r25
     936:	09 f0       	breq	.+2      	; 0x93a <EVENT_USB_Device_ControlRequest+0xca>
     938:	4b c0       	rjmp	.+150    	; 0x9d0 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     93a:	80 91 e8 00 	lds	r24, 0x00E8
     93e:	87 7f       	andi	r24, 0xF7	; 247
     940:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     944:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
     948:	80 ff       	sbrs	r24, 0
     94a:	fc cf       	rjmp	.-8      	; 0x944 <EVENT_USB_Device_ControlRequest+0xd4>
                    Endpoint_Write_8(keyboard_protocol);
     94c:	80 91 0b 01 	lds	r24, 0x010B
     950:	36 c0       	rjmp	.+108    	; 0x9be <EVENT_USB_Device_ControlRequest+0x14e>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     952:	80 91 c2 01 	lds	r24, 0x01C2
     956:	81 32       	cpi	r24, 0x21	; 33
     958:	d9 f5       	brne	.+118    	; 0x9d0 <EVENT_USB_Device_ControlRequest+0x160>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
     95a:	80 91 c6 01 	lds	r24, 0x01C6
     95e:	90 91 c7 01 	lds	r25, 0x01C7
     962:	89 2b       	or	r24, r25
     964:	a9 f5       	brne	.+106    	; 0x9d0 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     966:	80 91 e8 00 	lds	r24, 0x00E8
     96a:	87 7f       	andi	r24, 0xF7	; 247
     96c:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
     970:	0e 94 ff 06 	call	0xdfe	; 0xdfe <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
     974:	80 91 c4 01 	lds	r24, 0x01C4
     978:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
     97c:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     980:	80 91 c2 01 	lds	r24, 0x01C2
     984:	81 32       	cpi	r24, 0x21	; 33
     986:	21 f5       	brne	.+72     	; 0x9d0 <EVENT_USB_Device_ControlRequest+0x160>
     988:	80 91 e8 00 	lds	r24, 0x00E8
     98c:	87 7f       	andi	r24, 0xF7	; 247
     98e:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
     992:	0e 94 ff 06 	call	0xdfe	; 0xdfe <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
     996:	80 91 c5 01 	lds	r24, 0x01C5
     99a:	80 93 39 01 	sts	0x0139, r24
     99e:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     9a0:	80 91 c2 01 	lds	r24, 0x01C2
     9a4:	81 3a       	cpi	r24, 0xA1	; 161
     9a6:	a1 f4       	brne	.+40     	; 0x9d0 <EVENT_USB_Device_ControlRequest+0x160>
     9a8:	80 91 e8 00 	lds	r24, 0x00E8
     9ac:	87 7f       	andi	r24, 0xF7	; 247
     9ae:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9b2:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
     9b6:	80 ff       	sbrs	r24, 0
     9b8:	fc cf       	rjmp	.-8      	; 0x9b2 <EVENT_USB_Device_ControlRequest+0x142>
                Endpoint_Write_8(keyboard_idle);
     9ba:	80 91 39 01 	lds	r24, 0x0139
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9be:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9c2:	80 91 e8 00 	lds	r24, 0x00E8
     9c6:	8e 77       	andi	r24, 0x7E	; 126
     9c8:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
     9cc:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <Endpoint_ClearStatusStage>
     9d0:	08 95       	ret

000009d2 <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
     9d2:	08 95       	ret

000009d4 <hook_late_init>:

__attribute__((weak))
void hook_late_init(void) {}
     9d4:	08 95       	ret

000009d6 <hook_usb_suspend_entry>:

 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
#ifdef SLEEP_LED_ENABLE
    sleep_led_enable();
     9d6:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <sleep_led_enable>

000009da <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    hook_usb_suspend_entry();
     9da:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <hook_usb_suspend_entry>

000009de <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
     9de:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
     9e2:	80 91 bf 01 	lds	r24, 0x01BF
     9e6:	88 23       	and	r24, r24
     9e8:	29 f0       	breq	.+10     	; 0x9f4 <hook_usb_suspend_loop+0x16>
     9ea:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <suspend_wakeup_condition>
     9ee:	81 11       	cpse	r24, r1
            USB_Device_SendRemoteWakeup();
     9f0:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <USB_Device_SendRemoteWakeup>
     9f4:	08 95       	ret

000009f6 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     9f6:	84 b7       	in	r24, 0x34	; 52
     9f8:	87 7f       	andi	r24, 0xF7	; 247
     9fa:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
     9fc:	88 e1       	ldi	r24, 0x18	; 24
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	80 93 60 00 	sts	0x0060, r24
     a06:	10 92 60 00 	sts	0x0060, r1
     a0a:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	80 e8       	ldi	r24, 0x80	; 128
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	80 93 61 00 	sts	0x0061, r24
     a18:	90 93 61 00 	sts	0x0061, r25
     a1c:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    hook_early_init();
     a1e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <hook_early_init>
    keyboard_setup();
     a22:	0e 94 a6 0a 	call	0x154c	; 0x154c <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
     a26:	0e 94 52 07 	call	0xea4	; 0xea4 <USB_Disable>

    USB_Init();
     a2a:	0e 94 b9 07 	call	0xf72	; 0xf72 <USB_Init>
     a2e:	80 91 e2 00 	lds	r24, 0x00E2
     a32:	84 60       	ori	r24, 0x04	; 4
     a34:	80 93 e2 00 	sts	0x00E2, r24
{
    setup_mcu();
    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
     a38:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
     a3a:	80 91 c1 01 	lds	r24, 0x01C1
     a3e:	84 30       	cpi	r24, 0x04	; 4
     a40:	e1 f7       	brne	.-8      	; 0xa3a <main+0x44>
#endif
    }
    print("USB configured.\n");

    /* init modules */
    keyboard_init();
     a42:	0e 94 a8 0a 	call	0x1550	; 0x1550 <keyboard_init>
    host_set_driver(&lufa_driver);
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
     a4e:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <sleep_led_init>
#endif

    print("Keyboard start.\n");
    hook_late_init();
     a52:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <hook_late_init>
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <main+0x66>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
            print("[s]");
            hook_usb_suspend_loop();
     a58:	0e 94 ef 04 	call	0x9de	; 0x9de <hook_usb_suspend_loop>
#endif

    print("Keyboard start.\n");
    hook_late_init();
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
     a5c:	80 91 c1 01 	lds	r24, 0x01C1
     a60:	85 30       	cpi	r24, 0x05	; 5
     a62:	d1 f3       	breq	.-12     	; 0xa58 <main+0x62>
            print("[s]");
            hook_usb_suspend_loop();
        }

        keyboard_task();
     a64:	0e 94 ac 0a 	call	0x1558	; 0x1558 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
     a68:	f9 cf       	rjmp	.-14     	; 0xa5c <main+0x66>

00000a6a <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
     a6a:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <suspend_wakeup_init>
#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
     a6e:	0e 94 76 17 	call	0x2eec	; 0x2eec <sleep_led_disable>
    // NOTE: converters may not accept this
    led_set(host_keyboard_leds());
     a72:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <host_keyboard_leds>
     a76:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <led_set>

00000a7a <EVENT_USB_Device_WakeUp>:
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    hook_usb_wakeup();
     a7a:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <hook_usb_wakeup>

00000a7e <CALLBACK_USB_GetDescriptor>:
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
     a7e:	29 2f       	mov	r18, r25
     a80:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     a82:	23 30       	cpi	r18, 0x03	; 3
     a84:	31 05       	cpc	r19, r1
     a86:	b1 f0       	breq	.+44     	; 0xab4 <CALLBACK_USB_GetDescriptor+0x36>
     a88:	4c f4       	brge	.+18     	; 0xa9c <CALLBACK_USB_GetDescriptor+0x1e>
     a8a:	21 30       	cpi	r18, 0x01	; 1
     a8c:	31 05       	cpc	r19, r1
     a8e:	09 f4       	brne	.+2      	; 0xa92 <CALLBACK_USB_GetDescriptor+0x14>
     a90:	4d c0       	rjmp	.+154    	; 0xb2c <CALLBACK_USB_GetDescriptor+0xae>
     a92:	22 30       	cpi	r18, 0x02	; 2
     a94:	31 05       	cpc	r19, r1
     a96:	09 f0       	breq	.+2      	; 0xa9a <CALLBACK_USB_GetDescriptor+0x1c>
     a98:	4e c0       	rjmp	.+156    	; 0xb36 <CALLBACK_USB_GetDescriptor+0xb8>
     a9a:	07 c0       	rjmp	.+14     	; 0xaaa <CALLBACK_USB_GetDescriptor+0x2c>
     a9c:	21 32       	cpi	r18, 0x21	; 33
     a9e:	31 05       	cpc	r19, r1
     aa0:	41 f1       	breq	.+80     	; 0xaf2 <CALLBACK_USB_GetDescriptor+0x74>
     aa2:	22 32       	cpi	r18, 0x22	; 34
     aa4:	31 05       	cpc	r19, r1
     aa6:	91 f1       	breq	.+100    	; 0xb0c <CALLBACK_USB_GetDescriptor+0x8e>
     aa8:	46 c0       	rjmp	.+140    	; 0xb36 <CALLBACK_USB_GetDescriptor+0xb8>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
     aaa:	eb e3       	ldi	r30, 0x3B	; 59
     aac:	f0 e0       	ldi	r31, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
     aae:	88 ed       	ldi	r24, 0xD8	; 216
     ab0:	91 e0       	ldi	r25, 0x01	; 1
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
     ab2:	45 c0       	rjmp	.+138    	; 0xb3e <CALLBACK_USB_GetDescriptor+0xc0>
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
     ab4:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	91 05       	cpc	r25, r1
     aba:	69 f0       	breq	.+26     	; 0xad6 <CALLBACK_USB_GetDescriptor+0x58>
     abc:	82 30       	cpi	r24, 0x02	; 2
     abe:	91 05       	cpc	r25, r1
     ac0:	89 f0       	breq	.+34     	; 0xae4 <CALLBACK_USB_GetDescriptor+0x66>
     ac2:	89 2b       	or	r24, r25
     ac4:	09 f0       	breq	.+2      	; 0xac8 <CALLBACK_USB_GetDescriptor+0x4a>
     ac6:	37 c0       	rjmp	.+110    	; 0xb36 <CALLBACK_USB_GetDescriptor+0xb8>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
     ac8:	e4 ed       	ldi	r30, 0xD4	; 212
     aca:	f1 e0       	ldi	r31, 0x01	; 1
     acc:	e4 91       	lpm	r30, Z
     ace:	f0 e0       	ldi	r31, 0x00	; 0
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
            {
                case 0x00:
                    Address = &LanguageString;
     ad0:	84 ed       	ldi	r24, 0xD4	; 212
     ad2:	91 e0       	ldi	r25, 0x01	; 1
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
     ad4:	34 c0       	rjmp	.+104    	; 0xb3e <CALLBACK_USB_GetDescriptor+0xc0>
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     ad6:	e8 eb       	ldi	r30, 0xB8	; 184
     ad8:	f1 e0       	ldi	r31, 0x01	; 1
     ada:	e4 91       	lpm	r30, Z
     adc:	f0 e0       	ldi	r31, 0x00	; 0
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case 0x01:
                    Address = &ManufacturerString;
     ade:	88 eb       	ldi	r24, 0xB8	; 184
     ae0:	91 e0       	ldi	r25, 0x01	; 1
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
     ae2:	2d c0       	rjmp	.+90     	; 0xb3e <CALLBACK_USB_GetDescriptor+0xc0>
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
     ae4:	ec e9       	ldi	r30, 0x9C	; 156
     ae6:	f1 e0       	ldi	r31, 0x01	; 1
     ae8:	e4 91       	lpm	r30, Z
     aea:	f0 e0       	ldi	r31, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
     aec:	8c e9       	ldi	r24, 0x9C	; 156
     aee:	91 e0       	ldi	r25, 0x01	; 1
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
     af0:	26 c0       	rjmp	.+76     	; 0xb3e <CALLBACK_USB_GetDescriptor+0xc0>
     af2:	62 30       	cpi	r22, 0x02	; 2
     af4:	00 f5       	brcc	.+64     	; 0xb36 <CALLBACK_USB_GetDescriptor+0xb8>
     af6:	e6 2f       	mov	r30, r22
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	ee 0f       	add	r30, r30
     afc:	ff 1f       	adc	r31, r31
     afe:	e2 5f       	subi	r30, 0xF2	; 242
     b00:	fe 4f       	sbci	r31, 0xFE	; 254
     b02:	80 81       	ld	r24, Z
     b04:	91 81       	ldd	r25, Z+1	; 0x01
     b06:	e9 e0       	ldi	r30, 0x09	; 9
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	19 c0       	rjmp	.+50     	; 0xb3e <CALLBACK_USB_GetDescriptor+0xc0>
     b0c:	62 30       	cpi	r22, 0x02	; 2
     b0e:	98 f4       	brcc	.+38     	; 0xb36 <CALLBACK_USB_GetDescriptor+0xb8>
     b10:	e6 2f       	mov	r30, r22
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	df 01       	movw	r26, r30
     b16:	aa 0f       	add	r26, r26
     b18:	bb 1f       	adc	r27, r27
     b1a:	ae 5e       	subi	r26, 0xEE	; 238
     b1c:	be 4f       	sbci	r27, 0xFE	; 254
     b1e:	8d 91       	ld	r24, X+
     b20:	9c 91       	ld	r25, X
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
     b22:	ea 5e       	subi	r30, 0xEA	; 234
     b24:	fe 4f       	sbci	r31, 0xFE	; 254
     b26:	e0 81       	ld	r30, Z
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	09 c0       	rjmp	.+18     	; 0xb3e <CALLBACK_USB_GetDescriptor+0xc0>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
     b2c:	e2 e1       	ldi	r30, 0x12	; 18
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
     b30:	83 e1       	ldi	r24, 0x13	; 19
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	04 c0       	rjmp	.+8      	; 0xb3e <CALLBACK_USB_GetDescriptor+0xc0>
     b36:	e0 e0       	ldi	r30, 0x00	; 0
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
     b3e:	da 01       	movw	r26, r20
     b40:	8d 93       	st	X+, r24
     b42:	9c 93       	st	X, r25
    return Size;
}
     b44:	cf 01       	movw	r24, r30
     b46:	08 95       	ret

00000b48 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b48:	84 e1       	ldi	r24, 0x14	; 20
     b4a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b4c:	86 e1       	ldi	r24, 0x16	; 22
     b4e:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     b50:	09 b4       	in	r0, 0x29	; 41
     b52:	00 fe       	sbrs	r0, 0
     b54:	fd cf       	rjmp	.-6      	; 0xb50 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b56:	80 91 d8 00 	lds	r24, 0x00D8
     b5a:	8f 7d       	andi	r24, 0xDF	; 223
     b5c:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
     b60:	80 91 e0 00 	lds	r24, 0x00E0
     b64:	82 60       	ori	r24, 0x02	; 2
     b66:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
     b6a:	80 91 e0 00 	lds	r24, 0x00E0
     b6e:	81 fd       	sbrc	r24, 1
     b70:	fc cf       	rjmp	.-8      	; 0xb6a <USB_Device_SendRemoteWakeup+0x22>
}
     b72:	08 95       	ret

00000b74 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     b74:	8f 92       	push	r8
     b76:	9f 92       	push	r9
     b78:	af 92       	push	r10
     b7a:	bf 92       	push	r11
     b7c:	cf 92       	push	r12
     b7e:	df 92       	push	r13
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	cf 93       	push	r28
     b86:	5c 01       	movw	r10, r24
     b88:	6b 01       	movw	r12, r22
     b8a:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     b8c:	0e 94 20 07 	call	0xe40	; 0xe40 <Endpoint_WaitUntilReady>
     b90:	c8 2f       	mov	r28, r24
     b92:	81 11       	cpse	r24, r1
     b94:	37 c0       	rjmp	.+110    	; 0xc04 <Endpoint_Write_Stream_LE+0x90>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     b96:	e1 14       	cp	r14, r1
     b98:	f1 04       	cpc	r15, r1
     b9a:	39 f0       	breq	.+14     	; 0xbaa <Endpoint_Write_Stream_LE+0x36>
	{
		Length -= *BytesProcessed;
     b9c:	f7 01       	movw	r30, r14
     b9e:	20 81       	ld	r18, Z
     ba0:	31 81       	ldd	r19, Z+1	; 0x01
     ba2:	c2 1a       	sub	r12, r18
     ba4:	d3 0a       	sbc	r13, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     ba6:	a2 0e       	add	r10, r18
     ba8:	b3 1e       	adc	r11, r19

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     baa:	81 2c       	mov	r8, r1
     bac:	91 2c       	mov	r9, r1
     bae:	25 c0       	rjmp	.+74     	; 0xbfa <Endpoint_Write_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     bb0:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     bb4:	85 fd       	sbrc	r24, 5
     bb6:	16 c0       	rjmp	.+44     	; 0xbe4 <Endpoint_Write_Stream_LE+0x70>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bb8:	80 91 e8 00 	lds	r24, 0x00E8
     bbc:	8e 77       	andi	r24, 0x7E	; 126
     bbe:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     bc2:	e1 14       	cp	r14, r1
     bc4:	f1 04       	cpc	r15, r1
     bc6:	49 f0       	breq	.+18     	; 0xbda <Endpoint_Write_Stream_LE+0x66>
			{
				*BytesProcessed += BytesInTransfer;
     bc8:	f7 01       	movw	r30, r14
     bca:	80 81       	ld	r24, Z
     bcc:	91 81       	ldd	r25, Z+1	; 0x01
     bce:	88 0d       	add	r24, r8
     bd0:	99 1d       	adc	r25, r9
     bd2:	91 83       	std	Z+1, r25	; 0x01
     bd4:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     bd6:	c5 e0       	ldi	r28, 0x05	; 5
     bd8:	15 c0       	rjmp	.+42     	; 0xc04 <Endpoint_Write_Stream_LE+0x90>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     bda:	0e 94 20 07 	call	0xe40	; 0xe40 <Endpoint_WaitUntilReady>
     bde:	88 23       	and	r24, r24
     be0:	61 f0       	breq	.+24     	; 0xbfa <Endpoint_Write_Stream_LE+0x86>
     be2:	0f c0       	rjmp	.+30     	; 0xc02 <Endpoint_Write_Stream_LE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     be4:	f5 01       	movw	r30, r10
     be6:	81 91       	ld	r24, Z+
     be8:	5f 01       	movw	r10, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bea:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     bee:	f1 e0       	ldi	r31, 0x01	; 1
     bf0:	cf 1a       	sub	r12, r31
     bf2:	d1 08       	sbc	r13, r1
			BytesInTransfer++;
     bf4:	8f ef       	ldi	r24, 0xFF	; 255
     bf6:	88 1a       	sub	r8, r24
     bf8:	98 0a       	sbc	r9, r24
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     bfa:	c1 14       	cp	r12, r1
     bfc:	d1 04       	cpc	r13, r1
     bfe:	c1 f6       	brne	.-80     	; 0xbb0 <Endpoint_Write_Stream_LE+0x3c>
     c00:	01 c0       	rjmp	.+2      	; 0xc04 <Endpoint_Write_Stream_LE+0x90>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     c02:	c8 2f       	mov	r28, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     c04:	8c 2f       	mov	r24, r28
     c06:	cf 91       	pop	r28
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	df 90       	pop	r13
     c0e:	cf 90       	pop	r12
     c10:	bf 90       	pop	r11
     c12:	af 90       	pop	r10
     c14:	9f 90       	pop	r9
     c16:	8f 90       	pop	r8
     c18:	08 95       	ret

00000c1a <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     c1a:	20 91 c8 01 	lds	r18, 0x01C8
     c1e:	30 91 c9 01 	lds	r19, 0x01C9
     c22:	26 17       	cp	r18, r22
     c24:	37 07       	cpc	r19, r23
     c26:	48 f0       	brcs	.+18     	; 0xc3a <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     c28:	61 15       	cp	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	39 f4       	brne	.+14     	; 0xc3c <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c2e:	20 91 e8 00 	lds	r18, 0x00E8
     c32:	2e 77       	andi	r18, 0x7E	; 126
     c34:	20 93 e8 00 	sts	0x00E8, r18
     c38:	01 c0       	rjmp	.+2      	; 0xc3c <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     c3a:	b9 01       	movw	r22, r18
     c3c:	fc 01       	movw	r30, r24
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	2c c0       	rjmp	.+88     	; 0xc9a <Endpoint_Write_Control_Stream_LE+0x80>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c42:	80 91 c1 01 	lds	r24, 0x01C1

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c46:	88 23       	and	r24, r24
     c48:	f1 f1       	breq	.+124    	; 0xcc6 <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c4a:	85 30       	cpi	r24, 0x05	; 5
     c4c:	f1 f1       	breq	.+124    	; 0xcca <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c4e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     c52:	83 fd       	sbrc	r24, 3
     c54:	3c c0       	rjmp	.+120    	; 0xcce <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c56:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     c5a:	82 fd       	sbrc	r24, 2
     c5c:	2e c0       	rjmp	.+92     	; 0xcba <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c5e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     c62:	80 ff       	sbrs	r24, 0
     c64:	1a c0       	rjmp	.+52     	; 0xc9a <Endpoint_Write_Control_Stream_LE+0x80>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     c66:	80 91 f2 00 	lds	r24, 0x00F2
     c6a:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     c6e:	06 c0       	rjmp	.+12     	; 0xc7c <Endpoint_Write_Control_Stream_LE+0x62>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     c70:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c72:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     c76:	61 50       	subi	r22, 0x01	; 1
     c78:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     c7a:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     c7c:	61 15       	cp	r22, r1
     c7e:	71 05       	cpc	r23, r1
     c80:	19 f0       	breq	.+6      	; 0xc88 <Endpoint_Write_Control_Stream_LE+0x6e>
     c82:	88 30       	cpi	r24, 0x08	; 8
     c84:	91 05       	cpc	r25, r1
     c86:	a0 f3       	brcs	.-24     	; 0xc70 <Endpoint_Write_Control_Stream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     c88:	21 e0       	ldi	r18, 0x01	; 1
     c8a:	08 97       	sbiw	r24, 0x08	; 8
     c8c:	09 f0       	breq	.+2      	; 0xc90 <Endpoint_Write_Control_Stream_LE+0x76>
     c8e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c90:	80 91 e8 00 	lds	r24, 0x00E8
     c94:	8e 77       	andi	r24, 0x7E	; 126
     c96:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     c9a:	61 15       	cp	r22, r1
     c9c:	71 05       	cpc	r23, r1
     c9e:	89 f6       	brne	.-94     	; 0xc42 <Endpoint_Write_Control_Stream_LE+0x28>
     ca0:	21 11       	cpse	r18, r1
     ca2:	cf cf       	rjmp	.-98     	; 0xc42 <Endpoint_Write_Control_Stream_LE+0x28>
     ca4:	0a c0       	rjmp	.+20     	; 0xcba <Endpoint_Write_Control_Stream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ca6:	80 91 c1 01 	lds	r24, 0x01C1

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     caa:	88 23       	and	r24, r24
     cac:	61 f0       	breq	.+24     	; 0xcc6 <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     cae:	85 30       	cpi	r24, 0x05	; 5
     cb0:	61 f0       	breq	.+24     	; 0xcca <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cb2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     cb6:	83 fd       	sbrc	r24, 3
     cb8:	0a c0       	rjmp	.+20     	; 0xcce <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cba:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     cbe:	82 ff       	sbrs	r24, 2
     cc0:	f2 cf       	rjmp	.-28     	; 0xca6 <Endpoint_Write_Control_Stream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     cca:	83 e0       	ldi	r24, 0x03	; 3
     ccc:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     cce:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     cd0:	08 95       	ret

00000cd2 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     cd2:	20 91 c8 01 	lds	r18, 0x01C8
     cd6:	30 91 c9 01 	lds	r19, 0x01C9
     cda:	26 17       	cp	r18, r22
     cdc:	37 07       	cpc	r19, r23
     cde:	48 f0       	brcs	.+18     	; 0xcf2 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     ce0:	61 15       	cp	r22, r1
     ce2:	71 05       	cpc	r23, r1
     ce4:	39 f4       	brne	.+14     	; 0xcf4 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ce6:	20 91 e8 00 	lds	r18, 0x00E8
     cea:	2e 77       	andi	r18, 0x7E	; 126
     cec:	20 93 e8 00 	sts	0x00E8, r18
     cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     cf2:	b9 01       	movw	r22, r18
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	2f c0       	rjmp	.+94     	; 0xd58 <Endpoint_Write_Control_PStream_LE+0x86>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     cfa:	80 91 c1 01 	lds	r24, 0x01C1

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     cfe:	88 23       	and	r24, r24
     d00:	09 f4       	brne	.+2      	; 0xd04 <Endpoint_Write_Control_PStream_LE+0x32>
     d02:	40 c0       	rjmp	.+128    	; 0xd84 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d04:	85 30       	cpi	r24, 0x05	; 5
     d06:	09 f4       	brne	.+2      	; 0xd0a <Endpoint_Write_Control_PStream_LE+0x38>
     d08:	3f c0       	rjmp	.+126    	; 0xd88 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d0a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     d0e:	83 fd       	sbrc	r24, 3
     d10:	3d c0       	rjmp	.+122    	; 0xd8c <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d12:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     d16:	82 fd       	sbrc	r24, 2
     d18:	2f c0       	rjmp	.+94     	; 0xd78 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d1a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     d1e:	80 ff       	sbrs	r24, 0
     d20:	1b c0       	rjmp	.+54     	; 0xd58 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     d22:	80 91 f2 00 	lds	r24, 0x00F2
     d26:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     d2a:	07 c0       	rjmp	.+14     	; 0xd3a <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     d2c:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d2e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     d32:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     d34:	61 50       	subi	r22, 0x01	; 1
     d36:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     d38:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     d3a:	61 15       	cp	r22, r1
     d3c:	71 05       	cpc	r23, r1
     d3e:	19 f0       	breq	.+6      	; 0xd46 <Endpoint_Write_Control_PStream_LE+0x74>
     d40:	88 30       	cpi	r24, 0x08	; 8
     d42:	91 05       	cpc	r25, r1
     d44:	98 f3       	brcs	.-26     	; 0xd2c <Endpoint_Write_Control_PStream_LE+0x5a>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     d46:	21 e0       	ldi	r18, 0x01	; 1
     d48:	08 97       	sbiw	r24, 0x08	; 8
     d4a:	09 f0       	breq	.+2      	; 0xd4e <Endpoint_Write_Control_PStream_LE+0x7c>
     d4c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d4e:	80 91 e8 00 	lds	r24, 0x00E8
     d52:	8e 77       	andi	r24, 0x7E	; 126
     d54:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     d58:	61 15       	cp	r22, r1
     d5a:	71 05       	cpc	r23, r1
     d5c:	71 f6       	brne	.-100    	; 0xcfa <Endpoint_Write_Control_PStream_LE+0x28>
     d5e:	21 11       	cpse	r18, r1
     d60:	cc cf       	rjmp	.-104    	; 0xcfa <Endpoint_Write_Control_PStream_LE+0x28>
     d62:	0a c0       	rjmp	.+20     	; 0xd78 <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d64:	80 91 c1 01 	lds	r24, 0x01C1

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d68:	88 23       	and	r24, r24
     d6a:	61 f0       	breq	.+24     	; 0xd84 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d6c:	85 30       	cpi	r24, 0x05	; 5
     d6e:	61 f0       	breq	.+24     	; 0xd88 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d70:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     d74:	83 fd       	sbrc	r24, 3
     d76:	0a c0       	rjmp	.+20     	; 0xd8c <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d78:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     d7c:	82 ff       	sbrs	r24, 2
     d7e:	f2 cf       	rjmp	.-28     	; 0xd64 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     d88:	83 e0       	ldi	r24, 0x03	; 3
     d8a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     d8e:	08 95       	ret

00000d90 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     d90:	98 2f       	mov	r25, r24
     d92:	2c c0       	rjmp	.+88     	; 0xdec <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d94:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     d98:	98 17       	cp	r25, r24
     d9a:	39 f0       	breq	.+14     	; 0xdaa <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     d9c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     da0:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     da4:	50 91 f0 00 	lds	r21, 0x00F0
     da8:	03 c0       	rjmp	.+6      	; 0xdb0 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     daa:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     dac:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     dae:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     db0:	21 fd       	sbrc	r18, 1
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     db4:	9f 5f       	subi	r25, 0xFF	; 255
     db6:	1a c0       	rjmp	.+52     	; 0xdec <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     db8:	30 91 eb 00 	lds	r19, 0x00EB
     dbc:	3e 7f       	andi	r19, 0xFE	; 254
     dbe:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     dc2:	30 91 ed 00 	lds	r19, 0x00ED
     dc6:	3d 7f       	andi	r19, 0xFD	; 253
     dc8:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     dcc:	30 91 eb 00 	lds	r19, 0x00EB
     dd0:	31 60       	ori	r19, 0x01	; 1
     dd2:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     dd6:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     dda:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     dde:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     de2:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     de6:	27 fd       	sbrc	r18, 7
     de8:	e5 cf       	rjmp	.-54     	; 0xdb4 <Endpoint_ConfigureEndpoint_Prv+0x24>
     dea:	07 c0       	rjmp	.+14     	; 0xdfa <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     dec:	97 30       	cpi	r25, 0x07	; 7
     dee:	90 f2       	brcs	.-92     	; 0xd94 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     df0:	8f 70       	andi	r24, 0x0F	; 15
     df2:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     dfa:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     dfc:	08 95       	ret

00000dfe <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     dfe:	80 91 c2 01 	lds	r24, 0x01C2
     e02:	87 fd       	sbrc	r24, 7
     e04:	05 c0       	rjmp	.+10     	; 0xe10 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e06:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     e0a:	80 ff       	sbrs	r24, 0
     e0c:	0e c0       	rjmp	.+28     	; 0xe2a <Endpoint_ClearStatusStage+0x2c>
     e0e:	12 c0       	rjmp	.+36     	; 0xe34 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e10:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     e14:	82 fd       	sbrc	r24, 2
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     e18:	80 91 c1 01 	lds	r24, 0x01C1
     e1c:	81 11       	cpse	r24, r1
     e1e:	f8 cf       	rjmp	.-16     	; 0xe10 <Endpoint_ClearStatusStage+0x12>
     e20:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e22:	80 91 e8 00 	lds	r24, 0x00E8
     e26:	8b 77       	andi	r24, 0x7B	; 123
     e28:	08 c0       	rjmp	.+16     	; 0xe3a <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     e2a:	80 91 c1 01 	lds	r24, 0x01C1
     e2e:	81 11       	cpse	r24, r1
     e30:	ea cf       	rjmp	.-44     	; 0xe06 <Endpoint_ClearStatusStage+0x8>
     e32:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e34:	80 91 e8 00 	lds	r24, 0x00E8
     e38:	8e 77       	andi	r24, 0x7E	; 126
     e3a:	80 93 e8 00 	sts	0x00E8, r24
     e3e:	08 95       	ret

00000e40 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     e40:	80 91 e4 00 	lds	r24, 0x00E4
     e44:	90 91 e5 00 	lds	r25, 0x00E5
     e48:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e4a:	20 91 ec 00 	lds	r18, 0x00EC
     e4e:	20 fd       	sbrc	r18, 0
     e50:	1f c0       	rjmp	.+62     	; 0xe90 <Endpoint_WaitUntilReady+0x50>
     e52:	23 c0       	rjmp	.+70     	; 0xe9a <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e54:	20 91 c1 01 	lds	r18, 0x01C1

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e58:	22 23       	and	r18, r18
     e5a:	91 f0       	breq	.+36     	; 0xe80 <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e5c:	25 30       	cpi	r18, 0x05	; 5
     e5e:	91 f0       	breq	.+36     	; 0xe84 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e60:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     e64:	25 fd       	sbrc	r18, 5
     e66:	10 c0       	rjmp	.+32     	; 0xe88 <Endpoint_WaitUntilReady+0x48>
     e68:	20 91 e4 00 	lds	r18, 0x00E4
     e6c:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     e70:	28 17       	cp	r18, r24
     e72:	39 07       	cpc	r19, r25
     e74:	51 f3       	breq	.-44     	; 0xe4a <Endpoint_WaitUntilReady+0xa>
     e76:	41 50       	subi	r20, 0x01	; 1
     e78:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     e7a:	39 f7       	brne	.-50     	; 0xe4a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     e7c:	84 e0       	ldi	r24, 0x04	; 4
     e7e:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     e84:	83 e0       	ldi	r24, 0x03	; 3
     e86:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e90:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     e94:	20 ff       	sbrs	r18, 0
     e96:	de cf       	rjmp	.-68     	; 0xe54 <Endpoint_WaitUntilReady+0x14>
     e98:	f9 cf       	rjmp	.-14     	; 0xe8c <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e9a:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     e9e:	22 ff       	sbrs	r18, 2
     ea0:	d9 cf       	rjmp	.-78     	; 0xe54 <Endpoint_WaitUntilReady+0x14>
     ea2:	f4 cf       	rjmp	.-24     	; 0xe8c <Endpoint_WaitUntilReady+0x4c>

00000ea4 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     ea4:	0e 94 c8 07 	call	0xf90	; 0xf90 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ea8:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     eac:	e0 ee       	ldi	r30, 0xE0	; 224
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	81 60       	ori	r24, 0x01	; 1
     eb4:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     eb6:	e8 ed       	ldi	r30, 0xD8	; 216
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	8f 77       	andi	r24, 0x7F	; 127
     ebe:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ec0:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     ec2:	a7 ed       	ldi	r26, 0xD7	; 215
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	8c 91       	ld	r24, X
     ec8:	8e 7f       	andi	r24, 0xFE	; 254
     eca:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     ecc:	80 81       	ld	r24, Z
     ece:	8f 7e       	andi	r24, 0xEF	; 239
     ed0:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     ed2:	10 92 c0 01 	sts	0x01C0, r1
     ed6:	08 95       	ret

00000ed8 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
     ed8:	cf 92       	push	r12
     eda:	df 92       	push	r13
     edc:	ef 92       	push	r14
     ede:	ff 92       	push	r15
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     ee0:	0e 94 c8 07 	call	0xf90	; 0xf90 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     ee4:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     ee8:	88 ed       	ldi	r24, 0xD8	; 216
     eea:	e8 2e       	mov	r14, r24
     eec:	f1 2c       	mov	r15, r1
     eee:	f7 01       	movw	r30, r14
     ef0:	80 81       	ld	r24, Z
     ef2:	8f 77       	andi	r24, 0x7F	; 127
     ef4:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     ef6:	80 81       	ld	r24, Z
     ef8:	80 68       	ori	r24, 0x80	; 128
     efa:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     efc:	80 81       	ld	r24, Z
     efe:	8f 7d       	andi	r24, 0xDF	; 223
     f00:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     f02:	e7 ed       	ldi	r30, 0xD7	; 215
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 68       	ori	r24, 0x80	; 128
     f0a:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f0c:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     f0e:	10 92 c1 01 	sts	0x01C1, r1
	USB_Device_ConfigurationNumber  = 0;
     f12:	10 92 bd 01 	sts	0x01BD, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     f16:	10 92 bf 01 	sts	0x01BF, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     f1a:	10 92 be 01 	sts	0x01BE, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     f1e:	90 ee       	ldi	r25, 0xE0	; 224
     f20:	c9 2e       	mov	r12, r25
     f22:	d1 2c       	mov	r13, r1
     f24:	f6 01       	movw	r30, r12
     f26:	80 81       	ld	r24, Z
     f28:	8b 7f       	andi	r24, 0xFB	; 251
     f2a:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     f2c:	f7 01       	movw	r30, r14
     f2e:	80 81       	ld	r24, Z
     f30:	81 60       	ori	r24, 0x01	; 1
     f32:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     f34:	42 e0       	ldi	r20, 0x02	; 2
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	0e 94 c8 06 	call	0xd90	; 0xd90 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     f3e:	e1 ee       	ldi	r30, 0xE1	; 225
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	8e 7f       	andi	r24, 0xFE	; 254
     f46:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     f48:	e2 ee       	ldi	r30, 0xE2	; 226
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     f52:	80 81       	ld	r24, Z
     f54:	88 60       	ori	r24, 0x08	; 8
     f56:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     f58:	f6 01       	movw	r30, r12
     f5a:	80 81       	ld	r24, Z
     f5c:	8e 7f       	andi	r24, 0xFE	; 254
     f5e:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     f60:	f7 01       	movw	r30, r14
     f62:	80 81       	ld	r24, Z
     f64:	80 61       	ori	r24, 0x10	; 16
     f66:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     f68:	ff 90       	pop	r15
     f6a:	ef 90       	pop	r14
     f6c:	df 90       	pop	r13
     f6e:	cf 90       	pop	r12
     f70:	08 95       	ret

00000f72 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     f72:	e8 ed       	ldi	r30, 0xD8	; 216
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8f 7e       	andi	r24, 0xEF	; 239
     f7a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     f7c:	e7 ed       	ldi	r30, 0xD7	; 215
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	81 60       	ori	r24, 0x01	; 1
     f84:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	80 93 c0 01 	sts	0x01C0, r24

	USB_ResetInterface();
     f8c:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <USB_ResetInterface>

00000f90 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     f90:	e8 ed       	ldi	r30, 0xD8	; 216
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8c 7f       	andi	r24, 0xFC	; 252
     f98:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     f9a:	10 92 e2 00 	sts	0x00E2, r1
     f9e:	08 95       	ret

00000fa0 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     fa0:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     fa4:	10 92 e1 00 	sts	0x00E1, r1
     fa8:	08 95       	ret

00000faa <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     faa:	1f 92       	push	r1
     fac:	0f 92       	push	r0
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	0f 92       	push	r0
     fb2:	11 24       	eor	r1, r1
     fb4:	0b b6       	in	r0, 0x3b	; 59
     fb6:	0f 92       	push	r0
     fb8:	2f 93       	push	r18
     fba:	3f 93       	push	r19
     fbc:	4f 93       	push	r20
     fbe:	5f 93       	push	r21
     fc0:	6f 93       	push	r22
     fc2:	7f 93       	push	r23
     fc4:	8f 93       	push	r24
     fc6:	9f 93       	push	r25
     fc8:	af 93       	push	r26
     fca:	bf 93       	push	r27
     fcc:	ef 93       	push	r30
     fce:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     fd0:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     fd4:	82 ff       	sbrs	r24, 2
     fd6:	0b c0       	rjmp	.+22     	; 0xfee <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     fd8:	80 91 e2 00 	lds	r24, 0x00E2
     fdc:	82 ff       	sbrs	r24, 2
     fde:	07 c0       	rjmp	.+14     	; 0xfee <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     fe0:	80 91 e1 00 	lds	r24, 0x00E1
     fe4:	8b 7f       	andi	r24, 0xFB	; 251
     fe6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     fea:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     fee:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     ff2:	80 ff       	sbrs	r24, 0
     ff4:	1f c0       	rjmp	.+62     	; 0x1034 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     ff6:	80 91 d8 00 	lds	r24, 0x00D8
     ffa:	80 ff       	sbrs	r24, 0
     ffc:	1b c0       	rjmp	.+54     	; 0x1034 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     ffe:	80 91 da 00 	lds	r24, 0x00DA
    1002:	8e 7f       	andi	r24, 0xFE	; 254
    1004:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1008:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    100c:	80 ff       	sbrs	r24, 0
    100e:	0d c0       	rjmp	.+26     	; 0x102a <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1010:	84 e1       	ldi	r24, 0x14	; 20
    1012:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1014:	86 e1       	ldi	r24, 0x16	; 22
    1016:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1018:	09 b4       	in	r0, 0x29	; 41
    101a:	00 fe       	sbrs	r0, 0
    101c:	fd cf       	rjmp	.-6      	; 0x1018 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	80 93 c1 01 	sts	0x01C1, r24
			EVENT_USB_Device_Connect();
    1024:	0e 94 1c 04 	call	0x838	; 0x838 <EVENT_USB_Device_Connect>
    1028:	05 c0       	rjmp	.+10     	; 0x1034 <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    102a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    102c:	10 92 c1 01 	sts	0x01C1, r1
			EVENT_USB_Device_Disconnect();
    1030:	0e 94 2a 04 	call	0x854	; 0x854 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1034:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1038:	80 ff       	sbrs	r24, 0
    103a:	19 c0       	rjmp	.+50     	; 0x106e <__vector_10+0xc4>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    103c:	80 91 e2 00 	lds	r24, 0x00E2
    1040:	80 ff       	sbrs	r24, 0
    1042:	15 c0       	rjmp	.+42     	; 0x106e <__vector_10+0xc4>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1044:	80 91 e2 00 	lds	r24, 0x00E2
    1048:	8e 7f       	andi	r24, 0xFE	; 254
    104a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    104e:	80 91 e2 00 	lds	r24, 0x00E2
    1052:	80 61       	ori	r24, 0x10	; 16
    1054:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1058:	80 91 d8 00 	lds	r24, 0x00D8
    105c:	80 62       	ori	r24, 0x20	; 32
    105e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1062:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1064:	85 e0       	ldi	r24, 0x05	; 5
    1066:	80 93 c1 01 	sts	0x01C1, r24
		EVENT_USB_Device_Suspend();
    106a:	0e 94 ed 04 	call	0x9da	; 0x9da <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    106e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1072:	84 ff       	sbrs	r24, 4
    1074:	30 c0       	rjmp	.+96     	; 0x10d6 <__vector_10+0x12c>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1076:	80 91 e2 00 	lds	r24, 0x00E2
    107a:	84 ff       	sbrs	r24, 4
    107c:	2c c0       	rjmp	.+88     	; 0x10d6 <__vector_10+0x12c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    107e:	84 e1       	ldi	r24, 0x14	; 20
    1080:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1082:	86 e1       	ldi	r24, 0x16	; 22
    1084:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1086:	09 b4       	in	r0, 0x29	; 41
    1088:	00 fe       	sbrs	r0, 0
    108a:	fd cf       	rjmp	.-6      	; 0x1086 <__vector_10+0xdc>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    108c:	80 91 d8 00 	lds	r24, 0x00D8
    1090:	8f 7d       	andi	r24, 0xDF	; 223
    1092:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1096:	80 91 e1 00 	lds	r24, 0x00E1
    109a:	8f 7e       	andi	r24, 0xEF	; 239
    109c:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    10a0:	80 91 e2 00 	lds	r24, 0x00E2
    10a4:	8f 7e       	andi	r24, 0xEF	; 239
    10a6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    10aa:	80 91 e2 00 	lds	r24, 0x00E2
    10ae:	81 60       	ori	r24, 0x01	; 1
    10b0:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    10b4:	80 91 bd 01 	lds	r24, 0x01BD
    10b8:	88 23       	and	r24, r24
    10ba:	11 f0       	breq	.+4      	; 0x10c0 <__vector_10+0x116>
		  USB_DeviceState = DEVICE_STATE_Configured;
    10bc:	84 e0       	ldi	r24, 0x04	; 4
    10be:	07 c0       	rjmp	.+14     	; 0x10ce <__vector_10+0x124>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    10c0:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    10c4:	87 ff       	sbrs	r24, 7
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <__vector_10+0x122>
    10c8:	83 e0       	ldi	r24, 0x03	; 3
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <__vector_10+0x124>
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	80 93 c1 01 	sts	0x01C1, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    10d2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    10d6:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    10da:	83 ff       	sbrs	r24, 3
    10dc:	29 c0       	rjmp	.+82     	; 0x1130 <__vector_10+0x186>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    10de:	80 91 e2 00 	lds	r24, 0x00E2
    10e2:	83 ff       	sbrs	r24, 3
    10e4:	25 c0       	rjmp	.+74     	; 0x1130 <__vector_10+0x186>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    10e6:	80 91 e1 00 	lds	r24, 0x00E1
    10ea:	87 7f       	andi	r24, 0xF7	; 247
    10ec:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    10f0:	82 e0       	ldi	r24, 0x02	; 2
    10f2:	80 93 c1 01 	sts	0x01C1, r24
		USB_Device_ConfigurationNumber = 0;
    10f6:	10 92 bd 01 	sts	0x01BD, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    10fa:	80 91 e1 00 	lds	r24, 0x00E1
    10fe:	8e 7f       	andi	r24, 0xFE	; 254
    1100:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1104:	80 91 e2 00 	lds	r24, 0x00E2
    1108:	8e 7f       	andi	r24, 0xFE	; 254
    110a:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    110e:	80 91 e2 00 	lds	r24, 0x00E2
    1112:	80 61       	ori	r24, 0x10	; 16
    1114:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1118:	42 e0       	ldi	r20, 0x02	; 2
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	0e 94 c8 06 	call	0xd90	; 0xd90 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1122:	80 91 f0 00 	lds	r24, 0x00F0
    1126:	88 60       	ori	r24, 0x08	; 8
    1128:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    112c:	0e 94 2d 04 	call	0x85a	; 0x85a <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1130:	ff 91       	pop	r31
    1132:	ef 91       	pop	r30
    1134:	bf 91       	pop	r27
    1136:	af 91       	pop	r26
    1138:	9f 91       	pop	r25
    113a:	8f 91       	pop	r24
    113c:	7f 91       	pop	r23
    113e:	6f 91       	pop	r22
    1140:	5f 91       	pop	r21
    1142:	4f 91       	pop	r20
    1144:	3f 91       	pop	r19
    1146:	2f 91       	pop	r18
    1148:	0f 90       	pop	r0
    114a:	0b be       	out	0x3b, r0	; 59
    114c:	0f 90       	pop	r0
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	0f 90       	pop	r0
    1152:	1f 90       	pop	r1
    1154:	18 95       	reti

00001156 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1156:	1f 92       	push	r1
    1158:	0f 92       	push	r0
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	0f 92       	push	r0
    115e:	11 24       	eor	r1, r1
    1160:	0b b6       	in	r0, 0x3b	; 59
    1162:	0f 92       	push	r0
    1164:	2f 93       	push	r18
    1166:	3f 93       	push	r19
    1168:	4f 93       	push	r20
    116a:	5f 93       	push	r21
    116c:	6f 93       	push	r22
    116e:	7f 93       	push	r23
    1170:	8f 93       	push	r24
    1172:	9f 93       	push	r25
    1174:	af 93       	push	r26
    1176:	bf 93       	push	r27
    1178:	cf 93       	push	r28
    117a:	ef 93       	push	r30
    117c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    117e:	80 91 e9 00 	lds	r24, 0x00E9
    1182:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1184:	90 91 ec 00 	lds	r25, 0x00EC
    1188:	90 ff       	sbrs	r25, 0
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <__vector_11+0x3a>
    118c:	90 e8       	ldi	r25, 0x80	; 128
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <__vector_11+0x3c>
    1190:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1192:	c9 2f       	mov	r28, r25
    1194:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1196:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    119a:	80 91 f0 00 	lds	r24, 0x00F0
    119e:	87 7f       	andi	r24, 0xF7	; 247
    11a0:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    11a4:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    11a6:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <USB_Device_ProcessControlRequest>
    11aa:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    11ae:	80 91 f0 00 	lds	r24, 0x00F0
    11b2:	88 60       	ori	r24, 0x08	; 8
    11b4:	80 93 f0 00 	sts	0x00F0, r24
    11b8:	cf 70       	andi	r28, 0x0F	; 15
    11ba:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    11be:	ff 91       	pop	r31
    11c0:	ef 91       	pop	r30
    11c2:	cf 91       	pop	r28
    11c4:	bf 91       	pop	r27
    11c6:	af 91       	pop	r26
    11c8:	9f 91       	pop	r25
    11ca:	8f 91       	pop	r24
    11cc:	7f 91       	pop	r23
    11ce:	6f 91       	pop	r22
    11d0:	5f 91       	pop	r21
    11d2:	4f 91       	pop	r20
    11d4:	3f 91       	pop	r19
    11d6:	2f 91       	pop	r18
    11d8:	0f 90       	pop	r0
    11da:	0b be       	out	0x3b, r0	; 59
    11dc:	0f 90       	pop	r0
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	0f 90       	pop	r0
    11e2:	1f 90       	pop	r1
    11e4:	18 95       	reti

000011e6 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    11e6:	1f 93       	push	r17
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	ac 97       	sbiw	r28, 0x2c	; 44
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    11fc:	e2 ec       	ldi	r30, 0xC2	; 194
    11fe:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1200:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1204:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1206:	21 e0       	ldi	r18, 0x01	; 1
    1208:	ea 3c       	cpi	r30, 0xCA	; 202
    120a:	f2 07       	cpc	r31, r18
    120c:	c9 f7       	brne	.-14     	; 0x1200 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    120e:	0e 94 38 04 	call	0x870	; 0x870 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1212:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1216:	83 ff       	sbrs	r24, 3
    1218:	37 c1       	rjmp	.+622    	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    121a:	80 91 c2 01 	lds	r24, 0x01C2

		switch (USB_ControlRequest.bRequest)
    121e:	90 91 c3 01 	lds	r25, 0x01C3
    1222:	95 30       	cpi	r25, 0x05	; 5
    1224:	09 f4       	brne	.+2      	; 0x1228 <USB_Device_ProcessControlRequest+0x42>
    1226:	88 c0       	rjmp	.+272    	; 0x1338 <USB_Device_ProcessControlRequest+0x152>
    1228:	38 f4       	brcc	.+14     	; 0x1238 <USB_Device_ProcessControlRequest+0x52>
    122a:	91 30       	cpi	r25, 0x01	; 1
    122c:	b1 f1       	breq	.+108    	; 0x129a <USB_Device_ProcessControlRequest+0xb4>
    122e:	70 f0       	brcs	.+28     	; 0x124c <USB_Device_ProcessControlRequest+0x66>
    1230:	93 30       	cpi	r25, 0x03	; 3
    1232:	09 f0       	breq	.+2      	; 0x1236 <USB_Device_ProcessControlRequest+0x50>
    1234:	29 c1       	rjmp	.+594    	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
    1236:	31 c0       	rjmp	.+98     	; 0x129a <USB_Device_ProcessControlRequest+0xb4>
    1238:	98 30       	cpi	r25, 0x08	; 8
    123a:	09 f4       	brne	.+2      	; 0x123e <USB_Device_ProcessControlRequest+0x58>
    123c:	f8 c0       	rjmp	.+496    	; 0x142e <USB_Device_ProcessControlRequest+0x248>
    123e:	99 30       	cpi	r25, 0x09	; 9
    1240:	09 f4       	brne	.+2      	; 0x1244 <USB_Device_ProcessControlRequest+0x5e>
    1242:	04 c1       	rjmp	.+520    	; 0x144c <USB_Device_ProcessControlRequest+0x266>
    1244:	96 30       	cpi	r25, 0x06	; 6
    1246:	09 f0       	breq	.+2      	; 0x124a <USB_Device_ProcessControlRequest+0x64>
    1248:	1f c1       	rjmp	.+574    	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
    124a:	9d c0       	rjmp	.+314    	; 0x1386 <USB_Device_ProcessControlRequest+0x1a0>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    124c:	80 38       	cpi	r24, 0x80	; 128
    124e:	21 f0       	breq	.+8      	; 0x1258 <USB_Device_ProcessControlRequest+0x72>
    1250:	82 38       	cpi	r24, 0x82	; 130
    1252:	09 f0       	breq	.+2      	; 0x1256 <USB_Device_ProcessControlRequest+0x70>
    1254:	19 c1       	rjmp	.+562    	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
    1256:	08 c0       	rjmp	.+16     	; 0x1268 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1258:	80 91 be 01 	lds	r24, 0x01BE
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    125c:	90 91 bf 01 	lds	r25, 0x01BF
    1260:	99 23       	and	r25, r25
    1262:	89 f0       	breq	.+34     	; 0x1286 <USB_Device_ProcessControlRequest+0xa0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1264:	82 60       	ori	r24, 0x02	; 2
    1266:	0f c0       	rjmp	.+30     	; 0x1286 <USB_Device_ProcessControlRequest+0xa0>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1268:	80 91 c6 01 	lds	r24, 0x01C6
    126c:	90 91 c7 01 	lds	r25, 0x01C7
    1270:	8f 70       	andi	r24, 0x0F	; 15
    1272:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1274:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1278:	80 91 eb 00 	lds	r24, 0x00EB
    127c:	85 fb       	bst	r24, 5
    127e:	88 27       	eor	r24, r24
    1280:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1282:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1286:	90 91 e8 00 	lds	r25, 0x00E8
    128a:	97 7f       	andi	r25, 0xF7	; 247
    128c:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1290:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1294:	10 92 f1 00 	sts	0x00F1, r1
    1298:	d5 c0       	rjmp	.+426    	; 0x1444 <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    129a:	88 23       	and	r24, r24
    129c:	19 f0       	breq	.+6      	; 0x12a4 <USB_Device_ProcessControlRequest+0xbe>
    129e:	82 30       	cpi	r24, 0x02	; 2
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <USB_Device_ProcessControlRequest+0xbe>
    12a2:	f2 c0       	rjmp	.+484    	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    12a4:	8f 71       	andi	r24, 0x1F	; 31
    12a6:	21 f0       	breq	.+8      	; 0x12b0 <USB_Device_ProcessControlRequest+0xca>
    12a8:	82 30       	cpi	r24, 0x02	; 2
    12aa:	09 f0       	breq	.+2      	; 0x12ae <USB_Device_ProcessControlRequest+0xc8>
    12ac:	ed c0       	rjmp	.+474    	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
    12ae:	0b c0       	rjmp	.+22     	; 0x12c6 <USB_Device_ProcessControlRequest+0xe0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    12b0:	80 91 c4 01 	lds	r24, 0x01C4
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	09 f0       	breq	.+2      	; 0x12ba <USB_Device_ProcessControlRequest+0xd4>
    12b8:	e7 c0       	rjmp	.+462    	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    12ba:	93 30       	cpi	r25, 0x03	; 3
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <USB_Device_ProcessControlRequest+0xda>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	80 93 bf 01 	sts	0x01BF, r24
    12c4:	2f c0       	rjmp	.+94     	; 0x1324 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    12c6:	80 91 c4 01 	lds	r24, 0x01C4
    12ca:	81 11       	cpse	r24, r1
    12cc:	2b c0       	rjmp	.+86     	; 0x1324 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    12ce:	80 91 c6 01 	lds	r24, 0x01C6
    12d2:	90 91 c7 01 	lds	r25, 0x01C7
    12d6:	8f 70       	andi	r24, 0x0F	; 15
    12d8:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <USB_Device_ProcessControlRequest+0xfa>
    12de:	d4 c0       	rjmp	.+424    	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12e0:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    12e4:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    12e8:	20 ff       	sbrs	r18, 0
    12ea:	1c c0       	rjmp	.+56     	; 0x1324 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    12ec:	20 91 c3 01 	lds	r18, 0x01C3
    12f0:	23 30       	cpi	r18, 0x03	; 3
    12f2:	21 f4       	brne	.+8      	; 0x12fc <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    12f4:	80 91 eb 00 	lds	r24, 0x00EB
    12f8:	80 62       	ori	r24, 0x20	; 32
    12fa:	12 c0       	rjmp	.+36     	; 0x1320 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    12fc:	90 91 eb 00 	lds	r25, 0x00EB
    1300:	90 61       	ori	r25, 0x10	; 16
    1302:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1306:	21 e0       	ldi	r18, 0x01	; 1
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	01 c0       	rjmp	.+2      	; 0x130e <USB_Device_ProcessControlRequest+0x128>
    130c:	22 0f       	add	r18, r18
    130e:	8a 95       	dec	r24
    1310:	ea f7       	brpl	.-6      	; 0x130c <USB_Device_ProcessControlRequest+0x126>
    1312:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1316:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    131a:	80 91 eb 00 	lds	r24, 0x00EB
    131e:	88 60       	ori	r24, 0x08	; 8
    1320:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1324:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1328:	80 91 e8 00 	lds	r24, 0x00E8
    132c:	87 7f       	andi	r24, 0xF7	; 247
    132e:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1332:	0e 94 ff 06 	call	0xdfe	; 0xdfe <Endpoint_ClearStatusStage>
    1336:	a8 c0       	rjmp	.+336    	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1338:	81 11       	cpse	r24, r1
    133a:	a6 c0       	rjmp	.+332    	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    133c:	80 91 c4 01 	lds	r24, 0x01C4
    1340:	90 91 c5 01 	lds	r25, 0x01C5
    1344:	8f 77       	andi	r24, 0x7F	; 127
    1346:	99 27       	eor	r25, r25
    1348:	18 2f       	mov	r17, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    134a:	90 91 e3 00 	lds	r25, 0x00E3
    134e:	90 78       	andi	r25, 0x80	; 128
    1350:	98 2b       	or	r25, r24
    1352:	90 93 e3 00 	sts	0x00E3, r25
    1356:	80 91 e8 00 	lds	r24, 0x00E8
    135a:	87 7f       	andi	r24, 0xF7	; 247
    135c:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1360:	0e 94 ff 06 	call	0xdfe	; 0xdfe <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1364:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1368:	80 ff       	sbrs	r24, 0
    136a:	fc cf       	rjmp	.-8      	; 0x1364 <USB_Device_ProcessControlRequest+0x17e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    136c:	80 91 e3 00 	lds	r24, 0x00E3
    1370:	80 68       	ori	r24, 0x80	; 128
    1372:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1376:	11 23       	and	r17, r17
    1378:	11 f0       	breq	.+4      	; 0x137e <USB_Device_ProcessControlRequest+0x198>
    137a:	83 e0       	ldi	r24, 0x03	; 3
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <USB_Device_ProcessControlRequest+0x19a>
    137e:	82 e0       	ldi	r24, 0x02	; 2
    1380:	80 93 c1 01 	sts	0x01C1, r24
    1384:	81 c0       	rjmp	.+258    	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1386:	80 58       	subi	r24, 0x80	; 128
    1388:	82 30       	cpi	r24, 0x02	; 2
    138a:	08 f0       	brcs	.+2      	; 0x138e <USB_Device_ProcessControlRequest+0x1a8>
    138c:	7d c0       	rjmp	.+250    	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    138e:	80 91 c4 01 	lds	r24, 0x01C4
    1392:	90 91 c5 01 	lds	r25, 0x01C5
    1396:	8c 3d       	cpi	r24, 0xDC	; 220
    1398:	23 e0       	ldi	r18, 0x03	; 3
    139a:	92 07       	cpc	r25, r18
    139c:	79 f5       	brne	.+94     	; 0x13fc <USB_Device_ProcessControlRequest+0x216>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    13a2:	8a e2       	ldi	r24, 0x2A	; 42
    13a4:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    13a6:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    13a8:	f8 94       	cli

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    13aa:	de 01       	movw	r26, r28
    13ac:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    13ae:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    13b0:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    13b2:	51 e2       	ldi	r21, 0x21	; 33
    13b4:	e3 2f       	mov	r30, r19
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	50 93 57 00 	sts	0x0057, r21
    13bc:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    13be:	20 ff       	sbrs	r18, 0
    13c0:	03 c0       	rjmp	.+6      	; 0x13c8 <USB_Device_ProcessControlRequest+0x1e2>
					{
						SerialByte >>= 4;
    13c2:	e2 95       	swap	r30
    13c4:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    13c6:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    13c8:	ef 70       	andi	r30, 0x0F	; 15
    13ca:	8e 2f       	mov	r24, r30
    13cc:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    13ce:	ea 30       	cpi	r30, 0x0A	; 10
    13d0:	10 f0       	brcs	.+4      	; 0x13d6 <USB_Device_ProcessControlRequest+0x1f0>
    13d2:	c7 96       	adiw	r24, 0x37	; 55
    13d4:	01 c0       	rjmp	.+2      	; 0x13d8 <USB_Device_ProcessControlRequest+0x1f2>
    13d6:	c0 96       	adiw	r24, 0x30	; 48
    13d8:	8d 93       	st	X+, r24
    13da:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    13dc:	2f 5f       	subi	r18, 0xFF	; 255
    13de:	24 31       	cpi	r18, 0x14	; 20
    13e0:	49 f7       	brne	.-46     	; 0x13b4 <USB_Device_ProcessControlRequest+0x1ce>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    13e2:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13e4:	80 91 e8 00 	lds	r24, 0x00E8
    13e8:	87 7f       	andi	r24, 0xF7	; 247
    13ea:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    13ee:	6a e2       	ldi	r22, 0x2A	; 42
    13f0:	70 e0       	ldi	r23, 0x00	; 0
    13f2:	ce 01       	movw	r24, r28
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Endpoint_Write_Control_Stream_LE>
    13fa:	13 c0       	rjmp	.+38     	; 0x1422 <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    13fc:	ae 01       	movw	r20, r28
    13fe:	45 5d       	subi	r20, 0xD5	; 213
    1400:	5f 4f       	sbci	r21, 0xFF	; 255
    1402:	60 91 c6 01 	lds	r22, 0x01C6
    1406:	0e 94 3f 05 	call	0xa7e	; 0xa7e <CALLBACK_USB_GetDescriptor>
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	e9 f1       	breq	.+122    	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
    140e:	20 91 e8 00 	lds	r18, 0x00E8
    1412:	27 7f       	andi	r18, 0xF7	; 247
    1414:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1418:	bc 01       	movw	r22, r24
    141a:	8b a5       	ldd	r24, Y+43	; 0x2b
    141c:	9c a5       	ldd	r25, Y+44	; 0x2c
    141e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1422:	80 91 e8 00 	lds	r24, 0x00E8
    1426:	8b 77       	andi	r24, 0x7B	; 123
    1428:	80 93 e8 00 	sts	0x00E8, r24
    142c:	2d c0       	rjmp	.+90     	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    142e:	80 38       	cpi	r24, 0x80	; 128
    1430:	59 f5       	brne	.+86     	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1432:	80 91 e8 00 	lds	r24, 0x00E8
    1436:	87 7f       	andi	r24, 0xF7	; 247
    1438:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    143c:	80 91 bd 01 	lds	r24, 0x01BD
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1440:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1444:	80 91 e8 00 	lds	r24, 0x00E8
    1448:	8e 77       	andi	r24, 0x7E	; 126
    144a:	71 cf       	rjmp	.-286    	; 0x132e <USB_Device_ProcessControlRequest+0x148>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    144c:	81 11       	cpse	r24, r1
    144e:	1c c0       	rjmp	.+56     	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1450:	90 91 c4 01 	lds	r25, 0x01C4
    1454:	92 30       	cpi	r25, 0x02	; 2
    1456:	c0 f4       	brcc	.+48     	; 0x1488 <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1458:	80 91 e8 00 	lds	r24, 0x00E8
    145c:	87 7f       	andi	r24, 0xF7	; 247
    145e:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1462:	90 93 bd 01 	sts	0x01BD, r25

	Endpoint_ClearStatusStage();
    1466:	0e 94 ff 06 	call	0xdfe	; 0xdfe <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    146a:	80 91 bd 01 	lds	r24, 0x01BD
    146e:	81 11       	cpse	r24, r1
    1470:	04 c0       	rjmp	.+8      	; 0x147a <USB_Device_ProcessControlRequest+0x294>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1472:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1476:	87 ff       	sbrs	r24, 7
    1478:	02 c0       	rjmp	.+4      	; 0x147e <USB_Device_ProcessControlRequest+0x298>
    147a:	84 e0       	ldi	r24, 0x04	; 4
    147c:	01 c0       	rjmp	.+2      	; 0x1480 <USB_Device_ProcessControlRequest+0x29a>
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	80 93 c1 01 	sts	0x01C1, r24

	EVENT_USB_Device_ConfigurationChanged();
    1484:	0e 94 2e 04 	call	0x85c	; 0x85c <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1488:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    148c:	83 ff       	sbrs	r24, 3
    148e:	0a c0       	rjmp	.+20     	; 0x14a4 <USB_Device_ProcessControlRequest+0x2be>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1490:	80 91 e8 00 	lds	r24, 0x00E8
    1494:	87 7f       	andi	r24, 0xF7	; 247
    1496:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    149a:	80 91 eb 00 	lds	r24, 0x00EB
    149e:	80 62       	ori	r24, 0x20	; 32
    14a0:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    14a4:	ac 96       	adiw	r28, 0x2c	; 44
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	08 95       	ret

000014b8 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    14b8:	08 95       	ret

000014ba <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    14ba:	90 93 44 01 	sts	0x0144, r25
    14be:	80 93 43 01 	sts	0x0143, r24
    14c2:	08 95       	ret

000014c4 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    14c4:	e0 91 43 01 	lds	r30, 0x0143
    14c8:	f0 91 44 01 	lds	r31, 0x0144
    14cc:	30 97       	sbiw	r30, 0x00	; 0
    14ce:	21 f0       	breq	.+8      	; 0x14d8 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    14d0:	01 90       	ld	r0, Z+
    14d2:	f0 81       	ld	r31, Z
    14d4:	e0 2d       	mov	r30, r0
    14d6:	09 94       	ijmp
}
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	08 95       	ret

000014dc <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    if (!driver) return;
    14dc:	e0 91 43 01 	lds	r30, 0x0143
    14e0:	f0 91 44 01 	lds	r31, 0x0144
    14e4:	30 97       	sbiw	r30, 0x00	; 0
    14e6:	21 f0       	breq	.+8      	; 0x14f0 <host_keyboard_send+0x14>
    (*driver->send_keyboard)(report);
    14e8:	02 80       	ldd	r0, Z+2	; 0x02
    14ea:	f3 81       	ldd	r31, Z+3	; 0x03
    14ec:	e0 2d       	mov	r30, r0
    14ee:	09 94       	ijmp
    14f0:	08 95       	ret

000014f2 <host_system_send>:
    (*driver->send_mouse)(report);
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    14f2:	20 91 45 01 	lds	r18, 0x0145
    14f6:	30 91 46 01 	lds	r19, 0x0146
    14fa:	82 17       	cp	r24, r18
    14fc:	93 07       	cpc	r25, r19
    14fe:	71 f0       	breq	.+28     	; 0x151c <host_system_send+0x2a>
    last_system_report = report;
    1500:	90 93 46 01 	sts	0x0146, r25
    1504:	80 93 45 01 	sts	0x0145, r24

    if (!driver) return;
    1508:	e0 91 43 01 	lds	r30, 0x0143
    150c:	f0 91 44 01 	lds	r31, 0x0144
    1510:	30 97       	sbiw	r30, 0x00	; 0
    1512:	21 f0       	breq	.+8      	; 0x151c <host_system_send+0x2a>
    (*driver->send_system)(report);
    1514:	06 80       	ldd	r0, Z+6	; 0x06
    1516:	f7 81       	ldd	r31, Z+7	; 0x07
    1518:	e0 2d       	mov	r30, r0
    151a:	09 94       	ijmp
    151c:	08 95       	ret

0000151e <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    151e:	20 91 47 01 	lds	r18, 0x0147
    1522:	30 91 48 01 	lds	r19, 0x0148
    1526:	82 17       	cp	r24, r18
    1528:	93 07       	cpc	r25, r19
    152a:	71 f0       	breq	.+28     	; 0x1548 <host_consumer_send+0x2a>
    last_consumer_report = report;
    152c:	90 93 48 01 	sts	0x0148, r25
    1530:	80 93 47 01 	sts	0x0147, r24

    if (!driver) return;
    1534:	e0 91 43 01 	lds	r30, 0x0143
    1538:	f0 91 44 01 	lds	r31, 0x0144
    153c:	30 97       	sbiw	r30, 0x00	; 0
    153e:	21 f0       	breq	.+8      	; 0x1548 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    1540:	00 84       	ldd	r0, Z+8	; 0x08
    1542:	f1 85       	ldd	r31, Z+9	; 0x09
    1544:	e0 2d       	mov	r30, r0
    1546:	09 94       	ijmp
    1548:	08 95       	ret

0000154a <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    154a:	08 95       	ret

0000154c <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    154c:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <matrix_setup>

00001550 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    1550:	0e 94 31 16 	call	0x2c62	; 0x2c62 <timer_init>
    matrix_init();
    1554:	0c 94 2b 02 	jmp	0x456	; 0x456 <matrix_init>

00001558 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    1558:	2f 92       	push	r2
    155a:	3f 92       	push	r3
    155c:	4f 92       	push	r4
    155e:	5f 92       	push	r5
    1560:	6f 92       	push	r6
    1562:	7f 92       	push	r7
    1564:	8f 92       	push	r8
    1566:	9f 92       	push	r9
    1568:	af 92       	push	r10
    156a:	bf 92       	push	r11
    156c:	cf 92       	push	r12
    156e:	df 92       	push	r13
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	00 d0       	rcall	.+0      	; 0x157e <keyboard_task+0x26>
    157e:	00 d0       	rcall	.+0      	; 0x1580 <keyboard_task+0x28>
    1580:	1f 92       	push	r1
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1586:	0e 94 54 02 	call	0x4a8	; 0x4a8 <matrix_scan>
    158a:	99 e4       	ldi	r25, 0x49	; 73
    158c:	49 2e       	mov	r4, r25
    158e:	91 e0       	ldi	r25, 0x01	; 1
    1590:	59 2e       	mov	r5, r25
    1592:	29 e5       	ldi	r18, 0x59	; 89
    1594:	a2 2e       	mov	r10, r18
    1596:	21 e0       	ldi	r18, 0x01	; 1
    1598:	b2 2e       	mov	r11, r18
    159a:	e1 2c       	mov	r14, r1
    159c:	f1 2c       	mov	r15, r1
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    159e:	22 24       	eor	r2, r2
    15a0:	23 94       	inc	r2
    15a2:	31 2c       	mov	r3, r1
    15a4:	0e 2d       	mov	r16, r14
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    15a6:	8e 2d       	mov	r24, r14
    15a8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <matrix_get_row>
    15ac:	6c 01       	movw	r12, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    15ae:	f2 01       	movw	r30, r4
    15b0:	81 90       	ld	r8, Z+
    15b2:	91 90       	ld	r9, Z+
    15b4:	2f 01       	movw	r4, r30
    15b6:	88 26       	eor	r8, r24
    15b8:	99 26       	eor	r9, r25
        if (matrix_change) {
    15ba:	81 14       	cp	r8, r1
    15bc:	91 04       	cpc	r9, r1
    15be:	09 f4       	brne	.+2      	; 0x15c2 <keyboard_task+0x6a>
    15c0:	61 c0       	rjmp	.+194    	; 0x1684 <keyboard_task+0x12c>


#ifdef MATRIX_HAS_GHOST
static bool has_ghost_in_row(uint8_t row)
{
    matrix_row_t matrix_row = matrix_get_row(row);
    15c2:	8e 2d       	mov	r24, r14
    15c4:	0e 94 60 03 	call	0x6c0	; 0x6c0 <matrix_get_row>
    15c8:	3c 01       	movw	r6, r24
    // No ghost exists when less than 2 keys are down on the row
    if (((matrix_row - 1) & matrix_row) == 0)
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	86 21       	and	r24, r6
    15ce:	97 21       	and	r25, r7
    15d0:	89 2b       	or	r24, r25
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <keyboard_task+0x7e>
    15d4:	97 c0       	rjmp	.+302    	; 0x1704 <keyboard_task+0x1ac>
    15d6:	10 e0       	ldi	r17, 0x00	; 0
        return false;

    // Ghost occurs when the row shares column line with other row
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        if (i != row && (matrix_get_row(i) & matrix_row))
    15d8:	10 13       	cpse	r17, r16
    15da:	04 c0       	rjmp	.+8      	; 0x15e4 <keyboard_task+0x8c>
    // No ghost exists when less than 2 keys are down on the row
    if (((matrix_row - 1) & matrix_row) == 0)
        return false;

    // Ghost occurs when the row shares column line with other row
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    15dc:	1f 5f       	subi	r17, 0xFF	; 255
    15de:	18 30       	cpi	r17, 0x08	; 8
    15e0:	d9 f7       	brne	.-10     	; 0x15d8 <keyboard_task+0x80>
    15e2:	90 c0       	rjmp	.+288    	; 0x1704 <keyboard_task+0x1ac>
        if (i != row && (matrix_get_row(i) & matrix_row))
    15e4:	81 2f       	mov	r24, r17
    15e6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <matrix_get_row>
    15ea:	86 21       	and	r24, r6
    15ec:	97 21       	and	r25, r7
    15ee:	89 2b       	or	r24, r25
    15f0:	a9 f3       	breq	.-22     	; 0x15dc <keyboard_task+0x84>
    15f2:	90 c0       	rjmp	.+288    	; 0x1714 <keyboard_task+0x1bc>
            if (has_ghost_in_row(r)) {
                /* Keep track of whether ghosted status has changed for
                 * debugging. But don't update matrix_prev until un-ghosted, or
                 * the last key would be lost.
                 */
                if (debug_matrix && matrix_ghost[r] != matrix_row) {
    15f4:	f5 01       	movw	r30, r10
    15f6:	80 81       	ld	r24, Z
    15f8:	91 81       	ldd	r25, Z+1	; 0x01
    15fa:	8c 15       	cp	r24, r12
    15fc:	9d 05       	cpc	r25, r13
    15fe:	11 f0       	breq	.+4      	; 0x1604 <keyboard_task+0xac>
                    matrix_print();
    1600:	0e 94 69 03 	call	0x6d2	; 0x6d2 <matrix_print>
                }
                matrix_ghost[r] = matrix_row;
    1604:	f5 01       	movw	r30, r10
    1606:	d1 82       	std	Z+1, r13	; 0x01
    1608:	c0 82       	st	Z, r12
                continue;
    160a:	3c c0       	rjmp	.+120    	; 0x1684 <keyboard_task+0x12c>
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    160c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <matrix_print>
#ifdef MATRIX_HAS_GHOST
static bool has_ghost_in_row(uint8_t row)
{
    matrix_row_t matrix_row = matrix_get_row(row);
    // No ghost exists when less than 2 keys are down on the row
    if (((matrix_row - 1) & matrix_row) == 0)
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1614:	31 01       	movw	r6, r2
    1616:	08 2e       	mov	r0, r24
    1618:	02 c0       	rjmp	.+4      	; 0x161e <keyboard_task+0xc6>
    161a:	66 0c       	add	r6, r6
    161c:	77 1c       	adc	r7, r7
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <keyboard_task+0xc2>
    1622:	93 01       	movw	r18, r6
    1624:	28 21       	and	r18, r8
    1626:	39 21       	and	r19, r9
    1628:	23 2b       	or	r18, r19
    162a:	41 f1       	breq	.+80     	; 0x167c <keyboard_task+0x124>
                    keyevent_t e = (keyevent_t){
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	0a 83       	std	Y+2, r16	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    1630:	c6 20       	and	r12, r6
    1632:	d7 20       	and	r13, r7
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	cd 28       	or	r12, r13
    1638:	09 f4       	brne	.+2      	; 0x163c <keyboard_task+0xe4>
    163a:	80 e0       	ldi	r24, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    163c:	8b 83       	std	Y+3, r24	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    163e:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <timer_read>
    1642:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    1644:	78 2f       	mov	r23, r24
    1646:	9d 83       	std	Y+5, r25	; 0x05
    1648:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    164a:	49 81       	ldd	r20, Y+1	; 0x01
    164c:	5a 81       	ldd	r21, Y+2	; 0x02
    164e:	6b 81       	ldd	r22, Y+3	; 0x03
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	0e 94 a9 0b 	call	0x1752	; 0x1752 <action_exec>
                    hook_matrix_change(e);
    1656:	49 81       	ldd	r20, Y+1	; 0x01
    1658:	5a 81       	ldd	r21, Y+2	; 0x02
    165a:	6b 81       	ldd	r22, Y+3	; 0x03
    165c:	7c 81       	ldd	r23, Y+4	; 0x04
    165e:	8d 81       	ldd	r24, Y+5	; 0x05
    1660:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    1664:	f7 01       	movw	r30, r14
    1666:	ee 0f       	add	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	e7 5b       	subi	r30, 0xB7	; 183
    166c:	fe 4f       	sbci	r31, 0xFE	; 254
    166e:	80 81       	ld	r24, Z
    1670:	91 81       	ldd	r25, Z+1	; 0x01
    1672:	86 25       	eor	r24, r6
    1674:	97 25       	eor	r25, r7
    1676:	91 83       	std	Z+1, r25	; 0x01
    1678:	80 83       	st	Z, r24
    167a:	1f c0       	rjmp	.+62     	; 0x16ba <keyboard_task+0x162>
    167c:	01 96       	adiw	r24, 0x01	; 1
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    167e:	80 31       	cpi	r24, 0x10	; 16
    1680:	91 05       	cpc	r25, r1
    1682:	41 f6       	brne	.-112    	; 0x1614 <keyboard_task+0xbc>
    1684:	ff ef       	ldi	r31, 0xFF	; 255
    1686:	ef 1a       	sub	r14, r31
    1688:	ff 0a       	sbc	r15, r31
    168a:	82 e0       	ldi	r24, 0x02	; 2
    168c:	a8 0e       	add	r10, r24
    168e:	b1 1c       	adc	r11, r1
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    1690:	e8 e0       	ldi	r30, 0x08	; 8
    1692:	ee 16       	cp	r14, r30
    1694:	f1 04       	cpc	r15, r1
    1696:	09 f0       	breq	.+2      	; 0x169a <keyboard_task+0x142>
    1698:	85 cf       	rjmp	.-246    	; 0x15a4 <keyboard_task+0x4c>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    169a:	8f ef       	ldi	r24, 0xFF	; 255
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	8a 83       	std	Y+2, r24	; 0x02
    16a0:	1b 82       	std	Y+3, r1	; 0x03
    16a2:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <timer_read>
    16a6:	81 60       	ori	r24, 0x01	; 1
    16a8:	78 2f       	mov	r23, r24
    16aa:	9d 83       	std	Y+5, r25	; 0x05
    16ac:	8c 83       	std	Y+4, r24	; 0x04
    16ae:	49 81       	ldd	r20, Y+1	; 0x01
    16b0:	5a 81       	ldd	r21, Y+2	; 0x02
    16b2:	6b 81       	ldd	r22, Y+3	; 0x03
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	0e 94 a9 0b 	call	0x1752	; 0x1752 <action_exec>

MATRIX_LOOP_END:

    hook_keyboard_loop();
    16ba:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <hook_keyboard_loop>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    16be:	10 91 69 01 	lds	r17, 0x0169
    16c2:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <host_keyboard_leds>
    16c6:	18 17       	cp	r17, r24
    16c8:	51 f1       	breq	.+84     	; 0x171e <keyboard_task+0x1c6>
        led_status = host_keyboard_leds();
    16ca:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <host_keyboard_leds>
    16ce:	80 93 69 01 	sts	0x0169, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    }
}
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	ff 90       	pop	r15
    16e6:	ef 90       	pop	r14
    16e8:	df 90       	pop	r13
    16ea:	cf 90       	pop	r12
    16ec:	bf 90       	pop	r11
    16ee:	af 90       	pop	r10
    16f0:	9f 90       	pop	r9
    16f2:	8f 90       	pop	r8
    16f4:	7f 90       	pop	r7
    16f6:	6f 90       	pop	r6
    16f8:	5f 90       	pop	r5
    16fa:	4f 90       	pop	r4
    16fc:	3f 90       	pop	r3
    16fe:	2f 90       	pop	r2

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    1700:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <hook_keyboard_leds_change>
                    matrix_print();
                }
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
    1704:	f5 01       	movw	r30, r10
    1706:	d1 82       	std	Z+1, r13	; 0x01
    1708:	c0 82       	st	Z, r12
#endif
            if (debug_matrix) matrix_print();
    170a:	80 91 b5 01 	lds	r24, 0x01B5
    170e:	81 ff       	sbrs	r24, 1
    1710:	7f cf       	rjmp	.-258    	; 0x1610 <keyboard_task+0xb8>
    1712:	7c cf       	rjmp	.-264    	; 0x160c <keyboard_task+0xb4>
            if (has_ghost_in_row(r)) {
                /* Keep track of whether ghosted status has changed for
                 * debugging. But don't update matrix_prev until un-ghosted, or
                 * the last key would be lost.
                 */
                if (debug_matrix && matrix_ghost[r] != matrix_row) {
    1714:	80 91 b5 01 	lds	r24, 0x01B5
    1718:	81 fd       	sbrc	r24, 1
    171a:	6c cf       	rjmp	.-296    	; 0x15f4 <keyboard_task+0x9c>
    171c:	73 cf       	rjmp	.-282    	; 0x1604 <keyboard_task+0xac>
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    }
}
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	ff 90       	pop	r15
    1732:	ef 90       	pop	r14
    1734:	df 90       	pop	r13
    1736:	cf 90       	pop	r12
    1738:	bf 90       	pop	r11
    173a:	af 90       	pop	r10
    173c:	9f 90       	pop	r9
    173e:	8f 90       	pop	r8
    1740:	7f 90       	pop	r7
    1742:	6f 90       	pop	r6
    1744:	5f 90       	pop	r5
    1746:	4f 90       	pop	r4
    1748:	3f 90       	pop	r3
    174a:	2f 90       	pop	r2
    174c:	08 95       	ret

0000174e <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    174e:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <led_set>

00001752 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	2b 97       	sbiw	r28, 0x0b	; 11
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	4f 83       	std	Y+7, r20	; 0x07
    1768:	58 87       	std	Y+8, r21	; 0x08
    176a:	69 87       	std	Y+9, r22	; 0x09
    176c:	7a 87       	std	Y+10, r23	; 0x0a
    176e:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    1770:	8a 85       	ldd	r24, Y+10	; 0x0a
    1772:	9b 85       	ldd	r25, Y+11	; 0x0b
    1774:	89 2b       	or	r24, r25
    1776:	39 f0       	breq	.+14     	; 0x1786 <action_exec+0x34>
    1778:	5f 3f       	cpi	r21, 0xFF	; 255
    177a:	41 f4       	brne	.+16     	; 0x178c <action_exec+0x3a>
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	4f 3f       	cpi	r20, 0xFF	; 255
    1782:	31 f0       	breq	.+12     	; 0x1790 <action_exec+0x3e>
    1784:	03 c0       	rjmp	.+6      	; 0x178c <action_exec+0x3a>
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <action_exec+0x3e>
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    if (!IS_NOEVENT(event)) {
    1790:	80 fd       	sbrc	r24, 0
    1792:	07 c0       	rjmp	.+14     	; 0x17a2 <action_exec+0x50>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    1794:	4f 81       	ldd	r20, Y+7	; 0x07
    1796:	58 85       	ldd	r21, Y+8	; 0x08
    1798:	69 85       	ldd	r22, Y+9	; 0x09
    179a:	7a 85       	ldd	r23, Y+10	; 0x0a
    179c:	8b 85       	ldd	r24, Y+11	; 0x0b
    179e:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    17a2:	de 01       	movw	r26, r28
    17a4:	11 96       	adiw	r26, 0x01	; 1
    17a6:	86 e0       	ldi	r24, 0x06	; 6
    17a8:	fd 01       	movw	r30, r26
    17aa:	11 92       	st	Z+, r1
    17ac:	8a 95       	dec	r24
    17ae:	e9 f7       	brne	.-6      	; 0x17aa <action_exec+0x58>
    17b0:	85 e0       	ldi	r24, 0x05	; 5
    17b2:	fe 01       	movw	r30, r28
    17b4:	37 96       	adiw	r30, 0x07	; 7
    17b6:	01 90       	ld	r0, Z+
    17b8:	0d 92       	st	X+, r0
    17ba:	8a 95       	dec	r24
    17bc:	e1 f7       	brne	.-8      	; 0x17b6 <action_exec+0x64>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    17be:	49 81       	ldd	r20, Y+1	; 0x01
    17c0:	5a 81       	ldd	r21, Y+2	; 0x02
    17c2:	6b 81       	ldd	r22, Y+3	; 0x03
    17c4:	7c 81       	ldd	r23, Y+4	; 0x04
    17c6:	8d 81       	ldd	r24, Y+5	; 0x05
    17c8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ca:	0e 94 ad 12 	call	0x255a	; 0x255a <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    17ce:	2b 96       	adiw	r28, 0x0b	; 11
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	08 95       	ret

000017e0 <register_code>:
/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    if (code == KC_NO) {
    17e0:	88 23       	and	r24, r24
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <register_code+0x6>
    17e4:	9c c0       	rjmp	.+312    	; 0x191e <register_code+0x13e>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    17e6:	98 2f       	mov	r25, r24
    17e8:	94 50       	subi	r25, 0x04	; 4
    17ea:	91 3a       	cpi	r25, 0xA1	; 161
    17ec:	18 f4       	brcc	.+6      	; 0x17f4 <register_code+0x14>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    17ee:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <add_key>
    17f2:	0e c0       	rjmp	.+28     	; 0x1810 <register_code+0x30>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    17f4:	98 2f       	mov	r25, r24
    17f6:	90 5e       	subi	r25, 0xE0	; 224
    17f8:	98 30       	cpi	r25, 0x08	; 8
    17fa:	60 f4       	brcc	.+24     	; 0x1814 <register_code+0x34>
        add_mods(MOD_BIT(code));
    17fc:	28 2f       	mov	r18, r24
    17fe:	27 70       	andi	r18, 0x07	; 7
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	01 c0       	rjmp	.+2      	; 0x1808 <register_code+0x28>
    1806:	88 0f       	add	r24, r24
    1808:	2a 95       	dec	r18
    180a:	ea f7       	brpl	.-6      	; 0x1806 <register_code+0x26>
    180c:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <add_mods>
        send_keyboard_report();
    1810:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    1814:	98 2f       	mov	r25, r24
    1816:	95 5a       	subi	r25, 0xA5	; 165
    1818:	93 30       	cpi	r25, 0x03	; 3
    181a:	70 f4       	brcc	.+28     	; 0x1838 <register_code+0x58>
        host_system_send(KEYCODE2SYSTEM(code));
    181c:	85 3a       	cpi	r24, 0xA5	; 165
    181e:	29 f0       	breq	.+10     	; 0x182a <register_code+0x4a>
    1820:	86 3a       	cpi	r24, 0xA6	; 166
    1822:	31 f4       	brne	.+12     	; 0x1830 <register_code+0x50>
    1824:	82 e8       	ldi	r24, 0x82	; 130
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	05 c0       	rjmp	.+10     	; 0x1834 <register_code+0x54>
    182a:	81 e8       	ldi	r24, 0x81	; 129
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <register_code+0x54>
    1830:	83 e8       	ldi	r24, 0x83	; 131
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    1838:	98 2f       	mov	r25, r24
    183a:	98 5a       	subi	r25, 0xA8	; 168
    183c:	95 31       	cpi	r25, 0x15	; 21
    183e:	08 f0       	brcs	.+2      	; 0x1842 <register_code+0x62>
    1840:	6e c0       	rjmp	.+220    	; 0x191e <register_code+0x13e>
        host_consumer_send(KEYCODE2CONSUMER(code));
    1842:	88 3a       	cpi	r24, 0xA8	; 168
    1844:	61 f1       	breq	.+88     	; 0x189e <register_code+0xbe>
    1846:	89 3a       	cpi	r24, 0xA9	; 169
    1848:	69 f1       	breq	.+90     	; 0x18a4 <register_code+0xc4>
    184a:	8a 3a       	cpi	r24, 0xAA	; 170
    184c:	71 f1       	breq	.+92     	; 0x18aa <register_code+0xca>
    184e:	8b 3a       	cpi	r24, 0xAB	; 171
    1850:	79 f1       	breq	.+94     	; 0x18b0 <register_code+0xd0>
    1852:	8c 3a       	cpi	r24, 0xAC	; 172
    1854:	81 f1       	breq	.+96     	; 0x18b6 <register_code+0xd6>
    1856:	8d 3a       	cpi	r24, 0xAD	; 173
    1858:	89 f1       	breq	.+98     	; 0x18bc <register_code+0xdc>
    185a:	8e 3a       	cpi	r24, 0xAE	; 174
    185c:	91 f1       	breq	.+100    	; 0x18c2 <register_code+0xe2>
    185e:	8f 3a       	cpi	r24, 0xAF	; 175
    1860:	99 f1       	breq	.+102    	; 0x18c8 <register_code+0xe8>
    1862:	81 3b       	cpi	r24, 0xB1	; 177
    1864:	a1 f1       	breq	.+104    	; 0x18ce <register_code+0xee>
    1866:	80 3b       	cpi	r24, 0xB0	; 176
    1868:	a9 f1       	breq	.+106    	; 0x18d4 <register_code+0xf4>
    186a:	82 3b       	cpi	r24, 0xB2	; 178
    186c:	b1 f1       	breq	.+108    	; 0x18da <register_code+0xfa>
    186e:	83 3b       	cpi	r24, 0xB3	; 179
    1870:	b9 f1       	breq	.+110    	; 0x18e0 <register_code+0x100>
    1872:	84 3b       	cpi	r24, 0xB4	; 180
    1874:	c1 f1       	breq	.+112    	; 0x18e6 <register_code+0x106>
    1876:	85 3b       	cpi	r24, 0xB5	; 181
    1878:	c9 f1       	breq	.+114    	; 0x18ec <register_code+0x10c>
    187a:	86 3b       	cpi	r24, 0xB6	; 182
    187c:	d1 f1       	breq	.+116    	; 0x18f2 <register_code+0x112>
    187e:	87 3b       	cpi	r24, 0xB7	; 183
    1880:	d9 f1       	breq	.+118    	; 0x18f8 <register_code+0x118>
    1882:	88 3b       	cpi	r24, 0xB8	; 184
    1884:	e1 f1       	breq	.+120    	; 0x18fe <register_code+0x11e>
    1886:	89 3b       	cpi	r24, 0xB9	; 185
    1888:	e9 f1       	breq	.+122    	; 0x1904 <register_code+0x124>
    188a:	8a 3b       	cpi	r24, 0xBA	; 186
    188c:	f1 f1       	breq	.+124    	; 0x190a <register_code+0x12a>
    188e:	8b 3b       	cpi	r24, 0xBB	; 187
    1890:	f9 f1       	breq	.+126    	; 0x1910 <register_code+0x130>
    1892:	8c 3b       	cpi	r24, 0xBC	; 188
    1894:	09 f0       	breq	.+2      	; 0x1898 <register_code+0xb8>
    1896:	3f c0       	rjmp	.+126    	; 0x1916 <register_code+0x136>
    1898:	8a e2       	ldi	r24, 0x2A	; 42
    189a:	92 e0       	ldi	r25, 0x02	; 2
    189c:	3e c0       	rjmp	.+124    	; 0x191a <register_code+0x13a>
    189e:	82 ee       	ldi	r24, 0xE2	; 226
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	3b c0       	rjmp	.+118    	; 0x191a <register_code+0x13a>
    18a4:	89 ee       	ldi	r24, 0xE9	; 233
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	38 c0       	rjmp	.+112    	; 0x191a <register_code+0x13a>
    18aa:	8a ee       	ldi	r24, 0xEA	; 234
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	35 c0       	rjmp	.+106    	; 0x191a <register_code+0x13a>
    18b0:	85 eb       	ldi	r24, 0xB5	; 181
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	32 c0       	rjmp	.+100    	; 0x191a <register_code+0x13a>
    18b6:	86 eb       	ldi	r24, 0xB6	; 182
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	2f c0       	rjmp	.+94     	; 0x191a <register_code+0x13a>
    18bc:	83 eb       	ldi	r24, 0xB3	; 179
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	2c c0       	rjmp	.+88     	; 0x191a <register_code+0x13a>
    18c2:	84 eb       	ldi	r24, 0xB4	; 180
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	29 c0       	rjmp	.+82     	; 0x191a <register_code+0x13a>
    18c8:	87 eb       	ldi	r24, 0xB7	; 183
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	26 c0       	rjmp	.+76     	; 0x191a <register_code+0x13a>
    18ce:	8c ec       	ldi	r24, 0xCC	; 204
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	23 c0       	rjmp	.+70     	; 0x191a <register_code+0x13a>
    18d4:	8d ec       	ldi	r24, 0xCD	; 205
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	20 c0       	rjmp	.+64     	; 0x191a <register_code+0x13a>
    18da:	83 e8       	ldi	r24, 0x83	; 131
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	1d c0       	rjmp	.+58     	; 0x191a <register_code+0x13a>
    18e0:	8a e8       	ldi	r24, 0x8A	; 138
    18e2:	91 e0       	ldi	r25, 0x01	; 1
    18e4:	1a c0       	rjmp	.+52     	; 0x191a <register_code+0x13a>
    18e6:	82 e9       	ldi	r24, 0x92	; 146
    18e8:	91 e0       	ldi	r25, 0x01	; 1
    18ea:	17 c0       	rjmp	.+46     	; 0x191a <register_code+0x13a>
    18ec:	84 e9       	ldi	r24, 0x94	; 148
    18ee:	91 e0       	ldi	r25, 0x01	; 1
    18f0:	14 c0       	rjmp	.+40     	; 0x191a <register_code+0x13a>
    18f2:	81 e2       	ldi	r24, 0x21	; 33
    18f4:	92 e0       	ldi	r25, 0x02	; 2
    18f6:	11 c0       	rjmp	.+34     	; 0x191a <register_code+0x13a>
    18f8:	83 e2       	ldi	r24, 0x23	; 35
    18fa:	92 e0       	ldi	r25, 0x02	; 2
    18fc:	0e c0       	rjmp	.+28     	; 0x191a <register_code+0x13a>
    18fe:	84 e2       	ldi	r24, 0x24	; 36
    1900:	92 e0       	ldi	r25, 0x02	; 2
    1902:	0b c0       	rjmp	.+22     	; 0x191a <register_code+0x13a>
    1904:	85 e2       	ldi	r24, 0x25	; 37
    1906:	92 e0       	ldi	r25, 0x02	; 2
    1908:	08 c0       	rjmp	.+16     	; 0x191a <register_code+0x13a>
    190a:	86 e2       	ldi	r24, 0x26	; 38
    190c:	92 e0       	ldi	r25, 0x02	; 2
    190e:	05 c0       	rjmp	.+10     	; 0x191a <register_code+0x13a>
    1910:	87 e2       	ldi	r24, 0x27	; 39
    1912:	92 e0       	ldi	r25, 0x02	; 2
    1914:	02 c0       	rjmp	.+4      	; 0x191a <register_code+0x13a>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <host_consumer_send>
    191e:	08 95       	ret

00001920 <unregister_code>:
    }
}

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    1920:	88 23       	and	r24, r24
    1922:	31 f1       	breq	.+76     	; 0x1970 <unregister_code+0x50>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    1924:	98 2f       	mov	r25, r24
    1926:	94 50       	subi	r25, 0x04	; 4
    1928:	91 3a       	cpi	r25, 0xA1	; 161
    192a:	18 f4       	brcc	.+6      	; 0x1932 <unregister_code+0x12>
        del_key(code);
    192c:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <del_key>
    1930:	0e c0       	rjmp	.+28     	; 0x194e <unregister_code+0x2e>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    1932:	98 2f       	mov	r25, r24
    1934:	90 5e       	subi	r25, 0xE0	; 224
    1936:	98 30       	cpi	r25, 0x08	; 8
    1938:	60 f4       	brcc	.+24     	; 0x1952 <unregister_code+0x32>
        del_mods(MOD_BIT(code));
    193a:	28 2f       	mov	r18, r24
    193c:	27 70       	andi	r18, 0x07	; 7
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <unregister_code+0x26>
    1944:	88 0f       	add	r24, r24
    1946:	2a 95       	dec	r18
    1948:	ea f7       	brpl	.-6      	; 0x1944 <unregister_code+0x24>
    194a:	0e 94 82 15 	call	0x2b04	; 0x2b04 <del_mods>
        send_keyboard_report();
    194e:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    1952:	98 2f       	mov	r25, r24
    1954:	95 5a       	subi	r25, 0xA5	; 165
    1956:	93 30       	cpi	r25, 0x03	; 3
    1958:	20 f4       	brcc	.+8      	; 0x1962 <unregister_code+0x42>
        host_system_send(0);
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    1962:	88 5a       	subi	r24, 0xA8	; 168
    1964:	85 31       	cpi	r24, 0x15	; 21
    1966:	20 f4       	brcc	.+8      	; 0x1970 <unregister_code+0x50>
        host_consumer_send(0);
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <host_consumer_send>
    1970:	08 95       	ret

00001972 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    1972:	88 23       	and	r24, r24
    1974:	21 f0       	breq	.+8      	; 0x197e <register_mods+0xc>
        add_mods(mods);
    1976:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <add_mods>
        send_keyboard_report();
    197a:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <send_keyboard_report>
    197e:	08 95       	ret

00001980 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    1980:	88 23       	and	r24, r24
    1982:	21 f0       	breq	.+8      	; 0x198c <unregister_mods+0xc>
        del_mods(mods);
    1984:	0e 94 82 15 	call	0x2b04	; 0x2b04 <del_mods>
        send_keyboard_report();
    1988:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <send_keyboard_report>
    198c:	08 95       	ret

0000198e <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    198e:	8f 92       	push	r8
    1990:	9f 92       	push	r9
    1992:	af 92       	push	r10
    1994:	bf 92       	push	r11
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	27 97       	sbiw	r28, 0x07	; 7
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	5c 01       	movw	r10, r24
    keyevent_t event = record->event;
    19b0:	85 e0       	ldi	r24, 0x05	; 5
    19b2:	f5 01       	movw	r30, r10
    19b4:	de 01       	movw	r26, r28
    19b6:	11 96       	adiw	r26, 0x01	; 1
    19b8:	01 90       	ld	r0, Z+
    19ba:	0d 92       	st	X+, r0
    19bc:	8a 95       	dec	r24
    19be:	e1 f7       	brne	.-8      	; 0x19b8 <process_action+0x2a>
    19c0:	f5 01       	movw	r30, r10
    19c2:	30 81       	ld	r19, Z
    19c4:	21 81       	ldd	r18, Z+1	; 0x01
    19c6:	02 81       	ldd	r16, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    19c8:	15 81       	ldd	r17, Z+5	; 0x05
    19ca:	12 95       	swap	r17
    19cc:	1f 70       	andi	r17, 0x0F	; 15
    19ce:	83 81       	ldd	r24, Z+3	; 0x03
    19d0:	94 81       	ldd	r25, Z+4	; 0x04
    19d2:	89 2b       	or	r24, r25
    19d4:	39 f0       	breq	.+14     	; 0x19e4 <process_action+0x56>
    19d6:	2f 3f       	cpi	r18, 0xFF	; 255
    19d8:	41 f4       	brne	.+16     	; 0x19ea <process_action+0x5c>
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	3f 3f       	cpi	r19, 0xFF	; 255
    19e0:	31 f0       	breq	.+12     	; 0x19ee <process_action+0x60>
    19e2:	03 c0       	rjmp	.+6      	; 0x19ea <process_action+0x5c>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <process_action+0x60>
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    19ee:	80 fd       	sbrc	r24, 0
    19f0:	d5 c2       	rjmp	.+1450   	; 0x1f9c <process_action+0x60e>

    action_t action = layer_switch_get_action(event.key);
    19f2:	39 83       	std	Y+1, r19	; 0x01
    19f4:	2a 83       	std	Y+2, r18	; 0x02
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	9a 81       	ldd	r25, Y+2	; 0x02
    19fa:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    19fe:	9e 83       	std	Y+6, r25	; 0x06
    1a00:	8f 83       	std	Y+7, r24	; 0x07
    1a02:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    1a06:	0e 94 1a 14 	call	0x2834	; 0x2834 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    1a0a:	4e 81       	ldd	r20, Y+6	; 0x06
    1a0c:	24 2f       	mov	r18, r20
    1a0e:	22 95       	swap	r18
    1a10:	2f 70       	andi	r18, 0x0F	; 15
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	6f 81       	ldd	r22, Y+7	; 0x07
    1a16:	24 30       	cpi	r18, 0x04	; 4
    1a18:	31 05       	cpc	r19, r1
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <process_action+0x90>
    1a1c:	a7 c0       	rjmp	.+334    	; 0x1b6c <process_action+0x1de>
    1a1e:	44 f4       	brge	.+16     	; 0x1a30 <process_action+0xa2>
    1a20:	84 2f       	mov	r24, r20
    1a22:	80 7f       	andi	r24, 0xF0	; 240
    1a24:	94 2f       	mov	r25, r20
    1a26:	9f 70       	andi	r25, 0x0F	; 15
    1a28:	22 30       	cpi	r18, 0x02	; 2
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	b4 f0       	brlt	.+44     	; 0x1a5a <process_action+0xcc>
    1a2e:	42 c0       	rjmp	.+132    	; 0x1ab4 <process_action+0x126>
    1a30:	2c 30       	cpi	r18, 0x0C	; 12
    1a32:	31 05       	cpc	r19, r1
    1a34:	4c f4       	brge	.+18     	; 0x1a48 <process_action+0xba>
    1a36:	2a 30       	cpi	r18, 0x0A	; 10
    1a38:	31 05       	cpc	r19, r1
    1a3a:	0c f0       	brlt	.+2      	; 0x1a3e <process_action+0xb0>
    1a3c:	cb c1       	rjmp	.+918    	; 0x1dd4 <process_action+0x446>
    1a3e:	28 30       	cpi	r18, 0x08	; 8
    1a40:	31 05       	cpc	r19, r1
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <process_action+0xb8>
    1a44:	ab c2       	rjmp	.+1366   	; 0x1f9c <process_action+0x60e>
    1a46:	cf c0       	rjmp	.+414    	; 0x1be6 <process_action+0x258>
    1a48:	2c 30       	cpi	r18, 0x0C	; 12
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <process_action+0xc2>
    1a4e:	80 c2       	rjmp	.+1280   	; 0x1f50 <process_action+0x5c2>
    1a50:	2f 30       	cpi	r18, 0x0F	; 15
    1a52:	31 05       	cpc	r19, r1
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <process_action+0xca>
    1a56:	a2 c2       	rjmp	.+1348   	; 0x1f9c <process_action+0x60e>
    1a58:	8f c2       	rjmp	.+1310   	; 0x1f78 <process_action+0x5ea>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    1a5a:	99 2e       	mov	r9, r25
    1a5c:	81 11       	cpse	r24, r1
    1a5e:	01 c0       	rjmp	.+2      	; 0x1a62 <process_action+0xd4>
    1a60:	03 c0       	rjmp	.+6      	; 0x1a68 <process_action+0xda>
    1a62:	92 94       	swap	r9
    1a64:	90 ef       	ldi	r25, 0xF0	; 240
    1a66:	99 22       	and	r9, r25
                                                                action.key.mods<<4;
                if (event.pressed) {
    1a68:	00 23       	and	r16, r16
    1a6a:	59 f0       	breq	.+22     	; 0x1a82 <process_action+0xf4>
                    if (mods) {
    1a6c:	99 20       	and	r9, r9
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <process_action+0xe4>
    1a70:	4a c2       	rjmp	.+1172   	; 0x1f06 <process_action+0x578>
                        add_weak_mods(mods);
    1a72:	89 2d       	mov	r24, r9
    1a74:	6f 83       	std	Y+7, r22	; 0x07
    1a76:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <add_weak_mods>
                        send_keyboard_report();
    1a7a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <send_keyboard_report>
    1a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a80:	42 c2       	rjmp	.+1156   	; 0x1f06 <process_action+0x578>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    1a82:	86 2f       	mov	r24, r22
    1a84:	0e 94 90 0c 	call	0x1920	; 0x1920 <unregister_code>
                    if (mods) {
    1a88:	99 20       	and	r9, r9
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <process_action+0x100>
    1a8c:	87 c2       	rjmp	.+1294   	; 0x1f9c <process_action+0x60e>
                        del_weak_mods(mods);
    1a8e:	89 2d       	mov	r24, r9
    1a90:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    1a94:	27 96       	adiw	r28, 0x07	; 7
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	0f 91       	pop	r16
    1aa8:	bf 90       	pop	r11
    1aaa:	af 90       	pop	r10
    1aac:	9f 90       	pop	r9
    1aae:	8f 90       	pop	r8
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    1ab0:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    1ab4:	99 2e       	mov	r9, r25
    1ab6:	80 32       	cpi	r24, 0x20	; 32
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <process_action+0x12e>
    1aba:	03 c0       	rjmp	.+6      	; 0x1ac2 <process_action+0x134>
    1abc:	92 94       	swap	r9
    1abe:	80 ef       	ldi	r24, 0xF0	; 240
    1ac0:	98 22       	and	r9, r24
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    1ac2:	66 23       	and	r22, r22
    1ac4:	21 f0       	breq	.+8      	; 0x1ace <process_action+0x140>
    1ac6:	61 30       	cpi	r22, 0x01	; 1
    1ac8:	09 f0       	breq	.+2      	; 0x1acc <process_action+0x13e>
    1aca:	41 c0       	rjmp	.+130    	; 0x1b4e <process_action+0x1c0>
    1acc:	21 c0       	rjmp	.+66     	; 0x1b10 <process_action+0x182>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    1ace:	00 23       	and	r16, r16
    1ad0:	b1 f0       	breq	.+44     	; 0x1afe <process_action+0x170>
                            if (tap_count == 0) {
                                register_mods(mods);
    1ad2:	89 2d       	mov	r24, r9
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    1ad4:	11 11       	cpse	r17, r1
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <process_action+0x14c>
    1ad8:	26 c0       	rjmp	.+76     	; 0x1b26 <process_action+0x198>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    1ada:	11 30       	cpi	r17, 0x01	; 1
    1adc:	21 f5       	brne	.+72     	; 0x1b26 <process_action+0x198>
            break;
#endif
        default:
            break;
    }
}
    1ade:	27 96       	adiw	r28, 0x07	; 7
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	bf 90       	pop	r11
    1af4:	af 90       	pop	r10
    1af6:	9f 90       	pop	r9
    1af8:	8f 90       	pop	r8
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    1afa:	0c 94 9f 15 	jmp	0x2b3e	; 0x2b3e <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    1afe:	11 11       	cpse	r17, r1
    1b00:	01 c0       	rjmp	.+2      	; 0x1b04 <process_action+0x176>
    1b02:	03 c0       	rjmp	.+6      	; 0x1b0a <process_action+0x17c>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    1b04:	11 30       	cpi	r17, 0x01	; 1
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <process_action+0x17c>
    1b08:	49 c2       	rjmp	.+1170   	; 0x1f9c <process_action+0x60e>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    1b0a:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <clear_oneshot_mods>
    1b0e:	2c c0       	rjmp	.+88     	; 0x1b68 <process_action+0x1da>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    1b10:	00 23       	and	r16, r16
    1b12:	c9 f0       	breq	.+50     	; 0x1b46 <process_action+0x1b8>
                            if (tap_count <= TAPPING_TOGGLE) {
    1b14:	16 30       	cpi	r17, 0x06	; 6
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <process_action+0x18c>
    1b18:	41 c2       	rjmp	.+1154   	; 0x1f9c <process_action+0x60e>
                                if (mods & get_mods()) {
    1b1a:	0e 94 79 15 	call	0x2af2	; 0x2af2 <get_mods>
    1b1e:	89 21       	and	r24, r9
    1b20:	09 f0       	breq	.+2      	; 0x1b24 <process_action+0x196>
    1b22:	22 c0       	rjmp	.+68     	; 0x1b68 <process_action+0x1da>
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    1b24:	89 2d       	mov	r24, r9
            break;
#endif
        default:
            break;
    }
}
    1b26:	27 96       	adiw	r28, 0x07	; 7
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	1f 91       	pop	r17
    1b38:	0f 91       	pop	r16
    1b3a:	bf 90       	pop	r11
    1b3c:	af 90       	pop	r10
    1b3e:	9f 90       	pop	r9
    1b40:	8f 90       	pop	r8
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    1b42:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    1b46:	15 30       	cpi	r17, 0x05	; 5
    1b48:	08 f0       	brcs	.+2      	; 0x1b4c <process_action+0x1be>
    1b4a:	28 c2       	rjmp	.+1104   	; 0x1f9c <process_action+0x60e>
    1b4c:	0d c0       	rjmp	.+26     	; 0x1b68 <process_action+0x1da>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    1b4e:	00 23       	and	r16, r16
    1b50:	49 f0       	breq	.+18     	; 0x1b64 <process_action+0x1d6>
                            if (tap_count > 0) {
    1b52:	11 23       	and	r17, r17
    1b54:	39 f3       	breq	.-50     	; 0x1b24 <process_action+0x196>
                                if (record->tap.interrupted) {
    1b56:	f5 01       	movw	r30, r10
    1b58:	85 81       	ldd	r24, Z+5	; 0x05
    1b5a:	80 ff       	sbrs	r24, 0
    1b5c:	d4 c1       	rjmp	.+936    	; 0x1f06 <process_action+0x578>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    1b5e:	8f 70       	andi	r24, 0x0F	; 15
    1b60:	85 83       	std	Z+5, r24	; 0x05
    1b62:	e0 cf       	rjmp	.-64     	; 0x1b24 <process_action+0x196>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    1b64:	11 11       	cpse	r17, r1
    1b66:	e3 c1       	rjmp	.+966    	; 0x1f2e <process_action+0x5a0>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    1b68:	89 2d       	mov	r24, r9
    1b6a:	50 c1       	rjmp	.+672    	; 0x1e0c <process_action+0x47e>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    1b6c:	24 2f       	mov	r18, r20
    1b6e:	26 95       	lsr	r18
    1b70:	26 95       	lsr	r18
    1b72:	23 70       	andi	r18, 0x03	; 3
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	21 15       	cp	r18, r1
    1b78:	31 05       	cpc	r19, r1
    1b7a:	29 f0       	breq	.+10     	; 0x1b86 <process_action+0x1f8>
    1b7c:	21 30       	cpi	r18, 0x01	; 1
    1b7e:	31 05       	cpc	r19, r1
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <process_action+0x1f6>
    1b82:	0c c2       	rjmp	.+1048   	; 0x1f9c <process_action+0x60e>
    1b84:	18 c0       	rjmp	.+48     	; 0x1bb6 <process_action+0x228>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    1b86:	00 23       	and	r16, r16
    1b88:	21 f0       	breq	.+8      	; 0x1b92 <process_action+0x204>
                        host_system_send(action.usage.code);
    1b8a:	86 2f       	mov	r24, r22
    1b8c:	94 2f       	mov	r25, r20
    1b8e:	93 70       	andi	r25, 0x03	; 3
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <process_action+0x208>
                    } else {
                        host_system_send(0);
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    1b96:	27 96       	adiw	r28, 0x07	; 7
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	bf 90       	pop	r11
    1bac:	af 90       	pop	r10
    1bae:	9f 90       	pop	r9
    1bb0:	8f 90       	pop	r8
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    1bb2:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    1bb6:	00 23       	and	r16, r16
    1bb8:	21 f0       	breq	.+8      	; 0x1bc2 <process_action+0x234>
                        host_consumer_send(action.usage.code);
    1bba:	86 2f       	mov	r24, r22
    1bbc:	94 2f       	mov	r25, r20
    1bbe:	93 70       	andi	r25, 0x03	; 3
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <process_action+0x238>
                    } else {
                        host_consumer_send(0);
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    1bc6:	27 96       	adiw	r28, 0x07	; 7
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	bf 90       	pop	r11
    1bdc:	af 90       	pop	r10
    1bde:	9f 90       	pop	r9
    1be0:	8f 90       	pop	r8
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    1be2:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <host_consumer_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    1be6:	84 2f       	mov	r24, r20
    1be8:	83 70       	andi	r24, 0x03	; 3
    1bea:	09 f0       	breq	.+2      	; 0x1bee <process_action+0x260>
    1bec:	76 c0       	rjmp	.+236    	; 0x1cda <process_action+0x34c>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    1bee:	01 11       	cpse	r16, r1
    1bf0:	d5 c1       	rjmp	.+938    	; 0x1f9c <process_action+0x60e>
                    uint8_t shift = action.layer_bitop.part*4;
    1bf2:	26 2f       	mov	r18, r22
    1bf4:	22 95       	swap	r18
    1bf6:	26 95       	lsr	r18
    1bf8:	27 70       	andi	r18, 0x07	; 7
    1bfa:	22 0f       	add	r18, r18
    1bfc:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    1bfe:	86 2f       	mov	r24, r22
    1c00:	8f 70       	andi	r24, 0x0F	; 15
    1c02:	88 2e       	mov	r8, r24
    1c04:	91 2c       	mov	r9, r1
    1c06:	a1 2c       	mov	r10, r1
    1c08:	b1 2c       	mov	r11, r1
    1c0a:	02 2e       	mov	r0, r18
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <process_action+0x288>
    1c0e:	88 0c       	add	r8, r8
    1c10:	99 1c       	adc	r9, r9
    1c12:	aa 1c       	adc	r10, r10
    1c14:	bb 1c       	adc	r11, r11
    1c16:	0a 94       	dec	r0
    1c18:	d2 f7       	brpl	.-12     	; 0x1c0e <process_action+0x280>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    1c1a:	64 ff       	sbrs	r22, 4
    1c1c:	10 c0       	rjmp	.+32     	; 0x1c3e <process_action+0x2b0>
    1c1e:	6f e0       	ldi	r22, 0x0F	; 15
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	04 c0       	rjmp	.+8      	; 0x1c30 <process_action+0x2a2>
    1c28:	66 0f       	add	r22, r22
    1c2a:	77 1f       	adc	r23, r23
    1c2c:	88 1f       	adc	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	2a 95       	dec	r18
    1c32:	d2 f7       	brpl	.-12     	; 0x1c28 <process_action+0x29a>
    1c34:	60 95       	com	r22
    1c36:	70 95       	com	r23
    1c38:	80 95       	com	r24
    1c3a:	90 95       	com	r25
    1c3c:	03 c0       	rjmp	.+6      	; 0x1c44 <process_action+0x2b6>
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    1c44:	24 2f       	mov	r18, r20
    1c46:	26 95       	lsr	r18
    1c48:	26 95       	lsr	r18
    1c4a:	23 70       	andi	r18, 0x03	; 3
    1c4c:	42 2f       	mov	r20, r18
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	42 30       	cpi	r20, 0x02	; 2
    1c52:	51 05       	cpc	r21, r1
    1c54:	d1 f0       	breq	.+52     	; 0x1c8a <process_action+0x2fc>
    1c56:	43 30       	cpi	r20, 0x03	; 3
    1c58:	51 05       	cpc	r21, r1
    1c5a:	59 f1       	breq	.+86     	; 0x1cb2 <process_action+0x324>
    1c5c:	68 29       	or	r22, r8
    1c5e:	79 29       	or	r23, r9
    1c60:	8a 29       	or	r24, r10
    1c62:	9b 29       	or	r25, r11
    1c64:	41 30       	cpi	r20, 0x01	; 1
    1c66:	51 05       	cpc	r21, r1
    1c68:	41 f1       	breq	.+80     	; 0x1cba <process_action+0x32c>
            break;
#endif
        default:
            break;
    }
}
    1c6a:	27 96       	adiw	r28, 0x07	; 7
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	cd bf       	out	0x3d, r28	; 61
    1c76:	df 91       	pop	r29
    1c78:	cf 91       	pop	r28
    1c7a:	1f 91       	pop	r17
    1c7c:	0f 91       	pop	r16
    1c7e:	bf 90       	pop	r11
    1c80:	af 90       	pop	r10
    1c82:	9f 90       	pop	r9
    1c84:	8f 90       	pop	r8
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    1c86:	0c 94 2d 14 	jmp	0x285a	; 0x285a <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    1c8a:	68 29       	or	r22, r8
    1c8c:	79 29       	or	r23, r9
    1c8e:	8a 29       	or	r24, r10
    1c90:	9b 29       	or	r25, r11
            break;
#endif
        default:
            break;
    }
}
    1c92:	27 96       	adiw	r28, 0x07	; 7
    1c94:	0f b6       	in	r0, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	de bf       	out	0x3e, r29	; 62
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	cd bf       	out	0x3d, r28	; 61
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	1f 91       	pop	r17
    1ca4:	0f 91       	pop	r16
    1ca6:	bf 90       	pop	r11
    1ca8:	af 90       	pop	r10
    1caa:	9f 90       	pop	r9
    1cac:	8f 90       	pop	r8
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    1cae:	0c 94 3f 14 	jmp	0x287e	; 0x287e <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    1cb2:	0e 94 2d 14 	call	0x285a	; 0x285a <default_layer_and>
    1cb6:	c5 01       	movw	r24, r10
    1cb8:	b4 01       	movw	r22, r8
            break;
#endif
        default:
            break;
    }
}
    1cba:	27 96       	adiw	r28, 0x07	; 7
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	1f 91       	pop	r17
    1ccc:	0f 91       	pop	r16
    1cce:	bf 90       	pop	r11
    1cd0:	af 90       	pop	r10
    1cd2:	9f 90       	pop	r9
    1cd4:	8f 90       	pop	r8
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    1cd6:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    1cda:	00 23       	and	r16, r16
    1cdc:	19 f0       	breq	.+6      	; 0x1ce4 <process_action+0x356>
    1cde:	84 2f       	mov	r24, r20
    1ce0:	81 70       	andi	r24, 0x01	; 1
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <process_action+0x358>
    1ce4:	86 95       	lsr	r24
    1ce6:	88 23       	and	r24, r24
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <process_action+0x35e>
    1cea:	58 c1       	rjmp	.+688    	; 0x1f9c <process_action+0x60e>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    1cec:	26 2f       	mov	r18, r22
    1cee:	22 95       	swap	r18
    1cf0:	26 95       	lsr	r18
    1cf2:	27 70       	andi	r18, 0x07	; 7
    1cf4:	22 0f       	add	r18, r18
    1cf6:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    1cf8:	86 2f       	mov	r24, r22
    1cfa:	8f 70       	andi	r24, 0x0F	; 15
    1cfc:	88 2e       	mov	r8, r24
    1cfe:	91 2c       	mov	r9, r1
    1d00:	a1 2c       	mov	r10, r1
    1d02:	b1 2c       	mov	r11, r1
    1d04:	02 2e       	mov	r0, r18
    1d06:	04 c0       	rjmp	.+8      	; 0x1d10 <process_action+0x382>
    1d08:	88 0c       	add	r8, r8
    1d0a:	99 1c       	adc	r9, r9
    1d0c:	aa 1c       	adc	r10, r10
    1d0e:	bb 1c       	adc	r11, r11
    1d10:	0a 94       	dec	r0
    1d12:	d2 f7       	brpl	.-12     	; 0x1d08 <process_action+0x37a>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    1d14:	64 ff       	sbrs	r22, 4
    1d16:	10 c0       	rjmp	.+32     	; 0x1d38 <process_action+0x3aa>
    1d18:	6f e0       	ldi	r22, 0x0F	; 15
    1d1a:	70 e0       	ldi	r23, 0x00	; 0
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <process_action+0x39c>
    1d22:	66 0f       	add	r22, r22
    1d24:	77 1f       	adc	r23, r23
    1d26:	88 1f       	adc	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	2a 95       	dec	r18
    1d2c:	d2 f7       	brpl	.-12     	; 0x1d22 <process_action+0x394>
    1d2e:	60 95       	com	r22
    1d30:	70 95       	com	r23
    1d32:	80 95       	com	r24
    1d34:	90 95       	com	r25
    1d36:	03 c0       	rjmp	.+6      	; 0x1d3e <process_action+0x3b0>
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	70 e0       	ldi	r23, 0x00	; 0
    1d3c:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    1d3e:	24 2f       	mov	r18, r20
    1d40:	26 95       	lsr	r18
    1d42:	26 95       	lsr	r18
    1d44:	23 70       	andi	r18, 0x03	; 3
    1d46:	42 2f       	mov	r20, r18
    1d48:	50 e0       	ldi	r21, 0x00	; 0
    1d4a:	42 30       	cpi	r20, 0x02	; 2
    1d4c:	51 05       	cpc	r21, r1
    1d4e:	d1 f0       	breq	.+52     	; 0x1d84 <process_action+0x3f6>
    1d50:	43 30       	cpi	r20, 0x03	; 3
    1d52:	51 05       	cpc	r21, r1
    1d54:	59 f1       	breq	.+86     	; 0x1dac <process_action+0x41e>
    1d56:	68 29       	or	r22, r8
    1d58:	79 29       	or	r23, r9
    1d5a:	8a 29       	or	r24, r10
    1d5c:	9b 29       	or	r25, r11
    1d5e:	41 30       	cpi	r20, 0x01	; 1
    1d60:	51 05       	cpc	r21, r1
    1d62:	41 f1       	breq	.+80     	; 0x1db4 <process_action+0x426>
            break;
#endif
        default:
            break;
    }
}
    1d64:	27 96       	adiw	r28, 0x07	; 7
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	bf 90       	pop	r11
    1d7a:	af 90       	pop	r10
    1d7c:	9f 90       	pop	r9
    1d7e:	8f 90       	pop	r8
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    1d80:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    1d84:	68 29       	or	r22, r8
    1d86:	79 29       	or	r23, r9
    1d88:	8a 29       	or	r24, r10
    1d8a:	9b 29       	or	r25, r11
            break;
#endif
        default:
            break;
    }
}
    1d8c:	27 96       	adiw	r28, 0x07	; 7
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	f8 94       	cli
    1d92:	de bf       	out	0x3e, r29	; 62
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	cd bf       	out	0x3d, r28	; 61
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	1f 91       	pop	r17
    1d9e:	0f 91       	pop	r16
    1da0:	bf 90       	pop	r11
    1da2:	af 90       	pop	r10
    1da4:	9f 90       	pop	r9
    1da6:	8f 90       	pop	r8
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    1da8:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    1dac:	0e 94 cc 14 	call	0x2998	; 0x2998 <layer_and>
    1db0:	c5 01       	movw	r24, r10
    1db2:	b4 01       	movw	r22, r8
            break;
#endif
        default:
            break;
    }
}
    1db4:	27 96       	adiw	r28, 0x07	; 7
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	1f 91       	pop	r17
    1dc6:	0f 91       	pop	r16
    1dc8:	bf 90       	pop	r11
    1dca:	af 90       	pop	r10
    1dcc:	9f 90       	pop	r9
    1dce:	8f 90       	pop	r8
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    1dd0:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    1dd4:	60 3f       	cpi	r22, 0xF0	; 240
    1dd6:	51 f1       	breq	.+84     	; 0x1e2c <process_action+0x49e>
    1dd8:	20 f4       	brcc	.+8      	; 0x1de2 <process_action+0x454>
    1dda:	60 3e       	cpi	r22, 0xE0	; 224
    1ddc:	08 f4       	brcc	.+2      	; 0x1de0 <process_action+0x452>
    1dde:	8e c0       	rjmp	.+284    	; 0x1efc <process_action+0x56e>
    1de0:	08 c0       	rjmp	.+16     	; 0x1df2 <process_action+0x464>
    1de2:	62 3f       	cpi	r22, 0xF2	; 242
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <process_action+0x45a>
    1de6:	63 c0       	rjmp	.+198    	; 0x1eae <process_action+0x520>
    1de8:	e0 f1       	brcs	.+120    	; 0x1e62 <process_action+0x4d4>
    1dea:	63 3f       	cpi	r22, 0xF3	; 243
    1dec:	09 f0       	breq	.+2      	; 0x1df0 <process_action+0x462>
    1dee:	86 c0       	rjmp	.+268    	; 0x1efc <process_action+0x56e>
    1df0:	61 c0       	rjmp	.+194    	; 0x1eb4 <process_action+0x526>
    1df2:	16 2f       	mov	r17, r22
    1df4:	1f 70       	andi	r17, 0x0F	; 15
    1df6:	84 2f       	mov	r24, r20
    1df8:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    1dfa:	00 23       	and	r16, r16
    1dfc:	21 f0       	breq	.+8      	; 0x1e06 <process_action+0x478>
                        layer_on(action.layer_tap.val);
    1dfe:	0e 94 65 14 	call	0x28ca	; 0x28ca <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    1e02:	81 2f       	mov	r24, r17
    1e04:	90 ce       	rjmp	.-736    	; 0x1b26 <process_action+0x198>
                    } else {
                        layer_off(action.layer_tap.val);
    1e06:	0e 94 80 14 	call	0x2900	; 0x2900 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    1e0a:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    1e0c:	27 96       	adiw	r28, 0x07	; 7
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	bf 90       	pop	r11
    1e22:	af 90       	pop	r10
    1e24:	9f 90       	pop	r9
    1e26:	8f 90       	pop	r8
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    1e28:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    1e2c:	00 23       	and	r16, r16
    1e2e:	a9 f0       	breq	.+42     	; 0x1e5a <process_action+0x4cc>
                        if (tap_count < TAPPING_TOGGLE) {
    1e30:	15 30       	cpi	r17, 0x05	; 5
    1e32:	08 f0       	brcs	.+2      	; 0x1e36 <process_action+0x4a8>
    1e34:	b3 c0       	rjmp	.+358    	; 0x1f9c <process_action+0x60e>
                            layer_invert(action.layer_tap.val);
    1e36:	84 2f       	mov	r24, r20
    1e38:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    1e3a:	27 96       	adiw	r28, 0x07	; 7
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	cd bf       	out	0x3d, r28	; 61
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	bf 90       	pop	r11
    1e50:	af 90       	pop	r10
    1e52:	9f 90       	pop	r9
    1e54:	8f 90       	pop	r8
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    1e56:	0c 94 9f 14 	jmp	0x293e	; 0x293e <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    1e5a:	16 30       	cpi	r17, 0x06	; 6
    1e5c:	08 f0       	brcs	.+2      	; 0x1e60 <process_action+0x4d2>
    1e5e:	9e c0       	rjmp	.+316    	; 0x1f9c <process_action+0x60e>
    1e60:	ea cf       	rjmp	.-44     	; 0x1e36 <process_action+0x4a8>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    1e62:	00 23       	and	r16, r16
    1e64:	91 f0       	breq	.+36     	; 0x1e8a <process_action+0x4fc>
    1e66:	84 2f       	mov	r24, r20
    1e68:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    1e6a:	27 96       	adiw	r28, 0x07	; 7
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	1f 91       	pop	r17
    1e7c:	0f 91       	pop	r16
    1e7e:	bf 90       	pop	r11
    1e80:	af 90       	pop	r10
    1e82:	9f 90       	pop	r9
    1e84:	8f 90       	pop	r8
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    1e86:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <layer_on>
                                    layer_off(action.layer_tap.val);
    1e8a:	84 2f       	mov	r24, r20
    1e8c:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    1e8e:	27 96       	adiw	r28, 0x07	; 7
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	1f 91       	pop	r17
    1ea0:	0f 91       	pop	r16
    1ea2:	bf 90       	pop	r11
    1ea4:	af 90       	pop	r10
    1ea6:	9f 90       	pop	r9
    1ea8:	8f 90       	pop	r8
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    1eaa:	0c 94 80 14 	jmp	0x2900	; 0x2900 <layer_off>
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    1eae:	01 11       	cpse	r16, r1
    1eb0:	ec cf       	rjmp	.-40     	; 0x1e8a <process_action+0x4fc>
    1eb2:	d9 cf       	rjmp	.-78     	; 0x1e66 <process_action+0x4d8>
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    1eb4:	00 23       	and	r16, r16
    1eb6:	91 f0       	breq	.+36     	; 0x1edc <process_action+0x54e>
    1eb8:	84 2f       	mov	r24, r20
    1eba:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    1ebc:	27 96       	adiw	r28, 0x07	; 7
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	1f 91       	pop	r17
    1ece:	0f 91       	pop	r16
    1ed0:	bf 90       	pop	r11
    1ed2:	af 90       	pop	r10
    1ed4:	9f 90       	pop	r9
    1ed6:	8f 90       	pop	r8
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    1ed8:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <layer_move>
            break;
#endif
        default:
            break;
    }
}
    1edc:	27 96       	adiw	r28, 0x07	; 7
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	1f 91       	pop	r17
    1eee:	0f 91       	pop	r16
    1ef0:	bf 90       	pop	r11
    1ef2:	af 90       	pop	r10
    1ef4:	9f 90       	pop	r9
    1ef6:	8f 90       	pop	r8
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    1ef8:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    1efc:	00 23       	and	r16, r16
    1efe:	a1 f0       	breq	.+40     	; 0x1f28 <process_action+0x59a>
                        if (tap_count > 0) {
    1f00:	11 23       	and	r17, r17
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <process_action+0x578>
    1f04:	b0 cf       	rjmp	.-160    	; 0x1e66 <process_action+0x4d8>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    1f06:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    1f08:	27 96       	adiw	r28, 0x07	; 7
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	0f 91       	pop	r16
    1f1c:	bf 90       	pop	r11
    1f1e:	af 90       	pop	r10
    1f20:	9f 90       	pop	r9
    1f22:	8f 90       	pop	r8
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    1f24:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    1f28:	11 23       	and	r17, r17
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <process_action+0x5a0>
    1f2c:	ae cf       	rjmp	.-164    	; 0x1e8a <process_action+0x4fc>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    1f2e:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    1f30:	27 96       	adiw	r28, 0x07	; 7
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	bf 90       	pop	r11
    1f46:	af 90       	pop	r10
    1f48:	9f 90       	pop	r9
    1f4a:	8f 90       	pop	r8
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    1f4c:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    1f50:	4f 70       	andi	r20, 0x0F	; 15
    1f52:	c5 01       	movw	r24, r10
    1f54:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    1f58:	27 96       	adiw	r28, 0x07	; 7
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	bf 90       	pop	r11
    1f6e:	af 90       	pop	r10
    1f70:	9f 90       	pop	r9
    1f72:	8f 90       	pop	r8
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    1f74:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    1f78:	4f 70       	andi	r20, 0x0F	; 15
    1f7a:	c5 01       	movw	r24, r10
            break;
#endif
        default:
            break;
    }
}
    1f7c:	27 96       	adiw	r28, 0x07	; 7
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	1f 91       	pop	r17
    1f8e:	0f 91       	pop	r16
    1f90:	bf 90       	pop	r11
    1f92:	af 90       	pop	r10
    1f94:	9f 90       	pop	r9
    1f96:	8f 90       	pop	r8
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    1f98:	0c 94 b6 01 	jmp	0x36c	; 0x36c <action_function>
            break;
#endif
        default:
            break;
    }
}
    1f9c:	27 96       	adiw	r28, 0x07	; 7
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	cd bf       	out	0x3d, r28	; 61
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	1f 91       	pop	r17
    1fae:	0f 91       	pop	r16
    1fb0:	bf 90       	pop	r11
    1fb2:	af 90       	pop	r10
    1fb4:	9f 90       	pop	r9
    1fb6:	8f 90       	pop	r8
    1fb8:	08 95       	ret

00001fba <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    1fba:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <clear_weak_mods>
    clear_keys();
    1fbe:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <clear_keys>
    send_keyboard_report();
    1fc2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    mousekey_send();
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <host_system_send>
    host_consumer_send(0);
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <host_consumer_send>

00001fd6 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    1fd6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <clear_mods>
    clear_keyboard_but_mods();
    1fda:	0c 94 dd 0f 	jmp	0x1fba	; 0x1fba <clear_keyboard_but_mods>

00001fde <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    1fde:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <layer_switch_get_action>

    switch (action.kind.id) {
    1fe2:	29 2f       	mov	r18, r25
    1fe4:	22 95       	swap	r18
    1fe6:	2f 70       	andi	r18, 0x0F	; 15
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	2c 30       	cpi	r18, 0x0C	; 12
    1fec:	31 05       	cpc	r19, r1
    1fee:	4c f4       	brge	.+18     	; 0x2002 <is_tap_key+0x24>
    1ff0:	2a 30       	cpi	r18, 0x0A	; 10
    1ff2:	31 05       	cpc	r19, r1
    1ff4:	6c f4       	brge	.+26     	; 0x2010 <is_tap_key+0x32>
    1ff6:	22 50       	subi	r18, 0x02	; 2
    1ff8:	31 09       	sbc	r19, r1
    1ffa:	22 30       	cpi	r18, 0x02	; 2
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	90 f4       	brcc	.+36     	; 0x2024 <is_tap_key+0x46>
    2000:	07 c0       	rjmp	.+14     	; 0x2010 <is_tap_key+0x32>
    2002:	2c 30       	cpi	r18, 0x0C	; 12
    2004:	31 05       	cpc	r19, r1
    2006:	51 f0       	breq	.+20     	; 0x201c <is_tap_key+0x3e>
    2008:	2f 30       	cpi	r18, 0x0F	; 15
    200a:	31 05       	cpc	r19, r1
    200c:	59 f4       	brne	.+22     	; 0x2024 <is_tap_key+0x46>
    200e:	06 c0       	rjmp	.+12     	; 0x201c <is_tap_key+0x3e>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2010:	80 3e       	cpi	r24, 0xE0	; 224
    2012:	10 f0       	brcs	.+4      	; 0x2018 <is_tap_key+0x3a>
    2014:	80 3f       	cpi	r24, 0xF0	; 240
    2016:	31 f4       	brne	.+12     	; 0x2024 <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    201c:	93 fb       	bst	r25, 3
    201e:	88 27       	eor	r24, r24
    2020:	80 f9       	bld	r24, 0
    2022:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    2024:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2026:	08 95       	ret

00002028 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	00 d0       	rcall	.+0      	; 0x202e <debug_event+0x6>
    202e:	00 d0       	rcall	.+0      	; 0x2030 <debug_event+0x8>
    2030:	1f 92       	push	r1
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	df 91       	pop	r29
    2042:	cf 91       	pop	r28
    2044:	08 95       	ret

00002046 <debug_record>:

void debug_record(keyrecord_t record)
{
    2046:	cf 93       	push	r28
    2048:	df 93       	push	r29
    204a:	00 d0       	rcall	.+0      	; 0x204c <debug_record+0x6>
    204c:	00 d0       	rcall	.+0      	; 0x204e <debug_record+0x8>
    204e:	00 d0       	rcall	.+0      	; 0x2050 <debug_record+0xa>
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2054:	26 96       	adiw	r28, 0x06	; 6
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	08 95       	ret

00002066 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2066:	ef 92       	push	r14
    2068:	ff 92       	push	r15
    206a:	cf 93       	push	r28
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    206c:	90 91 a0 01 	lds	r25, 0x01A0
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2070:	c6 e0       	ldi	r28, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2072:	15 c0       	rjmp	.+42     	; 0x209e <debug_waiting_buffer+0x38>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2074:	e9 2e       	mov	r14, r25
    2076:	f1 2c       	mov	r15, r1
    2078:	ce 9d       	mul	r28, r14
    207a:	f0 01       	movw	r30, r0
    207c:	cf 9d       	mul	r28, r15
    207e:	f0 0d       	add	r31, r0
    2080:	11 24       	eor	r1, r1
    2082:	e0 59       	subi	r30, 0x90	; 144
    2084:	fe 4f       	sbci	r31, 0xFE	; 254
    2086:	40 81       	ld	r20, Z
    2088:	51 81       	ldd	r21, Z+1	; 0x01
    208a:	62 81       	ldd	r22, Z+2	; 0x02
    208c:	73 81       	ldd	r23, Z+3	; 0x03
    208e:	84 81       	ldd	r24, Z+4	; 0x04
    2090:	95 81       	ldd	r25, Z+5	; 0x05
    2092:	0e 94 23 10 	call	0x2046	; 0x2046 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2096:	c7 01       	movw	r24, r14
    2098:	01 96       	adiw	r24, 0x01	; 1
    209a:	98 2f       	mov	r25, r24
    209c:	97 70       	andi	r25, 0x07	; 7
    209e:	80 91 a1 01 	lds	r24, 0x01A1
    20a2:	98 13       	cpse	r25, r24
    20a4:	e7 cf       	rjmp	.-50     	; 0x2074 <debug_waiting_buffer+0xe>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    20a6:	cf 91       	pop	r28
    20a8:	ff 90       	pop	r15
    20aa:	ef 90       	pop	r14
    20ac:	08 95       	ret

000020ae <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    20ae:	40 91 6a 01 	lds	r20, 0x016A
    20b2:	50 91 6b 01 	lds	r21, 0x016B
    20b6:	60 91 6c 01 	lds	r22, 0x016C
    20ba:	70 91 6d 01 	lds	r23, 0x016D
    20be:	80 91 6e 01 	lds	r24, 0x016E
    20c2:	90 91 6f 01 	lds	r25, 0x016F
    20c6:	0c 94 23 10 	jmp	0x2046	; 0x2046 <debug_record>

000020ca <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    20d2:	80 91 6f 01 	lds	r24, 0x016F
    20d6:	82 95       	swap	r24
    20d8:	8f 70       	andi	r24, 0x0F	; 15
    20da:	09 f0       	breq	.+2      	; 0x20de <waiting_buffer_scan_tap+0x14>
    20dc:	69 c0       	rjmp	.+210    	; 0x21b0 <__stack+0xb1>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    20de:	80 91 6c 01 	lds	r24, 0x016C
    20e2:	88 23       	and	r24, r24
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <waiting_buffer_scan_tap+0x1e>
    20e6:	64 c0       	rjmp	.+200    	; 0x21b0 <__stack+0xb1>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    20e8:	a0 91 a0 01 	lds	r26, 0x01A0
    20ec:	d0 91 a1 01 	lds	r29, 0x01A1
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    20f0:	b0 91 6a 01 	lds	r27, 0x016A
    20f4:	c0 91 6b 01 	lds	r28, 0x016B
    20f8:	80 91 6d 01 	lds	r24, 0x016D
    20fc:	90 91 6e 01 	lds	r25, 0x016E
    2100:	21 e0       	ldi	r18, 0x01	; 1
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	bf 3f       	cpi	r27, 0xFF	; 255
    2106:	11 f0       	breq	.+4      	; 0x210c <__stack+0xd>
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	12 2f       	mov	r17, r18
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    210e:	bc 01       	movw	r22, r24
    2110:	60 95       	com	r22
    2112:	70 95       	com	r23
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2114:	06 e0       	ldi	r16, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2116:	4a c0       	rjmp	.+148    	; 0x21ac <__stack+0xad>
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	21 f0       	breq	.+8      	; 0x2124 <__stack+0x25>
    211c:	cf 3f       	cpi	r28, 0xFF	; 255
    211e:	29 f4       	brne	.+10     	; 0x212a <__stack+0x2b>
    2120:	21 2f       	mov	r18, r17
    2122:	05 c0       	rjmp	.+10     	; 0x212e <__stack+0x2f>
    2124:	21 e0       	ldi	r18, 0x01	; 1
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	02 c0       	rjmp	.+4      	; 0x212e <__stack+0x2f>
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    212e:	20 fd       	sbrc	r18, 0
    2130:	3b c0       	rjmp	.+118    	; 0x21a8 <__stack+0xa9>
    2132:	4a 2f       	mov	r20, r26
    2134:	50 e0       	ldi	r21, 0x00	; 0
    2136:	04 9f       	mul	r16, r20
    2138:	f0 01       	movw	r30, r0
    213a:	05 9f       	mul	r16, r21
    213c:	f0 0d       	add	r31, r0
    213e:	11 24       	eor	r1, r1
    2140:	e0 59       	subi	r30, 0x90	; 144
    2142:	fe 4f       	sbci	r31, 0xFE	; 254
    2144:	21 81       	ldd	r18, Z+1	; 0x01
    2146:	c2 13       	cpse	r28, r18
    2148:	2f c0       	rjmp	.+94     	; 0x21a8 <__stack+0xa9>
    214a:	20 81       	ld	r18, Z
    214c:	b2 13       	cpse	r27, r18
    214e:	2c c0       	rjmp	.+88     	; 0x21a8 <__stack+0xa9>
    2150:	22 81       	ldd	r18, Z+2	; 0x02
    2152:	21 11       	cpse	r18, r1
    2154:	29 c0       	rjmp	.+82     	; 0x21a8 <__stack+0xa9>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2156:	23 81       	ldd	r18, Z+3	; 0x03
    2158:	34 81       	ldd	r19, Z+4	; 0x04
    215a:	28 17       	cp	r18, r24
    215c:	39 07       	cpc	r19, r25
    215e:	18 f0       	brcs	.+6      	; 0x2166 <__stack+0x67>
    2160:	28 1b       	sub	r18, r24
    2162:	39 0b       	sbc	r19, r25
    2164:	02 c0       	rjmp	.+4      	; 0x216a <__stack+0x6b>
    2166:	26 0f       	add	r18, r22
    2168:	37 1f       	adc	r19, r23
    216a:	28 3c       	cpi	r18, 0xC8	; 200
    216c:	31 05       	cpc	r19, r1
    216e:	e0 f4       	brcc	.+56     	; 0x21a8 <__stack+0xa9>
            tapping_key.tap.count = 1;
    2170:	80 91 6f 01 	lds	r24, 0x016F
    2174:	8f 70       	andi	r24, 0x0F	; 15
    2176:	80 61       	ori	r24, 0x10	; 16
    2178:	80 93 6f 01 	sts	0x016F, r24
            waiting_buffer[i].tap.count = 1;
    217c:	86 e0       	ldi	r24, 0x06	; 6
    217e:	84 9f       	mul	r24, r20
    2180:	f0 01       	movw	r30, r0
    2182:	85 9f       	mul	r24, r21
    2184:	f0 0d       	add	r31, r0
    2186:	11 24       	eor	r1, r1
    2188:	eb 58       	subi	r30, 0x8B	; 139
    218a:	fe 4f       	sbci	r31, 0xFE	; 254
    218c:	80 81       	ld	r24, Z
    218e:	8f 70       	andi	r24, 0x0F	; 15
    2190:	80 61       	ori	r24, 0x10	; 16
    2192:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2194:	8a e6       	ldi	r24, 0x6A	; 106
    2196:	91 e0       	ldi	r25, 0x01	; 1
    2198:	0e 94 c7 0c 	call	0x198e	; 0x198e <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    21a4:	0c 94 33 10 	jmp	0x2066	; 0x2066 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    21a8:	af 5f       	subi	r26, 0xFF	; 255
    21aa:	a7 70       	andi	r26, 0x07	; 7
    21ac:	ad 13       	cpse	r26, r29
    21ae:	b4 cf       	rjmp	.-152    	; 0x2118 <__stack+0x19>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	1f 91       	pop	r17
    21b6:	0f 91       	pop	r16
    21b8:	08 95       	ret

000021ba <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    21ba:	cf 92       	push	r12
    21bc:	df 92       	push	r13
    21be:	ef 92       	push	r14
    21c0:	ff 92       	push	r15
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	62 97       	sbiw	r28, 0x12	; 18
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	7c 01       	movw	r14, r24
    keyevent_t event = keyp->event;
    21d8:	85 e0       	ldi	r24, 0x05	; 5
    21da:	f7 01       	movw	r30, r14
    21dc:	de 01       	movw	r26, r28
    21de:	1d 96       	adiw	r26, 0x0d	; 13
    21e0:	01 90       	ld	r0, Z+
    21e2:	0d 92       	st	X+, r0
    21e4:	8a 95       	dec	r24
    21e6:	e1 f7       	brne	.-8      	; 0x21e0 <process_tapping+0x26>
    21e8:	d7 01       	movw	r26, r14
    21ea:	4c 91       	ld	r20, X
    21ec:	11 96       	adiw	r26, 0x01	; 1
    21ee:	5c 91       	ld	r21, X
    21f0:	11 97       	sbiw	r26, 0x01	; 1
    21f2:	12 96       	adiw	r26, 0x02	; 2
    21f4:	6c 91       	ld	r22, X
    21f6:	12 97       	sbiw	r26, 0x02	; 2
    21f8:	13 96       	adiw	r26, 0x03	; 3
    21fa:	cd 90       	ld	r12, X+
    21fc:	dc 90       	ld	r13, X
    21fe:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2200:	70 91 6a 01 	lds	r23, 0x016A
    2204:	e0 91 6b 01 	lds	r30, 0x016B
    2208:	80 91 6d 01 	lds	r24, 0x016D
    220c:	90 91 6e 01 	lds	r25, 0x016E
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	39 f0       	breq	.+14     	; 0x2222 <process_tapping+0x68>
    2214:	ef 3f       	cpi	r30, 0xFF	; 255
    2216:	41 f4       	brne	.+16     	; 0x2228 <process_tapping+0x6e>
    2218:	21 e0       	ldi	r18, 0x01	; 1
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	7f 3f       	cpi	r23, 0xFF	; 255
    221e:	31 f0       	breq	.+12     	; 0x222c <process_tapping+0x72>
    2220:	03 c0       	rjmp	.+6      	; 0x2228 <process_tapping+0x6e>
    2222:	21 e0       	ldi	r18, 0x01	; 1
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	02 c0       	rjmp	.+4      	; 0x222c <process_tapping+0x72>
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	20 fd       	sbrc	r18, 0
    222e:	5c c1       	rjmp	.+696    	; 0x24e8 <process_tapping+0x32e>
    2230:	20 91 6c 01 	lds	r18, 0x016C
    2234:	22 23       	and	r18, r18
    2236:	09 f4       	brne	.+2      	; 0x223a <process_tapping+0x80>
    2238:	f1 c0       	rjmp	.+482    	; 0x241c <process_tapping+0x262>
        if (WITHIN_TAPPING_TERM(event)) {
    223a:	c8 16       	cp	r12, r24
    223c:	d9 06       	cpc	r13, r25
    223e:	28 f0       	brcs	.+10     	; 0x224a <process_tapping+0x90>
    2240:	96 01       	movw	r18, r12
    2242:	28 1b       	sub	r18, r24
    2244:	39 0b       	sbc	r19, r25
    2246:	c9 01       	movw	r24, r18
    2248:	04 c0       	rjmp	.+8      	; 0x2252 <process_tapping+0x98>
    224a:	80 95       	com	r24
    224c:	90 95       	com	r25
    224e:	8c 0d       	add	r24, r12
    2250:	9d 1d       	adc	r25, r13
    2252:	88 3c       	cpi	r24, 0xC8	; 200
    2254:	91 05       	cpc	r25, r1
    2256:	08 f0       	brcs	.+2      	; 0x225a <process_tapping+0xa0>
    2258:	98 c0       	rjmp	.+304    	; 0x238a <process_tapping+0x1d0>
            if (tapping_key.tap.count == 0) {
    225a:	80 91 6f 01 	lds	r24, 0x016F
    225e:	98 2f       	mov	r25, r24
    2260:	90 7f       	andi	r25, 0xF0	; 240
    2262:	09 f0       	breq	.+2      	; 0x2266 <process_tapping+0xac>
    2264:	64 c0       	rjmp	.+200    	; 0x232e <process_tapping+0x174>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2266:	e5 13       	cpse	r30, r21
    2268:	14 c0       	rjmp	.+40     	; 0x2292 <process_tapping+0xd8>
    226a:	74 13       	cpse	r23, r20
    226c:	12 c0       	rjmp	.+36     	; 0x2292 <process_tapping+0xd8>
    226e:	61 11       	cpse	r22, r1
    2270:	10 c0       	rjmp	.+32     	; 0x2292 <process_tapping+0xd8>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2272:	8f 70       	andi	r24, 0x0F	; 15
    2274:	80 61       	ori	r24, 0x10	; 16
    2276:	80 93 6f 01 	sts	0x016F, r24
                    debug_tapping_key();
    227a:	0e 94 57 10 	call	0x20ae	; 0x20ae <debug_tapping_key>
                    process_action(&tapping_key);
    227e:	8a e6       	ldi	r24, 0x6A	; 106
    2280:	91 e0       	ldi	r25, 0x01	; 1
    2282:	0e 94 c7 0c 	call	0x198e	; 0x198e <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2286:	80 91 6f 01 	lds	r24, 0x016F
    228a:	d7 01       	movw	r26, r14
    228c:	15 96       	adiw	r26, 0x05	; 5
    228e:	8c 93       	st	X, r24
    2290:	43 c1       	rjmp	.+646    	; 0x2518 <process_tapping+0x35e>
    2292:	cd 28       	or	r12, r13
    2294:	39 f0       	breq	.+14     	; 0x22a4 <process_tapping+0xea>
    2296:	5f 3f       	cpi	r21, 0xFF	; 255
    2298:	41 f4       	brne	.+16     	; 0x22aa <process_tapping+0xf0>
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	4f 3f       	cpi	r20, 0xFF	; 255
    22a0:	31 f0       	breq	.+12     	; 0x22ae <process_tapping+0xf4>
    22a2:	03 c0       	rjmp	.+6      	; 0x22aa <process_tapping+0xf0>
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <process_tapping+0xf4>
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    22ae:	80 fd       	sbrc	r24, 0
    22b0:	03 c0       	rjmp	.+6      	; 0x22b8 <process_tapping+0xfe>
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	86 27       	eor	r24, r22
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <process_tapping+0x102>
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    22bc:	80 ff       	sbrs	r24, 0
    22be:	2e c0       	rjmp	.+92     	; 0x231c <process_tapping+0x162>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    22c0:	80 91 a0 01 	lds	r24, 0x01A0
    22c4:	20 91 a1 01 	lds	r18, 0x01A1
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    22c8:	36 e0       	ldi	r19, 0x06	; 6
    22ca:	13 c0       	rjmp	.+38     	; 0x22f2 <process_tapping+0x138>
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	38 9f       	mul	r19, r24
    22d0:	f0 01       	movw	r30, r0
    22d2:	39 9f       	mul	r19, r25
    22d4:	f0 0d       	add	r31, r0
    22d6:	11 24       	eor	r1, r1
    22d8:	e0 59       	subi	r30, 0x90	; 144
    22da:	fe 4f       	sbci	r31, 0xFE	; 254
    22dc:	71 81       	ldd	r23, Z+1	; 0x01
    22de:	57 13       	cpse	r21, r23
    22e0:	06 c0       	rjmp	.+12     	; 0x22ee <process_tapping+0x134>
    22e2:	70 81       	ld	r23, Z
    22e4:	47 13       	cpse	r20, r23
    22e6:	03 c0       	rjmp	.+6      	; 0x22ee <process_tapping+0x134>
    22e8:	72 81       	ldd	r23, Z+2	; 0x02
    22ea:	67 13       	cpse	r22, r23
    22ec:	17 c0       	rjmp	.+46     	; 0x231c <process_tapping+0x162>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    22ee:	01 96       	adiw	r24, 0x01	; 1
    22f0:	87 70       	andi	r24, 0x07	; 7
    22f2:	82 13       	cpse	r24, r18
    22f4:	eb cf       	rjmp	.-42     	; 0x22cc <process_tapping+0x112>
    22f6:	12 c1       	rjmp	.+548    	; 0x251c <process_tapping+0x362>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    22f8:	9f 70       	andi	r25, 0x0F	; 15
    22fa:	59 f0       	breq	.+22     	; 0x2312 <process_tapping+0x158>
    22fc:	88 23       	and	r24, r24
    22fe:	09 f4       	brne	.+2      	; 0x2302 <process_tapping+0x148>
    2300:	0b c1       	rjmp	.+534    	; 0x2518 <process_tapping+0x35e>
    2302:	07 c0       	rjmp	.+14     	; 0x2312 <process_tapping+0x158>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2304:	9f 70       	andi	r25, 0x0F	; 15
    2306:	29 f0       	breq	.+10     	; 0x2312 <process_tapping+0x158>
    2308:	f7 01       	movw	r30, r14
    230a:	95 81       	ldd	r25, Z+5	; 0x05
    230c:	90 7f       	andi	r25, 0xF0	; 240
    230e:	09 f4       	brne	.+2      	; 0x2312 <process_tapping+0x158>
    2310:	03 c1       	rjmp	.+518    	; 0x2518 <process_tapping+0x35e>
                            if (IS_MOD(action.key.code)) return false;
    2312:	80 5e       	subi	r24, 0xE0	; 224
    2314:	88 30       	cpi	r24, 0x08	; 8
    2316:	08 f4       	brcc	.+2      	; 0x231a <process_tapping+0x160>
    2318:	ff c0       	rjmp	.+510    	; 0x2518 <process_tapping+0x35e>
    231a:	d2 c0       	rjmp	.+420    	; 0x24c0 <process_tapping+0x306>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    231c:	66 23       	and	r22, r22
    231e:	09 f4       	brne	.+2      	; 0x2322 <process_tapping+0x168>
    2320:	fb c0       	rjmp	.+502    	; 0x2518 <process_tapping+0x35e>
                        tapping_key.tap.interrupted = true;
    2322:	80 91 6f 01 	lds	r24, 0x016F
    2326:	81 60       	ori	r24, 0x01	; 1
    2328:	80 93 6f 01 	sts	0x016F, r24
    232c:	f5 c0       	rjmp	.+490    	; 0x2518 <process_tapping+0x35e>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    232e:	e5 13       	cpse	r30, r21
    2330:	08 c0       	rjmp	.+16     	; 0x2342 <process_tapping+0x188>
    2332:	74 13       	cpse	r23, r20
    2334:	06 c0       	rjmp	.+12     	; 0x2342 <process_tapping+0x188>
    2336:	61 11       	cpse	r22, r1
    2338:	04 c0       	rjmp	.+8      	; 0x2342 <process_tapping+0x188>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    233a:	d7 01       	movw	r26, r14
    233c:	15 96       	adiw	r26, 0x05	; 5
    233e:	8c 93       	st	X, r24
    2340:	9d c0       	rjmp	.+314    	; 0x247c <process_tapping+0x2c2>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2342:	4d 87       	std	Y+13, r20	; 0x0d
    2344:	5e 87       	std	Y+14, r21	; 0x0e
    2346:	8d 85       	ldd	r24, Y+13	; 0x0d
    2348:	9e 85       	ldd	r25, Y+14	; 0x0e
    234a:	6a 8b       	std	Y+18, r22	; 0x12
    234c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <is_tap_key>
    2350:	6a 89       	ldd	r22, Y+18	; 0x12
    2352:	88 23       	and	r24, r24
    2354:	09 f4       	brne	.+2      	; 0x2358 <process_tapping+0x19e>
    2356:	b4 c0       	rjmp	.+360    	; 0x24c0 <process_tapping+0x306>
    2358:	66 23       	and	r22, r22
    235a:	09 f4       	brne	.+2      	; 0x235e <process_tapping+0x1a4>
    235c:	b1 c0       	rjmp	.+354    	; 0x24c0 <process_tapping+0x306>
                    if (tapping_key.tap.count > 1) {
    235e:	20 91 6f 01 	lds	r18, 0x016F
    2362:	82 2f       	mov	r24, r18
    2364:	82 95       	swap	r24
    2366:	8f 70       	andi	r24, 0x0F	; 15
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	02 97       	sbiw	r24, 0x02	; 2
    236c:	0c f4       	brge	.+2      	; 0x2370 <process_tapping+0x1b6>
    236e:	c6 c0       	rjmp	.+396    	; 0x24fc <process_tapping+0x342>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2370:	80 91 6a 01 	lds	r24, 0x016A
    2374:	90 91 6b 01 	lds	r25, 0x016B
    2378:	98 87       	std	Y+8, r25	; 0x08
    237a:	8f 83       	std	Y+7, r24	; 0x07
    237c:	19 86       	std	Y+9, r1	; 0x09
    237e:	db 86       	std	Y+11, r13	; 0x0b
    2380:	ca 86       	std	Y+10, r12	; 0x0a
    2382:	2c 87       	std	Y+12, r18	; 0x0c
    2384:	ce 01       	movw	r24, r28
    2386:	07 96       	adiw	r24, 0x07	; 7
    2388:	46 c0       	rjmp	.+140    	; 0x2416 <process_tapping+0x25c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    238a:	80 91 6f 01 	lds	r24, 0x016F
    238e:	98 2f       	mov	r25, r24
    2390:	90 7f       	andi	r25, 0xF0	; 240
    2392:	59 f4       	brne	.+22     	; 0x23aa <process_tapping+0x1f0>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2394:	7c 2d       	mov	r23, r12
    2396:	d9 8a       	std	Y+17, r13	; 0x11
    2398:	c8 8a       	std	Y+16, r12	; 0x10
    239a:	89 89       	ldd	r24, Y+17	; 0x11
    239c:	0e 94 14 10 	call	0x2028	; 0x2028 <debug_event>
                process_action(&tapping_key);
    23a0:	8a e6       	ldi	r24, 0x6A	; 106
    23a2:	91 e0       	ldi	r25, 0x01	; 1
    23a4:	0e 94 c7 0c 	call	0x198e	; 0x198e <process_action>
    23a8:	95 c0       	rjmp	.+298    	; 0x24d4 <process_tapping+0x31a>
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    23aa:	e5 13       	cpse	r30, r21
    23ac:	11 c0       	rjmp	.+34     	; 0x23d0 <process_tapping+0x216>
    23ae:	74 13       	cpse	r23, r20
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <process_tapping+0x216>
    23b2:	61 11       	cpse	r22, r1
    23b4:	0d c0       	rjmp	.+26     	; 0x23d0 <process_tapping+0x216>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    23b6:	f7 01       	movw	r30, r14
    23b8:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    23ba:	c7 01       	movw	r24, r14
    23bc:	0e 94 c7 0c 	call	0x198e	; 0x198e <process_action>
                    tapping_key = (keyrecord_t){};
    23c0:	ea e6       	ldi	r30, 0x6A	; 106
    23c2:	f1 e0       	ldi	r31, 0x01	; 1
    23c4:	86 e0       	ldi	r24, 0x06	; 6
    23c6:	df 01       	movw	r26, r30
    23c8:	1d 92       	st	X+, r1
    23ca:	8a 95       	dec	r24
    23cc:	e9 f7       	brne	.-6      	; 0x23c8 <process_tapping+0x20e>
    23ce:	a2 c0       	rjmp	.+324    	; 0x2514 <process_tapping+0x35a>
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    23d0:	4d 87       	std	Y+13, r20	; 0x0d
    23d2:	5e 87       	std	Y+14, r21	; 0x0e
    23d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d8:	6a 8b       	std	Y+18, r22	; 0x12
    23da:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <is_tap_key>
    23de:	6a 89       	ldd	r22, Y+18	; 0x12
    23e0:	88 23       	and	r24, r24
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <process_tapping+0x22c>
    23e4:	6d c0       	rjmp	.+218    	; 0x24c0 <process_tapping+0x306>
    23e6:	66 23       	and	r22, r22
    23e8:	09 f4       	brne	.+2      	; 0x23ec <process_tapping+0x232>
    23ea:	6a c0       	rjmp	.+212    	; 0x24c0 <process_tapping+0x306>
                    if (tapping_key.tap.count > 1) {
    23ec:	20 91 6f 01 	lds	r18, 0x016F
    23f0:	82 2f       	mov	r24, r18
    23f2:	82 95       	swap	r24
    23f4:	8f 70       	andi	r24, 0x0F	; 15
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	02 97       	sbiw	r24, 0x02	; 2
    23fa:	0c f4       	brge	.+2      	; 0x23fe <process_tapping+0x244>
    23fc:	7f c0       	rjmp	.+254    	; 0x24fc <process_tapping+0x342>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    23fe:	80 91 6a 01 	lds	r24, 0x016A
    2402:	90 91 6b 01 	lds	r25, 0x016B
    2406:	9a 83       	std	Y+2, r25	; 0x02
    2408:	89 83       	std	Y+1, r24	; 0x01
    240a:	1b 82       	std	Y+3, r1	; 0x03
    240c:	dd 82       	std	Y+5, r13	; 0x05
    240e:	cc 82       	std	Y+4, r12	; 0x04
    2410:	2e 83       	std	Y+6, r18	; 0x06
    2412:	ce 01       	movw	r24, r28
    2414:	01 96       	adiw	r24, 0x01	; 1
    2416:	0e 94 c7 0c 	call	0x198e	; 0x198e <process_action>
    241a:	70 c0       	rjmp	.+224    	; 0x24fc <process_tapping+0x342>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    241c:	c8 16       	cp	r12, r24
    241e:	d9 06       	cpc	r13, r25
    2420:	28 f0       	brcs	.+10     	; 0x242c <process_tapping+0x272>
    2422:	96 01       	movw	r18, r12
    2424:	28 1b       	sub	r18, r24
    2426:	39 0b       	sbc	r19, r25
    2428:	c9 01       	movw	r24, r18
    242a:	04 c0       	rjmp	.+8      	; 0x2434 <process_tapping+0x27a>
    242c:	80 95       	com	r24
    242e:	90 95       	com	r25
    2430:	8c 0d       	add	r24, r12
    2432:	9d 1d       	adc	r25, r13
    2434:	88 3c       	cpi	r24, 0xC8	; 200
    2436:	91 05       	cpc	r25, r1
    2438:	08 f0       	brcs	.+2      	; 0x243c <process_tapping+0x282>
    243a:	46 c0       	rjmp	.+140    	; 0x24c8 <process_tapping+0x30e>
            if (event.pressed) {
    243c:	66 23       	and	r22, r22
    243e:	09 f4       	brne	.+2      	; 0x2442 <process_tapping+0x288>
    2440:	3f c0       	rjmp	.+126    	; 0x24c0 <process_tapping+0x306>
                if (IS_TAPPING_KEY(event.key)) {
    2442:	e5 13       	cpse	r30, r21
    2444:	30 c0       	rjmp	.+96     	; 0x24a6 <process_tapping+0x2ec>
    2446:	74 13       	cpse	r23, r20
    2448:	2e c0       	rjmp	.+92     	; 0x24a6 <process_tapping+0x2ec>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    244a:	20 91 6f 01 	lds	r18, 0x016F
    244e:	20 fd       	sbrc	r18, 0
    2450:	21 c0       	rjmp	.+66     	; 0x2494 <process_tapping+0x2da>
    2452:	32 2f       	mov	r19, r18
    2454:	32 95       	swap	r19
    2456:	3f 70       	andi	r19, 0x0F	; 15
    2458:	83 2f       	mov	r24, r19
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	d1 f0       	breq	.+52     	; 0x2494 <process_tapping+0x2da>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    2460:	d7 01       	movw	r26, r14
    2462:	15 96       	adiw	r26, 0x05	; 5
    2464:	2c 93       	st	X, r18
    2466:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    2468:	0f 97       	sbiw	r24, 0x0f	; 15
    246a:	41 f0       	breq	.+16     	; 0x247c <process_tapping+0x2c2>
    246c:	83 2f       	mov	r24, r19
    246e:	8f 5f       	subi	r24, 0xFF	; 255
    2470:	82 95       	swap	r24
    2472:	80 7f       	andi	r24, 0xF0	; 240
    2474:	2f 70       	andi	r18, 0x0F	; 15
    2476:	28 2b       	or	r18, r24
    2478:	15 96       	adiw	r26, 0x05	; 5
    247a:	2c 93       	st	X, r18
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    247c:	c7 01       	movw	r24, r14
    247e:	0e 94 c7 0c 	call	0x198e	; 0x198e <process_action>
                        tapping_key = *keyp;
    2482:	86 e0       	ldi	r24, 0x06	; 6
    2484:	f7 01       	movw	r30, r14
    2486:	aa e6       	ldi	r26, 0x6A	; 106
    2488:	b1 e0       	ldi	r27, 0x01	; 1
    248a:	01 90       	ld	r0, Z+
    248c:	0d 92       	st	X+, r0
    248e:	8a 95       	dec	r24
    2490:	e1 f7       	brne	.-8      	; 0x248a <process_tapping+0x2d0>
    2492:	3e c0       	rjmp	.+124    	; 0x2510 <process_tapping+0x356>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    2494:	86 e0       	ldi	r24, 0x06	; 6
    2496:	f7 01       	movw	r30, r14
    2498:	aa e6       	ldi	r26, 0x6A	; 106
    249a:	b1 e0       	ldi	r27, 0x01	; 1
    249c:	01 90       	ld	r0, Z+
    249e:	0d 92       	st	X+, r0
    24a0:	8a 95       	dec	r24
    24a2:	e1 f7       	brne	.-8      	; 0x249c <process_tapping+0x2e2>
    24a4:	37 c0       	rjmp	.+110    	; 0x2514 <process_tapping+0x35a>
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
    24a6:	4d 87       	std	Y+13, r20	; 0x0d
    24a8:	5e 87       	std	Y+14, r21	; 0x0e
    24aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ae:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <is_tap_key>
    24b2:	81 11       	cpse	r24, r1
    24b4:	23 c0       	rjmp	.+70     	; 0x24fc <process_tapping+0x342>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    24b6:	80 91 6f 01 	lds	r24, 0x016F
    24ba:	81 60       	ori	r24, 0x01	; 1
    24bc:	80 93 6f 01 	sts	0x016F, r24
                    process_action(keyp);
    24c0:	c7 01       	movw	r24, r14
    24c2:	0e 94 c7 0c 	call	0x198e	; 0x198e <process_action>
    24c6:	26 c0       	rjmp	.+76     	; 0x2514 <process_tapping+0x35a>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    24c8:	7c 2d       	mov	r23, r12
    24ca:	d9 8a       	std	Y+17, r13	; 0x11
    24cc:	c8 8a       	std	Y+16, r12	; 0x10
    24ce:	89 89       	ldd	r24, Y+17	; 0x11
    24d0:	0e 94 14 10 	call	0x2028	; 0x2028 <debug_event>
            tapping_key = (keyrecord_t){};
    24d4:	ea e6       	ldi	r30, 0x6A	; 106
    24d6:	f1 e0       	ldi	r31, 0x01	; 1
    24d8:	86 e0       	ldi	r24, 0x06	; 6
    24da:	df 01       	movw	r26, r30
    24dc:	1d 92       	st	X+, r1
    24de:	8a 95       	dec	r24
    24e0:	e9 f7       	brne	.-6      	; 0x24dc <process_tapping+0x322>
            debug_tapping_key();
    24e2:	0e 94 57 10 	call	0x20ae	; 0x20ae <debug_tapping_key>
    24e6:	18 c0       	rjmp	.+48     	; 0x2518 <process_tapping+0x35e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    24e8:	66 23       	and	r22, r22
    24ea:	51 f3       	breq	.-44     	; 0x24c0 <process_tapping+0x306>
    24ec:	4d 87       	std	Y+13, r20	; 0x0d
    24ee:	5e 87       	std	Y+14, r21	; 0x0e
    24f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f4:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <is_tap_key>
    24f8:	88 23       	and	r24, r24
    24fa:	11 f3       	breq	.-60     	; 0x24c0 <process_tapping+0x306>
            debug("Tapping: Start(Press tap key).\n");
            tapping_key = *keyp;
    24fc:	86 e0       	ldi	r24, 0x06	; 6
    24fe:	f7 01       	movw	r30, r14
    2500:	aa e6       	ldi	r26, 0x6A	; 106
    2502:	b1 e0       	ldi	r27, 0x01	; 1
    2504:	01 90       	ld	r0, Z+
    2506:	0d 92       	st	X+, r0
    2508:	8a 95       	dec	r24
    250a:	e1 f7       	brne	.-8      	; 0x2504 <process_tapping+0x34a>
            waiting_buffer_scan_tap();
    250c:	0e 94 65 10 	call	0x20ca	; 0x20ca <waiting_buffer_scan_tap>
            debug_tapping_key();
    2510:	0e 94 57 10 	call	0x20ae	; 0x20ae <debug_tapping_key>
            return true;
    2514:	81 e0       	ldi	r24, 0x01	; 1
    2516:	14 c0       	rjmp	.+40     	; 0x2540 <process_tapping+0x386>
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
                        tapping_key.tap.interrupted = true;
                    }
                    // enqueue 
                    return false;
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	12 c0       	rjmp	.+36     	; 0x2540 <process_tapping+0x386>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    251c:	4d 87       	std	Y+13, r20	; 0x0d
    251e:	5e 87       	std	Y+14, r21	; 0x0e
    2520:	8d 85       	ldd	r24, Y+13	; 0x0d
    2522:	9e 85       	ldd	r25, Y+14	; 0x0e
    2524:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <layer_switch_get_action>
                    switch (action.kind.id) {
    2528:	29 2f       	mov	r18, r25
    252a:	22 95       	swap	r18
    252c:	2f 70       	andi	r18, 0x0F	; 15
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	22 30       	cpi	r18, 0x02	; 2
    2532:	31 05       	cpc	r19, r1
    2534:	0c f4       	brge	.+2      	; 0x2538 <process_tapping+0x37e>
    2536:	e0 ce       	rjmp	.-576    	; 0x22f8 <process_tapping+0x13e>
    2538:	24 30       	cpi	r18, 0x04	; 4
    253a:	31 05       	cpc	r19, r1
    253c:	0c f6       	brge	.-126    	; 0x24c0 <process_tapping+0x306>
    253e:	e2 ce       	rjmp	.-572    	; 0x2304 <process_tapping+0x14a>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    2540:	62 96       	adiw	r28, 0x12	; 18
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	f8 94       	cli
    2546:	de bf       	out	0x3e, r29	; 62
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	cd bf       	out	0x3d, r28	; 61
    254c:	df 91       	pop	r29
    254e:	cf 91       	pop	r28
    2550:	ff 90       	pop	r15
    2552:	ef 90       	pop	r14
    2554:	df 90       	pop	r13
    2556:	cf 90       	pop	r12
    2558:	08 95       	ret

0000255a <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    255a:	1f 93       	push	r17
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	2c 97       	sbiw	r28, 0x0c	; 12
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	de bf       	out	0x3e, r29	; 62
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	cd bf       	out	0x3d, r28	; 61
    2570:	4f 83       	std	Y+7, r20	; 0x07
    2572:	58 87       	std	Y+8, r21	; 0x08
    2574:	69 87       	std	Y+9, r22	; 0x09
    2576:	7a 87       	std	Y+10, r23	; 0x0a
    2578:	8b 87       	std	Y+11, r24	; 0x0b
    257a:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    257c:	ce 01       	movw	r24, r28
    257e:	07 96       	adiw	r24, 0x07	; 7
    2580:	0e 94 dd 10 	call	0x21ba	; 0x21ba <process_tapping>
    2584:	88 23       	and	r24, r24
    2586:	d9 f0       	breq	.+54     	; 0x25be <action_tapping_process+0x64>
        if (!IS_NOEVENT(record.event)) {
    2588:	2f 81       	ldd	r18, Y+7	; 0x07
    258a:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    258c:	8a 85       	ldd	r24, Y+10	; 0x0a
    258e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2590:	89 2b       	or	r24, r25
    2592:	39 f0       	breq	.+14     	; 0x25a2 <action_tapping_process+0x48>
    2594:	3f 3f       	cpi	r19, 0xFF	; 255
    2596:	19 f0       	breq	.+6      	; 0x259e <action_tapping_process+0x44>
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	04 c0       	rjmp	.+8      	; 0x25a6 <action_tapping_process+0x4c>
    259e:	2f 3f       	cpi	r18, 0xFF	; 255
    25a0:	d9 f7       	brne	.-10     	; 0x2598 <action_tapping_process+0x3e>
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	89 2b       	or	r24, r25
    25a8:	09 f0       	breq	.+2      	; 0x25ac <action_tapping_process+0x52>
    25aa:	6d c0       	rjmp	.+218    	; 0x2686 <action_tapping_process+0x12c>
            debug("processed: "); debug_record(record); debug("\n");
    25ac:	4f 81       	ldd	r20, Y+7	; 0x07
    25ae:	58 85       	ldd	r21, Y+8	; 0x08
    25b0:	69 85       	ldd	r22, Y+9	; 0x09
    25b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    25b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    25b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    25b8:	0e 94 23 10 	call	0x2046	; 0x2046 <debug_record>
    25bc:	64 c0       	rjmp	.+200    	; 0x2686 <action_tapping_process+0x12c>
    25be:	86 e0       	ldi	r24, 0x06	; 6
    25c0:	fe 01       	movw	r30, r28
    25c2:	37 96       	adiw	r30, 0x07	; 7
    25c4:	de 01       	movw	r26, r28
    25c6:	11 96       	adiw	r26, 0x01	; 1
    25c8:	01 90       	ld	r0, Z+
    25ca:	0d 92       	st	X+, r0
    25cc:	8a 95       	dec	r24
    25ce:	e1 f7       	brne	.-8      	; 0x25c8 <action_tapping_process+0x6e>
    25d0:	ff 81       	ldd	r31, Y+7	; 0x07
    25d2:	e8 85       	ldd	r30, Y+8	; 0x08
    25d4:	4a 85       	ldd	r20, Y+10	; 0x0a
    25d6:	5b 85       	ldd	r21, Y+11	; 0x0b
    25d8:	41 15       	cp	r20, r1
    25da:	51 05       	cpc	r21, r1
    25dc:	39 f0       	breq	.+14     	; 0x25ec <action_tapping_process+0x92>
    25de:	ef 3f       	cpi	r30, 0xFF	; 255
    25e0:	41 f4       	brne	.+16     	; 0x25f2 <action_tapping_process+0x98>
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	ff 3f       	cpi	r31, 0xFF	; 255
    25e8:	31 f0       	breq	.+12     	; 0x25f6 <action_tapping_process+0x9c>
    25ea:	03 c0       	rjmp	.+6      	; 0x25f2 <action_tapping_process+0x98>
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <action_tapping_process+0x9c>
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    25f6:	80 fd       	sbrc	r24, 0
    25f8:	46 c0       	rjmp	.+140    	; 0x2686 <action_tapping_process+0x12c>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    25fa:	20 91 a1 01 	lds	r18, 0x01A1
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	c9 01       	movw	r24, r18
    2602:	01 96       	adiw	r24, 0x01	; 1
    2604:	87 70       	andi	r24, 0x07	; 7
    2606:	99 27       	eor	r25, r25
    2608:	60 91 a0 01 	lds	r22, 0x01A0
    260c:	70 e0       	ldi	r23, 0x00	; 0
    260e:	86 17       	cp	r24, r22
    2610:	97 07       	cpc	r25, r23
    2612:	09 f4       	brne	.+2      	; 0x2616 <action_tapping_process+0xbc>
    2614:	40 c0       	rjmp	.+128    	; 0x2696 <action_tapping_process+0x13c>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    2616:	f9 83       	std	Y+1, r31	; 0x01
    2618:	ea 83       	std	Y+2, r30	; 0x02
    261a:	5d 83       	std	Y+5, r21	; 0x05
    261c:	4c 83       	std	Y+4, r20	; 0x04
    261e:	96 e0       	ldi	r25, 0x06	; 6
    2620:	92 9f       	mul	r25, r18
    2622:	d0 01       	movw	r26, r0
    2624:	93 9f       	mul	r25, r19
    2626:	b0 0d       	add	r27, r0
    2628:	11 24       	eor	r1, r1
    262a:	a0 59       	subi	r26, 0x90	; 144
    262c:	be 4f       	sbci	r27, 0xFE	; 254
    262e:	fe 01       	movw	r30, r28
    2630:	31 96       	adiw	r30, 0x01	; 1
    2632:	01 90       	ld	r0, Z+
    2634:	0d 92       	st	X+, r0
    2636:	9a 95       	dec	r25
    2638:	e1 f7       	brne	.-8      	; 0x2632 <action_tapping_process+0xd8>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    263a:	80 93 a1 01 	sts	0x01A1, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    263e:	0e 94 33 10 	call	0x2066	; 0x2066 <debug_waiting_buffer>
    2642:	21 c0       	rjmp	.+66     	; 0x2686 <action_tapping_process+0x12c>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2644:	18 9f       	mul	r17, r24
    2646:	c0 01       	movw	r24, r0
    2648:	11 24       	eor	r1, r1
    264a:	80 59       	subi	r24, 0x90	; 144
    264c:	9e 4f       	sbci	r25, 0xFE	; 254
    264e:	0e 94 dd 10 	call	0x21ba	; 0x21ba <process_tapping>
    2652:	88 23       	and	r24, r24
    2654:	71 f1       	breq	.+92     	; 0x26b2 <action_tapping_process+0x158>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    2656:	e0 91 a0 01 	lds	r30, 0x01A0
    265a:	1e 9f       	mul	r17, r30
    265c:	f0 01       	movw	r30, r0
    265e:	11 24       	eor	r1, r1
    2660:	e0 59       	subi	r30, 0x90	; 144
    2662:	fe 4f       	sbci	r31, 0xFE	; 254
    2664:	40 81       	ld	r20, Z
    2666:	51 81       	ldd	r21, Z+1	; 0x01
    2668:	62 81       	ldd	r22, Z+2	; 0x02
    266a:	73 81       	ldd	r23, Z+3	; 0x03
    266c:	84 81       	ldd	r24, Z+4	; 0x04
    266e:	95 81       	ldd	r25, Z+5	; 0x05
    2670:	0e 94 23 10 	call	0x2046	; 0x2046 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2674:	80 91 a0 01 	lds	r24, 0x01A0
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	01 96       	adiw	r24, 0x01	; 1
    267c:	87 70       	andi	r24, 0x07	; 7
    267e:	99 27       	eor	r25, r25
    2680:	80 93 a0 01 	sts	0x01A0, r24
    2684:	01 c0       	rjmp	.+2      	; 0x2688 <action_tapping_process+0x12e>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2686:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2688:	80 91 a0 01 	lds	r24, 0x01A0
    268c:	90 91 a1 01 	lds	r25, 0x01A1
    2690:	89 13       	cpse	r24, r25
    2692:	d8 cf       	rjmp	.-80     	; 0x2644 <action_tapping_process+0xea>
    2694:	0e c0       	rjmp	.+28     	; 0x26b2 <action_tapping_process+0x158>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    2696:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    269a:	10 92 a1 01 	sts	0x01A1, r1
    waiting_buffer_tail = 0;
    269e:	10 92 a0 01 	sts	0x01A0, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    26a2:	ea e6       	ldi	r30, 0x6A	; 106
    26a4:	f1 e0       	ldi	r31, 0x01	; 1
    26a6:	86 e0       	ldi	r24, 0x06	; 6
    26a8:	df 01       	movw	r26, r30
    26aa:	1d 92       	st	X+, r1
    26ac:	8a 95       	dec	r24
    26ae:	e9 f7       	brne	.-6      	; 0x26aa <action_tapping_process+0x150>
    26b0:	ea cf       	rjmp	.-44     	; 0x2686 <action_tapping_process+0x12c>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    26b2:	2c 96       	adiw	r28, 0x0c	; 12
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	de bf       	out	0x3e, r29	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	1f 91       	pop	r17
    26c4:	08 95       	ret

000026c6 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    26c6:	cf 92       	push	r12
    26c8:	df 92       	push	r13
    26ca:	ef 92       	push	r14
    26cc:	ff 92       	push	r15
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	9c 01       	movw	r18, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    26d4:	00 97       	sbiw	r24, 0x00	; 0
    26d6:	09 f4       	brne	.+2      	; 0x26da <action_macro_play+0x14>
    26d8:	8e c0       	rjmp	.+284    	; 0x27f6 <action_macro_play+0x130>
    26da:	d0 e0       	ldi	r29, 0x00	; 0
    26dc:	c0 e0       	ldi	r28, 0x00	; 0
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    26de:	cc 24       	eor	r12, r12
    26e0:	c3 94       	inc	r12
    26e2:	d1 2c       	mov	r13, r1

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    26e4:	79 01       	movw	r14, r18
    26e6:	8f ef       	ldi	r24, 0xFF	; 255
    26e8:	e8 1a       	sub	r14, r24
    26ea:	f8 0a       	sbc	r15, r24
    26ec:	f9 01       	movw	r30, r18
    26ee:	84 91       	lpm	r24, Z
    26f0:	85 37       	cpi	r24, 0x75	; 117
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <action_macro_play+0x30>
    26f4:	5b c0       	rjmp	.+182    	; 0x27ac <action_macro_play+0xe6>
    26f6:	60 f4       	brcc	.+24     	; 0x2710 <action_macro_play+0x4a>
    26f8:	84 37       	cpi	r24, 0x74	; 116
    26fa:	08 f0       	brcs	.+2      	; 0x26fe <action_macro_play+0x38>
    26fc:	46 c0       	rjmp	.+140    	; 0x278a <action_macro_play+0xc4>
    26fe:	84 30       	cpi	r24, 0x04	; 4
    2700:	08 f0       	brcs	.+2      	; 0x2704 <action_macro_play+0x3e>
    2702:	66 c0       	rjmp	.+204    	; 0x27d0 <action_macro_play+0x10a>
    2704:	81 30       	cpi	r24, 0x01	; 1
    2706:	a9 f0       	breq	.+42     	; 0x2732 <action_macro_play+0x6c>
    2708:	82 30       	cpi	r24, 0x02	; 2
    270a:	09 f0       	breq	.+2      	; 0x270e <action_macro_play+0x48>
    270c:	74 c0       	rjmp	.+232    	; 0x27f6 <action_macro_play+0x130>
    270e:	26 c0       	rjmp	.+76     	; 0x275c <action_macro_play+0x96>
    2710:	88 37       	cpi	r24, 0x78	; 120
    2712:	09 f4       	brne	.+2      	; 0x2716 <action_macro_play+0x50>
    2714:	5a c0       	rjmp	.+180    	; 0x27ca <action_macro_play+0x104>
    2716:	38 f4       	brcc	.+14     	; 0x2726 <action_macro_play+0x60>
    2718:	86 37       	cpi	r24, 0x76	; 118
    271a:	09 f4       	brne	.+2      	; 0x271e <action_macro_play+0x58>
    271c:	4e c0       	rjmp	.+156    	; 0x27ba <action_macro_play+0xf4>
    271e:	87 37       	cpi	r24, 0x77	; 119
    2720:	09 f0       	breq	.+2      	; 0x2724 <action_macro_play+0x5e>
    2722:	69 c0       	rjmp	.+210    	; 0x27f6 <action_macro_play+0x130>
    2724:	4e c0       	rjmp	.+156    	; 0x27c2 <action_macro_play+0xfc>
    2726:	98 2f       	mov	r25, r24
    2728:	94 58       	subi	r25, 0x84	; 132
    272a:	90 37       	cpi	r25, 0x70	; 112
    272c:	08 f0       	brcs	.+2      	; 0x2730 <action_macro_play+0x6a>
    272e:	63 c0       	rjmp	.+198    	; 0x27f6 <action_macro_play+0x130>
    2730:	52 c0       	rjmp	.+164    	; 0x27d6 <action_macro_play+0x110>
            case KEY_DOWN:
                MACRO_READ();
    2732:	f7 01       	movw	r30, r14
    2734:	79 01       	movw	r14, r18
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	e8 0e       	add	r14, r24
    273a:	f1 1c       	adc	r15, r1
    273c:	e4 91       	lpm	r30, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    273e:	8e 2f       	mov	r24, r30
    2740:	80 5e       	subi	r24, 0xE0	; 224
    2742:	88 30       	cpi	r24, 0x08	; 8
    2744:	48 f4       	brcc	.+18     	; 0x2758 <action_macro_play+0x92>
                    add_weak_mods(MOD_BIT(macro));
    2746:	e7 70       	andi	r30, 0x07	; 7
    2748:	8c 2d       	mov	r24, r12
    274a:	01 c0       	rjmp	.+2      	; 0x274e <action_macro_play+0x88>
    274c:	88 0f       	add	r24, r24
    274e:	ea 95       	dec	r30
    2750:	ea f7       	brpl	.-6      	; 0x274c <action_macro_play+0x86>
    2752:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <add_weak_mods>
    2756:	14 c0       	rjmp	.+40     	; 0x2780 <action_macro_play+0xba>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    2758:	8e 2f       	mov	r24, r30
    275a:	3a c0       	rjmp	.+116    	; 0x27d0 <action_macro_play+0x10a>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    275c:	f7 01       	movw	r30, r14
    275e:	79 01       	movw	r14, r18
    2760:	82 e0       	ldi	r24, 0x02	; 2
    2762:	e8 0e       	add	r14, r24
    2764:	f1 1c       	adc	r15, r1
    2766:	e4 91       	lpm	r30, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    2768:	8e 2f       	mov	r24, r30
    276a:	80 5e       	subi	r24, 0xE0	; 224
    276c:	88 30       	cpi	r24, 0x08	; 8
    276e:	58 f4       	brcc	.+22     	; 0x2786 <action_macro_play+0xc0>
                    del_weak_mods(MOD_BIT(macro));
    2770:	e7 70       	andi	r30, 0x07	; 7
    2772:	8c 2d       	mov	r24, r12
    2774:	01 c0       	rjmp	.+2      	; 0x2778 <action_macro_play+0xb2>
    2776:	88 0f       	add	r24, r24
    2778:	ea 95       	dec	r30
    277a:	ea f7       	brpl	.-6      	; 0x2776 <action_macro_play+0xb0>
    277c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <del_weak_mods>
                    send_keyboard_report();
    2780:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <send_keyboard_report>
    2784:	2b c0       	rjmp	.+86     	; 0x27dc <action_macro_play+0x116>
                } else {
                    unregister_code(macro);
    2786:	8e 2f       	mov	r24, r30
    2788:	27 c0       	rjmp	.+78     	; 0x27d8 <action_macro_play+0x112>
                }
                break;
            case WAIT:
                MACRO_READ();
    278a:	f7 01       	movw	r30, r14
    278c:	79 01       	movw	r14, r18
    278e:	82 e0       	ldi	r24, 0x02	; 2
    2790:	e8 0e       	add	r14, r24
    2792:	f1 1c       	adc	r15, r1
    2794:	94 91       	lpm	r25, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    2796:	07 c0       	rjmp	.+14     	; 0x27a6 <action_macro_play+0xe0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2798:	ef e9       	ldi	r30, 0x9F	; 159
    279a:	ff e0       	ldi	r31, 0x0F	; 15
    279c:	31 97       	sbiw	r30, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <action_macro_play+0xd6>
    27a0:	00 c0       	rjmp	.+0      	; 0x27a2 <action_macro_play+0xdc>
    27a2:	00 00       	nop
    27a4:	91 50       	subi	r25, 0x01	; 1
    27a6:	91 11       	cpse	r25, r1
    27a8:	f7 cf       	rjmp	.-18     	; 0x2798 <action_macro_play+0xd2>
    27aa:	18 c0       	rjmp	.+48     	; 0x27dc <action_macro_play+0x116>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    27ac:	f7 01       	movw	r30, r14
    27ae:	79 01       	movw	r14, r18
    27b0:	82 e0       	ldi	r24, 0x02	; 2
    27b2:	e8 0e       	add	r14, r24
    27b4:	f1 1c       	adc	r15, r1
    27b6:	c4 91       	lpm	r28, Z
                dprintf("INTERVAL(%u)\n", interval);
                break;
    27b8:	11 c0       	rjmp	.+34     	; 0x27dc <action_macro_play+0x116>
            case MOD_STORE:
                mod_storage = get_mods();
    27ba:	0e 94 79 15 	call	0x2af2	; 0x2af2 <get_mods>
    27be:	d8 2f       	mov	r29, r24
                break;
    27c0:	0d c0       	rjmp	.+26     	; 0x27dc <action_macro_play+0x116>
            case MOD_RESTORE:
                set_mods(mod_storage);
    27c2:	8d 2f       	mov	r24, r29
    27c4:	0e 94 89 15 	call	0x2b12	; 0x2b12 <set_mods>
    27c8:	db cf       	rjmp	.-74     	; 0x2780 <action_macro_play+0xba>
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    27ca:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <clear_mods>
    27ce:	d8 cf       	rjmp	.-80     	; 0x2780 <action_macro_play+0xba>
                send_keyboard_report();
                break;
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    27d0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <register_code>
                break;
    27d4:	03 c0       	rjmp	.+6      	; 0x27dc <action_macro_play+0x116>
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    27d6:	8f 77       	andi	r24, 0x7F	; 127
    27d8:	0e 94 90 0c 	call	0x1920	; 0x1920 <unregister_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    27dc:	9c 2f       	mov	r25, r28
    27de:	07 c0       	rjmp	.+14     	; 0x27ee <action_macro_play+0x128>
    27e0:	91 50       	subi	r25, 0x01	; 1
    27e2:	ef e9       	ldi	r30, 0x9F	; 159
    27e4:	ff e0       	ldi	r31, 0x0F	; 15
    27e6:	31 97       	sbiw	r30, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <action_macro_play+0x120>
    27ea:	00 c0       	rjmp	.+0      	; 0x27ec <action_macro_play+0x126>
    27ec:	00 00       	nop
    27ee:	91 11       	cpse	r25, r1
    27f0:	f7 cf       	rjmp	.-18     	; 0x27e0 <action_macro_play+0x11a>
    27f2:	97 01       	movw	r18, r14
    27f4:	77 cf       	rjmp	.-274    	; 0x26e4 <action_macro_play+0x1e>
    }
}
    27f6:	df 91       	pop	r29
    27f8:	cf 91       	pop	r28
    27fa:	ff 90       	pop	r15
    27fc:	ef 90       	pop	r14
    27fe:	df 90       	pop	r13
    2800:	cf 90       	pop	r12
    2802:	08 95       	ret

00002804 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    2804:	60 93 a2 01 	sts	0x01A2, r22
    2808:	70 93 a3 01 	sts	0x01A3, r23
    280c:	80 93 a4 01 	sts	0x01A4, r24
    2810:	90 93 a5 01 	sts	0x01A5, r25
    //led_layer_set(state); // LAYER LEDS
    hook_layer_change(layer_state);
    2814:	0e 94 ef 15 	call	0x2bde	; 0x2bde <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    2818:	0c 94 dd 0f 	jmp	0x1fba	; 0x1fba <clear_keyboard_but_mods>

0000281c <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    281c:	60 93 a6 01 	sts	0x01A6, r22
    2820:	70 93 a7 01 	sts	0x01A7, r23
    2824:	80 93 a8 01 	sts	0x01A8, r24
    2828:	90 93 a9 01 	sts	0x01A9, r25
    hook_default_layer_change(default_layer_state);
    282c:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    2830:	0c 94 dd 0f 	jmp	0x1fba	; 0x1fba <clear_keyboard_but_mods>

00002834 <default_layer_debug>:
}

void default_layer_debug(void)
{
    2834:	08 95       	ret

00002836 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    283a:	00 91 a6 01 	lds	r16, 0x01A6
    283e:	10 91 a7 01 	lds	r17, 0x01A7
    2842:	20 91 a8 01 	lds	r18, 0x01A8
    2846:	30 91 a9 01 	lds	r19, 0x01A9
    284a:	60 2b       	or	r22, r16
    284c:	71 2b       	or	r23, r17
    284e:	82 2b       	or	r24, r18
    2850:	93 2b       	or	r25, r19
}
    2852:	1f 91       	pop	r17
    2854:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    2856:	0c 94 0e 14 	jmp	0x281c	; 0x281c <default_layer_state_set>

0000285a <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    285a:	0f 93       	push	r16
    285c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    285e:	00 91 a6 01 	lds	r16, 0x01A6
    2862:	10 91 a7 01 	lds	r17, 0x01A7
    2866:	20 91 a8 01 	lds	r18, 0x01A8
    286a:	30 91 a9 01 	lds	r19, 0x01A9
    286e:	60 23       	and	r22, r16
    2870:	71 23       	and	r23, r17
    2872:	82 23       	and	r24, r18
    2874:	93 23       	and	r25, r19
}
    2876:	1f 91       	pop	r17
    2878:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    287a:	0c 94 0e 14 	jmp	0x281c	; 0x281c <default_layer_state_set>

0000287e <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    287e:	0f 93       	push	r16
    2880:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    2882:	00 91 a6 01 	lds	r16, 0x01A6
    2886:	10 91 a7 01 	lds	r17, 0x01A7
    288a:	20 91 a8 01 	lds	r18, 0x01A8
    288e:	30 91 a9 01 	lds	r19, 0x01A9
    2892:	60 27       	eor	r22, r16
    2894:	71 27       	eor	r23, r17
    2896:	82 27       	eor	r24, r18
    2898:	93 27       	eor	r25, r19
}
    289a:	1f 91       	pop	r17
    289c:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    289e:	0c 94 0e 14 	jmp	0x281c	; 0x281c <default_layer_state_set>

000028a2 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    28a2:	60 e0       	ldi	r22, 0x00	; 0
    28a4:	70 e0       	ldi	r23, 0x00	; 0
    28a6:	cb 01       	movw	r24, r22
    28a8:	0c 94 02 14 	jmp	0x2804	; 0x2804 <layer_state_set>

000028ac <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    28ac:	41 e0       	ldi	r20, 0x01	; 1
    28ae:	50 e0       	ldi	r21, 0x00	; 0
    28b0:	60 e0       	ldi	r22, 0x00	; 0
    28b2:	70 e0       	ldi	r23, 0x00	; 0
    28b4:	04 c0       	rjmp	.+8      	; 0x28be <layer_move+0x12>
    28b6:	44 0f       	add	r20, r20
    28b8:	55 1f       	adc	r21, r21
    28ba:	66 1f       	adc	r22, r22
    28bc:	77 1f       	adc	r23, r23
    28be:	8a 95       	dec	r24
    28c0:	d2 f7       	brpl	.-12     	; 0x28b6 <layer_move+0xa>
    28c2:	cb 01       	movw	r24, r22
    28c4:	ba 01       	movw	r22, r20
    28c6:	0c 94 02 14 	jmp	0x2804	; 0x2804 <layer_state_set>

000028ca <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    28ca:	41 e0       	ldi	r20, 0x01	; 1
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	60 e0       	ldi	r22, 0x00	; 0
    28d0:	70 e0       	ldi	r23, 0x00	; 0
    28d2:	04 c0       	rjmp	.+8      	; 0x28dc <layer_on+0x12>
    28d4:	44 0f       	add	r20, r20
    28d6:	55 1f       	adc	r21, r21
    28d8:	66 1f       	adc	r22, r22
    28da:	77 1f       	adc	r23, r23
    28dc:	8a 95       	dec	r24
    28de:	d2 f7       	brpl	.-12     	; 0x28d4 <layer_on+0xa>
    28e0:	80 91 a2 01 	lds	r24, 0x01A2
    28e4:	90 91 a3 01 	lds	r25, 0x01A3
    28e8:	a0 91 a4 01 	lds	r26, 0x01A4
    28ec:	b0 91 a5 01 	lds	r27, 0x01A5
    28f0:	48 2b       	or	r20, r24
    28f2:	59 2b       	or	r21, r25
    28f4:	6a 2b       	or	r22, r26
    28f6:	7b 2b       	or	r23, r27
    28f8:	cb 01       	movw	r24, r22
    28fa:	ba 01       	movw	r22, r20
    28fc:	0c 94 02 14 	jmp	0x2804	; 0x2804 <layer_state_set>

00002900 <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    2900:	41 e0       	ldi	r20, 0x01	; 1
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	60 e0       	ldi	r22, 0x00	; 0
    2906:	70 e0       	ldi	r23, 0x00	; 0
    2908:	04 c0       	rjmp	.+8      	; 0x2912 <layer_off+0x12>
    290a:	44 0f       	add	r20, r20
    290c:	55 1f       	adc	r21, r21
    290e:	66 1f       	adc	r22, r22
    2910:	77 1f       	adc	r23, r23
    2912:	8a 95       	dec	r24
    2914:	d2 f7       	brpl	.-12     	; 0x290a <layer_off+0xa>
    2916:	40 95       	com	r20
    2918:	50 95       	com	r21
    291a:	60 95       	com	r22
    291c:	70 95       	com	r23
    291e:	80 91 a2 01 	lds	r24, 0x01A2
    2922:	90 91 a3 01 	lds	r25, 0x01A3
    2926:	a0 91 a4 01 	lds	r26, 0x01A4
    292a:	b0 91 a5 01 	lds	r27, 0x01A5
    292e:	48 23       	and	r20, r24
    2930:	59 23       	and	r21, r25
    2932:	6a 23       	and	r22, r26
    2934:	7b 23       	and	r23, r27
    2936:	cb 01       	movw	r24, r22
    2938:	ba 01       	movw	r22, r20
    293a:	0c 94 02 14 	jmp	0x2804	; 0x2804 <layer_state_set>

0000293e <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    293e:	41 e0       	ldi	r20, 0x01	; 1
    2940:	50 e0       	ldi	r21, 0x00	; 0
    2942:	60 e0       	ldi	r22, 0x00	; 0
    2944:	70 e0       	ldi	r23, 0x00	; 0
    2946:	04 c0       	rjmp	.+8      	; 0x2950 <layer_invert+0x12>
    2948:	44 0f       	add	r20, r20
    294a:	55 1f       	adc	r21, r21
    294c:	66 1f       	adc	r22, r22
    294e:	77 1f       	adc	r23, r23
    2950:	8a 95       	dec	r24
    2952:	d2 f7       	brpl	.-12     	; 0x2948 <layer_invert+0xa>
    2954:	80 91 a2 01 	lds	r24, 0x01A2
    2958:	90 91 a3 01 	lds	r25, 0x01A3
    295c:	a0 91 a4 01 	lds	r26, 0x01A4
    2960:	b0 91 a5 01 	lds	r27, 0x01A5
    2964:	48 27       	eor	r20, r24
    2966:	59 27       	eor	r21, r25
    2968:	6a 27       	eor	r22, r26
    296a:	7b 27       	eor	r23, r27
    296c:	cb 01       	movw	r24, r22
    296e:	ba 01       	movw	r22, r20
    2970:	0c 94 02 14 	jmp	0x2804	; 0x2804 <layer_state_set>

00002974 <layer_or>:
}

void layer_or(uint32_t state)
{
    2974:	0f 93       	push	r16
    2976:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    2978:	00 91 a2 01 	lds	r16, 0x01A2
    297c:	10 91 a3 01 	lds	r17, 0x01A3
    2980:	20 91 a4 01 	lds	r18, 0x01A4
    2984:	30 91 a5 01 	lds	r19, 0x01A5
    2988:	60 2b       	or	r22, r16
    298a:	71 2b       	or	r23, r17
    298c:	82 2b       	or	r24, r18
    298e:	93 2b       	or	r25, r19
}
    2990:	1f 91       	pop	r17
    2992:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    2994:	0c 94 02 14 	jmp	0x2804	; 0x2804 <layer_state_set>

00002998 <layer_and>:
}
void layer_and(uint32_t state)
{
    2998:	0f 93       	push	r16
    299a:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    299c:	00 91 a2 01 	lds	r16, 0x01A2
    29a0:	10 91 a3 01 	lds	r17, 0x01A3
    29a4:	20 91 a4 01 	lds	r18, 0x01A4
    29a8:	30 91 a5 01 	lds	r19, 0x01A5
    29ac:	60 23       	and	r22, r16
    29ae:	71 23       	and	r23, r17
    29b0:	82 23       	and	r24, r18
    29b2:	93 23       	and	r25, r19
}
    29b4:	1f 91       	pop	r17
    29b6:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    29b8:	0c 94 02 14 	jmp	0x2804	; 0x2804 <layer_state_set>

000029bc <layer_xor>:
}
void layer_xor(uint32_t state)
{
    29bc:	0f 93       	push	r16
    29be:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    29c0:	00 91 a2 01 	lds	r16, 0x01A2
    29c4:	10 91 a3 01 	lds	r17, 0x01A3
    29c8:	20 91 a4 01 	lds	r18, 0x01A4
    29cc:	30 91 a5 01 	lds	r19, 0x01A5
    29d0:	60 27       	eor	r22, r16
    29d2:	71 27       	eor	r23, r17
    29d4:	82 27       	eor	r24, r18
    29d6:	93 27       	eor	r25, r19
}
    29d8:	1f 91       	pop	r17
    29da:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    29dc:	0c 94 02 14 	jmp	0x2804	; 0x2804 <layer_state_set>

000029e0 <layer_debug>:
}

void layer_debug(void)
{
    29e0:	08 95       	ret

000029e2 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    29e2:	8f 92       	push	r8
    29e4:	9f 92       	push	r9
    29e6:	af 92       	push	r10
    29e8:	bf 92       	push	r11
    29ea:	cf 92       	push	r12
    29ec:	df 92       	push	r13
    29ee:	ef 92       	push	r14
    29f0:	ff 92       	push	r15
    29f2:	6c 01       	movw	r12, r24
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    29f4:	80 90 a6 01 	lds	r8, 0x01A6
    29f8:	90 90 a7 01 	lds	r9, 0x01A7
    29fc:	a0 90 a8 01 	lds	r10, 0x01A8
    2a00:	b0 90 a9 01 	lds	r11, 0x01A9
    2a04:	40 91 a2 01 	lds	r20, 0x01A2
    2a08:	50 91 a3 01 	lds	r21, 0x01A3
    2a0c:	60 91 a4 01 	lds	r22, 0x01A4
    2a10:	70 91 a5 01 	lds	r23, 0x01A5
    2a14:	84 2a       	or	r8, r20
    2a16:	95 2a       	or	r9, r21
    2a18:	a6 2a       	or	r10, r22
    2a1a:	b7 2a       	or	r11, r23
    2a1c:	8f e1       	ldi	r24, 0x1F	; 31
    2a1e:	e8 2e       	mov	r14, r24
    2a20:	f1 2c       	mov	r15, r1
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    2a22:	b5 01       	movw	r22, r10
    2a24:	a4 01       	movw	r20, r8
    2a26:	0e 2c       	mov	r0, r14
    2a28:	04 c0       	rjmp	.+8      	; 0x2a32 <layer_switch_get_action+0x50>
    2a2a:	76 95       	lsr	r23
    2a2c:	67 95       	ror	r22
    2a2e:	57 95       	ror	r21
    2a30:	47 95       	ror	r20
    2a32:	0a 94       	dec	r0
    2a34:	d2 f7       	brpl	.-12     	; 0x2a2a <layer_switch_get_action+0x48>
    2a36:	40 ff       	sbrs	r20, 0
    2a38:	08 c0       	rjmp	.+16     	; 0x2a4a <layer_switch_get_action+0x68>
            action = action_for_key(i, key);
    2a3a:	b6 01       	movw	r22, r12
    2a3c:	8e 2d       	mov	r24, r14
    2a3e:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    2a42:	81 30       	cpi	r24, 0x01	; 1
    2a44:	91 05       	cpc	r25, r1
    2a46:	09 f0       	breq	.+2      	; 0x2a4a <layer_switch_get_action+0x68>
    2a48:	08 c0       	rjmp	.+16     	; 0x2a5a <layer_switch_get_action+0x78>
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	e8 1a       	sub	r14, r24
    2a4e:	f1 08       	sbc	r15, r1
    2a50:	40 f7       	brcc	.-48     	; 0x2a22 <layer_switch_get_action+0x40>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    2a52:	b6 01       	movw	r22, r12
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    2a5a:	ff 90       	pop	r15
    2a5c:	ef 90       	pop	r14
    2a5e:	df 90       	pop	r13
    2a60:	cf 90       	pop	r12
    2a62:	bf 90       	pop	r11
    2a64:	af 90       	pop	r10
    2a66:	9f 90       	pop	r9
    2a68:	8f 90       	pop	r8
    2a6a:	08 95       	ret

00002a6c <add_key>:
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    2a6c:	40 91 0c 01 	lds	r20, 0x010C
    2a70:	50 91 0d 01 	lds	r21, 0x010D
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    keyboard_report->keys[cb_tail] = code;
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    2a78:	9f ef       	ldi	r25, 0xFF	; 255
#endif
    host_keyboard_send(keyboard_report);
}

/* key */
void add_key(uint8_t key)
    2a7a:	fa 01       	movw	r30, r20
    2a7c:	e2 0f       	add	r30, r18
    2a7e:	f3 1f       	adc	r31, r19
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    2a80:	62 81       	ldd	r22, Z+2	; 0x02
    2a82:	68 17       	cp	r22, r24
    2a84:	a1 f0       	breq	.+40     	; 0x2aae <add_key+0x42>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    2a86:	9f 3f       	cpi	r25, 0xFF	; 255
    2a88:	19 f4       	brne	.+6      	; 0x2a90 <add_key+0x24>
    2a8a:	61 11       	cpse	r22, r1
    2a8c:	01 c0       	rjmp	.+2      	; 0x2a90 <add_key+0x24>
    2a8e:	92 2f       	mov	r25, r18
    2a90:	2f 5f       	subi	r18, 0xFF	; 255
    2a92:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    2a94:	26 30       	cpi	r18, 0x06	; 6
    2a96:	31 05       	cpc	r19, r1
    2a98:	81 f7       	brne	.-32     	; 0x2a7a <add_key+0xe>
    2a9a:	07 c0       	rjmp	.+14     	; 0x2aaa <add_key+0x3e>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
            keyboard_report->keys[empty] = code;
    2a9c:	fa 01       	movw	r30, r20
    2a9e:	e9 0f       	add	r30, r25
    2aa0:	f1 1d       	adc	r31, r1
    2aa2:	97 fd       	sbrc	r25, 7
    2aa4:	fa 95       	dec	r31
    2aa6:	82 83       	std	Z+2, r24	; 0x02
    2aa8:	08 95       	ret
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    2aaa:	9f 3f       	cpi	r25, 0xFF	; 255
    2aac:	b9 f7       	brne	.-18     	; 0x2a9c <add_key+0x30>
    2aae:	08 95       	ret

00002ab0 <del_key>:
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    2ab0:	40 91 0c 01 	lds	r20, 0x010C
    2ab4:	50 91 0d 01 	lds	r21, 0x010D
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    }
#endif
    add_key_byte(key);
}

void del_key(uint8_t key)
    2abc:	fa 01       	movw	r30, r20
    2abe:	e2 0f       	add	r30, r18
    2ac0:	f3 1f       	adc	r31, r19
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    2ac2:	92 81       	ldd	r25, Z+2	; 0x02
    2ac4:	98 13       	cpse	r25, r24
    2ac6:	01 c0       	rjmp	.+2      	; 0x2aca <del_key+0x1a>
            keyboard_report->keys[i] = 0;
    2ac8:	12 82       	std	Z+2, r1	; 0x02
    2aca:	2f 5f       	subi	r18, 0xFF	; 255
    2acc:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    2ace:	26 30       	cpi	r18, 0x06	; 6
    2ad0:	31 05       	cpc	r19, r1
    2ad2:	a1 f7       	brne	.-24     	; 0x2abc <del_key+0xc>
        del_key_bit(key);
        return;
    }
#endif
    del_key_byte(key);
}
    2ad4:	08 95       	ret

00002ad6 <clear_keys>:

void clear_keys(void)
{
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    2ada:	e0 91 0c 01 	lds	r30, 0x010C
    2ade:	f0 91 0d 01 	lds	r31, 0x010D
    2ae2:	e8 0f       	add	r30, r24
    2ae4:	f9 1f       	adc	r31, r25
    2ae6:	10 82       	st	Z, r1
    2ae8:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    2aea:	88 30       	cpi	r24, 0x08	; 8
    2aec:	91 05       	cpc	r25, r1
    2aee:	a9 f7       	brne	.-22     	; 0x2ada <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    2af0:	08 95       	ret

00002af2 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    2af2:	80 91 aa 01 	lds	r24, 0x01AA
    2af6:	08 95       	ret

00002af8 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    2af8:	90 91 aa 01 	lds	r25, 0x01AA
    2afc:	98 2b       	or	r25, r24
    2afe:	90 93 aa 01 	sts	0x01AA, r25
    2b02:	08 95       	ret

00002b04 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    2b04:	80 95       	com	r24
    2b06:	90 91 aa 01 	lds	r25, 0x01AA
    2b0a:	98 23       	and	r25, r24
    2b0c:	90 93 aa 01 	sts	0x01AA, r25
    2b10:	08 95       	ret

00002b12 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    2b12:	80 93 aa 01 	sts	0x01AA, r24
    2b16:	08 95       	ret

00002b18 <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    2b18:	10 92 aa 01 	sts	0x01AA, r1
    2b1c:	08 95       	ret

00002b1e <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    2b1e:	90 91 ab 01 	lds	r25, 0x01AB
    2b22:	98 2b       	or	r25, r24
    2b24:	90 93 ab 01 	sts	0x01AB, r25
    2b28:	08 95       	ret

00002b2a <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    2b2a:	80 95       	com	r24
    2b2c:	90 91 ab 01 	lds	r25, 0x01AB
    2b30:	98 23       	and	r25, r24
    2b32:	90 93 ab 01 	sts	0x01AB, r25
    2b36:	08 95       	ret

00002b38 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    2b38:	10 92 ab 01 	sts	0x01AB, r1
    2b3c:	08 95       	ret

00002b3e <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    2b3e:	80 93 ac 01 	sts	0x01AC, r24
    2b42:	08 95       	ret

00002b44 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    2b44:	10 92 ac 01 	sts	0x01AC, r1
    2b48:	08 95       	ret

00002b4a <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    2b4a:	40 91 0c 01 	lds	r20, 0x010C
    2b4e:	50 91 0d 01 	lds	r21, 0x010D
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    2b56:	80 e0       	ldi	r24, 0x00	; 0


/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
    2b58:	fa 01       	movw	r30, r20
    2b5a:	e2 0f       	add	r30, r18
    2b5c:	f3 1f       	adc	r31, r19
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    2b5e:	91 81       	ldd	r25, Z+1	; 0x01
    2b60:	91 11       	cpse	r25, r1
            cnt++;
    2b62:	8f 5f       	subi	r24, 0xFF	; 255
    2b64:	2f 5f       	subi	r18, 0xFF	; 255
    2b66:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    2b68:	27 30       	cpi	r18, 0x07	; 7
    2b6a:	31 05       	cpc	r19, r1
    2b6c:	a9 f7       	brne	.-22     	; 0x2b58 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    2b6e:	08 95       	ret

00002b70 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    2b70:	e0 91 0c 01 	lds	r30, 0x010C
    2b74:	f0 91 0d 01 	lds	r31, 0x010D
    2b78:	80 91 aa 01 	lds	r24, 0x01AA
    2b7c:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    2b7e:	e0 91 0c 01 	lds	r30, 0x010C
    2b82:	f0 91 0d 01 	lds	r31, 0x010D
    2b86:	80 81       	ld	r24, Z
    2b88:	90 91 ab 01 	lds	r25, 0x01AB
    2b8c:	89 2b       	or	r24, r25
    2b8e:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    2b90:	90 91 ac 01 	lds	r25, 0x01AC
    2b94:	99 23       	and	r25, r25
    2b96:	61 f0       	breq	.+24     	; 0x2bb0 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    2b98:	e0 91 0c 01 	lds	r30, 0x010C
    2b9c:	f0 91 0d 01 	lds	r31, 0x010D
    2ba0:	80 81       	ld	r24, Z
    2ba2:	89 2b       	or	r24, r25
    2ba4:	80 83       	st	Z, r24
        if (has_anykey()) {
    2ba6:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <has_anykey>
    2baa:	81 11       	cpse	r24, r1
            clear_oneshot_mods();
    2bac:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    2bb0:	80 91 0c 01 	lds	r24, 0x010C
    2bb4:	90 91 0d 01 	lds	r25, 0x010D
    2bb8:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <host_keyboard_send>

00002bbc <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    2bbc:	08 95       	ret

00002bbe <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    2bbe:	cf 93       	push	r28
    2bc0:	df 93       	push	r29
    2bc2:	00 d0       	rcall	.+0      	; 0x2bc4 <hook_matrix_change+0x6>
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <hook_matrix_change+0x8>
    2bc6:	1f 92       	push	r1
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	08 95       	ret

00002bdc <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    2bdc:	08 95       	ret

00002bde <hook_layer_change>:
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    2bde:	08 95       	ret

00002be0 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    2be0:	0c 94 a7 0b 	jmp	0x174e	; 0x174e <keyboard_set_leds>

00002be4 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    2be4:	80 91 c1 01 	lds	r24, 0x01C1
    2be8:	84 30       	cpi	r24, 0x04	; 4
    2bea:	09 f1       	breq	.+66     	; 0x2c2e <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    2bec:	10 92 b6 01 	sts	0x01B6, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    2bf0:	20 e4       	ldi	r18, 0x40	; 64
    2bf2:	88 e1       	ldi	r24, 0x18	; 24
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	a8 95       	wdr
    2bfc:	80 93 60 00 	sts	0x0060, r24
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    2c06:	83 b7       	in	r24, 0x33	; 51
    2c08:	81 7f       	andi	r24, 0xF1	; 241
    2c0a:	84 60       	ori	r24, 0x04	; 4
    2c0c:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    2c0e:	83 b7       	in	r24, 0x33	; 51
    2c10:	81 60       	ori	r24, 0x01	; 1
    2c12:	83 bf       	out	0x33, r24	; 51
    sei();
    2c14:	78 94       	sei
    sleep_cpu();
    2c16:	88 95       	sleep
    sleep_disable();
    2c18:	83 b7       	in	r24, 0x33	; 51
    2c1a:	8e 7f       	andi	r24, 0xFE	; 254
    2c1c:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    2c1e:	88 e1       	ldi	r24, 0x18	; 24
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	80 93 60 00 	sts	0x0060, r24
    2c28:	10 92 60 00 	sts	0x0060, r1
    2c2c:	0f be       	out	0x3f, r0	; 63
    2c2e:	08 95       	ret

00002c30 <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    2c30:	08 95       	ret

00002c32 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    2c32:	08 95       	ret

00002c34 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    2c34:	cf 93       	push	r28
    matrix_power_up();
    2c36:	0e 94 18 16 	call	0x2c30	; 0x2c30 <matrix_power_up>
    matrix_scan();
    2c3a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <matrix_scan>
    matrix_power_down();
    2c3e:	0e 94 19 16 	call	0x2c32	; 0x2c32 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2c42:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    2c44:	8c 2f       	mov	r24, r28
    2c46:	0e 94 60 03 	call	0x6c0	; 0x6c0 <matrix_get_row>
    2c4a:	89 2b       	or	r24, r25
    2c4c:	29 f4       	brne	.+10     	; 0x2c58 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2c4e:	cf 5f       	subi	r28, 0xFF	; 255
    2c50:	c8 30       	cpi	r28, 0x08	; 8
    2c52:	c1 f7       	brne	.-16     	; 0x2c44 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	01 c0       	rjmp	.+2      	; 0x2c5a <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    2c5a:	cf 91       	pop	r28
    2c5c:	08 95       	ret

00002c5e <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    2c5e:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <clear_keyboard>

00002c62 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    2c62:	82 e0       	ldi	r24, 0x02	; 2
    2c64:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    2c66:	93 e0       	ldi	r25, 0x03	; 3
    2c68:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    2c6a:	9a ef       	ldi	r25, 0xFA	; 250
    2c6c:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    2c6e:	80 93 6e 00 	sts	0x006E, r24
    2c72:	08 95       	ret

00002c74 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    2c74:	8f b7       	in	r24, 0x3f	; 63
    cli();
    2c76:	f8 94       	cli
    t = timer_count;
    2c78:	40 91 b7 01 	lds	r20, 0x01B7
    2c7c:	50 91 b8 01 	lds	r21, 0x01B8
    2c80:	60 91 b9 01 	lds	r22, 0x01B9
    2c84:	70 91 ba 01 	lds	r23, 0x01BA
    SREG = sreg;
    2c88:	8f bf       	out	0x3f, r24	; 63

    return (t & 0xFFFF);
}
    2c8a:	ca 01       	movw	r24, r20
    2c8c:	08 95       	ret

00002c8e <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    2c8e:	1f 92       	push	r1
    2c90:	0f 92       	push	r0
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	0f 92       	push	r0
    2c96:	11 24       	eor	r1, r1
    2c98:	8f 93       	push	r24
    2c9a:	9f 93       	push	r25
    2c9c:	af 93       	push	r26
    2c9e:	bf 93       	push	r27
    timer_count++;
    2ca0:	80 91 b7 01 	lds	r24, 0x01B7
    2ca4:	90 91 b8 01 	lds	r25, 0x01B8
    2ca8:	a0 91 b9 01 	lds	r26, 0x01B9
    2cac:	b0 91 ba 01 	lds	r27, 0x01BA
    2cb0:	01 96       	adiw	r24, 0x01	; 1
    2cb2:	a1 1d       	adc	r26, r1
    2cb4:	b1 1d       	adc	r27, r1
    2cb6:	80 93 b7 01 	sts	0x01B7, r24
    2cba:	90 93 b8 01 	sts	0x01B8, r25
    2cbe:	a0 93 b9 01 	sts	0x01B9, r26
    2cc2:	b0 93 ba 01 	sts	0x01BA, r27
}
    2cc6:	bf 91       	pop	r27
    2cc8:	af 91       	pop	r26
    2cca:	9f 91       	pop	r25
    2ccc:	8f 91       	pop	r24
    2cce:	0f 90       	pop	r0
    2cd0:	0f be       	out	0x3f, r0	; 63
    2cd2:	0f 90       	pop	r0
    2cd4:	1f 90       	pop	r1
    2cd6:	18 95       	reti

00002cd8 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    2cd8:	0e 94 52 07 	call	0xea4	; 0xea4 <USB_Disable>
    cli();
    2cdc:	f8 94       	cli
    2cde:	2f ef       	ldi	r18, 0xFF	; 255
    2ce0:	87 ea       	ldi	r24, 0xA7	; 167
    2ce2:	91 e6       	ldi	r25, 0x61	; 97
    2ce4:	21 50       	subi	r18, 0x01	; 1
    2ce6:	80 40       	sbci	r24, 0x00	; 0
    2ce8:	90 40       	sbci	r25, 0x00	; 0
    2cea:	e1 f7       	brne	.-8      	; 0x2ce4 <bootloader_jump+0xc>
    2cec:	00 c0       	rjmp	.+0      	; 0x2cee <bootloader_jump+0x16>
    2cee:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    2cf0:	87 e0       	ldi	r24, 0x07	; 7
    2cf2:	90 eb       	ldi	r25, 0xB0	; 176
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	80 93 ca 01 	sts	0x01CA, r24
    2cfa:	90 93 cb 01 	sts	0x01CB, r25
    2cfe:	a0 93 cc 01 	sts	0x01CC, r26
    2d02:	b0 93 cd 01 	sts	0x01CD, r27
    wdt_enable(WDTO_250MS);
    2d06:	2c e0       	ldi	r18, 0x0C	; 12
    2d08:	88 e1       	ldi	r24, 0x18	; 24
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	f8 94       	cli
    2d10:	a8 95       	wdr
    2d12:	80 93 60 00 	sts	0x0060, r24
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	20 93 60 00 	sts	0x0060, r18
    2d1c:	ff cf       	rjmp	.-2      	; 0x2d1c <bootloader_jump+0x44>

00002d1e <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    2d1e:	0e 94 02 02 	call	0x404	; 0x404 <keymap_key_to_keycode>
    switch (keycode) {
    2d22:	98 2f       	mov	r25, r24
    2d24:	90 5c       	subi	r25, 0xC0	; 192
    2d26:	90 32       	cpi	r25, 0x20	; 32
    2d28:	18 f4       	brcc	.+6      	; 0x2d30 <action_for_key+0x12>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    2d2a:	0e 94 14 02 	call	0x428	; 0x428 <keymap_fn_to_action>
    2d2e:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    2d30:	8d 3b       	cpi	r24, 0xBD	; 189
    2d32:	50 f4       	brcc	.+20     	; 0x2d48 <action_for_key+0x2a>
    2d34:	88 3a       	cpi	r24, 0xA8	; 168
    2d36:	18 f5       	brcc	.+70     	; 0x2d7e <action_for_key+0x60>
    2d38:	85 3a       	cpi	r24, 0xA5	; 165
    2d3a:	c0 f4       	brcc	.+48     	; 0x2d6c <action_for_key+0x4e>
    2d3c:	84 30       	cpi	r24, 0x04	; 4
    2d3e:	98 f4       	brcc	.+38     	; 0x2d66 <action_for_key+0x48>
    2d40:	81 30       	cpi	r24, 0x01	; 1
    2d42:	09 f0       	breq	.+2      	; 0x2d46 <action_for_key+0x28>
    2d44:	6f c0       	rjmp	.+222    	; 0x2e24 <action_for_key+0x106>
    2d46:	0c c0       	rjmp	.+24     	; 0x2d60 <action_for_key+0x42>
    2d48:	88 3e       	cpi	r24, 0xE8	; 232
    2d4a:	30 f4       	brcc	.+12     	; 0x2d58 <action_for_key+0x3a>
    2d4c:	80 3e       	cpi	r24, 0xE0	; 224
    2d4e:	58 f4       	brcc	.+22     	; 0x2d66 <action_for_key+0x48>
    2d50:	8f 3b       	cpi	r24, 0xBF	; 191
    2d52:	09 f0       	breq	.+2      	; 0x2d56 <action_for_key+0x38>
    2d54:	67 c0       	rjmp	.+206    	; 0x2e24 <action_for_key+0x106>
    2d56:	59 c0       	rjmp	.+178    	; 0x2e0a <action_for_key+0xec>
    2d58:	80 3f       	cpi	r24, 0xF0	; 240
    2d5a:	08 f4       	brcc	.+2      	; 0x2d5e <action_for_key+0x40>
    2d5c:	63 c0       	rjmp	.+198    	; 0x2e24 <action_for_key+0x106>
    2d5e:	51 c0       	rjmp	.+162    	; 0x2e02 <action_for_key+0xe4>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    2d60:	21 e0       	ldi	r18, 0x01	; 1
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	a6 c0       	rjmp	.+332    	; 0x2eb2 <action_for_key+0x194>
{
    action_t action = {};
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    2d66:	28 2f       	mov	r18, r24
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	a3 c0       	rjmp	.+326    	; 0x2eb2 <action_for_key+0x194>
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    2d6c:	85 3a       	cpi	r24, 0xA5	; 165
    2d6e:	09 f4       	brne	.+2      	; 0x2d72 <action_for_key+0x54>
    2d70:	5c c0       	rjmp	.+184    	; 0x2e2a <action_for_key+0x10c>
    2d72:	86 3a       	cpi	r24, 0xA6	; 166
    2d74:	09 f0       	breq	.+2      	; 0x2d78 <action_for_key+0x5a>
    2d76:	5c c0       	rjmp	.+184    	; 0x2e30 <action_for_key+0x112>
    2d78:	22 e8       	ldi	r18, 0x82	; 130
    2d7a:	30 e4       	ldi	r19, 0x40	; 64
    2d7c:	9a c0       	rjmp	.+308    	; 0x2eb2 <action_for_key+0x194>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    2d7e:	88 3a       	cpi	r24, 0xA8	; 168
    2d80:	09 f4       	brne	.+2      	; 0x2d84 <action_for_key+0x66>
    2d82:	59 c0       	rjmp	.+178    	; 0x2e36 <action_for_key+0x118>
    2d84:	89 3a       	cpi	r24, 0xA9	; 169
    2d86:	09 f4       	brne	.+2      	; 0x2d8a <action_for_key+0x6c>
    2d88:	59 c0       	rjmp	.+178    	; 0x2e3c <action_for_key+0x11e>
    2d8a:	8a 3a       	cpi	r24, 0xAA	; 170
    2d8c:	09 f4       	brne	.+2      	; 0x2d90 <action_for_key+0x72>
    2d8e:	59 c0       	rjmp	.+178    	; 0x2e42 <action_for_key+0x124>
    2d90:	8b 3a       	cpi	r24, 0xAB	; 171
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <action_for_key+0x78>
    2d94:	59 c0       	rjmp	.+178    	; 0x2e48 <action_for_key+0x12a>
    2d96:	8c 3a       	cpi	r24, 0xAC	; 172
    2d98:	09 f4       	brne	.+2      	; 0x2d9c <action_for_key+0x7e>
    2d9a:	59 c0       	rjmp	.+178    	; 0x2e4e <action_for_key+0x130>
    2d9c:	8d 3a       	cpi	r24, 0xAD	; 173
    2d9e:	09 f4       	brne	.+2      	; 0x2da2 <action_for_key+0x84>
    2da0:	59 c0       	rjmp	.+178    	; 0x2e54 <action_for_key+0x136>
    2da2:	8e 3a       	cpi	r24, 0xAE	; 174
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <action_for_key+0x8a>
    2da6:	59 c0       	rjmp	.+178    	; 0x2e5a <action_for_key+0x13c>
    2da8:	8f 3a       	cpi	r24, 0xAF	; 175
    2daa:	09 f4       	brne	.+2      	; 0x2dae <action_for_key+0x90>
    2dac:	59 c0       	rjmp	.+178    	; 0x2e60 <action_for_key+0x142>
    2dae:	81 3b       	cpi	r24, 0xB1	; 177
    2db0:	09 f4       	brne	.+2      	; 0x2db4 <action_for_key+0x96>
    2db2:	59 c0       	rjmp	.+178    	; 0x2e66 <action_for_key+0x148>
    2db4:	80 3b       	cpi	r24, 0xB0	; 176
    2db6:	09 f4       	brne	.+2      	; 0x2dba <action_for_key+0x9c>
    2db8:	59 c0       	rjmp	.+178    	; 0x2e6c <action_for_key+0x14e>
    2dba:	82 3b       	cpi	r24, 0xB2	; 178
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <action_for_key+0xa2>
    2dbe:	59 c0       	rjmp	.+178    	; 0x2e72 <action_for_key+0x154>
    2dc0:	83 3b       	cpi	r24, 0xB3	; 179
    2dc2:	09 f4       	brne	.+2      	; 0x2dc6 <action_for_key+0xa8>
    2dc4:	59 c0       	rjmp	.+178    	; 0x2e78 <action_for_key+0x15a>
    2dc6:	84 3b       	cpi	r24, 0xB4	; 180
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <action_for_key+0xae>
    2dca:	59 c0       	rjmp	.+178    	; 0x2e7e <action_for_key+0x160>
    2dcc:	85 3b       	cpi	r24, 0xB5	; 181
    2dce:	09 f4       	brne	.+2      	; 0x2dd2 <action_for_key+0xb4>
    2dd0:	59 c0       	rjmp	.+178    	; 0x2e84 <action_for_key+0x166>
    2dd2:	86 3b       	cpi	r24, 0xB6	; 182
    2dd4:	09 f4       	brne	.+2      	; 0x2dd8 <action_for_key+0xba>
    2dd6:	59 c0       	rjmp	.+178    	; 0x2e8a <action_for_key+0x16c>
    2dd8:	87 3b       	cpi	r24, 0xB7	; 183
    2dda:	09 f4       	brne	.+2      	; 0x2dde <action_for_key+0xc0>
    2ddc:	59 c0       	rjmp	.+178    	; 0x2e90 <action_for_key+0x172>
    2dde:	88 3b       	cpi	r24, 0xB8	; 184
    2de0:	09 f4       	brne	.+2      	; 0x2de4 <action_for_key+0xc6>
    2de2:	59 c0       	rjmp	.+178    	; 0x2e96 <action_for_key+0x178>
    2de4:	89 3b       	cpi	r24, 0xB9	; 185
    2de6:	09 f4       	brne	.+2      	; 0x2dea <action_for_key+0xcc>
    2de8:	59 c0       	rjmp	.+178    	; 0x2e9c <action_for_key+0x17e>
    2dea:	8a 3b       	cpi	r24, 0xBA	; 186
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <action_for_key+0xd2>
    2dee:	59 c0       	rjmp	.+178    	; 0x2ea2 <action_for_key+0x184>
    2df0:	8b 3b       	cpi	r24, 0xBB	; 187
    2df2:	09 f4       	brne	.+2      	; 0x2df6 <action_for_key+0xd8>
    2df4:	59 c0       	rjmp	.+178    	; 0x2ea8 <action_for_key+0x18a>
    2df6:	8c 3b       	cpi	r24, 0xBC	; 188
    2df8:	09 f0       	breq	.+2      	; 0x2dfc <action_for_key+0xde>
    2dfa:	59 c0       	rjmp	.+178    	; 0x2eae <action_for_key+0x190>
    2dfc:	2a e2       	ldi	r18, 0x2A	; 42
    2dfe:	36 e4       	ldi	r19, 0x46	; 70
    2e00:	58 c0       	rjmp	.+176    	; 0x2eb2 <action_for_key+0x194>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    2e02:	28 2f       	mov	r18, r24
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	30 65       	ori	r19, 0x50	; 80
    2e08:	54 c0       	rjmp	.+168    	; 0x2eb2 <action_for_key+0x194>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    2e0a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <clear_keyboard>
    2e0e:	2f ef       	ldi	r18, 0xFF	; 255
    2e10:	80 e7       	ldi	r24, 0x70	; 112
    2e12:	92 e0       	ldi	r25, 0x02	; 2
    2e14:	21 50       	subi	r18, 0x01	; 1
    2e16:	80 40       	sbci	r24, 0x00	; 0
    2e18:	90 40       	sbci	r25, 0x00	; 0
    2e1a:	e1 f7       	brne	.-8      	; 0x2e14 <action_for_key+0xf6>
    2e1c:	00 c0       	rjmp	.+0      	; 0x2e1e <action_for_key+0x100>
    2e1e:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    2e20:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <bootloader_jump>
            break;
        default:
            action.code = ACTION_NO;
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	44 c0       	rjmp	.+136    	; 0x2eb2 <action_for_key+0x194>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    2e2a:	21 e8       	ldi	r18, 0x81	; 129
    2e2c:	30 e4       	ldi	r19, 0x40	; 64
    2e2e:	41 c0       	rjmp	.+130    	; 0x2eb2 <action_for_key+0x194>
    2e30:	23 e8       	ldi	r18, 0x83	; 131
    2e32:	30 e4       	ldi	r19, 0x40	; 64
    2e34:	3e c0       	rjmp	.+124    	; 0x2eb2 <action_for_key+0x194>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    2e36:	22 ee       	ldi	r18, 0xE2	; 226
    2e38:	34 e4       	ldi	r19, 0x44	; 68
    2e3a:	3b c0       	rjmp	.+118    	; 0x2eb2 <action_for_key+0x194>
    2e3c:	29 ee       	ldi	r18, 0xE9	; 233
    2e3e:	34 e4       	ldi	r19, 0x44	; 68
    2e40:	38 c0       	rjmp	.+112    	; 0x2eb2 <action_for_key+0x194>
    2e42:	2a ee       	ldi	r18, 0xEA	; 234
    2e44:	34 e4       	ldi	r19, 0x44	; 68
    2e46:	35 c0       	rjmp	.+106    	; 0x2eb2 <action_for_key+0x194>
    2e48:	25 eb       	ldi	r18, 0xB5	; 181
    2e4a:	34 e4       	ldi	r19, 0x44	; 68
    2e4c:	32 c0       	rjmp	.+100    	; 0x2eb2 <action_for_key+0x194>
    2e4e:	26 eb       	ldi	r18, 0xB6	; 182
    2e50:	34 e4       	ldi	r19, 0x44	; 68
    2e52:	2f c0       	rjmp	.+94     	; 0x2eb2 <action_for_key+0x194>
    2e54:	23 eb       	ldi	r18, 0xB3	; 179
    2e56:	34 e4       	ldi	r19, 0x44	; 68
    2e58:	2c c0       	rjmp	.+88     	; 0x2eb2 <action_for_key+0x194>
    2e5a:	24 eb       	ldi	r18, 0xB4	; 180
    2e5c:	34 e4       	ldi	r19, 0x44	; 68
    2e5e:	29 c0       	rjmp	.+82     	; 0x2eb2 <action_for_key+0x194>
    2e60:	27 eb       	ldi	r18, 0xB7	; 183
    2e62:	34 e4       	ldi	r19, 0x44	; 68
    2e64:	26 c0       	rjmp	.+76     	; 0x2eb2 <action_for_key+0x194>
    2e66:	2c ec       	ldi	r18, 0xCC	; 204
    2e68:	34 e4       	ldi	r19, 0x44	; 68
    2e6a:	23 c0       	rjmp	.+70     	; 0x2eb2 <action_for_key+0x194>
    2e6c:	2d ec       	ldi	r18, 0xCD	; 205
    2e6e:	34 e4       	ldi	r19, 0x44	; 68
    2e70:	20 c0       	rjmp	.+64     	; 0x2eb2 <action_for_key+0x194>
    2e72:	23 e8       	ldi	r18, 0x83	; 131
    2e74:	35 e4       	ldi	r19, 0x45	; 69
    2e76:	1d c0       	rjmp	.+58     	; 0x2eb2 <action_for_key+0x194>
    2e78:	2a e8       	ldi	r18, 0x8A	; 138
    2e7a:	35 e4       	ldi	r19, 0x45	; 69
    2e7c:	1a c0       	rjmp	.+52     	; 0x2eb2 <action_for_key+0x194>
    2e7e:	22 e9       	ldi	r18, 0x92	; 146
    2e80:	35 e4       	ldi	r19, 0x45	; 69
    2e82:	17 c0       	rjmp	.+46     	; 0x2eb2 <action_for_key+0x194>
    2e84:	24 e9       	ldi	r18, 0x94	; 148
    2e86:	35 e4       	ldi	r19, 0x45	; 69
    2e88:	14 c0       	rjmp	.+40     	; 0x2eb2 <action_for_key+0x194>
    2e8a:	21 e2       	ldi	r18, 0x21	; 33
    2e8c:	36 e4       	ldi	r19, 0x46	; 70
    2e8e:	11 c0       	rjmp	.+34     	; 0x2eb2 <action_for_key+0x194>
    2e90:	23 e2       	ldi	r18, 0x23	; 35
    2e92:	36 e4       	ldi	r19, 0x46	; 70
    2e94:	0e c0       	rjmp	.+28     	; 0x2eb2 <action_for_key+0x194>
    2e96:	24 e2       	ldi	r18, 0x24	; 36
    2e98:	36 e4       	ldi	r19, 0x46	; 70
    2e9a:	0b c0       	rjmp	.+22     	; 0x2eb2 <action_for_key+0x194>
    2e9c:	25 e2       	ldi	r18, 0x25	; 37
    2e9e:	36 e4       	ldi	r19, 0x46	; 70
    2ea0:	08 c0       	rjmp	.+16     	; 0x2eb2 <action_for_key+0x194>
    2ea2:	26 e2       	ldi	r18, 0x26	; 38
    2ea4:	36 e4       	ldi	r19, 0x46	; 70
    2ea6:	05 c0       	rjmp	.+10     	; 0x2eb2 <action_for_key+0x194>
    2ea8:	27 e2       	ldi	r18, 0x27	; 39
    2eaa:	36 e4       	ldi	r19, 0x46	; 70
    2eac:	02 c0       	rjmp	.+4      	; 0x2eb2 <action_for_key+0x194>
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	34 e4       	ldi	r19, 0x44	; 68
    2eb2:	c9 01       	movw	r24, r18
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    }
}
    2eb4:	08 95       	ret

00002eb6 <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	08 95       	ret

00002ebc <sleep_led_init>:

void sleep_led_init(void)
{
    /* Timer1 setup */
    /* CTC mode */
    TCCR1B |= _BV(WGM12);
    2ebc:	e1 e8       	ldi	r30, 0x81	; 129
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	88 60       	ori	r24, 0x08	; 8
    2ec4:	80 83       	st	Z, r24
    /* Clock selelct: clk/1 */
    TCCR1B |= _BV(CS10);
    2ec6:	80 81       	ld	r24, Z
    2ec8:	81 60       	ori	r24, 0x01	; 1
    2eca:	80 83       	st	Z, r24
    /* Set TOP value */
    uint8_t sreg = SREG;
    2ecc:	8f b7       	in	r24, 0x3f	; 63
    cli();
    2ece:	f8 94       	cli
    OCR1AH = (SLEEP_LED_TIMER_TOP>>8)&0xff;
    2ed0:	93 e0       	ldi	r25, 0x03	; 3
    2ed2:	90 93 89 00 	sts	0x0089, r25
    OCR1AL = SLEEP_LED_TIMER_TOP&0xff;
    2ed6:	90 ed       	ldi	r25, 0xD0	; 208
    2ed8:	90 93 88 00 	sts	0x0088, r25
    SREG = sreg;
    2edc:	8f bf       	out	0x3f, r24	; 63
    2ede:	08 95       	ret

00002ee0 <sleep_led_enable>:
}

void sleep_led_enable(void)
{
    /* Enable Compare Match Interrupt */
    TIMSK1 |= _BV(OCIE1A);
    2ee0:	ef e6       	ldi	r30, 0x6F	; 111
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	80 81       	ld	r24, Z
    2ee6:	82 60       	ori	r24, 0x02	; 2
    2ee8:	80 83       	st	Z, r24
    2eea:	08 95       	ret

00002eec <sleep_led_disable>:
}

void sleep_led_disable(void)
{
    /* Disable Compare Match Interrupt */
    TIMSK1 &= ~_BV(OCIE1A);
    2eec:	ef e6       	ldi	r30, 0x6F	; 111
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	8d 7f       	andi	r24, 0xFD	; 253
    2ef4:	80 83       	st	Z, r24
    2ef6:	08 95       	ret

00002ef8 <__vector_17>:
255, 252, 245, 233, 218, 199, 179, 157, 135, 113, 93, 74, 58, 44, 32, 23,
15, 10, 6, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

ISR(TIMER1_COMPA_vect)
{
    2ef8:	1f 92       	push	r1
    2efa:	0f 92       	push	r0
    2efc:	0f b6       	in	r0, 0x3f	; 63
    2efe:	0f 92       	push	r0
    2f00:	11 24       	eor	r1, r1
    2f02:	0b b6       	in	r0, 0x3b	; 59
    2f04:	0f 92       	push	r0
    2f06:	2f 93       	push	r18
    2f08:	3f 93       	push	r19
    2f0a:	4f 93       	push	r20
    2f0c:	5f 93       	push	r21
    2f0e:	6f 93       	push	r22
    2f10:	7f 93       	push	r23
    2f12:	8f 93       	push	r24
    2f14:	9f 93       	push	r25
    2f16:	af 93       	push	r26
    2f18:	bf 93       	push	r27
    2f1a:	ef 93       	push	r30
    2f1c:	ff 93       	push	r31
            uint8_t duration:2;
            uint8_t index:6;
        } pwm;
    } timer = { .row = 0 };

    timer.row++;
    2f1e:	80 91 bb 01 	lds	r24, 0x01BB
    2f22:	90 91 bc 01 	lds	r25, 0x01BC
    2f26:	01 96       	adiw	r24, 0x01	; 1
    2f28:	90 93 bc 01 	sts	0x01BC, r25
    2f2c:	80 93 bb 01 	sts	0x01BB, r24
    
    // LED on
    if (timer.pwm.count == 0) {
    2f30:	81 11       	cpse	r24, r1
    2f32:	03 c0       	rjmp	.+6      	; 0x2f3a <__vector_17+0x42>
        led_set(1<<USB_LED_CAPS_LOCK);
    2f34:	82 e0       	ldi	r24, 0x02	; 2
    2f36:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <led_set>
    }
    // LED off
    if (timer.pwm.count == pgm_read_byte(&breathing_table[timer.pwm.index])) {
    2f3a:	e0 91 bc 01 	lds	r30, 0x01BC
    2f3e:	e6 95       	lsr	r30
    2f40:	e6 95       	lsr	r30
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	e5 56       	subi	r30, 0x65	; 101
    2f46:	fd 4f       	sbci	r31, 0xFD	; 253
    2f48:	e4 91       	lpm	r30, Z
    2f4a:	80 91 bb 01 	lds	r24, 0x01BB
    2f4e:	8e 13       	cpse	r24, r30
    2f50:	03 c0       	rjmp	.+6      	; 0x2f58 <__vector_17+0x60>
        led_set(0);
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <led_set>
    }
}
    2f58:	ff 91       	pop	r31
    2f5a:	ef 91       	pop	r30
    2f5c:	bf 91       	pop	r27
    2f5e:	af 91       	pop	r26
    2f60:	9f 91       	pop	r25
    2f62:	8f 91       	pop	r24
    2f64:	7f 91       	pop	r23
    2f66:	6f 91       	pop	r22
    2f68:	5f 91       	pop	r21
    2f6a:	4f 91       	pop	r20
    2f6c:	3f 91       	pop	r19
    2f6e:	2f 91       	pop	r18
    2f70:	0f 90       	pop	r0
    2f72:	0b be       	out	0x3b, r0	; 59
    2f74:	0f 90       	pop	r0
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	0f 90       	pop	r0
    2f7a:	1f 90       	pop	r1
    2f7c:	18 95       	reti

00002f7e <_exit>:
    2f7e:	f8 94       	cli

00002f80 <__stop_program>:
    2f80:	ff cf       	rjmp	.-2      	; 0x2f80 <__stop_program>
