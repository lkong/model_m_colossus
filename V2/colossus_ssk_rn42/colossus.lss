
colossus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  000063fc  00006490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000063fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f1  0080020e  0080020e  0000659e  2**0
                  ALLOC
  3 .noinit       00000004  008003ff  008003ff  0000659e  2**0
                  ALLOC
  4 .stab         00002b14  00000000  00000000  000065a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000004ee  00000000  00000000  000090b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000095a2  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000bb8  00000000  00000000  000095b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00011b17  00000000  00000000  0000a16b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004945  00000000  00000000  0001bc82  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000063a0  00000000  00000000  000205c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000020a8  00000000  00000000  00026968  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000047fc  00000000  00000000  00028a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009ca2  00000000  00000000  0002d20c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d60  00000000  00000000  00036eae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__ctors_end>
       4:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
       8:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
       c:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      10:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      14:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      18:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      1c:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      20:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      24:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      28:	0c 94 47 19 	jmp	0x328e	; 0x328e <__vector_10>
      2c:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__vector_11>
      30:	0c 94 60 28 	jmp	0x50c0	; 0x50c0 <__vector_12>
      34:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      38:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      3c:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      40:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      44:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      48:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      4c:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      50:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      54:	0c 94 df 28 	jmp	0x51be	; 0x51be <__vector_21>
      58:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      5c:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      60:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      64:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__vector_25>

	ParserData->TotalDeviceReports = 1;
      68:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      6c:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      70:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      74:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      78:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      7c:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      80:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      84:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      88:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      8c:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      90:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      94:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__bad_interrupt>
      98:	b4 11       	cpse	r27, r4
      9a:	b9 11       	cpse	r27, r9
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      9c:	be 11       	cpse	r27, r14
      9e:	c3 11       	cpse	r28, r3
      a0:	c8 11       	cpse	r28, r8
      a2:	cd 11       	cpse	r28, r13
      a4:	d2 11       	cpse	r29, r2
      a6:	d7 11       	cpse	r29, r7
      a8:	dc 11       	cpse	r29, r12
      aa:	e1 11       	cpse	r30, r1
      ac:	e6 11       	cpse	r30, r6

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      ae:	eb 11       	cpse	r30, r11
      b0:	f0 11       	cpse	r31, r0
      b2:	f5 11       	cpse	r31, r5
      b4:	fa 11       	cpse	r31, r10
      b6:	ff 11       	cpse	r31, r15
      b8:	04 12       	cpse	r0, r20
      ba:	09 12       	cpse	r0, r25
      bc:	0e 12       	cpse	r0, r30
      be:	13 12       	cpse	r1, r19
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      c0:	18 12       	cpse	r1, r24
	{
		uint8_t  HIDReportItem  = *ReportData;
      c2:	1d 12       	cpse	r1, r29
      c4:	22 12       	cpse	r2, r18
      c6:	27 12       	cpse	r2, r23
      c8:	2c 12       	cpse	r2, r28
      ca:	31 12       	cpse	r3, r17
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;
      cc:	36 12       	cpse	r3, r22
      ce:	3b 12       	cpse	r3, r27

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      d0:	40 12       	cpse	r4, r16
      d2:	45 12       	cpse	r4, r21
      d4:	4a 12       	cpse	r4, r26
      d6:	4f 12       	cpse	r4, r31
      d8:	54 12       	cpse	r5, r20
      da:	59 12       	cpse	r5, r25
      dc:	5e 12       	cpse	r5, r30
      de:	63 12       	cpse	r6, r19
      e0:	b2 11       	cpse	r27, r2
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      e2:	ad 12       	cpse	r10, r29
      e4:	68 12       	cpse	r6, r24
      e6:	6a 12       	cpse	r6, r26
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
      e8:	6c 12       	cpse	r6, r28
      ea:	6e 12       	cpse	r6, r30
      ec:	73 12       	cpse	r7, r19
      ee:	78 12       	cpse	r7, r24
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
      f0:	7d 12       	cpse	r7, r29
      f2:	82 12       	cpse	r8, r18
      f4:	87 12       	cpse	r8, r23
      f6:	8b 12       	cpse	r8, r27
      f8:	90 12       	cpse	r9, r16
      fa:	95 12       	cpse	r9, r21
      fc:	9a 12       	cpse	r9, r26
      fe:	9f 12       	cpse	r9, r31
     100:	a4 12       	cpse	r10, r20
     102:	ab 12       	cpse	r10, r27
     104:	ab 12       	cpse	r10, r27
     106:	ab 12       	cpse	r10, r27
     108:	ab 12       	cpse	r10, r27
     10a:	ab 12       	cpse	r10, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     10c:	ab 12       	cpse	r10, r27
     10e:	ab 12       	cpse	r10, r27
     110:	ab 12       	cpse	r10, r27
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     112:	ab 12       	cpse	r10, r27
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     114:	ab 12       	cpse	r10, r27
     116:	ab 12       	cpse	r10, r27
     118:	ab 12       	cpse	r10, r27
     11a:	ab 12       	cpse	r10, r27
     11c:	ab 12       	cpse	r10, r27
     11e:	ab 12       	cpse	r10, r27
     120:	ab 12       	cpse	r10, r27
     122:	ab 12       	cpse	r10, r27
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     124:	ab 12       	cpse	r10, r27
     126:	ab 12       	cpse	r10, r27
     128:	a9 12       	cpse	r10, r25

0000012a <fn_actions>:
     12a:	02 f0 00 f0 01 f0 39 a3 f1 a4                       ......9...

00000134 <keymaps>:
     134:	00 00 00 00 00 05 2c 11 e5 00 38 51 4f 00 50 e6     ......,...8QO.P.
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
				break;
     144:	e4 e5 1d 1b 06 19 28 10 36 37 31 00 00 00 c0 00     ......(.671.....

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     154:	00 00 04 16 07 09 31 0d 0e 0f 33 00 00 00 00 00     ......1...3.....
     164:	00 00 14 1a 08 15 31 18 0c 12 13 00 00 00 00 c1     ......1.........
				ReportSize     -= 2;
				ReportData     += 2;
				break;
     174:	00 00 1e 1f 20 21 43 24 25 26 27 44 45 4e 4d 47     .... !C$%&'DENMG

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
				ReportSize     -= 1;
     184:	e0 00 35 3a 3b 22 42 23 2e 41 2d 4c 49 4b 4a 00     ..5:;"B#.A-LIKJ.
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     194:	00 e1 2b c3 3c 17 2a 1c 30 40 2f 00 00 00 00 00     ..+.<.*.0@/.....
     1a4:	00 00 29 64 3d 0a 3e 0b 3f 00 34 00 00 00 52 e2     ..)d=.>.?.4...R.
     1b4:	00 00 00 00 00 01 01 01 01 00 54 01 01 00 01 01     ..........T.....
     1c4:	01 01 01 01 01 01 58 62 85 63 01 00 00 00 01 00     ......Xb.c......
     1d4:	00 00 01 01 01 01 01 59 5a 5b 55 00 00 00 00 00     .......YZ[U.....
     1e4:	00 00 01 01 01 01 01 5c 5d 5e 01 00 00 00 00 c2     .......\]^......
     1f4:	00 00 01 01 01 01 01 5f 60 61 01 01 01 01 01 01     ......._`a......
     204:	01 00 01 01 01 01 01 01 57 01 56 01 01 01 01 00     ........W.V.....
     214:	00 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
     224:	00 00 01 01 01 01 01 01 01 00 01 00 00 00 01 01     ................
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     234:	00 00 00 00 00 01 01 01 01 00 01 01 01 00 01 01     ................
     244:	c4 01 01 01 01 01 01 01 01 01 01 00 00 00 01 00     ................

				CurrStateTable++;
				break;

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     254:	00 00 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     264:	00 00 01 01 01 01 01 01 01 01 01 00 00 00 00 01     ................
				break;

			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
				break;
     274:	00 00 01 01 01 01 01 01 01 01 01 01 01 f3 f1 01     ................

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
				break;
     284:	01 00 01 01 01 01 01 01 01 01 01 f2 f4 f5 f0 00     ................
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     294:	00 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
				break;

			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     2a4:	00 00 01 01 01 01 01 01 01 00 01 00 00 00 01 01     ................
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2b4:	00 00 00 00 00 01 01 01 01 00 01 a8 a9 00 aa e7     ................
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
     2c4:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 c5 00     ................

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     2d4:	00 00 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2e4:	00 00 01 01 01 01 01 01 01 01 01 00 00 00 00 01     ................
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2f4:	00 00 01 01 01 01 b0 01 01 01 01 ac ab 01 01 01     ................
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     304:	01 00 01 01 01 01 01 01 01 01 01 01 01 01 01 00     ................

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     314:	00 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     324:	00 00 01 01 01 01 01 01 01 00 01 00 00 00 01 e3     ................
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     334:	00 00 00 00 00 01 01 01 01 00 01 01 01 00 01 01     ................
					}
				}

				ParserData->UsingReportIDs = true;
     344:	01 01 01 01 01 01 01 01 01 01 01 00 00 00 01 00     ................

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     354:	00 00 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     364:	00 00 01 01 01 01 01 01 01 01 01 00 00 00 00 01     ................
     374:	00 00 01 01 01 01 01 01 01 01 01 01 01 01 fa 01     ................
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     384:	01 00 01 01 01 01 01 01 01 01 01 01 01 01 f9 00     ................
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     394:	00 01 01 01 01 01 01 01 01 01 01 00 00 00 00 00     ................

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3a4:	00 00 01 01 01 01 01 01 01 00 01 00 00 00 01 01     ................

000003b4 <__c.2266>:
     3b4:	50 00                                               P.

000003b6 <__c.2268>:
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3b6:	52 00                                               R.

000003b8 <__c.2270>:
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3b8:	69 00                                               i.

000003ba <__c.1778>:
     3ba:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

000003c4 <__c.1780>:
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3c4:	25 30 32 58 00                                      %02X.

000003c9 <__c.1782>:
				}

				CurrCollectionPath->Type       = ReportItemData;
     3c9:	0a 00                                               ..

000003cb <__c.1804>:
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     3cb:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A

				if (UsageListSize)
     3db:	42 43 44 45 46 0a 00                                BCDEF..

000003e2 <__c.1807>:
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     3e2:	25 30 32 58 00                                      %02X.

000003e7 <__c.1809>:
     3e7:	3a 20 00                                            : .

000003ea <__c.1811>:
     3ea:	25 30 31 36 62 00                                   %016b.

000003f0 <__c.1813>:
     3f0:	0a 00                                               ..

000003f2 <__c.4633>:
     3f2:	25 63 00                                            %c.

000003f5 <__c.4635>:
     3f5:	20 25 30 32 58 00                                    %02X.

000003fb <__c.4641>:

					for (uint8_t i = 1; i < UsageListSize; i++)
     3fb:	4c 45 44 20 73 74 61 74 75 73 3a 20 25 30 32 58     LED status: %02X
     40b:	0a 00                                               ..

0000040d <__c.4655>:
     40d:	25 30 32 75 3a 25 30 32 75 3a 25 30 32 75 09 25     %02u:%02u:%02u.%
					  UsageList[i - 1] = UsageList[i];

					UsageListSize--;
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     41d:	75 6d 56 0a 00                                      umV..

00000422 <__c.4788>:
     422:	0a 0a 2d 2d 2d 2d 2d 20 42 6c 75 65 74 6f 6f 74     ..----- Bluetoot
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     432:	68 20 52 4e 2d 34 32 20 48 65 6c 70 20 2d 2d 2d     h RN-42 Help ---
     442:	2d 2d 0a 00                                         --..

00000446 <__c.4790>:
     446:	69 3a 20 20 20 20 20 20 20 52 4e 2d 34 32 20 69     i:       RN-42 i
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
     456:	6e 66 6f 0a 00                                      nfo..

0000045b <__c.4792>:
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     45b:	62 3a 20 20 20 20 20 20 20 62 61 74 74 65 72 79     b:       battery
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     46b:	20 76 6f 6c 74 61 67 65 0a 00                        voltage..

00000475 <__c.4794>:
					NewReportItem.CollectionPath = CurrCollectionPath;
     475:	44 65 6c 3a 20 20 20 20 20 65 6e 74 65 72 2f 65     Del:     enter/e
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
     485:	78 69 74 20 52 4e 2d 34 32 20 63 6f 6e 66 69 67     xit RN-42 config
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     495:	20 6d 6f 64 65 0a 00                                 mode..

0000049c <__c.4796>:
     49c:	53 6c 63 6b 3a 20 20 20 20 52 4e 2d 34 32 20 69     Slck:    RN-42 i

						for (uint8_t i = 1; i < UsageListSize; i++)
     4ac:	6e 69 74 69 61 6c 69 7a 65 0a 00                    nitialize..

000004b7 <__c.4798>:
						  UsageList[i - 1] = UsageList[i];

						UsageListSize--;
     4b7:	31 2d 34 3a 20 20 20 20 20 72 65 73 74 6f 72 65     1-4:     restore
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4c7:	20 6c 69 6e 6b 0a 00                                 link..

000004ce <__c.4800>:
     4ce:	46 31 2d 46 34 3a 20 20 20 73 74 6f 72 65 20 6c     F1-F4:   store l
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     4de:	69 6e 6b 0a 00                                      ink..

000004e3 <__c.4802>:
     4e3:	70 3a 20 20 20 20 20 20 20 70 61 69 72 69 6e 67     p:       pairing

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     4f3:	0a 00                                               ..

000004f5 <__c.4804>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     4f5:	75 3a 20 20 20 20 20 20 20 74 6f 67 67 6c 65 20     u:       toggle 
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     505:	46 6f 72 63 65 20 55 53 42 20 6d 6f 64 65 0a 00     Force USB mode..

00000515 <__c.4816>:

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     515:	0a 2d 2d 2d 2d 2d 20 52 4e 2d 34 32 20 69 6e 66     .----- RN-42 inf

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     525:	6f 20 2d 2d 2d 2d 2d 0a 00                          o -----..

0000052e <__c.4818>:
     52e:	70 72 6f 74 6f 63 6f 6c 3a 20 25 73 0a 00           protocol: %s..

0000053c <__c.4820>:
     53c:	66 6f 72 63 65 5f 75 73 62 3a 20 25 58 0a 00        force_usb: %X..

0000054b <__c.4822>:
     54b:	72 6e 34 32 3a 20 25 73 0a 00                       rn42: %s..

00000555 <__c.4824>:
     555:	72 6e 34 32 5f 61 75 74 6f 63 6f 6e 6e 65 63 74     rn42_autoconnect

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     565:	69 6e 67 28 29 3a 20 25 58 0a 00                    ing(): %X..

00000570 <__c.4826>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     570:	63 6f 6e 66 69 67 5f 6d 6f 64 65 3a 20 25 58 0a     config_mode: %X.
     580:	00                                                  .

00000581 <__c.4828>:
     581:	55 53 42 20 53 74 61 74 65 3a 20 25 73 0a 00        USB State: %s..

00000590 <__c.4830>:
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     590:	62 61 74 74 65 72 79 3a 20 00                       battery: .

0000059a <__c.4833>:
     59a:	46 55 4c 4c 00                                      FULL.

0000059f <__c.4837>:
     59f:	43 48 41 52 47 00                                   CHARG.

000005a5 <__c.4840>:
     5a5:	44 49 53 43 48 47 00                                DISCHG.

000005ac <__c.4843>:
     5ac:	4c 4f 57 00                                         LOW.

000005b0 <__c.4846>:
     5b0:	3f 00                                               ?.

000005b2 <__c.4848>:
     5b2:	0a 00                                               ..

000005b4 <__c.4850>:
     5b4:	52 65 6d 6f 74 65 57 61 6b 65 75 70 45 6e 61 62     RemoteWakeupEnab
     5c4:	6c 65 64 3a 20 25 58 0a 00                          led: %X..

000005cd <__c.4852>:
     5cd:	56 42 55 53 3a 20 25 58 0a 00                       VBUS: %X..

000005d7 <__c.4858>:
     5d7:	75 70 74 69 6d 65 3a 20 25 30 32 75 20 25 30 32     uptime: %02u %02
     5e7:	75 3a 25 30 32 75 3a 25 30 32 75 0a 00              u:%02u:%02u..

000005f4 <__c.4860>:
     5f4:	4c 49 4e 4b 30 3a 20 25 73 0d 0a 00                 LINK0: %s...

00000600 <__c.4862>:
     600:	4c 49 4e 4b 31 3a 20 25 73 0d 0a 00                 LINK1: %s...

0000060c <__c.4864>:
     60c:	4c 49 4e 4b 32 3a 20 25 73 0d 0a 00                 LINK2: %s...

00000618 <__c.4866>:
     618:	4c 49 4e 4b 33 3a 20 25 73 0d 0a 00                 LINK3: %s...

00000624 <__c.4869>:
     624:	42 41 54 3a 20 25 75 6d 56 09 00                    BAT: %umV..

0000062f <__c.4871>:
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     62f:	25 30 32 75 3a 00                                   %02u:.

00000635 <__c.4873>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     635:	25 30 32 75 3a 00                                   %02u:.

0000063b <__c.4875>:
     63b:	25 30 32 75 0a 00                                   %02u..

00000641 <__c.4878>:
     641:	41 75 74 6f 20 6d 6f 64 65 0a 00                    Auto mode..

0000064c <__c.4880>:
     64c:	55 53 42 20 6d 6f 64 65 0a 00                       USB mode..

00000656 <__c.4777>:
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     656:	53 52 2c 5a 0d 0a 00                                SR,Z...

0000065d <__c.4779>:
     65d:	52 2c 31 0d 0a 00                                   R,1...

00000663 <__c.4687>:

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     663:	25 73 0d 0a 00                                      %s...

00000668 <__c.4662>:
     668:	25 63 00                                            %c.

0000066b <__c.4732>:
     66b:	47 52 0d 0a 00                                      GR...

00000670 <__c.4735>:
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     670:	25 73 28 25 64 29 0d 0a 00                          %s(%d)...

00000679 <__c.4738>:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     679:	25 63 20 00                                         %c .

0000067d <__c.4743>:
     67d:	0d 0a 00                                            ...

00000680 <__c.4748>:
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     680:	53 52 2c 5a 0d 0a 00                                SR,Z...

00000687 <__c.4750>:
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     687:	53 52 2c 00                                         SR,.

0000068b <__c.4754>:
     68b:	25 63 20 00                                         %c .

0000068f <__c.4759>:
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     68f:	0d 0a 00                                            ...

00000692 <__c.4761>:
     692:	0d 0a 00                                            ...

00000695 <__c.4763>:
	  return HID_PARSE_NoUnfilteredReportItems;
     695:	52 2c 31 0d 0a 00                                   R,1...

0000069b <__c.4692>:

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     69b:	45 6e 74 65 72 69 6e 67 20 63 6f 6e 66 69 67 20     Entering config 

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ab:	6d 6f 64 65 20 2e 2e 2e 0a 00                       mode .....

000006b5 <__c.4694>:
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     6b5:	24 24 24 00                                         $$$.

000006b9 <__c.4697>:
     6b9:	76 0d 0a 00                                         v...

000006bd <__c.4699>:

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6bd:	2b 0d 0a 00                                         +...

000006c1 <__c.4704>:
     6c1:	45 78 69 74 69 6e 67 20 63 6f 6e 66 69 67 20 6d     Exiting config m
     6d1:	6f 64 65 20 2e 2e 2e 0a 00                          ode .....

000006da <__c.4706>:
     6da:	2d 2d 2d 0d 0a 00                                   ---...

000006e0 <__c.4711>:
     6e0:	53 46 2c 31 0d 0a 00                                SF,1...

000006e7 <__c.4713>:
     6e7:	53 2d 2c 54 6d 6b 42 54 0d 0a 00                    S-,TmkBT...

000006f2 <__c.4715>:
     6f2:	53 53 2c 4b 65 79 62 6f 61 72 64 2f 4d 6f 75 73     SS,Keyboard/Mous
     702:	65 0d 0a 00                                         e...

00000706 <__c.4717>:
     706:	53 4d 2c 34 0d 0a 00                                SM,4...

0000070d <__c.4719>:
     70d:	53 57 2c 38 30 30 30 0d 0a 00                       SW,8000...

00000717 <__c.4721>:
     717:	53 7e 2c 36 0d 0a 00                                S~,6...

0000071e <__c.4723>:
     71e:	53 48 2c 30 30 33 43 0d 0a 00                       SH,003C...

00000728 <__c.4725>:
     728:	53 59 2c 46 46 46 34 0d 0a 00                       SY,FFF4...

00000732 <__c.4727>:
     732:	52 2c 31 0d 0a 00                                   R,1...

00000738 <__c.4579>:
     738:	0a 55 53 42 20 69 6e 69 74 0a 00                    .USB init..

00000743 <__c.4581>:
     743:	52 4e 2d 34 32 20 69 6e 69 74 0a 00                 RN-42 init..

0000074f <__c.4583>:
     74f:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 0a 00     Keyboard start..

0000075f <__c.4585>:
     75f:	5b 73 5d 00                                         [s].

00000763 <__c.4560>:
     763:	5b 43 5d 00                                         [C].

00000767 <__c.4565>:
     767:	5b 44 5d 00                                         [D].

0000076b <__c.4570>:
     76b:	5b 52 5d 00                                         [R].

0000076f <__c.4574>:
     76f:	5b 53 5d 00                                         [S].

00000773 <__c.4578>:
     773:	5b 57 5d 00                                         [W].

00000777 <ProductString>:
     777:	1c 03 4d 00 6f 00 64 00 65 00 6c 00 4d 00 53 00     ..M.o.d.e.l.M.S.
     787:	53 00 4b 00 56 00 32 00 2e 00 30 00 00 00           S.K.V.2...0...

00000795 <ManufacturerString>:
     795:	1a 03 50 00 68 00 6f 00 73 00 70 00 68 00 6f 00     ..P.h.o.s.p.h.o.
     7a5:	72 00 47 00 6c 00 6f 00 77 00 00 00                 r.G.l.o.w...

000007b1 <LanguageString>:
     7b1:	04 03 09 04                                         ....

000007b5 <ConfigurationDescriptor>:
     7b5:	09 02 74 00 04 01 00 a0 32 09 04 00 00 01 03 01     ..t.....2.......
     7c5:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     7d5:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     7e5:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     7f5:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     805:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     815:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     825:	03 20 00 01                                         . ..

00000829 <DeviceDescriptor>:
     829:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
     839:	00 01                                               ..

0000083b <ConsoleReport>:
     83b:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     84b:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     85b:	02 c0                                               ..

0000085d <ExtrakeyReport>:
     85d:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     86d:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     87d:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     88d:	10 95 01 81 00 c0                                   ......

00000893 <MouseReport>:
     893:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     8a3:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     8b3:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     8c3:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     8d3:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000008e0 <KeyboardReport>:
     8e0:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     8f0:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     900:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     910:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

00000920 <__c.1908>:
     920:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     930:	20 00                                                .

00000932 <__c.1911>:
     932:	25 30 32 58 20 00                                   %02X .

00000938 <__c.1916>:
     938:	0a 00                                               ..

0000093a <__c.2268>:
     93a:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

00000945 <__c.1961>:
     945:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     955:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     965:	20 5b 00                                             [.

00000968 <__c.1963>:
     968:	25 30 32 58 00                                      %02X.

0000096d <__c.1965>:
     96d:	7c 00                                               |.

0000096f <__c.1967>:
     96f:	25 64 00                                            %d.

00000972 <__c.1969>:
     972:	20 00                                                .

00000974 <__c.1971>:
     974:	25 64 00                                            %d.

00000977 <__c.1973>:
     977:	20 00                                                .

00000979 <__c.1975>:
     979:	25 64 00                                            %d.

0000097c <__c.1977>:
     97c:	20 00                                                .

0000097e <__c.1979>:
     97e:	25 64 00                                            %d.

00000981 <__c.1981>:
     981:	5d 28 00                                            ](.

00000984 <__c.1983>:
     984:	25 75 00                                            %u.

00000987 <__c.1985>:
     987:	2f 00                                               /.

00000989 <__c.1987>:
     989:	25 75 00                                            %u.

0000098c <__c.1989>:
     98c:	29 0a 00                                            )..

0000098f <__c.2429>:
     98f:	43 3e 20 00                                         C> .

00000993 <__c.2432>:
     993:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     9a3:	00                                                  .

000009a4 <__c.2435>:
     9a4:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

000009b1 <__c.2437>:
     9b1:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

000009bd <__c.2440>:
     9bd:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

000009ca <__c.2442>:
     9ca:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

000009d8 <__c.2445>:
     9d8:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

000009e7 <__c.2447>:
     9e7:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

000009f7 <__c.2450>:
     9f7:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000a03 <__c.2452>:
     a03:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000a10 <__c.2455>:
     a10:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000a1f <__c.2457>:
     a1f:	44 45 53 43 3a 20 43 6f 6c 6f 73 73 75 73 20 4d     DESC: Colossus M
     a2f:	6f 64 65 6c 20 4d 20 43 6f 6e 74 72 6f 6c 6c 65     odel M Controlle
     a3f:	72 20 56 32 2e 30 0a 00                             r V2.0..

00000a47 <__c.2459>:
     a47:	56 49 44 3a 20 30 78 46 45 45 44 28 50 68 6f 73     VID: 0xFEED(Phos
     a57:	70 68 6f 72 47 6c 6f 77 29 20 50 49 44 3a 20 30     phorGlow) PID: 0
     a67:	78 36 30 36 30 28 4d 6f 64 65 6c 4d 53 53 4b 56     x6060(ModelMSSKV
     a77:	32 2e 30 29 20 56 45 52 3a 20 30 78 30 30 30 31     2.0) VER: 0x0001
     a87:	0a 00                                               ..

00000a89 <__c.2461>:
     a89:	42 55 49 4c 44 3a 20 38 38 37 38 65 65 64 2d 64     BUILD: 8878eed-d
     a99:	69 72 74 79 20 28 30 37 3a 30 34 3a 34 37 20 53     irty (07:04:47 S
     aa9:	65 70 20 20 37 20 32 30 31 36 29 0a 00              ep  7 2016)..

00000ab6 <__c.2463>:
     ab6:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 4d 4f     OPTIONS: LUFA MO
     ac6:	55 53 45 4b 45 59 20 45 58 54 52 41 4b 45 59 20     USEKEY EXTRAKEY 
     ad6:	43 4f 4e 53 4f 4c 45 20 43 4f 4d 4d 41 4e 44 20     CONSOLE COMMAND 
     ae6:	38 31 39 32 0a 00                                   8192..

00000aec <__c.2465>:
     aec:	47 43 43 3a 20 34 2e 37 2e 31 20 41 56 52 2d 4c     GCC: 4.7.1 AVR-L
     afc:	49 42 43 3a 20 31 2e 38 2e 30 20 41 56 52 5f 41     IBC: 1.8.0 AVR_A
     b0c:	52 43 48 3a 20 61 76 72 35 31 0a 00                 RCH: avr51..

00000b18 <__c.2468>:
     b18:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000b26 <__c.2470>:
     b26:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     b36:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000b40 <__c.2472>:
     b40:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     b50:	6c 3a 20 25 58 0a 00                                l: %X..

00000b57 <__c.2474>:
     b57:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     b67:	58 0a 00                                            X..

00000b6a <__c.2476>:
     b6a:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     b7a:	25 30 34 6c 58 0a 00                                %04lX..

00000b81 <__c.2485>:
     b81:	3f 00                                               ?.

00000b83 <__c.2420>:
     b83:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     b93:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     ba3:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     bb3:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     bc3:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     bd3:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     be3:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     bf3:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     c03:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     c13:	72 0a 00                                            r..

00000c16 <__c.2490>:
     c16:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     c26:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     c36:	73 65 6b 65 79 0a 00                                sekey..

00000c3d <__c.2650>:
     c3d:	4c 25 64 0a 00                                      L%d..

00000c42 <__c.2506>:
     c42:	43 3e 20 00                                         C> .

00000c46 <__c.2501>:
     c46:	4d 3e 20 00                                         M> .

00000c4a <__c.2504>:
     c4a:	3f 00                                               ?.

00000c4c <__c.2599>:
     c4c:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     c5c:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     c6c:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     c7c:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     c8c:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     c9c:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     cac:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     cbc:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     ccc:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     cdc:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     cec:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     cfc:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     d0c:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     d1c:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     d2c:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     d3c:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000d47 <__c.2601>:
     d47:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     d57:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     d67:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     d77:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     d87:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000d95 <__c.2611>:
     d95:	43 3e 20 00                                         C> .

00000d99 <__c.2625>:
     d99:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000da6 <__c.2628>:
     da6:	3f 00                                               ?.

00000da8 <__c.2630>:
     da8:	4d 25 64 3e 20 00                                   M%d> .

00000dae <__c.2632>:
     dae:	4d 3e 00                                            M>.

00000db1 <__c.2512>:
     db1:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

00000dbf <__c.2514>:
     dbf:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     dcf:	20 00                                                .

00000dd1 <__c.2516>:
     dd1:	25 75 00                                            %u.

00000dd4 <__c.2518>:
     dd4:	0a 00                                               ..

00000dd6 <__c.2520>:
     dd6:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     de6:	20 00                                                .

00000de8 <__c.2522>:
     de8:	25 75 00                                            %u.

00000deb <__c.2524>:
     deb:	0a 00                                               ..

00000ded <__c.2526>:
     ded:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000dfc <__c.2528>:
     dfc:	25 75 00                                            %u.

00000dff <__c.2530>:
     dff:	0a 00                                               ..

00000e01 <__c.2532>:
     e01:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     e11:	00                                                  .

00000e12 <__c.2534>:
     e12:	25 75 00                                            %u.

00000e15 <__c.2536>:
     e15:	0a 00                                               ..

00000e17 <__c.2538>:
     e17:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     e27:	65 64 3a 20 00                                      ed: .

00000e2c <__c.2540>:
     e2c:	25 75 00                                            %u.

00000e2f <__c.2542>:
     e2f:	0a 00                                               ..

00000e31 <__c.2544>:
     e31:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     e41:	5f 6d 61 78 3a 20 00                                _max: .

00000e48 <__c.2546>:
     e48:	25 75 00                                            %u.

00000e4b <__c.2548>:
     e4b:	0a 00                                               ..

00000e4d <__c.2555>:
     e4d:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000e5c <__c.2559>:
     e5c:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     e6c:	0a 00                                               ..

00000e6e <__c.2562>:
     e6e:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     e7e:	64 0a 00                                            d..

00000e81 <__c.2565>:
     e81:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     e91:	20 25 64 0a 00                                       %d..

00000e96 <__c.2568>:
     e96:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     ea6:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000eaf <__c.2571>:
     eaf:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     ebf:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000eca <__c.2578>:
     eca:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000ed9 <__c.2582>:
     ed9:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     ee9:	0a 00                                               ..

00000eeb <__c.2585>:
     eeb:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     efb:	64 0a 00                                            d..

00000efe <__c.2588>:
     efe:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     f0e:	20 25 64 0a 00                                       %d..

00000f13 <__c.2591>:
     f13:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     f23:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000f2c <__c.2594>:
     f2c:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     f3c:	5f 6d 61 78 20 3d 20 25 64 0a 00 00                 _max = %d...

00000f48 <__ctors_end>:
     f48:	11 24       	eor	r1, r1
     f4a:	1f be       	out	0x3f, r1	; 63
     f4c:	cf ef       	ldi	r28, 0xFF	; 255
     f4e:	d0 e2       	ldi	r29, 0x20	; 32
     f50:	de bf       	out	0x3e, r29	; 62
     f52:	cd bf       	out	0x3d, r28	; 61

00000f54 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     f54:	04 b6       	in	r0, 0x34	; 52
     f56:	03 fe       	sbrs	r0, 3
     f58:	24 c0       	rjmp	.+72     	; 0xfa2 <__do_copy_data>
     f5a:	80 91 ff 03 	lds	r24, 0x03FF
     f5e:	90 91 00 04 	lds	r25, 0x0400
     f62:	a0 91 01 04 	lds	r26, 0x0401
     f66:	b0 91 02 04 	lds	r27, 0x0402
     f6a:	87 30       	cpi	r24, 0x07	; 7
     f6c:	90 4b       	sbci	r25, 0xB0	; 176
     f6e:	a7 40       	sbci	r26, 0x07	; 7
     f70:	b0 4b       	sbci	r27, 0xB0	; 176
     f72:	b9 f4       	brne	.+46     	; 0xfa2 <__do_copy_data>
        reset_key = 0;
     f74:	10 92 ff 03 	sts	0x03FF, r1
     f78:	10 92 00 04 	sts	0x0400, r1
     f7c:	10 92 01 04 	sts	0x0401, r1
     f80:	10 92 02 04 	sts	0x0402, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     f84:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     f86:	84 b7       	in	r24, 0x34	; 52
     f88:	87 7f       	andi	r24, 0xF7	; 247
     f8a:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     f8c:	88 e1       	ldi	r24, 0x18	; 24
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	80 93 60 00 	sts	0x0060, r24
     f96:	10 92 60 00 	sts	0x0060, r1
     f9a:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     f9c:	e0 e0       	ldi	r30, 0x00	; 0
     f9e:	f0 ef       	ldi	r31, 0xF0	; 240
     fa0:	09 95       	icall

00000fa2 <__do_copy_data>:
     fa2:	12 e0       	ldi	r17, 0x02	; 2
     fa4:	a0 e0       	ldi	r26, 0x00	; 0
     fa6:	b1 e0       	ldi	r27, 0x01	; 1
     fa8:	ec ef       	ldi	r30, 0xFC	; 252
     faa:	f3 e6       	ldi	r31, 0x63	; 99
     fac:	00 e0       	ldi	r16, 0x00	; 0
     fae:	0b bf       	out	0x3b, r16	; 59
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <__do_copy_data+0x14>
     fb2:	07 90       	elpm	r0, Z+
     fb4:	0d 92       	st	X+, r0
     fb6:	ae 30       	cpi	r26, 0x0E	; 14
     fb8:	b1 07       	cpc	r27, r17
     fba:	d9 f7       	brne	.-10     	; 0xfb2 <__do_copy_data+0x10>

00000fbc <__do_clear_bss>:
     fbc:	13 e0       	ldi	r17, 0x03	; 3
     fbe:	ae e0       	ldi	r26, 0x0E	; 14
     fc0:	b2 e0       	ldi	r27, 0x02	; 2
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <.do_clear_bss_start>

00000fc4 <.do_clear_bss_loop>:
     fc4:	1d 92       	st	X+, r1

00000fc6 <.do_clear_bss_start>:
     fc6:	af 3f       	cpi	r26, 0xFF	; 255
     fc8:	b1 07       	cpc	r27, r17
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <.do_clear_bss_loop>
     fcc:	0e 94 d6 13 	call	0x27ac	; 0x27ac <main>
     fd0:	0c 94 fc 31 	jmp	0x63f8	; 0x63f8 <_exit>

00000fd4 <__bad_interrupt>:
     fd4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000fd8 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     fd8:	ff 93       	push	r31
	push	ZL
     fda:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     fdc:	e0 91 0e 02 	lds	r30, 0x020E
	lds	ZH, xfunc_out+1	;/
     fe0:	f0 91 0f 02 	lds	r31, 0x020F
	sbiw	ZL, 0		;Skip if null
     fe4:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     fe6:	09 f0       	breq	.+2      	; 0xfea <xputc+0x12>
	icall
     fe8:	09 95       	icall
2:	pop	ZL
     fea:	ef 91       	pop	r30
	pop	ZH
     fec:	ff 91       	pop	r31
	ret
     fee:	08 95       	ret

00000ff0 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     ff0:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     ff2:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     ff4:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     ff6:	11 f0       	breq	.+4      	; 0xffc <xputs+0xc>
	rcall	xputc
     ff8:	ef df       	rcall	.-34     	; 0xfd8 <xputc>
	rjmp	1b
     ffa:	fb cf       	rjmp	.-10     	; 0xff2 <xputs+0x2>
2:	ret
     ffc:	08 95       	ret

00000ffe <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     ffe:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    1000:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    1002:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    1004:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    1006:	0c c0       	rjmp	.+24     	; 0x1020 <xitoa+0x22>
	neg	r20		;
    1008:	41 95       	neg	r20
	sbrs	r25, 7		;
    100a:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    100c:	09 c0       	rjmp	.+18     	; 0x1020 <xitoa+0x22>
	ldi	r30, '-'	;
    100e:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    1010:	60 95       	com	r22
	com	r23		;
    1012:	70 95       	com	r23
	com	r24		;
    1014:	80 95       	com	r24
	com	r25		;
    1016:	90 95       	com	r25
	adc	r22, r1		;
    1018:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    101a:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    101c:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    101e:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    1020:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <xitoa+0x2a>
	neg	r18		;
    1024:	21 95       	neg	r18
	ldi	r19, '0'	;/
    1026:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    1028:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    102a:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    102c:	66 0f       	add	r22, r22
	rol	r23		;
    102e:	77 1f       	adc	r23, r23
	rol	r24		;
    1030:	88 1f       	adc	r24, r24
	rol	r25		;
    1032:	99 1f       	adc	r25, r25
	rol	r26		;
    1034:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    1036:	a4 17       	cp	r26, r20
	brcs	3f		;
    1038:	10 f0       	brcs	.+4      	; 0x103e <xitoa+0x40>
	sub	r26, r20	;
    103a:	a4 1b       	sub	r26, r20
	inc	r22		;
    103c:	63 95       	inc	r22
3:	dec	r21		;
    103e:	5a 95       	dec	r21
	brne	2b		;/
    1040:	a9 f7       	brne	.-22     	; 0x102c <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    1042:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    1044:	08 f0       	brcs	.+2      	; 0x1048 <xitoa+0x4a>
	subi	r26, -7		;
    1046:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    1048:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    104a:	af 93       	push	r26
	inc	r31		;/
    104c:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    104e:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    1050:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    1052:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    1054:	91 05       	cpc	r25, r1
	brne	1b		;/
    1056:	41 f7       	brne	.-48     	; 0x1028 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    1058:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    105a:	11 f4       	brne	.+4      	; 0x1060 <xitoa+0x62>
	push	r30		;
    105c:	ef 93       	push	r30
	inc	r31		;/
    105e:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    1060:	f2 17       	cp	r31, r18
	brcc	6f		;
    1062:	18 f4       	brcc	.+6      	; 0x106a <xitoa+0x6c>
	push	r19		;
    1064:	3f 93       	push	r19
	inc	r31		;
    1066:	f3 95       	inc	r31
	rjmp	5b		;/
    1068:	fb cf       	rjmp	.-10     	; 0x1060 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    106a:	8f 91       	pop	r24
	rcall	xputc		;
    106c:	b5 df       	rcall	.-150    	; 0xfd8 <xputc>
	dec	r31		;
    106e:	fa 95       	dec	r31
	brne	6b		;/
    1070:	e1 f7       	brne	.-8      	; 0x106a <xitoa+0x6c>

	ret
    1072:	08 95       	ret

00001074 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
    1074:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    1076:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    1078:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    107a:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    107c:	21 f0       	breq	.+8      	; 0x1086 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
    107e:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    1080:	19 f0       	breq	.+6      	; 0x1088 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
    1082:	aa df       	rcall	.-172    	; 0xfd8 <xputc>
	rjmp	0b		;/
    1084:	f9 cf       	rjmp	.-14     	; 0x1078 <xvprintf+0x4>
90:	ret
    1086:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    1088:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    108a:	e8 94       	clt
	_LPMI	r21		;Get flags
    108c:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    108e:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    1090:	c1 f3       	breq	.-16     	; 0x1082 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
    1092:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    1094:	11 f4       	brne	.+4      	; 0x109a <xvprintf+0x26>
	set			;/
    1096:	68 94       	set
22:	_LPMI	r21		;Get width
    1098:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    109a:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    109c:	48 f4       	brcc	.+18     	; 0x10b0 <xvprintf+0x3c>
	subi	r21, '0'	;
    109e:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    10a0:	90 f3       	brcs	.-28     	; 0x1086 <xvprintf+0x12>
	lsl	r18		;
    10a2:	22 0f       	add	r18, r18
	mov	r0, r18		;
    10a4:	02 2e       	mov	r0, r18
	lsl	r18		;
    10a6:	22 0f       	add	r18, r18
	lsl	r18		;
    10a8:	22 0f       	add	r18, r18
	add	r18, r0		;
    10aa:	20 0d       	add	r18, r0
	add	r18, r21	;
    10ac:	25 0f       	add	r18, r21
	rjmp	22b		;/
    10ae:	f4 cf       	rjmp	.-24     	; 0x1098 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
    10b0:	0e f4       	brtc	.+2      	; 0x10b4 <xvprintf+0x40>
	neg	r18		;
    10b2:	21 95       	neg	r18
25:	ld	r24, Y+		;
    10b4:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    10b6:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    10b8:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    10ba:	19 f3       	breq	.-58     	; 0x1082 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
    10bc:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    10be:	29 f1       	breq	.+74     	; 0x110a <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
    10c0:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    10c2:	59 f1       	breq	.+86     	; 0x111a <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    10c4:	bc 01       	movw	r22, r24
	clr	r24		;
    10c6:	88 27       	eor	r24, r24
	clr	r25		;
    10c8:	99 27       	eor	r25, r25
	clt			;/
    10ca:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    10cc:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    10ce:	21 f4       	brne	.+8      	; 0x10d8 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
    10d0:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    10d2:	99 91       	ld	r25, Y+
	set			;
    10d4:	68 94       	set
	_LPMI	r21		;/
    10d6:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    10d8:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    10da:	39 f4       	brne	.+14     	; 0x10ea <xvprintf+0x76>
	ldi	r20, -10	;
    10dc:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    10de:	7e f0       	brts	.+30     	; 0x10fe <xvprintf+0x8a>
	sbrs	r23, 7		;
    10e0:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <xvprintf+0x8a>
	ldi	r24, -1		;
    10e4:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    10e6:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    10e8:	0a c0       	rjmp	.+20     	; 0x10fe <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    10ea:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    10ec:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    10ee:	39 f0       	breq	.+14     	; 0x10fe <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
    10f0:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    10f2:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    10f4:	21 f0       	breq	.+8      	; 0x10fe <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
    10f6:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    10f8:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    10fa:	09 f0       	breq	.+2      	; 0x10fe <xvprintf+0x8a>
	ret			;abort
    10fc:	08 95       	ret
40:	push	ZH		;Output the value
    10fe:	ff 93       	push	r31
	push	ZL		;
    1100:	ef 93       	push	r30
	rcall	xitoa		;
    1102:	7d df       	rcall	.-262    	; 0xffe <xitoa>
42:	pop	ZL		;
    1104:	ef 91       	pop	r30
	pop	ZH		;
    1106:	ff 91       	pop	r31
	rjmp	0b		;/
    1108:	b7 cf       	rjmp	.-146    	; 0x1078 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
    110a:	ff 93       	push	r31
	push	ZL
    110c:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    110e:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    1110:	81 91       	ld	r24, Z+
	cpi	r24, 0
    1112:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    1114:	b9 f3       	breq	.-18     	; 0x1104 <xvprintf+0x90>
	rcall	xputc
    1116:	60 df       	rcall	.-320    	; 0xfd8 <xputc>
	rjmp	51b
    1118:	fb cf       	rjmp	.-10     	; 0x1110 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
    111a:	ff 93       	push	r31
	push	ZL
    111c:	ef 93       	push	r30
	rcall	xputs
    111e:	68 df       	rcall	.-304    	; 0xff0 <xputs>
	rjmp	42b
    1120:	f1 cf       	rjmp	.-30     	; 0x1104 <xvprintf+0x90>

00001122 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
    1122:	df 93       	push	r29
	push	YL
    1124:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    1126:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    1128:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
    112a:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
    112c:	a3 df       	rcall	.-186    	; 0x1074 <xvprintf>
	pop	YL
    112e:	cf 91       	pop	r28
	pop	YH
    1130:	df 91       	pop	r29
	ret
    1132:	08 95       	ret

00001134 <action_function>:
    SHIFT_NUM1, // Shift + Num -> Number Pad Layer Off
    PAUS_BOOT, // Caps Lock + Right Shift + Pause = DFU
};

void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    1134:	cf 92       	push	r12
    1136:	df 92       	push	r13
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	cf 93       	push	r28
    113e:	6c 01       	movw	r12, r24
    1140:	c6 2f       	mov	r28, r22
    if (record->event.pressed) dprint("P"); else dprint("R");
    1142:	fc 01       	movw	r30, r24
    1144:	92 81       	ldd	r25, Z+2	; 0x02
    1146:	80 91 e1 03 	lds	r24, 0x03E1
    114a:	99 23       	and	r25, r25
    114c:	29 f0       	breq	.+10     	; 0x1158 <action_function+0x24>
    114e:	80 ff       	sbrs	r24, 0
    1150:	09 c0       	rjmp	.+18     	; 0x1164 <action_function+0x30>
    1152:	84 eb       	ldi	r24, 0xB4	; 180
    1154:	93 e0       	ldi	r25, 0x03	; 3
    1156:	04 c0       	rjmp	.+8      	; 0x1160 <action_function+0x2c>
    1158:	80 ff       	sbrs	r24, 0
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <action_function+0x30>
    115c:	86 eb       	ldi	r24, 0xB6	; 182
    115e:	93 e0       	ldi	r25, 0x03	; 3
    1160:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    if (record->tap.interrupted) dprint("i");
    1164:	f6 01       	movw	r30, r12
    1166:	85 81       	ldd	r24, Z+5	; 0x05
    1168:	80 ff       	sbrs	r24, 0
    116a:	08 c0       	rjmp	.+16     	; 0x117c <action_function+0x48>
    116c:	80 91 e1 03 	lds	r24, 0x03E1
    1170:	80 ff       	sbrs	r24, 0
    1172:	04 c0       	rjmp	.+8      	; 0x117c <action_function+0x48>
    1174:	88 eb       	ldi	r24, 0xB8	; 184
    1176:	93 e0       	ldi	r25, 0x03	; 3
    1178:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>

#   define MODS_MASK_1   (MOD_BIT(KC_LALT))
#   define MODS_MASK_2   (MOD_BIT(KC_RALT))    
    static uint8_t lalt_ralt_mods;    
    
    switch (id) {
    117c:	c1 30       	cpi	r28, 0x01	; 1
    117e:	e1 f0       	breq	.+56     	; 0x11b8 <action_function+0x84>
    1180:	20 f0       	brcs	.+8      	; 0x118a <action_function+0x56>
    1182:	c2 30       	cpi	r28, 0x02	; 2
    1184:	09 f0       	breq	.+2      	; 0x1188 <action_function+0x54>
    1186:	7d c0       	rjmp	.+250    	; 0x1282 <action_function+0x14e>
    1188:	42 c0       	rjmp	.+132    	; 0x120e <action_function+0xda>
        // Shift + Scroll Lock -> Number Pad Layer On
        case SHIFT_NUM:
            shift_mod = get_mods()&MODS_SHIFT_MASK;
    118a:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <get_mods>
    118e:	82 72       	andi	r24, 0x22	; 34
    1190:	99 27       	eor	r25, r25
    1192:	80 93 10 02 	sts	0x0210, r24
            if (record->event.pressed) {
    1196:	f6 01       	movw	r30, r12
    1198:	32 81       	ldd	r19, Z+2	; 0x02
    119a:	33 23       	and	r19, r19
    119c:	09 f4       	brne	.+2      	; 0x11a0 <action_function+0x6c>
    119e:	71 c0       	rjmp	.+226    	; 0x1282 <action_function+0x14e>
                if (shift_mod) {
    11a0:	81 11       	cpse	r24, r1
    11a2:	16 c0       	rjmp	.+44     	; 0x11d0 <action_function+0x9c>
		    layer_invert(1); // toggle number pad layer
		    DDR_NUMLAYER ^= (1<<BIT_NUMLAYER);	    
                } else {
                    del_mods(shift_mod); // remove shift
    11a4:	0e 94 83 27 	call	0x4f06	; 0x4f06 <del_mods>
                    layer_invert(2); // toggle layer
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <layer_invert>
		    DDR_EXTRA_LAYER ^= (1<<BIT_EXTRA_LAYER);
    11ae:	8d b1       	in	r24, 0x0d	; 13
    11b0:	92 e0       	ldi	r25, 0x02	; 2
    11b2:	89 27       	eor	r24, r25
    11b4:	8d b9       	out	0x0d, r24	; 13
    11b6:	1c c0       	rjmp	.+56     	; 0x11f0 <action_function+0xbc>
            }
            break;
	    
	// Shift + Scroll Lock -> Number Pad Layer Off
        case SHIFT_NUM1:
            shift_mod = get_mods()&MODS_SHIFT_MASK;
    11b8:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <get_mods>
    11bc:	82 72       	andi	r24, 0x22	; 34
    11be:	99 27       	eor	r25, r25
    11c0:	80 93 10 02 	sts	0x0210, r24
            if (record->event.pressed) {
    11c4:	f6 01       	movw	r30, r12
    11c6:	32 81       	ldd	r19, Z+2	; 0x02
    11c8:	33 23       	and	r19, r19
    11ca:	e1 f0       	breq	.+56     	; 0x1204 <action_function+0xd0>
                if (shift_mod) {
    11cc:	88 23       	and	r24, r24
    11ce:	41 f0       	breq	.+16     	; 0x11e0 <action_function+0xac>
		    layer_invert(1); // toggle number pad layer
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <layer_invert>
		    DDR_NUMLAYER ^= (1<<BIT_NUMLAYER);
    11d6:	87 b1       	in	r24, 0x07	; 7
    11d8:	92 e0       	ldi	r25, 0x02	; 2
    11da:	89 27       	eor	r24, r25
    11dc:	87 b9       	out	0x07, r24	; 7
    11de:	51 c0       	rjmp	.+162    	; 0x1282 <action_function+0x14e>
                } else {
                    del_mods(shift_mod); // remove shift
    11e0:	0e 94 83 27 	call	0x4f06	; 0x4f06 <del_mods>
                    add_key(KC_NLCK);
    11e4:	83 e5       	ldi	r24, 0x53	; 83
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <add_key>
                    send_keyboard_report(); // send Num Lock (toggles number pad in OS between numbers and cursors)
    11ec:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <send_keyboard_report>
                    add_mods(shift_mod); // return shift but not sent
    11f0:	80 91 10 02 	lds	r24, 0x0210
    11f4:	90 e0       	ldi	r25, 0x00	; 0
                    send_keyboard_report();
                }
            }
            break;	    
    }
};
    11f6:	cf 91       	pop	r28
    11f8:	ff 90       	pop	r15
    11fa:	ef 90       	pop	r14
    11fc:	df 90       	pop	r13
    11fe:	cf 90       	pop	r12
		    DDR_NUMLAYER ^= (1<<BIT_NUMLAYER);
                } else {
                    del_mods(shift_mod); // remove shift
                    add_key(KC_NLCK);
                    send_keyboard_report(); // send Num Lock (toggles number pad in OS between numbers and cursors)
                    add_mods(shift_mod); // return shift but not sent
    1200:	0c 94 7d 27 	jmp	0x4efa	; 0x4efa <add_mods>
                }
            } else {
                if (shift_mod) {
    1204:	81 11       	cpse	r24, r1
    1206:	3d c0       	rjmp	.+122    	; 0x1282 <action_function+0x14e>
                } else {
                    del_key(KC_NLCK);
    1208:	83 e5       	ldi	r24, 0x53	; 83
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	31 c0       	rjmp	.+98     	; 0x1270 <action_function+0x13c>
            }
            break;
	    
        // Left ALT + Right ALT + Pause = DFU
        case PAUS_BOOT:
            lalt_ralt_mods = get_mods()&MODS_MASK_1 && get_mods()&MODS_MASK_2;
    120e:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <get_mods>
    1212:	82 ff       	sbrs	r24, 2
    1214:	07 c0       	rjmp	.+14     	; 0x1224 <action_function+0xf0>
    1216:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <get_mods>
    121a:	86 fb       	bst	r24, 6
    121c:	ee 24       	eor	r14, r14
    121e:	e0 f8       	bld	r14, 0
    1220:	f1 2c       	mov	r15, r1
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <action_function+0xf4>
    1224:	e1 2c       	mov	r14, r1
    1226:	f1 2c       	mov	r15, r1
    1228:	e0 92 11 02 	sts	0x0211, r14
            if (record->event.pressed) {
    122c:	f6 01       	movw	r30, r12
    122e:	92 81       	ldd	r25, Z+2	; 0x02
    1230:	99 23       	and	r25, r25
    1232:	d1 f0       	breq	.+52     	; 0x1268 <action_function+0x134>
                if (lalt_ralt_mods) {
    1234:	ee 20       	and	r14, r14
    1236:	61 f0       	breq	.+24     	; 0x1250 <action_function+0x11c>
		    del_mods(lalt_ralt_mods);
    1238:	c7 01       	movw	r24, r14
    123a:	0e 94 83 27 	call	0x4f06	; 0x4f06 <del_mods>
		    send_keyboard_report();
    123e:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <send_keyboard_report>
                    send_keyboard_report();
                }
            }
            break;	    
    }
};
    1242:	cf 91       	pop	r28
    1244:	ff 90       	pop	r15
    1246:	ef 90       	pop	r14
    1248:	df 90       	pop	r13
    124a:	cf 90       	pop	r12
            lalt_ralt_mods = get_mods()&MODS_MASK_1 && get_mods()&MODS_MASK_2;
            if (record->event.pressed) {
                if (lalt_ralt_mods) {
		    del_mods(lalt_ralt_mods);
		    send_keyboard_report();
		    bootloader_jump(); 
    124c:	0c 94 04 29 	jmp	0x5208	; 0x5208 <bootloader_jump>
                } else {
                    del_mods(lalt_ralt_mods); // remove shift
    1250:	c7 01       	movw	r24, r14
    1252:	0e 94 83 27 	call	0x4f06	; 0x4f06 <del_mods>
                    add_key(KC_PAUS);
    1256:	88 e4       	ldi	r24, 0x48	; 72
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <add_key>
                    send_keyboard_report(); // send Scroll Lock
    125e:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <send_keyboard_report>
                    add_mods(lalt_ralt_mods); // return shift but not sent
    1262:	80 91 11 02 	lds	r24, 0x0211
    1266:	c6 cf       	rjmp	.-116    	; 0x11f4 <action_function+0xc0>
                }
            } else {
                if (lalt_ralt_mods) {                   
    1268:	e1 10       	cpse	r14, r1
    126a:	0b c0       	rjmp	.+22     	; 0x1282 <action_function+0x14e>
                } else {
                    del_key(KC_PAUS);
    126c:	88 e4       	ldi	r24, 0x48	; 72
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <del_key>
                    send_keyboard_report();
                }
            }
            break;	    
    }
};
    1274:	cf 91       	pop	r28
    1276:	ff 90       	pop	r15
    1278:	ef 90       	pop	r14
    127a:	df 90       	pop	r13
    127c:	cf 90       	pop	r12
                }
            } else {
                if (lalt_ralt_mods) {                   
                } else {
                    del_key(KC_PAUS);
                    send_keyboard_report();
    127e:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <send_keyboard_report>
                }
            }
            break;	    
    }
};
    1282:	cf 91       	pop	r28
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	08 95       	ret

0000128e <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    128e:	e7 2f       	mov	r30, r23
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	98 e0       	ldi	r25, 0x08	; 8
    1294:	89 9f       	mul	r24, r25
    1296:	e0 0d       	add	r30, r0
    1298:	f1 1d       	adc	r31, r1
    129a:	11 24       	eor	r1, r1
    129c:	84 e0       	ldi	r24, 0x04	; 4
    129e:	ee 0f       	add	r30, r30
    12a0:	ff 1f       	adc	r31, r31
    12a2:	8a 95       	dec	r24
    12a4:	e1 f7       	brne	.-8      	; 0x129e <keymap_key_to_keycode+0x10>
    12a6:	e6 0f       	add	r30, r22
    12a8:	f1 1d       	adc	r31, r1
    12aa:	ec 5c       	subi	r30, 0xCC	; 204
    12ac:	fe 4f       	sbci	r31, 0xFE	; 254
    12ae:	84 91       	lpm	r24, Z
}
    12b0:	08 95       	ret

000012b2 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
    12b2:	e8 2f       	mov	r30, r24
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	ee 0f       	add	r30, r30
    12b8:	ff 1f       	adc	r31, r31
    12ba:	e6 55       	subi	r30, 0x56	; 86
    12bc:	f0 40       	sbci	r31, 0x00	; 0
    12be:	25 91       	lpm	r18, Z+
    12c0:	34 91       	lpm	r19, Z
}
    12c2:	c9 01       	movw	r24, r18
    12c4:	08 95       	ret

000012c6 <unselect_rows>:
 */

static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRA  &= ~0b11110000;
    12c6:	81 b1       	in	r24, 0x01	; 1
    12c8:	8f 70       	andi	r24, 0x0F	; 15
    12ca:	81 b9       	out	0x01, r24	; 1
    PORTA &= ~0b11110000;
    12cc:	82 b1       	in	r24, 0x02	; 2
    12ce:	8f 70       	andi	r24, 0x0F	; 15
    12d0:	82 b9       	out	0x02, r24	; 2
    DDRC  &= ~0b11110000;
    12d2:	87 b1       	in	r24, 0x07	; 7
    12d4:	8f 70       	andi	r24, 0x0F	; 15
    12d6:	87 b9       	out	0x07, r24	; 7
    PORTC &= ~0b11110000;
    12d8:	88 b1       	in	r24, 0x08	; 8
    12da:	8f 70       	andi	r24, 0x0F	; 15
    12dc:	88 b9       	out	0x08, r24	; 8
    12de:	08 95       	ret

000012e0 <matrix_init>:
}

void matrix_init(void)
{
    // JTAG disable for PORT F. write JTD bit twice within four cycles.
    MCUCR |= (1<<JTD);
    12e0:	85 b7       	in	r24, 0x35	; 53
    12e2:	80 68       	ori	r24, 0x80	; 128
    12e4:	85 bf       	out	0x35, r24	; 53
    MCUCR |= (1<<JTD);
    12e6:	85 b7       	in	r24, 0x35	; 53
    12e8:	80 68       	ori	r24, 0x80	; 128
    12ea:	85 bf       	out	0x35, r24	; 53

    // initialize row and col
    unselect_rows();
    12ec:	0e 94 63 09 	call	0x12c6	; 0x12c6 <unselect_rows>
 * pin: B3  B2  B1  B0  E3  F1  F2  F3  F4  F5  F6  F7  A0  A1  A2  A3
 */
 static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRB  &= ~(1<<3 | 1<<2 | 1<<1 | 1<<0);
    12f0:	84 b1       	in	r24, 0x04	; 4
    12f2:	80 7f       	andi	r24, 0xF0	; 240
    12f4:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<3 | 1<<2 | 1<<1 | 1<<0);
    12f6:	85 b1       	in	r24, 0x05	; 5
    12f8:	8f 60       	ori	r24, 0x0F	; 15
    12fa:	85 b9       	out	0x05, r24	; 5
    DDRE  &= ~(1<<3);
    12fc:	6b 98       	cbi	0x0d, 3	; 13
    PORTE |=  (1<<3);
    12fe:	73 9a       	sbi	0x0e, 3	; 14
    DDRF  &= ~(1<<1 | 1<<2 | 1<<3 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
    1300:	80 b3       	in	r24, 0x10	; 16
    1302:	81 70       	andi	r24, 0x01	; 1
    1304:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<1 | 1<<2 | 1<<3 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
    1306:	81 b3       	in	r24, 0x11	; 17
    1308:	8e 6f       	ori	r24, 0xFE	; 254
    130a:	81 bb       	out	0x11, r24	; 17
    DDRA  &= ~(1<<0 | 1<<1 | 1<<2 | 1<<3);
    130c:	81 b1       	in	r24, 0x01	; 1
    130e:	80 7f       	andi	r24, 0xF0	; 240
    1310:	81 b9       	out	0x01, r24	; 1
    PORTA |=  (1<<0 | 1<<1 | 1<<2 | 1<<3);
    1312:	82 b1       	in	r24, 0x02	; 2
    1314:	8f 60       	ori	r24, 0x0F	; 15
    1316:	82 b9       	out	0x02, r24	; 2
    1318:	e2 e1       	ldi	r30, 0x12	; 18
    131a:	f2 e0       	ldi	r31, 0x02	; 2
    131c:	a2 e2       	ldi	r26, 0x22	; 34
    131e:	b2 e0       	ldi	r27, 0x02	; 2
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    1320:	11 92       	st	Z+, r1
    1322:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
    1324:	1d 92       	st	X+, r1
    1326:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	e2 32       	cpi	r30, 0x22	; 34
    132c:	f8 07       	cpc	r31, r24
    132e:	c1 f7       	brne	.-16     	; 0x1320 <matrix_init+0x40>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
    1330:	08 95       	ret

00001332 <matrix_scan>:

uint8_t matrix_scan(void)
{
    1332:	af 92       	push	r10
    1334:	bf 92       	push	r11
    1336:	cf 92       	push	r12
    1338:	df 92       	push	r13
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	62 e2       	ldi	r22, 0x22	; 34
    1344:	c6 2e       	mov	r12, r22
    1346:	62 e0       	ldi	r22, 0x02	; 2
    1348:	d6 2e       	mov	r13, r22
    134a:	76 01       	movw	r14, r12
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    134c:	d0 e0       	ldi	r29, 0x00	; 0
    PORTA |=  (1<<0 | 1<<1 | 1<<2 | 1<<3);
}

static matrix_row_t read_cols(void)
{
    return (PINB&(1<<3) ? 0 : (1<<0)) |
    134e:	c1 e0       	ldi	r28, 0x01	; 1
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
    1350:	d4 30       	cpi	r29, 0x04	; 4
    1352:	a9 f0       	breq	.+42     	; 0x137e <matrix_scan+0x4c>
    1354:	30 f4       	brcc	.+12     	; 0x1362 <matrix_scan+0x30>
    1356:	d2 30       	cpi	r29, 0x02	; 2
    1358:	c1 f0       	breq	.+48     	; 0x138a <matrix_scan+0x58>
    135a:	a0 f4       	brcc	.+40     	; 0x1384 <matrix_scan+0x52>
    135c:	d1 30       	cpi	r29, 0x01	; 1
    135e:	d9 f4       	brne	.+54     	; 0x1396 <matrix_scan+0x64>
    1360:	17 c0       	rjmp	.+46     	; 0x1390 <matrix_scan+0x5e>
    1362:	d6 30       	cpi	r29, 0x06	; 6
    1364:	31 f0       	breq	.+12     	; 0x1372 <matrix_scan+0x40>
    1366:	40 f0       	brcs	.+16     	; 0x1378 <matrix_scan+0x46>
    1368:	d7 30       	cpi	r29, 0x07	; 7
    136a:	a9 f4       	brne	.+42     	; 0x1396 <matrix_scan+0x64>
        case 7:
            DDRA  |= (1<<4);
    136c:	0c 9a       	sbi	0x01, 4	; 1
            PORTA &= ~(1<<4);
    136e:	14 98       	cbi	0x02, 4	; 2
    1370:	14 c0       	rjmp	.+40     	; 0x139a <matrix_scan+0x68>
            break;
        case 6:
            DDRA  |= (1<<5);
    1372:	0d 9a       	sbi	0x01, 5	; 1
            PORTA &= ~(1<<5);
    1374:	15 98       	cbi	0x02, 5	; 2
    1376:	11 c0       	rjmp	.+34     	; 0x139a <matrix_scan+0x68>
            break;
        case 5:
            DDRA  |= (1<<6);
    1378:	0e 9a       	sbi	0x01, 6	; 1
            PORTA &= ~(1<<6);
    137a:	16 98       	cbi	0x02, 6	; 2
    137c:	0e c0       	rjmp	.+28     	; 0x139a <matrix_scan+0x68>
            break;
        case 4:
            DDRA  |= (1<<7);
    137e:	0f 9a       	sbi	0x01, 7	; 1
            PORTA &= ~(1<<7);
    1380:	17 98       	cbi	0x02, 7	; 2
    1382:	0b c0       	rjmp	.+22     	; 0x139a <matrix_scan+0x68>
            break;
        case 3:
            DDRC  |= (1<<7);
    1384:	3f 9a       	sbi	0x07, 7	; 7
            PORTC &= ~(1<<7);
    1386:	47 98       	cbi	0x08, 7	; 8
    1388:	08 c0       	rjmp	.+16     	; 0x139a <matrix_scan+0x68>
            break;
        case 2:
            DDRC  |= (1<<6);
    138a:	3e 9a       	sbi	0x07, 6	; 7
            PORTC &= ~(1<<6);
    138c:	46 98       	cbi	0x08, 6	; 8
    138e:	05 c0       	rjmp	.+10     	; 0x139a <matrix_scan+0x68>
            break;
        case 1:
            DDRC  |= (1<<5);
    1390:	3d 9a       	sbi	0x07, 5	; 7
            PORTC &= ~(1<<5);
    1392:	45 98       	cbi	0x08, 5	; 8
    1394:	02 c0       	rjmp	.+4      	; 0x139a <matrix_scan+0x68>
            break;
        case 0:
            DDRC  |= (1<<4);
    1396:	3c 9a       	sbi	0x07, 4	; 7
            PORTC &= ~(1<<4);
    1398:	44 98       	cbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    139a:	80 e5       	ldi	r24, 0x50	; 80
    139c:	8a 95       	dec	r24
    139e:	f1 f7       	brne	.-4      	; 0x139c <matrix_scan+0x6a>
    PORTA |=  (1<<0 | 1<<1 | 1<<2 | 1<<3);
}

static matrix_row_t read_cols(void)
{
    return (PINB&(1<<3) ? 0 : (1<<0)) |
    13a0:	83 b1       	in	r24, 0x03	; 3
    13a2:	86 95       	lsr	r24
    13a4:	86 95       	lsr	r24
    13a6:	86 95       	lsr	r24
    13a8:	8c 27       	eor	r24, r28
    13aa:	80 fb       	bst	r24, 0
    13ac:	aa 24       	eor	r10, r10
    13ae:	a0 f8       	bld	r10, 0
    13b0:	b1 2c       	mov	r11, r1
           (PINB&(1<<2) ? 0 : (1<<1)) |
    13b2:	1a 9b       	sbis	0x03, 2	; 3
    13b4:	03 c0       	rjmp	.+6      	; 0x13bc <matrix_scan+0x8a>
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <matrix_scan+0x8e>
    13bc:	22 e0       	ldi	r18, 0x02	; 2
    13be:	30 e0       	ldi	r19, 0x00	; 0
    PORTA |=  (1<<0 | 1<<1 | 1<<2 | 1<<3);
}

static matrix_row_t read_cols(void)
{
    return (PINB&(1<<3) ? 0 : (1<<0)) |
    13c0:	c9 01       	movw	r24, r18
    13c2:	8a 29       	or	r24, r10
    13c4:	9b 29       	or	r25, r11
           (PINB&(1<<2) ? 0 : (1<<1)) |
           (PINB&(1<<1) ? 0 : (1<<2)) |
    13c6:	19 9b       	sbis	0x03, 1	; 3
    13c8:	03 c0       	rjmp	.+6      	; 0x13d0 <matrix_scan+0x9e>
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <matrix_scan+0xa2>
    13d0:	24 e0       	ldi	r18, 0x04	; 4
    13d2:	30 e0       	ldi	r19, 0x00	; 0
}

static matrix_row_t read_cols(void)
{
    return (PINB&(1<<3) ? 0 : (1<<0)) |
           (PINB&(1<<2) ? 0 : (1<<1)) |
    13d4:	28 2b       	or	r18, r24
    13d6:	39 2b       	or	r19, r25
           (PINB&(1<<1) ? 0 : (1<<2)) |
           (PINB&(1<<0) ? 0 : (1<<3)) |
    13d8:	18 9b       	sbis	0x03, 0	; 3
    13da:	03 c0       	rjmp	.+6      	; 0x13e2 <matrix_scan+0xb0>
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <matrix_scan+0xb4>
    13e2:	88 e0       	ldi	r24, 0x08	; 8
    13e4:	90 e0       	ldi	r25, 0x00	; 0

static matrix_row_t read_cols(void)
{
    return (PINB&(1<<3) ? 0 : (1<<0)) |
           (PINB&(1<<2) ? 0 : (1<<1)) |
           (PINB&(1<<1) ? 0 : (1<<2)) |
    13e6:	82 2b       	or	r24, r18
    13e8:	93 2b       	or	r25, r19
           (PINB&(1<<0) ? 0 : (1<<3)) |
           (PINE&(1<<3) ? 0 : (1<<4)) |
    13ea:	63 9b       	sbis	0x0c, 3	; 12
    13ec:	03 c0       	rjmp	.+6      	; 0x13f4 <matrix_scan+0xc2>
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <matrix_scan+0xc6>
    13f4:	40 e1       	ldi	r20, 0x10	; 16
    13f6:	50 e0       	ldi	r21, 0x00	; 0
static matrix_row_t read_cols(void)
{
    return (PINB&(1<<3) ? 0 : (1<<0)) |
           (PINB&(1<<2) ? 0 : (1<<1)) |
           (PINB&(1<<1) ? 0 : (1<<2)) |
           (PINB&(1<<0) ? 0 : (1<<3)) |
    13f8:	48 2b       	or	r20, r24
    13fa:	59 2b       	or	r21, r25
           (PINE&(1<<3) ? 0 : (1<<4)) |
           (PINF&(1<<1) ? 0 : (1<<5)) |
    13fc:	79 9b       	sbis	0x0f, 1	; 15
    13fe:	03 c0       	rjmp	.+6      	; 0x1406 <matrix_scan+0xd4>
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	02 c0       	rjmp	.+4      	; 0x140a <matrix_scan+0xd8>
    1406:	20 e2       	ldi	r18, 0x20	; 32
    1408:	30 e0       	ldi	r19, 0x00	; 0
{
    return (PINB&(1<<3) ? 0 : (1<<0)) |
           (PINB&(1<<2) ? 0 : (1<<1)) |
           (PINB&(1<<1) ? 0 : (1<<2)) |
           (PINB&(1<<0) ? 0 : (1<<3)) |
           (PINE&(1<<3) ? 0 : (1<<4)) |
    140a:	24 2b       	or	r18, r20
    140c:	35 2b       	or	r19, r21
           (PINF&(1<<1) ? 0 : (1<<5)) |
           (PINF&(1<<2) ? 0 : (1<<6)) |
    140e:	7a 9b       	sbis	0x0f, 2	; 15
    1410:	03 c0       	rjmp	.+6      	; 0x1418 <matrix_scan+0xe6>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 c0       	rjmp	.+4      	; 0x141c <matrix_scan+0xea>
    1418:	80 e4       	ldi	r24, 0x40	; 64
    141a:	90 e0       	ldi	r25, 0x00	; 0
    return (PINB&(1<<3) ? 0 : (1<<0)) |
           (PINB&(1<<2) ? 0 : (1<<1)) |
           (PINB&(1<<1) ? 0 : (1<<2)) |
           (PINB&(1<<0) ? 0 : (1<<3)) |
           (PINE&(1<<3) ? 0 : (1<<4)) |
           (PINF&(1<<1) ? 0 : (1<<5)) |
    141c:	28 2b       	or	r18, r24
    141e:	39 2b       	or	r19, r25
           (PINF&(1<<2) ? 0 : (1<<6)) |
           (PINF&(1<<3) ? 0 : (1<<7)) |
    1420:	7b 9b       	sbis	0x0f, 3	; 15
    1422:	03 c0       	rjmp	.+6      	; 0x142a <matrix_scan+0xf8>
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	02 c0       	rjmp	.+4      	; 0x142e <matrix_scan+0xfc>
    142a:	60 e8       	ldi	r22, 0x80	; 128
    142c:	70 e0       	ldi	r23, 0x00	; 0
           (PINB&(1<<2) ? 0 : (1<<1)) |
           (PINB&(1<<1) ? 0 : (1<<2)) |
           (PINB&(1<<0) ? 0 : (1<<3)) |
           (PINE&(1<<3) ? 0 : (1<<4)) |
           (PINF&(1<<1) ? 0 : (1<<5)) |
           (PINF&(1<<2) ? 0 : (1<<6)) |
    142e:	26 2b       	or	r18, r22
    1430:	37 2b       	or	r19, r23
           (PINF&(1<<3) ? 0 : (1<<7)) |
           (PINF&(1<<4) ? 0 : (1<<8)) |
    1432:	7c 9b       	sbis	0x0f, 4	; 15
    1434:	03 c0       	rjmp	.+6      	; 0x143c <matrix_scan+0x10a>
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	50 e0       	ldi	r21, 0x00	; 0
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <matrix_scan+0x10e>
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	51 e0       	ldi	r21, 0x01	; 1
           (PINB&(1<<1) ? 0 : (1<<2)) |
           (PINB&(1<<0) ? 0 : (1<<3)) |
           (PINE&(1<<3) ? 0 : (1<<4)) |
           (PINF&(1<<1) ? 0 : (1<<5)) |
           (PINF&(1<<2) ? 0 : (1<<6)) |
           (PINF&(1<<3) ? 0 : (1<<7)) |
    1440:	24 2b       	or	r18, r20
    1442:	35 2b       	or	r19, r21
           (PINF&(1<<4) ? 0 : (1<<8)) |
           (PINF&(1<<5) ? 0 : (1<<9)) |
    1444:	7d 9b       	sbis	0x0f, 5	; 15
    1446:	03 c0       	rjmp	.+6      	; 0x144e <matrix_scan+0x11c>
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <matrix_scan+0x120>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	92 e0       	ldi	r25, 0x02	; 2
           (PINB&(1<<0) ? 0 : (1<<3)) |
           (PINE&(1<<3) ? 0 : (1<<4)) |
           (PINF&(1<<1) ? 0 : (1<<5)) |
           (PINF&(1<<2) ? 0 : (1<<6)) |
           (PINF&(1<<3) ? 0 : (1<<7)) |
           (PINF&(1<<4) ? 0 : (1<<8)) |
    1452:	28 2b       	or	r18, r24
    1454:	39 2b       	or	r19, r25
           (PINF&(1<<5) ? 0 : (1<<9)) |
           (PINF&(1<<6) ? 0 : (1<<10)) |
    1456:	7e 9b       	sbis	0x0f, 6	; 15
    1458:	03 c0       	rjmp	.+6      	; 0x1460 <matrix_scan+0x12e>
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <matrix_scan+0x132>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	94 e0       	ldi	r25, 0x04	; 4
           (PINE&(1<<3) ? 0 : (1<<4)) |
           (PINF&(1<<1) ? 0 : (1<<5)) |
           (PINF&(1<<2) ? 0 : (1<<6)) |
           (PINF&(1<<3) ? 0 : (1<<7)) |
           (PINF&(1<<4) ? 0 : (1<<8)) |
           (PINF&(1<<5) ? 0 : (1<<9)) |
    1464:	28 2b       	or	r18, r24
    1466:	39 2b       	or	r19, r25
           (PINF&(1<<6) ? 0 : (1<<10)) |
           (PINF&(1<<7) ? 0 : (1<<11)) |
    1468:	8f b1       	in	r24, 0x0f	; 15
    146a:	99 27       	eor	r25, r25
    146c:	87 fd       	sbrc	r24, 7
    146e:	90 95       	com	r25
    1470:	80 95       	com	r24
    1472:	90 95       	com	r25
    1474:	88 27       	eor	r24, r24
    1476:	99 0f       	add	r25, r25
    1478:	88 1f       	adc	r24, r24
    147a:	99 27       	eor	r25, r25
    147c:	98 2f       	mov	r25, r24
    147e:	88 27       	eor	r24, r24
    1480:	99 0f       	add	r25, r25
    1482:	99 0f       	add	r25, r25
    1484:	99 0f       	add	r25, r25
           (PINF&(1<<1) ? 0 : (1<<5)) |
           (PINF&(1<<2) ? 0 : (1<<6)) |
           (PINF&(1<<3) ? 0 : (1<<7)) |
           (PINF&(1<<4) ? 0 : (1<<8)) |
           (PINF&(1<<5) ? 0 : (1<<9)) |
           (PINF&(1<<6) ? 0 : (1<<10)) |
    1486:	28 2b       	or	r18, r24
    1488:	39 2b       	or	r19, r25
           (PINF&(1<<7) ? 0 : (1<<11)) |
           (PINA&(1<<0) ? 0 : (1<<12)) |
    148a:	00 9b       	sbis	0x00, 0	; 0
    148c:	03 c0       	rjmp	.+6      	; 0x1494 <matrix_scan+0x162>
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <matrix_scan+0x166>
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	50 e1       	ldi	r21, 0x10	; 16
           (PINF&(1<<2) ? 0 : (1<<6)) |
           (PINF&(1<<3) ? 0 : (1<<7)) |
           (PINF&(1<<4) ? 0 : (1<<8)) |
           (PINF&(1<<5) ? 0 : (1<<9)) |
           (PINF&(1<<6) ? 0 : (1<<10)) |
           (PINF&(1<<7) ? 0 : (1<<11)) |
    1498:	24 2b       	or	r18, r20
    149a:	35 2b       	or	r19, r21
           (PINA&(1<<0) ? 0 : (1<<12)) |
           (PINA&(1<<1) ? 0 : (1<<13)) |
    149c:	01 9b       	sbis	0x00, 1	; 0
    149e:	03 c0       	rjmp	.+6      	; 0x14a6 <matrix_scan+0x174>
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <matrix_scan+0x178>
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	50 e2       	ldi	r21, 0x20	; 32
           (PINF&(1<<3) ? 0 : (1<<7)) |
           (PINF&(1<<4) ? 0 : (1<<8)) |
           (PINF&(1<<5) ? 0 : (1<<9)) |
           (PINF&(1<<6) ? 0 : (1<<10)) |
           (PINF&(1<<7) ? 0 : (1<<11)) |
           (PINA&(1<<0) ? 0 : (1<<12)) |
    14aa:	24 2b       	or	r18, r20
    14ac:	35 2b       	or	r19, r21
           (PINA&(1<<1) ? 0 : (1<<13)) |
           (PINA&(1<<2) ? 0 : (1<<14)) |
    14ae:	02 9b       	sbis	0x00, 2	; 0
    14b0:	03 c0       	rjmp	.+6      	; 0x14b8 <matrix_scan+0x186>
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <matrix_scan+0x18a>
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e4       	ldi	r25, 0x40	; 64
           (PINF&(1<<4) ? 0 : (1<<8)) |
           (PINF&(1<<5) ? 0 : (1<<9)) |
           (PINF&(1<<6) ? 0 : (1<<10)) |
           (PINF&(1<<7) ? 0 : (1<<11)) |
           (PINA&(1<<0) ? 0 : (1<<12)) |
           (PINA&(1<<1) ? 0 : (1<<13)) |
    14bc:	28 2b       	or	r18, r24
    14be:	39 2b       	or	r19, r25
           (PINA&(1<<2) ? 0 : (1<<14)) |
           (PINA&(1<<3) ? 0 : (1<<15));
    14c0:	03 9b       	sbis	0x00, 3	; 0
    14c2:	03 c0       	rjmp	.+6      	; 0x14ca <matrix_scan+0x198>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <matrix_scan+0x19c>
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e8       	ldi	r25, 0x80	; 128
           (PINF&(1<<5) ? 0 : (1<<9)) |
           (PINF&(1<<6) ? 0 : (1<<10)) |
           (PINF&(1<<7) ? 0 : (1<<11)) |
           (PINA&(1<<0) ? 0 : (1<<12)) |
           (PINA&(1<<1) ? 0 : (1<<13)) |
           (PINA&(1<<2) ? 0 : (1<<14)) |
    14ce:	28 2b       	or	r18, r24
    14d0:	39 2b       	or	r19, r25
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    14d2:	d7 01       	movw	r26, r14
    14d4:	8d 91       	ld	r24, X+
    14d6:	9c 91       	ld	r25, X
    14d8:	11 97       	sbiw	r26, 0x01	; 1
    14da:	82 17       	cp	r24, r18
    14dc:	93 07       	cpc	r25, r19
    14de:	59 f1       	breq	.+86     	; 0x1536 <matrix_scan+0x204>
            matrix_debouncing[i] = cols;
    14e0:	2d 93       	st	X+, r18
    14e2:	3c 93       	st	X, r19
            if (debouncing) {
    14e4:	80 91 00 01 	lds	r24, 0x0100
    14e8:	88 23       	and	r24, r24
    14ea:	11 f1       	breq	.+68     	; 0x1530 <matrix_scan+0x1fe>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    14ec:	80 91 e1 03 	lds	r24, 0x03E1
    14f0:	80 ff       	sbrs	r24, 0
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <matrix_scan+0x1ca>
    14f4:	8a eb       	ldi	r24, 0xBA	; 186
    14f6:	93 e0       	ldi	r25, 0x03	; 3
    14f8:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    14fc:	80 91 e1 03 	lds	r24, 0x03E1
    1500:	80 ff       	sbrs	r24, 0
    1502:	0e c0       	rjmp	.+28     	; 0x1520 <matrix_scan+0x1ee>
    1504:	80 91 00 01 	lds	r24, 0x0100
    1508:	1f 92       	push	r1
    150a:	8f 93       	push	r24
    150c:	84 ec       	ldi	r24, 0xC4	; 196
    150e:	93 e0       	ldi	r25, 0x03	; 3
    1510:	9f 93       	push	r25
    1512:	8f 93       	push	r24
    1514:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	80 91 e1 03 	lds	r24, 0x03E1
    1524:	80 ff       	sbrs	r24, 0
    1526:	04 c0       	rjmp	.+8      	; 0x1530 <matrix_scan+0x1fe>
    1528:	89 ec       	ldi	r24, 0xC9	; 201
    152a:	93 e0       	ldi	r25, 0x03	; 3
    152c:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
            }
            debouncing = DEBOUNCE;
    1530:	85 e0       	ldi	r24, 0x05	; 5
    1532:	80 93 00 01 	sts	0x0100, r24
        }
        unselect_rows();
    1536:	0e 94 63 09 	call	0x12c6	; 0x12c6 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    153a:	df 5f       	subi	r29, 0xFF	; 255
    153c:	b2 e0       	ldi	r27, 0x02	; 2
    153e:	eb 0e       	add	r14, r27
    1540:	f1 1c       	adc	r15, r1
    1542:	d8 30       	cpi	r29, 0x08	; 8
    1544:	09 f0       	breq	.+2      	; 0x1548 <matrix_scan+0x216>
    1546:	04 cf       	rjmp	.-504    	; 0x1350 <matrix_scan+0x1e>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    1548:	80 91 00 01 	lds	r24, 0x0100
    154c:	88 23       	and	r24, r24
    154e:	c9 f0       	breq	.+50     	; 0x1582 <matrix_scan+0x250>
        if (--debouncing) {
    1550:	81 50       	subi	r24, 0x01	; 1
    1552:	80 93 00 01 	sts	0x0100, r24
    1556:	88 23       	and	r24, r24
    1558:	39 f0       	breq	.+14     	; 0x1568 <matrix_scan+0x236>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    155a:	ef ec       	ldi	r30, 0xCF	; 207
    155c:	f7 e0       	ldi	r31, 0x07	; 7
    155e:	31 97       	sbiw	r30, 0x01	; 1
    1560:	f1 f7       	brne	.-4      	; 0x155e <matrix_scan+0x22c>
    1562:	00 c0       	rjmp	.+0      	; 0x1564 <matrix_scan+0x232>
    1564:	00 00       	nop
    1566:	0d c0       	rjmp	.+26     	; 0x1582 <matrix_scan+0x250>
    1568:	e2 e1       	ldi	r30, 0x12	; 18
    156a:	f2 e0       	ldi	r31, 0x02	; 2
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    156c:	d6 01       	movw	r26, r12
    156e:	8d 91       	ld	r24, X+
    1570:	9d 91       	ld	r25, X+
    1572:	6d 01       	movw	r12, r26
    1574:	81 93       	st	Z+, r24
    1576:	91 93       	st	Z+, r25

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1578:	b2 e3       	ldi	r27, 0x32	; 50
    157a:	cb 16       	cp	r12, r27
    157c:	b2 e0       	ldi	r27, 0x02	; 2
    157e:	db 06       	cpc	r13, r27
    1580:	a9 f7       	brne	.-22     	; 0x156c <matrix_scan+0x23a>
            }
        }
    }

    return 1;
}
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	ff 90       	pop	r15
    158a:	ef 90       	pop	r14
    158c:	df 90       	pop	r13
    158e:	cf 90       	pop	r12
    1590:	bf 90       	pop	r11
    1592:	af 90       	pop	r10
    1594:	08 95       	ret

00001596 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    1596:	e8 2f       	mov	r30, r24
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	ee 0f       	add	r30, r30
    159c:	ff 1f       	adc	r31, r31
    159e:	ee 5e       	subi	r30, 0xEE	; 238
    15a0:	fd 4f       	sbci	r31, 0xFD	; 253
}
    15a2:	80 81       	ld	r24, Z
    15a4:	91 81       	ldd	r25, Z+1	; 0x01
    15a6:	08 95       	ret

000015a8 <matrix_print>:

void matrix_print(void)
{
    15a8:	8f 92       	push	r8
    15aa:	9f 92       	push	r9
    15ac:	af 92       	push	r10
    15ae:	bf 92       	push	r11
    15b0:	cf 92       	push	r12
    15b2:	df 92       	push	r13
    15b4:	ef 92       	push	r14
    15b6:	ff 92       	push	r15
    print("\nr/c 0123456789ABCDEF\n");
    15b8:	8b ec       	ldi	r24, 0xCB	; 203
    15ba:	93 e0       	ldi	r25, 0x03	; 3
    15bc:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    15c0:	b2 e1       	ldi	r27, 0x12	; 18
    15c2:	ab 2e       	mov	r10, r27
    15c4:	b2 e0       	ldi	r27, 0x02	; 2
    15c6:	bb 2e       	mov	r11, r27
    15c8:	e1 2c       	mov	r14, r1
    15ca:	f1 2c       	mov	r15, r1
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    15cc:	82 ee       	ldi	r24, 0xE2	; 226
    15ce:	88 2e       	mov	r8, r24
    15d0:	83 e0       	ldi	r24, 0x03	; 3
    15d2:	98 2e       	mov	r9, r24
        pbin_reverse16(matrix_get_row(row));
    15d4:	9a ee       	ldi	r25, 0xEA	; 234
    15d6:	c9 2e       	mov	r12, r25
    15d8:	93 e0       	ldi	r25, 0x03	; 3
    15da:	d9 2e       	mov	r13, r25

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    15dc:	ff 92       	push	r15
    15de:	ef 92       	push	r14
    15e0:	9f 92       	push	r9
    15e2:	8f 92       	push	r8
    15e4:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    15e8:	87 ee       	ldi	r24, 0xE7	; 231
    15ea:	93 e0       	ldi	r25, 0x03	; 3
    15ec:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
        pbin_reverse16(matrix_get_row(row));
    15f0:	f5 01       	movw	r30, r10
    15f2:	81 91       	ld	r24, Z+
    15f4:	91 91       	ld	r25, Z+
    15f6:	5f 01       	movw	r10, r30
    15f8:	0e 94 f6 27 	call	0x4fec	; 0x4fec <bitrev16>
    15fc:	9f 93       	push	r25
    15fe:	8f 93       	push	r24
    1600:	df 92       	push	r13
    1602:	cf 92       	push	r12
    1604:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
        print("\n");
    1608:	80 ef       	ldi	r24, 0xF0	; 240
    160a:	93 e0       	ldi	r25, 0x03	; 3
    160c:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    1610:	ff ef       	ldi	r31, 0xFF	; 255
    1612:	ef 1a       	sub	r14, r31
    1614:	ff 0a       	sbc	r15, r31
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    1616:	8d b7       	in	r24, 0x3d	; 61
    1618:	9e b7       	in	r25, 0x3e	; 62
    161a:	08 96       	adiw	r24, 0x08	; 8
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	9e bf       	out	0x3e, r25	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	8d bf       	out	0x3d, r24	; 61
    1626:	98 e0       	ldi	r25, 0x08	; 8
    1628:	e9 16       	cp	r14, r25
    162a:	f1 04       	cpc	r15, r1
    162c:	b9 f6       	brne	.-82     	; 0x15dc <matrix_print+0x34>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	df 90       	pop	r13
    1634:	cf 90       	pop	r12
    1636:	bf 90       	pop	r11
    1638:	af 90       	pop	r10
    163a:	9f 90       	pop	r9
    163c:	8f 90       	pop	r8
    163e:	08 95       	ret

00001640 <led_set>:
 * 
 */

 void led_set(uint8_t usb_led)
{
    DDR_CAPSLCK |= (1<<BIT_CAPSLCK);
    1640:	3b 9a       	sbi	0x07, 3	; 7

    if (usb_led & (1<<USB_LED_CAPS_LOCK))
    1642:	81 ff       	sbrs	r24, 1
    1644:	02 c0       	rjmp	.+4      	; 0x164a <led_set+0xa>
    {
        
        PORT_CAPSLCK &= ~(1<<BIT_CAPSLCK);
    1646:	43 98       	cbi	0x08, 3	; 8
    1648:	08 95       	ret
    }
    else
    {
        PORT_CAPSLCK |= (1<<BIT_CAPSLCK);
    164a:	43 9a       	sbi	0x08, 3	; 8
    164c:	08 95       	ret

0000164e <serial_init>:
#endif


void serial_init(void)
{
    SERIAL_UART_INIT();
    164e:	83 e3       	ldi	r24, 0x33	; 51
    1650:	80 93 cc 00 	sts	0x00CC, r24
    1654:	10 92 cd 00 	sts	0x00CD, r1
    1658:	e9 ec       	ldi	r30, 0xC9	; 201
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	80 69       	ori	r24, 0x90	; 144
    1660:	80 83       	st	Z, r24
    1662:	80 81       	ld	r24, Z
    1664:	88 60       	ori	r24, 0x08	; 8
    1666:	80 83       	st	Z, r24
    1668:	ea ec       	ldi	r30, 0xCA	; 202
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	80 83       	st	Z, r24
    1670:	eb ec       	ldi	r30, 0xCB	; 203
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	80 83       	st	Z, r24
    1678:	51 9a       	sbi	0x0a, 1	; 10
    167a:	59 98       	cbi	0x0b, 1	; 11
    167c:	78 94       	sei
    167e:	08 95       	ret

00001680 <serial_recv2>:
}

int16_t serial_recv2(void)
{
    uint8_t data = 0;
    if (rbuf_head == rbuf_tail) {
    1680:	40 91 32 02 	lds	r20, 0x0232
    1684:	20 91 33 02 	lds	r18, 0x0233
    1688:	42 17       	cp	r20, r18
    168a:	d9 f0       	breq	.+54     	; 0x16c2 <serial_recv2+0x42>
        return -1;
    }

    data = rbuf[rbuf_tail];
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	f9 01       	movw	r30, r18
    1690:	ec 5c       	subi	r30, 0xCC	; 204
    1692:	fd 4f       	sbci	r31, 0xFD	; 253
    1694:	50 81       	ld	r21, Z
    rbuf_tail = (rbuf_tail + 1) % RBUF_SIZE;
    1696:	2f 5f       	subi	r18, 0xFF	; 255
    1698:	3f 4f       	sbci	r19, 0xFF	; 255
    169a:	33 27       	eor	r19, r19
    169c:	20 93 33 02 	sts	0x0233, r18
    16a0:	84 2f       	mov	r24, r20
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    rbuf_check_rts_lo();
    16a4:	42 17       	cp	r20, r18
    16a6:	18 f4       	brcc	.+6      	; 0x16ae <serial_recv2+0x2e>
    16a8:	28 1b       	sub	r18, r24
    16aa:	39 0b       	sbc	r19, r25
    16ac:	03 c0       	rjmp	.+6      	; 0x16b4 <serial_recv2+0x34>
    16ae:	28 1b       	sub	r18, r24
    16b0:	39 0b       	sbc	r19, r25
    16b2:	33 95       	inc	r19
    16b4:	23 30       	cpi	r18, 0x03	; 3
    16b6:	31 05       	cpc	r19, r1
    16b8:	0c f0       	brlt	.+2      	; 0x16bc <serial_recv2+0x3c>
    16ba:	59 98       	cbi	0x0b, 1	; 11
    return data;
    16bc:	25 2f       	mov	r18, r21
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <serial_recv2+0x46>

int16_t serial_recv2(void)
{
    uint8_t data = 0;
    if (rbuf_head == rbuf_tail) {
        return -1;
    16c2:	2f ef       	ldi	r18, 0xFF	; 255
    16c4:	3f ef       	ldi	r19, 0xFF	; 255

    data = rbuf[rbuf_tail];
    rbuf_tail = (rbuf_tail + 1) % RBUF_SIZE;
    rbuf_check_rts_lo();
    return data;
}
    16c6:	c9 01       	movw	r24, r18
    16c8:	08 95       	ret

000016ca <serial_send>:

void serial_send(uint8_t data)
{
    while (!SERIAL_UART_TXD_READY) ;
    16ca:	90 91 c8 00 	lds	r25, 0x00C8
    16ce:	95 ff       	sbrs	r25, 5
    16d0:	fc cf       	rjmp	.-8      	; 0x16ca <serial_send>
    SERIAL_UART_DATA = data;
    16d2:	80 93 ce 00 	sts	0x00CE, r24
    16d6:	08 95       	ret

000016d8 <__vector_25>:
}

// USART RX complete interrupt
ISR(SERIAL_UART_RXD_VECT)
{
    16d8:	1f 92       	push	r1
    16da:	0f 92       	push	r0
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	0f 92       	push	r0
    16e0:	11 24       	eor	r1, r1
    16e2:	0b b6       	in	r0, 0x3b	; 59
    16e4:	0f 92       	push	r0
    16e6:	2f 93       	push	r18
    16e8:	3f 93       	push	r19
    16ea:	4f 93       	push	r20
    16ec:	5f 93       	push	r21
    16ee:	8f 93       	push	r24
    16f0:	9f 93       	push	r25
    16f2:	ef 93       	push	r30
    16f4:	ff 93       	push	r31
    uint8_t next = (rbuf_head + 1) % RBUF_SIZE;
    16f6:	20 91 32 02 	lds	r18, 0x0232
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	c9 01       	movw	r24, r18
    16fe:	01 96       	adiw	r24, 0x01	; 1
    1700:	99 27       	eor	r25, r25
    if (next != rbuf_tail) {
    1702:	40 91 33 02 	lds	r20, 0x0233
    1706:	48 17       	cp	r20, r24
    1708:	41 f0       	breq	.+16     	; 0x171a <__vector_25+0x42>
        rbuf[rbuf_head] = SERIAL_UART_DATA;
    170a:	90 91 ce 00 	lds	r25, 0x00CE
    170e:	f9 01       	movw	r30, r18
    1710:	ec 5c       	subi	r30, 0xCC	; 204
    1712:	fd 4f       	sbci	r31, 0xFD	; 253
    1714:	90 83       	st	Z, r25
        rbuf_head = next;
    1716:	80 93 32 02 	sts	0x0232, r24
    }
    rbuf_check_rts_hi();
    171a:	50 91 32 02 	lds	r21, 0x0232
    171e:	84 2f       	mov	r24, r20
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	25 2f       	mov	r18, r21
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	82 1b       	sub	r24, r18
    1728:	93 0b       	sbc	r25, r19
    172a:	54 17       	cp	r21, r20
    172c:	08 f4       	brcc	.+2      	; 0x1730 <__vector_25+0x58>
    172e:	01 c0       	rjmp	.+2      	; 0x1732 <__vector_25+0x5a>
    1730:	93 95       	inc	r25
    1732:	03 97       	sbiw	r24, 0x03	; 3
    1734:	0c f4       	brge	.+2      	; 0x1738 <__vector_25+0x60>
    1736:	59 9a       	sbi	0x0b, 1	; 11
}
    1738:	ff 91       	pop	r31
    173a:	ef 91       	pop	r30
    173c:	9f 91       	pop	r25
    173e:	8f 91       	pop	r24
    1740:	5f 91       	pop	r21
    1742:	4f 91       	pop	r20
    1744:	3f 91       	pop	r19
    1746:	2f 91       	pop	r18
    1748:	0f 90       	pop	r0
    174a:	0b be       	out	0x3b, r0	; 59
    174c:	0f 90       	pop	r0
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	0f 90       	pop	r0
    1752:	1f 90       	pop	r1
    1754:	18 95       	reti

00001756 <keyboard_leds>:
    return PINB&(1<<6);
}


static uint8_t leds = 0;
static uint8_t keyboard_leds(void) { return leds; }
    1756:	80 91 34 03 	lds	r24, 0x0334
    175a:	08 95       	ret

0000175c <send_system>:
    serial_send(report->y);
    serial_send(report->v);
}

static void send_system(uint16_t data)
{
    175c:	08 95       	ret

0000175e <config_keyboard_leds>:
    config_send_mouse,
    config_send_system,
    config_send_consumer
};

static uint8_t config_keyboard_leds(void) { return leds; }
    175e:	80 91 34 03 	lds	r24, 0x0334
    1762:	08 95       	ret

00001764 <config_send_keyboard>:
static void config_send_keyboard(report_keyboard_t *report) {}
    1764:	08 95       	ret

00001766 <config_send_mouse>:
static void config_send_mouse(report_mouse_t *report) {}
    1766:	08 95       	ret

00001768 <config_send_system>:
static void config_send_system(uint16_t data) {}
    1768:	08 95       	ret

0000176a <config_send_consumer>:
static void config_send_consumer(uint16_t data) {}
    176a:	08 95       	ret

0000176c <send_consumer>:
    };
    return 0;
}

static void send_consumer(uint16_t data)
{
    176c:	ef 92       	push	r14
    176e:	ff 92       	push	r15
    1770:	83 5b       	subi	r24, 0xB3	; 179
    1772:	91 09       	sbc	r25, r1
    1774:	88 33       	cpi	r24, 0x38	; 56
    1776:	91 05       	cpc	r25, r1
    1778:	40 f4       	brcc	.+16     	; 0x178a <send_consumer+0x1e>
    177a:	fc 01       	movw	r30, r24
    177c:	ee 0f       	add	r30, r30
    177e:	ff 1f       	adc	r31, r31
    1780:	e6 5d       	subi	r30, 0xD6	; 214
    1782:	fe 4f       	sbci	r31, 0xFE	; 254
    1784:	e0 80       	ld	r14, Z
    1786:	f1 80       	ldd	r15, Z+1	; 0x01
    1788:	02 c0       	rjmp	.+4      	; 0x178e <send_consumer+0x22>
    178a:	e1 2c       	mov	r14, r1
    178c:	f1 2c       	mov	r15, r1
    uint16_t bits = usage2bits(data);
    serial_send(0xFD);  // Raw report mode
    178e:	8d ef       	ldi	r24, 0xFD	; 253
    1790:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(3);     // length
    1794:	83 e0       	ldi	r24, 0x03	; 3
    1796:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(3);     // descriptor type
    179a:	83 e0       	ldi	r24, 0x03	; 3
    179c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(bits&0xFF);
    17a0:	8e 2d       	mov	r24, r14
    17a2:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send((bits>>8)&0xFF);
    17a6:	8f 2d       	mov	r24, r15
}
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    uint16_t bits = usage2bits(data);
    serial_send(0xFD);  // Raw report mode
    serial_send(3);     // length
    serial_send(3);     // descriptor type
    serial_send(bits&0xFF);
    serial_send((bits>>8)&0xFF);
    17ac:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <serial_send>

000017b0 <send_mouse>:
    serial_send(report->keys[4]);
    serial_send(report->keys[5]);
}

static void send_mouse(report_mouse_t *report)
{
    17b0:	ef 92       	push	r14
    17b2:	ff 92       	push	r15
    17b4:	7c 01       	movw	r14, r24
    PORTD |= (1<<5);    // high
    wait_ms(5);
    PORTD &= ~(1<<5);   // low
*/

    serial_send(0xFD);  // Raw report mode
    17b6:	8d ef       	ldi	r24, 0xFD	; 253
    17b8:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(5);     // length
    17bc:	85 e0       	ldi	r24, 0x05	; 5
    17be:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(2);     // descriptor type
    17c2:	82 e0       	ldi	r24, 0x02	; 2
    17c4:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(report->buttons);
    17c8:	f7 01       	movw	r30, r14
    17ca:	80 81       	ld	r24, Z
    17cc:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(report->x);
    17d0:	f7 01       	movw	r30, r14
    17d2:	81 81       	ldd	r24, Z+1	; 0x01
    17d4:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(report->y);
    17d8:	f7 01       	movw	r30, r14
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(report->v);
    17e0:	f7 01       	movw	r30, r14
    17e2:	83 81       	ldd	r24, Z+3	; 0x03
}
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    serial_send(5);     // length
    serial_send(2);     // descriptor type
    serial_send(report->buttons);
    serial_send(report->x);
    serial_send(report->y);
    serial_send(report->v);
    17e8:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <serial_send>

000017ec <send_keyboard>:
static uint8_t leds = 0;
static uint8_t keyboard_leds(void) { return leds; }
void rn42_set_leds(uint8_t l) { leds = l; }

static void send_keyboard(report_keyboard_t *report)
{
    17ec:	ef 92       	push	r14
    17ee:	ff 92       	push	r15
    17f0:	7c 01       	movw	r14, r24
    PORTD |= (1<<5);    // high
    wait_ms(5);
    PORTD &= ~(1<<5);   // low
*/

    serial_send(0xFD);  // Raw report mode
    17f2:	8d ef       	ldi	r24, 0xFD	; 253
    17f4:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(9);     // length
    17f8:	89 e0       	ldi	r24, 0x09	; 9
    17fa:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(1);     // descriptor type
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(report->mods);
    1804:	f7 01       	movw	r30, r14
    1806:	80 81       	ld	r24, Z
    1808:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(0x00);
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(report->keys[0]);
    1812:	f7 01       	movw	r30, r14
    1814:	82 81       	ldd	r24, Z+2	; 0x02
    1816:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(report->keys[1]);
    181a:	f7 01       	movw	r30, r14
    181c:	83 81       	ldd	r24, Z+3	; 0x03
    181e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(report->keys[2]);
    1822:	f7 01       	movw	r30, r14
    1824:	84 81       	ldd	r24, Z+4	; 0x04
    1826:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(report->keys[3]);
    182a:	f7 01       	movw	r30, r14
    182c:	85 81       	ldd	r24, Z+5	; 0x05
    182e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(report->keys[4]);
    1832:	f7 01       	movw	r30, r14
    1834:	86 81       	ldd	r24, Z+6	; 0x06
    1836:	0e 94 65 0b 	call	0x16ca	; 0x16ca <serial_send>
    serial_send(report->keys[5]);
    183a:	f7 01       	movw	r30, r14
    183c:	87 81       	ldd	r24, Z+7	; 0x07
}
    183e:	ff 90       	pop	r15
    1840:	ef 90       	pop	r14
    serial_send(report->keys[0]);
    serial_send(report->keys[1]);
    serial_send(report->keys[2]);
    serial_send(report->keys[3]);
    serial_send(report->keys[4]);
    serial_send(report->keys[5]);
    1842:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <serial_send>

00001846 <rn42_getc>:
    serial_init();
}

int16_t rn42_getc(void)
{
    return serial_recv2();
    1846:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <serial_recv2>

0000184a <rn42_gets>:
}

const char *rn42_gets(uint16_t timeout)
{
    184a:	cf 92       	push	r12
    184c:	df 92       	push	r13
    184e:	ef 92       	push	r14
    1850:	ff 92       	push	r15
    1852:	cf 93       	push	r28
    1854:	7c 01       	movw	r14, r24
    static char s[24];
    uint16_t t = timer_read();
    1856:	0e 94 92 28 	call	0x5124	; 0x5124 <timer_read>
    185a:	6c 01       	movw	r12, r24
    uint8_t i = 0;
    185c:	c0 e0       	ldi	r28, 0x00	; 0
    185e:	13 c0       	rjmp	.+38     	; 0x1886 <rn42_gets+0x3c>
    int16_t c;
    while (i < 23 && timer_elapsed(t) < timeout) {
        if ((c = rn42_getc()) != -1) {
    1860:	0e 94 23 0c 	call	0x1846	; 0x1846 <rn42_getc>
    1864:	9c 01       	movw	r18, r24
    1866:	2f 3f       	cpi	r18, 0xFF	; 255
    1868:	8f ef       	ldi	r24, 0xFF	; 255
    186a:	38 07       	cpc	r19, r24
    186c:	51 f0       	breq	.+20     	; 0x1882 <rn42_gets+0x38>
            if ((char)c == '\r') continue;
    186e:	2d 30       	cpi	r18, 0x0D	; 13
    1870:	41 f0       	breq	.+16     	; 0x1882 <rn42_gets+0x38>
            if ((char)c == '\n') break;
    1872:	2a 30       	cpi	r18, 0x0A	; 10
    1874:	71 f0       	breq	.+28     	; 0x1892 <rn42_gets+0x48>
            s[i++] = c;
    1876:	ac 2f       	mov	r26, r28
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	ab 5c       	subi	r26, 0xCB	; 203
    187c:	bc 4f       	sbci	r27, 0xFC	; 252
    187e:	2c 93       	st	X, r18
    1880:	cf 5f       	subi	r28, 0xFF	; 255
{
    static char s[24];
    uint16_t t = timer_read();
    uint8_t i = 0;
    int16_t c;
    while (i < 23 && timer_elapsed(t) < timeout) {
    1882:	c7 31       	cpi	r28, 0x17	; 23
    1884:	30 f4       	brcc	.+12     	; 0x1892 <rn42_gets+0x48>
    1886:	c6 01       	movw	r24, r12
    1888:	0e 94 b1 28 	call	0x5162	; 0x5162 <timer_elapsed>
    188c:	8e 15       	cp	r24, r14
    188e:	9f 05       	cpc	r25, r15
    1890:	38 f3       	brcs	.-50     	; 0x1860 <rn42_gets+0x16>
            if ((char)c == '\r') continue;
            if ((char)c == '\n') break;
            s[i++] = c;
        }
    }
    s[i] = '\0';
    1892:	ec 2f       	mov	r30, r28
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	eb 5c       	subi	r30, 0xCB	; 203
    1898:	fc 4f       	sbci	r31, 0xFC	; 252
    189a:	10 82       	st	Z, r1
    return s;
}
    189c:	85 e3       	ldi	r24, 0x35	; 53
    189e:	93 e0       	ldi	r25, 0x03	; 3
    18a0:	cf 91       	pop	r28
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	df 90       	pop	r13
    18a8:	cf 90       	pop	r12
    18aa:	08 95       	ret

000018ac <rn42_putc>:

void rn42_putc(uint8_t c)
{
    serial_send(c);
    18ac:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <serial_send>

000018b0 <rn42_autoconnecting>:

bool rn42_autoconnecting(void)
{
    // GPIO6 for control connection(high: auto connect, low: disconnect)
    // Note that this needs config: SM,4(Auto-Connect DTR Mode)
    return (PORTD & (1<<7) ? true : false);
    18b0:	8b b1       	in	r24, 0x0b	; 11
}
    18b2:	88 1f       	adc	r24, r24
    18b4:	88 27       	eor	r24, r24
    18b6:	88 1f       	adc	r24, r24
    18b8:	08 95       	ret

000018ba <rn42_autoconnect>:

void rn42_autoconnect(void)
{
    // hi to auto connect
    DDRD |= (1<<7);
    18ba:	57 9a       	sbi	0x0a, 7	; 10
    PORTD |= (1<<7);
    18bc:	5f 9a       	sbi	0x0b, 7	; 11
    18be:	08 95       	ret

000018c0 <rn42_init>:


void rn42_init(void)
{
    // PF7: BT connection control GPIO6 (high: connect, low: disconnect)
    rn42_autoconnect();
    18c0:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rn42_autoconnect>

    // PF6: linked(input without pull-up) GPIO2
    DDRD  &= ~(1<<6);
    18c4:	56 98       	cbi	0x0a, 6	; 10
    PORTD |=  (1<<6);
    18c6:	5e 9a       	sbi	0x0b, 6	; 11

    // PF1: RTS(low: allowed to send, high: not allowed)
    DDRD &= ~(1<<0);
    18c8:	50 98       	cbi	0x0a, 0	; 10
    PORTD &= ~(1<<0);
    18ca:	58 98       	cbi	0x0b, 0	; 11

    // PD5: CTS(low: allow to send, high:not allow)
    DDRD |= (1<<1);
    18cc:	51 9a       	sbi	0x0a, 1	; 10
    PORTD &= ~(1<<1);
    18ce:	59 98       	cbi	0x0b, 1	; 11

    serial_init();
    18d0:	0c 94 27 0b 	jmp	0x164e	; 0x164e <serial_init>

000018d4 <rn42_disconnect>:
}

void rn42_disconnect(void)
{
    // low to disconnect
    DDRD |= (1<<7);
    18d4:	57 9a       	sbi	0x0a, 7	; 10
    PORTD &= ~(1<<7);
    18d6:	5f 98       	cbi	0x0b, 7	; 11
    18d8:	08 95       	ret

000018da <rn42_rts>:
}

bool rn42_rts(void)
{
    // low when RN-42 is powered and ready to receive
    return PIND&(1<<0);
    18da:	89 b1       	in	r24, 0x09	; 9
}
    18dc:	81 70       	andi	r24, 0x01	; 1
    18de:	08 95       	ret

000018e0 <rn42_linked>:
{
    // RN-42 GPIO2
    //   Hi-Z:  Not powered
    //   High:  Linked
    //   Low:   Connecting
    return PINB&(1<<6);
    18e0:	83 b1       	in	r24, 0x03	; 3
}
    18e2:	86 fb       	bst	r24, 6
    18e4:	88 27       	eor	r24, r24
    18e6:	80 f9       	bld	r24, 0
    18e8:	08 95       	ret

000018ea <rn42_set_leds>:


static uint8_t leds = 0;
static uint8_t keyboard_leds(void) { return leds; }
void rn42_set_leds(uint8_t l) { leds = l; }
    18ea:	80 93 34 03 	sts	0x0334, r24
    18ee:	08 95       	ret

000018f0 <status_led>:
static bool force_usb = false;

static void status_led(bool on)
{
    if (on) {
        DDRE  |=  (1<<6);
    18f0:	6e 9a       	sbi	0x0d, 6	; 13
static bool config_mode = false;
static bool force_usb = false;

static void status_led(bool on)
{
    if (on) {
    18f2:	88 23       	and	r24, r24
    18f4:	11 f0       	breq	.+4      	; 0x18fa <status_led+0xa>
        DDRE  |=  (1<<6);
        PORTE &= ~(1<<6);
    18f6:	76 98       	cbi	0x0e, 6	; 14
    18f8:	08 95       	ret
    } else {
        DDRE  |=  (1<<6);
        PORTE |=  (1<<6);
    18fa:	76 9a       	sbi	0x0e, 6	; 14
    18fc:	08 95       	ret

000018fe <send_str>:

#define SEND_STR(str)       send_str(PSTR(str))
#define SEND_COMMAND(cmd)   send_command(PSTR(cmd))

static void send_str(const char *str)
{
    18fe:	ef 92       	push	r14
    1900:	ff 92       	push	r15
    1902:	7c 01       	movw	r14, r24
    uint8_t c;
    while ((c = pgm_read_byte(str++)))
    1904:	02 c0       	rjmp	.+4      	; 0x190a <send_str+0xc>
        rn42_putc(c);
    1906:	0e 94 56 0c 	call	0x18ac	; 0x18ac <rn42_putc>
#define SEND_COMMAND(cmd)   send_command(PSTR(cmd))

static void send_str(const char *str)
{
    uint8_t c;
    while ((c = pgm_read_byte(str++)))
    190a:	f7 01       	movw	r30, r14
    190c:	8f ef       	ldi	r24, 0xFF	; 255
    190e:	e8 1a       	sub	r14, r24
    1910:	f8 0a       	sbc	r15, r24
    1912:	84 91       	lpm	r24, Z
    1914:	81 11       	cpse	r24, r1
    1916:	f7 cf       	rjmp	.-18     	; 0x1906 <send_str+0x8>
        rn42_putc(c);
}
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	08 95       	ret

0000191e <print_rn42>:
 * Command
 ******************************************************************************/
static host_driver_t *prev_driver = &rn42_driver;

static void print_rn42(void)
{
    191e:	ef 92       	push	r14
    1920:	ff 92       	push	r15
    int16_t c;
    while ((c = rn42_getc()) != -1) {
        xprintf("%c", c);
    1922:	88 e6       	ldi	r24, 0x68	; 104
    1924:	e8 2e       	mov	r14, r24
    1926:	86 e0       	ldi	r24, 0x06	; 6
    1928:	f8 2e       	mov	r15, r24
static host_driver_t *prev_driver = &rn42_driver;

static void print_rn42(void)
{
    int16_t c;
    while ((c = rn42_getc()) != -1) {
    192a:	0a c0       	rjmp	.+20     	; 0x1940 <print_rn42+0x22>
        xprintf("%c", c);
    192c:	9f 93       	push	r25
    192e:	8f 93       	push	r24
    1930:	ff 92       	push	r15
    1932:	ef 92       	push	r14
    1934:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
static host_driver_t *prev_driver = &rn42_driver;

static void print_rn42(void)
{
    int16_t c;
    while ((c = rn42_getc()) != -1) {
    1940:	0e 94 23 0c 	call	0x1846	; 0x1846 <rn42_getc>
    1944:	8f 3f       	cpi	r24, 0xFF	; 255
    1946:	2f ef       	ldi	r18, 0xFF	; 255
    1948:	92 07       	cpc	r25, r18
    194a:	81 f7       	brne	.-32     	; 0x192c <print_rn42+0xe>
        xprintf("%c", c);
    }
}
    194c:	ff 90       	pop	r15
    194e:	ef 90       	pop	r14
    1950:	08 95       	ret

00001952 <send_command>:
}

static const char *send_command(const char *cmd)
{
    static const char *s;
    send_str(cmd);
    1952:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <send_str>
    1956:	2f ef       	ldi	r18, 0xFF	; 255
    1958:	84 e3       	ldi	r24, 0x34	; 52
    195a:	9c e0       	ldi	r25, 0x0C	; 12
    195c:	21 50       	subi	r18, 0x01	; 1
    195e:	80 40       	sbci	r24, 0x00	; 0
    1960:	90 40       	sbci	r25, 0x00	; 0
    1962:	e1 f7       	brne	.-8      	; 0x195c <send_command+0xa>
    1964:	00 c0       	rjmp	.+0      	; 0x1966 <send_command+0x14>
    1966:	00 00       	nop
    wait_ms(500);
    s = rn42_gets(100);
    1968:	84 e6       	ldi	r24, 0x64	; 100
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 94 25 0c 	call	0x184a	; 0x184a <rn42_gets>
    1970:	80 93 52 03 	sts	0x0352, r24
    1974:	90 93 53 03 	sts	0x0353, r25
    xprintf("%s\r\n", s);
    1978:	9f 93       	push	r25
    197a:	8f 93       	push	r24
    197c:	83 e6       	ldi	r24, 0x63	; 99
    197e:	96 e0       	ldi	r25, 0x06	; 6
    1980:	9f 93       	push	r25
    1982:	8f 93       	push	r24
    1984:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    print_rn42();
    1988:	0e 94 8f 0c 	call	0x191e	; 0x191e <print_rn42>
    return s;
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
}
    1994:	80 91 52 03 	lds	r24, 0x0352
    1998:	90 91 53 03 	lds	r25, 0x0353
    199c:	08 95       	ret

0000199e <get_link>:
    SEND_COMMAND("R,1\r\n");    // reboot
    exit_command_mode();
}

static const char *get_link(uint8_t * eeaddr)
{
    199e:	af 92       	push	r10
    19a0:	bf 92       	push	r11
    19a2:	cf 92       	push	r12
    19a4:	df 92       	push	r13
    19a6:	ef 92       	push	r14
    19a8:	ff 92       	push	r15
    19aa:	5c 01       	movw	r10, r24
    19ac:	94 e5       	ldi	r25, 0x54	; 84
    19ae:	c9 2e       	mov	r12, r25
    19b0:	93 e0       	ldi	r25, 0x03	; 3
    19b2:	d9 2e       	mov	r13, r25
    static char s[13];
    for (int i = 0; i < 12; i++) {
    19b4:	e1 2c       	mov	r14, r1
    19b6:	f1 2c       	mov	r15, r1
        uint8_t c = eeprom_read_byte(eeaddr+i);
    19b8:	c5 01       	movw	r24, r10
    19ba:	8e 0d       	add	r24, r14
    19bc:	9f 1d       	adc	r25, r15
    19be:	0e 94 e6 31 	call	0x63cc	; 0x63cc <__eerd_byte_usb1286>
        s[i] = c;
    19c2:	f6 01       	movw	r30, r12
    19c4:	81 93       	st	Z+, r24
    19c6:	6f 01       	movw	r12, r30
}

static const char *get_link(uint8_t * eeaddr)
{
    static char s[13];
    for (int i = 0; i < 12; i++) {
    19c8:	ff ef       	ldi	r31, 0xFF	; 255
    19ca:	ef 1a       	sub	r14, r31
    19cc:	ff 0a       	sbc	r15, r31
    19ce:	8c e0       	ldi	r24, 0x0C	; 12
    19d0:	e8 16       	cp	r14, r24
    19d2:	f1 04       	cpc	r15, r1
    19d4:	89 f7       	brne	.-30     	; 0x19b8 <get_link+0x1a>
        uint8_t c = eeprom_read_byte(eeaddr+i);
        s[i] = c;
    }
    s[12] = '\0';
    19d6:	10 92 60 03 	sts	0x0360, r1
    return s;
}
    19da:	84 e5       	ldi	r24, 0x54	; 84
    19dc:	93 e0       	ldi	r25, 0x03	; 3
    19de:	ff 90       	pop	r15
    19e0:	ef 90       	pop	r14
    19e2:	df 90       	pop	r13
    19e4:	cf 90       	pop	r12
    19e6:	bf 90       	pop	r11
    19e8:	af 90       	pop	r10
    19ea:	08 95       	ret

000019ec <enter_command_mode>:
    return s;
}

static void enter_command_mode(void)
{
    prev_driver = host_get_driver();
    19ec:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <host_get_driver>
    19f0:	90 93 16 01 	sts	0x0116, r25
    19f4:	80 93 15 01 	sts	0x0115, r24
    clear_keyboard();
    19f8:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <clear_keyboard>
    host_set_driver(&rn42_config_driver);   // null driver; not to send a key to host
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	91 e0       	ldi	r25, 0x01	; 1
    1a00:	0e 94 ce 1b 	call	0x379c	; 0x379c <host_set_driver>
    rn42_disconnect();
    1a04:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <rn42_disconnect>
    //while (rn42_linked()) ;

    print("Entering config mode ...\n");
    1a08:	8b e9       	ldi	r24, 0x9B	; 155
    1a0a:	96 e0       	ldi	r25, 0x06	; 6
    1a0c:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    1a10:	2f ef       	ldi	r18, 0xFF	; 255
    1a12:	8a ed       	ldi	r24, 0xDA	; 218
    1a14:	9a e1       	ldi	r25, 0x1A	; 26
    1a16:	21 50       	subi	r18, 0x01	; 1
    1a18:	80 40       	sbci	r24, 0x00	; 0
    1a1a:	90 40       	sbci	r25, 0x00	; 0
    1a1c:	e1 f7       	brne	.-8      	; 0x1a16 <enter_command_mode+0x2a>
    1a1e:	00 c0       	rjmp	.+0      	; 0x1a20 <enter_command_mode+0x34>
    1a20:	00 00       	nop
    wait_ms(1100);          // need 1 sec
    SEND_COMMAND("$$$");
    1a22:	85 eb       	ldi	r24, 0xB5	; 181
    1a24:	96 e0       	ldi	r25, 0x06	; 6
    1a26:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>
    1a2a:	ef ef       	ldi	r30, 0xFF	; 255
    1a2c:	f5 ea       	ldi	r31, 0xA5	; 165
    1a2e:	2e e0       	ldi	r18, 0x0E	; 14
    1a30:	e1 50       	subi	r30, 0x01	; 1
    1a32:	f0 40       	sbci	r31, 0x00	; 0
    1a34:	20 40       	sbci	r18, 0x00	; 0
    1a36:	e1 f7       	brne	.-8      	; 0x1a30 <enter_command_mode+0x44>
    1a38:	00 c0       	rjmp	.+0      	; 0x1a3a <enter_command_mode+0x4e>
    1a3a:	00 00       	nop
    wait_ms(600);           // need 1 sec
    print_rn42();
    1a3c:	0e 94 8f 0c 	call	0x191e	; 0x191e <print_rn42>
    const char *s = SEND_COMMAND("v\r\n");
    1a40:	89 eb       	ldi	r24, 0xB9	; 185
    1a42:	96 e0       	ldi	r25, 0x06	; 6
    1a44:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>
    if (strncmp("v", s, 1) != 0) SEND_COMMAND("+\r\n"); // local echo on
    1a48:	fc 01       	movw	r30, r24
    1a4a:	80 81       	ld	r24, Z
    1a4c:	86 37       	cpi	r24, 0x76	; 118
    1a4e:	21 f0       	breq	.+8      	; 0x1a58 <enter_command_mode+0x6c>
    1a50:	8d eb       	ldi	r24, 0xBD	; 189
    1a52:	96 e0       	ldi	r25, 0x06	; 6
    1a54:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <send_command>
    1a58:	08 95       	ret

00001a5a <exit_command_mode>:
}

static void exit_command_mode(void)
{
    print("Exiting config mode ...\n");
    1a5a:	81 ec       	ldi	r24, 0xC1	; 193
    1a5c:	96 e0       	ldi	r25, 0x06	; 6
    1a5e:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    SEND_COMMAND("---\r\n");    // exit
    1a62:	8a ed       	ldi	r24, 0xDA	; 218
    1a64:	96 e0       	ldi	r25, 0x06	; 6
    1a66:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>

    rn42_autoconnect();
    1a6a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rn42_autoconnect>
    clear_keyboard();
    1a6e:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <clear_keyboard>
    host_set_driver(prev_driver);
    1a72:	80 91 15 01 	lds	r24, 0x0115
    1a76:	90 91 16 01 	lds	r25, 0x0116
    1a7a:	0c 94 ce 1b 	jmp	0x379c	; 0x379c <host_set_driver>

00001a7e <store_link>:
#define RN42_LINK0  (uint8_t *)128
#define RN42_LINK1  (uint8_t *)140
#define RN42_LINK2  (uint8_t *)152
#define RN42_LINK3  (uint8_t *)164
static void store_link(uint8_t *eeaddr)
{
    1a7e:	8f 92       	push	r8
    1a80:	9f 92       	push	r9
    1a82:	af 92       	push	r10
    1a84:	bf 92       	push	r11
    1a86:	cf 92       	push	r12
    1a88:	df 92       	push	r13
    1a8a:	ef 92       	push	r14
    1a8c:	ff 92       	push	r15
    1a8e:	4c 01       	movw	r8, r24
    enter_command_mode();
    1a90:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <enter_command_mode>
    SEND_STR("GR\r\n"); // remote address
    1a94:	8b e6       	ldi	r24, 0x6B	; 107
    1a96:	96 e0       	ldi	r25, 0x06	; 6
    1a98:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <send_str>
    const char *s = rn42_gets(500);
    1a9c:	84 ef       	ldi	r24, 0xF4	; 244
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
    1aa0:	0e 94 25 0c 	call	0x184a	; 0x184a <rn42_gets>
    1aa4:	6c 01       	movw	r12, r24
    if (strcmp("GR", s) == 0) s = rn42_gets(500);   // ignore local echo
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	8a e9       	ldi	r24, 0x9A	; 154
    1aaa:	91 e0       	ldi	r25, 0x01	; 1
    1aac:	0e 94 dd 31 	call	0x63ba	; 0x63ba <strcmp>
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	29 f4       	brne	.+10     	; 0x1abe <store_link+0x40>
    1ab4:	84 ef       	ldi	r24, 0xF4	; 244
    1ab6:	91 e0       	ldi	r25, 0x01	; 1
    1ab8:	0e 94 25 0c 	call	0x184a	; 0x184a <rn42_gets>
    1abc:	6c 01       	movw	r12, r24
    xprintf("%s(%d)\r\n", s, strlen(s));
    1abe:	f6 01       	movw	r30, r12
    1ac0:	01 90       	ld	r0, Z+
    1ac2:	00 20       	and	r0, r0
    1ac4:	e9 f7       	brne	.-6      	; 0x1ac0 <store_link+0x42>
    1ac6:	31 97       	sbiw	r30, 0x01	; 1
    1ac8:	ec 19       	sub	r30, r12
    1aca:	fd 09       	sbc	r31, r13
    1acc:	ff 93       	push	r31
    1ace:	ef 93       	push	r30
    1ad0:	df 92       	push	r13
    1ad2:	cf 92       	push	r12
    1ad4:	20 e7       	ldi	r18, 0x70	; 112
    1ad6:	36 e0       	ldi	r19, 0x06	; 6
    1ad8:	3f 93       	push	r19
    1ada:	2f 93       	push	r18
    1adc:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    if (strlen(s) == 12) {
    1ae0:	d6 01       	movw	r26, r12
    1ae2:	0d 90       	ld	r0, X+
    1ae4:	00 20       	and	r0, r0
    1ae6:	e9 f7       	brne	.-6      	; 0x1ae2 <store_link+0x64>
    1ae8:	1d 97       	sbiw	r26, 0x0d	; 13
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	ac 15       	cp	r26, r12
    1af8:	bd 05       	cpc	r27, r13
    1afa:	81 f5       	brne	.+96     	; 0x1b5c <store_link+0xde>
    1afc:	76 01       	movw	r14, r12
    1afe:	c1 2c       	mov	r12, r1
    1b00:	d1 2c       	mov	r13, r1
        for (int i = 0; i < 12; i++) {
            eeprom_write_byte(eeaddr+i, *(s+i));
            dprintf("%c ", *(s+i));
    1b02:	29 e7       	ldi	r18, 0x79	; 121
    1b04:	a2 2e       	mov	r10, r18
    1b06:	26 e0       	ldi	r18, 0x06	; 6
    1b08:	b2 2e       	mov	r11, r18
    const char *s = rn42_gets(500);
    if (strcmp("GR", s) == 0) s = rn42_gets(500);   // ignore local echo
    xprintf("%s(%d)\r\n", s, strlen(s));
    if (strlen(s) == 12) {
        for (int i = 0; i < 12; i++) {
            eeprom_write_byte(eeaddr+i, *(s+i));
    1b0a:	f7 01       	movw	r30, r14
    1b0c:	60 81       	ld	r22, Z
    1b0e:	c4 01       	movw	r24, r8
    1b10:	8c 0d       	add	r24, r12
    1b12:	9d 1d       	adc	r25, r13
    1b14:	0e 94 ee 31 	call	0x63dc	; 0x63dc <__eewr_byte_usb1286>
            dprintf("%c ", *(s+i));
    1b18:	80 91 e1 03 	lds	r24, 0x03E1
    1b1c:	80 ff       	sbrs	r24, 0
    1b1e:	0c c0       	rjmp	.+24     	; 0x1b38 <store_link+0xba>
    1b20:	f7 01       	movw	r30, r14
    1b22:	80 81       	ld	r24, Z
    1b24:	1f 92       	push	r1
    1b26:	8f 93       	push	r24
    1b28:	bf 92       	push	r11
    1b2a:	af 92       	push	r10
    1b2c:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    SEND_STR("GR\r\n"); // remote address
    const char *s = rn42_gets(500);
    if (strcmp("GR", s) == 0) s = rn42_gets(500);   // ignore local echo
    xprintf("%s(%d)\r\n", s, strlen(s));
    if (strlen(s) == 12) {
        for (int i = 0; i < 12; i++) {
    1b38:	ff ef       	ldi	r31, 0xFF	; 255
    1b3a:	cf 1a       	sub	r12, r31
    1b3c:	df 0a       	sbc	r13, r31
    1b3e:	8f ef       	ldi	r24, 0xFF	; 255
    1b40:	e8 1a       	sub	r14, r24
    1b42:	f8 0a       	sbc	r15, r24
    1b44:	ec e0       	ldi	r30, 0x0C	; 12
    1b46:	ce 16       	cp	r12, r30
    1b48:	d1 04       	cpc	r13, r1
    1b4a:	f9 f6       	brne	.-66     	; 0x1b0a <store_link+0x8c>
            eeprom_write_byte(eeaddr+i, *(s+i));
            dprintf("%c ", *(s+i));
        }
        dprint("\r\n");
    1b4c:	80 91 e1 03 	lds	r24, 0x03E1
    1b50:	80 ff       	sbrs	r24, 0
    1b52:	04 c0       	rjmp	.+8      	; 0x1b5c <store_link+0xde>
    1b54:	8d e7       	ldi	r24, 0x7D	; 125
    1b56:	96 e0       	ldi	r25, 0x06	; 6
    1b58:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    }
    exit_command_mode();
}
    1b5c:	ff 90       	pop	r15
    1b5e:	ef 90       	pop	r14
    1b60:	df 90       	pop	r13
    1b62:	cf 90       	pop	r12
    1b64:	bf 90       	pop	r11
    1b66:	af 90       	pop	r10
    1b68:	9f 90       	pop	r9
    1b6a:	8f 90       	pop	r8
            eeprom_write_byte(eeaddr+i, *(s+i));
            dprintf("%c ", *(s+i));
        }
        dprint("\r\n");
    }
    exit_command_mode();
    1b6c:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <exit_command_mode>

00001b70 <restore_link>:
}

static void restore_link(const uint8_t *eeaddr)
{
    1b70:	af 92       	push	r10
    1b72:	bf 92       	push	r11
    1b74:	cf 92       	push	r12
    1b76:	df 92       	push	r13
    1b78:	ef 92       	push	r14
    1b7a:	ff 92       	push	r15
    1b7c:	cf 93       	push	r28
    1b7e:	5c 01       	movw	r10, r24
    enter_command_mode();
    1b80:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <enter_command_mode>
    SEND_COMMAND("SR,Z\r\n");   // remove remote address
    1b84:	80 e8       	ldi	r24, 0x80	; 128
    1b86:	96 e0       	ldi	r25, 0x06	; 6
    1b88:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>
    SEND_STR("SR,");            // set remote address from EEPROM
    1b8c:	87 e8       	ldi	r24, 0x87	; 135
    1b8e:	96 e0       	ldi	r25, 0x06	; 6
    1b90:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <send_str>
    for (int i = 0; i < 12; i++) {
    1b94:	e1 2c       	mov	r14, r1
    1b96:	f1 2c       	mov	r15, r1
        uint8_t c = eeprom_read_byte(eeaddr+i);
        rn42_putc(c);
        dprintf("%c ", c);
    1b98:	3b e8       	ldi	r19, 0x8B	; 139
    1b9a:	c3 2e       	mov	r12, r19
    1b9c:	36 e0       	ldi	r19, 0x06	; 6
    1b9e:	d3 2e       	mov	r13, r19
{
    enter_command_mode();
    SEND_COMMAND("SR,Z\r\n");   // remove remote address
    SEND_STR("SR,");            // set remote address from EEPROM
    for (int i = 0; i < 12; i++) {
        uint8_t c = eeprom_read_byte(eeaddr+i);
    1ba0:	c5 01       	movw	r24, r10
    1ba2:	8e 0d       	add	r24, r14
    1ba4:	9f 1d       	adc	r25, r15
    1ba6:	0e 94 e6 31 	call	0x63cc	; 0x63cc <__eerd_byte_usb1286>
    1baa:	c8 2f       	mov	r28, r24
        rn42_putc(c);
    1bac:	0e 94 56 0c 	call	0x18ac	; 0x18ac <rn42_putc>
        dprintf("%c ", c);
    1bb0:	80 91 e1 03 	lds	r24, 0x03E1
    1bb4:	80 ff       	sbrs	r24, 0
    1bb6:	0a c0       	rjmp	.+20     	; 0x1bcc <restore_link+0x5c>
    1bb8:	1f 92       	push	r1
    1bba:	cf 93       	push	r28
    1bbc:	df 92       	push	r13
    1bbe:	cf 92       	push	r12
    1bc0:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
static void restore_link(const uint8_t *eeaddr)
{
    enter_command_mode();
    SEND_COMMAND("SR,Z\r\n");   // remove remote address
    SEND_STR("SR,");            // set remote address from EEPROM
    for (int i = 0; i < 12; i++) {
    1bcc:	8f ef       	ldi	r24, 0xFF	; 255
    1bce:	e8 1a       	sub	r14, r24
    1bd0:	f8 0a       	sbc	r15, r24
    1bd2:	8c e0       	ldi	r24, 0x0C	; 12
    1bd4:	e8 16       	cp	r14, r24
    1bd6:	f1 04       	cpc	r15, r1
    1bd8:	19 f7       	brne	.-58     	; 0x1ba0 <restore_link+0x30>
        uint8_t c = eeprom_read_byte(eeaddr+i);
        rn42_putc(c);
        dprintf("%c ", c);
    }
    dprintf("\r\n");
    1bda:	80 91 e1 03 	lds	r24, 0x03E1
    1bde:	80 ff       	sbrs	r24, 0
    1be0:	08 c0       	rjmp	.+16     	; 0x1bf2 <restore_link+0x82>
    1be2:	8f e8       	ldi	r24, 0x8F	; 143
    1be4:	96 e0       	ldi	r25, 0x06	; 6
    1be6:	9f 93       	push	r25
    1be8:	8f 93       	push	r24
    1bea:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    SEND_COMMAND("\r\n");
    1bf2:	82 e9       	ldi	r24, 0x92	; 146
    1bf4:	96 e0       	ldi	r25, 0x06	; 6
    1bf6:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>
    SEND_COMMAND("R,1\r\n");    // reboot
    1bfa:	85 e9       	ldi	r24, 0x95	; 149
    1bfc:	96 e0       	ldi	r25, 0x06	; 6
    1bfe:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>
    exit_command_mode();
}
    1c02:	cf 91       	pop	r28
    1c04:	ff 90       	pop	r15
    1c06:	ef 90       	pop	r14
    1c08:	df 90       	pop	r13
    1c0a:	cf 90       	pop	r12
    1c0c:	bf 90       	pop	r11
    1c0e:	af 90       	pop	r10
        dprintf("%c ", c);
    }
    dprintf("\r\n");
    SEND_COMMAND("\r\n");
    SEND_COMMAND("R,1\r\n");    // reboot
    exit_command_mode();
    1c10:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <exit_command_mode>

00001c14 <rn42_task_init>:
    }
}

void rn42_task_init(void)
{
    battery_init();
    1c14:	0c 94 22 13 	jmp	0x2644	; 0x2644 <battery_init>

00001c18 <rn42_task>:
}

void rn42_task(void)
{
    1c18:	4f 92       	push	r4
    1c1a:	5f 92       	push	r5
    1c1c:	6f 92       	push	r6
    1c1e:	7f 92       	push	r7
    1c20:	8f 92       	push	r8
    1c22:	9f 92       	push	r9
    1c24:	af 92       	push	r10
    1c26:	bf 92       	push	r11
    1c28:	1f 93       	push	r17
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
                    if (0x0 <= c && c <= 0x7f) xprintf("%c", c);
                    else xprintf(" %02X", c);
                }
                break;
            case LED_FE:
                if (c == 0x02) state = LED_02;
    1c2e:	c2 e0       	ldi	r28, 0x02	; 2
        switch (state) {
            case LED_INIT:
                if (c == 0xFE) state = LED_FE;
                else {
                    if (0x0 <= c && c <= 0x7f) xprintf("%c", c);
                    else xprintf(" %02X", c);
    1c30:	55 ef       	ldi	r21, 0xF5	; 245
    1c32:	85 2e       	mov	r8, r21
    1c34:	53 e0       	ldi	r21, 0x03	; 3
    1c36:	95 2e       	mov	r9, r21
        static enum {LED_INIT, LED_FE, LED_02, LED_01} state = LED_INIT;
        switch (state) {
            case LED_INIT:
                if (c == 0xFE) state = LED_FE;
                else {
                    if (0x0 <= c && c <= 0x7f) xprintf("%c", c);
    1c38:	62 ef       	ldi	r22, 0xF2	; 242
    1c3a:	66 2e       	mov	r6, r22
    1c3c:	63 e0       	ldi	r22, 0x03	; 3
    1c3e:	76 2e       	mov	r7, r22
        // LED Out report: 0xFE, 0x02, 0x01, <leds>
        // To get the report over UART set bit3 with SH, command.
        static enum {LED_INIT, LED_FE, LED_02, LED_01} state = LED_INIT;
        switch (state) {
            case LED_INIT:
                if (c == 0xFE) state = LED_FE;
    1c40:	d1 e0       	ldi	r29, 0x01	; 1
            case LED_FE:
                if (c == 0x02) state = LED_02;
                else           state = LED_INIT;
                break;
            case LED_02:
                if (c == 0x01) state = LED_01;
    1c42:	13 e0       	ldi	r17, 0x03	; 3
                else           state = LED_INIT;
                break;
            case LED_01:
                dprintf("LED status: %02X\n", c);
    1c44:	7b ef       	ldi	r23, 0xFB	; 251
    1c46:	47 2e       	mov	r4, r23
    1c48:	73 e0       	ldi	r23, 0x03	; 3
    1c4a:	57 2e       	mov	r5, r23

void rn42_task(void)
{
    int16_t c;
    // Raw mode: interpret output report of LED state
    while ((c = rn42_getc()) != -1) {
    1c4c:	0e 94 23 0c 	call	0x1846	; 0x1846 <rn42_getc>
    1c50:	5c 01       	movw	r10, r24
    1c52:	8f 3f       	cpi	r24, 0xFF	; 255
    1c54:	2f ef       	ldi	r18, 0xFF	; 255
    1c56:	92 07       	cpc	r25, r18
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <rn42_task+0x44>
    1c5a:	46 c0       	rjmp	.+140    	; 0x1ce8 <rn42_task+0xd0>
        // LED Out report: 0xFE, 0x02, 0x01, <leds>
        // To get the report over UART set bit3 with SH, command.
        static enum {LED_INIT, LED_FE, LED_02, LED_01} state = LED_INIT;
        switch (state) {
    1c5c:	80 91 4d 03 	lds	r24, 0x034D
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	09 f1       	breq	.+66     	; 0x1ca6 <rn42_task+0x8e>
    1c64:	28 f0       	brcs	.+10     	; 0x1c70 <rn42_task+0x58>
    1c66:	82 30       	cpi	r24, 0x02	; 2
    1c68:	29 f1       	breq	.+74     	; 0x1cb4 <rn42_task+0x9c>
    1c6a:	83 30       	cpi	r24, 0x03	; 3
    1c6c:	d1 f5       	brne	.+116    	; 0x1ce2 <rn42_task+0xca>
    1c6e:	28 c0       	rjmp	.+80     	; 0x1cc0 <rn42_task+0xa8>
            case LED_INIT:
                if (c == 0xFE) state = LED_FE;
    1c70:	8e ef       	ldi	r24, 0xFE	; 254
    1c72:	a8 16       	cp	r10, r24
    1c74:	b1 04       	cpc	r11, r1
    1c76:	19 f4       	brne	.+6      	; 0x1c7e <rn42_task+0x66>
    1c78:	d0 93 4d 03 	sts	0x034D, r29
    1c7c:	e7 cf       	rjmp	.-50     	; 0x1c4c <rn42_task+0x34>
                else {
                    if (0x0 <= c && c <= 0x7f) xprintf("%c", c);
    1c7e:	90 e8       	ldi	r25, 0x80	; 128
    1c80:	a9 16       	cp	r10, r25
    1c82:	b1 04       	cpc	r11, r1
    1c84:	28 f4       	brcc	.+10     	; 0x1c90 <rn42_task+0x78>
    1c86:	bf 92       	push	r11
    1c88:	af 92       	push	r10
    1c8a:	7f 92       	push	r7
    1c8c:	6f 92       	push	r6
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <rn42_task+0x80>
                    else xprintf(" %02X", c);
    1c90:	bf 92       	push	r11
    1c92:	af 92       	push	r10
    1c94:	9f 92       	push	r9
    1c96:	8f 92       	push	r8
    1c98:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	d3 cf       	rjmp	.-90     	; 0x1c4c <rn42_task+0x34>
                }
                break;
            case LED_FE:
                if (c == 0x02) state = LED_02;
    1ca6:	22 e0       	ldi	r18, 0x02	; 2
    1ca8:	a2 16       	cp	r10, r18
    1caa:	b1 04       	cpc	r11, r1
    1cac:	d1 f4       	brne	.+52     	; 0x1ce2 <rn42_task+0xca>
    1cae:	c0 93 4d 03 	sts	0x034D, r28
    1cb2:	cc cf       	rjmp	.-104    	; 0x1c4c <rn42_task+0x34>
                else           state = LED_INIT;
                break;
            case LED_02:
                if (c == 0x01) state = LED_01;
    1cb4:	aa 94       	dec	r10
    1cb6:	ab 28       	or	r10, r11
    1cb8:	a1 f4       	brne	.+40     	; 0x1ce2 <rn42_task+0xca>
    1cba:	10 93 4d 03 	sts	0x034D, r17
    1cbe:	c6 cf       	rjmp	.-116    	; 0x1c4c <rn42_task+0x34>
                else           state = LED_INIT;
                break;
            case LED_01:
                dprintf("LED status: %02X\n", c);
    1cc0:	80 91 e1 03 	lds	r24, 0x03E1
    1cc4:	80 ff       	sbrs	r24, 0
    1cc6:	0a c0       	rjmp	.+20     	; 0x1cdc <rn42_task+0xc4>
    1cc8:	bf 92       	push	r11
    1cca:	af 92       	push	r10
    1ccc:	5f 92       	push	r5
    1cce:	4f 92       	push	r4
    1cd0:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
                rn42_set_leds(c);
    1cdc:	8a 2d       	mov	r24, r10
    1cde:	0e 94 75 0c 	call	0x18ea	; 0x18ea <rn42_set_leds>
                state = LED_INIT;
                break;
            default:
                state = LED_INIT;
    1ce2:	10 92 4d 03 	sts	0x034D, r1
    1ce6:	b2 cf       	rjmp	.-156    	; 0x1c4c <rn42_task+0x34>
    }



    static uint16_t prev_timer = 0;
    uint16_t e = timer_elapsed(prev_timer);
    1ce8:	80 91 4e 03 	lds	r24, 0x034E
    1cec:	90 91 4f 03 	lds	r25, 0x034F
    1cf0:	0e 94 b1 28 	call	0x5162	; 0x5162 <timer_elapsed>
    if (e > 1000) {
    1cf4:	89 3e       	cpi	r24, 0xE9	; 233
    1cf6:	23 e0       	ldi	r18, 0x03	; 3
    1cf8:	92 07       	cpc	r25, r18
    1cfa:	08 f4       	brcc	.+2      	; 0x1cfe <rn42_task+0xe6>
    1cfc:	61 c0       	rjmp	.+194    	; 0x1dc0 <rn42_task+0x1a8>
        /* every second */
        prev_timer += e/1000*1000;
    1cfe:	28 ee       	ldi	r18, 0xE8	; 232
    1d00:	33 e0       	ldi	r19, 0x03	; 3
    1d02:	b9 01       	movw	r22, r18
    1d04:	0e 94 8d 31 	call	0x631a	; 0x631a <__udivmodhi4>
    1d08:	62 9f       	mul	r22, r18
    1d0a:	a0 01       	movw	r20, r0
    1d0c:	63 9f       	mul	r22, r19
    1d0e:	50 0d       	add	r21, r0
    1d10:	72 9f       	mul	r23, r18
    1d12:	50 0d       	add	r21, r0
    1d14:	11 24       	eor	r1, r1
    1d16:	80 91 4e 03 	lds	r24, 0x034E
    1d1a:	90 91 4f 03 	lds	r25, 0x034F
    1d1e:	84 0f       	add	r24, r20
    1d20:	95 1f       	adc	r25, r21
    1d22:	90 93 4f 03 	sts	0x034F, r25
    1d26:	80 93 4e 03 	sts	0x034E, r24

        /* Low voltage alert */
        uint8_t bs = battery_status();
    1d2a:	0e 94 b6 13 	call	0x276c	; 0x276c <battery_status>
        if (bs == LOW_VOLTAGE) {
    1d2e:	83 30       	cpi	r24, 0x03	; 3
    1d30:	11 f4       	brne	.+4      	; 0x1d36 <rn42_task+0x11e>
            battery_led(LED_ON);
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	01 c0       	rjmp	.+2      	; 0x1d38 <rn42_task+0x120>
        } else {
            battery_led(LED_CHARGER);
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	0e 94 11 13 	call	0x2622	; 0x2622 <battery_led>
        }

        /* every minute */
        uint32_t t = timer_read32()/1000;
    1d3c:	0e 94 9f 28 	call	0x513e	; 0x513e <timer_read32>
    1d40:	28 ee       	ldi	r18, 0xE8	; 232
    1d42:	33 e0       	ldi	r19, 0x03	; 3
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodsi4>
    1d4c:	29 01       	movw	r4, r18
    1d4e:	3a 01       	movw	r6, r20
        if (t%60 == 0) {
    1d50:	4c e3       	ldi	r20, 0x3C	; 60
    1d52:	84 2e       	mov	r8, r20
    1d54:	91 2c       	mov	r9, r1
    1d56:	a1 2c       	mov	r10, r1
    1d58:	b1 2c       	mov	r11, r1
    1d5a:	c3 01       	movw	r24, r6
    1d5c:	b2 01       	movw	r22, r4
    1d5e:	a5 01       	movw	r20, r10
    1d60:	94 01       	movw	r18, r8
    1d62:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodsi4>
    1d66:	67 2b       	or	r22, r23
    1d68:	68 2b       	or	r22, r24
    1d6a:	69 2b       	or	r22, r25
    1d6c:	49 f5       	brne	.+82     	; 0x1dc0 <rn42_task+0x1a8>
            uint16_t v = battery_voltage();
    1d6e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <battery_voltage>
            uint8_t h = t/3600;
            uint8_t m = t%3600/60;
            uint8_t s = t%60;
            dprintf("%02u:%02u:%02u\t%umV\n", h, m, s, v);
    1d72:	20 91 e1 03 	lds	r18, 0x03E1
    1d76:	20 ff       	sbrs	r18, 0
    1d78:	23 c0       	rjmp	.+70     	; 0x1dc0 <rn42_task+0x1a8>
    1d7a:	9f 93       	push	r25
    1d7c:	8f 93       	push	r24
    1d7e:	1f 92       	push	r1
    1d80:	1f 92       	push	r1
        /* every minute */
        uint32_t t = timer_read32()/1000;
        if (t%60 == 0) {
            uint16_t v = battery_voltage();
            uint8_t h = t/3600;
            uint8_t m = t%3600/60;
    1d82:	c3 01       	movw	r24, r6
    1d84:	b2 01       	movw	r22, r4
    1d86:	20 e1       	ldi	r18, 0x10	; 16
    1d88:	3e e0       	ldi	r19, 0x0E	; 14
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	50 e0       	ldi	r21, 0x00	; 0
    1d8e:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodsi4>
    1d92:	72 2e       	mov	r7, r18
    1d94:	a5 01       	movw	r20, r10
    1d96:	94 01       	movw	r18, r8
    1d98:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodsi4>
            uint8_t s = t%60;
            dprintf("%02u:%02u:%02u\t%umV\n", h, m, s, v);
    1d9c:	3f 93       	push	r19
    1d9e:	2f 93       	push	r18
    1da0:	1f 92       	push	r1
    1da2:	7f 92       	push	r7
    1da4:	8d e0       	ldi	r24, 0x0D	; 13
    1da6:	94 e0       	ldi	r25, 0x04	; 4
    1da8:	9f 93       	push	r25
    1daa:	8f 93       	push	r24
    1dac:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    1db0:	8d b7       	in	r24, 0x3d	; 61
    1db2:	9e b7       	in	r25, 0x3e	; 62
    1db4:	0a 96       	adiw	r24, 0x0a	; 10
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	9e bf       	out	0x3e, r25	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	8d bf       	out	0x3d, r24	; 61
        }
    }


    /* Connection monitor */
    if (!rn42_rts() && rn42_linked()) {
    1dc0:	0e 94 6d 0c 	call	0x18da	; 0x18da <rn42_rts>
    1dc4:	81 11       	cpse	r24, r1
    1dc6:	06 c0       	rjmp	.+12     	; 0x1dd4 <rn42_task+0x1bc>
    1dc8:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <rn42_linked>
    1dcc:	88 23       	and	r24, r24
    1dce:	11 f0       	breq	.+4      	; 0x1dd4 <rn42_task+0x1bc>
        status_led(true);
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	01 c0       	rjmp	.+2      	; 0x1dd6 <rn42_task+0x1be>
    } else {
        status_led(false);
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	1f 91       	pop	r17
    1ddc:	bf 90       	pop	r11
    1dde:	af 90       	pop	r10
    1de0:	9f 90       	pop	r9
    1de2:	8f 90       	pop	r8
    1de4:	7f 90       	pop	r7
    1de6:	6f 90       	pop	r6
    1de8:	5f 90       	pop	r5
    1dea:	4f 90       	pop	r4

    /* Connection monitor */
    if (!rn42_rts() && rn42_linked()) {
        status_led(true);
    } else {
        status_led(false);
    1dec:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <status_led>

00001df0 <command_extra>:
    SEND_COMMAND("R,1\r\n");    // reboot
    exit_command_mode();
}

bool command_extra(uint8_t code)
{
    1df0:	4f 92       	push	r4
    1df2:	5f 92       	push	r5
    1df4:	6f 92       	push	r6
    1df6:	7f 92       	push	r7
    1df8:	8f 92       	push	r8
    1dfa:	9f 92       	push	r9
    1dfc:	af 92       	push	r10
    1dfe:	bf 92       	push	r11
    1e00:	cf 92       	push	r12
    1e02:	df 92       	push	r13
    1e04:	ef 92       	push	r14
    1e06:	ff 92       	push	r15
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	00 d0       	rcall	.+0      	; 0x1e0e <command_extra+0x1e>
    1e0e:	00 d0       	rcall	.+0      	; 0x1e10 <command_extra+0x20>
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    uint32_t t;
    uint16_t b;
    switch (code) {
    1e14:	80 32       	cpi	r24, 0x20	; 32
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <command_extra+0x2a>
    1e18:	78 c0       	rjmp	.+240    	; 0x1f0a <command_extra+0x11a>
    1e1a:	b0 f4       	brcc	.+44     	; 0x1e48 <command_extra+0x58>
    1e1c:	83 31       	cpi	r24, 0x13	; 19
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <command_extra+0x32>
    1e20:	55 c0       	rjmp	.+170    	; 0x1ecc <command_extra+0xdc>
    1e22:	48 f4       	brcc	.+18     	; 0x1e36 <command_extra+0x46>
    1e24:	8b 30       	cpi	r24, 0x0B	; 11
    1e26:	49 f1       	breq	.+82     	; 0x1e7a <command_extra+0x8a>
    1e28:	8c 30       	cpi	r24, 0x0C	; 12
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <command_extra+0x3e>
    1e2c:	76 c0       	rjmp	.+236    	; 0x1f1a <command_extra+0x12a>
    1e2e:	85 30       	cpi	r24, 0x05	; 5
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <command_extra+0x44>
    1e32:	6d c2       	rjmp	.+1242   	; 0x230e <__stack+0x20f>
    1e34:	b3 c1       	rjmp	.+870    	; 0x219c <__stack+0x9d>
    1e36:	8e 31       	cpi	r24, 0x1E	; 30
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <command_extra+0x4c>
    1e3a:	61 c0       	rjmp	.+194    	; 0x1efe <command_extra+0x10e>
    1e3c:	08 f0       	brcs	.+2      	; 0x1e40 <command_extra+0x50>
    1e3e:	62 c0       	rjmp	.+196    	; 0x1f04 <command_extra+0x114>
    1e40:	88 31       	cpi	r24, 0x18	; 24
    1e42:	09 f0       	breq	.+2      	; 0x1e46 <command_extra+0x56>
    1e44:	64 c2       	rjmp	.+1224   	; 0x230e <__stack+0x20f>
    1e46:	01 c2       	rjmp	.+1026   	; 0x224a <__stack+0x14b>
    1e48:	8b 33       	cpi	r24, 0x3B	; 59
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <command_extra+0x5e>
    1e4c:	4d c0       	rjmp	.+154    	; 0x1ee8 <command_extra+0xf8>
    1e4e:	48 f4       	brcc	.+18     	; 0x1e62 <command_extra+0x72>
    1e50:	88 33       	cpi	r24, 0x38	; 56
    1e52:	99 f0       	breq	.+38     	; 0x1e7a <command_extra+0x8a>
    1e54:	8a 33       	cpi	r24, 0x3A	; 58
    1e56:	09 f4       	brne	.+2      	; 0x1e5a <command_extra+0x6a>
    1e58:	44 c0       	rjmp	.+136    	; 0x1ee2 <command_extra+0xf2>
    1e5a:	81 32       	cpi	r24, 0x21	; 33
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <command_extra+0x70>
    1e5e:	57 c2       	rjmp	.+1198   	; 0x230e <__stack+0x20f>
    1e60:	57 c0       	rjmp	.+174    	; 0x1f10 <command_extra+0x120>
    1e62:	8d 33       	cpi	r24, 0x3D	; 61
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <command_extra+0x78>
    1e66:	46 c0       	rjmp	.+140    	; 0x1ef4 <command_extra+0x104>
    1e68:	08 f4       	brcc	.+2      	; 0x1e6c <command_extra+0x7c>
    1e6a:	41 c0       	rjmp	.+130    	; 0x1eee <command_extra+0xfe>
    1e6c:	87 34       	cpi	r24, 0x47	; 71
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <command_extra+0x82>
    1e70:	1c c2       	rjmp	.+1080   	; 0x22aa <__stack+0x1ab>
    1e72:	8c 34       	cpi	r24, 0x4C	; 76
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <command_extra+0x88>
    1e76:	4b c2       	rjmp	.+1174   	; 0x230e <__stack+0x20f>
    1e78:	05 c2       	rjmp	.+1034   	; 0x2284 <__stack+0x185>
        case KC_H:
        case KC_SLASH: /* ? */
            print("\n\n----- Bluetooth RN-42 Help -----\n");
    1e7a:	82 e2       	ldi	r24, 0x22	; 34
    1e7c:	94 e0       	ldi	r25, 0x04	; 4
    1e7e:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
            print("i:       RN-42 info\n");
    1e82:	86 e4       	ldi	r24, 0x46	; 70
    1e84:	94 e0       	ldi	r25, 0x04	; 4
    1e86:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
            print("b:       battery voltage\n");
    1e8a:	8b e5       	ldi	r24, 0x5B	; 91
    1e8c:	94 e0       	ldi	r25, 0x04	; 4
    1e8e:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
            print("Del:     enter/exit RN-42 config mode\n");
    1e92:	85 e7       	ldi	r24, 0x75	; 117
    1e94:	94 e0       	ldi	r25, 0x04	; 4
    1e96:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
            print("Slck:    RN-42 initialize\n");
    1e9a:	8c e9       	ldi	r24, 0x9C	; 156
    1e9c:	94 e0       	ldi	r25, 0x04	; 4
    1e9e:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>

            print("1-4:     restore link\n");
    1ea2:	87 eb       	ldi	r24, 0xB7	; 183
    1ea4:	94 e0       	ldi	r25, 0x04	; 4
    1ea6:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
            print("F1-F4:   store link\n");
    1eaa:	8e ec       	ldi	r24, 0xCE	; 206
    1eac:	94 e0       	ldi	r25, 0x04	; 4
    1eae:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>

            print("p:       pairing\n");
    1eb2:	83 ee       	ldi	r24, 0xE3	; 227
    1eb4:	94 e0       	ldi	r25, 0x04	; 4
    1eb6:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>

            if (config_mode) {
    1eba:	80 91 50 03 	lds	r24, 0x0350
    1ebe:	81 11       	cpse	r24, r1
    1ec0:	24 c2       	rjmp	.+1096   	; 0x230a <__stack+0x20b>
                return true;
            } else {
                print("u:       toggle Force USB mode\n");
    1ec2:	85 ef       	ldi	r24, 0xF5	; 245
    1ec4:	94 e0       	ldi	r25, 0x04	; 4
    1ec6:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    1eca:	24 c2       	rjmp	.+1096   	; 0x2314 <__stack+0x215>
}


static void pairing(void)
{
    enter_command_mode();
    1ecc:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <enter_command_mode>
    SEND_COMMAND("SR,Z\r\n");   // remove remote address
    1ed0:	86 e5       	ldi	r24, 0x56	; 86
    1ed2:	96 e0       	ldi	r25, 0x06	; 6
    1ed4:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>
    SEND_COMMAND("R,1\r\n");    // reboot
    1ed8:	8d e5       	ldi	r24, 0x5D	; 93
    1eda:	96 e0       	ldi	r25, 0x06	; 6
    1edc:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>
    1ee0:	12 c2       	rjmp	.+1060   	; 0x2306 <__stack+0x207>
            pairing();
            return true;

        /* Store link address to EEPROM */
        case KC_F1:
            store_link(RN42_LINK0);
    1ee2:	80 e8       	ldi	r24, 0x80	; 128
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	08 c0       	rjmp	.+16     	; 0x1ef8 <command_extra+0x108>
            return true;
        case KC_F2:
            store_link(RN42_LINK1);
    1ee8:	8c e8       	ldi	r24, 0x8C	; 140
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	05 c0       	rjmp	.+10     	; 0x1ef8 <command_extra+0x108>
            return true;
        case KC_F3:
            store_link(RN42_LINK2);
    1eee:	88 e9       	ldi	r24, 0x98	; 152
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <command_extra+0x108>
            return true;
        case KC_F4:
            store_link(RN42_LINK3);
    1ef4:	84 ea       	ldi	r24, 0xA4	; 164
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <store_link>
    1efc:	06 c2       	rjmp	.+1036   	; 0x230a <__stack+0x20b>
            return true;
        /* Restore link address to EEPROM */
        case KC_1:
            restore_link(RN42_LINK0);
    1efe:	80 e8       	ldi	r24, 0x80	; 128
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	08 c0       	rjmp	.+16     	; 0x1f14 <command_extra+0x124>
            return true;
        case KC_2:
            restore_link(RN42_LINK1);
    1f04:	8c e8       	ldi	r24, 0x8C	; 140
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	05 c0       	rjmp	.+10     	; 0x1f14 <command_extra+0x124>
            return true;
        case KC_3:
            restore_link(RN42_LINK2);
    1f0a:	88 e9       	ldi	r24, 0x98	; 152
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <command_extra+0x124>
            return true;
        case KC_4:
            restore_link(RN42_LINK3);
    1f10:	84 ea       	ldi	r24, 0xA4	; 164
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <restore_link>
    1f18:	f8 c1       	rjmp	.+1008   	; 0x230a <__stack+0x20b>
            return true;

        case KC_I:
            print("\n----- RN-42 info -----\n");
    1f1a:	85 e1       	ldi	r24, 0x15	; 21
    1f1c:	95 e0       	ldi	r25, 0x05	; 5
    1f1e:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
            xprintf("protocol: %s\n", (host_get_driver() == &rn42_driver) ? "RN-42" : "LUFA");
    1f22:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <host_get_driver>
    1f26:	8b 50       	subi	r24, 0x0B	; 11
    1f28:	91 40       	sbci	r25, 0x01	; 1
    1f2a:	19 f4       	brne	.+6      	; 0x1f32 <command_extra+0x142>
    1f2c:	8d e9       	ldi	r24, 0x9D	; 157
    1f2e:	91 e0       	ldi	r25, 0x01	; 1
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <command_extra+0x146>
    1f32:	83 ea       	ldi	r24, 0xA3	; 163
    1f34:	91 e0       	ldi	r25, 0x01	; 1
    1f36:	9f 93       	push	r25
    1f38:	8f 93       	push	r24
    1f3a:	8e e2       	ldi	r24, 0x2E	; 46
    1f3c:	95 e0       	ldi	r25, 0x05	; 5
    1f3e:	9f 93       	push	r25
    1f40:	8f 93       	push	r24
    1f42:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            xprintf("force_usb: %X\n", force_usb);
    1f46:	80 91 51 03 	lds	r24, 0x0351
    1f4a:	1f 92       	push	r1
    1f4c:	8f 93       	push	r24
    1f4e:	8c e3       	ldi	r24, 0x3C	; 60
    1f50:	95 e0       	ldi	r25, 0x05	; 5
    1f52:	9f 93       	push	r25
    1f54:	8f 93       	push	r24
    1f56:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            xprintf("rn42: %s\n", rn42_rts() ? "OFF" : (rn42_linked() ? "CONN" : "ON"));
    1f5a:	0e 94 6d 0c 	call	0x18da	; 0x18da <rn42_rts>
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	81 11       	cpse	r24, r1
    1f6a:	07 c0       	rjmp	.+14     	; 0x1f7a <command_extra+0x18a>
    1f6c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <rn42_linked>
    1f70:	88 23       	and	r24, r24
    1f72:	31 f0       	breq	.+12     	; 0x1f80 <command_extra+0x190>
    1f74:	8f ea       	ldi	r24, 0xAF	; 175
    1f76:	91 e0       	ldi	r25, 0x01	; 1
    1f78:	05 c0       	rjmp	.+10     	; 0x1f84 <command_extra+0x194>
    1f7a:	88 ea       	ldi	r24, 0xA8	; 168
    1f7c:	91 e0       	ldi	r25, 0x01	; 1
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <command_extra+0x194>
    1f80:	8c ea       	ldi	r24, 0xAC	; 172
    1f82:	91 e0       	ldi	r25, 0x01	; 1
    1f84:	9f 93       	push	r25
    1f86:	8f 93       	push	r24
    1f88:	8b e4       	ldi	r24, 0x4B	; 75
    1f8a:	95 e0       	ldi	r25, 0x05	; 5
    1f8c:	9f 93       	push	r25
    1f8e:	8f 93       	push	r24
    1f90:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            xprintf("rn42_autoconnecting(): %X\n", rn42_autoconnecting());
    1f94:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <rn42_autoconnecting>
    1f98:	1f 92       	push	r1
    1f9a:	8f 93       	push	r24
    1f9c:	85 e5       	ldi	r24, 0x55	; 85
    1f9e:	95 e0       	ldi	r25, 0x05	; 5
    1fa0:	9f 93       	push	r25
    1fa2:	8f 93       	push	r24
    1fa4:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            xprintf("config_mode: %X\n", config_mode);
    1fa8:	80 91 50 03 	lds	r24, 0x0350
    1fac:	1f 92       	push	r1
    1fae:	8f 93       	push	r24
    1fb0:	80 e7       	ldi	r24, 0x70	; 112
    1fb2:	95 e0       	ldi	r25, 0x05	; 5
    1fb4:	9f 93       	push	r25
    1fb6:	8f 93       	push	r24
    1fb8:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            xprintf("USB State: %s\n",
    1fbc:	80 91 f6 03 	lds	r24, 0x03F6
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	88 23       	and	r24, r24
    1fcc:	b9 f0       	breq	.+46     	; 0x1ffc <command_extra+0x20c>
    1fce:	80 91 f6 03 	lds	r24, 0x03F6
    1fd2:	81 30       	cpi	r24, 0x01	; 1
    1fd4:	b1 f0       	breq	.+44     	; 0x2002 <command_extra+0x212>
    1fd6:	80 91 f6 03 	lds	r24, 0x03F6
    1fda:	82 30       	cpi	r24, 0x02	; 2
    1fdc:	a9 f0       	breq	.+42     	; 0x2008 <command_extra+0x218>
    1fde:	80 91 f6 03 	lds	r24, 0x03F6
    1fe2:	83 30       	cpi	r24, 0x03	; 3
    1fe4:	a1 f0       	breq	.+40     	; 0x200e <command_extra+0x21e>
    1fe6:	80 91 f6 03 	lds	r24, 0x03F6
    1fea:	84 30       	cpi	r24, 0x04	; 4
    1fec:	99 f0       	breq	.+38     	; 0x2014 <command_extra+0x224>
    1fee:	80 91 f6 03 	lds	r24, 0x03F6
    1ff2:	85 30       	cpi	r24, 0x05	; 5
    1ff4:	91 f4       	brne	.+36     	; 0x201a <command_extra+0x22a>
    1ff6:	86 ee       	ldi	r24, 0xE6	; 230
    1ff8:	91 e0       	ldi	r25, 0x01	; 1
    1ffa:	11 c0       	rjmp	.+34     	; 0x201e <command_extra+0x22e>
    1ffc:	8c eb       	ldi	r24, 0xBC	; 188
    1ffe:	91 e0       	ldi	r25, 0x01	; 1
    2000:	0e c0       	rjmp	.+28     	; 0x201e <command_extra+0x22e>
    2002:	84 eb       	ldi	r24, 0xB4	; 180
    2004:	91 e0       	ldi	r25, 0x01	; 1
    2006:	0b c0       	rjmp	.+22     	; 0x201e <command_extra+0x22e>
    2008:	87 ec       	ldi	r24, 0xC7	; 199
    200a:	91 e0       	ldi	r25, 0x01	; 1
    200c:	08 c0       	rjmp	.+16     	; 0x201e <command_extra+0x22e>
    200e:	8f ec       	ldi	r24, 0xCF	; 207
    2010:	91 e0       	ldi	r25, 0x01	; 1
    2012:	05 c0       	rjmp	.+10     	; 0x201e <command_extra+0x22e>
    2014:	89 ed       	ldi	r24, 0xD9	; 217
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	02 c0       	rjmp	.+4      	; 0x201e <command_extra+0x22e>
    201a:	84 ee       	ldi	r24, 0xE4	; 228
    201c:	91 e0       	ldi	r25, 0x01	; 1
    201e:	9f 93       	push	r25
    2020:	8f 93       	push	r24
    2022:	81 e8       	ldi	r24, 0x81	; 129
    2024:	95 e0       	ldi	r25, 0x05	; 5
    2026:	9f 93       	push	r25
    2028:	8f 93       	push	r24
    202a:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
                    (USB_DeviceState == DEVICE_STATE_Powered) ? "Powered" :
                    (USB_DeviceState == DEVICE_STATE_Default) ? "Default" :
                    (USB_DeviceState == DEVICE_STATE_Addressed) ? "Addressed" :
                    (USB_DeviceState == DEVICE_STATE_Configured) ? "Configured" :
                    (USB_DeviceState == DEVICE_STATE_Suspended) ? "Suspended" : "?");
            xprintf("battery: ");
    202e:	80 e9       	ldi	r24, 0x90	; 144
    2030:	95 e0       	ldi	r25, 0x05	; 5
    2032:	9f 93       	push	r25
    2034:	8f 93       	push	r24
    2036:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            switch (battery_status()) {
    203a:	0e 94 b6 13 	call	0x276c	; 0x276c <battery_status>
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	49 f0       	breq	.+18     	; 0x2060 <command_extra+0x270>
    204e:	28 f0       	brcs	.+10     	; 0x205a <command_extra+0x26a>
    2050:	82 30       	cpi	r24, 0x02	; 2
    2052:	49 f0       	breq	.+18     	; 0x2066 <command_extra+0x276>
    2054:	83 30       	cpi	r24, 0x03	; 3
    2056:	69 f4       	brne	.+26     	; 0x2072 <command_extra+0x282>
    2058:	09 c0       	rjmp	.+18     	; 0x206c <command_extra+0x27c>
                case FULL_CHARGED:  xprintf("FULL"); break;
    205a:	8a e9       	ldi	r24, 0x9A	; 154
    205c:	95 e0       	ldi	r25, 0x05	; 5
    205e:	0b c0       	rjmp	.+22     	; 0x2076 <command_extra+0x286>
                case CHARGING:      xprintf("CHARG"); break;
    2060:	8f e9       	ldi	r24, 0x9F	; 159
    2062:	95 e0       	ldi	r25, 0x05	; 5
    2064:	08 c0       	rjmp	.+16     	; 0x2076 <command_extra+0x286>
                case DISCHARGING:   xprintf("DISCHG"); break;
    2066:	85 ea       	ldi	r24, 0xA5	; 165
    2068:	95 e0       	ldi	r25, 0x05	; 5
    206a:	05 c0       	rjmp	.+10     	; 0x2076 <command_extra+0x286>
                case LOW_VOLTAGE:   xprintf("LOW"); break;
    206c:	8c ea       	ldi	r24, 0xAC	; 172
    206e:	95 e0       	ldi	r25, 0x05	; 5
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <command_extra+0x286>
                default:            xprintf("?"); break;
    2072:	80 eb       	ldi	r24, 0xB0	; 176
    2074:	95 e0       	ldi	r25, 0x05	; 5
    2076:	9f 93       	push	r25
    2078:	8f 93       	push	r24
    207a:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
            };
            xprintf("\n");
    2082:	82 eb       	ldi	r24, 0xB2	; 178
    2084:	95 e0       	ldi	r25, 0x05	; 5
    2086:	9f 93       	push	r25
    2088:	8f 93       	push	r24
    208a:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            xprintf("RemoteWakeupEnabled: %X\n", USB_Device_RemoteWakeupEnabled);
    208e:	80 91 f4 03 	lds	r24, 0x03F4
    2092:	1f 92       	push	r1
    2094:	8f 93       	push	r24
    2096:	84 eb       	ldi	r24, 0xB4	; 180
    2098:	95 e0       	ldi	r25, 0x05	; 5
    209a:	9f 93       	push	r25
    209c:	8f 93       	push	r24
    209e:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            xprintf("VBUS: %X\n", USBSTA&(1<<VBUS));
    20a2:	80 91 d9 00 	lds	r24, 0x00D9
    20a6:	81 70       	andi	r24, 0x01	; 1
    20a8:	1f 92       	push	r1
    20aa:	8f 93       	push	r24
    20ac:	8d ec       	ldi	r24, 0xCD	; 205
    20ae:	95 e0       	ldi	r25, 0x05	; 5
    20b0:	9f 93       	push	r25
    20b2:	8f 93       	push	r24
    20b4:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            t = timer_read32()/1000;
    20b8:	0e 94 9f 28 	call	0x513e	; 0x513e <timer_read32>
    20bc:	28 ee       	ldi	r18, 0xE8	; 232
    20be:	33 e0       	ldi	r19, 0x03	; 3
    20c0:	40 e0       	ldi	r20, 0x00	; 0
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodsi4>
    20c8:	69 01       	movw	r12, r18
    20ca:	7a 01       	movw	r14, r20
            uint8_t d = t/3600/24;
            uint8_t h = t/3600;
            uint8_t m = t%3600/60;
            uint8_t s = t%60;
    20cc:	fc e3       	ldi	r31, 0x3C	; 60
    20ce:	8f 2e       	mov	r8, r31
    20d0:	91 2c       	mov	r9, r1
    20d2:	a1 2c       	mov	r10, r1
    20d4:	b1 2c       	mov	r11, r1
    20d6:	ca 01       	movw	r24, r20
    20d8:	b9 01       	movw	r22, r18
    20da:	a5 01       	movw	r20, r10
    20dc:	94 01       	movw	r18, r8
    20de:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodsi4>
            xprintf("uptime: %02u %02u:%02u:%02u\n", d, h, m, s);
    20e2:	7f 93       	push	r23
    20e4:	6f 93       	push	r22
            xprintf("RemoteWakeupEnabled: %X\n", USB_Device_RemoteWakeupEnabled);
            xprintf("VBUS: %X\n", USBSTA&(1<<VBUS));
            t = timer_read32()/1000;
            uint8_t d = t/3600/24;
            uint8_t h = t/3600;
            uint8_t m = t%3600/60;
    20e6:	c7 01       	movw	r24, r14
    20e8:	b6 01       	movw	r22, r12
    20ea:	20 e1       	ldi	r18, 0x10	; 16
    20ec:	3e e0       	ldi	r19, 0x0E	; 14
    20ee:	40 e0       	ldi	r20, 0x00	; 0
    20f0:	50 e0       	ldi	r21, 0x00	; 0
    20f2:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodsi4>
    20f6:	72 2e       	mov	r7, r18
    20f8:	a5 01       	movw	r20, r10
    20fa:	94 01       	movw	r18, r8
    20fc:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodsi4>
            uint8_t s = t%60;
            xprintf("uptime: %02u %02u:%02u:%02u\n", d, h, m, s);
    2100:	3f 93       	push	r19
    2102:	2f 93       	push	r18
    2104:	1f 92       	push	r1
    2106:	7f 92       	push	r7
            };
            xprintf("\n");
            xprintf("RemoteWakeupEnabled: %X\n", USB_Device_RemoteWakeupEnabled);
            xprintf("VBUS: %X\n", USBSTA&(1<<VBUS));
            t = timer_read32()/1000;
            uint8_t d = t/3600/24;
    2108:	c7 01       	movw	r24, r14
    210a:	b6 01       	movw	r22, r12
    210c:	20 e8       	ldi	r18, 0x80	; 128
    210e:	31 e5       	ldi	r19, 0x51	; 81
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	50 e0       	ldi	r21, 0x00	; 0
    2114:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodsi4>
            uint8_t h = t/3600;
            uint8_t m = t%3600/60;
            uint8_t s = t%60;
            xprintf("uptime: %02u %02u:%02u:%02u\n", d, h, m, s);
    2118:	3f 93       	push	r19
    211a:	2f 93       	push	r18
    211c:	87 ed       	ldi	r24, 0xD7	; 215
    211e:	95 e0       	ldi	r25, 0x05	; 5
    2120:	9f 93       	push	r25
    2122:	8f 93       	push	r24
    2124:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>

            xprintf("LINK0: %s\r\n", get_link(RN42_LINK0));
    2128:	80 e8       	ldi	r24, 0x80	; 128
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	0e 94 cf 0c 	call	0x199e	; 0x199e <get_link>
    2130:	9f 93       	push	r25
    2132:	8f 93       	push	r24
    2134:	84 ef       	ldi	r24, 0xF4	; 244
    2136:	95 e0       	ldi	r25, 0x05	; 5
    2138:	9f 93       	push	r25
    213a:	8f 93       	push	r24
    213c:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            xprintf("LINK1: %s\r\n", get_link(RN42_LINK1));
    2140:	8c e8       	ldi	r24, 0x8C	; 140
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	0e 94 cf 0c 	call	0x199e	; 0x199e <get_link>
    2148:	9f 93       	push	r25
    214a:	8f 93       	push	r24
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	96 e0       	ldi	r25, 0x06	; 6
    2150:	9f 93       	push	r25
    2152:	8f 93       	push	r24
    2154:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            xprintf("LINK2: %s\r\n", get_link(RN42_LINK2));
    2158:	88 e9       	ldi	r24, 0x98	; 152
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	0e 94 cf 0c 	call	0x199e	; 0x199e <get_link>
    2160:	9f 93       	push	r25
    2162:	8f 93       	push	r24
    2164:	8c e0       	ldi	r24, 0x0C	; 12
    2166:	96 e0       	ldi	r25, 0x06	; 6
    2168:	9f 93       	push	r25
    216a:	8f 93       	push	r24
    216c:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            xprintf("LINK3: %s\r\n", get_link(RN42_LINK3));
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	84 ea       	ldi	r24, 0xA4	; 164
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	0e 94 cf 0c 	call	0x199e	; 0x199e <get_link>
    2182:	9f 93       	push	r25
    2184:	8f 93       	push	r24
    2186:	88 e1       	ldi	r24, 0x18	; 24
    2188:	96 e0       	ldi	r25, 0x06	; 6
    218a:	9f 93       	push	r25
    218c:	8f 93       	push	r24
    218e:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>

            return true;
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	b7 c0       	rjmp	.+366    	; 0x230a <__stack+0x20b>
        case KC_B:
            // battery monitor
            t = timer_read32()/1000;
    219c:	0e 94 9f 28 	call	0x513e	; 0x513e <timer_read32>
    21a0:	28 ee       	ldi	r18, 0xE8	; 232
    21a2:	33 e0       	ldi	r19, 0x03	; 3
    21a4:	40 e0       	ldi	r20, 0x00	; 0
    21a6:	50 e0       	ldi	r21, 0x00	; 0
    21a8:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodsi4>
    21ac:	29 01       	movw	r4, r18
    21ae:	3a 01       	movw	r6, r20
            b = battery_voltage();
    21b0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <battery_voltage>
            xprintf("BAT: %umV\t", b);
    21b4:	9f 93       	push	r25
    21b6:	8f 93       	push	r24
    21b8:	84 e2       	ldi	r24, 0x24	; 36
    21ba:	96 e0       	ldi	r25, 0x06	; 6
    21bc:	9f 93       	push	r25
    21be:	8f 93       	push	r24
    21c0:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            xprintf("%02u:",   t/3600);
    21c4:	c3 01       	movw	r24, r6
    21c6:	b2 01       	movw	r22, r4
    21c8:	20 e1       	ldi	r18, 0x10	; 16
    21ca:	3e e0       	ldi	r19, 0x0E	; 14
    21cc:	40 e0       	ldi	r20, 0x00	; 0
    21ce:	50 e0       	ldi	r21, 0x00	; 0
    21d0:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodsi4>
    21d4:	5f 93       	push	r21
    21d6:	4f 93       	push	r20
    21d8:	3f 93       	push	r19
    21da:	2f 93       	push	r18
    21dc:	2f e2       	ldi	r18, 0x2F	; 47
    21de:	36 e0       	ldi	r19, 0x06	; 6
    21e0:	3f 93       	push	r19
    21e2:	2f 93       	push	r18
    21e4:	69 83       	std	Y+1, r22	; 0x01
    21e6:	7a 83       	std	Y+2, r23	; 0x02
    21e8:	8b 83       	std	Y+3, r24	; 0x03
    21ea:	9c 83       	std	Y+4, r25	; 0x04
    21ec:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            xprintf("%02u:",   t%3600/60);
    21f0:	ec e3       	ldi	r30, 0x3C	; 60
    21f2:	8e 2e       	mov	r8, r30
    21f4:	91 2c       	mov	r9, r1
    21f6:	a1 2c       	mov	r10, r1
    21f8:	b1 2c       	mov	r11, r1
    21fa:	69 81       	ldd	r22, Y+1	; 0x01
    21fc:	7a 81       	ldd	r23, Y+2	; 0x02
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	a5 01       	movw	r20, r10
    2204:	94 01       	movw	r18, r8
    2206:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodsi4>
    220a:	5f 93       	push	r21
    220c:	4f 93       	push	r20
    220e:	3f 93       	push	r19
    2210:	2f 93       	push	r18
    2212:	85 e3       	ldi	r24, 0x35	; 53
    2214:	96 e0       	ldi	r25, 0x06	; 6
    2216:	9f 93       	push	r25
    2218:	8f 93       	push	r24
    221a:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            xprintf("%02u\n",  t%60);
    221e:	c3 01       	movw	r24, r6
    2220:	b2 01       	movw	r22, r4
    2222:	a5 01       	movw	r20, r10
    2224:	94 01       	movw	r18, r8
    2226:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodsi4>
    222a:	9f 93       	push	r25
    222c:	8f 93       	push	r24
    222e:	7f 93       	push	r23
    2230:	6f 93       	push	r22
    2232:	8b e3       	ldi	r24, 0x3B	; 59
    2234:	96 e0       	ldi	r25, 0x06	; 6
    2236:	9f 93       	push	r25
    2238:	8f 93       	push	r24
    223a:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            return true;
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	60 c0       	rjmp	.+192    	; 0x230a <__stack+0x20b>
        case KC_U:
            if (config_mode) return false;
    224a:	80 91 50 03 	lds	r24, 0x0350
    224e:	81 11       	cpse	r24, r1
    2250:	61 c0       	rjmp	.+194    	; 0x2314 <__stack+0x215>
            if (force_usb) {
    2252:	80 91 51 03 	lds	r24, 0x0351
    2256:	88 23       	and	r24, r24
    2258:	39 f0       	breq	.+14     	; 0x2268 <__stack+0x169>
                print("Auto mode\n");
    225a:	81 e4       	ldi	r24, 0x41	; 65
    225c:	96 e0       	ldi	r25, 0x06	; 6
    225e:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
                force_usb = false;
    2262:	10 92 51 03 	sts	0x0351, r1
    2266:	51 c0       	rjmp	.+162    	; 0x230a <__stack+0x20b>
            } else {
                print("USB mode\n");
    2268:	8c e4       	ldi	r24, 0x4C	; 76
    226a:	96 e0       	ldi	r25, 0x06	; 6
    226c:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
                force_usb = true;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	80 93 51 03 	sts	0x0351, r24
                clear_keyboard();
    2276:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <clear_keyboard>
                host_set_driver(&lufa_driver);
    227a:	87 e1       	ldi	r24, 0x17	; 23
    227c:	91 e0       	ldi	r25, 0x01	; 1
    227e:	0e 94 ce 1b 	call	0x379c	; 0x379c <host_set_driver>
    2282:	43 c0       	rjmp	.+134    	; 0x230a <__stack+0x20b>
            }
            return true;
        case KC_DELETE:
            /* RN-42 Command mode */
            if (rn42_autoconnecting()) {
    2284:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <rn42_autoconnecting>
    2288:	88 23       	and	r24, r24
    228a:	41 f0       	breq	.+16     	; 0x229c <__stack+0x19d>
                enter_command_mode();
    228c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <enter_command_mode>

                command_state = CONSOLE;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	80 93 f0 03 	sts	0x03F0, r24
                config_mode = true;
    2296:	80 93 50 03 	sts	0x0350, r24
    229a:	3d c0       	rjmp	.+122    	; 0x2316 <__stack+0x217>
            } else {
                exit_command_mode();
    229c:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <exit_command_mode>

                command_state = ONESHOT;
    22a0:	10 92 f0 03 	sts	0x03F0, r1
                config_mode = false;
    22a4:	10 92 50 03 	sts	0x0350, r1
    22a8:	30 c0       	rjmp	.+96     	; 0x230a <__stack+0x20b>
static void init_rn42(void)
{
    // RN-42 configure
    // Should probably put in a baud rate setting..? Maybe?
    // only remembering 4 pairings?
    if (!config_mode) enter_command_mode();
    22aa:	80 91 50 03 	lds	r24, 0x0350
    22ae:	81 11       	cpse	r24, r1
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <__stack+0x1b7>
    22b2:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <enter_command_mode>
    SEND_COMMAND("SF,1\r\n");  // factory defaults
    22b6:	80 ee       	ldi	r24, 0xE0	; 224
    22b8:	96 e0       	ldi	r25, 0x06	; 6
    22ba:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>
    SEND_COMMAND("S-,TmkBT\r\n"); //sets the serialized "friendly name"
    22be:	87 ee       	ldi	r24, 0xE7	; 231
    22c0:	96 e0       	ldi	r25, 0x06	; 6
    22c2:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>
    SEND_COMMAND("SS,Keyboard/Mouse\r\n"); // sets "service name"
    22c6:	82 ef       	ldi	r24, 0xF2	; 242
    22c8:	96 e0       	ldi	r25, 0x06	; 6
    22ca:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>
    SEND_COMMAND("SM,4\r\n");  // auto connect(DTR) - use gpio 6 to make and break connections
    22ce:	86 e0       	ldi	r24, 0x06	; 6
    22d0:	97 e0       	ldi	r25, 0x07	; 7
    22d2:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>
    SEND_COMMAND("SW,8000\r\n");   // Sniff disable - deep sleep setting READ MORE
    22d6:	8d e0       	ldi	r24, 0x0D	; 13
    22d8:	97 e0       	ldi	r25, 0x07	; 7
    22da:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>
    SEND_COMMAND("S~,6\r\n");   // HID profile
    22de:	87 e1       	ldi	r24, 0x17	; 23
    22e0:	97 e0       	ldi	r25, 0x07	; 7
    22e2:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>
    SEND_COMMAND("SH,003C\r\n");   // combo device, out-report, 4-reconnect. binary: 111100
    22e6:	8e e1       	ldi	r24, 0x1E	; 30
    22e8:	97 e0       	ldi	r25, 0x07	; 7
    22ea:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>
    SEND_COMMAND("SY,FFF4\r\n");   // transmit power -12
    22ee:	88 e2       	ldi	r24, 0x28	; 40
    22f0:	97 e0       	ldi	r25, 0x07	; 7
    22f2:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>
    SEND_COMMAND("R,1\r\n");	// reboot module
    22f6:	82 e3       	ldi	r24, 0x32	; 50
    22f8:	97 e0       	ldi	r25, 0x07	; 7
    22fa:	0e 94 a9 0c 	call	0x1952	; 0x1952 <send_command>
    if (!config_mode) exit_command_mode();
    22fe:	80 91 50 03 	lds	r24, 0x0350
    2302:	81 11       	cpse	r24, r1
    2304:	02 c0       	rjmp	.+4      	; 0x230a <__stack+0x20b>
    2306:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <exit_command_mode>
                config_mode = false;
            }
            return true;
        case KC_SCROLLLOCK:
            init_rn42();
            return true;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <__stack+0x217>
        default:
            if (config_mode)
    230e:	80 91 50 03 	lds	r24, 0x0350
    2312:	01 c0       	rjmp	.+2      	; 0x2316 <__stack+0x217>
            xprintf("%02u:",   t/3600);
            xprintf("%02u:",   t%3600/60);
            xprintf("%02u\n",  t%60);
            return true;
        case KC_U:
            if (config_mode) return false;
    2314:	80 e0       	ldi	r24, 0x00	; 0
                return true;
            else
                return false;   // yield to default command
    }
    return true;
}
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	ff 90       	pop	r15
    2324:	ef 90       	pop	r14
    2326:	df 90       	pop	r13
    2328:	cf 90       	pop	r12
    232a:	bf 90       	pop	r11
    232c:	af 90       	pop	r10
    232e:	9f 90       	pop	r9
    2330:	8f 90       	pop	r8
    2332:	7f 90       	pop	r7
    2334:	6f 90       	pop	r6
    2336:	5f 90       	pop	r5
    2338:	4f 90       	pop	r4
    233a:	08 95       	ret

0000233c <command_console_extra>:
 * RN-42 Command mode
 * sends charactors to the module
 */
static uint8_t code2asc(uint8_t code);
bool command_console_extra(uint8_t code)
{
    233c:	cf 93       	push	r28
    233e:	c8 2f       	mov	r28, r24
}

// convert keycode into ascii charactor
static uint8_t code2asc(uint8_t code)
{
    bool shifted = (get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RCTL))) ? true : false;
    2340:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <get_mods>
    2344:	82 71       	andi	r24, 0x12	; 18
    2346:	21 e0       	ldi	r18, 0x01	; 1
    2348:	09 f4       	brne	.+2      	; 0x234c <command_console_extra+0x10>
    234a:	20 e0       	ldi	r18, 0x00	; 0
    switch (code) {
    234c:	8c 2f       	mov	r24, r28
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	fc 01       	movw	r30, r24
    2352:	34 97       	sbiw	r30, 0x04	; 4
    2354:	e9 34       	cpi	r30, 0x49	; 73
    2356:	f1 05       	cpc	r31, r1
    2358:	08 f0       	brcs	.+2      	; 0x235c <command_console_extra+0x20>
    235a:	fd c0       	rjmp	.+506    	; 0x2556 <command_console_extra+0x21a>
    235c:	e4 5b       	subi	r30, 0xB4	; 180
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	0c 94 d7 31 	jmp	0x63ae	; 0x63ae <__tablejump2__>
        case KC_6: return (shifted ? '^' : '6');
        case KC_7: return (shifted ? '&' : '7');
        case KC_8: return (shifted ? '*' : '8');
        case KC_9: return (shifted ? '(' : '9');
        case KC_0: return (shifted ? ')' : '0');
        case KC_ENTER: return '\n';
    2364:	8a e0       	ldi	r24, 0x0A	; 10
    2366:	58 c1       	rjmp	.+688    	; 0x2618 <command_console_extra+0x2dc>
// convert keycode into ascii charactor
static uint8_t code2asc(uint8_t code)
{
    bool shifted = (get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RCTL))) ? true : false;
    switch (code) {
        case KC_A: return (shifted ? 'A' : 'a');
    2368:	22 23       	and	r18, r18
    236a:	09 f4       	brne	.+2      	; 0x236e <command_console_extra+0x32>
    236c:	f8 c0       	rjmp	.+496    	; 0x255e <command_console_extra+0x222>
    236e:	81 e4       	ldi	r24, 0x41	; 65
    2370:	53 c1       	rjmp	.+678    	; 0x2618 <command_console_extra+0x2dc>
        case KC_B: return (shifted ? 'B' : 'b');
    2372:	22 23       	and	r18, r18
    2374:	09 f4       	brne	.+2      	; 0x2378 <command_console_extra+0x3c>
    2376:	f5 c0       	rjmp	.+490    	; 0x2562 <command_console_extra+0x226>
    2378:	82 e4       	ldi	r24, 0x42	; 66
    237a:	4e c1       	rjmp	.+668    	; 0x2618 <command_console_extra+0x2dc>
        case KC_C: return (shifted ? 'C' : 'c');
    237c:	22 23       	and	r18, r18
    237e:	09 f4       	brne	.+2      	; 0x2382 <command_console_extra+0x46>
    2380:	f2 c0       	rjmp	.+484    	; 0x2566 <command_console_extra+0x22a>
    2382:	83 e4       	ldi	r24, 0x43	; 67
    2384:	49 c1       	rjmp	.+658    	; 0x2618 <command_console_extra+0x2dc>
        case KC_D: return (shifted ? 'D' : 'd');
    2386:	22 23       	and	r18, r18
    2388:	09 f4       	brne	.+2      	; 0x238c <command_console_extra+0x50>
    238a:	ef c0       	rjmp	.+478    	; 0x256a <command_console_extra+0x22e>
    238c:	84 e4       	ldi	r24, 0x44	; 68
    238e:	44 c1       	rjmp	.+648    	; 0x2618 <command_console_extra+0x2dc>
        case KC_E: return (shifted ? 'E' : 'e');
    2390:	22 23       	and	r18, r18
    2392:	09 f4       	brne	.+2      	; 0x2396 <command_console_extra+0x5a>
    2394:	ec c0       	rjmp	.+472    	; 0x256e <command_console_extra+0x232>
    2396:	85 e4       	ldi	r24, 0x45	; 69
    2398:	3f c1       	rjmp	.+638    	; 0x2618 <command_console_extra+0x2dc>
        case KC_F: return (shifted ? 'F' : 'f');
    239a:	22 23       	and	r18, r18
    239c:	09 f4       	brne	.+2      	; 0x23a0 <command_console_extra+0x64>
    239e:	e9 c0       	rjmp	.+466    	; 0x2572 <command_console_extra+0x236>
    23a0:	86 e4       	ldi	r24, 0x46	; 70
    23a2:	3a c1       	rjmp	.+628    	; 0x2618 <command_console_extra+0x2dc>
        case KC_G: return (shifted ? 'G' : 'g');
    23a4:	22 23       	and	r18, r18
    23a6:	09 f4       	brne	.+2      	; 0x23aa <command_console_extra+0x6e>
    23a8:	e6 c0       	rjmp	.+460    	; 0x2576 <command_console_extra+0x23a>
    23aa:	87 e4       	ldi	r24, 0x47	; 71
    23ac:	35 c1       	rjmp	.+618    	; 0x2618 <command_console_extra+0x2dc>
        case KC_H: return (shifted ? 'H' : 'h');
    23ae:	22 23       	and	r18, r18
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <command_console_extra+0x78>
    23b2:	e3 c0       	rjmp	.+454    	; 0x257a <command_console_extra+0x23e>
    23b4:	88 e4       	ldi	r24, 0x48	; 72
    23b6:	30 c1       	rjmp	.+608    	; 0x2618 <command_console_extra+0x2dc>
        case KC_I: return (shifted ? 'I' : 'i');
    23b8:	22 23       	and	r18, r18
    23ba:	09 f4       	brne	.+2      	; 0x23be <command_console_extra+0x82>
    23bc:	e0 c0       	rjmp	.+448    	; 0x257e <command_console_extra+0x242>
    23be:	89 e4       	ldi	r24, 0x49	; 73
    23c0:	2b c1       	rjmp	.+598    	; 0x2618 <command_console_extra+0x2dc>
        case KC_J: return (shifted ? 'J' : 'j');
    23c2:	22 23       	and	r18, r18
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <command_console_extra+0x8c>
    23c6:	dd c0       	rjmp	.+442    	; 0x2582 <command_console_extra+0x246>
    23c8:	8a e4       	ldi	r24, 0x4A	; 74
    23ca:	26 c1       	rjmp	.+588    	; 0x2618 <command_console_extra+0x2dc>
        case KC_K: return (shifted ? 'K' : 'k');
    23cc:	22 23       	and	r18, r18
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <command_console_extra+0x96>
    23d0:	da c0       	rjmp	.+436    	; 0x2586 <command_console_extra+0x24a>
    23d2:	8b e4       	ldi	r24, 0x4B	; 75
    23d4:	21 c1       	rjmp	.+578    	; 0x2618 <command_console_extra+0x2dc>
        case KC_L: return (shifted ? 'L' : 'l');
    23d6:	22 23       	and	r18, r18
    23d8:	09 f4       	brne	.+2      	; 0x23dc <command_console_extra+0xa0>
    23da:	d7 c0       	rjmp	.+430    	; 0x258a <command_console_extra+0x24e>
    23dc:	8c e4       	ldi	r24, 0x4C	; 76
    23de:	1c c1       	rjmp	.+568    	; 0x2618 <command_console_extra+0x2dc>
        case KC_M: return (shifted ? 'M' : 'm');
    23e0:	22 23       	and	r18, r18
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <command_console_extra+0xaa>
    23e4:	d4 c0       	rjmp	.+424    	; 0x258e <command_console_extra+0x252>
    23e6:	8d e4       	ldi	r24, 0x4D	; 77
    23e8:	17 c1       	rjmp	.+558    	; 0x2618 <command_console_extra+0x2dc>
        case KC_N: return (shifted ? 'N' : 'n');
    23ea:	22 23       	and	r18, r18
    23ec:	09 f4       	brne	.+2      	; 0x23f0 <command_console_extra+0xb4>
    23ee:	d1 c0       	rjmp	.+418    	; 0x2592 <command_console_extra+0x256>
    23f0:	8e e4       	ldi	r24, 0x4E	; 78
    23f2:	12 c1       	rjmp	.+548    	; 0x2618 <command_console_extra+0x2dc>
        case KC_O: return (shifted ? 'O' : 'o');
    23f4:	22 23       	and	r18, r18
    23f6:	09 f4       	brne	.+2      	; 0x23fa <command_console_extra+0xbe>
    23f8:	ce c0       	rjmp	.+412    	; 0x2596 <command_console_extra+0x25a>
    23fa:	8f e4       	ldi	r24, 0x4F	; 79
    23fc:	0d c1       	rjmp	.+538    	; 0x2618 <command_console_extra+0x2dc>
        case KC_P: return (shifted ? 'P' : 'p');
    23fe:	22 23       	and	r18, r18
    2400:	09 f4       	brne	.+2      	; 0x2404 <command_console_extra+0xc8>
    2402:	cb c0       	rjmp	.+406    	; 0x259a <command_console_extra+0x25e>
    2404:	80 e5       	ldi	r24, 0x50	; 80
    2406:	08 c1       	rjmp	.+528    	; 0x2618 <command_console_extra+0x2dc>
        case KC_Q: return (shifted ? 'Q' : 'q');
    2408:	22 23       	and	r18, r18
    240a:	09 f4       	brne	.+2      	; 0x240e <command_console_extra+0xd2>
    240c:	c8 c0       	rjmp	.+400    	; 0x259e <command_console_extra+0x262>
    240e:	81 e5       	ldi	r24, 0x51	; 81
    2410:	03 c1       	rjmp	.+518    	; 0x2618 <command_console_extra+0x2dc>
        case KC_R: return (shifted ? 'R' : 'r');
    2412:	22 23       	and	r18, r18
    2414:	09 f4       	brne	.+2      	; 0x2418 <command_console_extra+0xdc>
    2416:	c5 c0       	rjmp	.+394    	; 0x25a2 <command_console_extra+0x266>
    2418:	82 e5       	ldi	r24, 0x52	; 82
    241a:	fe c0       	rjmp	.+508    	; 0x2618 <command_console_extra+0x2dc>
        case KC_S: return (shifted ? 'S' : 's');
    241c:	22 23       	and	r18, r18
    241e:	09 f4       	brne	.+2      	; 0x2422 <command_console_extra+0xe6>
    2420:	c2 c0       	rjmp	.+388    	; 0x25a6 <command_console_extra+0x26a>
    2422:	83 e5       	ldi	r24, 0x53	; 83
    2424:	f9 c0       	rjmp	.+498    	; 0x2618 <command_console_extra+0x2dc>
        case KC_T: return (shifted ? 'T' : 't');
    2426:	22 23       	and	r18, r18
    2428:	09 f4       	brne	.+2      	; 0x242c <command_console_extra+0xf0>
    242a:	bf c0       	rjmp	.+382    	; 0x25aa <command_console_extra+0x26e>
    242c:	84 e5       	ldi	r24, 0x54	; 84
    242e:	f4 c0       	rjmp	.+488    	; 0x2618 <command_console_extra+0x2dc>
        case KC_U: return (shifted ? 'U' : 'u');
    2430:	22 23       	and	r18, r18
    2432:	09 f4       	brne	.+2      	; 0x2436 <command_console_extra+0xfa>
    2434:	bc c0       	rjmp	.+376    	; 0x25ae <command_console_extra+0x272>
    2436:	85 e5       	ldi	r24, 0x55	; 85
    2438:	ef c0       	rjmp	.+478    	; 0x2618 <command_console_extra+0x2dc>
        case KC_V: return (shifted ? 'V' : 'v');
    243a:	22 23       	and	r18, r18
    243c:	09 f4       	brne	.+2      	; 0x2440 <command_console_extra+0x104>
    243e:	b9 c0       	rjmp	.+370    	; 0x25b2 <command_console_extra+0x276>
    2440:	86 e5       	ldi	r24, 0x56	; 86
    2442:	ea c0       	rjmp	.+468    	; 0x2618 <command_console_extra+0x2dc>
        case KC_W: return (shifted ? 'W' : 'w');
    2444:	22 23       	and	r18, r18
    2446:	09 f4       	brne	.+2      	; 0x244a <command_console_extra+0x10e>
    2448:	b6 c0       	rjmp	.+364    	; 0x25b6 <command_console_extra+0x27a>
    244a:	87 e5       	ldi	r24, 0x57	; 87
    244c:	e5 c0       	rjmp	.+458    	; 0x2618 <command_console_extra+0x2dc>
        case KC_X: return (shifted ? 'X' : 'x');
    244e:	22 23       	and	r18, r18
    2450:	09 f4       	brne	.+2      	; 0x2454 <command_console_extra+0x118>
    2452:	b3 c0       	rjmp	.+358    	; 0x25ba <command_console_extra+0x27e>
    2454:	88 e5       	ldi	r24, 0x58	; 88
    2456:	e0 c0       	rjmp	.+448    	; 0x2618 <command_console_extra+0x2dc>
        case KC_Y: return (shifted ? 'Y' : 'y');
    2458:	22 23       	and	r18, r18
    245a:	09 f4       	brne	.+2      	; 0x245e <command_console_extra+0x122>
    245c:	b0 c0       	rjmp	.+352    	; 0x25be <command_console_extra+0x282>
    245e:	89 e5       	ldi	r24, 0x59	; 89
    2460:	db c0       	rjmp	.+438    	; 0x2618 <command_console_extra+0x2dc>
        case KC_Z: return (shifted ? 'Z' : 'z');
    2462:	22 23       	and	r18, r18
    2464:	09 f4       	brne	.+2      	; 0x2468 <command_console_extra+0x12c>
    2466:	ad c0       	rjmp	.+346    	; 0x25c2 <command_console_extra+0x286>
    2468:	8a e5       	ldi	r24, 0x5A	; 90
    246a:	d6 c0       	rjmp	.+428    	; 0x2618 <command_console_extra+0x2dc>
        case KC_1: return (shifted ? '!' : '1');
    246c:	22 23       	and	r18, r18
    246e:	09 f4       	brne	.+2      	; 0x2472 <command_console_extra+0x136>
    2470:	aa c0       	rjmp	.+340    	; 0x25c6 <command_console_extra+0x28a>
    2472:	81 e2       	ldi	r24, 0x21	; 33
    2474:	d1 c0       	rjmp	.+418    	; 0x2618 <command_console_extra+0x2dc>
        case KC_2: return (shifted ? '@' : '2');
    2476:	22 23       	and	r18, r18
    2478:	09 f4       	brne	.+2      	; 0x247c <command_console_extra+0x140>
    247a:	a7 c0       	rjmp	.+334    	; 0x25ca <command_console_extra+0x28e>
    247c:	80 e4       	ldi	r24, 0x40	; 64
    247e:	cc c0       	rjmp	.+408    	; 0x2618 <command_console_extra+0x2dc>
        case KC_3: return (shifted ? '#' : '3');
    2480:	22 23       	and	r18, r18
    2482:	09 f4       	brne	.+2      	; 0x2486 <command_console_extra+0x14a>
    2484:	a4 c0       	rjmp	.+328    	; 0x25ce <command_console_extra+0x292>
    2486:	83 e2       	ldi	r24, 0x23	; 35
    2488:	c7 c0       	rjmp	.+398    	; 0x2618 <command_console_extra+0x2dc>
        case KC_4: return (shifted ? '$' : '4');
    248a:	22 23       	and	r18, r18
    248c:	09 f4       	brne	.+2      	; 0x2490 <command_console_extra+0x154>
    248e:	a1 c0       	rjmp	.+322    	; 0x25d2 <command_console_extra+0x296>
    2490:	84 e2       	ldi	r24, 0x24	; 36
    2492:	c2 c0       	rjmp	.+388    	; 0x2618 <command_console_extra+0x2dc>
        case KC_5: return (shifted ? '%' : '5');
    2494:	22 23       	and	r18, r18
    2496:	09 f4       	brne	.+2      	; 0x249a <command_console_extra+0x15e>
    2498:	9e c0       	rjmp	.+316    	; 0x25d6 <command_console_extra+0x29a>
    249a:	85 e2       	ldi	r24, 0x25	; 37
    249c:	bd c0       	rjmp	.+378    	; 0x2618 <command_console_extra+0x2dc>
        case KC_6: return (shifted ? '^' : '6');
    249e:	22 23       	and	r18, r18
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <command_console_extra+0x168>
    24a2:	9b c0       	rjmp	.+310    	; 0x25da <command_console_extra+0x29e>
    24a4:	8e e5       	ldi	r24, 0x5E	; 94
    24a6:	b8 c0       	rjmp	.+368    	; 0x2618 <command_console_extra+0x2dc>
        case KC_7: return (shifted ? '&' : '7');
    24a8:	22 23       	and	r18, r18
    24aa:	09 f4       	brne	.+2      	; 0x24ae <command_console_extra+0x172>
    24ac:	98 c0       	rjmp	.+304    	; 0x25de <command_console_extra+0x2a2>
    24ae:	86 e2       	ldi	r24, 0x26	; 38
    24b0:	b3 c0       	rjmp	.+358    	; 0x2618 <command_console_extra+0x2dc>
        case KC_8: return (shifted ? '*' : '8');
    24b2:	22 23       	and	r18, r18
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <command_console_extra+0x17c>
    24b6:	95 c0       	rjmp	.+298    	; 0x25e2 <command_console_extra+0x2a6>
    24b8:	8a e2       	ldi	r24, 0x2A	; 42
    24ba:	ae c0       	rjmp	.+348    	; 0x2618 <command_console_extra+0x2dc>
        case KC_9: return (shifted ? '(' : '9');
    24bc:	22 23       	and	r18, r18
    24be:	09 f4       	brne	.+2      	; 0x24c2 <command_console_extra+0x186>
    24c0:	92 c0       	rjmp	.+292    	; 0x25e6 <command_console_extra+0x2aa>
    24c2:	88 e2       	ldi	r24, 0x28	; 40
    24c4:	a9 c0       	rjmp	.+338    	; 0x2618 <command_console_extra+0x2dc>
        case KC_0: return (shifted ? ')' : '0');
    24c6:	22 23       	and	r18, r18
    24c8:	09 f4       	brne	.+2      	; 0x24cc <command_console_extra+0x190>
    24ca:	8f c0       	rjmp	.+286    	; 0x25ea <command_console_extra+0x2ae>
    24cc:	89 e2       	ldi	r24, 0x29	; 41
    24ce:	a4 c0       	rjmp	.+328    	; 0x2618 <command_console_extra+0x2dc>
        case KC_ENTER: return '\n';
        case KC_ESCAPE: return 0x1B;
        case KC_BSPACE: return '\b';
    24d0:	88 e0       	ldi	r24, 0x08	; 8
    24d2:	a2 c0       	rjmp	.+324    	; 0x2618 <command_console_extra+0x2dc>
        case KC_TAB: return '\t';
    24d4:	89 e0       	ldi	r24, 0x09	; 9
    24d6:	a0 c0       	rjmp	.+320    	; 0x2618 <command_console_extra+0x2dc>
        case KC_SPACE: return ' ';
    24d8:	80 e2       	ldi	r24, 0x20	; 32
    24da:	9e c0       	rjmp	.+316    	; 0x2618 <command_console_extra+0x2dc>
        case KC_MINUS: return (shifted ? '_' : '-');
    24dc:	22 23       	and	r18, r18
    24de:	09 f4       	brne	.+2      	; 0x24e2 <command_console_extra+0x1a6>
    24e0:	86 c0       	rjmp	.+268    	; 0x25ee <command_console_extra+0x2b2>
    24e2:	8f e5       	ldi	r24, 0x5F	; 95
    24e4:	99 c0       	rjmp	.+306    	; 0x2618 <command_console_extra+0x2dc>
        case KC_EQUAL: return (shifted ? '+' : '=');
    24e6:	22 23       	and	r18, r18
    24e8:	09 f4       	brne	.+2      	; 0x24ec <command_console_extra+0x1b0>
    24ea:	83 c0       	rjmp	.+262    	; 0x25f2 <command_console_extra+0x2b6>
    24ec:	8b e2       	ldi	r24, 0x2B	; 43
    24ee:	94 c0       	rjmp	.+296    	; 0x2618 <command_console_extra+0x2dc>
        case KC_LBRACKET: return (shifted ? '{' : '[');
    24f0:	22 23       	and	r18, r18
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <command_console_extra+0x1ba>
    24f4:	80 c0       	rjmp	.+256    	; 0x25f6 <command_console_extra+0x2ba>
    24f6:	8b e7       	ldi	r24, 0x7B	; 123
    24f8:	8f c0       	rjmp	.+286    	; 0x2618 <command_console_extra+0x2dc>
        case KC_RBRACKET: return (shifted ? '}' : ']');
    24fa:	22 23       	and	r18, r18
    24fc:	09 f4       	brne	.+2      	; 0x2500 <command_console_extra+0x1c4>
    24fe:	7d c0       	rjmp	.+250    	; 0x25fa <command_console_extra+0x2be>
    2500:	8d e7       	ldi	r24, 0x7D	; 125
    2502:	8a c0       	rjmp	.+276    	; 0x2618 <command_console_extra+0x2dc>
        case KC_BSLASH: return (shifted ? '|' : '\\');
    2504:	22 23       	and	r18, r18
    2506:	09 f4       	brne	.+2      	; 0x250a <command_console_extra+0x1ce>
    2508:	7a c0       	rjmp	.+244    	; 0x25fe <command_console_extra+0x2c2>
    250a:	8c e7       	ldi	r24, 0x7C	; 124
    250c:	85 c0       	rjmp	.+266    	; 0x2618 <command_console_extra+0x2dc>
        case KC_NONUS_HASH: return (shifted ? '|' : '\\');
    250e:	21 11       	cpse	r18, r1
    2510:	fc cf       	rjmp	.-8      	; 0x250a <command_console_extra+0x1ce>
        case KC_SPACE: return ' ';
        case KC_MINUS: return (shifted ? '_' : '-');
        case KC_EQUAL: return (shifted ? '+' : '=');
        case KC_LBRACKET: return (shifted ? '{' : '[');
        case KC_RBRACKET: return (shifted ? '}' : ']');
        case KC_BSLASH: return (shifted ? '|' : '\\');
    2512:	8c e5       	ldi	r24, 0x5C	; 92
    2514:	81 c0       	rjmp	.+258    	; 0x2618 <command_console_extra+0x2dc>
        case KC_NONUS_HASH: return (shifted ? '|' : '\\');
        case KC_SCOLON: return (shifted ? ':' : ';');
    2516:	22 23       	and	r18, r18
    2518:	09 f4       	brne	.+2      	; 0x251c <command_console_extra+0x1e0>
    251a:	73 c0       	rjmp	.+230    	; 0x2602 <command_console_extra+0x2c6>
    251c:	8a e3       	ldi	r24, 0x3A	; 58
    251e:	7c c0       	rjmp	.+248    	; 0x2618 <command_console_extra+0x2dc>
        case KC_QUOTE: return (shifted ? '"' : '\'');
    2520:	22 23       	and	r18, r18
    2522:	09 f4       	brne	.+2      	; 0x2526 <command_console_extra+0x1ea>
    2524:	70 c0       	rjmp	.+224    	; 0x2606 <command_console_extra+0x2ca>
    2526:	82 e2       	ldi	r24, 0x22	; 34
    2528:	77 c0       	rjmp	.+238    	; 0x2618 <command_console_extra+0x2dc>
        case KC_GRAVE: return (shifted ? '~' : '`');
    252a:	22 23       	and	r18, r18
    252c:	09 f4       	brne	.+2      	; 0x2530 <command_console_extra+0x1f4>
    252e:	6d c0       	rjmp	.+218    	; 0x260a <command_console_extra+0x2ce>
    2530:	8e e7       	ldi	r24, 0x7E	; 126
    2532:	72 c0       	rjmp	.+228    	; 0x2618 <command_console_extra+0x2dc>
        case KC_COMMA: return (shifted ? '<' : ',');
    2534:	22 23       	and	r18, r18
    2536:	09 f4       	brne	.+2      	; 0x253a <command_console_extra+0x1fe>
    2538:	6a c0       	rjmp	.+212    	; 0x260e <command_console_extra+0x2d2>
    253a:	8c e3       	ldi	r24, 0x3C	; 60
    253c:	6d c0       	rjmp	.+218    	; 0x2618 <command_console_extra+0x2dc>
        case KC_DOT: return (shifted ? '>' : '.');
    253e:	22 23       	and	r18, r18
    2540:	09 f4       	brne	.+2      	; 0x2544 <command_console_extra+0x208>
    2542:	67 c0       	rjmp	.+206    	; 0x2612 <command_console_extra+0x2d6>
    2544:	8e e3       	ldi	r24, 0x3E	; 62
    2546:	68 c0       	rjmp	.+208    	; 0x2618 <command_console_extra+0x2dc>
        case KC_SLASH: return (shifted ? '?' : '/');
    2548:	22 23       	and	r18, r18
    254a:	09 f4       	brne	.+2      	; 0x254e <command_console_extra+0x212>
    254c:	64 c0       	rjmp	.+200    	; 0x2616 <command_console_extra+0x2da>
    254e:	8f e3       	ldi	r24, 0x3F	; 63
    2550:	63 c0       	rjmp	.+198    	; 0x2618 <command_console_extra+0x2dc>
        case KC_DELETE: return '\0';    // Delete to disconnect
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	61 c0       	rjmp	.+194    	; 0x2618 <command_console_extra+0x2dc>
        default: return ' ';
    2556:	80 e2       	ldi	r24, 0x20	; 32
    2558:	5f c0       	rjmp	.+190    	; 0x2618 <command_console_extra+0x2dc>
        case KC_7: return (shifted ? '&' : '7');
        case KC_8: return (shifted ? '*' : '8');
        case KC_9: return (shifted ? '(' : '9');
        case KC_0: return (shifted ? ')' : '0');
        case KC_ENTER: return '\n';
        case KC_ESCAPE: return 0x1B;
    255a:	8b e1       	ldi	r24, 0x1B	; 27
    255c:	5d c0       	rjmp	.+186    	; 0x2618 <command_console_extra+0x2dc>
// convert keycode into ascii charactor
static uint8_t code2asc(uint8_t code)
{
    bool shifted = (get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RCTL))) ? true : false;
    switch (code) {
        case KC_A: return (shifted ? 'A' : 'a');
    255e:	81 e6       	ldi	r24, 0x61	; 97
    2560:	5b c0       	rjmp	.+182    	; 0x2618 <command_console_extra+0x2dc>
        case KC_B: return (shifted ? 'B' : 'b');
    2562:	82 e6       	ldi	r24, 0x62	; 98
    2564:	59 c0       	rjmp	.+178    	; 0x2618 <command_console_extra+0x2dc>
        case KC_C: return (shifted ? 'C' : 'c');
    2566:	83 e6       	ldi	r24, 0x63	; 99
    2568:	57 c0       	rjmp	.+174    	; 0x2618 <command_console_extra+0x2dc>
        case KC_D: return (shifted ? 'D' : 'd');
    256a:	84 e6       	ldi	r24, 0x64	; 100
    256c:	55 c0       	rjmp	.+170    	; 0x2618 <command_console_extra+0x2dc>
        case KC_E: return (shifted ? 'E' : 'e');
    256e:	85 e6       	ldi	r24, 0x65	; 101
    2570:	53 c0       	rjmp	.+166    	; 0x2618 <command_console_extra+0x2dc>
        case KC_F: return (shifted ? 'F' : 'f');
    2572:	86 e6       	ldi	r24, 0x66	; 102
    2574:	51 c0       	rjmp	.+162    	; 0x2618 <command_console_extra+0x2dc>
        case KC_G: return (shifted ? 'G' : 'g');
    2576:	87 e6       	ldi	r24, 0x67	; 103
    2578:	4f c0       	rjmp	.+158    	; 0x2618 <command_console_extra+0x2dc>
        case KC_H: return (shifted ? 'H' : 'h');
    257a:	88 e6       	ldi	r24, 0x68	; 104
    257c:	4d c0       	rjmp	.+154    	; 0x2618 <command_console_extra+0x2dc>
        case KC_I: return (shifted ? 'I' : 'i');
    257e:	89 e6       	ldi	r24, 0x69	; 105
    2580:	4b c0       	rjmp	.+150    	; 0x2618 <command_console_extra+0x2dc>
        case KC_J: return (shifted ? 'J' : 'j');
    2582:	8a e6       	ldi	r24, 0x6A	; 106
    2584:	49 c0       	rjmp	.+146    	; 0x2618 <command_console_extra+0x2dc>
        case KC_K: return (shifted ? 'K' : 'k');
    2586:	8b e6       	ldi	r24, 0x6B	; 107
    2588:	47 c0       	rjmp	.+142    	; 0x2618 <command_console_extra+0x2dc>
        case KC_L: return (shifted ? 'L' : 'l');
    258a:	8c e6       	ldi	r24, 0x6C	; 108
    258c:	45 c0       	rjmp	.+138    	; 0x2618 <command_console_extra+0x2dc>
        case KC_M: return (shifted ? 'M' : 'm');
    258e:	8d e6       	ldi	r24, 0x6D	; 109
    2590:	43 c0       	rjmp	.+134    	; 0x2618 <command_console_extra+0x2dc>
        case KC_N: return (shifted ? 'N' : 'n');
    2592:	8e e6       	ldi	r24, 0x6E	; 110
    2594:	41 c0       	rjmp	.+130    	; 0x2618 <command_console_extra+0x2dc>
        case KC_O: return (shifted ? 'O' : 'o');
    2596:	8f e6       	ldi	r24, 0x6F	; 111
    2598:	3f c0       	rjmp	.+126    	; 0x2618 <command_console_extra+0x2dc>
        case KC_P: return (shifted ? 'P' : 'p');
    259a:	80 e7       	ldi	r24, 0x70	; 112
    259c:	3d c0       	rjmp	.+122    	; 0x2618 <command_console_extra+0x2dc>
        case KC_Q: return (shifted ? 'Q' : 'q');
    259e:	81 e7       	ldi	r24, 0x71	; 113
    25a0:	3b c0       	rjmp	.+118    	; 0x2618 <command_console_extra+0x2dc>
        case KC_R: return (shifted ? 'R' : 'r');
    25a2:	82 e7       	ldi	r24, 0x72	; 114
    25a4:	39 c0       	rjmp	.+114    	; 0x2618 <command_console_extra+0x2dc>
        case KC_S: return (shifted ? 'S' : 's');
    25a6:	83 e7       	ldi	r24, 0x73	; 115
    25a8:	37 c0       	rjmp	.+110    	; 0x2618 <command_console_extra+0x2dc>
        case KC_T: return (shifted ? 'T' : 't');
    25aa:	84 e7       	ldi	r24, 0x74	; 116
    25ac:	35 c0       	rjmp	.+106    	; 0x2618 <command_console_extra+0x2dc>
        case KC_U: return (shifted ? 'U' : 'u');
    25ae:	85 e7       	ldi	r24, 0x75	; 117
    25b0:	33 c0       	rjmp	.+102    	; 0x2618 <command_console_extra+0x2dc>
        case KC_V: return (shifted ? 'V' : 'v');
    25b2:	86 e7       	ldi	r24, 0x76	; 118
    25b4:	31 c0       	rjmp	.+98     	; 0x2618 <command_console_extra+0x2dc>
        case KC_W: return (shifted ? 'W' : 'w');
    25b6:	87 e7       	ldi	r24, 0x77	; 119
    25b8:	2f c0       	rjmp	.+94     	; 0x2618 <command_console_extra+0x2dc>
        case KC_X: return (shifted ? 'X' : 'x');
    25ba:	88 e7       	ldi	r24, 0x78	; 120
    25bc:	2d c0       	rjmp	.+90     	; 0x2618 <command_console_extra+0x2dc>
        case KC_Y: return (shifted ? 'Y' : 'y');
    25be:	89 e7       	ldi	r24, 0x79	; 121
    25c0:	2b c0       	rjmp	.+86     	; 0x2618 <command_console_extra+0x2dc>
        case KC_Z: return (shifted ? 'Z' : 'z');
    25c2:	8a e7       	ldi	r24, 0x7A	; 122
    25c4:	29 c0       	rjmp	.+82     	; 0x2618 <command_console_extra+0x2dc>
        case KC_1: return (shifted ? '!' : '1');
    25c6:	81 e3       	ldi	r24, 0x31	; 49
    25c8:	27 c0       	rjmp	.+78     	; 0x2618 <command_console_extra+0x2dc>
        case KC_2: return (shifted ? '@' : '2');
    25ca:	82 e3       	ldi	r24, 0x32	; 50
    25cc:	25 c0       	rjmp	.+74     	; 0x2618 <command_console_extra+0x2dc>
        case KC_3: return (shifted ? '#' : '3');
    25ce:	83 e3       	ldi	r24, 0x33	; 51
    25d0:	23 c0       	rjmp	.+70     	; 0x2618 <command_console_extra+0x2dc>
        case KC_4: return (shifted ? '$' : '4');
    25d2:	84 e3       	ldi	r24, 0x34	; 52
    25d4:	21 c0       	rjmp	.+66     	; 0x2618 <command_console_extra+0x2dc>
        case KC_5: return (shifted ? '%' : '5');
    25d6:	85 e3       	ldi	r24, 0x35	; 53
    25d8:	1f c0       	rjmp	.+62     	; 0x2618 <command_console_extra+0x2dc>
        case KC_6: return (shifted ? '^' : '6');
    25da:	86 e3       	ldi	r24, 0x36	; 54
    25dc:	1d c0       	rjmp	.+58     	; 0x2618 <command_console_extra+0x2dc>
        case KC_7: return (shifted ? '&' : '7');
    25de:	87 e3       	ldi	r24, 0x37	; 55
    25e0:	1b c0       	rjmp	.+54     	; 0x2618 <command_console_extra+0x2dc>
        case KC_8: return (shifted ? '*' : '8');
    25e2:	88 e3       	ldi	r24, 0x38	; 56
    25e4:	19 c0       	rjmp	.+50     	; 0x2618 <command_console_extra+0x2dc>
        case KC_9: return (shifted ? '(' : '9');
    25e6:	89 e3       	ldi	r24, 0x39	; 57
    25e8:	17 c0       	rjmp	.+46     	; 0x2618 <command_console_extra+0x2dc>
        case KC_0: return (shifted ? ')' : '0');
    25ea:	80 e3       	ldi	r24, 0x30	; 48
    25ec:	15 c0       	rjmp	.+42     	; 0x2618 <command_console_extra+0x2dc>
        case KC_ENTER: return '\n';
        case KC_ESCAPE: return 0x1B;
        case KC_BSPACE: return '\b';
        case KC_TAB: return '\t';
        case KC_SPACE: return ' ';
        case KC_MINUS: return (shifted ? '_' : '-');
    25ee:	8d e2       	ldi	r24, 0x2D	; 45
    25f0:	13 c0       	rjmp	.+38     	; 0x2618 <command_console_extra+0x2dc>
        case KC_EQUAL: return (shifted ? '+' : '=');
    25f2:	8d e3       	ldi	r24, 0x3D	; 61
    25f4:	11 c0       	rjmp	.+34     	; 0x2618 <command_console_extra+0x2dc>
        case KC_LBRACKET: return (shifted ? '{' : '[');
    25f6:	8b e5       	ldi	r24, 0x5B	; 91
    25f8:	0f c0       	rjmp	.+30     	; 0x2618 <command_console_extra+0x2dc>
        case KC_RBRACKET: return (shifted ? '}' : ']');
    25fa:	8d e5       	ldi	r24, 0x5D	; 93
    25fc:	0d c0       	rjmp	.+26     	; 0x2618 <command_console_extra+0x2dc>
        case KC_BSLASH: return (shifted ? '|' : '\\');
    25fe:	8c e5       	ldi	r24, 0x5C	; 92
    2600:	0b c0       	rjmp	.+22     	; 0x2618 <command_console_extra+0x2dc>
        case KC_NONUS_HASH: return (shifted ? '|' : '\\');
        case KC_SCOLON: return (shifted ? ':' : ';');
    2602:	8b e3       	ldi	r24, 0x3B	; 59
    2604:	09 c0       	rjmp	.+18     	; 0x2618 <command_console_extra+0x2dc>
        case KC_QUOTE: return (shifted ? '"' : '\'');
    2606:	87 e2       	ldi	r24, 0x27	; 39
    2608:	07 c0       	rjmp	.+14     	; 0x2618 <command_console_extra+0x2dc>
        case KC_GRAVE: return (shifted ? '~' : '`');
    260a:	80 e6       	ldi	r24, 0x60	; 96
    260c:	05 c0       	rjmp	.+10     	; 0x2618 <command_console_extra+0x2dc>
        case KC_COMMA: return (shifted ? '<' : ',');
    260e:	8c e2       	ldi	r24, 0x2C	; 44
    2610:	03 c0       	rjmp	.+6      	; 0x2618 <command_console_extra+0x2dc>
        case KC_DOT: return (shifted ? '>' : '.');
    2612:	8e e2       	ldi	r24, 0x2E	; 46
    2614:	01 c0       	rjmp	.+2      	; 0x2618 <command_console_extra+0x2dc>
        case KC_SLASH: return (shifted ? '?' : '/');
    2616:	8f e2       	ldi	r24, 0x2F	; 47
 * sends charactors to the module
 */
static uint8_t code2asc(uint8_t code);
bool command_console_extra(uint8_t code)
{
    rn42_putc(code2asc(code));
    2618:	0e 94 56 0c 	call	0x18ac	; 0x18ac <rn42_putc>
    return true;
}
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	cf 91       	pop	r28
    2620:	08 95       	ret

00002622 <battery_led>:
}

// Indicator for battery
void battery_led(battery_led_t val)
{
    if (val == LED_TOGGLE) {
    2622:	83 30       	cpi	r24, 0x03	; 3
    2624:	19 f4       	brne	.+6      	; 0x262c <battery_led+0xa>
        // Toggle LED
        DDRE  |=  (1<<5);
    2626:	6d 9a       	sbi	0x0d, 5	; 13
        PINE  |=  (1<<5);
    2628:	65 9a       	sbi	0x0c, 5	; 12
    262a:	08 95       	ret
    } else if (val == LED_ON) {
    262c:	81 30       	cpi	r24, 0x01	; 1
    262e:	11 f4       	brne	.+4      	; 0x2634 <battery_led+0x12>
        // On overriding charger status
        DDRE  |=  (1<<5);
    2630:	6d 9a       	sbi	0x0d, 5	; 13
    2632:	06 c0       	rjmp	.+12     	; 0x2640 <battery_led+0x1e>
        PORTE &= ~(1<<5);
    } else if (val == LED_OFF) {
    2634:	82 30       	cpi	r24, 0x02	; 2
    2636:	19 f4       	brne	.+6      	; 0x263e <battery_led+0x1c>
        // Off overriding charger status
        DDRE  |=  (1<<5);
    2638:	6d 9a       	sbi	0x0d, 5	; 13
        PORTE |=  (1<<5);
    263a:	75 9a       	sbi	0x0e, 5	; 14
    263c:	08 95       	ret
    } else {
        // Display charger status
        DDRE  &= ~(1<<5);
    263e:	6d 98       	cbi	0x0d, 5	; 13
        PORTE &= ~(1<<5);
    2640:	75 98       	cbi	0x0e, 5	; 14
    2642:	08 95       	ret

00002644 <battery_init>:
 */

void battery_init(void)
{
    // blink 
    battery_led(LED_ON);  _delay_ms(500);
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	0e 94 11 13 	call	0x2622	; 0x2622 <battery_led>
    264a:	2f ef       	ldi	r18, 0xFF	; 255
    264c:	84 e3       	ldi	r24, 0x34	; 52
    264e:	9c e0       	ldi	r25, 0x0C	; 12
    2650:	21 50       	subi	r18, 0x01	; 1
    2652:	80 40       	sbci	r24, 0x00	; 0
    2654:	90 40       	sbci	r25, 0x00	; 0
    2656:	e1 f7       	brne	.-8      	; 0x2650 <battery_init+0xc>
    2658:	00 c0       	rjmp	.+0      	; 0x265a <battery_init+0x16>
    265a:	00 00       	nop
    battery_led(LED_OFF); _delay_ms(500);
    265c:	82 e0       	ldi	r24, 0x02	; 2
    265e:	0e 94 11 13 	call	0x2622	; 0x2622 <battery_led>
    2662:	2f ef       	ldi	r18, 0xFF	; 255
    2664:	84 e3       	ldi	r24, 0x34	; 52
    2666:	9c e0       	ldi	r25, 0x0C	; 12
    2668:	21 50       	subi	r18, 0x01	; 1
    266a:	80 40       	sbci	r24, 0x00	; 0
    266c:	90 40       	sbci	r25, 0x00	; 0
    266e:	e1 f7       	brne	.-8      	; 0x2668 <battery_init+0x24>
    2670:	00 c0       	rjmp	.+0      	; 0x2672 <battery_init+0x2e>
    2672:	00 00       	nop
    battery_led(LED_ON);  _delay_ms(500);
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	0e 94 11 13 	call	0x2622	; 0x2622 <battery_led>
    267a:	2f ef       	ldi	r18, 0xFF	; 255
    267c:	84 e3       	ldi	r24, 0x34	; 52
    267e:	9c e0       	ldi	r25, 0x0C	; 12
    2680:	21 50       	subi	r18, 0x01	; 1
    2682:	80 40       	sbci	r24, 0x00	; 0
    2684:	90 40       	sbci	r25, 0x00	; 0
    2686:	e1 f7       	brne	.-8      	; 0x2680 <battery_init+0x3c>
    2688:	00 c0       	rjmp	.+0      	; 0x268a <battery_init+0x46>
    268a:	00 00       	nop
    battery_led(LED_OFF); _delay_ms(500);
    268c:	82 e0       	ldi	r24, 0x02	; 2
    268e:	0e 94 11 13 	call	0x2622	; 0x2622 <battery_led>
    2692:	2f ef       	ldi	r18, 0xFF	; 255
    2694:	84 e3       	ldi	r24, 0x34	; 52
    2696:	9c e0       	ldi	r25, 0x0C	; 12
    2698:	21 50       	subi	r18, 0x01	; 1
    269a:	80 40       	sbci	r24, 0x00	; 0
    269c:	90 40       	sbci	r25, 0x00	; 0
    269e:	e1 f7       	brne	.-8      	; 0x2698 <battery_init+0x54>
    26a0:	00 c0       	rjmp	.+0      	; 0x26a2 <battery_init+0x5e>
    26a2:	00 00       	nop
    
    // LED indicates charger status
    battery_led(LED_CHARGER);
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	0e 94 11 13 	call	0x2622	; 0x2622 <battery_led>

    // ADC setting for voltage monitor
    // Ref:2.56V band-gap, Input:ADC0(PF0), Prescale:128(16MHz/128=125KHz)
    ADMUX = (1<<REFS1) | (1<<REFS0);
    26aa:	80 ec       	ldi	r24, 0xC0	; 192
    26ac:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA = (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
    26b0:	87 e0       	ldi	r24, 0x07	; 7
    26b2:	80 93 7a 00 	sts	0x007A, r24
    //    DIDR0 = (1<<ADC0D) | (1<<ADC4D) | (1<<ADC7D);
    //    DIDR1 = (1<<AIN0D);
    //    DIDR2 = (1<<ADC8D) | (1<<ADC9D) | (1<<ADC11D) | (1<<ADC12D) | (1<<ADC13D);

    // ADC disable voltage divider(PF4)
    DDRB  |=  (1<<5);
    26b6:	25 9a       	sbi	0x04, 5	; 4
    PORTB |=  (1<<5);
    26b8:	2d 9a       	sbi	0x05, 5	; 5
    26ba:	08 95       	ret

000026bc <battery_charging>:
    }
}

bool battery_charging(void)
{
    if (!(USBSTA&(1<<VBUS))) return false;
    26bc:	80 91 d9 00 	lds	r24, 0x00D9
    26c0:	80 ff       	sbrs	r24, 0
    26c2:	1a c0       	rjmp	.+52     	; 0x26f8 <battery_charging+0x3c>
    //   Hi-Z       Hi-Z       Hi-Z     Shutdown/No Battery
    //   Low        Low        Low      Charging
    //   Hi         Hi-Z       Hi-Z     Charged

    // preserve last register status
    uint8_t ddre_prev  = DDRE;
    26c4:	2d b1       	in	r18, 0x0d	; 13
    uint8_t porte_prev = PORTE;
    26c6:	9e b1       	in	r25, 0x0e	; 14

    // Input with pullup
    DDRE  &= ~(1<<7);
    26c8:	6f 98       	cbi	0x0d, 7	; 13
    PORTE |=  (1<<7);
    26ca:	77 9a       	sbi	0x0e, 7	; 14
    26cc:	ef ec       	ldi	r30, 0xCF	; 207
    26ce:	f7 e0       	ldi	r31, 0x07	; 7
    26d0:	31 97       	sbiw	r30, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <battery_charging+0x14>
    26d4:	00 c0       	rjmp	.+0      	; 0x26d6 <battery_charging+0x1a>
    26d6:	00 00       	nop
    _delay_ms(1);
    bool charging = PINE&(1<<7) ? false : true;
    26d8:	8c b1       	in	r24, 0x0c	; 12
    26da:	80 95       	com	r24
    26dc:	88 1f       	adc	r24, r24
    26de:	88 27       	eor	r24, r24
    26e0:	88 1f       	adc	r24, r24

    // restore last register status
    DDRE  = (DDRE&~(1<<7))  | (ddre_prev&(1<<7));
    26e2:	3d b1       	in	r19, 0x0d	; 13
    26e4:	20 78       	andi	r18, 0x80	; 128
    26e6:	3f 77       	andi	r19, 0x7F	; 127
    26e8:	23 2b       	or	r18, r19
    26ea:	2d b9       	out	0x0d, r18	; 13
    PORTE = (PORTE&~(1<<7)) | (porte_prev&(1<<7));
    26ec:	2e b1       	in	r18, 0x0e	; 14
    26ee:	90 78       	andi	r25, 0x80	; 128
    26f0:	2f 77       	andi	r18, 0x7F	; 127
    26f2:	92 2b       	or	r25, r18
    26f4:	9e b9       	out	0x0e, r25	; 14

    // TODO: With MCP73831 this can not get stable status when charging.
    // LED is powered from PSEL line(USB or Lipo)
    // due to weak low output of STAT pin?
    // due to pull-up'd via resitor and LED?
    return charging;
    26f6:	08 95       	ret
    }
}

bool battery_charging(void)
{
    if (!(USBSTA&(1<<VBUS))) return false;
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    // TODO: With MCP73831 this can not get stable status when charging.
    // LED is powered from PSEL line(USB or Lipo)
    // due to weak low output of STAT pin?
    // due to pull-up'd via resitor and LED?
    return charging;
}
    26fa:	08 95       	ret

000026fc <battery_voltage>:

// Returns voltage in mV
uint16_t battery_voltage(void)
{
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	00 d0       	rcall	.+0      	; 0x2702 <battery_voltage+0x6>
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    // ADC disable voltage divider(PF4)
    DDRB  |=  (1<<5);
    2706:	25 9a       	sbi	0x04, 5	; 4
    PORTB &= ~(1<<5);
    2708:	2d 98       	cbi	0x05, 5	; 5

    volatile uint16_t bat;
    ADCSRA |= (1<<ADEN);
    270a:	80 91 7a 00 	lds	r24, 0x007A
    270e:	80 68       	ori	r24, 0x80	; 128
    2710:	80 93 7a 00 	sts	0x007A, r24
    2714:	8f ec       	ldi	r24, 0xCF	; 207
    2716:	97 e0       	ldi	r25, 0x07	; 7
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <battery_voltage+0x1c>
    271c:	00 c0       	rjmp	.+0      	; 0x271e <battery_voltage+0x22>
    271e:	00 00       	nop
    _delay_ms(1);   // wait for charging S/H capacitance

    ADCSRA |= (1<<ADSC);
    2720:	80 91 7a 00 	lds	r24, 0x007A
    2724:	80 64       	ori	r24, 0x40	; 64
    2726:	80 93 7a 00 	sts	0x007A, r24
    while (ADCSRA & (1<<ADSC)) ;
    272a:	80 91 7a 00 	lds	r24, 0x007A
    272e:	86 fd       	sbrc	r24, 6
    2730:	fc cf       	rjmp	.-8      	; 0x272a <battery_voltage+0x2e>
    bat = ADC;
    2732:	80 91 78 00 	lds	r24, 0x0078
    2736:	90 91 79 00 	lds	r25, 0x0079
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	89 83       	std	Y+1, r24	; 0x01

    ADCSRA &= ~(1<<ADEN);
    273e:	80 91 7a 00 	lds	r24, 0x007A
    2742:	8f 77       	andi	r24, 0x7F	; 127
    2744:	80 93 7a 00 	sts	0x007A, r24

    // ADC disable voltage divider(PF4)
    DDRB  |=  (1<<5);
    2748:	25 9a       	sbi	0x04, 5	; 4
    PORTB |=  (1<<5);
    274a:	2d 9a       	sbi	0x05, 5	; 5

    return (bat - BATTERY_ADC_OFFSET) * BATTERY_ADC_RESOLUTION;
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	9a 81       	ldd	r25, Y+2	; 0x02
    2750:	45 e0       	ldi	r20, 0x05	; 5
    2752:	48 9f       	mul	r20, r24
    2754:	90 01       	movw	r18, r0
    2756:	49 9f       	mul	r20, r25
    2758:	30 0d       	add	r19, r0
    275a:	11 24       	eor	r1, r1
    275c:	20 55       	subi	r18, 0x50	; 80
    275e:	31 09       	sbc	r19, r1
}
    2760:	c9 01       	movw	r24, r18
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	df 91       	pop	r29
    2768:	cf 91       	pop	r28
    276a:	08 95       	ret

0000276c <battery_status>:
    return low;
}

battery_status_t battery_status(void)
{
    if (USBSTA&(1<<VBUS)) {
    276c:	80 91 d9 00 	lds	r24, 0x00D9
    2770:	80 fd       	sbrc	r24, 0
        /* powered */
        return battery_charging() ? CHARGING : FULL_CHARGED;
    2772:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <battery_charging>
    return (bat - BATTERY_ADC_OFFSET) * BATTERY_ADC_RESOLUTION;
}

static bool low_voltage(void) {
    static bool low = false;
    uint16_t v = battery_voltage();
    2776:	0e 94 7e 13 	call	0x26fc	; 0x26fc <battery_voltage>
    if (v < BATTERY_VOLTAGE_LOW_LIMIT) {
    277a:	8c 3a       	cpi	r24, 0xAC	; 172
    277c:	2d e0       	ldi	r18, 0x0D	; 13
    277e:	92 07       	cpc	r25, r18
    2780:	20 f4       	brcc	.+8      	; 0x278a <battery_status+0x1e>
        low = true;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	80 93 61 03 	sts	0x0361, r24
    2788:	05 c0       	rjmp	.+10     	; 0x2794 <battery_status+0x28>
    } else if (v > BATTERY_VOLTAGE_LOW_RECOVERY) {
    278a:	85 37       	cpi	r24, 0x75	; 117
    278c:	9e 40       	sbci	r25, 0x0E	; 14
    278e:	10 f0       	brcs	.+4      	; 0x2794 <battery_status+0x28>
        low = false;
    2790:	10 92 61 03 	sts	0x0361, r1
    if (USBSTA&(1<<VBUS)) {
        /* powered */
        return battery_charging() ? CHARGING : FULL_CHARGED;
    } else {
        /* not powered */
        return low_voltage() ? LOW_VOLTAGE : DISCHARGING;
    2794:	80 91 61 03 	lds	r24, 0x0361
    2798:	88 23       	and	r24, r24
    279a:	11 f0       	breq	.+4      	; 0x27a0 <battery_status+0x34>
    279c:	83 e0       	ldi	r24, 0x03	; 3
    279e:	08 95       	ret
    27a0:	82 e0       	ldi	r24, 0x02	; 2
    }
}
    27a2:	08 95       	ret

000027a4 <sendchar_func>:
#include "wait.h"
#include "suspend.h"

static int8_t sendchar_func(uint8_t c)
{
    sendchar(c);    // LUFA
    27a4:	0e 94 5d 14 	call	0x28ba	; 0x28ba <sendchar>
    return 0;
}
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	08 95       	ret

000027ac <main>:

static void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    27ac:	84 b7       	in	r24, 0x34	; 52
    27ae:	87 7f       	andi	r24, 0xF7	; 247
    27b0:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    27b2:	88 e1       	ldi	r24, 0x18	; 24
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	80 93 60 00 	sts	0x0060, r24
    27bc:	10 92 60 00 	sts	0x0060, r1
    27c0:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	80 e8       	ldi	r24, 0x80	; 128
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	80 93 61 00 	sts	0x0061, r24
    27ce:	90 93 61 00 	sts	0x0061, r25
    27d2:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    27d4:	0e 94 c4 18 	call	0x3188	; 0x3188 <USB_Disable>

    USB_Init();
    27d8:	0e 94 2b 19 	call	0x3256	; 0x3256 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    27dc:	80 91 e2 00 	lds	r24, 0x00E2
    27e0:	84 60       	ori	r24, 0x04	; 4
    27e2:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar_func);
    27e6:	82 ed       	ldi	r24, 0xD2	; 210
    27e8:	93 e1       	ldi	r25, 0x13	; 19
    27ea:	0e 94 df 27 	call	0x4fbe	; 0x4fbe <print_set_sendchar>
   
	// RN-42 Power Mosfet
        DDRD  |= (1<<PD4);
    27ee:	54 9a       	sbi	0x0a, 4	; 10
        PORTD &= ~(1<<PD4);
    27f0:	5c 98       	cbi	0x0b, 4	; 11
	
	// Fast Charge NPN, inital low
        DDRE  |= (1<<PE4);
    27f2:	6c 9a       	sbi	0x0d, 4	; 13
        PORTE &= ~(1<<PE4);
    27f4:	74 98       	cbi	0x0e, 4	; 14
	
	// USB power detect pin    
	DDRB &= ~(1<<4);
    27f6:	24 98       	cbi	0x04, 4	; 4

int main(void)  __attribute__ ((weak));
int main(void)
{
    SetupHardware();
    sei();
    27f8:	78 94       	sei
    27fa:	8f ef       	ldi	r24, 0xFF	; 255
    27fc:	08 c0       	rjmp	.+16     	; 0x280e <main+0x62>
    27fe:	ef e3       	ldi	r30, 0x3F	; 63
    2800:	ff e1       	ldi	r31, 0x1F	; 31
    2802:	31 97       	sbiw	r30, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <main+0x56>
    2806:	00 c0       	rjmp	.+0      	; 0x2808 <main+0x5c>
    2808:	00 00       	nop

    /* wait for USB startup to get ready for debug output */
    uint8_t timeout = 255;  // timeout when USB is not available(Bluetooth)
    while (timeout-- && USB_DeviceState != DEVICE_STATE_Configured) {
    280a:	88 23       	and	r24, r24
    280c:	29 f0       	breq	.+10     	; 0x2818 <main+0x6c>
    280e:	90 91 f6 03 	lds	r25, 0x03F6
    2812:	81 50       	subi	r24, 0x01	; 1
    2814:	94 30       	cpi	r25, 0x04	; 4
    2816:	99 f7       	brne	.-26     	; 0x27fe <main+0x52>
        ;
#else
        USB_USBTask();
#endif
    }
    print("\nUSB init\n");
    2818:	88 e3       	ldi	r24, 0x38	; 56
    281a:	97 e0       	ldi	r25, 0x07	; 7
    281c:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>

    rn42_init();
    2820:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <rn42_init>
    rn42_task_init();
    2824:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <rn42_task_init>
    print("RN-42 init\n");
    2828:	83 e4       	ldi	r24, 0x43	; 67
    282a:	97 e0       	ldi	r25, 0x07	; 7
    282c:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>

    /* init modules */
    keyboard_init();
    2830:	0e 94 66 1c 	call	0x38cc	; 0x38cc <keyboard_init>

    if (!(PINB & (1<<4))) {
    2834:	1c 99       	sbic	0x03, 4	; 3
    2836:	05 c0       	rjmp	.+10     	; 0x2842 <main+0x96>
        host_set_driver(&rn42_driver);
    2838:	8b e0       	ldi	r24, 0x0B	; 11
    283a:	91 e0       	ldi	r25, 0x01	; 1
    283c:	0e 94 ce 1b 	call	0x379c	; 0x379c <host_set_driver>
    2840:	0a c0       	rjmp	.+20     	; 0x2856 <main+0xaa>
    } else {
        PORTD |= (1<<PD4);
    2842:	5c 9a       	sbi	0x0b, 4	; 11
        host_set_driver(&lufa_driver);
    2844:	87 e1       	ldi	r24, 0x17	; 23
    2846:	91 e0       	ldi	r25, 0x01	; 1
    2848:	0e 94 ce 1b 	call	0x379c	; 0x379c <host_set_driver>
	      if (USB_DeviceState != DEVICE_STATE_Configured) {
    284c:	80 91 f6 03 	lds	r24, 0x03F6
    2850:	84 30       	cpi	r24, 0x04	; 4
    2852:	09 f0       	breq	.+2      	; 0x2856 <main+0xaa>
		    // USB plugged in, but not configured: assuming charger/fast charge.
		    // TODO: Key combo to activate BT module and switch driver.
		    PORTE |= (1<<PE4);
    2854:	74 9a       	sbi	0x0e, 4	; 14

#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start\n");
    2856:	8f e4       	ldi	r24, 0x4F	; 79
    2858:	97 e0       	ldi	r25, 0x07	; 7
    285a:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    285e:	1d c0       	rjmp	.+58     	; 0x289a <main+0xee>
    while (1) {
        while (rn42_rts() && // RN42 is off
                USB_DeviceState == DEVICE_STATE_Suspended) {
            print("[s]");
    2860:	8f e5       	ldi	r24, 0x5F	; 95
    2862:	97 e0       	ldi	r25, 0x07	; 7
    2864:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
            matrix_power_down();
    2868:	0e 94 48 28 	call	0x5090	; 0x5090 <matrix_power_down>
            suspend_power_down();
    286c:	0e 94 21 28 	call	0x5042	; 0x5042 <suspend_power_down>
            suspend_power_down();
    2870:	0e 94 21 28 	call	0x5042	; 0x5042 <suspend_power_down>
            suspend_power_down();
    2874:	0e 94 21 28 	call	0x5042	; 0x5042 <suspend_power_down>
            suspend_power_down();
    2878:	0e 94 21 28 	call	0x5042	; 0x5042 <suspend_power_down>
            suspend_power_down();
    287c:	0e 94 21 28 	call	0x5042	; 0x5042 <suspend_power_down>
            suspend_power_down();
    2880:	0e 94 21 28 	call	0x5042	; 0x5042 <suspend_power_down>
            suspend_power_down();
    2884:	0e 94 21 28 	call	0x5042	; 0x5042 <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    2888:	80 91 f4 03 	lds	r24, 0x03F4
    288c:	88 23       	and	r24, r24
    288e:	29 f0       	breq	.+10     	; 0x289a <main+0xee>
    2890:	0e 94 49 28 	call	0x5092	; 0x5092 <suspend_wakeup_condition>
    2894:	81 11       	cpse	r24, r1
                    USB_Device_SendRemoteWakeup();
    2896:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <USB_Device_SendRemoteWakeup>
    sleep_led_init();
#endif

    print("Keyboard start\n");
    while (1) {
        while (rn42_rts() && // RN42 is off
    289a:	0e 94 6d 0c 	call	0x18da	; 0x18da <rn42_rts>
    289e:	88 23       	and	r24, r24
    28a0:	21 f0       	breq	.+8      	; 0x28aa <main+0xfe>
                USB_DeviceState == DEVICE_STATE_Suspended) {
    28a2:	80 91 f6 03 	lds	r24, 0x03F6
    sleep_led_init();
#endif

    print("Keyboard start\n");
    while (1) {
        while (rn42_rts() && // RN42 is off
    28a6:	85 30       	cpi	r24, 0x05	; 5
    28a8:	d9 f2       	breq	.-74     	; 0x2860 <main+0xb4>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
                    USB_Device_SendRemoteWakeup();
            }
        }

        keyboard_task();
    28aa:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif

        rn42_task();
    28ae:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <rn42_task>
    }
    28b2:	f3 cf       	rjmp	.-26     	; 0x289a <main+0xee>

000028b4 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    28b4:	80 91 6d 03 	lds	r24, 0x036D
    28b8:	08 95       	ret

000028ba <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    28ba:	9f b7       	in	r25, 0x3f	; 63
    28bc:	f8 94       	cli
    28be:	10 92 64 03 	sts	0x0364, r1
    28c2:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    28c4:	90 91 f6 03 	lds	r25, 0x03F6
    28c8:	94 30       	cpi	r25, 0x04	; 4
    28ca:	09 f0       	breq	.+2      	; 0x28ce <sendchar+0x14>
    28cc:	58 c0       	rjmp	.+176    	; 0x297e <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    28ce:	90 91 e9 00 	lds	r25, 0x00E9
    28d2:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    28d4:	20 91 ec 00 	lds	r18, 0x00EC
    28d8:	20 ff       	sbrs	r18, 0
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <sendchar+0x26>
    28dc:	20 e8       	ldi	r18, 0x80	; 128
    28de:	01 c0       	rjmp	.+2      	; 0x28e2 <sendchar+0x28>
    28e0:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    28e2:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    28e4:	94 e0       	ldi	r25, 0x04	; 4
    28e6:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    28ea:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    28ee:	90 ff       	sbrs	r25, 0
    28f0:	43 c0       	rjmp	.+134    	; 0x2978 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    28f2:	90 91 ee 00 	lds	r25, 0x00EE
    28f6:	97 ff       	sbrs	r25, 7
    28f8:	3f c0       	rjmp	.+126    	; 0x2978 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    28fa:	90 91 6e 03 	lds	r25, 0x036E
    28fe:	99 23       	and	r25, r25
    2900:	21 f0       	breq	.+8      	; 0x290a <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2902:	90 91 e8 00 	lds	r25, 0x00E8
    2906:	95 ff       	sbrs	r25, 5
    2908:	37 c0       	rjmp	.+110    	; 0x2978 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
    290a:	10 92 6e 03 	sts	0x036E, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    290e:	96 e0       	ldi	r25, 0x06	; 6
    2910:	14 c0       	rjmp	.+40     	; 0x293a <sendchar+0x80>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    2912:	30 91 f6 03 	lds	r19, 0x03F6
    2916:	34 30       	cpi	r19, 0x04	; 4
    2918:	79 f5       	brne	.+94     	; 0x2978 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    291a:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    291e:	35 fd       	sbrc	r19, 5
    2920:	2b c0       	rjmp	.+86     	; 0x2978 <sendchar+0xbe>
    2922:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    2924:	21 f4       	brne	.+8      	; 0x292e <sendchar+0x74>
            timeouted = true;
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	80 93 6e 03 	sts	0x036E, r24
            goto ERROR_EXIT;
    292c:	25 c0       	rjmp	.+74     	; 0x2978 <sendchar+0xbe>
    292e:	ef ec       	ldi	r30, 0xCF	; 207
    2930:	f7 e0       	ldi	r31, 0x07	; 7
    2932:	31 97       	sbiw	r30, 0x01	; 1
    2934:	f1 f7       	brne	.-4      	; 0x2932 <sendchar+0x78>
    2936:	00 c0       	rjmp	.+0      	; 0x2938 <sendchar+0x7e>
    2938:	00 00       	nop
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    293a:	30 91 e8 00 	lds	r19, 0x00E8
    }

    timeouted = false;

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    293e:	35 ff       	sbrs	r19, 5
    2940:	e8 cf       	rjmp	.-48     	; 0x2912 <sendchar+0x58>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2942:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2946:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    294a:	85 fd       	sbrc	r24, 5
    294c:	0a c0       	rjmp	.+20     	; 0x2962 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    294e:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    2952:	80 ff       	sbrs	r24, 0
    2954:	fc cf       	rjmp	.-8      	; 0x294e <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2956:	80 91 e8 00 	lds	r24, 0x00E8
    295a:	8e 77       	andi	r24, 0x7E	; 126
    295c:	80 93 e8 00 	sts	0x00E8, r24
    2960:	06 c0       	rjmp	.+12     	; 0x296e <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    2962:	8f b7       	in	r24, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	91 e0       	ldi	r25, 0x01	; 1
    2968:	90 93 64 03 	sts	0x0364, r25
    296c:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    296e:	2f 70       	andi	r18, 0x0F	; 15
    2970:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	08 95       	ret
    2978:	2f 70       	andi	r18, 0x0F	; 15
    297a:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    297e:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    2980:	08 95       	ret

00002982 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    2982:	cf 93       	push	r28
    2984:	df 93       	push	r29
    2986:	00 d0       	rcall	.+0      	; 0x2988 <send_consumer+0x6>
    2988:	1f 92       	push	r1
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    298e:	20 91 f6 03 	lds	r18, 0x03F6
    2992:	24 30       	cpi	r18, 0x04	; 4
    2994:	21 f5       	brne	.+72     	; 0x29de <send_consumer+0x5c>
        return;

    report_extra_t r = {
    2996:	23 e0       	ldi	r18, 0x03	; 3
    2998:	29 83       	std	Y+1, r18	; 0x01
    299a:	9b 83       	std	Y+3, r25	; 0x03
    299c:	8a 83       	std	Y+2, r24	; 0x02
    299e:	20 93 e9 00 	sts	0x00E9, r18
    29a2:	8f ef       	ldi	r24, 0xFF	; 255
    29a4:	06 c0       	rjmp	.+12     	; 0x29b2 <send_consumer+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    29a6:	9a e6       	ldi	r25, 0x6A	; 106
    29a8:	9a 95       	dec	r25
    29aa:	f1 f7       	brne	.-4      	; 0x29a8 <send_consumer+0x26>
    29ac:	00 c0       	rjmp	.+0      	; 0x29ae <send_consumer+0x2c>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    29ae:	88 23       	and	r24, r24
    29b0:	29 f0       	breq	.+10     	; 0x29bc <send_consumer+0x3a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    29b2:	90 91 e8 00 	lds	r25, 0x00E8
    29b6:	81 50       	subi	r24, 0x01	; 1
    29b8:	95 ff       	sbrs	r25, 5
    29ba:	f5 cf       	rjmp	.-22     	; 0x29a6 <send_consumer+0x24>
    29bc:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    29c0:	85 ff       	sbrs	r24, 5
    29c2:	0d c0       	rjmp	.+26     	; 0x29de <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    29c4:	40 e0       	ldi	r20, 0x00	; 0
    29c6:	50 e0       	ldi	r21, 0x00	; 0
    29c8:	63 e0       	ldi	r22, 0x03	; 3
    29ca:	70 e0       	ldi	r23, 0x00	; 0
    29cc:	ce 01       	movw	r24, r28
    29ce:	01 96       	adiw	r24, 0x01	; 1
    29d0:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    29d4:	80 91 e8 00 	lds	r24, 0x00E8
    29d8:	8e 77       	andi	r24, 0x7E	; 126
    29da:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	08 95       	ret

000029ea <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <send_system+0x6>
    29f0:	1f 92       	push	r1
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    29f6:	20 91 f6 03 	lds	r18, 0x03F6
    29fa:	24 30       	cpi	r18, 0x04	; 4
    29fc:	29 f5       	brne	.+74     	; 0x2a48 <send_system+0x5e>
        return;

    report_extra_t r = {
    29fe:	22 e0       	ldi	r18, 0x02	; 2
    2a00:	29 83       	std	Y+1, r18	; 0x01
    2a02:	9b 83       	std	Y+3, r25	; 0x03
    2a04:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2a06:	83 e0       	ldi	r24, 0x03	; 3
    2a08:	80 93 e9 00 	sts	0x00E9, r24
    2a0c:	8f ef       	ldi	r24, 0xFF	; 255
    2a0e:	06 c0       	rjmp	.+12     	; 0x2a1c <send_system+0x32>
    2a10:	9a e6       	ldi	r25, 0x6A	; 106
    2a12:	9a 95       	dec	r25
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <send_system+0x28>
    2a16:	00 c0       	rjmp	.+0      	; 0x2a18 <send_system+0x2e>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    2a18:	88 23       	and	r24, r24
    2a1a:	29 f0       	breq	.+10     	; 0x2a26 <send_system+0x3c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2a1c:	90 91 e8 00 	lds	r25, 0x00E8
    2a20:	81 50       	subi	r24, 0x01	; 1
    2a22:	95 ff       	sbrs	r25, 5
    2a24:	f5 cf       	rjmp	.-22     	; 0x2a10 <send_system+0x26>
    2a26:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    2a2a:	85 ff       	sbrs	r24, 5
    2a2c:	0d c0       	rjmp	.+26     	; 0x2a48 <send_system+0x5e>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	50 e0       	ldi	r21, 0x00	; 0
    2a32:	63 e0       	ldi	r22, 0x03	; 3
    2a34:	70 e0       	ldi	r23, 0x00	; 0
    2a36:	ce 01       	movw	r24, r28
    2a38:	01 96       	adiw	r24, 0x01	; 1
    2a3a:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2a3e:	80 91 e8 00 	lds	r24, 0x00E8
    2a42:	8e 77       	andi	r24, 0x7E	; 126
    2a44:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	df 91       	pop	r29
    2a50:	cf 91       	pop	r28
    2a52:	08 95       	ret

00002a54 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    2a54:	20 91 f6 03 	lds	r18, 0x03F6
    2a58:	24 30       	cpi	r18, 0x04	; 4
    2a5a:	f9 f4       	brne	.+62     	; 0x2a9a <send_mouse+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2a5c:	22 e0       	ldi	r18, 0x02	; 2
    2a5e:	20 93 e9 00 	sts	0x00E9, r18
    2a62:	2f ef       	ldi	r18, 0xFF	; 255
    2a64:	06 c0       	rjmp	.+12     	; 0x2a72 <send_mouse+0x1e>
    2a66:	3a e6       	ldi	r19, 0x6A	; 106
    2a68:	3a 95       	dec	r19
    2a6a:	f1 f7       	brne	.-4      	; 0x2a68 <send_mouse+0x14>
    2a6c:	00 c0       	rjmp	.+0      	; 0x2a6e <send_mouse+0x1a>

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    2a6e:	22 23       	and	r18, r18
    2a70:	29 f0       	breq	.+10     	; 0x2a7c <send_mouse+0x28>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2a72:	30 91 e8 00 	lds	r19, 0x00E8
    2a76:	21 50       	subi	r18, 0x01	; 1
    2a78:	35 ff       	sbrs	r19, 5
    2a7a:	f5 cf       	rjmp	.-22     	; 0x2a66 <send_mouse+0x12>
    2a7c:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    2a80:	25 ff       	sbrs	r18, 5
    2a82:	0b c0       	rjmp	.+22     	; 0x2a9a <send_mouse+0x46>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    2a84:	40 e0       	ldi	r20, 0x00	; 0
    2a86:	50 e0       	ldi	r21, 0x00	; 0
    2a88:	65 e0       	ldi	r22, 0x05	; 5
    2a8a:	70 e0       	ldi	r23, 0x00	; 0
    2a8c:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2a90:	80 91 e8 00 	lds	r24, 0x00E8
    2a94:	8e 77       	andi	r24, 0x7E	; 126
    2a96:	80 93 e8 00 	sts	0x00E8, r24
    2a9a:	08 95       	ret

00002a9c <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    2a9c:	ef 92       	push	r14
    2a9e:	ff 92       	push	r15
    2aa0:	7c 01       	movw	r14, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    2aa2:	80 91 f6 03 	lds	r24, 0x03F6
    2aa6:	84 30       	cpi	r24, 0x04	; 4
    2aa8:	41 f5       	brne	.+80     	; 0x2afa <send_keyboard+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	80 93 e9 00 	sts	0x00E9, r24
    2ab0:	8f ef       	ldi	r24, 0xFF	; 255
    2ab2:	06 c0       	rjmp	.+12     	; 0x2ac0 <send_keyboard+0x24>
    2ab4:	9a e6       	ldi	r25, 0x6A	; 106
    2ab6:	9a 95       	dec	r25
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <send_keyboard+0x1a>
    2aba:	00 c0       	rjmp	.+0      	; 0x2abc <send_keyboard+0x20>
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    2abc:	88 23       	and	r24, r24
    2abe:	29 f0       	breq	.+10     	; 0x2aca <send_keyboard+0x2e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2ac0:	90 91 e8 00 	lds	r25, 0x00E8
    2ac4:	81 50       	subi	r24, 0x01	; 1
    2ac6:	95 ff       	sbrs	r25, 5
    2ac8:	f5 cf       	rjmp	.-22     	; 0x2ab4 <send_keyboard+0x18>
    2aca:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    2ace:	85 ff       	sbrs	r24, 5
    2ad0:	14 c0       	rjmp	.+40     	; 0x2afa <send_keyboard+0x5e>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	50 e0       	ldi	r21, 0x00	; 0
    2ad6:	68 e0       	ldi	r22, 0x08	; 8
    2ad8:	70 e0       	ldi	r23, 0x00	; 0
    2ada:	c7 01       	movw	r24, r14
    2adc:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2ae0:	80 91 e8 00 	lds	r24, 0x00E8
    2ae4:	8e 77       	andi	r24, 0x7E	; 126
    2ae6:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    2aea:	88 e0       	ldi	r24, 0x08	; 8
    2aec:	f7 01       	movw	r30, r14
    2aee:	a5 e6       	ldi	r26, 0x65	; 101
    2af0:	b3 e0       	ldi	r27, 0x03	; 3
    2af2:	01 90       	ld	r0, Z+
    2af4:	0d 92       	st	X+, r0
    2af6:	8a 95       	dec	r24
    2af8:	e1 f7       	brne	.-8      	; 0x2af2 <send_keyboard+0x56>
}
    2afa:	ff 90       	pop	r15
    2afc:	ef 90       	pop	r14
    2afe:	08 95       	ret

00002b00 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    2b00:	83 e6       	ldi	r24, 0x63	; 99
    2b02:	97 e0       	ldi	r25, 0x07	; 7
    2b04:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    2b08:	80 91 f5 03 	lds	r24, 0x03F5
    2b0c:	81 11       	cpse	r24, r1
    2b0e:	09 c0       	rjmp	.+18     	; 0x2b22 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    2b10:	0e 94 c4 18 	call	0x3188	; 0x3188 <USB_Disable>
        USB_Init();
    2b14:	0e 94 2b 19 	call	0x3256	; 0x3256 <USB_Init>
    2b18:	80 91 e2 00 	lds	r24, 0x00E2
    2b1c:	84 60       	ori	r24, 0x04	; 4
    2b1e:	80 93 e2 00 	sts	0x00E2, r24
    2b22:	08 95       	ret

00002b24 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    2b24:	87 e6       	ldi	r24, 0x67	; 103
    2b26:	97 e0       	ldi	r25, 0x07	; 7
    2b28:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    2b2c:	10 92 f5 03 	sts	0x03F5, r1
    2b30:	08 95       	ret

00002b32 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    2b32:	8b e6       	ldi	r24, 0x6B	; 107
    2b34:	97 e0       	ldi	r25, 0x07	; 7
    2b36:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <xputs>

00002b3a <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    2b3a:	80 91 63 03 	lds	r24, 0x0363
    2b3e:	8f 5f       	subi	r24, 0xFF	; 255
    2b40:	80 93 63 03 	sts	0x0363, r24
    2b44:	62 e3       	ldi	r22, 0x32	; 50
    2b46:	0e 94 81 31 	call	0x6302	; 0x6302 <__udivmodqi4>
    2b4a:	91 11       	cpse	r25, r1
    2b4c:	35 c0       	rjmp	.+106    	; 0x2bb8 <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    2b4e:	10 92 63 03 	sts	0x0363, r1

    if (!console_flush) return;
    2b52:	80 91 64 03 	lds	r24, 0x0364
    2b56:	88 23       	and	r24, r24
    2b58:	79 f1       	breq	.+94     	; 0x2bb8 <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    2b5a:	80 91 f6 03 	lds	r24, 0x03F6
    2b5e:	84 30       	cpi	r24, 0x04	; 4
    2b60:	49 f5       	brne	.+82     	; 0x2bb4 <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2b62:	80 91 e9 00 	lds	r24, 0x00E9
    2b66:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2b68:	90 91 ec 00 	lds	r25, 0x00EC
    2b6c:	90 ff       	sbrs	r25, 0
    2b6e:	02 c0       	rjmp	.+4      	; 0x2b74 <EVENT_USB_Device_StartOfFrame+0x3a>
    2b70:	90 e8       	ldi	r25, 0x80	; 128
    2b72:	01 c0       	rjmp	.+2      	; 0x2b76 <EVENT_USB_Device_StartOfFrame+0x3c>
    2b74:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2b76:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2b78:	84 e0       	ldi	r24, 0x04	; 4
    2b7a:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2b7e:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    2b82:	80 ff       	sbrs	r24, 0
    2b84:	14 c0       	rjmp	.+40     	; 0x2bae <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    2b86:	80 91 ee 00 	lds	r24, 0x00EE
    2b8a:	87 fd       	sbrc	r24, 7
    2b8c:	03 c0       	rjmp	.+6      	; 0x2b94 <EVENT_USB_Device_StartOfFrame+0x5a>
    2b8e:	0f c0       	rjmp	.+30     	; 0x2bae <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2b90:	10 92 f1 00 	sts	0x00F1, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2b94:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    2b98:	85 fd       	sbrc	r24, 5
    2b9a:	fa cf       	rjmp	.-12     	; 0x2b90 <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2b9c:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    2ba0:	80 ff       	sbrs	r24, 0
    2ba2:	05 c0       	rjmp	.+10     	; 0x2bae <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2ba4:	80 91 e8 00 	lds	r24, 0x00E8
    2ba8:	8e 77       	andi	r24, 0x7E	; 126
    2baa:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2bae:	9f 70       	andi	r25, 0x0F	; 15
    2bb0:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    2bb4:	10 92 64 03 	sts	0x0364, r1
    2bb8:	08 95       	ret

00002bba <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2bba:	42 e0       	ldi	r20, 0x02	; 2
    2bbc:	61 ec       	ldi	r22, 0xC1	; 193
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	0e 94 3a 18 	call	0x3074	; 0x3074 <Endpoint_ConfigureEndpoint_Prv>
    2bc4:	42 e0       	ldi	r20, 0x02	; 2
    2bc6:	61 ec       	ldi	r22, 0xC1	; 193
    2bc8:	82 e0       	ldi	r24, 0x02	; 2
    2bca:	0e 94 3a 18 	call	0x3074	; 0x3074 <Endpoint_ConfigureEndpoint_Prv>
    2bce:	42 e0       	ldi	r20, 0x02	; 2
    2bd0:	61 ec       	ldi	r22, 0xC1	; 193
    2bd2:	83 e0       	ldi	r24, 0x03	; 3
    2bd4:	0e 94 3a 18 	call	0x3074	; 0x3074 <Endpoint_ConfigureEndpoint_Prv>
    2bd8:	42 e2       	ldi	r20, 0x22	; 34
    2bda:	61 ec       	ldi	r22, 0xC1	; 193
    2bdc:	84 e0       	ldi	r24, 0x04	; 4
    2bde:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <Endpoint_ConfigureEndpoint_Prv>

00002be2 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    2be2:	80 91 f8 03 	lds	r24, 0x03F8
    2be6:	83 30       	cpi	r24, 0x03	; 3
    2be8:	09 f4       	brne	.+2      	; 0x2bec <EVENT_USB_Device_ControlRequest+0xa>
    2bea:	54 c0       	rjmp	.+168    	; 0x2c94 <EVENT_USB_Device_ControlRequest+0xb2>
    2bec:	30 f4       	brcc	.+12     	; 0x2bfa <EVENT_USB_Device_ControlRequest+0x18>
    2bee:	81 30       	cpi	r24, 0x01	; 1
    2bf0:	71 f0       	breq	.+28     	; 0x2c0e <EVENT_USB_Device_ControlRequest+0x2c>
    2bf2:	82 30       	cpi	r24, 0x02	; 2
    2bf4:	09 f0       	breq	.+2      	; 0x2bf8 <EVENT_USB_Device_ControlRequest+0x16>
    2bf6:	a5 c0       	rjmp	.+330    	; 0x2d42 <EVENT_USB_Device_ControlRequest+0x160>
    2bf8:	8c c0       	rjmp	.+280    	; 0x2d12 <EVENT_USB_Device_ControlRequest+0x130>
    2bfa:	8a 30       	cpi	r24, 0x0A	; 10
    2bfc:	09 f4       	brne	.+2      	; 0x2c00 <EVENT_USB_Device_ControlRequest+0x1e>
    2bfe:	79 c0       	rjmp	.+242    	; 0x2cf2 <EVENT_USB_Device_ControlRequest+0x110>
    2c00:	8b 30       	cpi	r24, 0x0B	; 11
    2c02:	09 f4       	brne	.+2      	; 0x2c06 <EVENT_USB_Device_ControlRequest+0x24>
    2c04:	5f c0       	rjmp	.+190    	; 0x2cc4 <EVENT_USB_Device_ControlRequest+0xe2>
    2c06:	89 30       	cpi	r24, 0x09	; 9
    2c08:	09 f0       	breq	.+2      	; 0x2c0c <EVENT_USB_Device_ControlRequest+0x2a>
    2c0a:	9b c0       	rjmp	.+310    	; 0x2d42 <EVENT_USB_Device_ControlRequest+0x160>
    2c0c:	20 c0       	rjmp	.+64     	; 0x2c4e <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2c0e:	80 91 f7 03 	lds	r24, 0x03F7
    2c12:	81 3a       	cpi	r24, 0xA1	; 161
    2c14:	09 f0       	breq	.+2      	; 0x2c18 <EVENT_USB_Device_ControlRequest+0x36>
    2c16:	95 c0       	rjmp	.+298    	; 0x2d42 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2c18:	80 91 e8 00 	lds	r24, 0x00E8
    2c1c:	87 7f       	andi	r24, 0xF7	; 247
    2c1e:	80 93 e8 00 	sts	0x00E8, r24
    2c22:	80 91 fb 03 	lds	r24, 0x03FB
    2c26:	90 91 fc 03 	lds	r25, 0x03FC
    2c2a:	89 2b       	or	r24, r25
    2c2c:	21 f0       	breq	.+8      	; 0x2c36 <EVENT_USB_Device_ControlRequest+0x54>
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    2c2e:	60 e0       	ldi	r22, 0x00	; 0
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	03 c0       	rjmp	.+6      	; 0x2c3c <EVENT_USB_Device_ControlRequest+0x5a>
    2c36:	68 e0       	ldi	r22, 0x08	; 8
    2c38:	85 e6       	ldi	r24, 0x65	; 101
    2c3a:	93 e0       	ldi	r25, 0x03	; 3
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    2c3c:	70 e0       	ldi	r23, 0x00	; 0
    2c3e:	0e 94 7f 17 	call	0x2efe	; 0x2efe <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2c42:	80 91 e8 00 	lds	r24, 0x00E8
    2c46:	8b 77       	andi	r24, 0x7B	; 123
    2c48:	80 93 e8 00 	sts	0x00E8, r24
    2c4c:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2c4e:	80 91 f7 03 	lds	r24, 0x03F7
    2c52:	81 32       	cpi	r24, 0x21	; 33
    2c54:	09 f0       	breq	.+2      	; 0x2c58 <EVENT_USB_Device_ControlRequest+0x76>
    2c56:	75 c0       	rjmp	.+234    	; 0x2d42 <EVENT_USB_Device_ControlRequest+0x160>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    2c58:	80 91 fb 03 	lds	r24, 0x03FB
    2c5c:	90 91 fc 03 	lds	r25, 0x03FC
    2c60:	89 2b       	or	r24, r25
    2c62:	09 f0       	breq	.+2      	; 0x2c66 <EVENT_USB_Device_ControlRequest+0x84>
    2c64:	6e c0       	rjmp	.+220    	; 0x2d42 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2c66:	80 91 e8 00 	lds	r24, 0x00E8
    2c6a:	87 7f       	andi	r24, 0xF7	; 247
    2c6c:	80 93 e8 00 	sts	0x00E8, r24
    2c70:	05 c0       	rjmp	.+10     	; 0x2c7c <EVENT_USB_Device_ControlRequest+0x9a>
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    2c72:	80 91 f6 03 	lds	r24, 0x03F6
    2c76:	88 23       	and	r24, r24
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <EVENT_USB_Device_ControlRequest+0x9a>
    2c7a:	63 c0       	rjmp	.+198    	; 0x2d42 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2c7c:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    2c80:	82 ff       	sbrs	r24, 2
    2c82:	f7 cf       	rjmp	.-18     	; 0x2c72 <EVENT_USB_Device_ControlRequest+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2c84:	80 91 f1 00 	lds	r24, 0x00F1
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    2c88:	80 93 6d 03 	sts	0x036D, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2c8c:	80 91 e8 00 	lds	r24, 0x00E8
    2c90:	8b 77       	andi	r24, 0x7B	; 123
    2c92:	53 c0       	rjmp	.+166    	; 0x2d3a <EVENT_USB_Device_ControlRequest+0x158>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2c94:	80 91 f7 03 	lds	r24, 0x03F7
    2c98:	81 3a       	cpi	r24, 0xA1	; 161
    2c9a:	09 f0       	breq	.+2      	; 0x2c9e <EVENT_USB_Device_ControlRequest+0xbc>
    2c9c:	52 c0       	rjmp	.+164    	; 0x2d42 <EVENT_USB_Device_ControlRequest+0x160>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    2c9e:	80 91 fb 03 	lds	r24, 0x03FB
    2ca2:	90 91 fc 03 	lds	r25, 0x03FC
    2ca6:	89 2b       	or	r24, r25
    2ca8:	09 f0       	breq	.+2      	; 0x2cac <EVENT_USB_Device_ControlRequest+0xca>
    2caa:	4b c0       	rjmp	.+150    	; 0x2d42 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2cac:	80 91 e8 00 	lds	r24, 0x00E8
    2cb0:	87 7f       	andi	r24, 0xF7	; 247
    2cb2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2cb6:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    2cba:	80 ff       	sbrs	r24, 0
    2cbc:	fc cf       	rjmp	.-8      	; 0x2cb6 <EVENT_USB_Device_ControlRequest+0xd4>
                    Endpoint_Write_8(keyboard_protocol);
    2cbe:	80 91 21 01 	lds	r24, 0x0121
    2cc2:	36 c0       	rjmp	.+108    	; 0x2d30 <EVENT_USB_Device_ControlRequest+0x14e>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2cc4:	80 91 f7 03 	lds	r24, 0x03F7
    2cc8:	81 32       	cpi	r24, 0x21	; 33
    2cca:	d9 f5       	brne	.+118    	; 0x2d42 <EVENT_USB_Device_ControlRequest+0x160>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    2ccc:	80 91 fb 03 	lds	r24, 0x03FB
    2cd0:	90 91 fc 03 	lds	r25, 0x03FC
    2cd4:	89 2b       	or	r24, r25
    2cd6:	a9 f5       	brne	.+106    	; 0x2d42 <EVENT_USB_Device_ControlRequest+0x160>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2cd8:	80 91 e8 00 	lds	r24, 0x00E8
    2cdc:	87 7f       	andi	r24, 0xF7	; 247
    2cde:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    2ce2:	0e 94 71 18 	call	0x30e2	; 0x30e2 <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    2ce6:	80 91 f9 03 	lds	r24, 0x03F9
    2cea:	80 93 21 01 	sts	0x0121, r24
                    clear_keyboard();
    2cee:	0c 94 ea 21 	jmp	0x43d4	; 0x43d4 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2cf2:	80 91 f7 03 	lds	r24, 0x03F7
    2cf6:	81 32       	cpi	r24, 0x21	; 33
    2cf8:	21 f5       	brne	.+72     	; 0x2d42 <EVENT_USB_Device_ControlRequest+0x160>
    2cfa:	80 91 e8 00 	lds	r24, 0x00E8
    2cfe:	87 7f       	andi	r24, 0xF7	; 247
    2d00:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    2d04:	0e 94 71 18 	call	0x30e2	; 0x30e2 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    2d08:	80 91 fa 03 	lds	r24, 0x03FA
    2d0c:	80 93 62 03 	sts	0x0362, r24
    2d10:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2d12:	80 91 f7 03 	lds	r24, 0x03F7
    2d16:	81 3a       	cpi	r24, 0xA1	; 161
    2d18:	a1 f4       	brne	.+40     	; 0x2d42 <EVENT_USB_Device_ControlRequest+0x160>
    2d1a:	80 91 e8 00 	lds	r24, 0x00E8
    2d1e:	87 7f       	andi	r24, 0xF7	; 247
    2d20:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2d24:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    2d28:	80 ff       	sbrs	r24, 0
    2d2a:	fc cf       	rjmp	.-8      	; 0x2d24 <EVENT_USB_Device_ControlRequest+0x142>
                Endpoint_Write_8(keyboard_idle);
    2d2c:	80 91 62 03 	lds	r24, 0x0362
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2d30:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2d34:	80 91 e8 00 	lds	r24, 0x00E8
    2d38:	8e 77       	andi	r24, 0x7E	; 126
    2d3a:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    2d3e:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <Endpoint_ClearStatusStage>
    2d42:	08 95       	ret

00002d44 <hook_usb_suspend_entry>:
__attribute__((weak))
void hook_late_init(void) {}

 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
    2d44:	08 95       	ret

00002d46 <EVENT_USB_Device_Suspend>:
    print("[R]");
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    2d46:	8f e6       	ldi	r24, 0x6F	; 111
    2d48:	97 e0       	ldi	r25, 0x07	; 7
    2d4a:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    hook_usb_suspend_entry();
    2d4e:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <hook_usb_suspend_entry>

00002d52 <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    2d52:	0c 94 5e 28 	jmp	0x50bc	; 0x50bc <suspend_wakeup_init>

00002d56 <EVENT_USB_Device_WakeUp>:
    hook_usb_suspend_entry();
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    2d56:	83 e7       	ldi	r24, 0x73	; 115
    2d58:	97 e0       	ldi	r25, 0x07	; 7
    2d5a:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    hook_usb_wakeup();
    2d5e:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <hook_usb_wakeup>

00002d62 <CALLBACK_USB_GetDescriptor>:
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
    2d62:	29 2f       	mov	r18, r25
    2d64:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    2d66:	23 30       	cpi	r18, 0x03	; 3
    2d68:	31 05       	cpc	r19, r1
    2d6a:	b1 f0       	breq	.+44     	; 0x2d98 <CALLBACK_USB_GetDescriptor+0x36>
    2d6c:	4c f4       	brge	.+18     	; 0x2d80 <CALLBACK_USB_GetDescriptor+0x1e>
    2d6e:	21 30       	cpi	r18, 0x01	; 1
    2d70:	31 05       	cpc	r19, r1
    2d72:	09 f4       	brne	.+2      	; 0x2d76 <CALLBACK_USB_GetDescriptor+0x14>
    2d74:	4d c0       	rjmp	.+154    	; 0x2e10 <CALLBACK_USB_GetDescriptor+0xae>
    2d76:	22 30       	cpi	r18, 0x02	; 2
    2d78:	31 05       	cpc	r19, r1
    2d7a:	09 f0       	breq	.+2      	; 0x2d7e <CALLBACK_USB_GetDescriptor+0x1c>
    2d7c:	4e c0       	rjmp	.+156    	; 0x2e1a <CALLBACK_USB_GetDescriptor+0xb8>
    2d7e:	07 c0       	rjmp	.+14     	; 0x2d8e <CALLBACK_USB_GetDescriptor+0x2c>
    2d80:	21 32       	cpi	r18, 0x21	; 33
    2d82:	31 05       	cpc	r19, r1
    2d84:	41 f1       	breq	.+80     	; 0x2dd6 <CALLBACK_USB_GetDescriptor+0x74>
    2d86:	22 32       	cpi	r18, 0x22	; 34
    2d88:	31 05       	cpc	r19, r1
    2d8a:	91 f1       	breq	.+100    	; 0x2df0 <CALLBACK_USB_GetDescriptor+0x8e>
    2d8c:	46 c0       	rjmp	.+140    	; 0x2e1a <CALLBACK_USB_GetDescriptor+0xb8>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    2d8e:	e4 e7       	ldi	r30, 0x74	; 116
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    2d92:	85 eb       	ldi	r24, 0xB5	; 181
    2d94:	97 e0       	ldi	r25, 0x07	; 7
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    2d96:	45 c0       	rjmp	.+138    	; 0x2e22 <CALLBACK_USB_GetDescriptor+0xc0>
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
    2d98:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    2d9a:	81 30       	cpi	r24, 0x01	; 1
    2d9c:	91 05       	cpc	r25, r1
    2d9e:	69 f0       	breq	.+26     	; 0x2dba <CALLBACK_USB_GetDescriptor+0x58>
    2da0:	82 30       	cpi	r24, 0x02	; 2
    2da2:	91 05       	cpc	r25, r1
    2da4:	89 f0       	breq	.+34     	; 0x2dc8 <CALLBACK_USB_GetDescriptor+0x66>
    2da6:	89 2b       	or	r24, r25
    2da8:	09 f0       	breq	.+2      	; 0x2dac <CALLBACK_USB_GetDescriptor+0x4a>
    2daa:	37 c0       	rjmp	.+110    	; 0x2e1a <CALLBACK_USB_GetDescriptor+0xb8>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    2dac:	e1 eb       	ldi	r30, 0xB1	; 177
    2dae:	f7 e0       	ldi	r31, 0x07	; 7
    2db0:	e4 91       	lpm	r30, Z
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
            {
                case 0x00:
                    Address = &LanguageString;
    2db4:	81 eb       	ldi	r24, 0xB1	; 177
    2db6:	97 e0       	ldi	r25, 0x07	; 7
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
    2db8:	34 c0       	rjmp	.+104    	; 0x2e22 <CALLBACK_USB_GetDescriptor+0xc0>
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    2dba:	e5 e9       	ldi	r30, 0x95	; 149
    2dbc:	f7 e0       	ldi	r31, 0x07	; 7
    2dbe:	e4 91       	lpm	r30, Z
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case 0x01:
                    Address = &ManufacturerString;
    2dc2:	85 e9       	ldi	r24, 0x95	; 149
    2dc4:	97 e0       	ldi	r25, 0x07	; 7
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
    2dc6:	2d c0       	rjmp	.+90     	; 0x2e22 <CALLBACK_USB_GetDescriptor+0xc0>
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    2dc8:	e7 e7       	ldi	r30, 0x77	; 119
    2dca:	f7 e0       	ldi	r31, 0x07	; 7
    2dcc:	e4 91       	lpm	r30, Z
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    2dd0:	87 e7       	ldi	r24, 0x77	; 119
    2dd2:	97 e0       	ldi	r25, 0x07	; 7
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    2dd4:	26 c0       	rjmp	.+76     	; 0x2e22 <CALLBACK_USB_GetDescriptor+0xc0>
    2dd6:	64 30       	cpi	r22, 0x04	; 4
    2dd8:	00 f5       	brcc	.+64     	; 0x2e1a <CALLBACK_USB_GetDescriptor+0xb8>
    2dda:	e6 2f       	mov	r30, r22
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	ee 0f       	add	r30, r30
    2de0:	ff 1f       	adc	r31, r31
    2de2:	e0 51       	subi	r30, 0x10	; 16
    2de4:	fe 4f       	sbci	r31, 0xFE	; 254
    2de6:	80 81       	ld	r24, Z
    2de8:	91 81       	ldd	r25, Z+1	; 0x01
    2dea:	e9 e0       	ldi	r30, 0x09	; 9
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	19 c0       	rjmp	.+50     	; 0x2e22 <CALLBACK_USB_GetDescriptor+0xc0>
    2df0:	64 30       	cpi	r22, 0x04	; 4
    2df2:	98 f4       	brcc	.+38     	; 0x2e1a <CALLBACK_USB_GetDescriptor+0xb8>
    2df4:	e6 2f       	mov	r30, r22
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	df 01       	movw	r26, r30
    2dfa:	aa 0f       	add	r26, r26
    2dfc:	bb 1f       	adc	r27, r27
    2dfe:	a8 50       	subi	r26, 0x08	; 8
    2e00:	be 4f       	sbci	r27, 0xFE	; 254
    2e02:	8d 91       	ld	r24, X+
    2e04:	9c 91       	ld	r25, X
            break;
    }

    *DescriptorAddress = Address;
    return Size;
}
    2e06:	e0 50       	subi	r30, 0x00	; 0
    2e08:	fe 4f       	sbci	r31, 0xFE	; 254
    2e0a:	e0 81       	ld	r30, Z
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	09 c0       	rjmp	.+18     	; 0x2e22 <CALLBACK_USB_GetDescriptor+0xc0>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    2e10:	e2 e1       	ldi	r30, 0x12	; 18
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    2e14:	89 e2       	ldi	r24, 0x29	; 41
    2e16:	98 e0       	ldi	r25, 0x08	; 8
    2e18:	04 c0       	rjmp	.+8      	; 0x2e22 <CALLBACK_USB_GetDescriptor+0xc0>
    2e1a:	e0 e0       	ldi	r30, 0x00	; 0
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	90 e0       	ldi	r25, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    2e22:	da 01       	movw	r26, r20
    2e24:	8d 93       	st	X+, r24
    2e26:	9c 93       	st	X, r25
    return Size;
}
    2e28:	cf 01       	movw	r24, r30
    2e2a:	08 95       	ret

00002e2c <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2e2c:	8c e0       	ldi	r24, 0x0C	; 12
    2e2e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2e30:	8e e0       	ldi	r24, 0x0E	; 14
    2e32:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    2e34:	09 b4       	in	r0, 0x29	; 41
    2e36:	00 fe       	sbrs	r0, 0
    2e38:	fd cf       	rjmp	.-6      	; 0x2e34 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2e3a:	80 91 d8 00 	lds	r24, 0x00D8
    2e3e:	8f 7d       	andi	r24, 0xDF	; 223
    2e40:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    2e44:	80 91 e0 00 	lds	r24, 0x00E0
    2e48:	82 60       	ori	r24, 0x02	; 2
    2e4a:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    2e4e:	80 91 e0 00 	lds	r24, 0x00E0
    2e52:	81 fd       	sbrc	r24, 1
    2e54:	fc cf       	rjmp	.-8      	; 0x2e4e <USB_Device_SendRemoteWakeup+0x22>
}
    2e56:	08 95       	ret

00002e58 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    2e58:	8f 92       	push	r8
    2e5a:	9f 92       	push	r9
    2e5c:	af 92       	push	r10
    2e5e:	bf 92       	push	r11
    2e60:	cf 92       	push	r12
    2e62:	df 92       	push	r13
    2e64:	ef 92       	push	r14
    2e66:	ff 92       	push	r15
    2e68:	cf 93       	push	r28
    2e6a:	5c 01       	movw	r10, r24
    2e6c:	6b 01       	movw	r12, r22
    2e6e:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    2e70:	0e 94 92 18 	call	0x3124	; 0x3124 <Endpoint_WaitUntilReady>
    2e74:	c8 2f       	mov	r28, r24
    2e76:	81 11       	cpse	r24, r1
    2e78:	37 c0       	rjmp	.+110    	; 0x2ee8 <Endpoint_Write_Stream_LE+0x90>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    2e7a:	e1 14       	cp	r14, r1
    2e7c:	f1 04       	cpc	r15, r1
    2e7e:	39 f0       	breq	.+14     	; 0x2e8e <Endpoint_Write_Stream_LE+0x36>
	{
		Length -= *BytesProcessed;
    2e80:	f7 01       	movw	r30, r14
    2e82:	20 81       	ld	r18, Z
    2e84:	31 81       	ldd	r19, Z+1	; 0x01
    2e86:	c2 1a       	sub	r12, r18
    2e88:	d3 0a       	sbc	r13, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    2e8a:	a2 0e       	add	r10, r18
    2e8c:	b3 1e       	adc	r11, r19

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    2e8e:	81 2c       	mov	r8, r1
    2e90:	91 2c       	mov	r9, r1
    2e92:	25 c0       	rjmp	.+74     	; 0x2ede <Endpoint_Write_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    2e94:	80 91 e8 00 	lds	r24, 0x00E8
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    2e98:	85 fd       	sbrc	r24, 5
    2e9a:	16 c0       	rjmp	.+44     	; 0x2ec8 <Endpoint_Write_Stream_LE+0x70>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2e9c:	80 91 e8 00 	lds	r24, 0x00E8
    2ea0:	8e 77       	andi	r24, 0x7E	; 126
    2ea2:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    2ea6:	e1 14       	cp	r14, r1
    2ea8:	f1 04       	cpc	r15, r1
    2eaa:	49 f0       	breq	.+18     	; 0x2ebe <Endpoint_Write_Stream_LE+0x66>
			{
				*BytesProcessed += BytesInTransfer;
    2eac:	f7 01       	movw	r30, r14
    2eae:	80 81       	ld	r24, Z
    2eb0:	91 81       	ldd	r25, Z+1	; 0x01
    2eb2:	88 0d       	add	r24, r8
    2eb4:	99 1d       	adc	r25, r9
    2eb6:	91 83       	std	Z+1, r25	; 0x01
    2eb8:	80 83       	st	Z, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    2eba:	c5 e0       	ldi	r28, 0x05	; 5
    2ebc:	15 c0       	rjmp	.+42     	; 0x2ee8 <Endpoint_Write_Stream_LE+0x90>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    2ebe:	0e 94 92 18 	call	0x3124	; 0x3124 <Endpoint_WaitUntilReady>
    2ec2:	88 23       	and	r24, r24
    2ec4:	61 f0       	breq	.+24     	; 0x2ede <Endpoint_Write_Stream_LE+0x86>
    2ec6:	0f c0       	rjmp	.+30     	; 0x2ee6 <Endpoint_Write_Stream_LE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    2ec8:	f5 01       	movw	r30, r10
    2eca:	81 91       	ld	r24, Z+
    2ecc:	5f 01       	movw	r10, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2ece:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    2ed2:	f1 e0       	ldi	r31, 0x01	; 1
    2ed4:	cf 1a       	sub	r12, r31
    2ed6:	d1 08       	sbc	r13, r1
			BytesInTransfer++;
    2ed8:	8f ef       	ldi	r24, 0xFF	; 255
    2eda:	88 1a       	sub	r8, r24
    2edc:	98 0a       	sbc	r9, r24
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    2ede:	c1 14       	cp	r12, r1
    2ee0:	d1 04       	cpc	r13, r1
    2ee2:	c1 f6       	brne	.-80     	; 0x2e94 <Endpoint_Write_Stream_LE+0x3c>
    2ee4:	01 c0       	rjmp	.+2      	; 0x2ee8 <Endpoint_Write_Stream_LE+0x90>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    2ee6:	c8 2f       	mov	r28, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    2ee8:	8c 2f       	mov	r24, r28
    2eea:	cf 91       	pop	r28
    2eec:	ff 90       	pop	r15
    2eee:	ef 90       	pop	r14
    2ef0:	df 90       	pop	r13
    2ef2:	cf 90       	pop	r12
    2ef4:	bf 90       	pop	r11
    2ef6:	af 90       	pop	r10
    2ef8:	9f 90       	pop	r9
    2efa:	8f 90       	pop	r8
    2efc:	08 95       	ret

00002efe <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2efe:	20 91 fd 03 	lds	r18, 0x03FD
    2f02:	30 91 fe 03 	lds	r19, 0x03FE
    2f06:	26 17       	cp	r18, r22
    2f08:	37 07       	cpc	r19, r23
    2f0a:	48 f0       	brcs	.+18     	; 0x2f1e <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2f0c:	61 15       	cp	r22, r1
    2f0e:	71 05       	cpc	r23, r1
    2f10:	39 f4       	brne	.+14     	; 0x2f20 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2f12:	20 91 e8 00 	lds	r18, 0x00E8
    2f16:	2e 77       	andi	r18, 0x7E	; 126
    2f18:	20 93 e8 00 	sts	0x00E8, r18
    2f1c:	01 c0       	rjmp	.+2      	; 0x2f20 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2f1e:	b9 01       	movw	r22, r18
    2f20:	fc 01       	movw	r30, r24
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	2c c0       	rjmp	.+88     	; 0x2f7e <Endpoint_Write_Control_Stream_LE+0x80>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2f26:	80 91 f6 03 	lds	r24, 0x03F6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2f2a:	88 23       	and	r24, r24
    2f2c:	f1 f1       	breq	.+124    	; 0x2faa <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2f2e:	85 30       	cpi	r24, 0x05	; 5
    2f30:	f1 f1       	breq	.+124    	; 0x2fae <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2f32:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2f36:	83 fd       	sbrc	r24, 3
    2f38:	3c c0       	rjmp	.+120    	; 0x2fb2 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2f3a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2f3e:	82 fd       	sbrc	r24, 2
    2f40:	2e c0       	rjmp	.+92     	; 0x2f9e <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2f42:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    2f46:	80 ff       	sbrs	r24, 0
    2f48:	1a c0       	rjmp	.+52     	; 0x2f7e <Endpoint_Write_Control_Stream_LE+0x80>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    2f4a:	80 91 f2 00 	lds	r24, 0x00F2
    2f4e:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2f52:	06 c0       	rjmp	.+12     	; 0x2f60 <Endpoint_Write_Control_Stream_LE+0x62>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2f54:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2f56:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    2f5a:	61 50       	subi	r22, 0x01	; 1
    2f5c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    2f5e:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2f60:	61 15       	cp	r22, r1
    2f62:	71 05       	cpc	r23, r1
    2f64:	19 f0       	breq	.+6      	; 0x2f6c <Endpoint_Write_Control_Stream_LE+0x6e>
    2f66:	88 30       	cpi	r24, 0x08	; 8
    2f68:	91 05       	cpc	r25, r1
    2f6a:	a0 f3       	brcs	.-24     	; 0x2f54 <Endpoint_Write_Control_Stream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2f6c:	21 e0       	ldi	r18, 0x01	; 1
    2f6e:	08 97       	sbiw	r24, 0x08	; 8
    2f70:	09 f0       	breq	.+2      	; 0x2f74 <Endpoint_Write_Control_Stream_LE+0x76>
    2f72:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2f74:	80 91 e8 00 	lds	r24, 0x00E8
    2f78:	8e 77       	andi	r24, 0x7E	; 126
    2f7a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2f7e:	61 15       	cp	r22, r1
    2f80:	71 05       	cpc	r23, r1
    2f82:	89 f6       	brne	.-94     	; 0x2f26 <Endpoint_Write_Control_Stream_LE+0x28>
    2f84:	21 11       	cpse	r18, r1
    2f86:	cf cf       	rjmp	.-98     	; 0x2f26 <Endpoint_Write_Control_Stream_LE+0x28>
    2f88:	0a c0       	rjmp	.+20     	; 0x2f9e <Endpoint_Write_Control_Stream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2f8a:	80 91 f6 03 	lds	r24, 0x03F6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2f8e:	88 23       	and	r24, r24
    2f90:	61 f0       	breq	.+24     	; 0x2faa <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2f92:	85 30       	cpi	r24, 0x05	; 5
    2f94:	61 f0       	breq	.+24     	; 0x2fae <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2f96:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2f9a:	83 fd       	sbrc	r24, 3
    2f9c:	0a c0       	rjmp	.+20     	; 0x2fb2 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2f9e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2fa2:	82 ff       	sbrs	r24, 2
    2fa4:	f2 cf       	rjmp	.-28     	; 0x2f8a <Endpoint_Write_Control_Stream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2faa:	82 e0       	ldi	r24, 0x02	; 2
    2fac:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2fae:	83 e0       	ldi	r24, 0x03	; 3
    2fb0:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2fb4:	08 95       	ret

00002fb6 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2fb6:	20 91 fd 03 	lds	r18, 0x03FD
    2fba:	30 91 fe 03 	lds	r19, 0x03FE
    2fbe:	26 17       	cp	r18, r22
    2fc0:	37 07       	cpc	r19, r23
    2fc2:	48 f0       	brcs	.+18     	; 0x2fd6 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2fc4:	61 15       	cp	r22, r1
    2fc6:	71 05       	cpc	r23, r1
    2fc8:	39 f4       	brne	.+14     	; 0x2fd8 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2fca:	20 91 e8 00 	lds	r18, 0x00E8
    2fce:	2e 77       	andi	r18, 0x7E	; 126
    2fd0:	20 93 e8 00 	sts	0x00E8, r18
    2fd4:	01 c0       	rjmp	.+2      	; 0x2fd8 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2fd6:	b9 01       	movw	r22, r18
    2fd8:	fc 01       	movw	r30, r24
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	2f c0       	rjmp	.+94     	; 0x303c <Endpoint_Write_Control_PStream_LE+0x86>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2fde:	80 91 f6 03 	lds	r24, 0x03F6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2fe2:	88 23       	and	r24, r24
    2fe4:	09 f4       	brne	.+2      	; 0x2fe8 <Endpoint_Write_Control_PStream_LE+0x32>
    2fe6:	40 c0       	rjmp	.+128    	; 0x3068 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2fe8:	85 30       	cpi	r24, 0x05	; 5
    2fea:	09 f4       	brne	.+2      	; 0x2fee <Endpoint_Write_Control_PStream_LE+0x38>
    2fec:	3f c0       	rjmp	.+126    	; 0x306c <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2fee:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2ff2:	83 fd       	sbrc	r24, 3
    2ff4:	3d c0       	rjmp	.+122    	; 0x3070 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2ff6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2ffa:	82 fd       	sbrc	r24, 2
    2ffc:	2f c0       	rjmp	.+94     	; 0x305c <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2ffe:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    3002:	80 ff       	sbrs	r24, 0
    3004:	1b c0       	rjmp	.+54     	; 0x303c <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    3006:	80 91 f2 00 	lds	r24, 0x00F2
    300a:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    300e:	07 c0       	rjmp	.+14     	; 0x301e <Endpoint_Write_Control_PStream_LE+0x68>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    3010:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3012:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    3016:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    3018:	61 50       	subi	r22, 0x01	; 1
    301a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    301c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    301e:	61 15       	cp	r22, r1
    3020:	71 05       	cpc	r23, r1
    3022:	19 f0       	breq	.+6      	; 0x302a <Endpoint_Write_Control_PStream_LE+0x74>
    3024:	88 30       	cpi	r24, 0x08	; 8
    3026:	91 05       	cpc	r25, r1
    3028:	98 f3       	brcs	.-26     	; 0x3010 <Endpoint_Write_Control_PStream_LE+0x5a>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    302a:	21 e0       	ldi	r18, 0x01	; 1
    302c:	08 97       	sbiw	r24, 0x08	; 8
    302e:	09 f0       	breq	.+2      	; 0x3032 <Endpoint_Write_Control_PStream_LE+0x7c>
    3030:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3032:	80 91 e8 00 	lds	r24, 0x00E8
    3036:	8e 77       	andi	r24, 0x7E	; 126
    3038:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    303c:	61 15       	cp	r22, r1
    303e:	71 05       	cpc	r23, r1
    3040:	71 f6       	brne	.-100    	; 0x2fde <Endpoint_Write_Control_PStream_LE+0x28>
    3042:	21 11       	cpse	r18, r1
    3044:	cc cf       	rjmp	.-104    	; 0x2fde <Endpoint_Write_Control_PStream_LE+0x28>
    3046:	0a c0       	rjmp	.+20     	; 0x305c <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3048:	80 91 f6 03 	lds	r24, 0x03F6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    304c:	88 23       	and	r24, r24
    304e:	61 f0       	breq	.+24     	; 0x3068 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3050:	85 30       	cpi	r24, 0x05	; 5
    3052:	61 f0       	breq	.+24     	; 0x306c <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3054:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3058:	83 fd       	sbrc	r24, 3
    305a:	0a c0       	rjmp	.+20     	; 0x3070 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    305c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3060:	82 ff       	sbrs	r24, 2
    3062:	f2 cf       	rjmp	.-28     	; 0x3048 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    3068:	82 e0       	ldi	r24, 0x02	; 2
    306a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    306c:	83 e0       	ldi	r24, 0x03	; 3
    306e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    3070:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3072:	08 95       	ret

00003074 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    3074:	98 2f       	mov	r25, r24
    3076:	2c c0       	rjmp	.+88     	; 0x30d0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3078:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    307c:	98 17       	cp	r25, r24
    307e:	39 f0       	breq	.+14     	; 0x308e <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    3080:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    3084:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    3088:	50 91 f0 00 	lds	r21, 0x00F0
    308c:	03 c0       	rjmp	.+6      	; 0x3094 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    308e:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    3090:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    3092:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    3094:	21 fd       	sbrc	r18, 1
    3096:	02 c0       	rjmp	.+4      	; 0x309c <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    3098:	9f 5f       	subi	r25, 0xFF	; 255
    309a:	1a c0       	rjmp	.+52     	; 0x30d0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    309c:	30 91 eb 00 	lds	r19, 0x00EB
    30a0:	3e 7f       	andi	r19, 0xFE	; 254
    30a2:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    30a6:	30 91 ed 00 	lds	r19, 0x00ED
    30aa:	3d 7f       	andi	r19, 0xFD	; 253
    30ac:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    30b0:	30 91 eb 00 	lds	r19, 0x00EB
    30b4:	31 60       	ori	r19, 0x01	; 1
    30b6:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    30ba:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    30be:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    30c2:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    30c6:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    30ca:	27 fd       	sbrc	r18, 7
    30cc:	e5 cf       	rjmp	.-54     	; 0x3098 <Endpoint_ConfigureEndpoint_Prv+0x24>
    30ce:	07 c0       	rjmp	.+14     	; 0x30de <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    30d0:	97 30       	cpi	r25, 0x07	; 7
    30d2:	90 f2       	brcs	.-92     	; 0x3078 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    30d4:	8f 70       	andi	r24, 0x0F	; 15
    30d6:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    30de:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    30e0:	08 95       	ret

000030e2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    30e2:	80 91 f7 03 	lds	r24, 0x03F7
    30e6:	87 fd       	sbrc	r24, 7
    30e8:	05 c0       	rjmp	.+10     	; 0x30f4 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    30ea:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    30ee:	80 ff       	sbrs	r24, 0
    30f0:	0e c0       	rjmp	.+28     	; 0x310e <Endpoint_ClearStatusStage+0x2c>
    30f2:	12 c0       	rjmp	.+36     	; 0x3118 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    30f4:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    30f8:	82 fd       	sbrc	r24, 2
    30fa:	05 c0       	rjmp	.+10     	; 0x3106 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    30fc:	80 91 f6 03 	lds	r24, 0x03F6
    3100:	81 11       	cpse	r24, r1
    3102:	f8 cf       	rjmp	.-16     	; 0x30f4 <Endpoint_ClearStatusStage+0x12>
    3104:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3106:	80 91 e8 00 	lds	r24, 0x00E8
    310a:	8b 77       	andi	r24, 0x7B	; 123
    310c:	08 c0       	rjmp	.+16     	; 0x311e <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    310e:	80 91 f6 03 	lds	r24, 0x03F6
    3112:	81 11       	cpse	r24, r1
    3114:	ea cf       	rjmp	.-44     	; 0x30ea <Endpoint_ClearStatusStage+0x8>
    3116:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3118:	80 91 e8 00 	lds	r24, 0x00E8
    311c:	8e 77       	andi	r24, 0x7E	; 126
    311e:	80 93 e8 00 	sts	0x00E8, r24
    3122:	08 95       	ret

00003124 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    3124:	80 91 e4 00 	lds	r24, 0x00E4
    3128:	90 91 e5 00 	lds	r25, 0x00E5
    312c:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    312e:	20 91 ec 00 	lds	r18, 0x00EC
    3132:	20 fd       	sbrc	r18, 0
    3134:	1f c0       	rjmp	.+62     	; 0x3174 <Endpoint_WaitUntilReady+0x50>
    3136:	23 c0       	rjmp	.+70     	; 0x317e <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3138:	20 91 f6 03 	lds	r18, 0x03F6

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    313c:	22 23       	and	r18, r18
    313e:	91 f0       	breq	.+36     	; 0x3164 <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3140:	25 30       	cpi	r18, 0x05	; 5
    3142:	91 f0       	breq	.+36     	; 0x3168 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3144:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    3148:	25 fd       	sbrc	r18, 5
    314a:	10 c0       	rjmp	.+32     	; 0x316c <Endpoint_WaitUntilReady+0x48>
    314c:	20 91 e4 00 	lds	r18, 0x00E4
    3150:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    3154:	28 17       	cp	r18, r24
    3156:	39 07       	cpc	r19, r25
    3158:	51 f3       	breq	.-44     	; 0x312e <Endpoint_WaitUntilReady+0xa>
    315a:	41 50       	subi	r20, 0x01	; 1
    315c:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    315e:	39 f7       	brne	.-50     	; 0x312e <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    3160:	84 e0       	ldi	r24, 0x04	; 4
    3162:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    3164:	82 e0       	ldi	r24, 0x02	; 2
    3166:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    3168:	83 e0       	ldi	r24, 0x03	; 3
    316a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    3170:	80 e0       	ldi	r24, 0x00	; 0
    3172:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3174:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    3178:	20 ff       	sbrs	r18, 0
    317a:	de cf       	rjmp	.-68     	; 0x3138 <Endpoint_WaitUntilReady+0x14>
    317c:	f9 cf       	rjmp	.-14     	; 0x3170 <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    317e:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    3182:	22 ff       	sbrs	r18, 2
    3184:	d9 cf       	rjmp	.-78     	; 0x3138 <Endpoint_WaitUntilReady+0x14>
    3186:	f4 cf       	rjmp	.-24     	; 0x3170 <Endpoint_WaitUntilReady+0x4c>

00003188 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    3188:	0e 94 3a 19 	call	0x3274	; 0x3274 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    318c:	0e 94 42 19 	call	0x3284	; 0x3284 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    3190:	e0 ee       	ldi	r30, 0xE0	; 224
    3192:	f0 e0       	ldi	r31, 0x00	; 0
    3194:	80 81       	ld	r24, Z
    3196:	81 60       	ori	r24, 0x01	; 1
    3198:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    319a:	e8 ed       	ldi	r30, 0xD8	; 216
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	8f 77       	andi	r24, 0x7F	; 127
    31a2:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    31a4:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    31a6:	a7 ed       	ldi	r26, 0xD7	; 215
    31a8:	b0 e0       	ldi	r27, 0x00	; 0
    31aa:	8c 91       	ld	r24, X
    31ac:	8e 7f       	andi	r24, 0xFE	; 254
    31ae:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    31b0:	80 81       	ld	r24, Z
    31b2:	8f 7e       	andi	r24, 0xEF	; 239
    31b4:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    31b6:	10 92 f5 03 	sts	0x03F5, r1
    31ba:	08 95       	ret

000031bc <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    31bc:	cf 92       	push	r12
    31be:	df 92       	push	r13
    31c0:	ef 92       	push	r14
    31c2:	ff 92       	push	r15
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    31c4:	0e 94 3a 19 	call	0x3274	; 0x3274 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    31c8:	0e 94 42 19 	call	0x3284	; 0x3284 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    31cc:	88 ed       	ldi	r24, 0xD8	; 216
    31ce:	e8 2e       	mov	r14, r24
    31d0:	f1 2c       	mov	r15, r1
    31d2:	f7 01       	movw	r30, r14
    31d4:	80 81       	ld	r24, Z
    31d6:	8f 77       	andi	r24, 0x7F	; 127
    31d8:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    31da:	80 81       	ld	r24, Z
    31dc:	80 68       	ori	r24, 0x80	; 128
    31de:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    31e0:	80 81       	ld	r24, Z
    31e2:	8f 7d       	andi	r24, 0xDF	; 223
    31e4:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    31e6:	e7 ed       	ldi	r30, 0xD7	; 215
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	80 81       	ld	r24, Z
    31ec:	80 68       	ori	r24, 0x80	; 128
    31ee:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    31f0:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    31f2:	10 92 f6 03 	sts	0x03F6, r1
	USB_Device_ConfigurationNumber  = 0;
    31f6:	10 92 f2 03 	sts	0x03F2, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    31fa:	10 92 f4 03 	sts	0x03F4, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    31fe:	10 92 f3 03 	sts	0x03F3, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    3202:	90 ee       	ldi	r25, 0xE0	; 224
    3204:	c9 2e       	mov	r12, r25
    3206:	d1 2c       	mov	r13, r1
    3208:	f6 01       	movw	r30, r12
    320a:	80 81       	ld	r24, Z
    320c:	8b 7f       	andi	r24, 0xFB	; 251
    320e:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    3210:	f7 01       	movw	r30, r14
    3212:	80 81       	ld	r24, Z
    3214:	81 60       	ori	r24, 0x01	; 1
    3216:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3218:	42 e0       	ldi	r20, 0x02	; 2
    321a:	60 e0       	ldi	r22, 0x00	; 0
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	0e 94 3a 18 	call	0x3074	; 0x3074 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3222:	e1 ee       	ldi	r30, 0xE1	; 225
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	80 81       	ld	r24, Z
    3228:	8e 7f       	andi	r24, 0xFE	; 254
    322a:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    322c:	e2 ee       	ldi	r30, 0xE2	; 226
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	80 81       	ld	r24, Z
    3232:	81 60       	ori	r24, 0x01	; 1
    3234:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    3236:	80 81       	ld	r24, Z
    3238:	88 60       	ori	r24, 0x08	; 8
    323a:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    323c:	f6 01       	movw	r30, r12
    323e:	80 81       	ld	r24, Z
    3240:	8e 7f       	andi	r24, 0xFE	; 254
    3242:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    3244:	f7 01       	movw	r30, r14
    3246:	80 81       	ld	r24, Z
    3248:	80 61       	ori	r24, 0x10	; 16
    324a:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    324c:	ff 90       	pop	r15
    324e:	ef 90       	pop	r14
    3250:	df 90       	pop	r13
    3252:	cf 90       	pop	r12
    3254:	08 95       	ret

00003256 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    3256:	e8 ed       	ldi	r30, 0xD8	; 216
    3258:	f0 e0       	ldi	r31, 0x00	; 0
    325a:	80 81       	ld	r24, Z
    325c:	8f 7e       	andi	r24, 0xEF	; 239
    325e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    3260:	e7 ed       	ldi	r30, 0xD7	; 215
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	80 81       	ld	r24, Z
    3266:	81 60       	ori	r24, 0x01	; 1
    3268:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    326a:	81 e0       	ldi	r24, 0x01	; 1
    326c:	80 93 f5 03 	sts	0x03F5, r24

	USB_ResetInterface();
    3270:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <USB_ResetInterface>

00003274 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    3274:	e8 ed       	ldi	r30, 0xD8	; 216
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	8c 7f       	andi	r24, 0xFC	; 252
    327c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    327e:	10 92 e2 00 	sts	0x00E2, r1
    3282:	08 95       	ret

00003284 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    3284:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    3288:	10 92 e1 00 	sts	0x00E1, r1
    328c:	08 95       	ret

0000328e <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    328e:	1f 92       	push	r1
    3290:	0f 92       	push	r0
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	0f 92       	push	r0
    3296:	11 24       	eor	r1, r1
    3298:	0b b6       	in	r0, 0x3b	; 59
    329a:	0f 92       	push	r0
    329c:	2f 93       	push	r18
    329e:	3f 93       	push	r19
    32a0:	4f 93       	push	r20
    32a2:	5f 93       	push	r21
    32a4:	6f 93       	push	r22
    32a6:	7f 93       	push	r23
    32a8:	8f 93       	push	r24
    32aa:	9f 93       	push	r25
    32ac:	af 93       	push	r26
    32ae:	bf 93       	push	r27
    32b0:	ef 93       	push	r30
    32b2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    32b4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    32b8:	82 ff       	sbrs	r24, 2
    32ba:	0b c0       	rjmp	.+22     	; 0x32d2 <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    32bc:	80 91 e2 00 	lds	r24, 0x00E2
    32c0:	82 ff       	sbrs	r24, 2
    32c2:	07 c0       	rjmp	.+14     	; 0x32d2 <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    32c4:	80 91 e1 00 	lds	r24, 0x00E1
    32c8:	8b 7f       	andi	r24, 0xFB	; 251
    32ca:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    32ce:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    32d2:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    32d6:	80 ff       	sbrs	r24, 0
    32d8:	1f c0       	rjmp	.+62     	; 0x3318 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    32da:	80 91 d8 00 	lds	r24, 0x00D8
    32de:	80 ff       	sbrs	r24, 0
    32e0:	1b c0       	rjmp	.+54     	; 0x3318 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    32e2:	80 91 da 00 	lds	r24, 0x00DA
    32e6:	8e 7f       	andi	r24, 0xFE	; 254
    32e8:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    32ec:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    32f0:	80 ff       	sbrs	r24, 0
    32f2:	0d c0       	rjmp	.+26     	; 0x330e <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    32f4:	8c e0       	ldi	r24, 0x0C	; 12
    32f6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    32f8:	8e e0       	ldi	r24, 0x0E	; 14
    32fa:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    32fc:	09 b4       	in	r0, 0x29	; 41
    32fe:	00 fe       	sbrs	r0, 0
    3300:	fd cf       	rjmp	.-6      	; 0x32fc <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	80 93 f6 03 	sts	0x03F6, r24
			EVENT_USB_Device_Connect();
    3308:	0e 94 80 15 	call	0x2b00	; 0x2b00 <EVENT_USB_Device_Connect>
    330c:	05 c0       	rjmp	.+10     	; 0x3318 <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    330e:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    3310:	10 92 f6 03 	sts	0x03F6, r1
			EVENT_USB_Device_Disconnect();
    3314:	0e 94 92 15 	call	0x2b24	; 0x2b24 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    3318:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    331c:	80 ff       	sbrs	r24, 0
    331e:	19 c0       	rjmp	.+50     	; 0x3352 <__vector_10+0xc4>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    3320:	80 91 e2 00 	lds	r24, 0x00E2
    3324:	80 ff       	sbrs	r24, 0
    3326:	15 c0       	rjmp	.+42     	; 0x3352 <__vector_10+0xc4>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3328:	80 91 e2 00 	lds	r24, 0x00E2
    332c:	8e 7f       	andi	r24, 0xFE	; 254
    332e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3332:	80 91 e2 00 	lds	r24, 0x00E2
    3336:	80 61       	ori	r24, 0x10	; 16
    3338:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    333c:	80 91 d8 00 	lds	r24, 0x00D8
    3340:	80 62       	ori	r24, 0x20	; 32
    3342:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3346:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    3348:	85 e0       	ldi	r24, 0x05	; 5
    334a:	80 93 f6 03 	sts	0x03F6, r24
		EVENT_USB_Device_Suspend();
    334e:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    3352:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    3356:	84 ff       	sbrs	r24, 4
    3358:	30 c0       	rjmp	.+96     	; 0x33ba <__vector_10+0x12c>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    335a:	80 91 e2 00 	lds	r24, 0x00E2
    335e:	84 ff       	sbrs	r24, 4
    3360:	2c c0       	rjmp	.+88     	; 0x33ba <__vector_10+0x12c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3362:	8c e0       	ldi	r24, 0x0C	; 12
    3364:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3366:	8e e0       	ldi	r24, 0x0E	; 14
    3368:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    336a:	09 b4       	in	r0, 0x29	; 41
    336c:	00 fe       	sbrs	r0, 0
    336e:	fd cf       	rjmp	.-6      	; 0x336a <__vector_10+0xdc>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3370:	80 91 d8 00 	lds	r24, 0x00D8
    3374:	8f 7d       	andi	r24, 0xDF	; 223
    3376:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    337a:	80 91 e1 00 	lds	r24, 0x00E1
    337e:	8f 7e       	andi	r24, 0xEF	; 239
    3380:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    3384:	80 91 e2 00 	lds	r24, 0x00E2
    3388:	8f 7e       	andi	r24, 0xEF	; 239
    338a:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    338e:	80 91 e2 00 	lds	r24, 0x00E2
    3392:	81 60       	ori	r24, 0x01	; 1
    3394:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    3398:	80 91 f2 03 	lds	r24, 0x03F2
    339c:	88 23       	and	r24, r24
    339e:	11 f0       	breq	.+4      	; 0x33a4 <__vector_10+0x116>
		  USB_DeviceState = DEVICE_STATE_Configured;
    33a0:	84 e0       	ldi	r24, 0x04	; 4
    33a2:	07 c0       	rjmp	.+14     	; 0x33b2 <__vector_10+0x124>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    33a4:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    33a8:	87 ff       	sbrs	r24, 7
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <__vector_10+0x122>
    33ac:	83 e0       	ldi	r24, 0x03	; 3
    33ae:	01 c0       	rjmp	.+2      	; 0x33b2 <__vector_10+0x124>
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	80 93 f6 03 	sts	0x03F6, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    33b6:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    33ba:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    33be:	83 ff       	sbrs	r24, 3
    33c0:	29 c0       	rjmp	.+82     	; 0x3414 <__vector_10+0x186>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    33c2:	80 91 e2 00 	lds	r24, 0x00E2
    33c6:	83 ff       	sbrs	r24, 3
    33c8:	25 c0       	rjmp	.+74     	; 0x3414 <__vector_10+0x186>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    33ca:	80 91 e1 00 	lds	r24, 0x00E1
    33ce:	87 7f       	andi	r24, 0xF7	; 247
    33d0:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    33d4:	82 e0       	ldi	r24, 0x02	; 2
    33d6:	80 93 f6 03 	sts	0x03F6, r24
		USB_Device_ConfigurationNumber = 0;
    33da:	10 92 f2 03 	sts	0x03F2, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    33de:	80 91 e1 00 	lds	r24, 0x00E1
    33e2:	8e 7f       	andi	r24, 0xFE	; 254
    33e4:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    33e8:	80 91 e2 00 	lds	r24, 0x00E2
    33ec:	8e 7f       	andi	r24, 0xFE	; 254
    33ee:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    33f2:	80 91 e2 00 	lds	r24, 0x00E2
    33f6:	80 61       	ori	r24, 0x10	; 16
    33f8:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    33fc:	42 e0       	ldi	r20, 0x02	; 2
    33fe:	60 e0       	ldi	r22, 0x00	; 0
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	0e 94 3a 18 	call	0x3074	; 0x3074 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    3406:	80 91 f0 00 	lds	r24, 0x00F0
    340a:	88 60       	ori	r24, 0x08	; 8
    340c:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3410:	0e 94 99 15 	call	0x2b32	; 0x2b32 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    3414:	ff 91       	pop	r31
    3416:	ef 91       	pop	r30
    3418:	bf 91       	pop	r27
    341a:	af 91       	pop	r26
    341c:	9f 91       	pop	r25
    341e:	8f 91       	pop	r24
    3420:	7f 91       	pop	r23
    3422:	6f 91       	pop	r22
    3424:	5f 91       	pop	r21
    3426:	4f 91       	pop	r20
    3428:	3f 91       	pop	r19
    342a:	2f 91       	pop	r18
    342c:	0f 90       	pop	r0
    342e:	0b be       	out	0x3b, r0	; 59
    3430:	0f 90       	pop	r0
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	0f 90       	pop	r0
    3436:	1f 90       	pop	r1
    3438:	18 95       	reti

0000343a <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    343a:	1f 92       	push	r1
    343c:	0f 92       	push	r0
    343e:	0f b6       	in	r0, 0x3f	; 63
    3440:	0f 92       	push	r0
    3442:	11 24       	eor	r1, r1
    3444:	0b b6       	in	r0, 0x3b	; 59
    3446:	0f 92       	push	r0
    3448:	2f 93       	push	r18
    344a:	3f 93       	push	r19
    344c:	4f 93       	push	r20
    344e:	5f 93       	push	r21
    3450:	6f 93       	push	r22
    3452:	7f 93       	push	r23
    3454:	8f 93       	push	r24
    3456:	9f 93       	push	r25
    3458:	af 93       	push	r26
    345a:	bf 93       	push	r27
    345c:	cf 93       	push	r28
    345e:	ef 93       	push	r30
    3460:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3462:	80 91 e9 00 	lds	r24, 0x00E9
    3466:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3468:	90 91 ec 00 	lds	r25, 0x00EC
    346c:	90 ff       	sbrs	r25, 0
    346e:	02 c0       	rjmp	.+4      	; 0x3474 <__vector_11+0x3a>
    3470:	90 e8       	ldi	r25, 0x80	; 128
    3472:	01 c0       	rjmp	.+2      	; 0x3476 <__vector_11+0x3c>
    3474:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3476:	c9 2f       	mov	r28, r25
    3478:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    347a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    347e:	80 91 f0 00 	lds	r24, 0x00F0
    3482:	87 7f       	andi	r24, 0xF7	; 247
    3484:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    3488:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    348a:	0e 94 65 1a 	call	0x34ca	; 0x34ca <USB_Device_ProcessControlRequest>
    348e:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    3492:	80 91 f0 00 	lds	r24, 0x00F0
    3496:	88 60       	ori	r24, 0x08	; 8
    3498:	80 93 f0 00 	sts	0x00F0, r24
    349c:	cf 70       	andi	r28, 0x0F	; 15
    349e:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    34a2:	ff 91       	pop	r31
    34a4:	ef 91       	pop	r30
    34a6:	cf 91       	pop	r28
    34a8:	bf 91       	pop	r27
    34aa:	af 91       	pop	r26
    34ac:	9f 91       	pop	r25
    34ae:	8f 91       	pop	r24
    34b0:	7f 91       	pop	r23
    34b2:	6f 91       	pop	r22
    34b4:	5f 91       	pop	r21
    34b6:	4f 91       	pop	r20
    34b8:	3f 91       	pop	r19
    34ba:	2f 91       	pop	r18
    34bc:	0f 90       	pop	r0
    34be:	0b be       	out	0x3b, r0	; 59
    34c0:	0f 90       	pop	r0
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	0f 90       	pop	r0
    34c6:	1f 90       	pop	r1
    34c8:	18 95       	reti

000034ca <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    34ca:	1f 93       	push	r17
    34cc:	cf 93       	push	r28
    34ce:	df 93       	push	r29
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
    34d4:	ac 97       	sbiw	r28, 0x2c	; 44
    34d6:	0f b6       	in	r0, 0x3f	; 63
    34d8:	f8 94       	cli
    34da:	de bf       	out	0x3e, r29	; 62
    34dc:	0f be       	out	0x3f, r0	; 63
    34de:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    34e0:	e7 ef       	ldi	r30, 0xF7	; 247
    34e2:	f3 e0       	ldi	r31, 0x03	; 3
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    34e4:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    34e8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    34ea:	23 e0       	ldi	r18, 0x03	; 3
    34ec:	ef 3f       	cpi	r30, 0xFF	; 255
    34ee:	f2 07       	cpc	r31, r18
    34f0:	c9 f7       	brne	.-14     	; 0x34e4 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    34f2:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    34f6:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    34fa:	83 ff       	sbrs	r24, 3
    34fc:	37 c1       	rjmp	.+622    	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    34fe:	80 91 f7 03 	lds	r24, 0x03F7

		switch (USB_ControlRequest.bRequest)
    3502:	90 91 f8 03 	lds	r25, 0x03F8
    3506:	95 30       	cpi	r25, 0x05	; 5
    3508:	09 f4       	brne	.+2      	; 0x350c <USB_Device_ProcessControlRequest+0x42>
    350a:	88 c0       	rjmp	.+272    	; 0x361c <USB_Device_ProcessControlRequest+0x152>
    350c:	38 f4       	brcc	.+14     	; 0x351c <USB_Device_ProcessControlRequest+0x52>
    350e:	91 30       	cpi	r25, 0x01	; 1
    3510:	b1 f1       	breq	.+108    	; 0x357e <USB_Device_ProcessControlRequest+0xb4>
    3512:	70 f0       	brcs	.+28     	; 0x3530 <USB_Device_ProcessControlRequest+0x66>
    3514:	93 30       	cpi	r25, 0x03	; 3
    3516:	09 f0       	breq	.+2      	; 0x351a <USB_Device_ProcessControlRequest+0x50>
    3518:	29 c1       	rjmp	.+594    	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
    351a:	31 c0       	rjmp	.+98     	; 0x357e <USB_Device_ProcessControlRequest+0xb4>
    351c:	98 30       	cpi	r25, 0x08	; 8
    351e:	09 f4       	brne	.+2      	; 0x3522 <USB_Device_ProcessControlRequest+0x58>
    3520:	f8 c0       	rjmp	.+496    	; 0x3712 <USB_Device_ProcessControlRequest+0x248>
    3522:	99 30       	cpi	r25, 0x09	; 9
    3524:	09 f4       	brne	.+2      	; 0x3528 <USB_Device_ProcessControlRequest+0x5e>
    3526:	04 c1       	rjmp	.+520    	; 0x3730 <USB_Device_ProcessControlRequest+0x266>
    3528:	96 30       	cpi	r25, 0x06	; 6
    352a:	09 f0       	breq	.+2      	; 0x352e <USB_Device_ProcessControlRequest+0x64>
    352c:	1f c1       	rjmp	.+574    	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
    352e:	9d c0       	rjmp	.+314    	; 0x366a <USB_Device_ProcessControlRequest+0x1a0>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3530:	80 38       	cpi	r24, 0x80	; 128
    3532:	21 f0       	breq	.+8      	; 0x353c <USB_Device_ProcessControlRequest+0x72>
    3534:	82 38       	cpi	r24, 0x82	; 130
    3536:	09 f0       	breq	.+2      	; 0x353a <USB_Device_ProcessControlRequest+0x70>
    3538:	19 c1       	rjmp	.+562    	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
    353a:	08 c0       	rjmp	.+16     	; 0x354c <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    353c:	80 91 f3 03 	lds	r24, 0x03F3
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    3540:	90 91 f4 03 	lds	r25, 0x03F4
    3544:	99 23       	and	r25, r25
    3546:	89 f0       	breq	.+34     	; 0x356a <USB_Device_ProcessControlRequest+0xa0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3548:	82 60       	ori	r24, 0x02	; 2
    354a:	0f c0       	rjmp	.+30     	; 0x356a <USB_Device_ProcessControlRequest+0xa0>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    354c:	80 91 fb 03 	lds	r24, 0x03FB
    3550:	90 91 fc 03 	lds	r25, 0x03FC
    3554:	8f 70       	andi	r24, 0x0F	; 15
    3556:	99 27       	eor	r25, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3558:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    355c:	80 91 eb 00 	lds	r24, 0x00EB
    3560:	85 fb       	bst	r24, 5
    3562:	88 27       	eor	r24, r24
    3564:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3566:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    356a:	90 91 e8 00 	lds	r25, 0x00E8
    356e:	97 7f       	andi	r25, 0xF7	; 247
    3570:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    3574:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    3578:	10 92 f1 00 	sts	0x00F1, r1
    357c:	d5 c0       	rjmp	.+426    	; 0x3728 <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    357e:	88 23       	and	r24, r24
    3580:	19 f0       	breq	.+6      	; 0x3588 <USB_Device_ProcessControlRequest+0xbe>
    3582:	82 30       	cpi	r24, 0x02	; 2
    3584:	09 f0       	breq	.+2      	; 0x3588 <USB_Device_ProcessControlRequest+0xbe>
    3586:	f2 c0       	rjmp	.+484    	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    3588:	8f 71       	andi	r24, 0x1F	; 31
    358a:	21 f0       	breq	.+8      	; 0x3594 <USB_Device_ProcessControlRequest+0xca>
    358c:	82 30       	cpi	r24, 0x02	; 2
    358e:	09 f0       	breq	.+2      	; 0x3592 <USB_Device_ProcessControlRequest+0xc8>
    3590:	ed c0       	rjmp	.+474    	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
    3592:	0b c0       	rjmp	.+22     	; 0x35aa <USB_Device_ProcessControlRequest+0xe0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    3594:	80 91 f9 03 	lds	r24, 0x03F9
    3598:	81 30       	cpi	r24, 0x01	; 1
    359a:	09 f0       	breq	.+2      	; 0x359e <USB_Device_ProcessControlRequest+0xd4>
    359c:	e7 c0       	rjmp	.+462    	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    359e:	93 30       	cpi	r25, 0x03	; 3
    35a0:	09 f0       	breq	.+2      	; 0x35a4 <USB_Device_ProcessControlRequest+0xda>
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	80 93 f4 03 	sts	0x03F4, r24
    35a8:	2f c0       	rjmp	.+94     	; 0x3608 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    35aa:	80 91 f9 03 	lds	r24, 0x03F9
    35ae:	81 11       	cpse	r24, r1
    35b0:	2b c0       	rjmp	.+86     	; 0x3608 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    35b2:	80 91 fb 03 	lds	r24, 0x03FB
    35b6:	90 91 fc 03 	lds	r25, 0x03FC
    35ba:	8f 70       	andi	r24, 0x0F	; 15
    35bc:	99 27       	eor	r25, r25

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    35be:	00 97       	sbiw	r24, 0x00	; 0
    35c0:	09 f4       	brne	.+2      	; 0x35c4 <USB_Device_ProcessControlRequest+0xfa>
    35c2:	d4 c0       	rjmp	.+424    	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    35c4:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    35c8:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    35cc:	20 ff       	sbrs	r18, 0
    35ce:	1c c0       	rjmp	.+56     	; 0x3608 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    35d0:	20 91 f8 03 	lds	r18, 0x03F8
    35d4:	23 30       	cpi	r18, 0x03	; 3
    35d6:	21 f4       	brne	.+8      	; 0x35e0 <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    35d8:	80 91 eb 00 	lds	r24, 0x00EB
    35dc:	80 62       	ori	r24, 0x20	; 32
    35de:	12 c0       	rjmp	.+36     	; 0x3604 <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    35e0:	90 91 eb 00 	lds	r25, 0x00EB
    35e4:	90 61       	ori	r25, 0x10	; 16
    35e6:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    35ea:	21 e0       	ldi	r18, 0x01	; 1
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	01 c0       	rjmp	.+2      	; 0x35f2 <USB_Device_ProcessControlRequest+0x128>
    35f0:	22 0f       	add	r18, r18
    35f2:	8a 95       	dec	r24
    35f4:	ea f7       	brpl	.-6      	; 0x35f0 <USB_Device_ProcessControlRequest+0x126>
    35f6:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    35fa:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    35fe:	80 91 eb 00 	lds	r24, 0x00EB
    3602:	88 60       	ori	r24, 0x08	; 8
    3604:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3608:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    360c:	80 91 e8 00 	lds	r24, 0x00E8
    3610:	87 7f       	andi	r24, 0xF7	; 247
    3612:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    3616:	0e 94 71 18 	call	0x30e2	; 0x30e2 <Endpoint_ClearStatusStage>
    361a:	a8 c0       	rjmp	.+336    	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    361c:	81 11       	cpse	r24, r1
    361e:	a6 c0       	rjmp	.+332    	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3620:	80 91 f9 03 	lds	r24, 0x03F9
    3624:	90 91 fa 03 	lds	r25, 0x03FA
    3628:	8f 77       	andi	r24, 0x7F	; 127
    362a:	99 27       	eor	r25, r25
    362c:	18 2f       	mov	r17, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    362e:	90 91 e3 00 	lds	r25, 0x00E3
    3632:	90 78       	andi	r25, 0x80	; 128
    3634:	98 2b       	or	r25, r24
    3636:	90 93 e3 00 	sts	0x00E3, r25
    363a:	80 91 e8 00 	lds	r24, 0x00E8
    363e:	87 7f       	andi	r24, 0xF7	; 247
    3640:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    3644:	0e 94 71 18 	call	0x30e2	; 0x30e2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3648:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    364c:	80 ff       	sbrs	r24, 0
    364e:	fc cf       	rjmp	.-8      	; 0x3648 <USB_Device_ProcessControlRequest+0x17e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    3650:	80 91 e3 00 	lds	r24, 0x00E3
    3654:	80 68       	ori	r24, 0x80	; 128
    3656:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    365a:	11 23       	and	r17, r17
    365c:	11 f0       	breq	.+4      	; 0x3662 <USB_Device_ProcessControlRequest+0x198>
    365e:	83 e0       	ldi	r24, 0x03	; 3
    3660:	01 c0       	rjmp	.+2      	; 0x3664 <USB_Device_ProcessControlRequest+0x19a>
    3662:	82 e0       	ldi	r24, 0x02	; 2
    3664:	80 93 f6 03 	sts	0x03F6, r24
    3668:	81 c0       	rjmp	.+258    	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    366a:	80 58       	subi	r24, 0x80	; 128
    366c:	82 30       	cpi	r24, 0x02	; 2
    366e:	08 f0       	brcs	.+2      	; 0x3672 <USB_Device_ProcessControlRequest+0x1a8>
    3670:	7d c0       	rjmp	.+250    	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    3672:	80 91 f9 03 	lds	r24, 0x03F9
    3676:	90 91 fa 03 	lds	r25, 0x03FA
    367a:	8c 3d       	cpi	r24, 0xDC	; 220
    367c:	23 e0       	ldi	r18, 0x03	; 3
    367e:	92 07       	cpc	r25, r18
    3680:	79 f5       	brne	.+94     	; 0x36e0 <USB_Device_ProcessControlRequest+0x216>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    3682:	83 e0       	ldi	r24, 0x03	; 3
    3684:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    3686:	8a e2       	ldi	r24, 0x2A	; 42
    3688:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    368a:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    368c:	f8 94       	cli

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
    368e:	de 01       	movw	r26, r28
    3690:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3692:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    3694:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    3696:	51 e2       	ldi	r21, 0x21	; 33
    3698:	e3 2f       	mov	r30, r19
    369a:	f0 e0       	ldi	r31, 0x00	; 0
    369c:	50 93 57 00 	sts	0x0057, r21
    36a0:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    36a2:	20 ff       	sbrs	r18, 0
    36a4:	03 c0       	rjmp	.+6      	; 0x36ac <USB_Device_ProcessControlRequest+0x1e2>
					{
						SerialByte >>= 4;
    36a6:	e2 95       	swap	r30
    36a8:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    36aa:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    36ac:	ef 70       	andi	r30, 0x0F	; 15
    36ae:	8e 2f       	mov	r24, r30
    36b0:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    36b2:	ea 30       	cpi	r30, 0x0A	; 10
    36b4:	10 f0       	brcs	.+4      	; 0x36ba <USB_Device_ProcessControlRequest+0x1f0>
    36b6:	c7 96       	adiw	r24, 0x37	; 55
    36b8:	01 c0       	rjmp	.+2      	; 0x36bc <USB_Device_ProcessControlRequest+0x1f2>
    36ba:	c0 96       	adiw	r24, 0x30	; 48
    36bc:	8d 93       	st	X+, r24
    36be:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    36c0:	2f 5f       	subi	r18, 0xFF	; 255
    36c2:	24 31       	cpi	r18, 0x14	; 20
    36c4:	49 f7       	brne	.-46     	; 0x3698 <USB_Device_ProcessControlRequest+0x1ce>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    36c6:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    36c8:	80 91 e8 00 	lds	r24, 0x00E8
    36cc:	87 7f       	andi	r24, 0xF7	; 247
    36ce:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    36d2:	6a e2       	ldi	r22, 0x2A	; 42
    36d4:	70 e0       	ldi	r23, 0x00	; 0
    36d6:	ce 01       	movw	r24, r28
    36d8:	01 96       	adiw	r24, 0x01	; 1
    36da:	0e 94 7f 17 	call	0x2efe	; 0x2efe <Endpoint_Write_Control_Stream_LE>
    36de:	13 c0       	rjmp	.+38     	; 0x3706 <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    36e0:	ae 01       	movw	r20, r28
    36e2:	45 5d       	subi	r20, 0xD5	; 213
    36e4:	5f 4f       	sbci	r21, 0xFF	; 255
    36e6:	60 91 fb 03 	lds	r22, 0x03FB
    36ea:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <CALLBACK_USB_GetDescriptor>
    36ee:	00 97       	sbiw	r24, 0x00	; 0
    36f0:	e9 f1       	breq	.+122    	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
    36f2:	20 91 e8 00 	lds	r18, 0x00E8
    36f6:	27 7f       	andi	r18, 0xF7	; 247
    36f8:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    36fc:	bc 01       	movw	r22, r24
    36fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3700:	9c a5       	ldd	r25, Y+44	; 0x2c
    3702:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3706:	80 91 e8 00 	lds	r24, 0x00E8
    370a:	8b 77       	andi	r24, 0x7B	; 123
    370c:	80 93 e8 00 	sts	0x00E8, r24
    3710:	2d c0       	rjmp	.+90     	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3712:	80 38       	cpi	r24, 0x80	; 128
    3714:	59 f5       	brne	.+86     	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3716:	80 91 e8 00 	lds	r24, 0x00E8
    371a:	87 7f       	andi	r24, 0xF7	; 247
    371c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3720:	80 91 f2 03 	lds	r24, 0x03F2
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3724:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3728:	80 91 e8 00 	lds	r24, 0x00E8
    372c:	8e 77       	andi	r24, 0x7E	; 126
    372e:	71 cf       	rjmp	.-286    	; 0x3612 <USB_Device_ProcessControlRequest+0x148>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3730:	81 11       	cpse	r24, r1
    3732:	1c c0       	rjmp	.+56     	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    3734:	90 91 f9 03 	lds	r25, 0x03F9
    3738:	92 30       	cpi	r25, 0x02	; 2
    373a:	c0 f4       	brcc	.+48     	; 0x376c <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    373c:	80 91 e8 00 	lds	r24, 0x00E8
    3740:	87 7f       	andi	r24, 0xF7	; 247
    3742:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    3746:	90 93 f2 03 	sts	0x03F2, r25

	Endpoint_ClearStatusStage();
    374a:	0e 94 71 18 	call	0x30e2	; 0x30e2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    374e:	80 91 f2 03 	lds	r24, 0x03F2
    3752:	81 11       	cpse	r24, r1
    3754:	04 c0       	rjmp	.+8      	; 0x375e <USB_Device_ProcessControlRequest+0x294>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3756:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    375a:	87 ff       	sbrs	r24, 7
    375c:	02 c0       	rjmp	.+4      	; 0x3762 <USB_Device_ProcessControlRequest+0x298>
    375e:	84 e0       	ldi	r24, 0x04	; 4
    3760:	01 c0       	rjmp	.+2      	; 0x3764 <USB_Device_ProcessControlRequest+0x29a>
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	80 93 f6 03 	sts	0x03F6, r24

	EVENT_USB_Device_ConfigurationChanged();
    3768:	0e 94 dd 15 	call	0x2bba	; 0x2bba <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    376c:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    3770:	83 ff       	sbrs	r24, 3
    3772:	0a c0       	rjmp	.+20     	; 0x3788 <USB_Device_ProcessControlRequest+0x2be>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3774:	80 91 e8 00 	lds	r24, 0x00E8
    3778:	87 7f       	andi	r24, 0xF7	; 247
    377a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    377e:	80 91 eb 00 	lds	r24, 0x00EB
    3782:	80 62       	ori	r24, 0x20	; 32
    3784:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    3788:	ac 96       	adiw	r28, 0x2c	; 44
    378a:	0f b6       	in	r0, 0x3f	; 63
    378c:	f8 94       	cli
    378e:	de bf       	out	0x3e, r29	; 62
    3790:	0f be       	out	0x3f, r0	; 63
    3792:	cd bf       	out	0x3d, r28	; 61
    3794:	df 91       	pop	r29
    3796:	cf 91       	pop	r28
    3798:	1f 91       	pop	r17
    379a:	08 95       	ret

0000379c <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    379c:	90 93 70 03 	sts	0x0370, r25
    37a0:	80 93 6f 03 	sts	0x036F, r24
    37a4:	08 95       	ret

000037a6 <host_get_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    37a6:	80 91 6f 03 	lds	r24, 0x036F
    37aa:	90 91 70 03 	lds	r25, 0x0370
    37ae:	08 95       	ret

000037b0 <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    37b0:	e0 91 6f 03 	lds	r30, 0x036F
    37b4:	f0 91 70 03 	lds	r31, 0x0370
    37b8:	30 97       	sbiw	r30, 0x00	; 0
    37ba:	21 f0       	breq	.+8      	; 0x37c4 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    37bc:	01 90       	ld	r0, Z+
    37be:	f0 81       	ld	r31, Z
    37c0:	e0 2d       	mov	r30, r0
    37c2:	09 94       	ijmp
}
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	08 95       	ret

000037c8 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    37c8:	cf 92       	push	r12
    37ca:	df 92       	push	r13
    37cc:	ef 92       	push	r14
    37ce:	ff 92       	push	r15
    37d0:	cf 93       	push	r28
    37d2:	d8 2e       	mov	r13, r24
    37d4:	c9 2f       	mov	r28, r25
    if (!driver) return;
    37d6:	e0 91 6f 03 	lds	r30, 0x036F
    37da:	f0 91 70 03 	lds	r31, 0x0370
    37de:	30 97       	sbiw	r30, 0x00	; 0
    37e0:	c1 f1       	breq	.+112    	; 0x3852 <host_keyboard_send+0x8a>
    (*driver->send_keyboard)(report);
    37e2:	02 80       	ldd	r0, Z+2	; 0x02
    37e4:	f3 81       	ldd	r31, Z+3	; 0x03
    37e6:	e0 2d       	mov	r30, r0
    37e8:	09 95       	icall

    if (debug_keyboard) {
    37ea:	80 91 e1 03 	lds	r24, 0x03E1
    37ee:	82 ff       	sbrs	r24, 2
    37f0:	30 c0       	rjmp	.+96     	; 0x3852 <host_keyboard_send+0x8a>
        dprint("keyboard_report: ");
    37f2:	80 ff       	sbrs	r24, 0
    37f4:	04 c0       	rjmp	.+8      	; 0x37fe <host_keyboard_send+0x36>
    37f6:	80 e2       	ldi	r24, 0x20	; 32
    37f8:	99 e0       	ldi	r25, 0x09	; 9
    37fa:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    37fe:	ed 2c       	mov	r14, r13
    3800:	fc 2e       	mov	r15, r28
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    3802:	c8 e0       	ldi	r28, 0x08	; 8
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    3804:	82 e3       	ldi	r24, 0x32	; 50
    3806:	c8 2e       	mov	r12, r24
    3808:	89 e0       	ldi	r24, 0x09	; 9
    380a:	d8 2e       	mov	r13, r24
    380c:	80 91 e1 03 	lds	r24, 0x03E1
    3810:	80 ff       	sbrs	r24, 0
    3812:	0c c0       	rjmp	.+24     	; 0x382c <host_keyboard_send+0x64>
    3814:	f7 01       	movw	r30, r14
    3816:	80 81       	ld	r24, Z
    3818:	1f 92       	push	r1
    381a:	8f 93       	push	r24
    381c:	df 92       	push	r13
    381e:	cf 92       	push	r12
    3820:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    3824:	0f 90       	pop	r0
    3826:	0f 90       	pop	r0
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	c1 50       	subi	r28, 0x01	; 1
    382e:	ff ef       	ldi	r31, 0xFF	; 255
    3830:	ef 1a       	sub	r14, r31
    3832:	ff 0a       	sbc	r15, r31
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    3834:	c1 11       	cpse	r28, r1
    3836:	ea cf       	rjmp	.-44     	; 0x380c <host_keyboard_send+0x44>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    3838:	80 91 e1 03 	lds	r24, 0x03E1
    383c:	80 ff       	sbrs	r24, 0
    383e:	09 c0       	rjmp	.+18     	; 0x3852 <host_keyboard_send+0x8a>
    3840:	88 e3       	ldi	r24, 0x38	; 56
    3842:	99 e0       	ldi	r25, 0x09	; 9
    }
}
    3844:	cf 91       	pop	r28
    3846:	ff 90       	pop	r15
    3848:	ef 90       	pop	r14
    384a:	df 90       	pop	r13
    384c:	cf 90       	pop	r12
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    384e:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <xputs>
    }
}
    3852:	cf 91       	pop	r28
    3854:	ff 90       	pop	r15
    3856:	ef 90       	pop	r14
    3858:	df 90       	pop	r13
    385a:	cf 90       	pop	r12
    385c:	08 95       	ret

0000385e <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    385e:	e0 91 6f 03 	lds	r30, 0x036F
    3862:	f0 91 70 03 	lds	r31, 0x0370
    3866:	30 97       	sbiw	r30, 0x00	; 0
    3868:	21 f0       	breq	.+8      	; 0x3872 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    386a:	04 80       	ldd	r0, Z+4	; 0x04
    386c:	f5 81       	ldd	r31, Z+5	; 0x05
    386e:	e0 2d       	mov	r30, r0
    3870:	09 94       	ijmp
    3872:	08 95       	ret

00003874 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    3874:	20 91 71 03 	lds	r18, 0x0371
    3878:	30 91 72 03 	lds	r19, 0x0372
    387c:	82 17       	cp	r24, r18
    387e:	93 07       	cpc	r25, r19
    3880:	71 f0       	breq	.+28     	; 0x389e <host_system_send+0x2a>
    last_system_report = report;
    3882:	90 93 72 03 	sts	0x0372, r25
    3886:	80 93 71 03 	sts	0x0371, r24

    if (!driver) return;
    388a:	e0 91 6f 03 	lds	r30, 0x036F
    388e:	f0 91 70 03 	lds	r31, 0x0370
    3892:	30 97       	sbiw	r30, 0x00	; 0
    3894:	21 f0       	breq	.+8      	; 0x389e <host_system_send+0x2a>
    (*driver->send_system)(report);
    3896:	06 80       	ldd	r0, Z+6	; 0x06
    3898:	f7 81       	ldd	r31, Z+7	; 0x07
    389a:	e0 2d       	mov	r30, r0
    389c:	09 94       	ijmp
    389e:	08 95       	ret

000038a0 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    38a0:	20 91 73 03 	lds	r18, 0x0373
    38a4:	30 91 74 03 	lds	r19, 0x0374
    38a8:	82 17       	cp	r24, r18
    38aa:	93 07       	cpc	r25, r19
    38ac:	71 f0       	breq	.+28     	; 0x38ca <host_consumer_send+0x2a>
    last_consumer_report = report;
    38ae:	90 93 74 03 	sts	0x0374, r25
    38b2:	80 93 73 03 	sts	0x0373, r24

    if (!driver) return;
    38b6:	e0 91 6f 03 	lds	r30, 0x036F
    38ba:	f0 91 70 03 	lds	r31, 0x0370
    38be:	30 97       	sbiw	r30, 0x00	; 0
    38c0:	21 f0       	breq	.+8      	; 0x38ca <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    38c2:	00 84       	ldd	r0, Z+8	; 0x08
    38c4:	f1 85       	ldd	r31, Z+9	; 0x09
    38c6:	e0 2d       	mov	r30, r0
    38c8:	09 94       	ijmp
    38ca:	08 95       	ret

000038cc <keyboard_init>:
    matrix_setup();
}

void keyboard_init(void)
{
    timer_init();
    38cc:	0e 94 89 28 	call	0x5112	; 0x5112 <timer_init>
    matrix_init();
    38d0:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <matrix_init>

000038d4 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    38d4:	2f 92       	push	r2
    38d6:	3f 92       	push	r3
    38d8:	4f 92       	push	r4
    38da:	5f 92       	push	r5
    38dc:	6f 92       	push	r6
    38de:	7f 92       	push	r7
    38e0:	8f 92       	push	r8
    38e2:	9f 92       	push	r9
    38e4:	af 92       	push	r10
    38e6:	bf 92       	push	r11
    38e8:	cf 92       	push	r12
    38ea:	df 92       	push	r13
    38ec:	ef 92       	push	r14
    38ee:	ff 92       	push	r15
    38f0:	0f 93       	push	r16
    38f2:	1f 93       	push	r17
    38f4:	cf 93       	push	r28
    38f6:	df 93       	push	r29
    38f8:	00 d0       	rcall	.+0      	; 0x38fa <keyboard_task+0x26>
    38fa:	00 d0       	rcall	.+0      	; 0x38fc <keyboard_task+0x28>
    38fc:	1f 92       	push	r1
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    3902:	0e 94 99 09 	call	0x1332	; 0x1332 <matrix_scan>
    3906:	95 e7       	ldi	r25, 0x75	; 117
    3908:	49 2e       	mov	r4, r25
    390a:	93 e0       	ldi	r25, 0x03	; 3
    390c:	59 2e       	mov	r5, r25
    390e:	25 e8       	ldi	r18, 0x85	; 133
    3910:	a2 2e       	mov	r10, r18
    3912:	23 e0       	ldi	r18, 0x03	; 3
    3914:	b2 2e       	mov	r11, r18
    3916:	e1 2c       	mov	r14, r1
    3918:	f1 2c       	mov	r15, r1
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    391a:	22 24       	eor	r2, r2
    391c:	23 94       	inc	r2
    391e:	31 2c       	mov	r3, r1
    3920:	0e 2d       	mov	r16, r14
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    3922:	8e 2d       	mov	r24, r14
    3924:	0e 94 cb 0a 	call	0x1596	; 0x1596 <matrix_get_row>
    3928:	6c 01       	movw	r12, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    392a:	f2 01       	movw	r30, r4
    392c:	81 90       	ld	r8, Z+
    392e:	91 90       	ld	r9, Z+
    3930:	2f 01       	movw	r4, r30
    3932:	88 26       	eor	r8, r24
    3934:	99 26       	eor	r9, r25
        if (matrix_change) {
    3936:	81 14       	cp	r8, r1
    3938:	91 04       	cpc	r9, r1
    393a:	09 f4       	brne	.+2      	; 0x393e <keyboard_task+0x6a>
    393c:	61 c0       	rjmp	.+194    	; 0x3a00 <keyboard_task+0x12c>


#ifdef MATRIX_HAS_GHOST
static bool has_ghost_in_row(uint8_t row)
{
    matrix_row_t matrix_row = matrix_get_row(row);
    393e:	8e 2d       	mov	r24, r14
    3940:	0e 94 cb 0a 	call	0x1596	; 0x1596 <matrix_get_row>
    3944:	3c 01       	movw	r6, r24
    // No ghost exists when less than 2 keys are down on the row
    if (((matrix_row - 1) & matrix_row) == 0)
    3946:	01 97       	sbiw	r24, 0x01	; 1
    3948:	86 21       	and	r24, r6
    394a:	97 21       	and	r25, r7
    394c:	89 2b       	or	r24, r25
    394e:	09 f4       	brne	.+2      	; 0x3952 <keyboard_task+0x7e>
    3950:	ad c0       	rjmp	.+346    	; 0x3aac <keyboard_task+0x1d8>
    3952:	10 e0       	ldi	r17, 0x00	; 0
        return false;

    // Ghost occurs when the row shares column line with other row
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        if (i != row && (matrix_get_row(i) & matrix_row))
    3954:	10 13       	cpse	r17, r16
    3956:	04 c0       	rjmp	.+8      	; 0x3960 <keyboard_task+0x8c>
    // No ghost exists when less than 2 keys are down on the row
    if (((matrix_row - 1) & matrix_row) == 0)
        return false;

    // Ghost occurs when the row shares column line with other row
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    3958:	1f 5f       	subi	r17, 0xFF	; 255
    395a:	18 30       	cpi	r17, 0x08	; 8
    395c:	d9 f7       	brne	.-10     	; 0x3954 <keyboard_task+0x80>
    395e:	a6 c0       	rjmp	.+332    	; 0x3aac <keyboard_task+0x1d8>
        if (i != row && (matrix_get_row(i) & matrix_row))
    3960:	81 2f       	mov	r24, r17
    3962:	0e 94 cb 0a 	call	0x1596	; 0x1596 <matrix_get_row>
    3966:	86 21       	and	r24, r6
    3968:	97 21       	and	r25, r7
    396a:	89 2b       	or	r24, r25
    396c:	a9 f3       	breq	.-22     	; 0x3958 <keyboard_task+0x84>
    396e:	a6 c0       	rjmp	.+332    	; 0x3abc <keyboard_task+0x1e8>
            if (has_ghost_in_row(r)) {
                /* Keep track of whether ghosted status has changed for
                 * debugging. But don't update matrix_prev until un-ghosted, or
                 * the last key would be lost.
                 */
                if (debug_matrix && matrix_ghost[r] != matrix_row) {
    3970:	f5 01       	movw	r30, r10
    3972:	80 81       	ld	r24, Z
    3974:	91 81       	ldd	r25, Z+1	; 0x01
    3976:	8c 15       	cp	r24, r12
    3978:	9d 05       	cpc	r25, r13
    397a:	11 f0       	breq	.+4      	; 0x3980 <keyboard_task+0xac>
                    matrix_print();
    397c:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <matrix_print>
                }
                matrix_ghost[r] = matrix_row;
    3980:	f5 01       	movw	r30, r10
    3982:	d1 82       	std	Z+1, r13	; 0x01
    3984:	c0 82       	st	Z, r12
                continue;
    3986:	3c c0       	rjmp	.+120    	; 0x3a00 <keyboard_task+0x12c>
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    3988:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <matrix_print>
#ifdef MATRIX_HAS_GHOST
static bool has_ghost_in_row(uint8_t row)
{
    matrix_row_t matrix_row = matrix_get_row(row);
    // No ghost exists when less than 2 keys are down on the row
    if (((matrix_row - 1) & matrix_row) == 0)
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	90 e0       	ldi	r25, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    3990:	31 01       	movw	r6, r2
    3992:	08 2e       	mov	r0, r24
    3994:	02 c0       	rjmp	.+4      	; 0x399a <keyboard_task+0xc6>
    3996:	66 0c       	add	r6, r6
    3998:	77 1c       	adc	r7, r7
    399a:	0a 94       	dec	r0
    399c:	e2 f7       	brpl	.-8      	; 0x3996 <keyboard_task+0xc2>
    399e:	93 01       	movw	r18, r6
    39a0:	28 21       	and	r18, r8
    39a2:	39 21       	and	r19, r9
    39a4:	23 2b       	or	r18, r19
    39a6:	41 f1       	breq	.+80     	; 0x39f8 <keyboard_task+0x124>
                    keyevent_t e = (keyevent_t){
    39a8:	89 83       	std	Y+1, r24	; 0x01
    39aa:	0a 83       	std	Y+2, r16	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    39ac:	c6 20       	and	r12, r6
    39ae:	d7 20       	and	r13, r7
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	cd 28       	or	r12, r13
    39b4:	09 f4       	brne	.+2      	; 0x39b8 <keyboard_task+0xe4>
    39b6:	80 e0       	ldi	r24, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    39b8:	8b 83       	std	Y+3, r24	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    39ba:	0e 94 92 28 	call	0x5124	; 0x5124 <timer_read>
    39be:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    39c0:	78 2f       	mov	r23, r24
    39c2:	9d 83       	std	Y+5, r25	; 0x05
    39c4:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    39c6:	49 81       	ldd	r20, Y+1	; 0x01
    39c8:	5a 81       	ldd	r21, Y+2	; 0x02
    39ca:	6b 81       	ldd	r22, Y+3	; 0x03
    39cc:	8d 81       	ldd	r24, Y+5	; 0x05
    39ce:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <action_exec>
                    hook_matrix_change(e);
    39d2:	49 81       	ldd	r20, Y+1	; 0x01
    39d4:	5a 81       	ldd	r21, Y+2	; 0x02
    39d6:	6b 81       	ldd	r22, Y+3	; 0x03
    39d8:	7c 81       	ldd	r23, Y+4	; 0x04
    39da:	8d 81       	ldd	r24, Y+5	; 0x05
    39dc:	0e 94 0e 28 	call	0x501c	; 0x501c <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    39e0:	f7 01       	movw	r30, r14
    39e2:	ee 0f       	add	r30, r30
    39e4:	ff 1f       	adc	r31, r31
    39e6:	eb 58       	subi	r30, 0x8B	; 139
    39e8:	fc 4f       	sbci	r31, 0xFC	; 252
    39ea:	80 81       	ld	r24, Z
    39ec:	91 81       	ldd	r25, Z+1	; 0x01
    39ee:	86 25       	eor	r24, r6
    39f0:	97 25       	eor	r25, r7
    39f2:	91 83       	std	Z+1, r25	; 0x01
    39f4:	80 83       	st	Z, r24
    39f6:	1f c0       	rjmp	.+62     	; 0x3a36 <keyboard_task+0x162>
    39f8:	01 96       	adiw	r24, 0x01	; 1
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    39fa:	80 31       	cpi	r24, 0x10	; 16
    39fc:	91 05       	cpc	r25, r1
    39fe:	41 f6       	brne	.-112    	; 0x3990 <keyboard_task+0xbc>
    3a00:	ff ef       	ldi	r31, 0xFF	; 255
    3a02:	ef 1a       	sub	r14, r31
    3a04:	ff 0a       	sbc	r15, r31
    3a06:	82 e0       	ldi	r24, 0x02	; 2
    3a08:	a8 0e       	add	r10, r24
    3a0a:	b1 1c       	adc	r11, r1
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3a0c:	e8 e0       	ldi	r30, 0x08	; 8
    3a0e:	ee 16       	cp	r14, r30
    3a10:	f1 04       	cpc	r15, r1
    3a12:	09 f0       	breq	.+2      	; 0x3a16 <keyboard_task+0x142>
    3a14:	85 cf       	rjmp	.-246    	; 0x3920 <keyboard_task+0x4c>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    3a16:	8f ef       	ldi	r24, 0xFF	; 255
    3a18:	89 83       	std	Y+1, r24	; 0x01
    3a1a:	8a 83       	std	Y+2, r24	; 0x02
    3a1c:	1b 82       	std	Y+3, r1	; 0x03
    3a1e:	0e 94 92 28 	call	0x5124	; 0x5124 <timer_read>
    3a22:	81 60       	ori	r24, 0x01	; 1
    3a24:	78 2f       	mov	r23, r24
    3a26:	9d 83       	std	Y+5, r25	; 0x05
    3a28:	8c 83       	std	Y+4, r24	; 0x04
    3a2a:	49 81       	ldd	r20, Y+1	; 0x01
    3a2c:	5a 81       	ldd	r21, Y+2	; 0x02
    3a2e:	6b 81       	ldd	r22, Y+3	; 0x03
    3a30:	8d 81       	ldd	r24, Y+5	; 0x05
    3a32:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <action_exec>

MATRIX_LOOP_END:

    hook_keyboard_loop();
    3a36:	0e 94 0d 28 	call	0x501a	; 0x501a <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    3a3a:	0e 94 f3 2b 	call	0x57e6	; 0x57e6 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    3a3e:	10 91 95 03 	lds	r17, 0x0395
    3a42:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <host_keyboard_leds>
    3a46:	18 17       	cp	r17, r24
    3a48:	f1 f1       	breq	.+124    	; 0x3ac6 <keyboard_task+0x1f2>
        led_status = host_keyboard_leds();
    3a4a:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <host_keyboard_leds>
    3a4e:	80 93 95 03 	sts	0x0395, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    3a52:	90 91 e1 03 	lds	r25, 0x03E1
    3a56:	92 ff       	sbrs	r25, 2
    3a58:	0e c0       	rjmp	.+28     	; 0x3a76 <keyboard_task+0x1a2>
    3a5a:	90 ff       	sbrs	r25, 0
    3a5c:	0c c0       	rjmp	.+24     	; 0x3a76 <keyboard_task+0x1a2>
    3a5e:	1f 92       	push	r1
    3a60:	8f 93       	push	r24
    3a62:	8a e3       	ldi	r24, 0x3A	; 58
    3a64:	99 e0       	ldi	r25, 0x09	; 9
    3a66:	9f 93       	push	r25
    3a68:	8f 93       	push	r24
    3a6a:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	0f 90       	pop	r0
    3a74:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    3a76:	80 91 95 03 	lds	r24, 0x0395
    }
}
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	0f 90       	pop	r0
    3a80:	0f 90       	pop	r0
    3a82:	0f 90       	pop	r0
    3a84:	df 91       	pop	r29
    3a86:	cf 91       	pop	r28
    3a88:	1f 91       	pop	r17
    3a8a:	0f 91       	pop	r16
    3a8c:	ff 90       	pop	r15
    3a8e:	ef 90       	pop	r14
    3a90:	df 90       	pop	r13
    3a92:	cf 90       	pop	r12
    3a94:	bf 90       	pop	r11
    3a96:	af 90       	pop	r10
    3a98:	9f 90       	pop	r9
    3a9a:	8f 90       	pop	r8
    3a9c:	7f 90       	pop	r7
    3a9e:	6f 90       	pop	r6
    3aa0:	5f 90       	pop	r5
    3aa2:	4f 90       	pop	r4
    3aa4:	3f 90       	pop	r3
    3aa6:	2f 90       	pop	r2

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    3aa8:	0c 94 1f 28 	jmp	0x503e	; 0x503e <hook_keyboard_leds_change>
                    matrix_print();
                }
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
    3aac:	f5 01       	movw	r30, r10
    3aae:	d1 82       	std	Z+1, r13	; 0x01
    3ab0:	c0 82       	st	Z, r12
#endif
            if (debug_matrix) matrix_print();
    3ab2:	80 91 e1 03 	lds	r24, 0x03E1
    3ab6:	81 ff       	sbrs	r24, 1
    3ab8:	69 cf       	rjmp	.-302    	; 0x398c <keyboard_task+0xb8>
    3aba:	66 cf       	rjmp	.-308    	; 0x3988 <keyboard_task+0xb4>
            if (has_ghost_in_row(r)) {
                /* Keep track of whether ghosted status has changed for
                 * debugging. But don't update matrix_prev until un-ghosted, or
                 * the last key would be lost.
                 */
                if (debug_matrix && matrix_ghost[r] != matrix_row) {
    3abc:	80 91 e1 03 	lds	r24, 0x03E1
    3ac0:	81 fd       	sbrc	r24, 1
    3ac2:	56 cf       	rjmp	.-340    	; 0x3970 <keyboard_task+0x9c>
    3ac4:	5d cf       	rjmp	.-326    	; 0x3980 <keyboard_task+0xac>
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    }
}
    3ac6:	0f 90       	pop	r0
    3ac8:	0f 90       	pop	r0
    3aca:	0f 90       	pop	r0
    3acc:	0f 90       	pop	r0
    3ace:	0f 90       	pop	r0
    3ad0:	df 91       	pop	r29
    3ad2:	cf 91       	pop	r28
    3ad4:	1f 91       	pop	r17
    3ad6:	0f 91       	pop	r16
    3ad8:	ff 90       	pop	r15
    3ada:	ef 90       	pop	r14
    3adc:	df 90       	pop	r13
    3ade:	cf 90       	pop	r12
    3ae0:	bf 90       	pop	r11
    3ae2:	af 90       	pop	r10
    3ae4:	9f 90       	pop	r9
    3ae6:	8f 90       	pop	r8
    3ae8:	7f 90       	pop	r7
    3aea:	6f 90       	pop	r6
    3aec:	5f 90       	pop	r5
    3aee:	4f 90       	pop	r4
    3af0:	3f 90       	pop	r3
    3af2:	2f 90       	pop	r2
    3af4:	08 95       	ret

00003af6 <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    3af6:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <led_set>

00003afa <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    3afa:	cf 93       	push	r28
    3afc:	df 93       	push	r29
    3afe:	cd b7       	in	r28, 0x3d	; 61
    3b00:	de b7       	in	r29, 0x3e	; 62
    3b02:	2b 97       	sbiw	r28, 0x0b	; 11
    3b04:	0f b6       	in	r0, 0x3f	; 63
    3b06:	f8 94       	cli
    3b08:	de bf       	out	0x3e, r29	; 62
    3b0a:	0f be       	out	0x3f, r0	; 63
    3b0c:	cd bf       	out	0x3d, r28	; 61
    3b0e:	4f 83       	std	Y+7, r20	; 0x07
    3b10:	58 87       	std	Y+8, r21	; 0x08
    3b12:	69 87       	std	Y+9, r22	; 0x09
    3b14:	7a 87       	std	Y+10, r23	; 0x0a
    3b16:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3b18:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b1c:	89 2b       	or	r24, r25
    3b1e:	39 f0       	breq	.+14     	; 0x3b2e <action_exec+0x34>
    3b20:	5f 3f       	cpi	r21, 0xFF	; 255
    3b22:	41 f4       	brne	.+16     	; 0x3b34 <action_exec+0x3a>
    3b24:	81 e0       	ldi	r24, 0x01	; 1
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	4f 3f       	cpi	r20, 0xFF	; 255
    3b2a:	31 f0       	breq	.+12     	; 0x3b38 <action_exec+0x3e>
    3b2c:	03 c0       	rjmp	.+6      	; 0x3b34 <action_exec+0x3a>
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	02 c0       	rjmp	.+4      	; 0x3b38 <action_exec+0x3e>
    3b34:	80 e0       	ldi	r24, 0x00	; 0
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    if (!IS_NOEVENT(event)) {
    3b38:	80 fd       	sbrc	r24, 0
    3b3a:	07 c0       	rjmp	.+14     	; 0x3b4a <action_exec+0x50>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    3b3c:	4f 81       	ldd	r20, Y+7	; 0x07
    3b3e:	58 85       	ldd	r21, Y+8	; 0x08
    3b40:	69 85       	ldd	r22, Y+9	; 0x09
    3b42:	7a 85       	ldd	r23, Y+10	; 0x0a
    3b44:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b46:	0e 94 0e 28 	call	0x501c	; 0x501c <hook_matrix_change>
    }

    keyrecord_t record = { .event = event };
    3b4a:	de 01       	movw	r26, r28
    3b4c:	11 96       	adiw	r26, 0x01	; 1
    3b4e:	86 e0       	ldi	r24, 0x06	; 6
    3b50:	fd 01       	movw	r30, r26
    3b52:	11 92       	st	Z+, r1
    3b54:	8a 95       	dec	r24
    3b56:	e9 f7       	brne	.-6      	; 0x3b52 <action_exec+0x58>
    3b58:	85 e0       	ldi	r24, 0x05	; 5
    3b5a:	fe 01       	movw	r30, r28
    3b5c:	37 96       	adiw	r30, 0x07	; 7
    3b5e:	01 90       	ld	r0, Z+
    3b60:	0d 92       	st	X+, r0
    3b62:	8a 95       	dec	r24
    3b64:	e1 f7       	brne	.-8      	; 0x3b5e <action_exec+0x64>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    3b66:	49 81       	ldd	r20, Y+1	; 0x01
    3b68:	5a 81       	ldd	r21, Y+2	; 0x02
    3b6a:	6b 81       	ldd	r22, Y+3	; 0x03
    3b6c:	7c 81       	ldd	r23, Y+4	; 0x04
    3b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b70:	9e 81       	ldd	r25, Y+6	; 0x06
    3b72:	0e 94 ac 24 	call	0x4958	; 0x4958 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    3b76:	2b 96       	adiw	r28, 0x0b	; 11
    3b78:	0f b6       	in	r0, 0x3f	; 63
    3b7a:	f8 94       	cli
    3b7c:	de bf       	out	0x3e, r29	; 62
    3b7e:	0f be       	out	0x3f, r0	; 63
    3b80:	cd bf       	out	0x3d, r28	; 61
    3b82:	df 91       	pop	r29
    3b84:	cf 91       	pop	r28
    3b86:	08 95       	ret

00003b88 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    3b88:	cf 93       	push	r28
    3b8a:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    3b8c:	88 23       	and	r24, r24
    3b8e:	09 f4       	brne	.+2      	; 0x3b92 <register_code+0xa>
    3b90:	a3 c0       	rjmp	.+326    	; 0x3cd8 <register_code+0x150>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    3b92:	84 50       	subi	r24, 0x04	; 4
    3b94:	81 3a       	cpi	r24, 0xA1	; 161
    3b96:	48 f4       	brcc	.+18     	; 0x3baa <register_code+0x22>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    3b98:	8c 2f       	mov	r24, r28
    3b9a:	0e 94 0a 2f 	call	0x5e14	; 0x5e14 <command_proc>
    3b9e:	81 11       	cpse	r24, r1
    3ba0:	9b c0       	rjmp	.+310    	; 0x3cd8 <register_code+0x150>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    3ba2:	8c 2f       	mov	r24, r28
    3ba4:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <add_key>
    3ba8:	0d c0       	rjmp	.+26     	; 0x3bc4 <register_code+0x3c>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    3baa:	8c 2f       	mov	r24, r28
    3bac:	80 5e       	subi	r24, 0xE0	; 224
    3bae:	88 30       	cpi	r24, 0x08	; 8
    3bb0:	60 f4       	brcc	.+24     	; 0x3bca <register_code+0x42>
        add_mods(MOD_BIT(code));
    3bb2:	c7 70       	andi	r28, 0x07	; 7
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	01 c0       	rjmp	.+2      	; 0x3bbc <register_code+0x34>
    3bba:	88 0f       	add	r24, r24
    3bbc:	ca 95       	dec	r28
    3bbe:	ea f7       	brpl	.-6      	; 0x3bba <register_code+0x32>
    3bc0:	0e 94 7d 27 	call	0x4efa	; 0x4efa <add_mods>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    3bc4:	cf 91       	pop	r28
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    3bc6:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    3bca:	8c 2f       	mov	r24, r28
    3bcc:	85 5a       	subi	r24, 0xA5	; 165
    3bce:	83 30       	cpi	r24, 0x03	; 3
    3bd0:	78 f4       	brcc	.+30     	; 0x3bf0 <register_code+0x68>
        host_system_send(KEYCODE2SYSTEM(code));
    3bd2:	c5 3a       	cpi	r28, 0xA5	; 165
    3bd4:	29 f0       	breq	.+10     	; 0x3be0 <register_code+0x58>
    3bd6:	c6 3a       	cpi	r28, 0xA6	; 166
    3bd8:	31 f4       	brne	.+12     	; 0x3be6 <register_code+0x5e>
    3bda:	82 e8       	ldi	r24, 0x82	; 130
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	05 c0       	rjmp	.+10     	; 0x3bea <register_code+0x62>
    3be0:	81 e8       	ldi	r24, 0x81	; 129
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	02 c0       	rjmp	.+4      	; 0x3bea <register_code+0x62>
    3be6:	83 e8       	ldi	r24, 0x83	; 131
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    3bea:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    3bec:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    3bf0:	8c 2f       	mov	r24, r28
    3bf2:	88 5a       	subi	r24, 0xA8	; 168
    3bf4:	85 31       	cpi	r24, 0x15	; 21
    3bf6:	08 f0       	brcs	.+2      	; 0x3bfa <register_code+0x72>
    3bf8:	6f c0       	rjmp	.+222    	; 0x3cd8 <register_code+0x150>
        host_consumer_send(KEYCODE2CONSUMER(code));
    3bfa:	c8 3a       	cpi	r28, 0xA8	; 168
    3bfc:	61 f1       	breq	.+88     	; 0x3c56 <register_code+0xce>
    3bfe:	c9 3a       	cpi	r28, 0xA9	; 169
    3c00:	69 f1       	breq	.+90     	; 0x3c5c <register_code+0xd4>
    3c02:	ca 3a       	cpi	r28, 0xAA	; 170
    3c04:	71 f1       	breq	.+92     	; 0x3c62 <register_code+0xda>
    3c06:	cb 3a       	cpi	r28, 0xAB	; 171
    3c08:	79 f1       	breq	.+94     	; 0x3c68 <register_code+0xe0>
    3c0a:	cc 3a       	cpi	r28, 0xAC	; 172
    3c0c:	81 f1       	breq	.+96     	; 0x3c6e <register_code+0xe6>
    3c0e:	cd 3a       	cpi	r28, 0xAD	; 173
    3c10:	89 f1       	breq	.+98     	; 0x3c74 <register_code+0xec>
    3c12:	ce 3a       	cpi	r28, 0xAE	; 174
    3c14:	91 f1       	breq	.+100    	; 0x3c7a <register_code+0xf2>
    3c16:	cf 3a       	cpi	r28, 0xAF	; 175
    3c18:	99 f1       	breq	.+102    	; 0x3c80 <register_code+0xf8>
    3c1a:	c1 3b       	cpi	r28, 0xB1	; 177
    3c1c:	a1 f1       	breq	.+104    	; 0x3c86 <register_code+0xfe>
    3c1e:	c0 3b       	cpi	r28, 0xB0	; 176
    3c20:	a9 f1       	breq	.+106    	; 0x3c8c <register_code+0x104>
    3c22:	c2 3b       	cpi	r28, 0xB2	; 178
    3c24:	b1 f1       	breq	.+108    	; 0x3c92 <register_code+0x10a>
    3c26:	c3 3b       	cpi	r28, 0xB3	; 179
    3c28:	b9 f1       	breq	.+110    	; 0x3c98 <register_code+0x110>
    3c2a:	c4 3b       	cpi	r28, 0xB4	; 180
    3c2c:	c1 f1       	breq	.+112    	; 0x3c9e <register_code+0x116>
    3c2e:	c5 3b       	cpi	r28, 0xB5	; 181
    3c30:	c9 f1       	breq	.+114    	; 0x3ca4 <register_code+0x11c>
    3c32:	c6 3b       	cpi	r28, 0xB6	; 182
    3c34:	d1 f1       	breq	.+116    	; 0x3caa <register_code+0x122>
    3c36:	c7 3b       	cpi	r28, 0xB7	; 183
    3c38:	d9 f1       	breq	.+118    	; 0x3cb0 <register_code+0x128>
    3c3a:	c8 3b       	cpi	r28, 0xB8	; 184
    3c3c:	e1 f1       	breq	.+120    	; 0x3cb6 <register_code+0x12e>
    3c3e:	c9 3b       	cpi	r28, 0xB9	; 185
    3c40:	e9 f1       	breq	.+122    	; 0x3cbc <register_code+0x134>
    3c42:	ca 3b       	cpi	r28, 0xBA	; 186
    3c44:	f1 f1       	breq	.+124    	; 0x3cc2 <register_code+0x13a>
    3c46:	cb 3b       	cpi	r28, 0xBB	; 187
    3c48:	f9 f1       	breq	.+126    	; 0x3cc8 <register_code+0x140>
    3c4a:	cc 3b       	cpi	r28, 0xBC	; 188
    3c4c:	09 f0       	breq	.+2      	; 0x3c50 <register_code+0xc8>
    3c4e:	3f c0       	rjmp	.+126    	; 0x3cce <register_code+0x146>
    3c50:	8a e2       	ldi	r24, 0x2A	; 42
    3c52:	92 e0       	ldi	r25, 0x02	; 2
    3c54:	3e c0       	rjmp	.+124    	; 0x3cd2 <register_code+0x14a>
    3c56:	82 ee       	ldi	r24, 0xE2	; 226
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	3b c0       	rjmp	.+118    	; 0x3cd2 <register_code+0x14a>
    3c5c:	89 ee       	ldi	r24, 0xE9	; 233
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	38 c0       	rjmp	.+112    	; 0x3cd2 <register_code+0x14a>
    3c62:	8a ee       	ldi	r24, 0xEA	; 234
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	35 c0       	rjmp	.+106    	; 0x3cd2 <register_code+0x14a>
    3c68:	85 eb       	ldi	r24, 0xB5	; 181
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	32 c0       	rjmp	.+100    	; 0x3cd2 <register_code+0x14a>
    3c6e:	86 eb       	ldi	r24, 0xB6	; 182
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	2f c0       	rjmp	.+94     	; 0x3cd2 <register_code+0x14a>
    3c74:	83 eb       	ldi	r24, 0xB3	; 179
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	2c c0       	rjmp	.+88     	; 0x3cd2 <register_code+0x14a>
    3c7a:	84 eb       	ldi	r24, 0xB4	; 180
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	29 c0       	rjmp	.+82     	; 0x3cd2 <register_code+0x14a>
    3c80:	87 eb       	ldi	r24, 0xB7	; 183
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	26 c0       	rjmp	.+76     	; 0x3cd2 <register_code+0x14a>
    3c86:	8c ec       	ldi	r24, 0xCC	; 204
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	23 c0       	rjmp	.+70     	; 0x3cd2 <register_code+0x14a>
    3c8c:	8d ec       	ldi	r24, 0xCD	; 205
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	20 c0       	rjmp	.+64     	; 0x3cd2 <register_code+0x14a>
    3c92:	83 e8       	ldi	r24, 0x83	; 131
    3c94:	91 e0       	ldi	r25, 0x01	; 1
    3c96:	1d c0       	rjmp	.+58     	; 0x3cd2 <register_code+0x14a>
    3c98:	8a e8       	ldi	r24, 0x8A	; 138
    3c9a:	91 e0       	ldi	r25, 0x01	; 1
    3c9c:	1a c0       	rjmp	.+52     	; 0x3cd2 <register_code+0x14a>
    3c9e:	82 e9       	ldi	r24, 0x92	; 146
    3ca0:	91 e0       	ldi	r25, 0x01	; 1
    3ca2:	17 c0       	rjmp	.+46     	; 0x3cd2 <register_code+0x14a>
    3ca4:	84 e9       	ldi	r24, 0x94	; 148
    3ca6:	91 e0       	ldi	r25, 0x01	; 1
    3ca8:	14 c0       	rjmp	.+40     	; 0x3cd2 <register_code+0x14a>
    3caa:	81 e2       	ldi	r24, 0x21	; 33
    3cac:	92 e0       	ldi	r25, 0x02	; 2
    3cae:	11 c0       	rjmp	.+34     	; 0x3cd2 <register_code+0x14a>
    3cb0:	83 e2       	ldi	r24, 0x23	; 35
    3cb2:	92 e0       	ldi	r25, 0x02	; 2
    3cb4:	0e c0       	rjmp	.+28     	; 0x3cd2 <register_code+0x14a>
    3cb6:	84 e2       	ldi	r24, 0x24	; 36
    3cb8:	92 e0       	ldi	r25, 0x02	; 2
    3cba:	0b c0       	rjmp	.+22     	; 0x3cd2 <register_code+0x14a>
    3cbc:	85 e2       	ldi	r24, 0x25	; 37
    3cbe:	92 e0       	ldi	r25, 0x02	; 2
    3cc0:	08 c0       	rjmp	.+16     	; 0x3cd2 <register_code+0x14a>
    3cc2:	86 e2       	ldi	r24, 0x26	; 38
    3cc4:	92 e0       	ldi	r25, 0x02	; 2
    3cc6:	05 c0       	rjmp	.+10     	; 0x3cd2 <register_code+0x14a>
    3cc8:	87 e2       	ldi	r24, 0x27	; 39
    3cca:	92 e0       	ldi	r25, 0x02	; 2
    3ccc:	02 c0       	rjmp	.+4      	; 0x3cd2 <register_code+0x14a>
    3cce:	80 e0       	ldi	r24, 0x00	; 0
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    3cd2:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    3cd4:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <host_consumer_send>
    }
}
    3cd8:	cf 91       	pop	r28
    3cda:	08 95       	ret

00003cdc <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    3cdc:	88 23       	and	r24, r24
    3cde:	31 f1       	breq	.+76     	; 0x3d2c <unregister_code+0x50>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    3ce0:	98 2f       	mov	r25, r24
    3ce2:	94 50       	subi	r25, 0x04	; 4
    3ce4:	91 3a       	cpi	r25, 0xA1	; 161
    3ce6:	18 f4       	brcc	.+6      	; 0x3cee <unregister_code+0x12>
        del_key(code);
    3ce8:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <del_key>
    3cec:	0e c0       	rjmp	.+28     	; 0x3d0a <unregister_code+0x2e>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    3cee:	98 2f       	mov	r25, r24
    3cf0:	90 5e       	subi	r25, 0xE0	; 224
    3cf2:	98 30       	cpi	r25, 0x08	; 8
    3cf4:	60 f4       	brcc	.+24     	; 0x3d0e <unregister_code+0x32>
        del_mods(MOD_BIT(code));
    3cf6:	28 2f       	mov	r18, r24
    3cf8:	27 70       	andi	r18, 0x07	; 7
    3cfa:	81 e0       	ldi	r24, 0x01	; 1
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	01 c0       	rjmp	.+2      	; 0x3d02 <unregister_code+0x26>
    3d00:	88 0f       	add	r24, r24
    3d02:	2a 95       	dec	r18
    3d04:	ea f7       	brpl	.-6      	; 0x3d00 <unregister_code+0x24>
    3d06:	0e 94 83 27 	call	0x4f06	; 0x4f06 <del_mods>
        send_keyboard_report();
    3d0a:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <send_keyboard_report>
    }
    else if IS_SYSTEM(code) {
    3d0e:	98 2f       	mov	r25, r24
    3d10:	95 5a       	subi	r25, 0xA5	; 165
    3d12:	93 30       	cpi	r25, 0x03	; 3
    3d14:	20 f4       	brcc	.+8      	; 0x3d1e <unregister_code+0x42>
        host_system_send(0);
    3d16:	80 e0       	ldi	r24, 0x00	; 0
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    3d1e:	88 5a       	subi	r24, 0xA8	; 168
    3d20:	85 31       	cpi	r24, 0x15	; 21
    3d22:	20 f4       	brcc	.+8      	; 0x3d2c <unregister_code+0x50>
        host_consumer_send(0);
    3d24:	80 e0       	ldi	r24, 0x00	; 0
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <host_consumer_send>
    3d2c:	08 95       	ret

00003d2e <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    3d2e:	88 23       	and	r24, r24
    3d30:	21 f0       	breq	.+8      	; 0x3d3a <register_mods+0xc>
        add_mods(mods);
    3d32:	0e 94 7d 27 	call	0x4efa	; 0x4efa <add_mods>
        send_keyboard_report();
    3d36:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <send_keyboard_report>
    3d3a:	08 95       	ret

00003d3c <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    3d3c:	88 23       	and	r24, r24
    3d3e:	21 f0       	breq	.+8      	; 0x3d48 <unregister_mods+0xc>
        del_mods(mods);
    3d40:	0e 94 83 27 	call	0x4f06	; 0x4f06 <del_mods>
        send_keyboard_report();
    3d44:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <send_keyboard_report>
    3d48:	08 95       	ret

00003d4a <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    3d4a:	8f 92       	push	r8
    3d4c:	9f 92       	push	r9
    3d4e:	af 92       	push	r10
    3d50:	bf 92       	push	r11
    3d52:	0f 93       	push	r16
    3d54:	1f 93       	push	r17
    3d56:	cf 93       	push	r28
    3d58:	df 93       	push	r29
    3d5a:	cd b7       	in	r28, 0x3d	; 61
    3d5c:	de b7       	in	r29, 0x3e	; 62
    3d5e:	27 97       	sbiw	r28, 0x07	; 7
    3d60:	0f b6       	in	r0, 0x3f	; 63
    3d62:	f8 94       	cli
    3d64:	de bf       	out	0x3e, r29	; 62
    3d66:	0f be       	out	0x3f, r0	; 63
    3d68:	cd bf       	out	0x3d, r28	; 61
    3d6a:	5c 01       	movw	r10, r24
    keyevent_t event = record->event;
    3d6c:	85 e0       	ldi	r24, 0x05	; 5
    3d6e:	f5 01       	movw	r30, r10
    3d70:	de 01       	movw	r26, r28
    3d72:	11 96       	adiw	r26, 0x01	; 1
    3d74:	01 90       	ld	r0, Z+
    3d76:	0d 92       	st	X+, r0
    3d78:	8a 95       	dec	r24
    3d7a:	e1 f7       	brne	.-8      	; 0x3d74 <process_action+0x2a>
    3d7c:	f5 01       	movw	r30, r10
    3d7e:	30 81       	ld	r19, Z
    3d80:	21 81       	ldd	r18, Z+1	; 0x01
    3d82:	12 81       	ldd	r17, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    3d84:	05 81       	ldd	r16, Z+5	; 0x05
    3d86:	02 95       	swap	r16
    3d88:	0f 70       	andi	r16, 0x0F	; 15
    3d8a:	83 81       	ldd	r24, Z+3	; 0x03
    3d8c:	94 81       	ldd	r25, Z+4	; 0x04
    3d8e:	89 2b       	or	r24, r25
    3d90:	39 f0       	breq	.+14     	; 0x3da0 <process_action+0x56>
    3d92:	2f 3f       	cpi	r18, 0xFF	; 255
    3d94:	41 f4       	brne	.+16     	; 0x3da6 <process_action+0x5c>
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	3f 3f       	cpi	r19, 0xFF	; 255
    3d9c:	31 f0       	breq	.+12     	; 0x3daa <process_action+0x60>
    3d9e:	03 c0       	rjmp	.+6      	; 0x3da6 <process_action+0x5c>
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	02 c0       	rjmp	.+4      	; 0x3daa <process_action+0x60>
    3da6:	80 e0       	ldi	r24, 0x00	; 0
    3da8:	90 e0       	ldi	r25, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    3daa:	80 fd       	sbrc	r24, 0
    3dac:	f2 c2       	rjmp	.+1508   	; 0x4392 <process_action+0x648>

    action_t action = layer_switch_get_action(event.key);
    3dae:	39 83       	std	Y+1, r19	; 0x01
    3db0:	2a 83       	std	Y+2, r18	; 0x02
    3db2:	89 81       	ldd	r24, Y+1	; 0x01
    3db4:	9a 81       	ldd	r25, Y+2	; 0x02
    3db6:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    3dba:	9e 83       	std	Y+6, r25	; 0x06
    3dbc:	8f 83       	std	Y+7, r24	; 0x07
    3dbe:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    3dc2:	0e 94 19 26 	call	0x4c32	; 0x4c32 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    3dc6:	4e 81       	ldd	r20, Y+6	; 0x06
    3dc8:	24 2f       	mov	r18, r20
    3dca:	22 95       	swap	r18
    3dcc:	2f 70       	andi	r18, 0x0F	; 15
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    3dd2:	25 30       	cpi	r18, 0x05	; 5
    3dd4:	31 05       	cpc	r19, r1
    3dd6:	09 f4       	brne	.+2      	; 0x3dda <process_action+0x90>
    3dd8:	e9 c0       	rjmp	.+466    	; 0x3fac <process_action+0x262>
    3dda:	6c f4       	brge	.+26     	; 0x3df6 <process_action+0xac>
    3ddc:	24 30       	cpi	r18, 0x04	; 4
    3dde:	31 05       	cpc	r19, r1
    3de0:	0c f0       	brlt	.+2      	; 0x3de4 <process_action+0x9a>
    3de2:	a7 c0       	rjmp	.+334    	; 0x3f32 <process_action+0x1e8>
    3de4:	84 2f       	mov	r24, r20
    3de6:	80 7f       	andi	r24, 0xF0	; 240
    3de8:	94 2f       	mov	r25, r20
    3dea:	9f 70       	andi	r25, 0x0F	; 15
    3dec:	22 30       	cpi	r18, 0x02	; 2
    3dee:	31 05       	cpc	r19, r1
    3df0:	0c f0       	brlt	.+2      	; 0x3df4 <process_action+0xaa>
    3df2:	43 c0       	rjmp	.+134    	; 0x3e7a <process_action+0x130>
    3df4:	15 c0       	rjmp	.+42     	; 0x3e20 <process_action+0xd6>
    3df6:	2c 30       	cpi	r18, 0x0C	; 12
    3df8:	31 05       	cpc	r19, r1
    3dfa:	4c f4       	brge	.+18     	; 0x3e0e <process_action+0xc4>
    3dfc:	2a 30       	cpi	r18, 0x0A	; 10
    3dfe:	31 05       	cpc	r19, r1
    3e00:	0c f0       	brlt	.+2      	; 0x3e04 <process_action+0xba>
    3e02:	e3 c1       	rjmp	.+966    	; 0x41ca <process_action+0x480>
    3e04:	28 30       	cpi	r18, 0x08	; 8
    3e06:	31 05       	cpc	r19, r1
    3e08:	09 f0       	breq	.+2      	; 0x3e0c <process_action+0xc2>
    3e0a:	c3 c2       	rjmp	.+1414   	; 0x4392 <process_action+0x648>
    3e0c:	e7 c0       	rjmp	.+462    	; 0x3fdc <process_action+0x292>
    3e0e:	2c 30       	cpi	r18, 0x0C	; 12
    3e10:	31 05       	cpc	r19, r1
    3e12:	09 f4       	brne	.+2      	; 0x3e16 <process_action+0xcc>
    3e14:	98 c2       	rjmp	.+1328   	; 0x4346 <process_action+0x5fc>
    3e16:	2f 30       	cpi	r18, 0x0F	; 15
    3e18:	31 05       	cpc	r19, r1
    3e1a:	09 f0       	breq	.+2      	; 0x3e1e <process_action+0xd4>
    3e1c:	ba c2       	rjmp	.+1396   	; 0x4392 <process_action+0x648>
    3e1e:	a7 c2       	rjmp	.+1358   	; 0x436e <process_action+0x624>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    3e20:	99 2e       	mov	r9, r25
    3e22:	81 11       	cpse	r24, r1
    3e24:	01 c0       	rjmp	.+2      	; 0x3e28 <process_action+0xde>
    3e26:	03 c0       	rjmp	.+6      	; 0x3e2e <process_action+0xe4>
    3e28:	92 94       	swap	r9
    3e2a:	90 ef       	ldi	r25, 0xF0	; 240
    3e2c:	99 22       	and	r9, r25
                                                                action.key.mods<<4;
                if (event.pressed) {
    3e2e:	11 23       	and	r17, r17
    3e30:	59 f0       	breq	.+22     	; 0x3e48 <process_action+0xfe>
                    if (mods) {
    3e32:	99 20       	and	r9, r9
    3e34:	09 f4       	brne	.+2      	; 0x3e38 <process_action+0xee>
    3e36:	62 c2       	rjmp	.+1220   	; 0x42fc <process_action+0x5b2>
                        add_weak_mods(mods);
    3e38:	89 2d       	mov	r24, r9
    3e3a:	6f 83       	std	Y+7, r22	; 0x07
    3e3c:	0e 94 90 27 	call	0x4f20	; 0x4f20 <add_weak_mods>
                        send_keyboard_report();
    3e40:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <send_keyboard_report>
    3e44:	6f 81       	ldd	r22, Y+7	; 0x07
    3e46:	5a c2       	rjmp	.+1204   	; 0x42fc <process_action+0x5b2>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    3e48:	86 2f       	mov	r24, r22
    3e4a:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <unregister_code>
                    if (mods) {
    3e4e:	99 20       	and	r9, r9
    3e50:	09 f4       	brne	.+2      	; 0x3e54 <process_action+0x10a>
    3e52:	9f c2       	rjmp	.+1342   	; 0x4392 <process_action+0x648>
                        del_weak_mods(mods);
    3e54:	89 2d       	mov	r24, r9
    3e56:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    3e5a:	27 96       	adiw	r28, 0x07	; 7
    3e5c:	0f b6       	in	r0, 0x3f	; 63
    3e5e:	f8 94       	cli
    3e60:	de bf       	out	0x3e, r29	; 62
    3e62:	0f be       	out	0x3f, r0	; 63
    3e64:	cd bf       	out	0x3d, r28	; 61
    3e66:	df 91       	pop	r29
    3e68:	cf 91       	pop	r28
    3e6a:	1f 91       	pop	r17
    3e6c:	0f 91       	pop	r16
    3e6e:	bf 90       	pop	r11
    3e70:	af 90       	pop	r10
    3e72:	9f 90       	pop	r9
    3e74:	8f 90       	pop	r8
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    3e76:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    3e7a:	99 2e       	mov	r9, r25
    3e7c:	80 32       	cpi	r24, 0x20	; 32
    3e7e:	09 f4       	brne	.+2      	; 0x3e82 <process_action+0x138>
    3e80:	03 c0       	rjmp	.+6      	; 0x3e88 <process_action+0x13e>
    3e82:	92 94       	swap	r9
    3e84:	80 ef       	ldi	r24, 0xF0	; 240
    3e86:	98 22       	and	r9, r24
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    3e88:	66 23       	and	r22, r22
    3e8a:	21 f0       	breq	.+8      	; 0x3e94 <process_action+0x14a>
    3e8c:	61 30       	cpi	r22, 0x01	; 1
    3e8e:	09 f0       	breq	.+2      	; 0x3e92 <process_action+0x148>
    3e90:	41 c0       	rjmp	.+130    	; 0x3f14 <process_action+0x1ca>
    3e92:	21 c0       	rjmp	.+66     	; 0x3ed6 <process_action+0x18c>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    3e94:	11 23       	and	r17, r17
    3e96:	b1 f0       	breq	.+44     	; 0x3ec4 <process_action+0x17a>
                            if (tap_count == 0) {
                                register_mods(mods);
    3e98:	89 2d       	mov	r24, r9
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    3e9a:	01 11       	cpse	r16, r1
    3e9c:	01 c0       	rjmp	.+2      	; 0x3ea0 <process_action+0x156>
    3e9e:	26 c0       	rjmp	.+76     	; 0x3eec <process_action+0x1a2>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    3ea0:	01 30       	cpi	r16, 0x01	; 1
    3ea2:	21 f5       	brne	.+72     	; 0x3eec <process_action+0x1a2>
            break;
#endif
        default:
            break;
    }
}
    3ea4:	27 96       	adiw	r28, 0x07	; 7
    3ea6:	0f b6       	in	r0, 0x3f	; 63
    3ea8:	f8 94       	cli
    3eaa:	de bf       	out	0x3e, r29	; 62
    3eac:	0f be       	out	0x3f, r0	; 63
    3eae:	cd bf       	out	0x3d, r28	; 61
    3eb0:	df 91       	pop	r29
    3eb2:	cf 91       	pop	r28
    3eb4:	1f 91       	pop	r17
    3eb6:	0f 91       	pop	r16
    3eb8:	bf 90       	pop	r11
    3eba:	af 90       	pop	r10
    3ebc:	9f 90       	pop	r9
    3ebe:	8f 90       	pop	r8
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    3ec0:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    3ec4:	01 11       	cpse	r16, r1
    3ec6:	01 c0       	rjmp	.+2      	; 0x3eca <process_action+0x180>
    3ec8:	03 c0       	rjmp	.+6      	; 0x3ed0 <process_action+0x186>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    3eca:	01 30       	cpi	r16, 0x01	; 1
    3ecc:	09 f4       	brne	.+2      	; 0x3ed0 <process_action+0x186>
    3ece:	61 c2       	rjmp	.+1218   	; 0x4392 <process_action+0x648>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    3ed0:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <clear_oneshot_mods>
    3ed4:	2c c0       	rjmp	.+88     	; 0x3f2e <process_action+0x1e4>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    3ed6:	11 23       	and	r17, r17
    3ed8:	c9 f0       	breq	.+50     	; 0x3f0c <process_action+0x1c2>
                            if (tap_count <= TAPPING_TOGGLE) {
    3eda:	06 30       	cpi	r16, 0x06	; 6
    3edc:	08 f0       	brcs	.+2      	; 0x3ee0 <process_action+0x196>
    3ede:	59 c2       	rjmp	.+1202   	; 0x4392 <process_action+0x648>
                                if (mods & get_mods()) {
    3ee0:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <get_mods>
    3ee4:	89 21       	and	r24, r9
    3ee6:	09 f0       	breq	.+2      	; 0x3eea <process_action+0x1a0>
    3ee8:	22 c0       	rjmp	.+68     	; 0x3f2e <process_action+0x1e4>
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    3eea:	89 2d       	mov	r24, r9
            break;
#endif
        default:
            break;
    }
}
    3eec:	27 96       	adiw	r28, 0x07	; 7
    3eee:	0f b6       	in	r0, 0x3f	; 63
    3ef0:	f8 94       	cli
    3ef2:	de bf       	out	0x3e, r29	; 62
    3ef4:	0f be       	out	0x3f, r0	; 63
    3ef6:	cd bf       	out	0x3d, r28	; 61
    3ef8:	df 91       	pop	r29
    3efa:	cf 91       	pop	r28
    3efc:	1f 91       	pop	r17
    3efe:	0f 91       	pop	r16
    3f00:	bf 90       	pop	r11
    3f02:	af 90       	pop	r10
    3f04:	9f 90       	pop	r9
    3f06:	8f 90       	pop	r8
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    3f08:	0c 94 97 1e 	jmp	0x3d2e	; 0x3d2e <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    3f0c:	05 30       	cpi	r16, 0x05	; 5
    3f0e:	08 f0       	brcs	.+2      	; 0x3f12 <process_action+0x1c8>
    3f10:	40 c2       	rjmp	.+1152   	; 0x4392 <process_action+0x648>
    3f12:	0d c0       	rjmp	.+26     	; 0x3f2e <process_action+0x1e4>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    3f14:	11 23       	and	r17, r17
    3f16:	49 f0       	breq	.+18     	; 0x3f2a <process_action+0x1e0>
                            if (tap_count > 0) {
    3f18:	00 23       	and	r16, r16
    3f1a:	39 f3       	breq	.-50     	; 0x3eea <process_action+0x1a0>
                                if (record->tap.interrupted) {
    3f1c:	f5 01       	movw	r30, r10
    3f1e:	85 81       	ldd	r24, Z+5	; 0x05
    3f20:	80 ff       	sbrs	r24, 0
    3f22:	ec c1       	rjmp	.+984    	; 0x42fc <process_action+0x5b2>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    3f24:	8f 70       	andi	r24, 0x0F	; 15
    3f26:	85 83       	std	Z+5, r24	; 0x05
    3f28:	e0 cf       	rjmp	.-64     	; 0x3eea <process_action+0x1a0>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    3f2a:	01 11       	cpse	r16, r1
    3f2c:	fb c1       	rjmp	.+1014   	; 0x4324 <process_action+0x5da>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    3f2e:	89 2d       	mov	r24, r9
    3f30:	68 c1       	rjmp	.+720    	; 0x4202 <process_action+0x4b8>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    3f32:	24 2f       	mov	r18, r20
    3f34:	26 95       	lsr	r18
    3f36:	26 95       	lsr	r18
    3f38:	23 70       	andi	r18, 0x03	; 3
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	21 15       	cp	r18, r1
    3f3e:	31 05       	cpc	r19, r1
    3f40:	29 f0       	breq	.+10     	; 0x3f4c <process_action+0x202>
    3f42:	21 30       	cpi	r18, 0x01	; 1
    3f44:	31 05       	cpc	r19, r1
    3f46:	09 f0       	breq	.+2      	; 0x3f4a <process_action+0x200>
    3f48:	24 c2       	rjmp	.+1096   	; 0x4392 <process_action+0x648>
    3f4a:	18 c0       	rjmp	.+48     	; 0x3f7c <process_action+0x232>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    3f4c:	11 23       	and	r17, r17
    3f4e:	21 f0       	breq	.+8      	; 0x3f58 <process_action+0x20e>
                        host_system_send(action.usage.code);
    3f50:	86 2f       	mov	r24, r22
    3f52:	94 2f       	mov	r25, r20
    3f54:	93 70       	andi	r25, 0x03	; 3
    3f56:	02 c0       	rjmp	.+4      	; 0x3f5c <process_action+0x212>
                    } else {
                        host_system_send(0);
    3f58:	80 e0       	ldi	r24, 0x00	; 0
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    3f5c:	27 96       	adiw	r28, 0x07	; 7
    3f5e:	0f b6       	in	r0, 0x3f	; 63
    3f60:	f8 94       	cli
    3f62:	de bf       	out	0x3e, r29	; 62
    3f64:	0f be       	out	0x3f, r0	; 63
    3f66:	cd bf       	out	0x3d, r28	; 61
    3f68:	df 91       	pop	r29
    3f6a:	cf 91       	pop	r28
    3f6c:	1f 91       	pop	r17
    3f6e:	0f 91       	pop	r16
    3f70:	bf 90       	pop	r11
    3f72:	af 90       	pop	r10
    3f74:	9f 90       	pop	r9
    3f76:	8f 90       	pop	r8
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    3f78:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    3f7c:	11 23       	and	r17, r17
    3f7e:	21 f0       	breq	.+8      	; 0x3f88 <process_action+0x23e>
                        host_consumer_send(action.usage.code);
    3f80:	86 2f       	mov	r24, r22
    3f82:	94 2f       	mov	r25, r20
    3f84:	93 70       	andi	r25, 0x03	; 3
    3f86:	02 c0       	rjmp	.+4      	; 0x3f8c <process_action+0x242>
                    } else {
                        host_consumer_send(0);
    3f88:	80 e0       	ldi	r24, 0x00	; 0
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    3f8c:	27 96       	adiw	r28, 0x07	; 7
    3f8e:	0f b6       	in	r0, 0x3f	; 63
    3f90:	f8 94       	cli
    3f92:	de bf       	out	0x3e, r29	; 62
    3f94:	0f be       	out	0x3f, r0	; 63
    3f96:	cd bf       	out	0x3d, r28	; 61
    3f98:	df 91       	pop	r29
    3f9a:	cf 91       	pop	r28
    3f9c:	1f 91       	pop	r17
    3f9e:	0f 91       	pop	r16
    3fa0:	bf 90       	pop	r11
    3fa2:	af 90       	pop	r10
    3fa4:	9f 90       	pop	r9
    3fa6:	8f 90       	pop	r8
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    3fa8:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    3fac:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    3fae:	11 23       	and	r17, r17
    3fb0:	19 f0       	breq	.+6      	; 0x3fb8 <process_action+0x26e>
                mousekey_on(action.key.code);
    3fb2:	0e 94 77 2a 	call	0x54ee	; 0x54ee <mousekey_on>
    3fb6:	02 c0       	rjmp	.+4      	; 0x3fbc <process_action+0x272>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    3fb8:	0e 94 df 2a 	call	0x55be	; 0x55be <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    3fbc:	27 96       	adiw	r28, 0x07	; 7
    3fbe:	0f b6       	in	r0, 0x3f	; 63
    3fc0:	f8 94       	cli
    3fc2:	de bf       	out	0x3e, r29	; 62
    3fc4:	0f be       	out	0x3f, r0	; 63
    3fc6:	cd bf       	out	0x3d, r28	; 61
    3fc8:	df 91       	pop	r29
    3fca:	cf 91       	pop	r28
    3fcc:	1f 91       	pop	r17
    3fce:	0f 91       	pop	r16
    3fd0:	bf 90       	pop	r11
    3fd2:	af 90       	pop	r10
    3fd4:	9f 90       	pop	r9
    3fd6:	8f 90       	pop	r8
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    3fd8:	0c 94 66 2b 	jmp	0x56cc	; 0x56cc <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    3fdc:	84 2f       	mov	r24, r20
    3fde:	83 70       	andi	r24, 0x03	; 3
    3fe0:	09 f0       	breq	.+2      	; 0x3fe4 <process_action+0x29a>
    3fe2:	76 c0       	rjmp	.+236    	; 0x40d0 <process_action+0x386>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    3fe4:	11 11       	cpse	r17, r1
    3fe6:	d5 c1       	rjmp	.+938    	; 0x4392 <process_action+0x648>
                    uint8_t shift = action.layer_bitop.part*4;
    3fe8:	26 2f       	mov	r18, r22
    3fea:	22 95       	swap	r18
    3fec:	26 95       	lsr	r18
    3fee:	27 70       	andi	r18, 0x07	; 7
    3ff0:	22 0f       	add	r18, r18
    3ff2:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    3ff4:	86 2f       	mov	r24, r22
    3ff6:	8f 70       	andi	r24, 0x0F	; 15
    3ff8:	88 2e       	mov	r8, r24
    3ffa:	91 2c       	mov	r9, r1
    3ffc:	a1 2c       	mov	r10, r1
    3ffe:	b1 2c       	mov	r11, r1
    4000:	02 2e       	mov	r0, r18
    4002:	04 c0       	rjmp	.+8      	; 0x400c <process_action+0x2c2>
    4004:	88 0c       	add	r8, r8
    4006:	99 1c       	adc	r9, r9
    4008:	aa 1c       	adc	r10, r10
    400a:	bb 1c       	adc	r11, r11
    400c:	0a 94       	dec	r0
    400e:	d2 f7       	brpl	.-12     	; 0x4004 <process_action+0x2ba>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    4010:	64 ff       	sbrs	r22, 4
    4012:	10 c0       	rjmp	.+32     	; 0x4034 <process_action+0x2ea>
    4014:	6f e0       	ldi	r22, 0x0F	; 15
    4016:	70 e0       	ldi	r23, 0x00	; 0
    4018:	80 e0       	ldi	r24, 0x00	; 0
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	04 c0       	rjmp	.+8      	; 0x4026 <process_action+0x2dc>
    401e:	66 0f       	add	r22, r22
    4020:	77 1f       	adc	r23, r23
    4022:	88 1f       	adc	r24, r24
    4024:	99 1f       	adc	r25, r25
    4026:	2a 95       	dec	r18
    4028:	d2 f7       	brpl	.-12     	; 0x401e <process_action+0x2d4>
    402a:	60 95       	com	r22
    402c:	70 95       	com	r23
    402e:	80 95       	com	r24
    4030:	90 95       	com	r25
    4032:	03 c0       	rjmp	.+6      	; 0x403a <process_action+0x2f0>
    4034:	60 e0       	ldi	r22, 0x00	; 0
    4036:	70 e0       	ldi	r23, 0x00	; 0
    4038:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    403a:	24 2f       	mov	r18, r20
    403c:	26 95       	lsr	r18
    403e:	26 95       	lsr	r18
    4040:	23 70       	andi	r18, 0x03	; 3
    4042:	42 2f       	mov	r20, r18
    4044:	50 e0       	ldi	r21, 0x00	; 0
    4046:	42 30       	cpi	r20, 0x02	; 2
    4048:	51 05       	cpc	r21, r1
    404a:	d1 f0       	breq	.+52     	; 0x4080 <process_action+0x336>
    404c:	43 30       	cpi	r20, 0x03	; 3
    404e:	51 05       	cpc	r21, r1
    4050:	59 f1       	breq	.+86     	; 0x40a8 <process_action+0x35e>
    4052:	68 29       	or	r22, r8
    4054:	79 29       	or	r23, r9
    4056:	8a 29       	or	r24, r10
    4058:	9b 29       	or	r25, r11
    405a:	41 30       	cpi	r20, 0x01	; 1
    405c:	51 05       	cpc	r21, r1
    405e:	41 f1       	breq	.+80     	; 0x40b0 <process_action+0x366>
            break;
#endif
        default:
            break;
    }
}
    4060:	27 96       	adiw	r28, 0x07	; 7
    4062:	0f b6       	in	r0, 0x3f	; 63
    4064:	f8 94       	cli
    4066:	de bf       	out	0x3e, r29	; 62
    4068:	0f be       	out	0x3f, r0	; 63
    406a:	cd bf       	out	0x3d, r28	; 61
    406c:	df 91       	pop	r29
    406e:	cf 91       	pop	r28
    4070:	1f 91       	pop	r17
    4072:	0f 91       	pop	r16
    4074:	bf 90       	pop	r11
    4076:	af 90       	pop	r10
    4078:	9f 90       	pop	r9
    407a:	8f 90       	pop	r8
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    407c:	0c 94 2e 26 	jmp	0x4c5c	; 0x4c5c <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    4080:	68 29       	or	r22, r8
    4082:	79 29       	or	r23, r9
    4084:	8a 29       	or	r24, r10
    4086:	9b 29       	or	r25, r11
            break;
#endif
        default:
            break;
    }
}
    4088:	27 96       	adiw	r28, 0x07	; 7
    408a:	0f b6       	in	r0, 0x3f	; 63
    408c:	f8 94       	cli
    408e:	de bf       	out	0x3e, r29	; 62
    4090:	0f be       	out	0x3f, r0	; 63
    4092:	cd bf       	out	0x3d, r28	; 61
    4094:	df 91       	pop	r29
    4096:	cf 91       	pop	r28
    4098:	1f 91       	pop	r17
    409a:	0f 91       	pop	r16
    409c:	bf 90       	pop	r11
    409e:	af 90       	pop	r10
    40a0:	9f 90       	pop	r9
    40a2:	8f 90       	pop	r8
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    40a4:	0c 94 40 26 	jmp	0x4c80	; 0x4c80 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    40a8:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <default_layer_and>
    40ac:	c5 01       	movw	r24, r10
    40ae:	b4 01       	movw	r22, r8
            break;
#endif
        default:
            break;
    }
}
    40b0:	27 96       	adiw	r28, 0x07	; 7
    40b2:	0f b6       	in	r0, 0x3f	; 63
    40b4:	f8 94       	cli
    40b6:	de bf       	out	0x3e, r29	; 62
    40b8:	0f be       	out	0x3f, r0	; 63
    40ba:	cd bf       	out	0x3d, r28	; 61
    40bc:	df 91       	pop	r29
    40be:	cf 91       	pop	r28
    40c0:	1f 91       	pop	r17
    40c2:	0f 91       	pop	r16
    40c4:	bf 90       	pop	r11
    40c6:	af 90       	pop	r10
    40c8:	9f 90       	pop	r9
    40ca:	8f 90       	pop	r8
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    40cc:	0c 94 1c 26 	jmp	0x4c38	; 0x4c38 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    40d0:	11 23       	and	r17, r17
    40d2:	19 f0       	breq	.+6      	; 0x40da <process_action+0x390>
    40d4:	84 2f       	mov	r24, r20
    40d6:	81 70       	andi	r24, 0x01	; 1
    40d8:	01 c0       	rjmp	.+2      	; 0x40dc <process_action+0x392>
    40da:	86 95       	lsr	r24
    40dc:	88 23       	and	r24, r24
    40de:	09 f4       	brne	.+2      	; 0x40e2 <process_action+0x398>
    40e0:	58 c1       	rjmp	.+688    	; 0x4392 <process_action+0x648>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    40e2:	26 2f       	mov	r18, r22
    40e4:	22 95       	swap	r18
    40e6:	26 95       	lsr	r18
    40e8:	27 70       	andi	r18, 0x07	; 7
    40ea:	22 0f       	add	r18, r18
    40ec:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    40ee:	86 2f       	mov	r24, r22
    40f0:	8f 70       	andi	r24, 0x0F	; 15
    40f2:	88 2e       	mov	r8, r24
    40f4:	91 2c       	mov	r9, r1
    40f6:	a1 2c       	mov	r10, r1
    40f8:	b1 2c       	mov	r11, r1
    40fa:	02 2e       	mov	r0, r18
    40fc:	04 c0       	rjmp	.+8      	; 0x4106 <process_action+0x3bc>
    40fe:	88 0c       	add	r8, r8
    4100:	99 1c       	adc	r9, r9
    4102:	aa 1c       	adc	r10, r10
    4104:	bb 1c       	adc	r11, r11
    4106:	0a 94       	dec	r0
    4108:	d2 f7       	brpl	.-12     	; 0x40fe <process_action+0x3b4>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    410a:	64 ff       	sbrs	r22, 4
    410c:	10 c0       	rjmp	.+32     	; 0x412e <process_action+0x3e4>
    410e:	6f e0       	ldi	r22, 0x0F	; 15
    4110:	70 e0       	ldi	r23, 0x00	; 0
    4112:	80 e0       	ldi	r24, 0x00	; 0
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	04 c0       	rjmp	.+8      	; 0x4120 <process_action+0x3d6>
    4118:	66 0f       	add	r22, r22
    411a:	77 1f       	adc	r23, r23
    411c:	88 1f       	adc	r24, r24
    411e:	99 1f       	adc	r25, r25
    4120:	2a 95       	dec	r18
    4122:	d2 f7       	brpl	.-12     	; 0x4118 <process_action+0x3ce>
    4124:	60 95       	com	r22
    4126:	70 95       	com	r23
    4128:	80 95       	com	r24
    412a:	90 95       	com	r25
    412c:	03 c0       	rjmp	.+6      	; 0x4134 <process_action+0x3ea>
    412e:	60 e0       	ldi	r22, 0x00	; 0
    4130:	70 e0       	ldi	r23, 0x00	; 0
    4132:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    4134:	24 2f       	mov	r18, r20
    4136:	26 95       	lsr	r18
    4138:	26 95       	lsr	r18
    413a:	23 70       	andi	r18, 0x03	; 3
    413c:	42 2f       	mov	r20, r18
    413e:	50 e0       	ldi	r21, 0x00	; 0
    4140:	42 30       	cpi	r20, 0x02	; 2
    4142:	51 05       	cpc	r21, r1
    4144:	d1 f0       	breq	.+52     	; 0x417a <process_action+0x430>
    4146:	43 30       	cpi	r20, 0x03	; 3
    4148:	51 05       	cpc	r21, r1
    414a:	59 f1       	breq	.+86     	; 0x41a2 <process_action+0x458>
    414c:	68 29       	or	r22, r8
    414e:	79 29       	or	r23, r9
    4150:	8a 29       	or	r24, r10
    4152:	9b 29       	or	r25, r11
    4154:	41 30       	cpi	r20, 0x01	; 1
    4156:	51 05       	cpc	r21, r1
    4158:	41 f1       	breq	.+80     	; 0x41aa <process_action+0x460>
            break;
#endif
        default:
            break;
    }
}
    415a:	27 96       	adiw	r28, 0x07	; 7
    415c:	0f b6       	in	r0, 0x3f	; 63
    415e:	f8 94       	cli
    4160:	de bf       	out	0x3e, r29	; 62
    4162:	0f be       	out	0x3f, r0	; 63
    4164:	cd bf       	out	0x3d, r28	; 61
    4166:	df 91       	pop	r29
    4168:	cf 91       	pop	r28
    416a:	1f 91       	pop	r17
    416c:	0f 91       	pop	r16
    416e:	bf 90       	pop	r11
    4170:	af 90       	pop	r10
    4172:	9f 90       	pop	r9
    4174:	8f 90       	pop	r8
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    4176:	0c 94 cd 26 	jmp	0x4d9a	; 0x4d9a <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    417a:	68 29       	or	r22, r8
    417c:	79 29       	or	r23, r9
    417e:	8a 29       	or	r24, r10
    4180:	9b 29       	or	r25, r11
            break;
#endif
        default:
            break;
    }
}
    4182:	27 96       	adiw	r28, 0x07	; 7
    4184:	0f b6       	in	r0, 0x3f	; 63
    4186:	f8 94       	cli
    4188:	de bf       	out	0x3e, r29	; 62
    418a:	0f be       	out	0x3f, r0	; 63
    418c:	cd bf       	out	0x3d, r28	; 61
    418e:	df 91       	pop	r29
    4190:	cf 91       	pop	r28
    4192:	1f 91       	pop	r17
    4194:	0f 91       	pop	r16
    4196:	bf 90       	pop	r11
    4198:	af 90       	pop	r10
    419a:	9f 90       	pop	r9
    419c:	8f 90       	pop	r8
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    419e:	0c 94 df 26 	jmp	0x4dbe	; 0x4dbe <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    41a2:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <layer_and>
    41a6:	c5 01       	movw	r24, r10
    41a8:	b4 01       	movw	r22, r8
            break;
#endif
        default:
            break;
    }
}
    41aa:	27 96       	adiw	r28, 0x07	; 7
    41ac:	0f b6       	in	r0, 0x3f	; 63
    41ae:	f8 94       	cli
    41b0:	de bf       	out	0x3e, r29	; 62
    41b2:	0f be       	out	0x3f, r0	; 63
    41b4:	cd bf       	out	0x3d, r28	; 61
    41b6:	df 91       	pop	r29
    41b8:	cf 91       	pop	r28
    41ba:	1f 91       	pop	r17
    41bc:	0f 91       	pop	r16
    41be:	bf 90       	pop	r11
    41c0:	af 90       	pop	r10
    41c2:	9f 90       	pop	r9
    41c4:	8f 90       	pop	r8
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    41c6:	0c 94 bb 26 	jmp	0x4d76	; 0x4d76 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    41ca:	60 3f       	cpi	r22, 0xF0	; 240
    41cc:	51 f1       	breq	.+84     	; 0x4222 <process_action+0x4d8>
    41ce:	20 f4       	brcc	.+8      	; 0x41d8 <process_action+0x48e>
    41d0:	60 3e       	cpi	r22, 0xE0	; 224
    41d2:	08 f4       	brcc	.+2      	; 0x41d6 <process_action+0x48c>
    41d4:	8e c0       	rjmp	.+284    	; 0x42f2 <process_action+0x5a8>
    41d6:	08 c0       	rjmp	.+16     	; 0x41e8 <process_action+0x49e>
    41d8:	62 3f       	cpi	r22, 0xF2	; 242
    41da:	09 f4       	brne	.+2      	; 0x41de <process_action+0x494>
    41dc:	63 c0       	rjmp	.+198    	; 0x42a4 <process_action+0x55a>
    41de:	e0 f1       	brcs	.+120    	; 0x4258 <process_action+0x50e>
    41e0:	63 3f       	cpi	r22, 0xF3	; 243
    41e2:	09 f0       	breq	.+2      	; 0x41e6 <process_action+0x49c>
    41e4:	86 c0       	rjmp	.+268    	; 0x42f2 <process_action+0x5a8>
    41e6:	61 c0       	rjmp	.+194    	; 0x42aa <process_action+0x560>
    41e8:	06 2f       	mov	r16, r22
    41ea:	0f 70       	andi	r16, 0x0F	; 15
    41ec:	84 2f       	mov	r24, r20
    41ee:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    41f0:	11 23       	and	r17, r17
    41f2:	21 f0       	breq	.+8      	; 0x41fc <process_action+0x4b2>
                        layer_on(action.layer_tap.val);
    41f4:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    41f8:	80 2f       	mov	r24, r16
    41fa:	78 ce       	rjmp	.-784    	; 0x3eec <process_action+0x1a2>
                    } else {
                        layer_off(action.layer_tap.val);
    41fc:	0e 94 81 26 	call	0x4d02	; 0x4d02 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    4200:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    4202:	27 96       	adiw	r28, 0x07	; 7
    4204:	0f b6       	in	r0, 0x3f	; 63
    4206:	f8 94       	cli
    4208:	de bf       	out	0x3e, r29	; 62
    420a:	0f be       	out	0x3f, r0	; 63
    420c:	cd bf       	out	0x3d, r28	; 61
    420e:	df 91       	pop	r29
    4210:	cf 91       	pop	r28
    4212:	1f 91       	pop	r17
    4214:	0f 91       	pop	r16
    4216:	bf 90       	pop	r11
    4218:	af 90       	pop	r10
    421a:	9f 90       	pop	r9
    421c:	8f 90       	pop	r8
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    421e:	0c 94 9e 1e 	jmp	0x3d3c	; 0x3d3c <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    4222:	11 23       	and	r17, r17
    4224:	a9 f0       	breq	.+42     	; 0x4250 <process_action+0x506>
                        if (tap_count < TAPPING_TOGGLE) {
    4226:	05 30       	cpi	r16, 0x05	; 5
    4228:	08 f0       	brcs	.+2      	; 0x422c <process_action+0x4e2>
    422a:	b3 c0       	rjmp	.+358    	; 0x4392 <process_action+0x648>
                            layer_invert(action.layer_tap.val);
    422c:	84 2f       	mov	r24, r20
    422e:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    4230:	27 96       	adiw	r28, 0x07	; 7
    4232:	0f b6       	in	r0, 0x3f	; 63
    4234:	f8 94       	cli
    4236:	de bf       	out	0x3e, r29	; 62
    4238:	0f be       	out	0x3f, r0	; 63
    423a:	cd bf       	out	0x3d, r28	; 61
    423c:	df 91       	pop	r29
    423e:	cf 91       	pop	r28
    4240:	1f 91       	pop	r17
    4242:	0f 91       	pop	r16
    4244:	bf 90       	pop	r11
    4246:	af 90       	pop	r10
    4248:	9f 90       	pop	r9
    424a:	8f 90       	pop	r8
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    424c:	0c 94 a0 26 	jmp	0x4d40	; 0x4d40 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    4250:	06 30       	cpi	r16, 0x06	; 6
    4252:	08 f0       	brcs	.+2      	; 0x4256 <process_action+0x50c>
    4254:	9e c0       	rjmp	.+316    	; 0x4392 <process_action+0x648>
    4256:	ea cf       	rjmp	.-44     	; 0x422c <process_action+0x4e2>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    4258:	11 23       	and	r17, r17
    425a:	91 f0       	breq	.+36     	; 0x4280 <process_action+0x536>
    425c:	84 2f       	mov	r24, r20
    425e:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    4260:	27 96       	adiw	r28, 0x07	; 7
    4262:	0f b6       	in	r0, 0x3f	; 63
    4264:	f8 94       	cli
    4266:	de bf       	out	0x3e, r29	; 62
    4268:	0f be       	out	0x3f, r0	; 63
    426a:	cd bf       	out	0x3d, r28	; 61
    426c:	df 91       	pop	r29
    426e:	cf 91       	pop	r28
    4270:	1f 91       	pop	r17
    4272:	0f 91       	pop	r16
    4274:	bf 90       	pop	r11
    4276:	af 90       	pop	r10
    4278:	9f 90       	pop	r9
    427a:	8f 90       	pop	r8
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    427c:	0c 94 66 26 	jmp	0x4ccc	; 0x4ccc <layer_on>
                                    layer_off(action.layer_tap.val);
    4280:	84 2f       	mov	r24, r20
    4282:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    4284:	27 96       	adiw	r28, 0x07	; 7
    4286:	0f b6       	in	r0, 0x3f	; 63
    4288:	f8 94       	cli
    428a:	de bf       	out	0x3e, r29	; 62
    428c:	0f be       	out	0x3f, r0	; 63
    428e:	cd bf       	out	0x3d, r28	; 61
    4290:	df 91       	pop	r29
    4292:	cf 91       	pop	r28
    4294:	1f 91       	pop	r17
    4296:	0f 91       	pop	r16
    4298:	bf 90       	pop	r11
    429a:	af 90       	pop	r10
    429c:	9f 90       	pop	r9
    429e:	8f 90       	pop	r8
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    42a0:	0c 94 81 26 	jmp	0x4d02	; 0x4d02 <layer_off>
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    42a4:	11 11       	cpse	r17, r1
    42a6:	ec cf       	rjmp	.-40     	; 0x4280 <process_action+0x536>
    42a8:	d9 cf       	rjmp	.-78     	; 0x425c <process_action+0x512>
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    42aa:	11 23       	and	r17, r17
    42ac:	91 f0       	breq	.+36     	; 0x42d2 <process_action+0x588>
    42ae:	84 2f       	mov	r24, r20
    42b0:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    42b2:	27 96       	adiw	r28, 0x07	; 7
    42b4:	0f b6       	in	r0, 0x3f	; 63
    42b6:	f8 94       	cli
    42b8:	de bf       	out	0x3e, r29	; 62
    42ba:	0f be       	out	0x3f, r0	; 63
    42bc:	cd bf       	out	0x3d, r28	; 61
    42be:	df 91       	pop	r29
    42c0:	cf 91       	pop	r28
    42c2:	1f 91       	pop	r17
    42c4:	0f 91       	pop	r16
    42c6:	bf 90       	pop	r11
    42c8:	af 90       	pop	r10
    42ca:	9f 90       	pop	r9
    42cc:	8f 90       	pop	r8
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    42ce:	0c 94 57 26 	jmp	0x4cae	; 0x4cae <layer_move>
            break;
#endif
        default:
            break;
    }
}
    42d2:	27 96       	adiw	r28, 0x07	; 7
    42d4:	0f b6       	in	r0, 0x3f	; 63
    42d6:	f8 94       	cli
    42d8:	de bf       	out	0x3e, r29	; 62
    42da:	0f be       	out	0x3f, r0	; 63
    42dc:	cd bf       	out	0x3d, r28	; 61
    42de:	df 91       	pop	r29
    42e0:	cf 91       	pop	r28
    42e2:	1f 91       	pop	r17
    42e4:	0f 91       	pop	r16
    42e6:	bf 90       	pop	r11
    42e8:	af 90       	pop	r10
    42ea:	9f 90       	pop	r9
    42ec:	8f 90       	pop	r8
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    42ee:	0c 94 52 26 	jmp	0x4ca4	; 0x4ca4 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    42f2:	11 23       	and	r17, r17
    42f4:	a1 f0       	breq	.+40     	; 0x431e <process_action+0x5d4>
                        if (tap_count > 0) {
    42f6:	00 23       	and	r16, r16
    42f8:	09 f4       	brne	.+2      	; 0x42fc <process_action+0x5b2>
    42fa:	b0 cf       	rjmp	.-160    	; 0x425c <process_action+0x512>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    42fc:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    42fe:	27 96       	adiw	r28, 0x07	; 7
    4300:	0f b6       	in	r0, 0x3f	; 63
    4302:	f8 94       	cli
    4304:	de bf       	out	0x3e, r29	; 62
    4306:	0f be       	out	0x3f, r0	; 63
    4308:	cd bf       	out	0x3d, r28	; 61
    430a:	df 91       	pop	r29
    430c:	cf 91       	pop	r28
    430e:	1f 91       	pop	r17
    4310:	0f 91       	pop	r16
    4312:	bf 90       	pop	r11
    4314:	af 90       	pop	r10
    4316:	9f 90       	pop	r9
    4318:	8f 90       	pop	r8
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    431a:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    431e:	00 23       	and	r16, r16
    4320:	09 f4       	brne	.+2      	; 0x4324 <process_action+0x5da>
    4322:	ae cf       	rjmp	.-164    	; 0x4280 <process_action+0x536>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    4324:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    4326:	27 96       	adiw	r28, 0x07	; 7
    4328:	0f b6       	in	r0, 0x3f	; 63
    432a:	f8 94       	cli
    432c:	de bf       	out	0x3e, r29	; 62
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	cd bf       	out	0x3d, r28	; 61
    4332:	df 91       	pop	r29
    4334:	cf 91       	pop	r28
    4336:	1f 91       	pop	r17
    4338:	0f 91       	pop	r16
    433a:	bf 90       	pop	r11
    433c:	af 90       	pop	r10
    433e:	9f 90       	pop	r9
    4340:	8f 90       	pop	r8
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    4342:	0c 94 6e 1e 	jmp	0x3cdc	; 0x3cdc <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    4346:	4f 70       	andi	r20, 0x0F	; 15
    4348:	c5 01       	movw	r24, r10
    434a:	0e 94 f3 29 	call	0x53e6	; 0x53e6 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    434e:	27 96       	adiw	r28, 0x07	; 7
    4350:	0f b6       	in	r0, 0x3f	; 63
    4352:	f8 94       	cli
    4354:	de bf       	out	0x3e, r29	; 62
    4356:	0f be       	out	0x3f, r0	; 63
    4358:	cd bf       	out	0x3d, r28	; 61
    435a:	df 91       	pop	r29
    435c:	cf 91       	pop	r28
    435e:	1f 91       	pop	r17
    4360:	0f 91       	pop	r16
    4362:	bf 90       	pop	r11
    4364:	af 90       	pop	r10
    4366:	9f 90       	pop	r9
    4368:	8f 90       	pop	r8
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    436a:	0c 94 62 25 	jmp	0x4ac4	; 0x4ac4 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    436e:	4f 70       	andi	r20, 0x0F	; 15
    4370:	c5 01       	movw	r24, r10
            break;
#endif
        default:
            break;
    }
}
    4372:	27 96       	adiw	r28, 0x07	; 7
    4374:	0f b6       	in	r0, 0x3f	; 63
    4376:	f8 94       	cli
    4378:	de bf       	out	0x3e, r29	; 62
    437a:	0f be       	out	0x3f, r0	; 63
    437c:	cd bf       	out	0x3d, r28	; 61
    437e:	df 91       	pop	r29
    4380:	cf 91       	pop	r28
    4382:	1f 91       	pop	r17
    4384:	0f 91       	pop	r16
    4386:	bf 90       	pop	r11
    4388:	af 90       	pop	r10
    438a:	9f 90       	pop	r9
    438c:	8f 90       	pop	r8
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    438e:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <action_function>
            break;
#endif
        default:
            break;
    }
}
    4392:	27 96       	adiw	r28, 0x07	; 7
    4394:	0f b6       	in	r0, 0x3f	; 63
    4396:	f8 94       	cli
    4398:	de bf       	out	0x3e, r29	; 62
    439a:	0f be       	out	0x3f, r0	; 63
    439c:	cd bf       	out	0x3d, r28	; 61
    439e:	df 91       	pop	r29
    43a0:	cf 91       	pop	r28
    43a2:	1f 91       	pop	r17
    43a4:	0f 91       	pop	r16
    43a6:	bf 90       	pop	r11
    43a8:	af 90       	pop	r10
    43aa:	9f 90       	pop	r9
    43ac:	8f 90       	pop	r8
    43ae:	08 95       	ret

000043b0 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    43b0:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <clear_weak_mods>
    clear_keys();
    43b4:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <clear_keys>
    send_keyboard_report();
    43b8:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    43bc:	0e 94 94 2c 	call	0x5928	; 0x5928 <mousekey_clear>
    mousekey_send();
    43c0:	0e 94 66 2b 	call	0x56cc	; 0x56cc <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    43c4:	80 e0       	ldi	r24, 0x00	; 0
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	0e 94 3a 1c 	call	0x3874	; 0x3874 <host_system_send>
    host_consumer_send(0);
    43cc:	80 e0       	ldi	r24, 0x00	; 0
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <host_consumer_send>

000043d4 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    43d4:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <clear_mods>
    clear_keyboard_but_mods();
    43d8:	0c 94 d8 21 	jmp	0x43b0	; 0x43b0 <clear_keyboard_but_mods>

000043dc <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    43dc:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <layer_switch_get_action>

    switch (action.kind.id) {
    43e0:	29 2f       	mov	r18, r25
    43e2:	22 95       	swap	r18
    43e4:	2f 70       	andi	r18, 0x0F	; 15
    43e6:	30 e0       	ldi	r19, 0x00	; 0
    43e8:	2c 30       	cpi	r18, 0x0C	; 12
    43ea:	31 05       	cpc	r19, r1
    43ec:	4c f4       	brge	.+18     	; 0x4400 <is_tap_key+0x24>
    43ee:	2a 30       	cpi	r18, 0x0A	; 10
    43f0:	31 05       	cpc	r19, r1
    43f2:	6c f4       	brge	.+26     	; 0x440e <is_tap_key+0x32>
    43f4:	22 50       	subi	r18, 0x02	; 2
    43f6:	31 09       	sbc	r19, r1
    43f8:	22 30       	cpi	r18, 0x02	; 2
    43fa:	31 05       	cpc	r19, r1
    43fc:	90 f4       	brcc	.+36     	; 0x4422 <is_tap_key+0x46>
    43fe:	07 c0       	rjmp	.+14     	; 0x440e <is_tap_key+0x32>
    4400:	2c 30       	cpi	r18, 0x0C	; 12
    4402:	31 05       	cpc	r19, r1
    4404:	51 f0       	breq	.+20     	; 0x441a <is_tap_key+0x3e>
    4406:	2f 30       	cpi	r18, 0x0F	; 15
    4408:	31 05       	cpc	r19, r1
    440a:	59 f4       	brne	.+22     	; 0x4422 <is_tap_key+0x46>
    440c:	06 c0       	rjmp	.+12     	; 0x441a <is_tap_key+0x3e>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    440e:	80 3e       	cpi	r24, 0xE0	; 224
    4410:	10 f0       	brcs	.+4      	; 0x4416 <is_tap_key+0x3a>
    4412:	80 3f       	cpi	r24, 0xF0	; 240
    4414:	31 f4       	brne	.+12     	; 0x4422 <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    4416:	81 e0       	ldi	r24, 0x01	; 1
    4418:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    441a:	93 fb       	bst	r25, 3
    441c:	88 27       	eor	r24, r24
    441e:	80 f9       	bld	r24, 0
    4420:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    4422:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    4424:	08 95       	ret

00004426 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    4426:	cf 93       	push	r28
    4428:	df 93       	push	r29
    442a:	00 d0       	rcall	.+0      	; 0x442c <debug_event+0x6>
    442c:	00 d0       	rcall	.+0      	; 0x442e <debug_event+0x8>
    442e:	1f 92       	push	r1
    4430:	cd b7       	in	r28, 0x3d	; 61
    4432:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    4434:	0f 90       	pop	r0
    4436:	0f 90       	pop	r0
    4438:	0f 90       	pop	r0
    443a:	0f 90       	pop	r0
    443c:	0f 90       	pop	r0
    443e:	df 91       	pop	r29
    4440:	cf 91       	pop	r28
    4442:	08 95       	ret

00004444 <debug_record>:

void debug_record(keyrecord_t record)
{
    4444:	cf 93       	push	r28
    4446:	df 93       	push	r29
    4448:	00 d0       	rcall	.+0      	; 0x444a <debug_record+0x6>
    444a:	00 d0       	rcall	.+0      	; 0x444c <debug_record+0x8>
    444c:	00 d0       	rcall	.+0      	; 0x444e <debug_record+0xa>
    444e:	cd b7       	in	r28, 0x3d	; 61
    4450:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    4452:	26 96       	adiw	r28, 0x06	; 6
    4454:	0f b6       	in	r0, 0x3f	; 63
    4456:	f8 94       	cli
    4458:	de bf       	out	0x3e, r29	; 62
    445a:	0f be       	out	0x3f, r0	; 63
    445c:	cd bf       	out	0x3d, r28	; 61
    445e:	df 91       	pop	r29
    4460:	cf 91       	pop	r28
    4462:	08 95       	ret

00004464 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    4464:	ef 92       	push	r14
    4466:	ff 92       	push	r15
    4468:	cf 93       	push	r28
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    446a:	90 91 cc 03 	lds	r25, 0x03CC
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    446e:	c6 e0       	ldi	r28, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    4470:	15 c0       	rjmp	.+42     	; 0x449c <debug_waiting_buffer+0x38>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    4472:	e9 2e       	mov	r14, r25
    4474:	f1 2c       	mov	r15, r1
    4476:	ce 9d       	mul	r28, r14
    4478:	f0 01       	movw	r30, r0
    447a:	cf 9d       	mul	r28, r15
    447c:	f0 0d       	add	r31, r0
    447e:	11 24       	eor	r1, r1
    4480:	e4 56       	subi	r30, 0x64	; 100
    4482:	fc 4f       	sbci	r31, 0xFC	; 252
    4484:	40 81       	ld	r20, Z
    4486:	51 81       	ldd	r21, Z+1	; 0x01
    4488:	62 81       	ldd	r22, Z+2	; 0x02
    448a:	73 81       	ldd	r23, Z+3	; 0x03
    448c:	84 81       	ldd	r24, Z+4	; 0x04
    448e:	95 81       	ldd	r25, Z+5	; 0x05
    4490:	0e 94 22 22 	call	0x4444	; 0x4444 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    4494:	c7 01       	movw	r24, r14
    4496:	01 96       	adiw	r24, 0x01	; 1
    4498:	98 2f       	mov	r25, r24
    449a:	97 70       	andi	r25, 0x07	; 7
    449c:	80 91 cd 03 	lds	r24, 0x03CD
    44a0:	98 13       	cpse	r25, r24
    44a2:	e7 cf       	rjmp	.-50     	; 0x4472 <debug_waiting_buffer+0xe>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    44a4:	cf 91       	pop	r28
    44a6:	ff 90       	pop	r15
    44a8:	ef 90       	pop	r14
    44aa:	08 95       	ret

000044ac <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    44ac:	40 91 96 03 	lds	r20, 0x0396
    44b0:	50 91 97 03 	lds	r21, 0x0397
    44b4:	60 91 98 03 	lds	r22, 0x0398
    44b8:	70 91 99 03 	lds	r23, 0x0399
    44bc:	80 91 9a 03 	lds	r24, 0x039A
    44c0:	90 91 9b 03 	lds	r25, 0x039B
    44c4:	0c 94 22 22 	jmp	0x4444	; 0x4444 <debug_record>

000044c8 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    44c8:	0f 93       	push	r16
    44ca:	1f 93       	push	r17
    44cc:	cf 93       	push	r28
    44ce:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    44d0:	80 91 9b 03 	lds	r24, 0x039B
    44d4:	82 95       	swap	r24
    44d6:	8f 70       	andi	r24, 0x0F	; 15
    44d8:	09 f0       	breq	.+2      	; 0x44dc <waiting_buffer_scan_tap+0x14>
    44da:	69 c0       	rjmp	.+210    	; 0x45ae <waiting_buffer_scan_tap+0xe6>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    44dc:	80 91 98 03 	lds	r24, 0x0398
    44e0:	88 23       	and	r24, r24
    44e2:	09 f4       	brne	.+2      	; 0x44e6 <waiting_buffer_scan_tap+0x1e>
    44e4:	64 c0       	rjmp	.+200    	; 0x45ae <waiting_buffer_scan_tap+0xe6>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    44e6:	a0 91 cc 03 	lds	r26, 0x03CC
    44ea:	d0 91 cd 03 	lds	r29, 0x03CD
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    44ee:	b0 91 96 03 	lds	r27, 0x0396
    44f2:	c0 91 97 03 	lds	r28, 0x0397
    44f6:	80 91 99 03 	lds	r24, 0x0399
    44fa:	90 91 9a 03 	lds	r25, 0x039A
    44fe:	21 e0       	ldi	r18, 0x01	; 1
    4500:	30 e0       	ldi	r19, 0x00	; 0
    4502:	bf 3f       	cpi	r27, 0xFF	; 255
    4504:	11 f0       	breq	.+4      	; 0x450a <waiting_buffer_scan_tap+0x42>
    4506:	20 e0       	ldi	r18, 0x00	; 0
    4508:	30 e0       	ldi	r19, 0x00	; 0
    450a:	12 2f       	mov	r17, r18
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    450c:	bc 01       	movw	r22, r24
    450e:	60 95       	com	r22
    4510:	70 95       	com	r23
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    4512:	06 e0       	ldi	r16, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    4514:	4a c0       	rjmp	.+148    	; 0x45aa <waiting_buffer_scan_tap+0xe2>
    4516:	00 97       	sbiw	r24, 0x00	; 0
    4518:	21 f0       	breq	.+8      	; 0x4522 <waiting_buffer_scan_tap+0x5a>
    451a:	cf 3f       	cpi	r28, 0xFF	; 255
    451c:	29 f4       	brne	.+10     	; 0x4528 <waiting_buffer_scan_tap+0x60>
    451e:	21 2f       	mov	r18, r17
    4520:	05 c0       	rjmp	.+10     	; 0x452c <waiting_buffer_scan_tap+0x64>
    4522:	21 e0       	ldi	r18, 0x01	; 1
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	02 c0       	rjmp	.+4      	; 0x452c <waiting_buffer_scan_tap+0x64>
    4528:	20 e0       	ldi	r18, 0x00	; 0
    452a:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    452c:	20 fd       	sbrc	r18, 0
    452e:	3b c0       	rjmp	.+118    	; 0x45a6 <waiting_buffer_scan_tap+0xde>
    4530:	4a 2f       	mov	r20, r26
    4532:	50 e0       	ldi	r21, 0x00	; 0
    4534:	04 9f       	mul	r16, r20
    4536:	f0 01       	movw	r30, r0
    4538:	05 9f       	mul	r16, r21
    453a:	f0 0d       	add	r31, r0
    453c:	11 24       	eor	r1, r1
    453e:	e4 56       	subi	r30, 0x64	; 100
    4540:	fc 4f       	sbci	r31, 0xFC	; 252
    4542:	21 81       	ldd	r18, Z+1	; 0x01
    4544:	c2 13       	cpse	r28, r18
    4546:	2f c0       	rjmp	.+94     	; 0x45a6 <waiting_buffer_scan_tap+0xde>
    4548:	20 81       	ld	r18, Z
    454a:	b2 13       	cpse	r27, r18
    454c:	2c c0       	rjmp	.+88     	; 0x45a6 <waiting_buffer_scan_tap+0xde>
    454e:	22 81       	ldd	r18, Z+2	; 0x02
    4550:	21 11       	cpse	r18, r1
    4552:	29 c0       	rjmp	.+82     	; 0x45a6 <waiting_buffer_scan_tap+0xde>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    4554:	23 81       	ldd	r18, Z+3	; 0x03
    4556:	34 81       	ldd	r19, Z+4	; 0x04
    4558:	28 17       	cp	r18, r24
    455a:	39 07       	cpc	r19, r25
    455c:	18 f0       	brcs	.+6      	; 0x4564 <waiting_buffer_scan_tap+0x9c>
    455e:	28 1b       	sub	r18, r24
    4560:	39 0b       	sbc	r19, r25
    4562:	02 c0       	rjmp	.+4      	; 0x4568 <waiting_buffer_scan_tap+0xa0>
    4564:	26 0f       	add	r18, r22
    4566:	37 1f       	adc	r19, r23
    4568:	28 3c       	cpi	r18, 0xC8	; 200
    456a:	31 05       	cpc	r19, r1
    456c:	e0 f4       	brcc	.+56     	; 0x45a6 <waiting_buffer_scan_tap+0xde>
            tapping_key.tap.count = 1;
    456e:	80 91 9b 03 	lds	r24, 0x039B
    4572:	8f 70       	andi	r24, 0x0F	; 15
    4574:	80 61       	ori	r24, 0x10	; 16
    4576:	80 93 9b 03 	sts	0x039B, r24
            waiting_buffer[i].tap.count = 1;
    457a:	86 e0       	ldi	r24, 0x06	; 6
    457c:	84 9f       	mul	r24, r20
    457e:	f0 01       	movw	r30, r0
    4580:	85 9f       	mul	r24, r21
    4582:	f0 0d       	add	r31, r0
    4584:	11 24       	eor	r1, r1
    4586:	ef 55       	subi	r30, 0x5F	; 95
    4588:	fc 4f       	sbci	r31, 0xFC	; 252
    458a:	80 81       	ld	r24, Z
    458c:	8f 70       	andi	r24, 0x0F	; 15
    458e:	80 61       	ori	r24, 0x10	; 16
    4590:	80 83       	st	Z, r24
            process_action(&tapping_key);
    4592:	86 e9       	ldi	r24, 0x96	; 150
    4594:	93 e0       	ldi	r25, 0x03	; 3
    4596:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    459a:	df 91       	pop	r29
    459c:	cf 91       	pop	r28
    459e:	1f 91       	pop	r17
    45a0:	0f 91       	pop	r16
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    45a2:	0c 94 32 22 	jmp	0x4464	; 0x4464 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    45a6:	af 5f       	subi	r26, 0xFF	; 255
    45a8:	a7 70       	andi	r26, 0x07	; 7
    45aa:	ad 13       	cpse	r26, r29
    45ac:	b4 cf       	rjmp	.-152    	; 0x4516 <waiting_buffer_scan_tap+0x4e>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    45ae:	df 91       	pop	r29
    45b0:	cf 91       	pop	r28
    45b2:	1f 91       	pop	r17
    45b4:	0f 91       	pop	r16
    45b6:	08 95       	ret

000045b8 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    45b8:	cf 92       	push	r12
    45ba:	df 92       	push	r13
    45bc:	ef 92       	push	r14
    45be:	ff 92       	push	r15
    45c0:	cf 93       	push	r28
    45c2:	df 93       	push	r29
    45c4:	cd b7       	in	r28, 0x3d	; 61
    45c6:	de b7       	in	r29, 0x3e	; 62
    45c8:	62 97       	sbiw	r28, 0x12	; 18
    45ca:	0f b6       	in	r0, 0x3f	; 63
    45cc:	f8 94       	cli
    45ce:	de bf       	out	0x3e, r29	; 62
    45d0:	0f be       	out	0x3f, r0	; 63
    45d2:	cd bf       	out	0x3d, r28	; 61
    45d4:	7c 01       	movw	r14, r24
    keyevent_t event = keyp->event;
    45d6:	85 e0       	ldi	r24, 0x05	; 5
    45d8:	f7 01       	movw	r30, r14
    45da:	de 01       	movw	r26, r28
    45dc:	1d 96       	adiw	r26, 0x0d	; 13
    45de:	01 90       	ld	r0, Z+
    45e0:	0d 92       	st	X+, r0
    45e2:	8a 95       	dec	r24
    45e4:	e1 f7       	brne	.-8      	; 0x45de <process_tapping+0x26>
    45e6:	d7 01       	movw	r26, r14
    45e8:	4c 91       	ld	r20, X
    45ea:	11 96       	adiw	r26, 0x01	; 1
    45ec:	5c 91       	ld	r21, X
    45ee:	11 97       	sbiw	r26, 0x01	; 1
    45f0:	12 96       	adiw	r26, 0x02	; 2
    45f2:	6c 91       	ld	r22, X
    45f4:	12 97       	sbiw	r26, 0x02	; 2
    45f6:	13 96       	adiw	r26, 0x03	; 3
    45f8:	cd 90       	ld	r12, X+
    45fa:	dc 90       	ld	r13, X
    45fc:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    45fe:	70 91 96 03 	lds	r23, 0x0396
    4602:	e0 91 97 03 	lds	r30, 0x0397
    4606:	80 91 99 03 	lds	r24, 0x0399
    460a:	90 91 9a 03 	lds	r25, 0x039A
    460e:	00 97       	sbiw	r24, 0x00	; 0
    4610:	39 f0       	breq	.+14     	; 0x4620 <process_tapping+0x68>
    4612:	ef 3f       	cpi	r30, 0xFF	; 255
    4614:	41 f4       	brne	.+16     	; 0x4626 <process_tapping+0x6e>
    4616:	21 e0       	ldi	r18, 0x01	; 1
    4618:	30 e0       	ldi	r19, 0x00	; 0
    461a:	7f 3f       	cpi	r23, 0xFF	; 255
    461c:	31 f0       	breq	.+12     	; 0x462a <process_tapping+0x72>
    461e:	03 c0       	rjmp	.+6      	; 0x4626 <process_tapping+0x6e>
    4620:	21 e0       	ldi	r18, 0x01	; 1
    4622:	30 e0       	ldi	r19, 0x00	; 0
    4624:	02 c0       	rjmp	.+4      	; 0x462a <process_tapping+0x72>
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	20 fd       	sbrc	r18, 0
    462c:	5c c1       	rjmp	.+696    	; 0x48e6 <process_tapping+0x32e>
    462e:	20 91 98 03 	lds	r18, 0x0398
    4632:	22 23       	and	r18, r18
    4634:	09 f4       	brne	.+2      	; 0x4638 <process_tapping+0x80>
    4636:	f1 c0       	rjmp	.+482    	; 0x481a <process_tapping+0x262>
        if (WITHIN_TAPPING_TERM(event)) {
    4638:	c8 16       	cp	r12, r24
    463a:	d9 06       	cpc	r13, r25
    463c:	28 f0       	brcs	.+10     	; 0x4648 <process_tapping+0x90>
    463e:	96 01       	movw	r18, r12
    4640:	28 1b       	sub	r18, r24
    4642:	39 0b       	sbc	r19, r25
    4644:	c9 01       	movw	r24, r18
    4646:	04 c0       	rjmp	.+8      	; 0x4650 <process_tapping+0x98>
    4648:	80 95       	com	r24
    464a:	90 95       	com	r25
    464c:	8c 0d       	add	r24, r12
    464e:	9d 1d       	adc	r25, r13
    4650:	88 3c       	cpi	r24, 0xC8	; 200
    4652:	91 05       	cpc	r25, r1
    4654:	08 f0       	brcs	.+2      	; 0x4658 <process_tapping+0xa0>
    4656:	98 c0       	rjmp	.+304    	; 0x4788 <process_tapping+0x1d0>
            if (tapping_key.tap.count == 0) {
    4658:	80 91 9b 03 	lds	r24, 0x039B
    465c:	98 2f       	mov	r25, r24
    465e:	90 7f       	andi	r25, 0xF0	; 240
    4660:	09 f0       	breq	.+2      	; 0x4664 <process_tapping+0xac>
    4662:	64 c0       	rjmp	.+200    	; 0x472c <process_tapping+0x174>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    4664:	e5 13       	cpse	r30, r21
    4666:	14 c0       	rjmp	.+40     	; 0x4690 <process_tapping+0xd8>
    4668:	74 13       	cpse	r23, r20
    466a:	12 c0       	rjmp	.+36     	; 0x4690 <process_tapping+0xd8>
    466c:	61 11       	cpse	r22, r1
    466e:	10 c0       	rjmp	.+32     	; 0x4690 <process_tapping+0xd8>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    4670:	8f 70       	andi	r24, 0x0F	; 15
    4672:	80 61       	ori	r24, 0x10	; 16
    4674:	80 93 9b 03 	sts	0x039B, r24
                    debug_tapping_key();
    4678:	0e 94 56 22 	call	0x44ac	; 0x44ac <debug_tapping_key>
                    process_action(&tapping_key);
    467c:	86 e9       	ldi	r24, 0x96	; 150
    467e:	93 e0       	ldi	r25, 0x03	; 3
    4680:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    4684:	80 91 9b 03 	lds	r24, 0x039B
    4688:	d7 01       	movw	r26, r14
    468a:	15 96       	adiw	r26, 0x05	; 5
    468c:	8c 93       	st	X, r24
    468e:	43 c1       	rjmp	.+646    	; 0x4916 <process_tapping+0x35e>
    4690:	cd 28       	or	r12, r13
    4692:	39 f0       	breq	.+14     	; 0x46a2 <process_tapping+0xea>
    4694:	5f 3f       	cpi	r21, 0xFF	; 255
    4696:	41 f4       	brne	.+16     	; 0x46a8 <process_tapping+0xf0>
    4698:	81 e0       	ldi	r24, 0x01	; 1
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	4f 3f       	cpi	r20, 0xFF	; 255
    469e:	31 f0       	breq	.+12     	; 0x46ac <process_tapping+0xf4>
    46a0:	03 c0       	rjmp	.+6      	; 0x46a8 <process_tapping+0xf0>
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	90 e0       	ldi	r25, 0x00	; 0
    46a6:	02 c0       	rjmp	.+4      	; 0x46ac <process_tapping+0xf4>
    46a8:	80 e0       	ldi	r24, 0x00	; 0
    46aa:	90 e0       	ldi	r25, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    46ac:	80 fd       	sbrc	r24, 0
    46ae:	03 c0       	rjmp	.+6      	; 0x46b6 <process_tapping+0xfe>
    46b0:	81 e0       	ldi	r24, 0x01	; 1
    46b2:	86 27       	eor	r24, r22
    46b4:	02 c0       	rjmp	.+4      	; 0x46ba <process_tapping+0x102>
    46b6:	80 e0       	ldi	r24, 0x00	; 0
    46b8:	90 e0       	ldi	r25, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    46ba:	80 ff       	sbrs	r24, 0
    46bc:	2e c0       	rjmp	.+92     	; 0x471a <process_tapping+0x162>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    46be:	80 91 cc 03 	lds	r24, 0x03CC
    46c2:	20 91 cd 03 	lds	r18, 0x03CD
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    46c6:	36 e0       	ldi	r19, 0x06	; 6
    46c8:	13 c0       	rjmp	.+38     	; 0x46f0 <process_tapping+0x138>
    46ca:	90 e0       	ldi	r25, 0x00	; 0
    46cc:	38 9f       	mul	r19, r24
    46ce:	f0 01       	movw	r30, r0
    46d0:	39 9f       	mul	r19, r25
    46d2:	f0 0d       	add	r31, r0
    46d4:	11 24       	eor	r1, r1
    46d6:	e4 56       	subi	r30, 0x64	; 100
    46d8:	fc 4f       	sbci	r31, 0xFC	; 252
    46da:	71 81       	ldd	r23, Z+1	; 0x01
    46dc:	57 13       	cpse	r21, r23
    46de:	06 c0       	rjmp	.+12     	; 0x46ec <process_tapping+0x134>
    46e0:	70 81       	ld	r23, Z
    46e2:	47 13       	cpse	r20, r23
    46e4:	03 c0       	rjmp	.+6      	; 0x46ec <process_tapping+0x134>
    46e6:	72 81       	ldd	r23, Z+2	; 0x02
    46e8:	67 13       	cpse	r22, r23
    46ea:	17 c0       	rjmp	.+46     	; 0x471a <process_tapping+0x162>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    46ec:	01 96       	adiw	r24, 0x01	; 1
    46ee:	87 70       	andi	r24, 0x07	; 7
    46f0:	82 13       	cpse	r24, r18
    46f2:	eb cf       	rjmp	.-42     	; 0x46ca <process_tapping+0x112>
    46f4:	12 c1       	rjmp	.+548    	; 0x491a <process_tapping+0x362>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    46f6:	9f 70       	andi	r25, 0x0F	; 15
    46f8:	59 f0       	breq	.+22     	; 0x4710 <process_tapping+0x158>
    46fa:	88 23       	and	r24, r24
    46fc:	09 f4       	brne	.+2      	; 0x4700 <process_tapping+0x148>
    46fe:	0b c1       	rjmp	.+534    	; 0x4916 <process_tapping+0x35e>
    4700:	07 c0       	rjmp	.+14     	; 0x4710 <process_tapping+0x158>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    4702:	9f 70       	andi	r25, 0x0F	; 15
    4704:	29 f0       	breq	.+10     	; 0x4710 <process_tapping+0x158>
    4706:	f7 01       	movw	r30, r14
    4708:	95 81       	ldd	r25, Z+5	; 0x05
    470a:	90 7f       	andi	r25, 0xF0	; 240
    470c:	09 f4       	brne	.+2      	; 0x4710 <process_tapping+0x158>
    470e:	03 c1       	rjmp	.+518    	; 0x4916 <process_tapping+0x35e>
                            if (IS_MOD(action.key.code)) return false;
    4710:	80 5e       	subi	r24, 0xE0	; 224
    4712:	88 30       	cpi	r24, 0x08	; 8
    4714:	08 f4       	brcc	.+2      	; 0x4718 <process_tapping+0x160>
    4716:	ff c0       	rjmp	.+510    	; 0x4916 <process_tapping+0x35e>
    4718:	d2 c0       	rjmp	.+420    	; 0x48be <process_tapping+0x306>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    471a:	66 23       	and	r22, r22
    471c:	09 f4       	brne	.+2      	; 0x4720 <process_tapping+0x168>
    471e:	fb c0       	rjmp	.+502    	; 0x4916 <process_tapping+0x35e>
                        tapping_key.tap.interrupted = true;
    4720:	80 91 9b 03 	lds	r24, 0x039B
    4724:	81 60       	ori	r24, 0x01	; 1
    4726:	80 93 9b 03 	sts	0x039B, r24
    472a:	f5 c0       	rjmp	.+490    	; 0x4916 <process_tapping+0x35e>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    472c:	e5 13       	cpse	r30, r21
    472e:	08 c0       	rjmp	.+16     	; 0x4740 <process_tapping+0x188>
    4730:	74 13       	cpse	r23, r20
    4732:	06 c0       	rjmp	.+12     	; 0x4740 <process_tapping+0x188>
    4734:	61 11       	cpse	r22, r1
    4736:	04 c0       	rjmp	.+8      	; 0x4740 <process_tapping+0x188>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    4738:	d7 01       	movw	r26, r14
    473a:	15 96       	adiw	r26, 0x05	; 5
    473c:	8c 93       	st	X, r24
    473e:	9d c0       	rjmp	.+314    	; 0x487a <process_tapping+0x2c2>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    4740:	4d 87       	std	Y+13, r20	; 0x0d
    4742:	5e 87       	std	Y+14, r21	; 0x0e
    4744:	8d 85       	ldd	r24, Y+13	; 0x0d
    4746:	9e 85       	ldd	r25, Y+14	; 0x0e
    4748:	6a 8b       	std	Y+18, r22	; 0x12
    474a:	0e 94 ee 21 	call	0x43dc	; 0x43dc <is_tap_key>
    474e:	6a 89       	ldd	r22, Y+18	; 0x12
    4750:	88 23       	and	r24, r24
    4752:	09 f4       	brne	.+2      	; 0x4756 <process_tapping+0x19e>
    4754:	b4 c0       	rjmp	.+360    	; 0x48be <process_tapping+0x306>
    4756:	66 23       	and	r22, r22
    4758:	09 f4       	brne	.+2      	; 0x475c <process_tapping+0x1a4>
    475a:	b1 c0       	rjmp	.+354    	; 0x48be <process_tapping+0x306>
                    if (tapping_key.tap.count > 1) {
    475c:	20 91 9b 03 	lds	r18, 0x039B
    4760:	82 2f       	mov	r24, r18
    4762:	82 95       	swap	r24
    4764:	8f 70       	andi	r24, 0x0F	; 15
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	02 97       	sbiw	r24, 0x02	; 2
    476a:	0c f4       	brge	.+2      	; 0x476e <process_tapping+0x1b6>
    476c:	c6 c0       	rjmp	.+396    	; 0x48fa <process_tapping+0x342>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    476e:	80 91 96 03 	lds	r24, 0x0396
    4772:	90 91 97 03 	lds	r25, 0x0397
    4776:	98 87       	std	Y+8, r25	; 0x08
    4778:	8f 83       	std	Y+7, r24	; 0x07
    477a:	19 86       	std	Y+9, r1	; 0x09
    477c:	db 86       	std	Y+11, r13	; 0x0b
    477e:	ca 86       	std	Y+10, r12	; 0x0a
    4780:	2c 87       	std	Y+12, r18	; 0x0c
    4782:	ce 01       	movw	r24, r28
    4784:	07 96       	adiw	r24, 0x07	; 7
    4786:	46 c0       	rjmp	.+140    	; 0x4814 <process_tapping+0x25c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    4788:	80 91 9b 03 	lds	r24, 0x039B
    478c:	98 2f       	mov	r25, r24
    478e:	90 7f       	andi	r25, 0xF0	; 240
    4790:	59 f4       	brne	.+22     	; 0x47a8 <process_tapping+0x1f0>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    4792:	7c 2d       	mov	r23, r12
    4794:	d9 8a       	std	Y+17, r13	; 0x11
    4796:	c8 8a       	std	Y+16, r12	; 0x10
    4798:	89 89       	ldd	r24, Y+17	; 0x11
    479a:	0e 94 13 22 	call	0x4426	; 0x4426 <debug_event>
                process_action(&tapping_key);
    479e:	86 e9       	ldi	r24, 0x96	; 150
    47a0:	93 e0       	ldi	r25, 0x03	; 3
    47a2:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <process_action>
    47a6:	95 c0       	rjmp	.+298    	; 0x48d2 <process_tapping+0x31a>
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    47a8:	e5 13       	cpse	r30, r21
    47aa:	11 c0       	rjmp	.+34     	; 0x47ce <process_tapping+0x216>
    47ac:	74 13       	cpse	r23, r20
    47ae:	0f c0       	rjmp	.+30     	; 0x47ce <process_tapping+0x216>
    47b0:	61 11       	cpse	r22, r1
    47b2:	0d c0       	rjmp	.+26     	; 0x47ce <process_tapping+0x216>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    47b4:	f7 01       	movw	r30, r14
    47b6:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    47b8:	c7 01       	movw	r24, r14
    47ba:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <process_action>
                    tapping_key = (keyrecord_t){};
    47be:	e6 e9       	ldi	r30, 0x96	; 150
    47c0:	f3 e0       	ldi	r31, 0x03	; 3
    47c2:	86 e0       	ldi	r24, 0x06	; 6
    47c4:	df 01       	movw	r26, r30
    47c6:	1d 92       	st	X+, r1
    47c8:	8a 95       	dec	r24
    47ca:	e9 f7       	brne	.-6      	; 0x47c6 <process_tapping+0x20e>
    47cc:	a2 c0       	rjmp	.+324    	; 0x4912 <process_tapping+0x35a>
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    47ce:	4d 87       	std	Y+13, r20	; 0x0d
    47d0:	5e 87       	std	Y+14, r21	; 0x0e
    47d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    47d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    47d6:	6a 8b       	std	Y+18, r22	; 0x12
    47d8:	0e 94 ee 21 	call	0x43dc	; 0x43dc <is_tap_key>
    47dc:	6a 89       	ldd	r22, Y+18	; 0x12
    47de:	88 23       	and	r24, r24
    47e0:	09 f4       	brne	.+2      	; 0x47e4 <process_tapping+0x22c>
    47e2:	6d c0       	rjmp	.+218    	; 0x48be <process_tapping+0x306>
    47e4:	66 23       	and	r22, r22
    47e6:	09 f4       	brne	.+2      	; 0x47ea <process_tapping+0x232>
    47e8:	6a c0       	rjmp	.+212    	; 0x48be <process_tapping+0x306>
                    if (tapping_key.tap.count > 1) {
    47ea:	20 91 9b 03 	lds	r18, 0x039B
    47ee:	82 2f       	mov	r24, r18
    47f0:	82 95       	swap	r24
    47f2:	8f 70       	andi	r24, 0x0F	; 15
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	02 97       	sbiw	r24, 0x02	; 2
    47f8:	0c f4       	brge	.+2      	; 0x47fc <process_tapping+0x244>
    47fa:	7f c0       	rjmp	.+254    	; 0x48fa <process_tapping+0x342>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    47fc:	80 91 96 03 	lds	r24, 0x0396
    4800:	90 91 97 03 	lds	r25, 0x0397
    4804:	9a 83       	std	Y+2, r25	; 0x02
    4806:	89 83       	std	Y+1, r24	; 0x01
    4808:	1b 82       	std	Y+3, r1	; 0x03
    480a:	dd 82       	std	Y+5, r13	; 0x05
    480c:	cc 82       	std	Y+4, r12	; 0x04
    480e:	2e 83       	std	Y+6, r18	; 0x06
    4810:	ce 01       	movw	r24, r28
    4812:	01 96       	adiw	r24, 0x01	; 1
    4814:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <process_action>
    4818:	70 c0       	rjmp	.+224    	; 0x48fa <process_tapping+0x342>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    481a:	c8 16       	cp	r12, r24
    481c:	d9 06       	cpc	r13, r25
    481e:	28 f0       	brcs	.+10     	; 0x482a <process_tapping+0x272>
    4820:	96 01       	movw	r18, r12
    4822:	28 1b       	sub	r18, r24
    4824:	39 0b       	sbc	r19, r25
    4826:	c9 01       	movw	r24, r18
    4828:	04 c0       	rjmp	.+8      	; 0x4832 <process_tapping+0x27a>
    482a:	80 95       	com	r24
    482c:	90 95       	com	r25
    482e:	8c 0d       	add	r24, r12
    4830:	9d 1d       	adc	r25, r13
    4832:	88 3c       	cpi	r24, 0xC8	; 200
    4834:	91 05       	cpc	r25, r1
    4836:	08 f0       	brcs	.+2      	; 0x483a <process_tapping+0x282>
    4838:	46 c0       	rjmp	.+140    	; 0x48c6 <process_tapping+0x30e>
            if (event.pressed) {
    483a:	66 23       	and	r22, r22
    483c:	09 f4       	brne	.+2      	; 0x4840 <process_tapping+0x288>
    483e:	3f c0       	rjmp	.+126    	; 0x48be <process_tapping+0x306>
                if (IS_TAPPING_KEY(event.key)) {
    4840:	e5 13       	cpse	r30, r21
    4842:	30 c0       	rjmp	.+96     	; 0x48a4 <process_tapping+0x2ec>
    4844:	74 13       	cpse	r23, r20
    4846:	2e c0       	rjmp	.+92     	; 0x48a4 <process_tapping+0x2ec>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    4848:	20 91 9b 03 	lds	r18, 0x039B
    484c:	20 fd       	sbrc	r18, 0
    484e:	21 c0       	rjmp	.+66     	; 0x4892 <process_tapping+0x2da>
    4850:	32 2f       	mov	r19, r18
    4852:	32 95       	swap	r19
    4854:	3f 70       	andi	r19, 0x0F	; 15
    4856:	83 2f       	mov	r24, r19
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	00 97       	sbiw	r24, 0x00	; 0
    485c:	d1 f0       	breq	.+52     	; 0x4892 <process_tapping+0x2da>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    485e:	d7 01       	movw	r26, r14
    4860:	15 96       	adiw	r26, 0x05	; 5
    4862:	2c 93       	st	X, r18
    4864:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    4866:	0f 97       	sbiw	r24, 0x0f	; 15
    4868:	41 f0       	breq	.+16     	; 0x487a <process_tapping+0x2c2>
    486a:	83 2f       	mov	r24, r19
    486c:	8f 5f       	subi	r24, 0xFF	; 255
    486e:	82 95       	swap	r24
    4870:	80 7f       	andi	r24, 0xF0	; 240
    4872:	2f 70       	andi	r18, 0x0F	; 15
    4874:	28 2b       	or	r18, r24
    4876:	15 96       	adiw	r26, 0x05	; 5
    4878:	2c 93       	st	X, r18
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    487a:	c7 01       	movw	r24, r14
    487c:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <process_action>
                        tapping_key = *keyp;
    4880:	86 e0       	ldi	r24, 0x06	; 6
    4882:	f7 01       	movw	r30, r14
    4884:	a6 e9       	ldi	r26, 0x96	; 150
    4886:	b3 e0       	ldi	r27, 0x03	; 3
    4888:	01 90       	ld	r0, Z+
    488a:	0d 92       	st	X+, r0
    488c:	8a 95       	dec	r24
    488e:	e1 f7       	brne	.-8      	; 0x4888 <process_tapping+0x2d0>
    4890:	3e c0       	rjmp	.+124    	; 0x490e <process_tapping+0x356>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    4892:	86 e0       	ldi	r24, 0x06	; 6
    4894:	f7 01       	movw	r30, r14
    4896:	a6 e9       	ldi	r26, 0x96	; 150
    4898:	b3 e0       	ldi	r27, 0x03	; 3
    489a:	01 90       	ld	r0, Z+
    489c:	0d 92       	st	X+, r0
    489e:	8a 95       	dec	r24
    48a0:	e1 f7       	brne	.-8      	; 0x489a <process_tapping+0x2e2>
    48a2:	37 c0       	rjmp	.+110    	; 0x4912 <process_tapping+0x35a>
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
    48a4:	4d 87       	std	Y+13, r20	; 0x0d
    48a6:	5e 87       	std	Y+14, r21	; 0x0e
    48a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    48aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    48ac:	0e 94 ee 21 	call	0x43dc	; 0x43dc <is_tap_key>
    48b0:	81 11       	cpse	r24, r1
    48b2:	23 c0       	rjmp	.+70     	; 0x48fa <process_tapping+0x342>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    48b4:	80 91 9b 03 	lds	r24, 0x039B
    48b8:	81 60       	ori	r24, 0x01	; 1
    48ba:	80 93 9b 03 	sts	0x039B, r24
                    process_action(keyp);
    48be:	c7 01       	movw	r24, r14
    48c0:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <process_action>
    48c4:	26 c0       	rjmp	.+76     	; 0x4912 <process_tapping+0x35a>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    48c6:	7c 2d       	mov	r23, r12
    48c8:	d9 8a       	std	Y+17, r13	; 0x11
    48ca:	c8 8a       	std	Y+16, r12	; 0x10
    48cc:	89 89       	ldd	r24, Y+17	; 0x11
    48ce:	0e 94 13 22 	call	0x4426	; 0x4426 <debug_event>
            tapping_key = (keyrecord_t){};
    48d2:	e6 e9       	ldi	r30, 0x96	; 150
    48d4:	f3 e0       	ldi	r31, 0x03	; 3
    48d6:	86 e0       	ldi	r24, 0x06	; 6
    48d8:	df 01       	movw	r26, r30
    48da:	1d 92       	st	X+, r1
    48dc:	8a 95       	dec	r24
    48de:	e9 f7       	brne	.-6      	; 0x48da <process_tapping+0x322>
            debug_tapping_key();
    48e0:	0e 94 56 22 	call	0x44ac	; 0x44ac <debug_tapping_key>
    48e4:	18 c0       	rjmp	.+48     	; 0x4916 <process_tapping+0x35e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    48e6:	66 23       	and	r22, r22
    48e8:	51 f3       	breq	.-44     	; 0x48be <process_tapping+0x306>
    48ea:	4d 87       	std	Y+13, r20	; 0x0d
    48ec:	5e 87       	std	Y+14, r21	; 0x0e
    48ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    48f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    48f2:	0e 94 ee 21 	call	0x43dc	; 0x43dc <is_tap_key>
    48f6:	88 23       	and	r24, r24
    48f8:	11 f3       	breq	.-60     	; 0x48be <process_tapping+0x306>
            debug("Tapping: Start(Press tap key).\n");
            tapping_key = *keyp;
    48fa:	86 e0       	ldi	r24, 0x06	; 6
    48fc:	f7 01       	movw	r30, r14
    48fe:	a6 e9       	ldi	r26, 0x96	; 150
    4900:	b3 e0       	ldi	r27, 0x03	; 3
    4902:	01 90       	ld	r0, Z+
    4904:	0d 92       	st	X+, r0
    4906:	8a 95       	dec	r24
    4908:	e1 f7       	brne	.-8      	; 0x4902 <process_tapping+0x34a>
            waiting_buffer_scan_tap();
    490a:	0e 94 64 22 	call	0x44c8	; 0x44c8 <waiting_buffer_scan_tap>
            debug_tapping_key();
    490e:	0e 94 56 22 	call	0x44ac	; 0x44ac <debug_tapping_key>
            return true;
    4912:	81 e0       	ldi	r24, 0x01	; 1
    4914:	14 c0       	rjmp	.+40     	; 0x493e <process_tapping+0x386>
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
                        tapping_key.tap.interrupted = true;
                    }
                    // enqueue 
                    return false;
    4916:	80 e0       	ldi	r24, 0x00	; 0
    4918:	12 c0       	rjmp	.+36     	; 0x493e <process_tapping+0x386>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    491a:	4d 87       	std	Y+13, r20	; 0x0d
    491c:	5e 87       	std	Y+14, r21	; 0x0e
    491e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4920:	9e 85       	ldd	r25, Y+14	; 0x0e
    4922:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <layer_switch_get_action>
                    switch (action.kind.id) {
    4926:	29 2f       	mov	r18, r25
    4928:	22 95       	swap	r18
    492a:	2f 70       	andi	r18, 0x0F	; 15
    492c:	30 e0       	ldi	r19, 0x00	; 0
    492e:	22 30       	cpi	r18, 0x02	; 2
    4930:	31 05       	cpc	r19, r1
    4932:	0c f4       	brge	.+2      	; 0x4936 <process_tapping+0x37e>
    4934:	e0 ce       	rjmp	.-576    	; 0x46f6 <process_tapping+0x13e>
    4936:	24 30       	cpi	r18, 0x04	; 4
    4938:	31 05       	cpc	r19, r1
    493a:	0c f6       	brge	.-126    	; 0x48be <process_tapping+0x306>
    493c:	e2 ce       	rjmp	.-572    	; 0x4702 <process_tapping+0x14a>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    493e:	62 96       	adiw	r28, 0x12	; 18
    4940:	0f b6       	in	r0, 0x3f	; 63
    4942:	f8 94       	cli
    4944:	de bf       	out	0x3e, r29	; 62
    4946:	0f be       	out	0x3f, r0	; 63
    4948:	cd bf       	out	0x3d, r28	; 61
    494a:	df 91       	pop	r29
    494c:	cf 91       	pop	r28
    494e:	ff 90       	pop	r15
    4950:	ef 90       	pop	r14
    4952:	df 90       	pop	r13
    4954:	cf 90       	pop	r12
    4956:	08 95       	ret

00004958 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    4958:	1f 93       	push	r17
    495a:	cf 93       	push	r28
    495c:	df 93       	push	r29
    495e:	cd b7       	in	r28, 0x3d	; 61
    4960:	de b7       	in	r29, 0x3e	; 62
    4962:	2c 97       	sbiw	r28, 0x0c	; 12
    4964:	0f b6       	in	r0, 0x3f	; 63
    4966:	f8 94       	cli
    4968:	de bf       	out	0x3e, r29	; 62
    496a:	0f be       	out	0x3f, r0	; 63
    496c:	cd bf       	out	0x3d, r28	; 61
    496e:	4f 83       	std	Y+7, r20	; 0x07
    4970:	58 87       	std	Y+8, r21	; 0x08
    4972:	69 87       	std	Y+9, r22	; 0x09
    4974:	7a 87       	std	Y+10, r23	; 0x0a
    4976:	8b 87       	std	Y+11, r24	; 0x0b
    4978:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    497a:	ce 01       	movw	r24, r28
    497c:	07 96       	adiw	r24, 0x07	; 7
    497e:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <process_tapping>
    4982:	88 23       	and	r24, r24
    4984:	d9 f0       	breq	.+54     	; 0x49bc <action_tapping_process+0x64>
        if (!IS_NOEVENT(record.event)) {
    4986:	2f 81       	ldd	r18, Y+7	; 0x07
    4988:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    498a:	8a 85       	ldd	r24, Y+10	; 0x0a
    498c:	9b 85       	ldd	r25, Y+11	; 0x0b
    498e:	89 2b       	or	r24, r25
    4990:	39 f0       	breq	.+14     	; 0x49a0 <action_tapping_process+0x48>
    4992:	3f 3f       	cpi	r19, 0xFF	; 255
    4994:	19 f0       	breq	.+6      	; 0x499c <action_tapping_process+0x44>
    4996:	80 e0       	ldi	r24, 0x00	; 0
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	04 c0       	rjmp	.+8      	; 0x49a4 <action_tapping_process+0x4c>
    499c:	2f 3f       	cpi	r18, 0xFF	; 255
    499e:	d9 f7       	brne	.-10     	; 0x4996 <action_tapping_process+0x3e>
    49a0:	81 e0       	ldi	r24, 0x01	; 1
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	89 2b       	or	r24, r25
    49a6:	09 f0       	breq	.+2      	; 0x49aa <action_tapping_process+0x52>
    49a8:	6d c0       	rjmp	.+218    	; 0x4a84 <action_tapping_process+0x12c>
            debug("processed: "); debug_record(record); debug("\n");
    49aa:	4f 81       	ldd	r20, Y+7	; 0x07
    49ac:	58 85       	ldd	r21, Y+8	; 0x08
    49ae:	69 85       	ldd	r22, Y+9	; 0x09
    49b0:	7a 85       	ldd	r23, Y+10	; 0x0a
    49b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    49b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    49b6:	0e 94 22 22 	call	0x4444	; 0x4444 <debug_record>
    49ba:	64 c0       	rjmp	.+200    	; 0x4a84 <action_tapping_process+0x12c>
    49bc:	86 e0       	ldi	r24, 0x06	; 6
    49be:	fe 01       	movw	r30, r28
    49c0:	37 96       	adiw	r30, 0x07	; 7
    49c2:	de 01       	movw	r26, r28
    49c4:	11 96       	adiw	r26, 0x01	; 1
    49c6:	01 90       	ld	r0, Z+
    49c8:	0d 92       	st	X+, r0
    49ca:	8a 95       	dec	r24
    49cc:	e1 f7       	brne	.-8      	; 0x49c6 <action_tapping_process+0x6e>
    49ce:	ff 81       	ldd	r31, Y+7	; 0x07
    49d0:	e8 85       	ldd	r30, Y+8	; 0x08
    49d2:	4a 85       	ldd	r20, Y+10	; 0x0a
    49d4:	5b 85       	ldd	r21, Y+11	; 0x0b
    49d6:	41 15       	cp	r20, r1
    49d8:	51 05       	cpc	r21, r1
    49da:	39 f0       	breq	.+14     	; 0x49ea <action_tapping_process+0x92>
    49dc:	ef 3f       	cpi	r30, 0xFF	; 255
    49de:	41 f4       	brne	.+16     	; 0x49f0 <action_tapping_process+0x98>
    49e0:	81 e0       	ldi	r24, 0x01	; 1
    49e2:	90 e0       	ldi	r25, 0x00	; 0
    49e4:	ff 3f       	cpi	r31, 0xFF	; 255
    49e6:	31 f0       	breq	.+12     	; 0x49f4 <action_tapping_process+0x9c>
    49e8:	03 c0       	rjmp	.+6      	; 0x49f0 <action_tapping_process+0x98>
    49ea:	81 e0       	ldi	r24, 0x01	; 1
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	02 c0       	rjmp	.+4      	; 0x49f4 <action_tapping_process+0x9c>
    49f0:	80 e0       	ldi	r24, 0x00	; 0
    49f2:	90 e0       	ldi	r25, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    49f4:	80 fd       	sbrc	r24, 0
    49f6:	46 c0       	rjmp	.+140    	; 0x4a84 <action_tapping_process+0x12c>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    49f8:	20 91 cd 03 	lds	r18, 0x03CD
    49fc:	30 e0       	ldi	r19, 0x00	; 0
    49fe:	c9 01       	movw	r24, r18
    4a00:	01 96       	adiw	r24, 0x01	; 1
    4a02:	87 70       	andi	r24, 0x07	; 7
    4a04:	99 27       	eor	r25, r25
    4a06:	60 91 cc 03 	lds	r22, 0x03CC
    4a0a:	70 e0       	ldi	r23, 0x00	; 0
    4a0c:	86 17       	cp	r24, r22
    4a0e:	97 07       	cpc	r25, r23
    4a10:	09 f4       	brne	.+2      	; 0x4a14 <action_tapping_process+0xbc>
    4a12:	40 c0       	rjmp	.+128    	; 0x4a94 <action_tapping_process+0x13c>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    4a14:	f9 83       	std	Y+1, r31	; 0x01
    4a16:	ea 83       	std	Y+2, r30	; 0x02
    4a18:	5d 83       	std	Y+5, r21	; 0x05
    4a1a:	4c 83       	std	Y+4, r20	; 0x04
    4a1c:	96 e0       	ldi	r25, 0x06	; 6
    4a1e:	92 9f       	mul	r25, r18
    4a20:	d0 01       	movw	r26, r0
    4a22:	93 9f       	mul	r25, r19
    4a24:	b0 0d       	add	r27, r0
    4a26:	11 24       	eor	r1, r1
    4a28:	a4 56       	subi	r26, 0x64	; 100
    4a2a:	bc 4f       	sbci	r27, 0xFC	; 252
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	31 96       	adiw	r30, 0x01	; 1
    4a30:	01 90       	ld	r0, Z+
    4a32:	0d 92       	st	X+, r0
    4a34:	9a 95       	dec	r25
    4a36:	e1 f7       	brne	.-8      	; 0x4a30 <action_tapping_process+0xd8>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    4a38:	80 93 cd 03 	sts	0x03CD, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    4a3c:	0e 94 32 22 	call	0x4464	; 0x4464 <debug_waiting_buffer>
    4a40:	21 c0       	rjmp	.+66     	; 0x4a84 <action_tapping_process+0x12c>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    4a42:	18 9f       	mul	r17, r24
    4a44:	c0 01       	movw	r24, r0
    4a46:	11 24       	eor	r1, r1
    4a48:	84 56       	subi	r24, 0x64	; 100
    4a4a:	9c 4f       	sbci	r25, 0xFC	; 252
    4a4c:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <process_tapping>
    4a50:	88 23       	and	r24, r24
    4a52:	71 f1       	breq	.+92     	; 0x4ab0 <action_tapping_process+0x158>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    4a54:	e0 91 cc 03 	lds	r30, 0x03CC
    4a58:	1e 9f       	mul	r17, r30
    4a5a:	f0 01       	movw	r30, r0
    4a5c:	11 24       	eor	r1, r1
    4a5e:	e4 56       	subi	r30, 0x64	; 100
    4a60:	fc 4f       	sbci	r31, 0xFC	; 252
    4a62:	40 81       	ld	r20, Z
    4a64:	51 81       	ldd	r21, Z+1	; 0x01
    4a66:	62 81       	ldd	r22, Z+2	; 0x02
    4a68:	73 81       	ldd	r23, Z+3	; 0x03
    4a6a:	84 81       	ldd	r24, Z+4	; 0x04
    4a6c:	95 81       	ldd	r25, Z+5	; 0x05
    4a6e:	0e 94 22 22 	call	0x4444	; 0x4444 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    4a72:	80 91 cc 03 	lds	r24, 0x03CC
    4a76:	90 e0       	ldi	r25, 0x00	; 0
    4a78:	01 96       	adiw	r24, 0x01	; 1
    4a7a:	87 70       	andi	r24, 0x07	; 7
    4a7c:	99 27       	eor	r25, r25
    4a7e:	80 93 cc 03 	sts	0x03CC, r24
    4a82:	01 c0       	rjmp	.+2      	; 0x4a86 <action_tapping_process+0x12e>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    4a84:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    4a86:	80 91 cc 03 	lds	r24, 0x03CC
    4a8a:	90 91 cd 03 	lds	r25, 0x03CD
    4a8e:	89 13       	cpse	r24, r25
    4a90:	d8 cf       	rjmp	.-80     	; 0x4a42 <action_tapping_process+0xea>
    4a92:	0e c0       	rjmp	.+28     	; 0x4ab0 <action_tapping_process+0x158>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    4a94:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    4a98:	10 92 cd 03 	sts	0x03CD, r1
    waiting_buffer_tail = 0;
    4a9c:	10 92 cc 03 	sts	0x03CC, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    4aa0:	e6 e9       	ldi	r30, 0x96	; 150
    4aa2:	f3 e0       	ldi	r31, 0x03	; 3
    4aa4:	86 e0       	ldi	r24, 0x06	; 6
    4aa6:	df 01       	movw	r26, r30
    4aa8:	1d 92       	st	X+, r1
    4aaa:	8a 95       	dec	r24
    4aac:	e9 f7       	brne	.-6      	; 0x4aa8 <action_tapping_process+0x150>
    4aae:	ea cf       	rjmp	.-44     	; 0x4a84 <action_tapping_process+0x12c>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    4ab0:	2c 96       	adiw	r28, 0x0c	; 12
    4ab2:	0f b6       	in	r0, 0x3f	; 63
    4ab4:	f8 94       	cli
    4ab6:	de bf       	out	0x3e, r29	; 62
    4ab8:	0f be       	out	0x3f, r0	; 63
    4aba:	cd bf       	out	0x3d, r28	; 61
    4abc:	df 91       	pop	r29
    4abe:	cf 91       	pop	r28
    4ac0:	1f 91       	pop	r17
    4ac2:	08 95       	ret

00004ac4 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    4ac4:	cf 92       	push	r12
    4ac6:	df 92       	push	r13
    4ac8:	ef 92       	push	r14
    4aca:	ff 92       	push	r15
    4acc:	cf 93       	push	r28
    4ace:	df 93       	push	r29
    4ad0:	9c 01       	movw	r18, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    4ad2:	00 97       	sbiw	r24, 0x00	; 0
    4ad4:	09 f4       	brne	.+2      	; 0x4ad8 <action_macro_play+0x14>
    4ad6:	8e c0       	rjmp	.+284    	; 0x4bf4 <action_macro_play+0x130>
    4ad8:	d0 e0       	ldi	r29, 0x00	; 0
    4ada:	c0 e0       	ldi	r28, 0x00	; 0
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    4adc:	cc 24       	eor	r12, r12
    4ade:	c3 94       	inc	r12
    4ae0:	d1 2c       	mov	r13, r1

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    4ae2:	79 01       	movw	r14, r18
    4ae4:	8f ef       	ldi	r24, 0xFF	; 255
    4ae6:	e8 1a       	sub	r14, r24
    4ae8:	f8 0a       	sbc	r15, r24
    4aea:	f9 01       	movw	r30, r18
    4aec:	84 91       	lpm	r24, Z
    4aee:	85 37       	cpi	r24, 0x75	; 117
    4af0:	09 f4       	brne	.+2      	; 0x4af4 <action_macro_play+0x30>
    4af2:	5b c0       	rjmp	.+182    	; 0x4baa <action_macro_play+0xe6>
    4af4:	60 f4       	brcc	.+24     	; 0x4b0e <action_macro_play+0x4a>
    4af6:	84 37       	cpi	r24, 0x74	; 116
    4af8:	08 f0       	brcs	.+2      	; 0x4afc <action_macro_play+0x38>
    4afa:	46 c0       	rjmp	.+140    	; 0x4b88 <action_macro_play+0xc4>
    4afc:	84 30       	cpi	r24, 0x04	; 4
    4afe:	08 f0       	brcs	.+2      	; 0x4b02 <action_macro_play+0x3e>
    4b00:	66 c0       	rjmp	.+204    	; 0x4bce <action_macro_play+0x10a>
    4b02:	81 30       	cpi	r24, 0x01	; 1
    4b04:	a9 f0       	breq	.+42     	; 0x4b30 <action_macro_play+0x6c>
    4b06:	82 30       	cpi	r24, 0x02	; 2
    4b08:	09 f0       	breq	.+2      	; 0x4b0c <action_macro_play+0x48>
    4b0a:	74 c0       	rjmp	.+232    	; 0x4bf4 <action_macro_play+0x130>
    4b0c:	26 c0       	rjmp	.+76     	; 0x4b5a <action_macro_play+0x96>
    4b0e:	88 37       	cpi	r24, 0x78	; 120
    4b10:	09 f4       	brne	.+2      	; 0x4b14 <action_macro_play+0x50>
    4b12:	5a c0       	rjmp	.+180    	; 0x4bc8 <action_macro_play+0x104>
    4b14:	38 f4       	brcc	.+14     	; 0x4b24 <action_macro_play+0x60>
    4b16:	86 37       	cpi	r24, 0x76	; 118
    4b18:	09 f4       	brne	.+2      	; 0x4b1c <action_macro_play+0x58>
    4b1a:	4e c0       	rjmp	.+156    	; 0x4bb8 <action_macro_play+0xf4>
    4b1c:	87 37       	cpi	r24, 0x77	; 119
    4b1e:	09 f0       	breq	.+2      	; 0x4b22 <action_macro_play+0x5e>
    4b20:	69 c0       	rjmp	.+210    	; 0x4bf4 <action_macro_play+0x130>
    4b22:	4e c0       	rjmp	.+156    	; 0x4bc0 <action_macro_play+0xfc>
    4b24:	98 2f       	mov	r25, r24
    4b26:	94 58       	subi	r25, 0x84	; 132
    4b28:	90 37       	cpi	r25, 0x70	; 112
    4b2a:	08 f0       	brcs	.+2      	; 0x4b2e <action_macro_play+0x6a>
    4b2c:	63 c0       	rjmp	.+198    	; 0x4bf4 <action_macro_play+0x130>
    4b2e:	52 c0       	rjmp	.+164    	; 0x4bd4 <action_macro_play+0x110>
            case KEY_DOWN:
                MACRO_READ();
    4b30:	f7 01       	movw	r30, r14
    4b32:	79 01       	movw	r14, r18
    4b34:	82 e0       	ldi	r24, 0x02	; 2
    4b36:	e8 0e       	add	r14, r24
    4b38:	f1 1c       	adc	r15, r1
    4b3a:	e4 91       	lpm	r30, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    4b3c:	8e 2f       	mov	r24, r30
    4b3e:	80 5e       	subi	r24, 0xE0	; 224
    4b40:	88 30       	cpi	r24, 0x08	; 8
    4b42:	48 f4       	brcc	.+18     	; 0x4b56 <action_macro_play+0x92>
                    add_weak_mods(MOD_BIT(macro));
    4b44:	e7 70       	andi	r30, 0x07	; 7
    4b46:	8c 2d       	mov	r24, r12
    4b48:	01 c0       	rjmp	.+2      	; 0x4b4c <action_macro_play+0x88>
    4b4a:	88 0f       	add	r24, r24
    4b4c:	ea 95       	dec	r30
    4b4e:	ea f7       	brpl	.-6      	; 0x4b4a <action_macro_play+0x86>
    4b50:	0e 94 90 27 	call	0x4f20	; 0x4f20 <add_weak_mods>
    4b54:	14 c0       	rjmp	.+40     	; 0x4b7e <action_macro_play+0xba>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    4b56:	8e 2f       	mov	r24, r30
    4b58:	3a c0       	rjmp	.+116    	; 0x4bce <action_macro_play+0x10a>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    4b5a:	f7 01       	movw	r30, r14
    4b5c:	79 01       	movw	r14, r18
    4b5e:	82 e0       	ldi	r24, 0x02	; 2
    4b60:	e8 0e       	add	r14, r24
    4b62:	f1 1c       	adc	r15, r1
    4b64:	e4 91       	lpm	r30, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    4b66:	8e 2f       	mov	r24, r30
    4b68:	80 5e       	subi	r24, 0xE0	; 224
    4b6a:	88 30       	cpi	r24, 0x08	; 8
    4b6c:	58 f4       	brcc	.+22     	; 0x4b84 <action_macro_play+0xc0>
                    del_weak_mods(MOD_BIT(macro));
    4b6e:	e7 70       	andi	r30, 0x07	; 7
    4b70:	8c 2d       	mov	r24, r12
    4b72:	01 c0       	rjmp	.+2      	; 0x4b76 <action_macro_play+0xb2>
    4b74:	88 0f       	add	r24, r24
    4b76:	ea 95       	dec	r30
    4b78:	ea f7       	brpl	.-6      	; 0x4b74 <action_macro_play+0xb0>
    4b7a:	0e 94 96 27 	call	0x4f2c	; 0x4f2c <del_weak_mods>
                    send_keyboard_report();
    4b7e:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <send_keyboard_report>
    4b82:	2b c0       	rjmp	.+86     	; 0x4bda <action_macro_play+0x116>
                } else {
                    unregister_code(macro);
    4b84:	8e 2f       	mov	r24, r30
    4b86:	27 c0       	rjmp	.+78     	; 0x4bd6 <action_macro_play+0x112>
                }
                break;
            case WAIT:
                MACRO_READ();
    4b88:	f7 01       	movw	r30, r14
    4b8a:	79 01       	movw	r14, r18
    4b8c:	82 e0       	ldi	r24, 0x02	; 2
    4b8e:	e8 0e       	add	r14, r24
    4b90:	f1 1c       	adc	r15, r1
    4b92:	94 91       	lpm	r25, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    4b94:	07 c0       	rjmp	.+14     	; 0x4ba4 <action_macro_play+0xe0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4b96:	ef ec       	ldi	r30, 0xCF	; 207
    4b98:	f7 e0       	ldi	r31, 0x07	; 7
    4b9a:	31 97       	sbiw	r30, 0x01	; 1
    4b9c:	f1 f7       	brne	.-4      	; 0x4b9a <action_macro_play+0xd6>
    4b9e:	00 c0       	rjmp	.+0      	; 0x4ba0 <action_macro_play+0xdc>
    4ba0:	00 00       	nop
    4ba2:	91 50       	subi	r25, 0x01	; 1
    4ba4:	91 11       	cpse	r25, r1
    4ba6:	f7 cf       	rjmp	.-18     	; 0x4b96 <action_macro_play+0xd2>
    4ba8:	18 c0       	rjmp	.+48     	; 0x4bda <action_macro_play+0x116>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    4baa:	f7 01       	movw	r30, r14
    4bac:	79 01       	movw	r14, r18
    4bae:	82 e0       	ldi	r24, 0x02	; 2
    4bb0:	e8 0e       	add	r14, r24
    4bb2:	f1 1c       	adc	r15, r1
    4bb4:	c4 91       	lpm	r28, Z
                dprintf("INTERVAL(%u)\n", interval);
                break;
    4bb6:	11 c0       	rjmp	.+34     	; 0x4bda <action_macro_play+0x116>
            case MOD_STORE:
                mod_storage = get_mods();
    4bb8:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <get_mods>
    4bbc:	d8 2f       	mov	r29, r24
                break;
    4bbe:	0d c0       	rjmp	.+26     	; 0x4bda <action_macro_play+0x116>
            case MOD_RESTORE:
                set_mods(mod_storage);
    4bc0:	8d 2f       	mov	r24, r29
    4bc2:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <set_mods>
    4bc6:	db cf       	rjmp	.-74     	; 0x4b7e <action_macro_play+0xba>
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    4bc8:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <clear_mods>
    4bcc:	d8 cf       	rjmp	.-80     	; 0x4b7e <action_macro_play+0xba>
                send_keyboard_report();
                break;
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    4bce:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <register_code>
                break;
    4bd2:	03 c0       	rjmp	.+6      	; 0x4bda <action_macro_play+0x116>
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    4bd4:	8f 77       	andi	r24, 0x7F	; 127
    4bd6:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <unregister_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    4bda:	9c 2f       	mov	r25, r28
    4bdc:	07 c0       	rjmp	.+14     	; 0x4bec <action_macro_play+0x128>
    4bde:	91 50       	subi	r25, 0x01	; 1
    4be0:	ef ec       	ldi	r30, 0xCF	; 207
    4be2:	f7 e0       	ldi	r31, 0x07	; 7
    4be4:	31 97       	sbiw	r30, 0x01	; 1
    4be6:	f1 f7       	brne	.-4      	; 0x4be4 <action_macro_play+0x120>
    4be8:	00 c0       	rjmp	.+0      	; 0x4bea <action_macro_play+0x126>
    4bea:	00 00       	nop
    4bec:	91 11       	cpse	r25, r1
    4bee:	f7 cf       	rjmp	.-18     	; 0x4bde <action_macro_play+0x11a>
    4bf0:	97 01       	movw	r18, r14
    4bf2:	77 cf       	rjmp	.-274    	; 0x4ae2 <action_macro_play+0x1e>
    }
}
    4bf4:	df 91       	pop	r29
    4bf6:	cf 91       	pop	r28
    4bf8:	ff 90       	pop	r15
    4bfa:	ef 90       	pop	r14
    4bfc:	df 90       	pop	r13
    4bfe:	cf 90       	pop	r12
    4c00:	08 95       	ret

00004c02 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    4c02:	60 93 ce 03 	sts	0x03CE, r22
    4c06:	70 93 cf 03 	sts	0x03CF, r23
    4c0a:	80 93 d0 03 	sts	0x03D0, r24
    4c0e:	90 93 d1 03 	sts	0x03D1, r25
    hook_layer_change(layer_state);
    4c12:	0e 94 1e 28 	call	0x503c	; 0x503c <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    4c16:	0c 94 d8 21 	jmp	0x43b0	; 0x43b0 <clear_keyboard_but_mods>

00004c1a <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    4c1a:	60 93 d2 03 	sts	0x03D2, r22
    4c1e:	70 93 d3 03 	sts	0x03D3, r23
    4c22:	80 93 d4 03 	sts	0x03D4, r24
    4c26:	90 93 d5 03 	sts	0x03D5, r25
    hook_default_layer_change(default_layer_state);
    4c2a:	0e 94 1d 28 	call	0x503a	; 0x503a <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    4c2e:	0c 94 d8 21 	jmp	0x43b0	; 0x43b0 <clear_keyboard_but_mods>

00004c32 <default_layer_debug>:
}

void default_layer_debug(void)
{
    4c32:	08 95       	ret

00004c34 <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    4c34:	0c 94 0d 26 	jmp	0x4c1a	; 0x4c1a <default_layer_state_set>

00004c38 <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    4c38:	0f 93       	push	r16
    4c3a:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    4c3c:	00 91 d2 03 	lds	r16, 0x03D2
    4c40:	10 91 d3 03 	lds	r17, 0x03D3
    4c44:	20 91 d4 03 	lds	r18, 0x03D4
    4c48:	30 91 d5 03 	lds	r19, 0x03D5
    4c4c:	60 2b       	or	r22, r16
    4c4e:	71 2b       	or	r23, r17
    4c50:	82 2b       	or	r24, r18
    4c52:	93 2b       	or	r25, r19
}
    4c54:	1f 91       	pop	r17
    4c56:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    4c58:	0c 94 0d 26 	jmp	0x4c1a	; 0x4c1a <default_layer_state_set>

00004c5c <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    4c5c:	0f 93       	push	r16
    4c5e:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    4c60:	00 91 d2 03 	lds	r16, 0x03D2
    4c64:	10 91 d3 03 	lds	r17, 0x03D3
    4c68:	20 91 d4 03 	lds	r18, 0x03D4
    4c6c:	30 91 d5 03 	lds	r19, 0x03D5
    4c70:	60 23       	and	r22, r16
    4c72:	71 23       	and	r23, r17
    4c74:	82 23       	and	r24, r18
    4c76:	93 23       	and	r25, r19
}
    4c78:	1f 91       	pop	r17
    4c7a:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    4c7c:	0c 94 0d 26 	jmp	0x4c1a	; 0x4c1a <default_layer_state_set>

00004c80 <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    4c80:	0f 93       	push	r16
    4c82:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    4c84:	00 91 d2 03 	lds	r16, 0x03D2
    4c88:	10 91 d3 03 	lds	r17, 0x03D3
    4c8c:	20 91 d4 03 	lds	r18, 0x03D4
    4c90:	30 91 d5 03 	lds	r19, 0x03D5
    4c94:	60 27       	eor	r22, r16
    4c96:	71 27       	eor	r23, r17
    4c98:	82 27       	eor	r24, r18
    4c9a:	93 27       	eor	r25, r19
}
    4c9c:	1f 91       	pop	r17
    4c9e:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    4ca0:	0c 94 0d 26 	jmp	0x4c1a	; 0x4c1a <default_layer_state_set>

00004ca4 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    4ca4:	60 e0       	ldi	r22, 0x00	; 0
    4ca6:	70 e0       	ldi	r23, 0x00	; 0
    4ca8:	cb 01       	movw	r24, r22
    4caa:	0c 94 01 26 	jmp	0x4c02	; 0x4c02 <layer_state_set>

00004cae <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    4cae:	41 e0       	ldi	r20, 0x01	; 1
    4cb0:	50 e0       	ldi	r21, 0x00	; 0
    4cb2:	60 e0       	ldi	r22, 0x00	; 0
    4cb4:	70 e0       	ldi	r23, 0x00	; 0
    4cb6:	04 c0       	rjmp	.+8      	; 0x4cc0 <layer_move+0x12>
    4cb8:	44 0f       	add	r20, r20
    4cba:	55 1f       	adc	r21, r21
    4cbc:	66 1f       	adc	r22, r22
    4cbe:	77 1f       	adc	r23, r23
    4cc0:	8a 95       	dec	r24
    4cc2:	d2 f7       	brpl	.-12     	; 0x4cb8 <layer_move+0xa>
    4cc4:	cb 01       	movw	r24, r22
    4cc6:	ba 01       	movw	r22, r20
    4cc8:	0c 94 01 26 	jmp	0x4c02	; 0x4c02 <layer_state_set>

00004ccc <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    4ccc:	41 e0       	ldi	r20, 0x01	; 1
    4cce:	50 e0       	ldi	r21, 0x00	; 0
    4cd0:	60 e0       	ldi	r22, 0x00	; 0
    4cd2:	70 e0       	ldi	r23, 0x00	; 0
    4cd4:	04 c0       	rjmp	.+8      	; 0x4cde <layer_on+0x12>
    4cd6:	44 0f       	add	r20, r20
    4cd8:	55 1f       	adc	r21, r21
    4cda:	66 1f       	adc	r22, r22
    4cdc:	77 1f       	adc	r23, r23
    4cde:	8a 95       	dec	r24
    4ce0:	d2 f7       	brpl	.-12     	; 0x4cd6 <layer_on+0xa>
    4ce2:	80 91 ce 03 	lds	r24, 0x03CE
    4ce6:	90 91 cf 03 	lds	r25, 0x03CF
    4cea:	a0 91 d0 03 	lds	r26, 0x03D0
    4cee:	b0 91 d1 03 	lds	r27, 0x03D1
    4cf2:	48 2b       	or	r20, r24
    4cf4:	59 2b       	or	r21, r25
    4cf6:	6a 2b       	or	r22, r26
    4cf8:	7b 2b       	or	r23, r27
    4cfa:	cb 01       	movw	r24, r22
    4cfc:	ba 01       	movw	r22, r20
    4cfe:	0c 94 01 26 	jmp	0x4c02	; 0x4c02 <layer_state_set>

00004d02 <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    4d02:	41 e0       	ldi	r20, 0x01	; 1
    4d04:	50 e0       	ldi	r21, 0x00	; 0
    4d06:	60 e0       	ldi	r22, 0x00	; 0
    4d08:	70 e0       	ldi	r23, 0x00	; 0
    4d0a:	04 c0       	rjmp	.+8      	; 0x4d14 <layer_off+0x12>
    4d0c:	44 0f       	add	r20, r20
    4d0e:	55 1f       	adc	r21, r21
    4d10:	66 1f       	adc	r22, r22
    4d12:	77 1f       	adc	r23, r23
    4d14:	8a 95       	dec	r24
    4d16:	d2 f7       	brpl	.-12     	; 0x4d0c <layer_off+0xa>
    4d18:	40 95       	com	r20
    4d1a:	50 95       	com	r21
    4d1c:	60 95       	com	r22
    4d1e:	70 95       	com	r23
    4d20:	80 91 ce 03 	lds	r24, 0x03CE
    4d24:	90 91 cf 03 	lds	r25, 0x03CF
    4d28:	a0 91 d0 03 	lds	r26, 0x03D0
    4d2c:	b0 91 d1 03 	lds	r27, 0x03D1
    4d30:	48 23       	and	r20, r24
    4d32:	59 23       	and	r21, r25
    4d34:	6a 23       	and	r22, r26
    4d36:	7b 23       	and	r23, r27
    4d38:	cb 01       	movw	r24, r22
    4d3a:	ba 01       	movw	r22, r20
    4d3c:	0c 94 01 26 	jmp	0x4c02	; 0x4c02 <layer_state_set>

00004d40 <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    4d40:	41 e0       	ldi	r20, 0x01	; 1
    4d42:	50 e0       	ldi	r21, 0x00	; 0
    4d44:	60 e0       	ldi	r22, 0x00	; 0
    4d46:	70 e0       	ldi	r23, 0x00	; 0
    4d48:	04 c0       	rjmp	.+8      	; 0x4d52 <layer_invert+0x12>
    4d4a:	44 0f       	add	r20, r20
    4d4c:	55 1f       	adc	r21, r21
    4d4e:	66 1f       	adc	r22, r22
    4d50:	77 1f       	adc	r23, r23
    4d52:	8a 95       	dec	r24
    4d54:	d2 f7       	brpl	.-12     	; 0x4d4a <layer_invert+0xa>
    4d56:	80 91 ce 03 	lds	r24, 0x03CE
    4d5a:	90 91 cf 03 	lds	r25, 0x03CF
    4d5e:	a0 91 d0 03 	lds	r26, 0x03D0
    4d62:	b0 91 d1 03 	lds	r27, 0x03D1
    4d66:	48 27       	eor	r20, r24
    4d68:	59 27       	eor	r21, r25
    4d6a:	6a 27       	eor	r22, r26
    4d6c:	7b 27       	eor	r23, r27
    4d6e:	cb 01       	movw	r24, r22
    4d70:	ba 01       	movw	r22, r20
    4d72:	0c 94 01 26 	jmp	0x4c02	; 0x4c02 <layer_state_set>

00004d76 <layer_or>:
}

void layer_or(uint32_t state)
{
    4d76:	0f 93       	push	r16
    4d78:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    4d7a:	00 91 ce 03 	lds	r16, 0x03CE
    4d7e:	10 91 cf 03 	lds	r17, 0x03CF
    4d82:	20 91 d0 03 	lds	r18, 0x03D0
    4d86:	30 91 d1 03 	lds	r19, 0x03D1
    4d8a:	60 2b       	or	r22, r16
    4d8c:	71 2b       	or	r23, r17
    4d8e:	82 2b       	or	r24, r18
    4d90:	93 2b       	or	r25, r19
}
    4d92:	1f 91       	pop	r17
    4d94:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    4d96:	0c 94 01 26 	jmp	0x4c02	; 0x4c02 <layer_state_set>

00004d9a <layer_and>:
}
void layer_and(uint32_t state)
{
    4d9a:	0f 93       	push	r16
    4d9c:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    4d9e:	00 91 ce 03 	lds	r16, 0x03CE
    4da2:	10 91 cf 03 	lds	r17, 0x03CF
    4da6:	20 91 d0 03 	lds	r18, 0x03D0
    4daa:	30 91 d1 03 	lds	r19, 0x03D1
    4dae:	60 23       	and	r22, r16
    4db0:	71 23       	and	r23, r17
    4db2:	82 23       	and	r24, r18
    4db4:	93 23       	and	r25, r19
}
    4db6:	1f 91       	pop	r17
    4db8:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    4dba:	0c 94 01 26 	jmp	0x4c02	; 0x4c02 <layer_state_set>

00004dbe <layer_xor>:
}
void layer_xor(uint32_t state)
{
    4dbe:	0f 93       	push	r16
    4dc0:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    4dc2:	00 91 ce 03 	lds	r16, 0x03CE
    4dc6:	10 91 cf 03 	lds	r17, 0x03CF
    4dca:	20 91 d0 03 	lds	r18, 0x03D0
    4dce:	30 91 d1 03 	lds	r19, 0x03D1
    4dd2:	60 27       	eor	r22, r16
    4dd4:	71 27       	eor	r23, r17
    4dd6:	82 27       	eor	r24, r18
    4dd8:	93 27       	eor	r25, r19
}
    4dda:	1f 91       	pop	r17
    4ddc:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    4dde:	0c 94 01 26 	jmp	0x4c02	; 0x4c02 <layer_state_set>

00004de2 <layer_debug>:
}

void layer_debug(void)
{
    4de2:	08 95       	ret

00004de4 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    4de4:	8f 92       	push	r8
    4de6:	9f 92       	push	r9
    4de8:	af 92       	push	r10
    4dea:	bf 92       	push	r11
    4dec:	cf 92       	push	r12
    4dee:	df 92       	push	r13
    4df0:	ef 92       	push	r14
    4df2:	ff 92       	push	r15
    4df4:	6c 01       	movw	r12, r24
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    4df6:	80 90 d2 03 	lds	r8, 0x03D2
    4dfa:	90 90 d3 03 	lds	r9, 0x03D3
    4dfe:	a0 90 d4 03 	lds	r10, 0x03D4
    4e02:	b0 90 d5 03 	lds	r11, 0x03D5
    4e06:	40 91 ce 03 	lds	r20, 0x03CE
    4e0a:	50 91 cf 03 	lds	r21, 0x03CF
    4e0e:	60 91 d0 03 	lds	r22, 0x03D0
    4e12:	70 91 d1 03 	lds	r23, 0x03D1
    4e16:	84 2a       	or	r8, r20
    4e18:	95 2a       	or	r9, r21
    4e1a:	a6 2a       	or	r10, r22
    4e1c:	b7 2a       	or	r11, r23
    4e1e:	8f e1       	ldi	r24, 0x1F	; 31
    4e20:	e8 2e       	mov	r14, r24
    4e22:	f1 2c       	mov	r15, r1
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    4e24:	b5 01       	movw	r22, r10
    4e26:	a4 01       	movw	r20, r8
    4e28:	0e 2c       	mov	r0, r14
    4e2a:	04 c0       	rjmp	.+8      	; 0x4e34 <layer_switch_get_action+0x50>
    4e2c:	76 95       	lsr	r23
    4e2e:	67 95       	ror	r22
    4e30:	57 95       	ror	r21
    4e32:	47 95       	ror	r20
    4e34:	0a 94       	dec	r0
    4e36:	d2 f7       	brpl	.-12     	; 0x4e2c <layer_switch_get_action+0x48>
    4e38:	40 ff       	sbrs	r20, 0
    4e3a:	08 c0       	rjmp	.+16     	; 0x4e4c <layer_switch_get_action+0x68>
            action = action_for_key(i, key);
    4e3c:	b6 01       	movw	r22, r12
    4e3e:	8e 2d       	mov	r24, r14
    4e40:	0e 94 27 29 	call	0x524e	; 0x524e <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    4e44:	81 30       	cpi	r24, 0x01	; 1
    4e46:	91 05       	cpc	r25, r1
    4e48:	09 f0       	breq	.+2      	; 0x4e4c <layer_switch_get_action+0x68>
    4e4a:	08 c0       	rjmp	.+16     	; 0x4e5c <layer_switch_get_action+0x78>
    4e4c:	81 e0       	ldi	r24, 0x01	; 1
    4e4e:	e8 1a       	sub	r14, r24
    4e50:	f1 08       	sbc	r15, r1
    4e52:	40 f7       	brcc	.-48     	; 0x4e24 <layer_switch_get_action+0x40>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    4e54:	b6 01       	movw	r22, r12
    4e56:	80 e0       	ldi	r24, 0x00	; 0
    4e58:	0e 94 27 29 	call	0x524e	; 0x524e <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    4e5c:	ff 90       	pop	r15
    4e5e:	ef 90       	pop	r14
    4e60:	df 90       	pop	r13
    4e62:	cf 90       	pop	r12
    4e64:	bf 90       	pop	r11
    4e66:	af 90       	pop	r10
    4e68:	9f 90       	pop	r9
    4e6a:	8f 90       	pop	r8
    4e6c:	08 95       	ret

00004e6e <add_key>:
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    4e6e:	40 91 22 01 	lds	r20, 0x0122
    4e72:	50 91 23 01 	lds	r21, 0x0123
    4e76:	20 e0       	ldi	r18, 0x00	; 0
    4e78:	30 e0       	ldi	r19, 0x00	; 0
    keyboard_report->keys[cb_tail] = code;
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    4e7a:	9f ef       	ldi	r25, 0xFF	; 255
#endif
    host_keyboard_send(keyboard_report);
}

/* key */
void add_key(uint8_t key)
    4e7c:	fa 01       	movw	r30, r20
    4e7e:	e2 0f       	add	r30, r18
    4e80:	f3 1f       	adc	r31, r19
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    4e82:	62 81       	ldd	r22, Z+2	; 0x02
    4e84:	68 17       	cp	r22, r24
    4e86:	a1 f0       	breq	.+40     	; 0x4eb0 <add_key+0x42>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    4e88:	9f 3f       	cpi	r25, 0xFF	; 255
    4e8a:	19 f4       	brne	.+6      	; 0x4e92 <add_key+0x24>
    4e8c:	61 11       	cpse	r22, r1
    4e8e:	01 c0       	rjmp	.+2      	; 0x4e92 <add_key+0x24>
    4e90:	92 2f       	mov	r25, r18
    4e92:	2f 5f       	subi	r18, 0xFF	; 255
    4e94:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    4e96:	26 30       	cpi	r18, 0x06	; 6
    4e98:	31 05       	cpc	r19, r1
    4e9a:	81 f7       	brne	.-32     	; 0x4e7c <add_key+0xe>
    4e9c:	07 c0       	rjmp	.+14     	; 0x4eac <add_key+0x3e>
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
            keyboard_report->keys[empty] = code;
    4e9e:	fa 01       	movw	r30, r20
    4ea0:	e9 0f       	add	r30, r25
    4ea2:	f1 1d       	adc	r31, r1
    4ea4:	97 fd       	sbrc	r25, 7
    4ea6:	fa 95       	dec	r31
    4ea8:	82 83       	std	Z+2, r24	; 0x02
    4eaa:	08 95       	ret
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    4eac:	9f 3f       	cpi	r25, 0xFF	; 255
    4eae:	b9 f7       	brne	.-18     	; 0x4e9e <add_key+0x30>
    4eb0:	08 95       	ret

00004eb2 <del_key>:
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    4eb2:	40 91 22 01 	lds	r20, 0x0122
    4eb6:	50 91 23 01 	lds	r21, 0x0123
    4eba:	20 e0       	ldi	r18, 0x00	; 0
    4ebc:	30 e0       	ldi	r19, 0x00	; 0
    }
#endif
    add_key_byte(key);
}

void del_key(uint8_t key)
    4ebe:	fa 01       	movw	r30, r20
    4ec0:	e2 0f       	add	r30, r18
    4ec2:	f3 1f       	adc	r31, r19
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    4ec4:	92 81       	ldd	r25, Z+2	; 0x02
    4ec6:	98 13       	cpse	r25, r24
    4ec8:	01 c0       	rjmp	.+2      	; 0x4ecc <del_key+0x1a>
            keyboard_report->keys[i] = 0;
    4eca:	12 82       	std	Z+2, r1	; 0x02
    4ecc:	2f 5f       	subi	r18, 0xFF	; 255
    4ece:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    4ed0:	26 30       	cpi	r18, 0x06	; 6
    4ed2:	31 05       	cpc	r19, r1
    4ed4:	a1 f7       	brne	.-24     	; 0x4ebe <del_key+0xc>
        del_key_bit(key);
        return;
    }
#endif
    del_key_byte(key);
}
    4ed6:	08 95       	ret

00004ed8 <clear_keys>:

void clear_keys(void)
{
    4ed8:	81 e0       	ldi	r24, 0x01	; 1
    4eda:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    4edc:	e0 91 22 01 	lds	r30, 0x0122
    4ee0:	f0 91 23 01 	lds	r31, 0x0123
    4ee4:	e8 0f       	add	r30, r24
    4ee6:	f9 1f       	adc	r31, r25
    4ee8:	10 82       	st	Z, r1
    4eea:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    4eec:	88 30       	cpi	r24, 0x08	; 8
    4eee:	91 05       	cpc	r25, r1
    4ef0:	a9 f7       	brne	.-22     	; 0x4edc <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    4ef2:	08 95       	ret

00004ef4 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    4ef4:	80 91 d6 03 	lds	r24, 0x03D6
    4ef8:	08 95       	ret

00004efa <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    4efa:	90 91 d6 03 	lds	r25, 0x03D6
    4efe:	98 2b       	or	r25, r24
    4f00:	90 93 d6 03 	sts	0x03D6, r25
    4f04:	08 95       	ret

00004f06 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    4f06:	80 95       	com	r24
    4f08:	90 91 d6 03 	lds	r25, 0x03D6
    4f0c:	98 23       	and	r25, r24
    4f0e:	90 93 d6 03 	sts	0x03D6, r25
    4f12:	08 95       	ret

00004f14 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    4f14:	80 93 d6 03 	sts	0x03D6, r24
    4f18:	08 95       	ret

00004f1a <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    4f1a:	10 92 d6 03 	sts	0x03D6, r1
    4f1e:	08 95       	ret

00004f20 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    4f20:	90 91 d7 03 	lds	r25, 0x03D7
    4f24:	98 2b       	or	r25, r24
    4f26:	90 93 d7 03 	sts	0x03D7, r25
    4f2a:	08 95       	ret

00004f2c <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    4f2c:	80 95       	com	r24
    4f2e:	90 91 d7 03 	lds	r25, 0x03D7
    4f32:	98 23       	and	r25, r24
    4f34:	90 93 d7 03 	sts	0x03D7, r25
    4f38:	08 95       	ret

00004f3a <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    4f3a:	10 92 d7 03 	sts	0x03D7, r1
    4f3e:	08 95       	ret

00004f40 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    4f40:	80 93 d8 03 	sts	0x03D8, r24
    4f44:	08 95       	ret

00004f46 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    4f46:	10 92 d8 03 	sts	0x03D8, r1
    4f4a:	08 95       	ret

00004f4c <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    4f4c:	40 91 22 01 	lds	r20, 0x0122
    4f50:	50 91 23 01 	lds	r21, 0x0123
    4f54:	20 e0       	ldi	r18, 0x00	; 0
    4f56:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    4f58:	80 e0       	ldi	r24, 0x00	; 0


/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
    4f5a:	fa 01       	movw	r30, r20
    4f5c:	e2 0f       	add	r30, r18
    4f5e:	f3 1f       	adc	r31, r19
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    4f60:	91 81       	ldd	r25, Z+1	; 0x01
    4f62:	91 11       	cpse	r25, r1
            cnt++;
    4f64:	8f 5f       	subi	r24, 0xFF	; 255
    4f66:	2f 5f       	subi	r18, 0xFF	; 255
    4f68:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    4f6a:	27 30       	cpi	r18, 0x07	; 7
    4f6c:	31 05       	cpc	r19, r1
    4f6e:	a9 f7       	brne	.-22     	; 0x4f5a <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    4f70:	08 95       	ret

00004f72 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    4f72:	e0 91 22 01 	lds	r30, 0x0122
    4f76:	f0 91 23 01 	lds	r31, 0x0123
    4f7a:	80 91 d6 03 	lds	r24, 0x03D6
    4f7e:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    4f80:	e0 91 22 01 	lds	r30, 0x0122
    4f84:	f0 91 23 01 	lds	r31, 0x0123
    4f88:	80 81       	ld	r24, Z
    4f8a:	90 91 d7 03 	lds	r25, 0x03D7
    4f8e:	89 2b       	or	r24, r25
    4f90:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    4f92:	90 91 d8 03 	lds	r25, 0x03D8
    4f96:	99 23       	and	r25, r25
    4f98:	61 f0       	breq	.+24     	; 0x4fb2 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    4f9a:	e0 91 22 01 	lds	r30, 0x0122
    4f9e:	f0 91 23 01 	lds	r31, 0x0123
    4fa2:	80 81       	ld	r24, Z
    4fa4:	89 2b       	or	r24, r25
    4fa6:	80 83       	st	Z, r24
        if (has_anykey()) {
    4fa8:	0e 94 a6 27 	call	0x4f4c	; 0x4f4c <has_anykey>
    4fac:	81 11       	cpse	r24, r1
            clear_oneshot_mods();
    4fae:	0e 94 a3 27 	call	0x4f46	; 0x4f46 <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    4fb2:	80 91 22 01 	lds	r24, 0x0122
    4fb6:	90 91 23 01 	lds	r25, 0x0123
    4fba:	0c 94 e4 1b 	jmp	0x37c8	; 0x37c8 <host_keyboard_send>

00004fbe <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    4fbe:	90 93 0f 02 	sts	0x020F, r25
    4fc2:	80 93 0e 02 	sts	0x020E, r24
    4fc6:	08 95       	ret

00004fc8 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    4fc8:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    4fca:	98 2f       	mov	r25, r24
    4fcc:	9c 7c       	andi	r25, 0xCC	; 204
    4fce:	96 95       	lsr	r25
    4fd0:	96 95       	lsr	r25
    4fd2:	83 73       	andi	r24, 0x33	; 51
    4fd4:	44 e0       	ldi	r20, 0x04	; 4
    4fd6:	84 9f       	mul	r24, r20
    4fd8:	90 01       	movw	r18, r0
    4fda:	11 24       	eor	r1, r1
    4fdc:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    4fde:	89 2f       	mov	r24, r25
    4fe0:	8a 7a       	andi	r24, 0xAA	; 170
    4fe2:	86 95       	lsr	r24
    4fe4:	95 75       	andi	r25, 0x55	; 85
    4fe6:	99 0f       	add	r25, r25
    return bits;
}
    4fe8:	89 2b       	or	r24, r25
    4fea:	08 95       	ret

00004fec <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    4fec:	1f 93       	push	r17
    4fee:	cf 93       	push	r28
    4ff0:	df 93       	push	r29
    4ff2:	1f 92       	push	r1
    4ff4:	cd b7       	in	r28, 0x3d	; 61
    4ff6:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    4ff8:	99 83       	std	Y+1, r25	; 0x01
    4ffa:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <bitrev>
    4ffe:	18 2f       	mov	r17, r24
    5000:	99 81       	ldd	r25, Y+1	; 0x01
    5002:	89 2f       	mov	r24, r25
    5004:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <bitrev>
    5008:	31 2f       	mov	r19, r17
    500a:	20 e0       	ldi	r18, 0x00	; 0
    500c:	28 2b       	or	r18, r24
    return bits;
}
    500e:	c9 01       	movw	r24, r18
    5010:	0f 90       	pop	r0
    5012:	df 91       	pop	r29
    5014:	cf 91       	pop	r28
    5016:	1f 91       	pop	r17
    5018:	08 95       	ret

0000501a <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    501a:	08 95       	ret

0000501c <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    501c:	cf 93       	push	r28
    501e:	df 93       	push	r29
    5020:	00 d0       	rcall	.+0      	; 0x5022 <hook_matrix_change+0x6>
    5022:	00 d0       	rcall	.+0      	; 0x5024 <hook_matrix_change+0x8>
    5024:	1f 92       	push	r1
    5026:	cd b7       	in	r28, 0x3d	; 61
    5028:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    502a:	0f 90       	pop	r0
    502c:	0f 90       	pop	r0
    502e:	0f 90       	pop	r0
    5030:	0f 90       	pop	r0
    5032:	0f 90       	pop	r0
    5034:	df 91       	pop	r29
    5036:	cf 91       	pop	r28
    5038:	08 95       	ret

0000503a <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    503a:	08 95       	ret

0000503c <hook_layer_change>:
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    503c:	08 95       	ret

0000503e <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    503e:	0c 94 7b 1d 	jmp	0x3af6	; 0x3af6 <keyboard_set_leds>

00005042 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    5042:	80 91 f6 03 	lds	r24, 0x03F6
    5046:	84 30       	cpi	r24, 0x04	; 4
    5048:	09 f1       	breq	.+66     	; 0x508c <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    504a:	10 92 e2 03 	sts	0x03E2, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    504e:	20 e4       	ldi	r18, 0x40	; 64
    5050:	88 e1       	ldi	r24, 0x18	; 24
    5052:	90 e0       	ldi	r25, 0x00	; 0
    5054:	0f b6       	in	r0, 0x3f	; 63
    5056:	f8 94       	cli
    5058:	a8 95       	wdr
    505a:	80 93 60 00 	sts	0x0060, r24
    505e:	0f be       	out	0x3f, r0	; 63
    5060:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    5064:	83 b7       	in	r24, 0x33	; 51
    5066:	81 7f       	andi	r24, 0xF1	; 241
    5068:	84 60       	ori	r24, 0x04	; 4
    506a:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    506c:	83 b7       	in	r24, 0x33	; 51
    506e:	81 60       	ori	r24, 0x01	; 1
    5070:	83 bf       	out	0x33, r24	; 51
    sei();
    5072:	78 94       	sei
    sleep_cpu();
    5074:	88 95       	sleep
    sleep_disable();
    5076:	83 b7       	in	r24, 0x33	; 51
    5078:	8e 7f       	andi	r24, 0xFE	; 254
    507a:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    507c:	88 e1       	ldi	r24, 0x18	; 24
    507e:	0f b6       	in	r0, 0x3f	; 63
    5080:	f8 94       	cli
    5082:	80 93 60 00 	sts	0x0060, r24
    5086:	10 92 60 00 	sts	0x0060, r1
    508a:	0f be       	out	0x3f, r0	; 63
    508c:	08 95       	ret

0000508e <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    508e:	08 95       	ret

00005090 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    5090:	08 95       	ret

00005092 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    5092:	cf 93       	push	r28
    matrix_power_up();
    5094:	0e 94 47 28 	call	0x508e	; 0x508e <matrix_power_up>
    matrix_scan();
    5098:	0e 94 99 09 	call	0x1332	; 0x1332 <matrix_scan>
    matrix_power_down();
    509c:	0e 94 48 28 	call	0x5090	; 0x5090 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    50a0:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    50a2:	8c 2f       	mov	r24, r28
    50a4:	0e 94 cb 0a 	call	0x1596	; 0x1596 <matrix_get_row>
    50a8:	89 2b       	or	r24, r25
    50aa:	29 f4       	brne	.+10     	; 0x50b6 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    50ac:	cf 5f       	subi	r28, 0xFF	; 255
    50ae:	c8 30       	cpi	r28, 0x08	; 8
    50b0:	c1 f7       	brne	.-16     	; 0x50a2 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    50b2:	80 e0       	ldi	r24, 0x00	; 0
    50b4:	01 c0       	rjmp	.+2      	; 0x50b8 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    50b6:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    50b8:	cf 91       	pop	r28
    50ba:	08 95       	ret

000050bc <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    50bc:	0c 94 ea 21 	jmp	0x43d4	; 0x43d4 <clear_keyboard>

000050c0 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    50c0:	1f 92       	push	r1
    50c2:	0f 92       	push	r0
    50c4:	0f b6       	in	r0, 0x3f	; 63
    50c6:	0f 92       	push	r0
    50c8:	11 24       	eor	r1, r1
    50ca:	8f 93       	push	r24
    50cc:	9f 93       	push	r25
    50ce:	af 93       	push	r26
    50d0:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    50d2:	80 91 e2 03 	lds	r24, 0x03E2
    50d6:	81 11       	cpse	r24, r1
    50d8:	13 c0       	rjmp	.+38     	; 0x5100 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    50da:	80 91 e3 03 	lds	r24, 0x03E3
    50de:	90 91 e4 03 	lds	r25, 0x03E4
    50e2:	a0 91 e5 03 	lds	r26, 0x03E5
    50e6:	b0 91 e6 03 	lds	r27, 0x03E6
    50ea:	41 96       	adiw	r24, 0x11	; 17
    50ec:	a1 1d       	adc	r26, r1
    50ee:	b1 1d       	adc	r27, r1
    50f0:	80 93 e3 03 	sts	0x03E3, r24
    50f4:	90 93 e4 03 	sts	0x03E4, r25
    50f8:	a0 93 e5 03 	sts	0x03E5, r26
    50fc:	b0 93 e6 03 	sts	0x03E6, r27
            break;
        default:
            ;
    }
}
    5100:	bf 91       	pop	r27
    5102:	af 91       	pop	r26
    5104:	9f 91       	pop	r25
    5106:	8f 91       	pop	r24
    5108:	0f 90       	pop	r0
    510a:	0f be       	out	0x3f, r0	; 63
    510c:	0f 90       	pop	r0
    510e:	1f 90       	pop	r1
    5110:	18 95       	reti

00005112 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    5112:	82 e0       	ldi	r24, 0x02	; 2
    5114:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    5116:	93 e0       	ldi	r25, 0x03	; 3
    5118:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    511a:	9d e7       	ldi	r25, 0x7D	; 125
    511c:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    511e:	80 93 6e 00 	sts	0x006E, r24
    5122:	08 95       	ret

00005124 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    5124:	8f b7       	in	r24, 0x3f	; 63
    cli();
    5126:	f8 94       	cli
    t = timer_count;
    5128:	40 91 e3 03 	lds	r20, 0x03E3
    512c:	50 91 e4 03 	lds	r21, 0x03E4
    5130:	60 91 e5 03 	lds	r22, 0x03E5
    5134:	70 91 e6 03 	lds	r23, 0x03E6
    SREG = sreg;
    5138:	8f bf       	out	0x3f, r24	; 63

    return (t & 0xFFFF);
}
    513a:	ca 01       	movw	r24, r20
    513c:	08 95       	ret

0000513e <timer_read32>:

inline
uint32_t timer_read32(void)
{
    513e:	0f 93       	push	r16
    5140:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    5142:	8f b7       	in	r24, 0x3f	; 63
    cli();
    5144:	f8 94       	cli
    t = timer_count;
    5146:	00 91 e3 03 	lds	r16, 0x03E3
    514a:	10 91 e4 03 	lds	r17, 0x03E4
    514e:	20 91 e5 03 	lds	r18, 0x03E5
    5152:	30 91 e6 03 	lds	r19, 0x03E6
    SREG = sreg;
    5156:	8f bf       	out	0x3f, r24	; 63

    return t;
}
    5158:	b8 01       	movw	r22, r16
    515a:	c9 01       	movw	r24, r18
    515c:	1f 91       	pop	r17
    515e:	0f 91       	pop	r16
    5160:	08 95       	ret

00005162 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    5162:	cf 92       	push	r12
    5164:	df 92       	push	r13
    5166:	ef 92       	push	r14
    5168:	ff 92       	push	r15
    516a:	0f 93       	push	r16
    516c:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    516e:	2f b7       	in	r18, 0x3f	; 63
    cli();
    5170:	f8 94       	cli
    t = timer_count;
    5172:	40 91 e3 03 	lds	r20, 0x03E3
    5176:	50 91 e4 03 	lds	r21, 0x03E4
    517a:	60 91 e5 03 	lds	r22, 0x03E5
    517e:	70 91 e6 03 	lds	r23, 0x03E6
    SREG = sreg;
    5182:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    5184:	6a 01       	movw	r12, r20
    5186:	7b 01       	movw	r14, r22
    5188:	ee 24       	eor	r14, r14
    518a:	ff 24       	eor	r15, r15
    518c:	8c 01       	movw	r16, r24
    518e:	20 e0       	ldi	r18, 0x00	; 0
    5190:	30 e0       	ldi	r19, 0x00	; 0
    5192:	c0 16       	cp	r12, r16
    5194:	d1 06       	cpc	r13, r17
    5196:	e2 06       	cpc	r14, r18
    5198:	f3 06       	cpc	r15, r19
    519a:	20 f0       	brcs	.+8      	; 0x51a4 <timer_elapsed+0x42>
    519c:	9a 01       	movw	r18, r20
    519e:	28 1b       	sub	r18, r24
    51a0:	39 0b       	sbc	r19, r25
    51a2:	05 c0       	rjmp	.+10     	; 0x51ae <timer_elapsed+0x4c>
    51a4:	9c 01       	movw	r18, r24
    51a6:	20 95       	com	r18
    51a8:	30 95       	com	r19
    51aa:	24 0f       	add	r18, r20
    51ac:	35 1f       	adc	r19, r21
}
    51ae:	c9 01       	movw	r24, r18
    51b0:	1f 91       	pop	r17
    51b2:	0f 91       	pop	r16
    51b4:	ff 90       	pop	r15
    51b6:	ef 90       	pop	r14
    51b8:	df 90       	pop	r13
    51ba:	cf 90       	pop	r12
    51bc:	08 95       	ret

000051be <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    51be:	1f 92       	push	r1
    51c0:	0f 92       	push	r0
    51c2:	0f b6       	in	r0, 0x3f	; 63
    51c4:	0f 92       	push	r0
    51c6:	11 24       	eor	r1, r1
    51c8:	8f 93       	push	r24
    51ca:	9f 93       	push	r25
    51cc:	af 93       	push	r26
    51ce:	bf 93       	push	r27
    timer_count++;
    51d0:	80 91 e3 03 	lds	r24, 0x03E3
    51d4:	90 91 e4 03 	lds	r25, 0x03E4
    51d8:	a0 91 e5 03 	lds	r26, 0x03E5
    51dc:	b0 91 e6 03 	lds	r27, 0x03E6
    51e0:	01 96       	adiw	r24, 0x01	; 1
    51e2:	a1 1d       	adc	r26, r1
    51e4:	b1 1d       	adc	r27, r1
    51e6:	80 93 e3 03 	sts	0x03E3, r24
    51ea:	90 93 e4 03 	sts	0x03E4, r25
    51ee:	a0 93 e5 03 	sts	0x03E5, r26
    51f2:	b0 93 e6 03 	sts	0x03E6, r27
}
    51f6:	bf 91       	pop	r27
    51f8:	af 91       	pop	r26
    51fa:	9f 91       	pop	r25
    51fc:	8f 91       	pop	r24
    51fe:	0f 90       	pop	r0
    5200:	0f be       	out	0x3f, r0	; 63
    5202:	0f 90       	pop	r0
    5204:	1f 90       	pop	r1
    5206:	18 95       	reti

00005208 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    5208:	0e 94 c4 18 	call	0x3188	; 0x3188 <USB_Disable>
    cli();
    520c:	f8 94       	cli
    520e:	2f ef       	ldi	r18, 0xFF	; 255
    5210:	83 ed       	ldi	r24, 0xD3	; 211
    5212:	90 e3       	ldi	r25, 0x30	; 48
    5214:	21 50       	subi	r18, 0x01	; 1
    5216:	80 40       	sbci	r24, 0x00	; 0
    5218:	90 40       	sbci	r25, 0x00	; 0
    521a:	e1 f7       	brne	.-8      	; 0x5214 <bootloader_jump+0xc>
    521c:	00 c0       	rjmp	.+0      	; 0x521e <bootloader_jump+0x16>
    521e:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    5220:	87 e0       	ldi	r24, 0x07	; 7
    5222:	90 eb       	ldi	r25, 0xB0	; 176
    5224:	dc 01       	movw	r26, r24
    5226:	80 93 ff 03 	sts	0x03FF, r24
    522a:	90 93 00 04 	sts	0x0400, r25
    522e:	a0 93 01 04 	sts	0x0401, r26
    5232:	b0 93 02 04 	sts	0x0402, r27
    wdt_enable(WDTO_250MS);
    5236:	2c e0       	ldi	r18, 0x0C	; 12
    5238:	88 e1       	ldi	r24, 0x18	; 24
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	0f b6       	in	r0, 0x3f	; 63
    523e:	f8 94       	cli
    5240:	a8 95       	wdr
    5242:	80 93 60 00 	sts	0x0060, r24
    5246:	0f be       	out	0x3f, r0	; 63
    5248:	20 93 60 00 	sts	0x0060, r18
    524c:	ff cf       	rjmp	.-2      	; 0x524c <bootloader_jump+0x44>

0000524e <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    524e:	0e 94 47 09 	call	0x128e	; 0x128e <keymap_key_to_keycode>
    switch (keycode) {
    5252:	98 2f       	mov	r25, r24
    5254:	90 5c       	subi	r25, 0xC0	; 192
    5256:	90 32       	cpi	r25, 0x20	; 32
    5258:	18 f4       	brcc	.+6      	; 0x5260 <action_for_key+0x12>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    525a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <keymap_fn_to_action>
    525e:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    5260:	8d 3b       	cpi	r24, 0xBD	; 189
    5262:	50 f4       	brcc	.+20     	; 0x5278 <action_for_key+0x2a>
    5264:	88 3a       	cpi	r24, 0xA8	; 168
    5266:	18 f5       	brcc	.+70     	; 0x52ae <action_for_key+0x60>
    5268:	85 3a       	cpi	r24, 0xA5	; 165
    526a:	c0 f4       	brcc	.+48     	; 0x529c <action_for_key+0x4e>
    526c:	84 30       	cpi	r24, 0x04	; 4
    526e:	98 f4       	brcc	.+38     	; 0x5296 <action_for_key+0x48>
    5270:	81 30       	cpi	r24, 0x01	; 1
    5272:	09 f0       	breq	.+2      	; 0x5276 <action_for_key+0x28>
    5274:	6f c0       	rjmp	.+222    	; 0x5354 <action_for_key+0x106>
    5276:	0c c0       	rjmp	.+24     	; 0x5290 <action_for_key+0x42>
    5278:	88 3e       	cpi	r24, 0xE8	; 232
    527a:	30 f4       	brcc	.+12     	; 0x5288 <action_for_key+0x3a>
    527c:	80 3e       	cpi	r24, 0xE0	; 224
    527e:	58 f4       	brcc	.+22     	; 0x5296 <action_for_key+0x48>
    5280:	8f 3b       	cpi	r24, 0xBF	; 191
    5282:	09 f0       	breq	.+2      	; 0x5286 <action_for_key+0x38>
    5284:	67 c0       	rjmp	.+206    	; 0x5354 <action_for_key+0x106>
    5286:	59 c0       	rjmp	.+178    	; 0x533a <action_for_key+0xec>
    5288:	80 3f       	cpi	r24, 0xF0	; 240
    528a:	08 f4       	brcc	.+2      	; 0x528e <action_for_key+0x40>
    528c:	63 c0       	rjmp	.+198    	; 0x5354 <action_for_key+0x106>
    528e:	51 c0       	rjmp	.+162    	; 0x5332 <action_for_key+0xe4>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    5290:	21 e0       	ldi	r18, 0x01	; 1
    5292:	30 e0       	ldi	r19, 0x00	; 0
    5294:	a6 c0       	rjmp	.+332    	; 0x53e2 <action_for_key+0x194>
{
    action_t action = {};
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    5296:	28 2f       	mov	r18, r24
    5298:	30 e0       	ldi	r19, 0x00	; 0
    529a:	a3 c0       	rjmp	.+326    	; 0x53e2 <action_for_key+0x194>
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    529c:	85 3a       	cpi	r24, 0xA5	; 165
    529e:	09 f4       	brne	.+2      	; 0x52a2 <action_for_key+0x54>
    52a0:	5c c0       	rjmp	.+184    	; 0x535a <action_for_key+0x10c>
    52a2:	86 3a       	cpi	r24, 0xA6	; 166
    52a4:	09 f0       	breq	.+2      	; 0x52a8 <action_for_key+0x5a>
    52a6:	5c c0       	rjmp	.+184    	; 0x5360 <action_for_key+0x112>
    52a8:	22 e8       	ldi	r18, 0x82	; 130
    52aa:	30 e4       	ldi	r19, 0x40	; 64
    52ac:	9a c0       	rjmp	.+308    	; 0x53e2 <action_for_key+0x194>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    52ae:	88 3a       	cpi	r24, 0xA8	; 168
    52b0:	09 f4       	brne	.+2      	; 0x52b4 <action_for_key+0x66>
    52b2:	59 c0       	rjmp	.+178    	; 0x5366 <action_for_key+0x118>
    52b4:	89 3a       	cpi	r24, 0xA9	; 169
    52b6:	09 f4       	brne	.+2      	; 0x52ba <action_for_key+0x6c>
    52b8:	59 c0       	rjmp	.+178    	; 0x536c <action_for_key+0x11e>
    52ba:	8a 3a       	cpi	r24, 0xAA	; 170
    52bc:	09 f4       	brne	.+2      	; 0x52c0 <action_for_key+0x72>
    52be:	59 c0       	rjmp	.+178    	; 0x5372 <action_for_key+0x124>
    52c0:	8b 3a       	cpi	r24, 0xAB	; 171
    52c2:	09 f4       	brne	.+2      	; 0x52c6 <action_for_key+0x78>
    52c4:	59 c0       	rjmp	.+178    	; 0x5378 <action_for_key+0x12a>
    52c6:	8c 3a       	cpi	r24, 0xAC	; 172
    52c8:	09 f4       	brne	.+2      	; 0x52cc <action_for_key+0x7e>
    52ca:	59 c0       	rjmp	.+178    	; 0x537e <action_for_key+0x130>
    52cc:	8d 3a       	cpi	r24, 0xAD	; 173
    52ce:	09 f4       	brne	.+2      	; 0x52d2 <action_for_key+0x84>
    52d0:	59 c0       	rjmp	.+178    	; 0x5384 <action_for_key+0x136>
    52d2:	8e 3a       	cpi	r24, 0xAE	; 174
    52d4:	09 f4       	brne	.+2      	; 0x52d8 <action_for_key+0x8a>
    52d6:	59 c0       	rjmp	.+178    	; 0x538a <action_for_key+0x13c>
    52d8:	8f 3a       	cpi	r24, 0xAF	; 175
    52da:	09 f4       	brne	.+2      	; 0x52de <action_for_key+0x90>
    52dc:	59 c0       	rjmp	.+178    	; 0x5390 <action_for_key+0x142>
    52de:	81 3b       	cpi	r24, 0xB1	; 177
    52e0:	09 f4       	brne	.+2      	; 0x52e4 <action_for_key+0x96>
    52e2:	59 c0       	rjmp	.+178    	; 0x5396 <action_for_key+0x148>
    52e4:	80 3b       	cpi	r24, 0xB0	; 176
    52e6:	09 f4       	brne	.+2      	; 0x52ea <action_for_key+0x9c>
    52e8:	59 c0       	rjmp	.+178    	; 0x539c <action_for_key+0x14e>
    52ea:	82 3b       	cpi	r24, 0xB2	; 178
    52ec:	09 f4       	brne	.+2      	; 0x52f0 <action_for_key+0xa2>
    52ee:	59 c0       	rjmp	.+178    	; 0x53a2 <action_for_key+0x154>
    52f0:	83 3b       	cpi	r24, 0xB3	; 179
    52f2:	09 f4       	brne	.+2      	; 0x52f6 <action_for_key+0xa8>
    52f4:	59 c0       	rjmp	.+178    	; 0x53a8 <action_for_key+0x15a>
    52f6:	84 3b       	cpi	r24, 0xB4	; 180
    52f8:	09 f4       	brne	.+2      	; 0x52fc <action_for_key+0xae>
    52fa:	59 c0       	rjmp	.+178    	; 0x53ae <action_for_key+0x160>
    52fc:	85 3b       	cpi	r24, 0xB5	; 181
    52fe:	09 f4       	brne	.+2      	; 0x5302 <action_for_key+0xb4>
    5300:	59 c0       	rjmp	.+178    	; 0x53b4 <action_for_key+0x166>
    5302:	86 3b       	cpi	r24, 0xB6	; 182
    5304:	09 f4       	brne	.+2      	; 0x5308 <action_for_key+0xba>
    5306:	59 c0       	rjmp	.+178    	; 0x53ba <action_for_key+0x16c>
    5308:	87 3b       	cpi	r24, 0xB7	; 183
    530a:	09 f4       	brne	.+2      	; 0x530e <action_for_key+0xc0>
    530c:	59 c0       	rjmp	.+178    	; 0x53c0 <action_for_key+0x172>
    530e:	88 3b       	cpi	r24, 0xB8	; 184
    5310:	09 f4       	brne	.+2      	; 0x5314 <action_for_key+0xc6>
    5312:	59 c0       	rjmp	.+178    	; 0x53c6 <action_for_key+0x178>
    5314:	89 3b       	cpi	r24, 0xB9	; 185
    5316:	09 f4       	brne	.+2      	; 0x531a <action_for_key+0xcc>
    5318:	59 c0       	rjmp	.+178    	; 0x53cc <action_for_key+0x17e>
    531a:	8a 3b       	cpi	r24, 0xBA	; 186
    531c:	09 f4       	brne	.+2      	; 0x5320 <action_for_key+0xd2>
    531e:	59 c0       	rjmp	.+178    	; 0x53d2 <action_for_key+0x184>
    5320:	8b 3b       	cpi	r24, 0xBB	; 187
    5322:	09 f4       	brne	.+2      	; 0x5326 <action_for_key+0xd8>
    5324:	59 c0       	rjmp	.+178    	; 0x53d8 <action_for_key+0x18a>
    5326:	8c 3b       	cpi	r24, 0xBC	; 188
    5328:	09 f0       	breq	.+2      	; 0x532c <action_for_key+0xde>
    532a:	59 c0       	rjmp	.+178    	; 0x53de <action_for_key+0x190>
    532c:	2a e2       	ldi	r18, 0x2A	; 42
    532e:	36 e4       	ldi	r19, 0x46	; 70
    5330:	58 c0       	rjmp	.+176    	; 0x53e2 <action_for_key+0x194>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    5332:	28 2f       	mov	r18, r24
    5334:	30 e0       	ldi	r19, 0x00	; 0
    5336:	30 65       	ori	r19, 0x50	; 80
    5338:	54 c0       	rjmp	.+168    	; 0x53e2 <action_for_key+0x194>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    533a:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <clear_keyboard>
    533e:	2f e7       	ldi	r18, 0x7F	; 127
    5340:	88 e3       	ldi	r24, 0x38	; 56
    5342:	91 e0       	ldi	r25, 0x01	; 1
    5344:	21 50       	subi	r18, 0x01	; 1
    5346:	80 40       	sbci	r24, 0x00	; 0
    5348:	90 40       	sbci	r25, 0x00	; 0
    534a:	e1 f7       	brne	.-8      	; 0x5344 <action_for_key+0xf6>
    534c:	00 c0       	rjmp	.+0      	; 0x534e <action_for_key+0x100>
    534e:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    5350:	0e 94 04 29 	call	0x5208	; 0x5208 <bootloader_jump>
            break;
        default:
            action.code = ACTION_NO;
    5354:	20 e0       	ldi	r18, 0x00	; 0
    5356:	30 e0       	ldi	r19, 0x00	; 0
    5358:	44 c0       	rjmp	.+136    	; 0x53e2 <action_for_key+0x194>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    535a:	21 e8       	ldi	r18, 0x81	; 129
    535c:	30 e4       	ldi	r19, 0x40	; 64
    535e:	41 c0       	rjmp	.+130    	; 0x53e2 <action_for_key+0x194>
    5360:	23 e8       	ldi	r18, 0x83	; 131
    5362:	30 e4       	ldi	r19, 0x40	; 64
    5364:	3e c0       	rjmp	.+124    	; 0x53e2 <action_for_key+0x194>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    5366:	22 ee       	ldi	r18, 0xE2	; 226
    5368:	34 e4       	ldi	r19, 0x44	; 68
    536a:	3b c0       	rjmp	.+118    	; 0x53e2 <action_for_key+0x194>
    536c:	29 ee       	ldi	r18, 0xE9	; 233
    536e:	34 e4       	ldi	r19, 0x44	; 68
    5370:	38 c0       	rjmp	.+112    	; 0x53e2 <action_for_key+0x194>
    5372:	2a ee       	ldi	r18, 0xEA	; 234
    5374:	34 e4       	ldi	r19, 0x44	; 68
    5376:	35 c0       	rjmp	.+106    	; 0x53e2 <action_for_key+0x194>
    5378:	25 eb       	ldi	r18, 0xB5	; 181
    537a:	34 e4       	ldi	r19, 0x44	; 68
    537c:	32 c0       	rjmp	.+100    	; 0x53e2 <action_for_key+0x194>
    537e:	26 eb       	ldi	r18, 0xB6	; 182
    5380:	34 e4       	ldi	r19, 0x44	; 68
    5382:	2f c0       	rjmp	.+94     	; 0x53e2 <action_for_key+0x194>
    5384:	23 eb       	ldi	r18, 0xB3	; 179
    5386:	34 e4       	ldi	r19, 0x44	; 68
    5388:	2c c0       	rjmp	.+88     	; 0x53e2 <action_for_key+0x194>
    538a:	24 eb       	ldi	r18, 0xB4	; 180
    538c:	34 e4       	ldi	r19, 0x44	; 68
    538e:	29 c0       	rjmp	.+82     	; 0x53e2 <action_for_key+0x194>
    5390:	27 eb       	ldi	r18, 0xB7	; 183
    5392:	34 e4       	ldi	r19, 0x44	; 68
    5394:	26 c0       	rjmp	.+76     	; 0x53e2 <action_for_key+0x194>
    5396:	2c ec       	ldi	r18, 0xCC	; 204
    5398:	34 e4       	ldi	r19, 0x44	; 68
    539a:	23 c0       	rjmp	.+70     	; 0x53e2 <action_for_key+0x194>
    539c:	2d ec       	ldi	r18, 0xCD	; 205
    539e:	34 e4       	ldi	r19, 0x44	; 68
    53a0:	20 c0       	rjmp	.+64     	; 0x53e2 <action_for_key+0x194>
    53a2:	23 e8       	ldi	r18, 0x83	; 131
    53a4:	35 e4       	ldi	r19, 0x45	; 69
    53a6:	1d c0       	rjmp	.+58     	; 0x53e2 <action_for_key+0x194>
    53a8:	2a e8       	ldi	r18, 0x8A	; 138
    53aa:	35 e4       	ldi	r19, 0x45	; 69
    53ac:	1a c0       	rjmp	.+52     	; 0x53e2 <action_for_key+0x194>
    53ae:	22 e9       	ldi	r18, 0x92	; 146
    53b0:	35 e4       	ldi	r19, 0x45	; 69
    53b2:	17 c0       	rjmp	.+46     	; 0x53e2 <action_for_key+0x194>
    53b4:	24 e9       	ldi	r18, 0x94	; 148
    53b6:	35 e4       	ldi	r19, 0x45	; 69
    53b8:	14 c0       	rjmp	.+40     	; 0x53e2 <action_for_key+0x194>
    53ba:	21 e2       	ldi	r18, 0x21	; 33
    53bc:	36 e4       	ldi	r19, 0x46	; 70
    53be:	11 c0       	rjmp	.+34     	; 0x53e2 <action_for_key+0x194>
    53c0:	23 e2       	ldi	r18, 0x23	; 35
    53c2:	36 e4       	ldi	r19, 0x46	; 70
    53c4:	0e c0       	rjmp	.+28     	; 0x53e2 <action_for_key+0x194>
    53c6:	24 e2       	ldi	r18, 0x24	; 36
    53c8:	36 e4       	ldi	r19, 0x46	; 70
    53ca:	0b c0       	rjmp	.+22     	; 0x53e2 <action_for_key+0x194>
    53cc:	25 e2       	ldi	r18, 0x25	; 37
    53ce:	36 e4       	ldi	r19, 0x46	; 70
    53d0:	08 c0       	rjmp	.+16     	; 0x53e2 <action_for_key+0x194>
    53d2:	26 e2       	ldi	r18, 0x26	; 38
    53d4:	36 e4       	ldi	r19, 0x46	; 70
    53d6:	05 c0       	rjmp	.+10     	; 0x53e2 <action_for_key+0x194>
    53d8:	27 e2       	ldi	r18, 0x27	; 39
    53da:	36 e4       	ldi	r19, 0x46	; 70
    53dc:	02 c0       	rjmp	.+4      	; 0x53e2 <action_for_key+0x194>
    53de:	20 e0       	ldi	r18, 0x00	; 0
    53e0:	34 e4       	ldi	r19, 0x44	; 68
    53e2:	c9 01       	movw	r24, r18
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    }
}
    53e4:	08 95       	ret

000053e6 <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    53e6:	80 e0       	ldi	r24, 0x00	; 0
    53e8:	90 e0       	ldi	r25, 0x00	; 0
    53ea:	08 95       	ret

000053ec <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    53ec:	80 91 ef 03 	lds	r24, 0x03EF
    53f0:	80 ff       	sbrs	r24, 0
    53f2:	0b c0       	rjmp	.+22     	; 0x540a <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    53f4:	60 91 27 01 	lds	r22, 0x0127
    53f8:	85 e0       	ldi	r24, 0x05	; 5
    53fa:	68 9f       	mul	r22, r24
    53fc:	b0 01       	movw	r22, r0
    53fe:	11 24       	eor	r1, r1
    5400:	75 95       	asr	r23
    5402:	67 95       	ror	r22
    5404:	75 95       	asr	r23
    5406:	67 95       	ror	r22
    5408:	2a c0       	rjmp	.+84     	; 0x545e <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    540a:	81 ff       	sbrs	r24, 1
    540c:	09 c0       	rjmp	.+18     	; 0x5420 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    540e:	60 91 27 01 	lds	r22, 0x0127
    5412:	85 e0       	ldi	r24, 0x05	; 5
    5414:	68 9f       	mul	r22, r24
    5416:	b0 01       	movw	r22, r0
    5418:	11 24       	eor	r1, r1
    541a:	75 95       	asr	r23
    541c:	67 95       	ror	r22
    541e:	1f c0       	rjmp	.+62     	; 0x545e <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    5420:	82 ff       	sbrs	r24, 2
    5422:	07 c0       	rjmp	.+14     	; 0x5432 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    5424:	60 91 27 01 	lds	r22, 0x0127
    5428:	85 e0       	ldi	r24, 0x05	; 5
    542a:	68 9f       	mul	r22, r24
    542c:	b0 01       	movw	r22, r0
    542e:	11 24       	eor	r1, r1
    5430:	16 c0       	rjmp	.+44     	; 0x545e <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    5432:	40 91 e9 03 	lds	r20, 0x03E9
    5436:	44 23       	and	r20, r20
    5438:	c9 f0       	breq	.+50     	; 0x546c <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    543a:	60 91 26 01 	lds	r22, 0x0126
    543e:	46 17       	cp	r20, r22
    5440:	88 f7       	brcc	.-30     	; 0x5424 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    5442:	20 91 27 01 	lds	r18, 0x0127
    5446:	85 e0       	ldi	r24, 0x05	; 5
    5448:	28 9f       	mul	r18, r24
    544a:	90 01       	movw	r18, r0
    544c:	11 24       	eor	r1, r1
    544e:	42 9f       	mul	r20, r18
    5450:	c0 01       	movw	r24, r0
    5452:	43 9f       	mul	r20, r19
    5454:	90 0d       	add	r25, r0
    5456:	11 24       	eor	r1, r1
    5458:	70 e0       	ldi	r23, 0x00	; 0
    545a:	0e 94 a1 31 	call	0x6342	; 0x6342 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    545e:	60 38       	cpi	r22, 0x80	; 128
    5460:	71 05       	cpc	r23, r1
    5462:	40 f4       	brcc	.+16     	; 0x5474 <move_unit+0x88>
    5464:	61 15       	cp	r22, r1
    5466:	71 05       	cpc	r23, r1
    5468:	39 f0       	breq	.+14     	; 0x5478 <move_unit+0x8c>
    546a:	02 c0       	rjmp	.+4      	; 0x5470 <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    546c:	65 e0       	ldi	r22, 0x05	; 5
    546e:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    5470:	86 2f       	mov	r24, r22
    5472:	08 95       	ret
    5474:	8f e7       	ldi	r24, 0x7F	; 127
    5476:	08 95       	ret
    5478:	81 e0       	ldi	r24, 0x01	; 1
}
    547a:	08 95       	ret

0000547c <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    547c:	80 91 ef 03 	lds	r24, 0x03EF
    5480:	80 ff       	sbrs	r24, 0
    5482:	08 c0       	rjmp	.+16     	; 0x5494 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    5484:	60 91 25 01 	lds	r22, 0x0125
    5488:	70 e0       	ldi	r23, 0x00	; 0
    548a:	75 95       	asr	r23
    548c:	67 95       	ror	r22
    548e:	75 95       	asr	r23
    5490:	67 95       	ror	r22
    5492:	21 c0       	rjmp	.+66     	; 0x54d6 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    5494:	81 ff       	sbrs	r24, 1
    5496:	06 c0       	rjmp	.+12     	; 0x54a4 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    5498:	60 91 25 01 	lds	r22, 0x0125
    549c:	70 e0       	ldi	r23, 0x00	; 0
    549e:	75 95       	asr	r23
    54a0:	67 95       	ror	r22
    54a2:	19 c0       	rjmp	.+50     	; 0x54d6 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    54a4:	82 ff       	sbrs	r24, 2
    54a6:	04 c0       	rjmp	.+8      	; 0x54b0 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    54a8:	60 91 25 01 	lds	r22, 0x0125
    54ac:	70 e0       	ldi	r23, 0x00	; 0
    54ae:	10 c0       	rjmp	.+32     	; 0x54d0 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    54b0:	80 91 e9 03 	lds	r24, 0x03E9
    54b4:	88 23       	and	r24, r24
    54b6:	c1 f0       	breq	.+48     	; 0x54e8 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    54b8:	60 91 24 01 	lds	r22, 0x0124
    54bc:	86 17       	cp	r24, r22
    54be:	a0 f7       	brcc	.-24     	; 0x54a8 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    54c0:	90 91 25 01 	lds	r25, 0x0125
    54c4:	98 9f       	mul	r25, r24
    54c6:	c0 01       	movw	r24, r0
    54c8:	11 24       	eor	r1, r1
    54ca:	70 e0       	ldi	r23, 0x00	; 0
    54cc:	0e 94 a1 31 	call	0x6342	; 0x6342 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    54d0:	60 38       	cpi	r22, 0x80	; 128
    54d2:	71 05       	cpc	r23, r1
    54d4:	28 f4       	brcc	.+10     	; 0x54e0 <wheel_unit+0x64>
    54d6:	61 15       	cp	r22, r1
    54d8:	71 05       	cpc	r23, r1
    54da:	21 f0       	breq	.+8      	; 0x54e4 <wheel_unit+0x68>
    54dc:	86 2f       	mov	r24, r22
    54de:	08 95       	ret
    54e0:	8f e7       	ldi	r24, 0x7F	; 127
    54e2:	08 95       	ret
    54e4:	81 e0       	ldi	r24, 0x01	; 1
    54e6:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    54e8:	61 e0       	ldi	r22, 0x01	; 1
    54ea:	70 e0       	ldi	r23, 0x00	; 0
    54ec:	f4 cf       	rjmp	.-24     	; 0x54d6 <wheel_unit+0x5a>

000054ee <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    54ee:	80 3f       	cpi	r24, 0xF0	; 240
    54f0:	21 f4       	brne	.+8      	; 0x54fa <mousekey_on+0xc>
    54f2:	0e 94 f6 29 	call	0x53ec	; 0x53ec <move_unit>
    54f6:	81 95       	neg	r24
    54f8:	04 c0       	rjmp	.+8      	; 0x5502 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    54fa:	81 3f       	cpi	r24, 0xF1	; 241
    54fc:	29 f4       	brne	.+10     	; 0x5508 <mousekey_on+0x1a>
    54fe:	0e 94 f6 29 	call	0x53ec	; 0x53ec <move_unit>
    5502:	80 93 ec 03 	sts	0x03EC, r24
    5506:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    5508:	82 3f       	cpi	r24, 0xF2	; 242
    550a:	21 f4       	brne	.+8      	; 0x5514 <mousekey_on+0x26>
    550c:	0e 94 f6 29 	call	0x53ec	; 0x53ec <move_unit>
    5510:	81 95       	neg	r24
    5512:	04 c0       	rjmp	.+8      	; 0x551c <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    5514:	83 3f       	cpi	r24, 0xF3	; 243
    5516:	29 f4       	brne	.+10     	; 0x5522 <mousekey_on+0x34>
    5518:	0e 94 f6 29 	call	0x53ec	; 0x53ec <move_unit>
    551c:	80 93 eb 03 	sts	0x03EB, r24
    5520:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    5522:	89 3f       	cpi	r24, 0xF9	; 249
    5524:	19 f4       	brne	.+6      	; 0x552c <mousekey_on+0x3e>
    5526:	0e 94 3e 2a 	call	0x547c	; 0x547c <wheel_unit>
    552a:	05 c0       	rjmp	.+10     	; 0x5536 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    552c:	8a 3f       	cpi	r24, 0xFA	; 250
    552e:	31 f4       	brne	.+12     	; 0x553c <mousekey_on+0x4e>
    5530:	0e 94 3e 2a 	call	0x547c	; 0x547c <wheel_unit>
    5534:	81 95       	neg	r24
    5536:	80 93 ed 03 	sts	0x03ED, r24
    553a:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    553c:	8b 3f       	cpi	r24, 0xFB	; 251
    553e:	21 f4       	brne	.+8      	; 0x5548 <mousekey_on+0x5a>
    5540:	0e 94 3e 2a 	call	0x547c	; 0x547c <wheel_unit>
    5544:	81 95       	neg	r24
    5546:	04 c0       	rjmp	.+8      	; 0x5550 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    5548:	8c 3f       	cpi	r24, 0xFC	; 252
    554a:	29 f4       	brne	.+10     	; 0x5556 <mousekey_on+0x68>
    554c:	0e 94 3e 2a 	call	0x547c	; 0x547c <wheel_unit>
    5550:	80 93 ee 03 	sts	0x03EE, r24
    5554:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    5556:	84 3f       	cpi	r24, 0xF4	; 244
    5558:	21 f4       	brne	.+8      	; 0x5562 <mousekey_on+0x74>
    555a:	80 91 ea 03 	lds	r24, 0x03EA
    555e:	81 60       	ori	r24, 0x01	; 1
    5560:	17 c0       	rjmp	.+46     	; 0x5590 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    5562:	85 3f       	cpi	r24, 0xF5	; 245
    5564:	21 f4       	brne	.+8      	; 0x556e <mousekey_on+0x80>
    5566:	80 91 ea 03 	lds	r24, 0x03EA
    556a:	82 60       	ori	r24, 0x02	; 2
    556c:	11 c0       	rjmp	.+34     	; 0x5590 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    556e:	86 3f       	cpi	r24, 0xF6	; 246
    5570:	21 f4       	brne	.+8      	; 0x557a <mousekey_on+0x8c>
    5572:	80 91 ea 03 	lds	r24, 0x03EA
    5576:	84 60       	ori	r24, 0x04	; 4
    5578:	0b c0       	rjmp	.+22     	; 0x5590 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    557a:	87 3f       	cpi	r24, 0xF7	; 247
    557c:	21 f4       	brne	.+8      	; 0x5586 <mousekey_on+0x98>
    557e:	80 91 ea 03 	lds	r24, 0x03EA
    5582:	88 60       	ori	r24, 0x08	; 8
    5584:	05 c0       	rjmp	.+10     	; 0x5590 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    5586:	88 3f       	cpi	r24, 0xF8	; 248
    5588:	31 f4       	brne	.+12     	; 0x5596 <mousekey_on+0xa8>
    558a:	80 91 ea 03 	lds	r24, 0x03EA
    558e:	80 61       	ori	r24, 0x10	; 16
    5590:	80 93 ea 03 	sts	0x03EA, r24
    5594:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    5596:	8d 3f       	cpi	r24, 0xFD	; 253
    5598:	21 f4       	brne	.+8      	; 0x55a2 <mousekey_on+0xb4>
    559a:	80 91 ef 03 	lds	r24, 0x03EF
    559e:	81 60       	ori	r24, 0x01	; 1
    55a0:	0b c0       	rjmp	.+22     	; 0x55b8 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    55a2:	8e 3f       	cpi	r24, 0xFE	; 254
    55a4:	21 f4       	brne	.+8      	; 0x55ae <mousekey_on+0xc0>
    55a6:	80 91 ef 03 	lds	r24, 0x03EF
    55aa:	82 60       	ori	r24, 0x02	; 2
    55ac:	05 c0       	rjmp	.+10     	; 0x55b8 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    55ae:	8f 3f       	cpi	r24, 0xFF	; 255
    55b0:	29 f4       	brne	.+10     	; 0x55bc <mousekey_on+0xce>
    55b2:	80 91 ef 03 	lds	r24, 0x03EF
    55b6:	84 60       	ori	r24, 0x04	; 4
    55b8:	80 93 ef 03 	sts	0x03EF, r24
    55bc:	08 95       	ret

000055be <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    55be:	80 3f       	cpi	r24, 0xF0	; 240
    55c0:	29 f4       	brne	.+10     	; 0x55cc <mousekey_off+0xe>
    55c2:	80 91 ec 03 	lds	r24, 0x03EC
    55c6:	87 ff       	sbrs	r24, 7
    55c8:	6e c0       	rjmp	.+220    	; 0x56a6 <mousekey_off+0xe8>
    55ca:	07 c0       	rjmp	.+14     	; 0x55da <mousekey_off+0x1c>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    55cc:	81 3f       	cpi	r24, 0xF1	; 241
    55ce:	41 f4       	brne	.+16     	; 0x55e0 <mousekey_off+0x22>
    55d0:	80 91 ec 03 	lds	r24, 0x03EC
    55d4:	18 16       	cp	r1, r24
    55d6:	0c f0       	brlt	.+2      	; 0x55da <mousekey_off+0x1c>
    55d8:	66 c0       	rjmp	.+204    	; 0x56a6 <mousekey_off+0xe8>
    55da:	10 92 ec 03 	sts	0x03EC, r1
    55de:	63 c0       	rjmp	.+198    	; 0x56a6 <mousekey_off+0xe8>
    55e0:	90 91 eb 03 	lds	r25, 0x03EB
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    55e4:	82 3f       	cpi	r24, 0xF2	; 242
    55e6:	19 f4       	brne	.+6      	; 0x55ee <mousekey_off+0x30>
    55e8:	97 ff       	sbrs	r25, 7
    55ea:	5d c0       	rjmp	.+186    	; 0x56a6 <mousekey_off+0xe8>
    55ec:	05 c0       	rjmp	.+10     	; 0x55f8 <mousekey_off+0x3a>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    55ee:	83 3f       	cpi	r24, 0xF3	; 243
    55f0:	31 f4       	brne	.+12     	; 0x55fe <mousekey_off+0x40>
    55f2:	19 16       	cp	r1, r25
    55f4:	0c f0       	brlt	.+2      	; 0x55f8 <mousekey_off+0x3a>
    55f6:	57 c0       	rjmp	.+174    	; 0x56a6 <mousekey_off+0xe8>
    55f8:	10 92 eb 03 	sts	0x03EB, r1
    55fc:	54 c0       	rjmp	.+168    	; 0x56a6 <mousekey_off+0xe8>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    55fe:	89 3f       	cpi	r24, 0xF9	; 249
    5600:	31 f4       	brne	.+12     	; 0x560e <mousekey_off+0x50>
    5602:	80 91 ed 03 	lds	r24, 0x03ED
    5606:	18 16       	cp	r1, r24
    5608:	0c f0       	brlt	.+2      	; 0x560c <mousekey_off+0x4e>
    560a:	4d c0       	rjmp	.+154    	; 0x56a6 <mousekey_off+0xe8>
    560c:	06 c0       	rjmp	.+12     	; 0x561a <mousekey_off+0x5c>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    560e:	8a 3f       	cpi	r24, 0xFA	; 250
    5610:	39 f4       	brne	.+14     	; 0x5620 <mousekey_off+0x62>
    5612:	80 91 ed 03 	lds	r24, 0x03ED
    5616:	87 ff       	sbrs	r24, 7
    5618:	46 c0       	rjmp	.+140    	; 0x56a6 <mousekey_off+0xe8>
    561a:	10 92 ed 03 	sts	0x03ED, r1
    561e:	43 c0       	rjmp	.+134    	; 0x56a6 <mousekey_off+0xe8>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    5620:	8b 3f       	cpi	r24, 0xFB	; 251
    5622:	29 f4       	brne	.+10     	; 0x562e <mousekey_off+0x70>
    5624:	80 91 ee 03 	lds	r24, 0x03EE
    5628:	87 ff       	sbrs	r24, 7
    562a:	3d c0       	rjmp	.+122    	; 0x56a6 <mousekey_off+0xe8>
    562c:	06 c0       	rjmp	.+12     	; 0x563a <mousekey_off+0x7c>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    562e:	8c 3f       	cpi	r24, 0xFC	; 252
    5630:	39 f4       	brne	.+14     	; 0x5640 <mousekey_off+0x82>
    5632:	80 91 ee 03 	lds	r24, 0x03EE
    5636:	18 16       	cp	r1, r24
    5638:	b4 f5       	brge	.+108    	; 0x56a6 <mousekey_off+0xe8>
    563a:	10 92 ee 03 	sts	0x03EE, r1
    563e:	33 c0       	rjmp	.+102    	; 0x56a6 <mousekey_off+0xe8>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    5640:	84 3f       	cpi	r24, 0xF4	; 244
    5642:	21 f4       	brne	.+8      	; 0x564c <mousekey_off+0x8e>
    5644:	80 91 ea 03 	lds	r24, 0x03EA
    5648:	8e 7f       	andi	r24, 0xFE	; 254
    564a:	05 c0       	rjmp	.+10     	; 0x5656 <mousekey_off+0x98>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    564c:	85 3f       	cpi	r24, 0xF5	; 245
    564e:	31 f4       	brne	.+12     	; 0x565c <mousekey_off+0x9e>
    5650:	80 91 ea 03 	lds	r24, 0x03EA
    5654:	8d 7f       	andi	r24, 0xFD	; 253
    5656:	80 93 ea 03 	sts	0x03EA, r24
    565a:	25 c0       	rjmp	.+74     	; 0x56a6 <mousekey_off+0xe8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    565c:	86 3f       	cpi	r24, 0xF6	; 246
    565e:	21 f4       	brne	.+8      	; 0x5668 <mousekey_off+0xaa>
    5660:	80 91 ea 03 	lds	r24, 0x03EA
    5664:	8b 7f       	andi	r24, 0xFB	; 251
    5666:	f7 cf       	rjmp	.-18     	; 0x5656 <mousekey_off+0x98>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    5668:	87 3f       	cpi	r24, 0xF7	; 247
    566a:	21 f4       	brne	.+8      	; 0x5674 <mousekey_off+0xb6>
    566c:	80 91 ea 03 	lds	r24, 0x03EA
    5670:	87 7f       	andi	r24, 0xF7	; 247
    5672:	f1 cf       	rjmp	.-30     	; 0x5656 <mousekey_off+0x98>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    5674:	88 3f       	cpi	r24, 0xF8	; 248
    5676:	21 f4       	brne	.+8      	; 0x5680 <mousekey_off+0xc2>
    5678:	80 91 ea 03 	lds	r24, 0x03EA
    567c:	8f 7e       	andi	r24, 0xEF	; 239
    567e:	eb cf       	rjmp	.-42     	; 0x5656 <mousekey_off+0x98>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    5680:	8d 3f       	cpi	r24, 0xFD	; 253
    5682:	21 f4       	brne	.+8      	; 0x568c <mousekey_off+0xce>
    5684:	80 91 ef 03 	lds	r24, 0x03EF
    5688:	8e 7f       	andi	r24, 0xFE	; 254
    568a:	0b c0       	rjmp	.+22     	; 0x56a2 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    568c:	8e 3f       	cpi	r24, 0xFE	; 254
    568e:	21 f4       	brne	.+8      	; 0x5698 <mousekey_off+0xda>
    5690:	80 91 ef 03 	lds	r24, 0x03EF
    5694:	8d 7f       	andi	r24, 0xFD	; 253
    5696:	05 c0       	rjmp	.+10     	; 0x56a2 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    5698:	8f 3f       	cpi	r24, 0xFF	; 255
    569a:	29 f4       	brne	.+10     	; 0x56a6 <mousekey_off+0xe8>
    569c:	80 91 ef 03 	lds	r24, 0x03EF
    56a0:	8b 7f       	andi	r24, 0xFB	; 251
    56a2:	80 93 ef 03 	sts	0x03EF, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    56a6:	80 91 eb 03 	lds	r24, 0x03EB
    56aa:	81 11       	cpse	r24, r1
    56ac:	0e c0       	rjmp	.+28     	; 0x56ca <mousekey_off+0x10c>
    56ae:	80 91 ec 03 	lds	r24, 0x03EC
    56b2:	81 11       	cpse	r24, r1
    56b4:	0a c0       	rjmp	.+20     	; 0x56ca <mousekey_off+0x10c>
    56b6:	80 91 ed 03 	lds	r24, 0x03ED
    56ba:	81 11       	cpse	r24, r1
    56bc:	06 c0       	rjmp	.+12     	; 0x56ca <mousekey_off+0x10c>
    56be:	80 91 ee 03 	lds	r24, 0x03EE
    56c2:	81 11       	cpse	r24, r1
    56c4:	02 c0       	rjmp	.+4      	; 0x56ca <mousekey_off+0x10c>
        mousekey_repeat = 0;
    56c6:	10 92 e9 03 	sts	0x03E9, r1
    56ca:	08 95       	ret

000056cc <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    56cc:	80 91 e1 03 	lds	r24, 0x03E1
    56d0:	83 ff       	sbrs	r24, 3
    56d2:	7e c0       	rjmp	.+252    	; 0x57d0 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    56d4:	85 e4       	ldi	r24, 0x45	; 69
    56d6:	99 e0       	ldi	r25, 0x09	; 9
    56d8:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    phex(mouse_report.buttons); print("|");
    56dc:	80 91 ea 03 	lds	r24, 0x03EA
    56e0:	1f 92       	push	r1
    56e2:	8f 93       	push	r24
    56e4:	88 e6       	ldi	r24, 0x68	; 104
    56e6:	99 e0       	ldi	r25, 0x09	; 9
    56e8:	9f 93       	push	r25
    56ea:	8f 93       	push	r24
    56ec:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    56f0:	8d e6       	ldi	r24, 0x6D	; 109
    56f2:	99 e0       	ldi	r25, 0x09	; 9
    56f4:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    print_decs(mouse_report.x); print(" ");
    56f8:	20 91 eb 03 	lds	r18, 0x03EB
    56fc:	82 2f       	mov	r24, r18
    56fe:	99 27       	eor	r25, r25
    5700:	87 fd       	sbrc	r24, 7
    5702:	90 95       	com	r25
    5704:	9f 93       	push	r25
    5706:	2f 93       	push	r18
    5708:	8f e6       	ldi	r24, 0x6F	; 111
    570a:	99 e0       	ldi	r25, 0x09	; 9
    570c:	9f 93       	push	r25
    570e:	8f 93       	push	r24
    5710:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    5714:	82 e7       	ldi	r24, 0x72	; 114
    5716:	99 e0       	ldi	r25, 0x09	; 9
    5718:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    print_decs(mouse_report.y); print(" ");
    571c:	20 91 ec 03 	lds	r18, 0x03EC
    5720:	82 2f       	mov	r24, r18
    5722:	99 27       	eor	r25, r25
    5724:	87 fd       	sbrc	r24, 7
    5726:	90 95       	com	r25
    5728:	9f 93       	push	r25
    572a:	2f 93       	push	r18
    572c:	84 e7       	ldi	r24, 0x74	; 116
    572e:	99 e0       	ldi	r25, 0x09	; 9
    5730:	9f 93       	push	r25
    5732:	8f 93       	push	r24
    5734:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    5738:	87 e7       	ldi	r24, 0x77	; 119
    573a:	99 e0       	ldi	r25, 0x09	; 9
    573c:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    print_decs(mouse_report.v); print(" ");
    5740:	20 91 ed 03 	lds	r18, 0x03ED
    5744:	82 2f       	mov	r24, r18
    5746:	99 27       	eor	r25, r25
    5748:	87 fd       	sbrc	r24, 7
    574a:	90 95       	com	r25
    574c:	9f 93       	push	r25
    574e:	2f 93       	push	r18
    5750:	89 e7       	ldi	r24, 0x79	; 121
    5752:	99 e0       	ldi	r25, 0x09	; 9
    5754:	9f 93       	push	r25
    5756:	8f 93       	push	r24
    5758:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    575c:	8c e7       	ldi	r24, 0x7C	; 124
    575e:	99 e0       	ldi	r25, 0x09	; 9
    5760:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    print_decs(mouse_report.h); print("](");
    5764:	20 91 ee 03 	lds	r18, 0x03EE
    5768:	82 2f       	mov	r24, r18
    576a:	99 27       	eor	r25, r25
    576c:	87 fd       	sbrc	r24, 7
    576e:	90 95       	com	r25
    5770:	9f 93       	push	r25
    5772:	2f 93       	push	r18
    5774:	8e e7       	ldi	r24, 0x7E	; 126
    5776:	99 e0       	ldi	r25, 0x09	; 9
    5778:	9f 93       	push	r25
    577a:	8f 93       	push	r24
    577c:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    5780:	81 e8       	ldi	r24, 0x81	; 129
    5782:	99 e0       	ldi	r25, 0x09	; 9
    5784:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    print_dec(mousekey_repeat); print("/");
    5788:	80 91 e9 03 	lds	r24, 0x03E9
    578c:	1f 92       	push	r1
    578e:	8f 93       	push	r24
    5790:	84 e8       	ldi	r24, 0x84	; 132
    5792:	99 e0       	ldi	r25, 0x09	; 9
    5794:	9f 93       	push	r25
    5796:	8f 93       	push	r24
    5798:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    579c:	87 e8       	ldi	r24, 0x87	; 135
    579e:	99 e0       	ldi	r25, 0x09	; 9
    57a0:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    print_dec(mousekey_accel); print(")\n");
    57a4:	80 91 ef 03 	lds	r24, 0x03EF
    57a8:	1f 92       	push	r1
    57aa:	8f 93       	push	r24
    57ac:	89 e8       	ldi	r24, 0x89	; 137
    57ae:	99 e0       	ldi	r25, 0x09	; 9
    57b0:	9f 93       	push	r25
    57b2:	8f 93       	push	r24
    57b4:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    57b8:	8c e8       	ldi	r24, 0x8C	; 140
    57ba:	99 e0       	ldi	r25, 0x09	; 9
    57bc:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    57c0:	8d b7       	in	r24, 0x3d	; 61
    57c2:	9e b7       	in	r25, 0x3e	; 62
    57c4:	4c 96       	adiw	r24, 0x1c	; 28
    57c6:	0f b6       	in	r0, 0x3f	; 63
    57c8:	f8 94       	cli
    57ca:	9e bf       	out	0x3e, r25	; 62
    57cc:	0f be       	out	0x3f, r0	; 63
    57ce:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    57d0:	8a ee       	ldi	r24, 0xEA	; 234
    57d2:	93 e0       	ldi	r25, 0x03	; 3
    57d4:	0e 94 2f 1c 	call	0x385e	; 0x385e <host_mouse_send>
    last_timer = timer_read();
    57d8:	0e 94 92 28 	call	0x5124	; 0x5124 <timer_read>
    57dc:	90 93 e8 03 	sts	0x03E8, r25
    57e0:	80 93 e7 03 	sts	0x03E7, r24
    57e4:	08 95       	ret

000057e6 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    57e6:	cf 93       	push	r28
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    57e8:	80 91 e7 03 	lds	r24, 0x03E7
    57ec:	90 91 e8 03 	lds	r25, 0x03E8
    57f0:	0e 94 b1 28 	call	0x5162	; 0x5162 <timer_elapsed>
    57f4:	40 91 e9 03 	lds	r20, 0x03E9
    57f8:	44 23       	and	r20, r20
    57fa:	21 f0       	breq	.+8      	; 0x5804 <mousekey_task+0x1e>
    57fc:	20 91 28 01 	lds	r18, 0x0128
    5800:	30 e0       	ldi	r19, 0x00	; 0
    5802:	06 c0       	rjmp	.+12     	; 0x5810 <mousekey_task+0x2a>
    5804:	20 91 29 01 	lds	r18, 0x0129
    5808:	5a e0       	ldi	r21, 0x0A	; 10
    580a:	25 9f       	mul	r18, r21
    580c:	90 01       	movw	r18, r0
    580e:	11 24       	eor	r1, r1
    5810:	82 17       	cp	r24, r18
    5812:	93 07       	cpc	r25, r19
    5814:	08 f4       	brcc	.+2      	; 0x5818 <mousekey_task+0x32>
    5816:	86 c0       	rjmp	.+268    	; 0x5924 <mousekey_task+0x13e>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    5818:	80 91 eb 03 	lds	r24, 0x03EB
    581c:	81 11       	cpse	r24, r1
    581e:	0d c0       	rjmp	.+26     	; 0x583a <mousekey_task+0x54>
    5820:	90 91 ec 03 	lds	r25, 0x03EC
    5824:	91 11       	cpse	r25, r1
    5826:	09 c0       	rjmp	.+18     	; 0x583a <mousekey_task+0x54>
    5828:	90 91 ed 03 	lds	r25, 0x03ED
    582c:	91 11       	cpse	r25, r1
    582e:	05 c0       	rjmp	.+10     	; 0x583a <mousekey_task+0x54>
    5830:	90 91 ee 03 	lds	r25, 0x03EE
    5834:	99 23       	and	r25, r25
    5836:	09 f4       	brne	.+2      	; 0x583a <mousekey_task+0x54>
    5838:	75 c0       	rjmp	.+234    	; 0x5924 <mousekey_task+0x13e>
        return;

    if (mousekey_repeat != UINT8_MAX)
    583a:	4f 3f       	cpi	r20, 0xFF	; 255
    583c:	19 f0       	breq	.+6      	; 0x5844 <mousekey_task+0x5e>
        mousekey_repeat++;
    583e:	4f 5f       	subi	r20, 0xFF	; 255
    5840:	40 93 e9 03 	sts	0x03E9, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    5844:	18 16       	cp	r1, r24
    5846:	24 f4       	brge	.+8      	; 0x5850 <mousekey_task+0x6a>
    5848:	0e 94 f6 29 	call	0x53ec	; 0x53ec <move_unit>
    584c:	80 93 eb 03 	sts	0x03EB, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    5850:	80 91 eb 03 	lds	r24, 0x03EB
    5854:	87 ff       	sbrs	r24, 7
    5856:	05 c0       	rjmp	.+10     	; 0x5862 <mousekey_task+0x7c>
    5858:	0e 94 f6 29 	call	0x53ec	; 0x53ec <move_unit>
    585c:	81 95       	neg	r24
    585e:	80 93 eb 03 	sts	0x03EB, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    5862:	80 91 ec 03 	lds	r24, 0x03EC
    5866:	18 16       	cp	r1, r24
    5868:	24 f4       	brge	.+8      	; 0x5872 <mousekey_task+0x8c>
    586a:	0e 94 f6 29 	call	0x53ec	; 0x53ec <move_unit>
    586e:	80 93 ec 03 	sts	0x03EC, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    5872:	80 91 ec 03 	lds	r24, 0x03EC
    5876:	87 ff       	sbrs	r24, 7
    5878:	05 c0       	rjmp	.+10     	; 0x5884 <mousekey_task+0x9e>
    587a:	0e 94 f6 29 	call	0x53ec	; 0x53ec <move_unit>
    587e:	81 95       	neg	r24
    5880:	80 93 ec 03 	sts	0x03EC, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    5884:	60 91 eb 03 	lds	r22, 0x03EB
    5888:	66 23       	and	r22, r22
    588a:	39 f1       	breq	.+78     	; 0x58da <mousekey_task+0xf4>
    588c:	c0 91 ec 03 	lds	r28, 0x03EC
    5890:	cc 23       	and	r28, r28
    5892:	19 f1       	breq	.+70     	; 0x58da <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    5894:	77 27       	eor	r23, r23
    5896:	67 fd       	sbrc	r22, 7
    5898:	70 95       	com	r23
    589a:	87 2f       	mov	r24, r23
    589c:	97 2f       	mov	r25, r23
    589e:	0e 94 92 30 	call	0x6124	; 0x6124 <__floatsisf>
    58a2:	23 e3       	ldi	r18, 0x33	; 51
    58a4:	33 e3       	ldi	r19, 0x33	; 51
    58a6:	43 e3       	ldi	r20, 0x33	; 51
    58a8:	5f e3       	ldi	r21, 0x3F	; 63
    58aa:	0e 94 f6 30 	call	0x61ec	; 0x61ec <__mulsf3>
    58ae:	0e 94 5f 30 	call	0x60be	; 0x60be <__fixsfsi>
    58b2:	60 93 eb 03 	sts	0x03EB, r22
        mouse_report.y *= 0.7;
    58b6:	6c 2f       	mov	r22, r28
    58b8:	77 27       	eor	r23, r23
    58ba:	67 fd       	sbrc	r22, 7
    58bc:	70 95       	com	r23
    58be:	87 2f       	mov	r24, r23
    58c0:	97 2f       	mov	r25, r23
    58c2:	0e 94 92 30 	call	0x6124	; 0x6124 <__floatsisf>
    58c6:	23 e3       	ldi	r18, 0x33	; 51
    58c8:	33 e3       	ldi	r19, 0x33	; 51
    58ca:	43 e3       	ldi	r20, 0x33	; 51
    58cc:	5f e3       	ldi	r21, 0x3F	; 63
    58ce:	0e 94 f6 30 	call	0x61ec	; 0x61ec <__mulsf3>
    58d2:	0e 94 5f 30 	call	0x60be	; 0x60be <__fixsfsi>
    58d6:	60 93 ec 03 	sts	0x03EC, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    58da:	80 91 ed 03 	lds	r24, 0x03ED
    58de:	18 16       	cp	r1, r24
    58e0:	24 f4       	brge	.+8      	; 0x58ea <mousekey_task+0x104>
    58e2:	0e 94 3e 2a 	call	0x547c	; 0x547c <wheel_unit>
    58e6:	80 93 ed 03 	sts	0x03ED, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    58ea:	80 91 ed 03 	lds	r24, 0x03ED
    58ee:	87 ff       	sbrs	r24, 7
    58f0:	05 c0       	rjmp	.+10     	; 0x58fc <mousekey_task+0x116>
    58f2:	0e 94 3e 2a 	call	0x547c	; 0x547c <wheel_unit>
    58f6:	81 95       	neg	r24
    58f8:	80 93 ed 03 	sts	0x03ED, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    58fc:	80 91 ee 03 	lds	r24, 0x03EE
    5900:	18 16       	cp	r1, r24
    5902:	24 f4       	brge	.+8      	; 0x590c <mousekey_task+0x126>
    5904:	0e 94 3e 2a 	call	0x547c	; 0x547c <wheel_unit>
    5908:	80 93 ee 03 	sts	0x03EE, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    590c:	80 91 ee 03 	lds	r24, 0x03EE
    5910:	87 ff       	sbrs	r24, 7
    5912:	05 c0       	rjmp	.+10     	; 0x591e <mousekey_task+0x138>
    5914:	0e 94 3e 2a 	call	0x547c	; 0x547c <wheel_unit>
    5918:	81 95       	neg	r24
    591a:	80 93 ee 03 	sts	0x03EE, r24

    mousekey_send();
}
    591e:	cf 91       	pop	r28
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    5920:	0c 94 66 2b 	jmp	0x56cc	; 0x56cc <mousekey_send>
}
    5924:	cf 91       	pop	r28
    5926:	08 95       	ret

00005928 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    5928:	ea ee       	ldi	r30, 0xEA	; 234
    592a:	f3 e0       	ldi	r31, 0x03	; 3
    592c:	85 e0       	ldi	r24, 0x05	; 5
    592e:	df 01       	movw	r26, r30
    5930:	1d 92       	st	X+, r1
    5932:	8a 95       	dec	r24
    5934:	e9 f7       	brne	.-6      	; 0x5930 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    5936:	10 92 e9 03 	sts	0x03E9, r1
    mousekey_accel = 0;
    593a:	10 92 ef 03 	sts	0x03EF, r1
    593e:	08 95       	ret

00005940 <command_console_help>:
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    5940:	86 e1       	ldi	r24, 0x16	; 22
    5942:	9c e0       	ldi	r25, 0x0C	; 12
    5944:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <xputs>

00005948 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    5948:	8c e4       	ldi	r24, 0x4C	; 76
    594a:	9c e0       	ldi	r25, 0x0C	; 12
    594c:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    5950:	1f 92       	push	r1
    5952:	81 e0       	ldi	r24, 0x01	; 1
    5954:	8f 93       	push	r24
    5956:	1f 92       	push	r1
    5958:	85 e0       	ldi	r24, 0x05	; 5
    595a:	8f 93       	push	r24
    595c:	87 e4       	ldi	r24, 0x47	; 71
    595e:	9d e0       	ldi	r25, 0x0D	; 13
    5960:	9f 93       	push	r25
    5962:	8f 93       	push	r24
    5964:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    5968:	0f 90       	pop	r0
    596a:	0f 90       	pop	r0
    596c:	0f 90       	pop	r0
    596e:	0f 90       	pop	r0
    5970:	0f 90       	pop	r0
    5972:	0f 90       	pop	r0
    5974:	08 95       	ret

00005976 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    5976:	83 30       	cpi	r24, 0x03	; 3
    5978:	f1 f1       	breq	.+124    	; 0x59f6 <mousekey_param_inc+0x80>
    597a:	30 f4       	brcc	.+12     	; 0x5988 <mousekey_param_inc+0x12>
    597c:	81 30       	cpi	r24, 0x01	; 1
    597e:	69 f0       	breq	.+26     	; 0x599a <mousekey_param_inc+0x24>
    5980:	82 30       	cpi	r24, 0x02	; 2
    5982:	09 f0       	breq	.+2      	; 0x5986 <mousekey_param_inc+0x10>
    5984:	9b c0       	rjmp	.+310    	; 0x5abc <mousekey_param_inc+0x146>
    5986:	20 c0       	rjmp	.+64     	; 0x59c8 <mousekey_param_inc+0x52>
    5988:	85 30       	cpi	r24, 0x05	; 5
    598a:	09 f4       	brne	.+2      	; 0x598e <mousekey_param_inc+0x18>
    598c:	62 c0       	rjmp	.+196    	; 0x5a52 <mousekey_param_inc+0xdc>
    598e:	08 f4       	brcc	.+2      	; 0x5992 <mousekey_param_inc+0x1c>
    5990:	49 c0       	rjmp	.+146    	; 0x5a24 <mousekey_param_inc+0xae>
    5992:	86 30       	cpi	r24, 0x06	; 6
    5994:	09 f0       	breq	.+2      	; 0x5998 <mousekey_param_inc+0x22>
    5996:	92 c0       	rjmp	.+292    	; 0x5abc <mousekey_param_inc+0x146>
    5998:	73 c0       	rjmp	.+230    	; 0x5a80 <mousekey_param_inc+0x10a>
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    599a:	20 91 29 01 	lds	r18, 0x0129
    599e:	86 2f       	mov	r24, r22
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	82 0f       	add	r24, r18
    59a4:	91 1d       	adc	r25, r1
    59a6:	8f 3f       	cpi	r24, 0xFF	; 255
    59a8:	91 05       	cpc	r25, r1
    59aa:	20 f4       	brcc	.+8      	; 0x59b4 <mousekey_param_inc+0x3e>
                mk_delay += inc;
    59ac:	62 0f       	add	r22, r18
    59ae:	60 93 29 01 	sts	0x0129, r22
    59b2:	03 c0       	rjmp	.+6      	; 0x59ba <mousekey_param_inc+0x44>
            else
                mk_delay = UINT8_MAX;
    59b4:	8f ef       	ldi	r24, 0xFF	; 255
    59b6:	80 93 29 01 	sts	0x0129, r24
            PRINT_SET_VAL(mk_delay);
    59ba:	80 91 29 01 	lds	r24, 0x0129
    59be:	1f 92       	push	r1
    59c0:	8f 93       	push	r24
    59c2:	8d e4       	ldi	r24, 0x4D	; 77
    59c4:	9e e0       	ldi	r25, 0x0E	; 14
    59c6:	72 c0       	rjmp	.+228    	; 0x5aac <mousekey_param_inc+0x136>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    59c8:	20 91 28 01 	lds	r18, 0x0128
    59cc:	86 2f       	mov	r24, r22
    59ce:	90 e0       	ldi	r25, 0x00	; 0
    59d0:	82 0f       	add	r24, r18
    59d2:	91 1d       	adc	r25, r1
    59d4:	8f 3f       	cpi	r24, 0xFF	; 255
    59d6:	91 05       	cpc	r25, r1
    59d8:	20 f4       	brcc	.+8      	; 0x59e2 <mousekey_param_inc+0x6c>
                mk_interval += inc;
    59da:	62 0f       	add	r22, r18
    59dc:	60 93 28 01 	sts	0x0128, r22
    59e0:	03 c0       	rjmp	.+6      	; 0x59e8 <mousekey_param_inc+0x72>
            else
                mk_interval = UINT8_MAX;
    59e2:	8f ef       	ldi	r24, 0xFF	; 255
    59e4:	80 93 28 01 	sts	0x0128, r24
            PRINT_SET_VAL(mk_interval);
    59e8:	80 91 28 01 	lds	r24, 0x0128
    59ec:	1f 92       	push	r1
    59ee:	8f 93       	push	r24
    59f0:	8c e5       	ldi	r24, 0x5C	; 92
    59f2:	9e e0       	ldi	r25, 0x0E	; 14
    59f4:	5b c0       	rjmp	.+182    	; 0x5aac <mousekey_param_inc+0x136>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    59f6:	20 91 27 01 	lds	r18, 0x0127
    59fa:	86 2f       	mov	r24, r22
    59fc:	90 e0       	ldi	r25, 0x00	; 0
    59fe:	82 0f       	add	r24, r18
    5a00:	91 1d       	adc	r25, r1
    5a02:	8f 3f       	cpi	r24, 0xFF	; 255
    5a04:	91 05       	cpc	r25, r1
    5a06:	20 f4       	brcc	.+8      	; 0x5a10 <mousekey_param_inc+0x9a>
                mk_max_speed += inc;
    5a08:	62 0f       	add	r22, r18
    5a0a:	60 93 27 01 	sts	0x0127, r22
    5a0e:	03 c0       	rjmp	.+6      	; 0x5a16 <mousekey_param_inc+0xa0>
            else
                mk_max_speed = UINT8_MAX;
    5a10:	8f ef       	ldi	r24, 0xFF	; 255
    5a12:	80 93 27 01 	sts	0x0127, r24
            PRINT_SET_VAL(mk_max_speed);
    5a16:	80 91 27 01 	lds	r24, 0x0127
    5a1a:	1f 92       	push	r1
    5a1c:	8f 93       	push	r24
    5a1e:	8e e6       	ldi	r24, 0x6E	; 110
    5a20:	9e e0       	ldi	r25, 0x0E	; 14
    5a22:	44 c0       	rjmp	.+136    	; 0x5aac <mousekey_param_inc+0x136>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    5a24:	20 91 26 01 	lds	r18, 0x0126
    5a28:	86 2f       	mov	r24, r22
    5a2a:	90 e0       	ldi	r25, 0x00	; 0
    5a2c:	82 0f       	add	r24, r18
    5a2e:	91 1d       	adc	r25, r1
    5a30:	8f 3f       	cpi	r24, 0xFF	; 255
    5a32:	91 05       	cpc	r25, r1
    5a34:	20 f4       	brcc	.+8      	; 0x5a3e <mousekey_param_inc+0xc8>
                mk_time_to_max += inc;
    5a36:	62 0f       	add	r22, r18
    5a38:	60 93 26 01 	sts	0x0126, r22
    5a3c:	03 c0       	rjmp	.+6      	; 0x5a44 <mousekey_param_inc+0xce>
            else
                mk_time_to_max = UINT8_MAX;
    5a3e:	8f ef       	ldi	r24, 0xFF	; 255
    5a40:	80 93 26 01 	sts	0x0126, r24
            PRINT_SET_VAL(mk_time_to_max);
    5a44:	80 91 26 01 	lds	r24, 0x0126
    5a48:	1f 92       	push	r1
    5a4a:	8f 93       	push	r24
    5a4c:	81 e8       	ldi	r24, 0x81	; 129
    5a4e:	9e e0       	ldi	r25, 0x0E	; 14
    5a50:	2d c0       	rjmp	.+90     	; 0x5aac <mousekey_param_inc+0x136>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    5a52:	20 91 25 01 	lds	r18, 0x0125
    5a56:	86 2f       	mov	r24, r22
    5a58:	90 e0       	ldi	r25, 0x00	; 0
    5a5a:	82 0f       	add	r24, r18
    5a5c:	91 1d       	adc	r25, r1
    5a5e:	8f 3f       	cpi	r24, 0xFF	; 255
    5a60:	91 05       	cpc	r25, r1
    5a62:	20 f4       	brcc	.+8      	; 0x5a6c <mousekey_param_inc+0xf6>
                mk_wheel_max_speed += inc;
    5a64:	62 0f       	add	r22, r18
    5a66:	60 93 25 01 	sts	0x0125, r22
    5a6a:	03 c0       	rjmp	.+6      	; 0x5a72 <mousekey_param_inc+0xfc>
            else
                mk_wheel_max_speed = UINT8_MAX;
    5a6c:	8f ef       	ldi	r24, 0xFF	; 255
    5a6e:	80 93 25 01 	sts	0x0125, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    5a72:	80 91 25 01 	lds	r24, 0x0125
    5a76:	1f 92       	push	r1
    5a78:	8f 93       	push	r24
    5a7a:	86 e9       	ldi	r24, 0x96	; 150
    5a7c:	9e e0       	ldi	r25, 0x0E	; 14
    5a7e:	16 c0       	rjmp	.+44     	; 0x5aac <mousekey_param_inc+0x136>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    5a80:	20 91 24 01 	lds	r18, 0x0124
    5a84:	86 2f       	mov	r24, r22
    5a86:	90 e0       	ldi	r25, 0x00	; 0
    5a88:	82 0f       	add	r24, r18
    5a8a:	91 1d       	adc	r25, r1
    5a8c:	8f 3f       	cpi	r24, 0xFF	; 255
    5a8e:	91 05       	cpc	r25, r1
    5a90:	20 f4       	brcc	.+8      	; 0x5a9a <mousekey_param_inc+0x124>
                mk_wheel_time_to_max += inc;
    5a92:	62 0f       	add	r22, r18
    5a94:	60 93 24 01 	sts	0x0124, r22
    5a98:	03 c0       	rjmp	.+6      	; 0x5aa0 <mousekey_param_inc+0x12a>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    5a9a:	8f ef       	ldi	r24, 0xFF	; 255
    5a9c:	80 93 24 01 	sts	0x0124, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    5aa0:	80 91 24 01 	lds	r24, 0x0124
    5aa4:	1f 92       	push	r1
    5aa6:	8f 93       	push	r24
    5aa8:	8f ea       	ldi	r24, 0xAF	; 175
    5aaa:	9e e0       	ldi	r25, 0x0E	; 14
    5aac:	9f 93       	push	r25
    5aae:	8f 93       	push	r24
    5ab0:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            break;
    5ab4:	0f 90       	pop	r0
    5ab6:	0f 90       	pop	r0
    5ab8:	0f 90       	pop	r0
    5aba:	0f 90       	pop	r0
    5abc:	08 95       	ret

00005abe <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    5abe:	83 30       	cpi	r24, 0x03	; 3
    5ac0:	89 f1       	breq	.+98     	; 0x5b24 <mousekey_param_dec+0x66>
    5ac2:	30 f4       	brcc	.+12     	; 0x5ad0 <mousekey_param_dec+0x12>
    5ac4:	81 30       	cpi	r24, 0x01	; 1
    5ac6:	61 f0       	breq	.+24     	; 0x5ae0 <mousekey_param_dec+0x22>
    5ac8:	82 30       	cpi	r24, 0x02	; 2
    5aca:	09 f0       	breq	.+2      	; 0x5ace <mousekey_param_dec+0x10>
    5acc:	76 c0       	rjmp	.+236    	; 0x5bba <mousekey_param_dec+0xfc>
    5ace:	19 c0       	rjmp	.+50     	; 0x5b02 <mousekey_param_dec+0x44>
    5ad0:	85 30       	cpi	r24, 0x05	; 5
    5ad2:	09 f4       	brne	.+2      	; 0x5ad6 <mousekey_param_dec+0x18>
    5ad4:	49 c0       	rjmp	.+146    	; 0x5b68 <mousekey_param_dec+0xaa>
    5ad6:	b8 f1       	brcs	.+110    	; 0x5b46 <mousekey_param_dec+0x88>
    5ad8:	86 30       	cpi	r24, 0x06	; 6
    5ada:	09 f0       	breq	.+2      	; 0x5ade <mousekey_param_dec+0x20>
    5adc:	6e c0       	rjmp	.+220    	; 0x5bba <mousekey_param_dec+0xfc>
    5ade:	55 c0       	rjmp	.+170    	; 0x5b8a <mousekey_param_dec+0xcc>
        case 1:
            if (mk_delay > dec)
    5ae0:	80 91 29 01 	lds	r24, 0x0129
    5ae4:	68 17       	cp	r22, r24
    5ae6:	20 f4       	brcc	.+8      	; 0x5af0 <mousekey_param_dec+0x32>
                mk_delay -= dec;
    5ae8:	86 1b       	sub	r24, r22
    5aea:	80 93 29 01 	sts	0x0129, r24
    5aee:	02 c0       	rjmp	.+4      	; 0x5af4 <mousekey_param_dec+0x36>
            else
                mk_delay = 0;
    5af0:	10 92 29 01 	sts	0x0129, r1
            PRINT_SET_VAL(mk_delay);
    5af4:	80 91 29 01 	lds	r24, 0x0129
    5af8:	1f 92       	push	r1
    5afa:	8f 93       	push	r24
    5afc:	8a ec       	ldi	r24, 0xCA	; 202
    5afe:	9e e0       	ldi	r25, 0x0E	; 14
    5b00:	54 c0       	rjmp	.+168    	; 0x5baa <mousekey_param_dec+0xec>
            break;
        case 2:
            if (mk_interval > dec)
    5b02:	80 91 28 01 	lds	r24, 0x0128
    5b06:	68 17       	cp	r22, r24
    5b08:	20 f4       	brcc	.+8      	; 0x5b12 <mousekey_param_dec+0x54>
                mk_interval -= dec;
    5b0a:	86 1b       	sub	r24, r22
    5b0c:	80 93 28 01 	sts	0x0128, r24
    5b10:	02 c0       	rjmp	.+4      	; 0x5b16 <mousekey_param_dec+0x58>
            else
                mk_interval = 0;
    5b12:	10 92 28 01 	sts	0x0128, r1
            PRINT_SET_VAL(mk_interval);
    5b16:	80 91 28 01 	lds	r24, 0x0128
    5b1a:	1f 92       	push	r1
    5b1c:	8f 93       	push	r24
    5b1e:	89 ed       	ldi	r24, 0xD9	; 217
    5b20:	9e e0       	ldi	r25, 0x0E	; 14
    5b22:	43 c0       	rjmp	.+134    	; 0x5baa <mousekey_param_dec+0xec>
            break;
        case 3:
            if (mk_max_speed > dec)
    5b24:	80 91 27 01 	lds	r24, 0x0127
    5b28:	68 17       	cp	r22, r24
    5b2a:	20 f4       	brcc	.+8      	; 0x5b34 <mousekey_param_dec+0x76>
                mk_max_speed -= dec;
    5b2c:	86 1b       	sub	r24, r22
    5b2e:	80 93 27 01 	sts	0x0127, r24
    5b32:	02 c0       	rjmp	.+4      	; 0x5b38 <mousekey_param_dec+0x7a>
            else
                mk_max_speed = 0;
    5b34:	10 92 27 01 	sts	0x0127, r1
            PRINT_SET_VAL(mk_max_speed);
    5b38:	80 91 27 01 	lds	r24, 0x0127
    5b3c:	1f 92       	push	r1
    5b3e:	8f 93       	push	r24
    5b40:	8b ee       	ldi	r24, 0xEB	; 235
    5b42:	9e e0       	ldi	r25, 0x0E	; 14
    5b44:	32 c0       	rjmp	.+100    	; 0x5baa <mousekey_param_dec+0xec>
            break;
        case 4:
            if (mk_time_to_max > dec)
    5b46:	80 91 26 01 	lds	r24, 0x0126
    5b4a:	68 17       	cp	r22, r24
    5b4c:	20 f4       	brcc	.+8      	; 0x5b56 <mousekey_param_dec+0x98>
                mk_time_to_max -= dec;
    5b4e:	86 1b       	sub	r24, r22
    5b50:	80 93 26 01 	sts	0x0126, r24
    5b54:	02 c0       	rjmp	.+4      	; 0x5b5a <mousekey_param_dec+0x9c>
            else
                mk_time_to_max = 0;
    5b56:	10 92 26 01 	sts	0x0126, r1
            PRINT_SET_VAL(mk_time_to_max);
    5b5a:	80 91 26 01 	lds	r24, 0x0126
    5b5e:	1f 92       	push	r1
    5b60:	8f 93       	push	r24
    5b62:	8e ef       	ldi	r24, 0xFE	; 254
    5b64:	9e e0       	ldi	r25, 0x0E	; 14
    5b66:	21 c0       	rjmp	.+66     	; 0x5baa <mousekey_param_dec+0xec>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    5b68:	80 91 25 01 	lds	r24, 0x0125
    5b6c:	68 17       	cp	r22, r24
    5b6e:	20 f4       	brcc	.+8      	; 0x5b78 <mousekey_param_dec+0xba>
                mk_wheel_max_speed -= dec;
    5b70:	86 1b       	sub	r24, r22
    5b72:	80 93 25 01 	sts	0x0125, r24
    5b76:	02 c0       	rjmp	.+4      	; 0x5b7c <mousekey_param_dec+0xbe>
            else
                mk_wheel_max_speed = 0;
    5b78:	10 92 25 01 	sts	0x0125, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    5b7c:	80 91 25 01 	lds	r24, 0x0125
    5b80:	1f 92       	push	r1
    5b82:	8f 93       	push	r24
    5b84:	83 e1       	ldi	r24, 0x13	; 19
    5b86:	9f e0       	ldi	r25, 0x0F	; 15
    5b88:	10 c0       	rjmp	.+32     	; 0x5baa <mousekey_param_dec+0xec>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    5b8a:	80 91 24 01 	lds	r24, 0x0124
    5b8e:	68 17       	cp	r22, r24
    5b90:	20 f4       	brcc	.+8      	; 0x5b9a <mousekey_param_dec+0xdc>
                mk_wheel_time_to_max -= dec;
    5b92:	86 1b       	sub	r24, r22
    5b94:	80 93 24 01 	sts	0x0124, r24
    5b98:	02 c0       	rjmp	.+4      	; 0x5b9e <mousekey_param_dec+0xe0>
            else
                mk_wheel_time_to_max = 0;
    5b9a:	10 92 24 01 	sts	0x0124, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    5b9e:	80 91 24 01 	lds	r24, 0x0124
    5ba2:	1f 92       	push	r1
    5ba4:	8f 93       	push	r24
    5ba6:	8c e2       	ldi	r24, 0x2C	; 44
    5ba8:	9f e0       	ldi	r25, 0x0F	; 15
    5baa:	9f 93       	push	r25
    5bac:	8f 93       	push	r24
    5bae:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            break;
    5bb2:	0f 90       	pop	r0
    5bb4:	0f 90       	pop	r0
    5bb6:	0f 90       	pop	r0
    5bb8:	0f 90       	pop	r0
    5bba:	08 95       	ret

00005bbc <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    5bbc:	cf 93       	push	r28
    5bbe:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    5bc0:	1f 92       	push	r1
    5bc2:	8f 93       	push	r24
    5bc4:	2d e3       	ldi	r18, 0x3D	; 61
    5bc6:	3c e0       	ldi	r19, 0x0C	; 12
    5bc8:	3f 93       	push	r19
    5bca:	2f 93       	push	r18
    5bcc:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    default_layer_set(1UL<<layer);
    5bd0:	61 e0       	ldi	r22, 0x01	; 1
    5bd2:	70 e0       	ldi	r23, 0x00	; 0
    5bd4:	80 e0       	ldi	r24, 0x00	; 0
    5bd6:	90 e0       	ldi	r25, 0x00	; 0
    5bd8:	04 c0       	rjmp	.+8      	; 0x5be2 <switch_default_layer+0x26>
    5bda:	66 0f       	add	r22, r22
    5bdc:	77 1f       	adc	r23, r23
    5bde:	88 1f       	adc	r24, r24
    5be0:	99 1f       	adc	r25, r25
    5be2:	ca 95       	dec	r28
    5be4:	d2 f7       	brpl	.-12     	; 0x5bda <switch_default_layer+0x1e>
    5be6:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <default_layer_set>
    clear_keyboard();
    5bea:	0f 90       	pop	r0
    5bec:	0f 90       	pop	r0
    5bee:	0f 90       	pop	r0
    5bf0:	0f 90       	pop	r0
}
    5bf2:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    5bf4:	0c 94 ea 21 	jmp	0x43d4	; 0x43d4 <clear_keyboard>

00005bf8 <command_common>:
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    5bf8:	87 32       	cpi	r24, 0x27	; 39
    5bfa:	f8 f4       	brcc	.+62     	; 0x5c3a <command_common+0x42>
    5bfc:	8e 31       	cpi	r24, 0x1E	; 30
    5bfe:	08 f0       	brcs	.+2      	; 0x5c02 <command_common+0xa>
    5c00:	fd c0       	rjmp	.+506    	; 0x5dfc <command_common+0x204>
    5c02:	8e 30       	cpi	r24, 0x0E	; 14
    5c04:	09 f4       	brne	.+2      	; 0x5c08 <command_common+0x10>
    5c06:	81 c0       	rjmp	.+258    	; 0x5d0a <command_common+0x112>
    5c08:	48 f4       	brcc	.+18     	; 0x5c1c <command_common+0x24>
    5c0a:	87 30       	cpi	r24, 0x07	; 7
    5c0c:	09 f4       	brne	.+2      	; 0x5c10 <command_common+0x18>
    5c0e:	53 c0       	rjmp	.+166    	; 0x5cb6 <command_common+0xbe>
    5c10:	8b 30       	cpi	r24, 0x0B	; 11
    5c12:	61 f1       	breq	.+88     	; 0x5c6c <command_common+0x74>
    5c14:	86 30       	cpi	r24, 0x06	; 6
    5c16:	09 f0       	breq	.+2      	; 0x5c1a <command_common+0x22>
    5c18:	f7 c0       	rjmp	.+494    	; 0x5e08 <command_common+0x210>
    5c1a:	2b c0       	rjmp	.+86     	; 0x5c72 <command_common+0x7a>
    5c1c:	86 31       	cpi	r24, 0x16	; 22
    5c1e:	09 f4       	brne	.+2      	; 0x5c22 <command_common+0x2a>
    5c20:	b4 c0       	rjmp	.+360    	; 0x5d8a <command_common+0x192>
    5c22:	20 f4       	brcc	.+8      	; 0x5c2c <command_common+0x34>
    5c24:	80 31       	cpi	r24, 0x10	; 16
    5c26:	09 f0       	breq	.+2      	; 0x5c2a <command_common+0x32>
    5c28:	ef c0       	rjmp	.+478    	; 0x5e08 <command_common+0x210>
    5c2a:	85 c0       	rjmp	.+266    	; 0x5d36 <command_common+0x13e>
    5c2c:	89 31       	cpi	r24, 0x19	; 25
    5c2e:	09 f4       	brne	.+2      	; 0x5c32 <command_common+0x3a>
    5c30:	95 c0       	rjmp	.+298    	; 0x5d5c <command_common+0x164>
    5c32:	8b 31       	cpi	r24, 0x1B	; 27
    5c34:	09 f0       	breq	.+2      	; 0x5c38 <command_common+0x40>
    5c36:	e8 c0       	rjmp	.+464    	; 0x5e08 <command_common+0x210>
    5c38:	4e c0       	rjmp	.+156    	; 0x5cd6 <command_common+0xde>
    5c3a:	88 33       	cpi	r24, 0x38	; 56
    5c3c:	b9 f0       	breq	.+46     	; 0x5c6c <command_common+0x74>
    5c3e:	50 f4       	brcc	.+20     	; 0x5c54 <command_common+0x5c>
    5c40:	89 32       	cpi	r24, 0x29	; 41
    5c42:	09 f4       	brne	.+2      	; 0x5c46 <command_common+0x4e>
    5c44:	d9 c0       	rjmp	.+434    	; 0x5df8 <command_common+0x200>
    5c46:	85 33       	cpi	r24, 0x35	; 53
    5c48:	09 f4       	brne	.+2      	; 0x5c4c <command_common+0x54>
    5c4a:	d6 c0       	rjmp	.+428    	; 0x5df8 <command_common+0x200>
    5c4c:	87 32       	cpi	r24, 0x27	; 39
    5c4e:	09 f0       	breq	.+2      	; 0x5c52 <command_common+0x5a>
    5c50:	db c0       	rjmp	.+438    	; 0x5e08 <command_common+0x210>
    5c52:	d2 c0       	rjmp	.+420    	; 0x5df8 <command_common+0x200>
    5c54:	83 34       	cpi	r24, 0x43	; 67
    5c56:	09 f4       	brne	.+2      	; 0x5c5a <command_common+0x62>
    5c58:	cf c0       	rjmp	.+414    	; 0x5df8 <command_common+0x200>
    5c5a:	20 f4       	brcc	.+8      	; 0x5c64 <command_common+0x6c>
    5c5c:	8a 33       	cpi	r24, 0x3A	; 58
    5c5e:	08 f4       	brcc	.+2      	; 0x5c62 <command_common+0x6a>
    5c60:	d3 c0       	rjmp	.+422    	; 0x5e08 <command_common+0x210>
    5c62:	ce c0       	rjmp	.+412    	; 0x5e00 <command_common+0x208>
    5c64:	88 34       	cpi	r24, 0x48	; 72
    5c66:	09 f0       	breq	.+2      	; 0x5c6a <command_common+0x72>
    5c68:	cf c0       	rjmp	.+414    	; 0x5e08 <command_common+0x210>
    5c6a:	13 c0       	rjmp	.+38     	; 0x5c92 <command_common+0x9a>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    5c6c:	83 e8       	ldi	r24, 0x83	; 131
    5c6e:	9b e0       	ldi	r25, 0x0B	; 11
    5c70:	5e c0       	rjmp	.+188    	; 0x5d2e <command_common+0x136>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    5c72:	80 91 e1 03 	lds	r24, 0x03E1
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    5c76:	81 7f       	andi	r24, 0xF1	; 241
    5c78:	8e 7f       	andi	r24, 0xFE	; 254
    5c7a:	80 93 e1 03 	sts	0x03E1, r24
            command_console_help();
    5c7e:	0e 94 a0 2c 	call	0x5940	; 0x5940 <command_console_help>
            print("C> ");
    5c82:	8f e8       	ldi	r24, 0x8F	; 143
    5c84:	99 e0       	ldi	r25, 0x09	; 9
    5c86:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
            command_state = CONSOLE;
    5c8a:	81 e0       	ldi	r24, 0x01	; 1
    5c8c:	80 93 f0 03 	sts	0x03F0, r24
            break;
    5c90:	08 95       	ret
        case KC_PAUSE:
            clear_keyboard();
    5c92:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <clear_keyboard>
            print("\n\nbootloader... ");
    5c96:	83 e9       	ldi	r24, 0x93	; 147
    5c98:	99 e0       	ldi	r25, 0x09	; 9
    5c9a:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    5c9e:	2f ef       	ldi	r18, 0xFF	; 255
    5ca0:	89 e6       	ldi	r24, 0x69	; 105
    5ca2:	98 e1       	ldi	r25, 0x18	; 24
    5ca4:	21 50       	subi	r18, 0x01	; 1
    5ca6:	80 40       	sbci	r24, 0x00	; 0
    5ca8:	90 40       	sbci	r25, 0x00	; 0
    5caa:	e1 f7       	brne	.-8      	; 0x5ca4 <command_common+0xac>
    5cac:	00 c0       	rjmp	.+0      	; 0x5cae <command_common+0xb6>
    5cae:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    5cb0:	0e 94 04 29 	call	0x5208	; 0x5208 <bootloader_jump>
    5cb4:	3e c0       	rjmp	.+124    	; 0x5d32 <command_common+0x13a>
            break;
        case KC_D:
            if (debug_enable) {
    5cb6:	80 91 e1 03 	lds	r24, 0x03E1
    5cba:	80 ff       	sbrs	r24, 0
    5cbc:	09 c0       	rjmp	.+18     	; 0x5cd0 <command_common+0xd8>
                print("\ndebug: off\n");
    5cbe:	84 ea       	ldi	r24, 0xA4	; 164
    5cc0:	99 e0       	ldi	r25, 0x09	; 9
    5cc2:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
                debug_matrix   = false;
    5cc6:	80 91 e1 03 	lds	r24, 0x03E1
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    5cca:	81 7f       	andi	r24, 0xF1	; 241
    5ccc:	8e 7f       	andi	r24, 0xFE	; 254
    5cce:	17 c0       	rjmp	.+46     	; 0x5cfe <command_common+0x106>
            } else {
                print("\ndebug: on\n");
    5cd0:	81 eb       	ldi	r24, 0xB1	; 177
    5cd2:	99 e0       	ldi	r25, 0x09	; 9
    5cd4:	0f c0       	rjmp	.+30     	; 0x5cf4 <command_common+0xfc>
                debug_enable   = true;
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    5cd6:	90 91 e1 03 	lds	r25, 0x03E1
    5cda:	91 fb       	bst	r25, 1
    5cdc:	88 27       	eor	r24, r24
    5cde:	80 f9       	bld	r24, 0
    5ce0:	21 e0       	ldi	r18, 0x01	; 1
    5ce2:	82 27       	eor	r24, r18
    5ce4:	80 fb       	bst	r24, 0
    5ce6:	91 f9       	bld	r25, 1
    5ce8:	90 93 e1 03 	sts	0x03E1, r25
            if (debug_matrix) {
    5cec:	88 23       	and	r24, r24
    5cee:	51 f0       	breq	.+20     	; 0x5d04 <command_common+0x10c>
                print("\nmatrix: on\n");
    5cf0:	8d eb       	ldi	r24, 0xBD	; 189
    5cf2:	99 e0       	ldi	r25, 0x09	; 9
    5cf4:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
                debug_enable = true;
    5cf8:	80 91 e1 03 	lds	r24, 0x03E1
    5cfc:	81 60       	ori	r24, 0x01	; 1
    5cfe:	80 93 e1 03 	sts	0x03E1, r24
    5d02:	17 c0       	rjmp	.+46     	; 0x5d32 <command_common+0x13a>
            } else {
                print("\nmatrix: off\n");
    5d04:	8a ec       	ldi	r24, 0xCA	; 202
    5d06:	99 e0       	ldi	r25, 0x09	; 9
    5d08:	12 c0       	rjmp	.+36     	; 0x5d2e <command_common+0x136>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    5d0a:	90 91 e1 03 	lds	r25, 0x03E1
    5d0e:	92 fb       	bst	r25, 2
    5d10:	88 27       	eor	r24, r24
    5d12:	80 f9       	bld	r24, 0
    5d14:	21 e0       	ldi	r18, 0x01	; 1
    5d16:	82 27       	eor	r24, r18
    5d18:	80 fb       	bst	r24, 0
    5d1a:	92 f9       	bld	r25, 2
    5d1c:	90 93 e1 03 	sts	0x03E1, r25
            if (debug_keyboard) {
    5d20:	88 23       	and	r24, r24
    5d22:	19 f0       	breq	.+6      	; 0x5d2a <command_common+0x132>
                print("\nkeyboard: on\n");
    5d24:	88 ed       	ldi	r24, 0xD8	; 216
    5d26:	99 e0       	ldi	r25, 0x09	; 9
    5d28:	e5 cf       	rjmp	.-54     	; 0x5cf4 <command_common+0xfc>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    5d2a:	87 ee       	ldi	r24, 0xE7	; 231
    5d2c:	99 e0       	ldi	r25, 0x09	; 9
    5d2e:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    5d32:	81 e0       	ldi	r24, 0x01	; 1
    5d34:	08 95       	ret
            } else {
                print("\nkeyboard: off\n");
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    5d36:	90 91 e1 03 	lds	r25, 0x03E1
    5d3a:	93 fb       	bst	r25, 3
    5d3c:	88 27       	eor	r24, r24
    5d3e:	80 f9       	bld	r24, 0
    5d40:	21 e0       	ldi	r18, 0x01	; 1
    5d42:	82 27       	eor	r24, r18
    5d44:	80 fb       	bst	r24, 0
    5d46:	93 f9       	bld	r25, 3
    5d48:	90 93 e1 03 	sts	0x03E1, r25
            if (debug_mouse) {
    5d4c:	88 23       	and	r24, r24
    5d4e:	19 f0       	breq	.+6      	; 0x5d56 <command_common+0x15e>
                print("\nmouse: on\n");
    5d50:	87 ef       	ldi	r24, 0xF7	; 247
    5d52:	99 e0       	ldi	r25, 0x09	; 9
    5d54:	cf cf       	rjmp	.-98     	; 0x5cf4 <command_common+0xfc>
                debug_enable = true;
            } else {
                print("\nmouse: off\n");
    5d56:	83 e0       	ldi	r24, 0x03	; 3
    5d58:	9a e0       	ldi	r25, 0x0A	; 10
    5d5a:	e9 cf       	rjmp	.-46     	; 0x5d2e <command_common+0x136>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    5d5c:	80 e1       	ldi	r24, 0x10	; 16
    5d5e:	9a e0       	ldi	r25, 0x0A	; 10
    5d60:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    5d64:	8f e1       	ldi	r24, 0x1F	; 31
    5d66:	9a e0       	ldi	r25, 0x0A	; 10
    5d68:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    5d6c:	87 e4       	ldi	r24, 0x47	; 71
    5d6e:	9a e0       	ldi	r25, 0x0A	; 10
    5d70:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    5d74:	89 e8       	ldi	r24, 0x89	; 137
    5d76:	9a e0       	ldi	r25, 0x0A	; 10
    5d78:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
            /* build options */
            print("OPTIONS:"
    5d7c:	86 eb       	ldi	r24, 0xB6	; 182
    5d7e:	9a e0       	ldi	r25, 0x0A	; 10
    5d80:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    5d84:	8c ee       	ldi	r24, 0xEC	; 236
    5d86:	9a e0       	ldi	r25, 0x0A	; 10
    5d88:	d2 cf       	rjmp	.-92     	; 0x5d2e <command_common+0x136>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    5d8a:	88 e1       	ldi	r24, 0x18	; 24
    5d8c:	9b e0       	ldi	r25, 0x0B	; 11
    5d8e:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
            print_val_hex8(host_keyboard_leds());
    5d92:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <host_keyboard_leds>
    5d96:	1f 92       	push	r1
    5d98:	8f 93       	push	r24
    5d9a:	86 e2       	ldi	r24, 0x26	; 38
    5d9c:	9b e0       	ldi	r25, 0x0B	; 11
    5d9e:	9f 93       	push	r25
    5da0:	8f 93       	push	r24
    5da2:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            print_val_hex8(keyboard_protocol);
    5da6:	80 91 21 01 	lds	r24, 0x0121
    5daa:	1f 92       	push	r1
    5dac:	8f 93       	push	r24
    5dae:	80 e4       	ldi	r24, 0x40	; 64
    5db0:	9b e0       	ldi	r25, 0x0B	; 11
    5db2:	9f 93       	push	r25
    5db4:	8f 93       	push	r24
    5db6:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
            print_val_hex8(keyboard_idle);
    5dba:	80 91 62 03 	lds	r24, 0x0362
    5dbe:	1f 92       	push	r1
    5dc0:	8f 93       	push	r24
    5dc2:	87 e5       	ldi	r24, 0x57	; 87
    5dc4:	9b e0       	ldi	r25, 0x0B	; 11
    5dc6:	9f 93       	push	r25
    5dc8:	8f 93       	push	r24
    5dca:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
#endif
            print_val_hex32(timer_read32());
    5dce:	0e 94 9f 28 	call	0x513e	; 0x513e <timer_read32>
    5dd2:	9f 93       	push	r25
    5dd4:	8f 93       	push	r24
    5dd6:	7f 93       	push	r23
    5dd8:	6f 93       	push	r22
    5dda:	8a e6       	ldi	r24, 0x6A	; 106
    5ddc:	9b e0       	ldi	r25, 0x0B	; 11
    5dde:	9f 93       	push	r25
    5de0:	8f 93       	push	r24
    5de2:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    5de6:	8d b7       	in	r24, 0x3d	; 61
    5de8:	9e b7       	in	r25, 0x3e	; 62
    5dea:	42 96       	adiw	r24, 0x12	; 18
    5dec:	0f b6       	in	r0, 0x3f	; 63
    5dee:	f8 94       	cli
    5df0:	9e bf       	out	0x3e, r25	; 62
    5df2:	0f be       	out	0x3f, r0	; 63
    5df4:	8d bf       	out	0x3d, r24	; 61
    5df6:	9d cf       	rjmp	.-198    	; 0x5d32 <command_common+0x13a>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    5df8:	80 e0       	ldi	r24, 0x00	; 0
    5dfa:	03 c0       	rjmp	.+6      	; 0x5e02 <command_common+0x20a>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    5dfc:	8d 51       	subi	r24, 0x1D	; 29
    5dfe:	01 c0       	rjmp	.+2      	; 0x5e02 <command_common+0x20a>
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    5e00:	89 53       	subi	r24, 0x39	; 57
    5e02:	0e 94 de 2d 	call	0x5bbc	; 0x5bbc <switch_default_layer>
    5e06:	95 cf       	rjmp	.-214    	; 0x5d32 <command_common+0x13a>
            break;
        default:
            print("?");
    5e08:	81 e8       	ldi	r24, 0x81	; 129
    5e0a:	9b e0       	ldi	r25, 0x0B	; 11
    5e0c:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
            return false;
    5e10:	80 e0       	ldi	r24, 0x00	; 0
    }
    return true;
}
    5e12:	08 95       	ret

00005e14 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    5e14:	cf 93       	push	r28
    5e16:	c8 2f       	mov	r28, r24
    switch (command_state) {
    5e18:	80 91 f0 03 	lds	r24, 0x03F0
    5e1c:	81 30       	cpi	r24, 0x01	; 1
    5e1e:	71 f0       	breq	.+28     	; 0x5e3c <command_proc+0x28>
    5e20:	20 f0       	brcs	.+8      	; 0x5e2a <command_proc+0x16>
    5e22:	82 30       	cpi	r24, 0x02	; 2
    5e24:	09 f0       	breq	.+2      	; 0x5e28 <command_proc+0x14>
    5e26:	42 c1       	rjmp	.+644    	; 0x60ac <command_proc+0x298>
    5e28:	47 c0       	rjmp	.+142    	; 0x5eb8 <command_proc+0xa4>
        case ONESHOT:
            if (!IS_COMMAND())
    5e2a:	a0 91 22 01 	lds	r26, 0x0122
    5e2e:	b0 91 23 01 	lds	r27, 0x0123
    5e32:	8c 91       	ld	r24, X
    5e34:	82 31       	cpi	r24, 0x12	; 18
    5e36:	09 f0       	breq	.+2      	; 0x5e3a <command_proc+0x26>
    5e38:	3b c1       	rjmp	.+630    	; 0x60b0 <command_proc+0x29c>
    5e3a:	07 c0       	rjmp	.+14     	; 0x5e4a <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    5e3c:	a0 91 22 01 	lds	r26, 0x0122
    5e40:	b0 91 23 01 	lds	r27, 0x0123
    5e44:	8c 91       	ld	r24, X
    5e46:	82 31       	cpi	r24, 0x12	; 18
    5e48:	49 f4       	brne	.+18     	; 0x5e5c <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    5e4a:	8c 2f       	mov	r24, r28
    5e4c:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <command_extra>
    5e50:	81 11       	cpse	r24, r1
    5e52:	2e c0       	rjmp	.+92     	; 0x5eb0 <command_proc+0x9c>
    5e54:	8c 2f       	mov	r24, r28
    5e56:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <command_common>
    5e5a:	2c c0       	rjmp	.+88     	; 0x5eb4 <command_proc+0xa0>
            else
                return (command_console_extra(code) || command_console(code));
    5e5c:	8c 2f       	mov	r24, r28
    5e5e:	0e 94 9e 11 	call	0x233c	; 0x233c <command_console_extra>
    5e62:	81 11       	cpse	r24, r1
    5e64:	25 c0       	rjmp	.+74     	; 0x5eb0 <command_proc+0x9c>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    5e66:	c4 31       	cpi	r28, 0x14	; 20
    5e68:	89 f0       	breq	.+34     	; 0x5e8c <command_proc+0x78>
    5e6a:	28 f4       	brcc	.+10     	; 0x5e76 <command_proc+0x62>
    5e6c:	cb 30       	cpi	r28, 0x0B	; 11
    5e6e:	39 f0       	breq	.+14     	; 0x5e7e <command_proc+0x6a>
    5e70:	c0 31       	cpi	r28, 0x10	; 16
    5e72:	c9 f4       	brne	.+50     	; 0x5ea6 <command_proc+0x92>
    5e74:	0e c0       	rjmp	.+28     	; 0x5e92 <command_proc+0x7e>
    5e76:	c9 32       	cpi	r28, 0x29	; 41
    5e78:	49 f0       	breq	.+18     	; 0x5e8c <command_proc+0x78>
    5e7a:	c8 33       	cpi	r28, 0x38	; 56
    5e7c:	a1 f4       	brne	.+40     	; 0x5ea6 <command_proc+0x92>
        case KC_H:
        case KC_SLASH: /* ? */
            command_console_help();
    5e7e:	0e 94 a0 2c 	call	0x5940	; 0x5940 <command_console_help>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    5e82:	82 e4       	ldi	r24, 0x42	; 66
    5e84:	9c e0       	ldi	r25, 0x0C	; 12
    5e86:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    5e8a:	12 c0       	rjmp	.+36     	; 0x5eb0 <command_proc+0x9c>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    5e8c:	10 92 f0 03 	sts	0x03F0, r1
    5e90:	11 c1       	rjmp	.+546    	; 0x60b4 <command_proc+0x2a0>
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    5e92:	0e 94 a4 2c 	call	0x5948	; 0x5948 <mousekey_console_help>
            print("M> ");
    5e96:	86 e4       	ldi	r24, 0x46	; 70
    5e98:	9c e0       	ldi	r25, 0x0C	; 12
    5e9a:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
            command_state = MOUSEKEY;
    5e9e:	82 e0       	ldi	r24, 0x02	; 2
    5ea0:	80 93 f0 03 	sts	0x03F0, r24
    5ea4:	05 c0       	rjmp	.+10     	; 0x5eb0 <command_proc+0x9c>
            return true;
#endif
        default:
            print("?");
    5ea6:	8a e4       	ldi	r24, 0x4A	; 74
    5ea8:	9c e0       	ldi	r25, 0x0C	; 12
    5eaa:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    5eae:	02 c1       	rjmp	.+516    	; 0x60b4 <command_proc+0x2a0>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5eb0:	81 e0       	ldi	r24, 0x01	; 1
    5eb2:	90 e0       	ldi	r25, 0x00	; 0
    5eb4:	81 70       	andi	r24, 0x01	; 1
    5eb6:	01 c1       	rjmp	.+514    	; 0x60ba <command_proc+0x2a6>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5eb8:	c4 32       	cpi	r28, 0x24	; 36
    5eba:	80 f4       	brcc	.+32     	; 0x5edc <command_proc+0xc8>
    5ebc:	ce 31       	cpi	r28, 0x1E	; 30
    5ebe:	08 f0       	brcs	.+2      	; 0x5ec2 <command_proc+0xae>
    5ec0:	ac c0       	rjmp	.+344    	; 0x601a <command_proc+0x206>
    5ec2:	cb 30       	cpi	r28, 0x0B	; 11
    5ec4:	f9 f0       	breq	.+62     	; 0x5f04 <command_proc+0xf0>
    5ec6:	20 f4       	brcc	.+8      	; 0x5ed0 <command_proc+0xbc>
    5ec8:	c7 30       	cpi	r28, 0x07	; 7
    5eca:	09 f0       	breq	.+2      	; 0x5ece <command_proc+0xba>
    5ecc:	d5 c0       	rjmp	.+426    	; 0x6078 <command_proc+0x264>
    5ece:	be c0       	rjmp	.+380    	; 0x604c <command_proc+0x238>
    5ed0:	c3 31       	cpi	r28, 0x13	; 19
    5ed2:	51 f1       	breq	.+84     	; 0x5f28 <command_proc+0x114>
    5ed4:	c4 31       	cpi	r28, 0x14	; 20
    5ed6:	09 f0       	breq	.+2      	; 0x5eda <command_proc+0xc6>
    5ed8:	cf c0       	rjmp	.+414    	; 0x6078 <command_proc+0x264>
    5eda:	17 c0       	rjmp	.+46     	; 0x5f0a <command_proc+0xf6>
    5edc:	cb 34       	cpi	r28, 0x4B	; 75
    5ede:	09 f4       	brne	.+2      	; 0x5ee2 <command_proc+0xce>
    5ee0:	a9 c0       	rjmp	.+338    	; 0x6034 <command_proc+0x220>
    5ee2:	30 f4       	brcc	.+12     	; 0x5ef0 <command_proc+0xdc>
    5ee4:	c9 32       	cpi	r28, 0x29	; 41
    5ee6:	89 f0       	breq	.+34     	; 0x5f0a <command_proc+0xf6>
    5ee8:	c8 33       	cpi	r28, 0x38	; 56
    5eea:	09 f0       	breq	.+2      	; 0x5eee <command_proc+0xda>
    5eec:	c5 c0       	rjmp	.+394    	; 0x6078 <command_proc+0x264>
    5eee:	0a c0       	rjmp	.+20     	; 0x5f04 <command_proc+0xf0>
    5ef0:	c1 35       	cpi	r28, 0x51	; 81
    5ef2:	09 f4       	brne	.+2      	; 0x5ef6 <command_proc+0xe2>
    5ef4:	9d c0       	rjmp	.+314    	; 0x6030 <command_proc+0x21c>
    5ef6:	c2 35       	cpi	r28, 0x52	; 82
    5ef8:	09 f4       	brne	.+2      	; 0x5efc <command_proc+0xe8>
    5efa:	98 c0       	rjmp	.+304    	; 0x602c <command_proc+0x218>
    5efc:	ce 34       	cpi	r28, 0x4E	; 78
    5efe:	09 f0       	breq	.+2      	; 0x5f02 <command_proc+0xee>
    5f00:	bb c0       	rjmp	.+374    	; 0x6078 <command_proc+0x264>
    5f02:	9e c0       	rjmp	.+316    	; 0x6040 <command_proc+0x22c>
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    5f04:	0e 94 a4 2c 	call	0x5948	; 0x5948 <mousekey_console_help>
    5f08:	ba c0       	rjmp	.+372    	; 0x607e <command_proc+0x26a>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    5f0a:	80 91 f1 03 	lds	r24, 0x03F1
    5f0e:	88 23       	and	r24, r24
    5f10:	19 f0       	breq	.+6      	; 0x5f18 <command_proc+0x104>
                mousekey_param = 0;
    5f12:	10 92 f1 03 	sts	0x03F1, r1
    5f16:	b3 c0       	rjmp	.+358    	; 0x607e <command_proc+0x26a>
            } else {
                print("C> ");
    5f18:	85 e9       	ldi	r24, 0x95	; 149
    5f1a:	9d e0       	ldi	r25, 0x0D	; 13
    5f1c:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
                command_state = CONSOLE;
    5f20:	81 e0       	ldi	r24, 0x01	; 1
    5f22:	80 93 f0 03 	sts	0x03F0, r24
    5f26:	c9 c0       	rjmp	.+402    	; 0x60ba <command_proc+0x2a6>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    5f28:	81 eb       	ldi	r24, 0xB1	; 177
    5f2a:	9d e0       	ldi	r25, 0x0D	; 13
    5f2c:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    5f30:	8f eb       	ldi	r24, 0xBF	; 191
    5f32:	9d e0       	ldi	r25, 0x0D	; 13
    5f34:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    5f38:	80 91 29 01 	lds	r24, 0x0129
    5f3c:	1f 92       	push	r1
    5f3e:	8f 93       	push	r24
    5f40:	81 ed       	ldi	r24, 0xD1	; 209
    5f42:	9d e0       	ldi	r25, 0x0D	; 13
    5f44:	9f 93       	push	r25
    5f46:	8f 93       	push	r24
    5f48:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    5f4c:	84 ed       	ldi	r24, 0xD4	; 212
    5f4e:	9d e0       	ldi	r25, 0x0D	; 13
    5f50:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5f54:	86 ed       	ldi	r24, 0xD6	; 214
    5f56:	9d e0       	ldi	r25, 0x0D	; 13
    5f58:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    5f5c:	80 91 28 01 	lds	r24, 0x0128
    5f60:	1f 92       	push	r1
    5f62:	8f 93       	push	r24
    5f64:	88 ee       	ldi	r24, 0xE8	; 232
    5f66:	9d e0       	ldi	r25, 0x0D	; 13
    5f68:	9f 93       	push	r25
    5f6a:	8f 93       	push	r24
    5f6c:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    5f70:	8b ee       	ldi	r24, 0xEB	; 235
    5f72:	9d e0       	ldi	r25, 0x0D	; 13
    5f74:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    5f78:	8d ee       	ldi	r24, 0xED	; 237
    5f7a:	9d e0       	ldi	r25, 0x0D	; 13
    5f7c:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    5f80:	80 91 27 01 	lds	r24, 0x0127
    5f84:	1f 92       	push	r1
    5f86:	8f 93       	push	r24
    5f88:	8c ef       	ldi	r24, 0xFC	; 252
    5f8a:	9d e0       	ldi	r25, 0x0D	; 13
    5f8c:	9f 93       	push	r25
    5f8e:	8f 93       	push	r24
    5f90:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    5f94:	8f ef       	ldi	r24, 0xFF	; 255
    5f96:	9d e0       	ldi	r25, 0x0D	; 13
    5f98:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    5f9c:	81 e0       	ldi	r24, 0x01	; 1
    5f9e:	9e e0       	ldi	r25, 0x0E	; 14
    5fa0:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    5fa4:	80 91 26 01 	lds	r24, 0x0126
    5fa8:	1f 92       	push	r1
    5faa:	8f 93       	push	r24
    5fac:	82 e1       	ldi	r24, 0x12	; 18
    5fae:	9e e0       	ldi	r25, 0x0E	; 14
    5fb0:	9f 93       	push	r25
    5fb2:	8f 93       	push	r24
    5fb4:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    5fb8:	85 e1       	ldi	r24, 0x15	; 21
    5fba:	9e e0       	ldi	r25, 0x0E	; 14
    5fbc:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5fc0:	87 e1       	ldi	r24, 0x17	; 23
    5fc2:	9e e0       	ldi	r25, 0x0E	; 14
    5fc4:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    5fc8:	80 91 25 01 	lds	r24, 0x0125
    5fcc:	1f 92       	push	r1
    5fce:	8f 93       	push	r24
    5fd0:	8c e2       	ldi	r24, 0x2C	; 44
    5fd2:	9e e0       	ldi	r25, 0x0E	; 14
    5fd4:	9f 93       	push	r25
    5fd6:	8f 93       	push	r24
    5fd8:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    5fdc:	8f e2       	ldi	r24, 0x2F	; 47
    5fde:	9e e0       	ldi	r25, 0x0E	; 14
    5fe0:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5fe4:	81 e3       	ldi	r24, 0x31	; 49
    5fe6:	9e e0       	ldi	r25, 0x0E	; 14
    5fe8:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    5fec:	80 91 24 01 	lds	r24, 0x0124
    5ff0:	1f 92       	push	r1
    5ff2:	8f 93       	push	r24
    5ff4:	88 e4       	ldi	r24, 0x48	; 72
    5ff6:	9e e0       	ldi	r25, 0x0E	; 14
    5ff8:	9f 93       	push	r25
    5ffa:	8f 93       	push	r24
    5ffc:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    6000:	8b e4       	ldi	r24, 0x4B	; 75
    6002:	9e e0       	ldi	r25, 0x0E	; 14
    6004:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    6008:	8d b7       	in	r24, 0x3d	; 61
    600a:	9e b7       	in	r25, 0x3e	; 62
    600c:	48 96       	adiw	r24, 0x18	; 24
    600e:	0f b6       	in	r0, 0x3f	; 63
    6010:	f8 94       	cli
    6012:	9e bf       	out	0x3e, r25	; 62
    6014:	0f be       	out	0x3f, r0	; 63
    6016:	8d bf       	out	0x3d, r24	; 61
    6018:	32 c0       	rjmp	.+100    	; 0x607e <command_proc+0x26a>
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    601a:	ce 51       	subi	r28, 0x1E	; 30
    601c:	ec 2f       	mov	r30, r28
    601e:	f0 e0       	ldi	r31, 0x00	; 0
    6020:	ec 5f       	subi	r30, 0xFC	; 252
    6022:	fd 4f       	sbci	r31, 0xFD	; 253
    6024:	80 81       	ld	r24, Z
    6026:	80 93 f1 03 	sts	0x03F1, r24
    602a:	29 c0       	rjmp	.+82     	; 0x607e <command_proc+0x26a>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    602c:	61 e0       	ldi	r22, 0x01	; 1
    602e:	03 c0       	rjmp	.+6      	; 0x6036 <command_proc+0x222>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    6030:	61 e0       	ldi	r22, 0x01	; 1
    6032:	07 c0       	rjmp	.+14     	; 0x6042 <command_proc+0x22e>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    6034:	6a e0       	ldi	r22, 0x0A	; 10
    6036:	80 91 f1 03 	lds	r24, 0x03F1
    603a:	0e 94 bb 2c 	call	0x5976	; 0x5976 <mousekey_param_inc>
    603e:	1f c0       	rjmp	.+62     	; 0x607e <command_proc+0x26a>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    6040:	6a e0       	ldi	r22, 0x0A	; 10
    6042:	80 91 f1 03 	lds	r24, 0x03F1
    6046:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <mousekey_param_dec>
    604a:	19 c0       	rjmp	.+50     	; 0x607e <command_proc+0x26a>
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    604c:	8e e1       	ldi	r24, 0x1E	; 30
    604e:	80 93 29 01 	sts	0x0129, r24
            mk_interval = MOUSEKEY_INTERVAL;
    6052:	82 e3       	ldi	r24, 0x32	; 50
    6054:	80 93 28 01 	sts	0x0128, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    6058:	96 e0       	ldi	r25, 0x06	; 6
    605a:	90 93 27 01 	sts	0x0127, r25
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    605e:	80 93 26 01 	sts	0x0126, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    6062:	88 e0       	ldi	r24, 0x08	; 8
    6064:	80 93 25 01 	sts	0x0125, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    6068:	8c e3       	ldi	r24, 0x3C	; 60
    606a:	80 93 24 01 	sts	0x0124, r24
            print("set default\n");
    606e:	89 e9       	ldi	r24, 0x99	; 153
    6070:	9d e0       	ldi	r25, 0x0D	; 13
    6072:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
    6076:	03 c0       	rjmp	.+6      	; 0x607e <command_proc+0x26a>
            break;
        default:
            print("?");
    6078:	86 ea       	ldi	r24, 0xA6	; 166
    607a:	9d e0       	ldi	r25, 0x0D	; 13
    607c:	13 c0       	rjmp	.+38     	; 0x60a4 <command_proc+0x290>
            return false;
    }
    if (mousekey_param) {
    607e:	80 91 f1 03 	lds	r24, 0x03F1
    6082:	88 23       	and	r24, r24
    6084:	69 f0       	breq	.+26     	; 0x60a0 <command_proc+0x28c>
        xprintf("M%d> ", mousekey_param);
    6086:	1f 92       	push	r1
    6088:	8f 93       	push	r24
    608a:	88 ea       	ldi	r24, 0xA8	; 168
    608c:	9d e0       	ldi	r25, 0x0D	; 13
    608e:	9f 93       	push	r25
    6090:	8f 93       	push	r24
    6092:	0e 94 91 08 	call	0x1122	; 0x1122 <__xprintf>
    6096:	0f 90       	pop	r0
    6098:	0f 90       	pop	r0
    609a:	0f 90       	pop	r0
    609c:	0f 90       	pop	r0
    609e:	04 c0       	rjmp	.+8      	; 0x60a8 <command_proc+0x294>
    } else {
        print("M>" );
    60a0:	8e ea       	ldi	r24, 0xAE	; 174
    60a2:	9d e0       	ldi	r25, 0x0D	; 13
    60a4:	0e 94 f8 07 	call	0xff0	; 0xff0 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    60a8:	81 e0       	ldi	r24, 0x01	; 1
    60aa:	07 c0       	rjmp	.+14     	; 0x60ba <command_proc+0x2a6>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    60ac:	10 92 f0 03 	sts	0x03F0, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    60b0:	80 e0       	ldi	r24, 0x00	; 0
    60b2:	03 c0       	rjmp	.+6      	; 0x60ba <command_proc+0x2a6>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    60b4:	80 e0       	ldi	r24, 0x00	; 0
    60b6:	90 e0       	ldi	r25, 0x00	; 0
    60b8:	fd ce       	rjmp	.-518    	; 0x5eb4 <command_proc+0xa0>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    60ba:	cf 91       	pop	r28
    60bc:	08 95       	ret

000060be <__fixsfsi>:
    60be:	04 d0       	rcall	.+8      	; 0x60c8 <__fixunssfsi>
    60c0:	68 94       	set
    60c2:	b1 11       	cpse	r27, r1
    60c4:	8d c0       	rjmp	.+282    	; 0x61e0 <__fp_szero>
    60c6:	08 95       	ret

000060c8 <__fixunssfsi>:
    60c8:	70 d0       	rcall	.+224    	; 0x61aa <__fp_splitA>
    60ca:	88 f0       	brcs	.+34     	; 0x60ee <__fixunssfsi+0x26>
    60cc:	9f 57       	subi	r25, 0x7F	; 127
    60ce:	90 f0       	brcs	.+36     	; 0x60f4 <__fixunssfsi+0x2c>
    60d0:	b9 2f       	mov	r27, r25
    60d2:	99 27       	eor	r25, r25
    60d4:	b7 51       	subi	r27, 0x17	; 23
    60d6:	a0 f0       	brcs	.+40     	; 0x6100 <__fixunssfsi+0x38>
    60d8:	d1 f0       	breq	.+52     	; 0x610e <__fixunssfsi+0x46>
    60da:	66 0f       	add	r22, r22
    60dc:	77 1f       	adc	r23, r23
    60de:	88 1f       	adc	r24, r24
    60e0:	99 1f       	adc	r25, r25
    60e2:	1a f0       	brmi	.+6      	; 0x60ea <__fixunssfsi+0x22>
    60e4:	ba 95       	dec	r27
    60e6:	c9 f7       	brne	.-14     	; 0x60da <__fixunssfsi+0x12>
    60e8:	12 c0       	rjmp	.+36     	; 0x610e <__fixunssfsi+0x46>
    60ea:	b1 30       	cpi	r27, 0x01	; 1
    60ec:	81 f0       	breq	.+32     	; 0x610e <__fixunssfsi+0x46>
    60ee:	77 d0       	rcall	.+238    	; 0x61de <__fp_zero>
    60f0:	b1 e0       	ldi	r27, 0x01	; 1
    60f2:	08 95       	ret
    60f4:	74 c0       	rjmp	.+232    	; 0x61de <__fp_zero>
    60f6:	67 2f       	mov	r22, r23
    60f8:	78 2f       	mov	r23, r24
    60fa:	88 27       	eor	r24, r24
    60fc:	b8 5f       	subi	r27, 0xF8	; 248
    60fe:	39 f0       	breq	.+14     	; 0x610e <__fixunssfsi+0x46>
    6100:	b9 3f       	cpi	r27, 0xF9	; 249
    6102:	cc f3       	brlt	.-14     	; 0x60f6 <__fixunssfsi+0x2e>
    6104:	86 95       	lsr	r24
    6106:	77 95       	ror	r23
    6108:	67 95       	ror	r22
    610a:	b3 95       	inc	r27
    610c:	d9 f7       	brne	.-10     	; 0x6104 <__fixunssfsi+0x3c>
    610e:	3e f4       	brtc	.+14     	; 0x611e <__fixunssfsi+0x56>
    6110:	90 95       	com	r25
    6112:	80 95       	com	r24
    6114:	70 95       	com	r23
    6116:	61 95       	neg	r22
    6118:	7f 4f       	sbci	r23, 0xFF	; 255
    611a:	8f 4f       	sbci	r24, 0xFF	; 255
    611c:	9f 4f       	sbci	r25, 0xFF	; 255
    611e:	08 95       	ret

00006120 <__floatunsisf>:
    6120:	e8 94       	clt
    6122:	09 c0       	rjmp	.+18     	; 0x6136 <__floatsisf+0x12>

00006124 <__floatsisf>:
    6124:	97 fb       	bst	r25, 7
    6126:	3e f4       	brtc	.+14     	; 0x6136 <__floatsisf+0x12>
    6128:	90 95       	com	r25
    612a:	80 95       	com	r24
    612c:	70 95       	com	r23
    612e:	61 95       	neg	r22
    6130:	7f 4f       	sbci	r23, 0xFF	; 255
    6132:	8f 4f       	sbci	r24, 0xFF	; 255
    6134:	9f 4f       	sbci	r25, 0xFF	; 255
    6136:	99 23       	and	r25, r25
    6138:	a9 f0       	breq	.+42     	; 0x6164 <__floatsisf+0x40>
    613a:	f9 2f       	mov	r31, r25
    613c:	96 e9       	ldi	r25, 0x96	; 150
    613e:	bb 27       	eor	r27, r27
    6140:	93 95       	inc	r25
    6142:	f6 95       	lsr	r31
    6144:	87 95       	ror	r24
    6146:	77 95       	ror	r23
    6148:	67 95       	ror	r22
    614a:	b7 95       	ror	r27
    614c:	f1 11       	cpse	r31, r1
    614e:	f8 cf       	rjmp	.-16     	; 0x6140 <__floatsisf+0x1c>
    6150:	fa f4       	brpl	.+62     	; 0x6190 <__floatsisf+0x6c>
    6152:	bb 0f       	add	r27, r27
    6154:	11 f4       	brne	.+4      	; 0x615a <__floatsisf+0x36>
    6156:	60 ff       	sbrs	r22, 0
    6158:	1b c0       	rjmp	.+54     	; 0x6190 <__floatsisf+0x6c>
    615a:	6f 5f       	subi	r22, 0xFF	; 255
    615c:	7f 4f       	sbci	r23, 0xFF	; 255
    615e:	8f 4f       	sbci	r24, 0xFF	; 255
    6160:	9f 4f       	sbci	r25, 0xFF	; 255
    6162:	16 c0       	rjmp	.+44     	; 0x6190 <__floatsisf+0x6c>
    6164:	88 23       	and	r24, r24
    6166:	11 f0       	breq	.+4      	; 0x616c <__floatsisf+0x48>
    6168:	96 e9       	ldi	r25, 0x96	; 150
    616a:	11 c0       	rjmp	.+34     	; 0x618e <__floatsisf+0x6a>
    616c:	77 23       	and	r23, r23
    616e:	21 f0       	breq	.+8      	; 0x6178 <__floatsisf+0x54>
    6170:	9e e8       	ldi	r25, 0x8E	; 142
    6172:	87 2f       	mov	r24, r23
    6174:	76 2f       	mov	r23, r22
    6176:	05 c0       	rjmp	.+10     	; 0x6182 <__floatsisf+0x5e>
    6178:	66 23       	and	r22, r22
    617a:	71 f0       	breq	.+28     	; 0x6198 <__floatsisf+0x74>
    617c:	96 e8       	ldi	r25, 0x86	; 134
    617e:	86 2f       	mov	r24, r22
    6180:	70 e0       	ldi	r23, 0x00	; 0
    6182:	60 e0       	ldi	r22, 0x00	; 0
    6184:	2a f0       	brmi	.+10     	; 0x6190 <__floatsisf+0x6c>
    6186:	9a 95       	dec	r25
    6188:	66 0f       	add	r22, r22
    618a:	77 1f       	adc	r23, r23
    618c:	88 1f       	adc	r24, r24
    618e:	da f7       	brpl	.-10     	; 0x6186 <__floatsisf+0x62>
    6190:	88 0f       	add	r24, r24
    6192:	96 95       	lsr	r25
    6194:	87 95       	ror	r24
    6196:	97 f9       	bld	r25, 7
    6198:	08 95       	ret

0000619a <__fp_split3>:
    619a:	57 fd       	sbrc	r21, 7
    619c:	90 58       	subi	r25, 0x80	; 128
    619e:	44 0f       	add	r20, r20
    61a0:	55 1f       	adc	r21, r21
    61a2:	59 f0       	breq	.+22     	; 0x61ba <__fp_splitA+0x10>
    61a4:	5f 3f       	cpi	r21, 0xFF	; 255
    61a6:	71 f0       	breq	.+28     	; 0x61c4 <__fp_splitA+0x1a>
    61a8:	47 95       	ror	r20

000061aa <__fp_splitA>:
    61aa:	88 0f       	add	r24, r24
    61ac:	97 fb       	bst	r25, 7
    61ae:	99 1f       	adc	r25, r25
    61b0:	61 f0       	breq	.+24     	; 0x61ca <__fp_splitA+0x20>
    61b2:	9f 3f       	cpi	r25, 0xFF	; 255
    61b4:	79 f0       	breq	.+30     	; 0x61d4 <__fp_splitA+0x2a>
    61b6:	87 95       	ror	r24
    61b8:	08 95       	ret
    61ba:	12 16       	cp	r1, r18
    61bc:	13 06       	cpc	r1, r19
    61be:	14 06       	cpc	r1, r20
    61c0:	55 1f       	adc	r21, r21
    61c2:	f2 cf       	rjmp	.-28     	; 0x61a8 <__fp_split3+0xe>
    61c4:	46 95       	lsr	r20
    61c6:	f1 df       	rcall	.-30     	; 0x61aa <__fp_splitA>
    61c8:	08 c0       	rjmp	.+16     	; 0x61da <__fp_splitA+0x30>
    61ca:	16 16       	cp	r1, r22
    61cc:	17 06       	cpc	r1, r23
    61ce:	18 06       	cpc	r1, r24
    61d0:	99 1f       	adc	r25, r25
    61d2:	f1 cf       	rjmp	.-30     	; 0x61b6 <__fp_splitA+0xc>
    61d4:	86 95       	lsr	r24
    61d6:	71 05       	cpc	r23, r1
    61d8:	61 05       	cpc	r22, r1
    61da:	08 94       	sec
    61dc:	08 95       	ret

000061de <__fp_zero>:
    61de:	e8 94       	clt

000061e0 <__fp_szero>:
    61e0:	bb 27       	eor	r27, r27
    61e2:	66 27       	eor	r22, r22
    61e4:	77 27       	eor	r23, r23
    61e6:	cb 01       	movw	r24, r22
    61e8:	97 f9       	bld	r25, 7
    61ea:	08 95       	ret

000061ec <__mulsf3>:
    61ec:	0b d0       	rcall	.+22     	; 0x6204 <__mulsf3x>
    61ee:	78 c0       	rjmp	.+240    	; 0x62e0 <__fp_round>
    61f0:	69 d0       	rcall	.+210    	; 0x62c4 <__fp_pscA>
    61f2:	28 f0       	brcs	.+10     	; 0x61fe <__mulsf3+0x12>
    61f4:	6e d0       	rcall	.+220    	; 0x62d2 <__fp_pscB>
    61f6:	18 f0       	brcs	.+6      	; 0x61fe <__mulsf3+0x12>
    61f8:	95 23       	and	r25, r21
    61fa:	09 f0       	breq	.+2      	; 0x61fe <__mulsf3+0x12>
    61fc:	5a c0       	rjmp	.+180    	; 0x62b2 <__fp_inf>
    61fe:	5f c0       	rjmp	.+190    	; 0x62be <__fp_nan>
    6200:	11 24       	eor	r1, r1
    6202:	ee cf       	rjmp	.-36     	; 0x61e0 <__fp_szero>

00006204 <__mulsf3x>:
    6204:	ca df       	rcall	.-108    	; 0x619a <__fp_split3>
    6206:	a0 f3       	brcs	.-24     	; 0x61f0 <__mulsf3+0x4>

00006208 <__mulsf3_pse>:
    6208:	95 9f       	mul	r25, r21
    620a:	d1 f3       	breq	.-12     	; 0x6200 <__mulsf3+0x14>
    620c:	95 0f       	add	r25, r21
    620e:	50 e0       	ldi	r21, 0x00	; 0
    6210:	55 1f       	adc	r21, r21
    6212:	62 9f       	mul	r22, r18
    6214:	f0 01       	movw	r30, r0
    6216:	72 9f       	mul	r23, r18
    6218:	bb 27       	eor	r27, r27
    621a:	f0 0d       	add	r31, r0
    621c:	b1 1d       	adc	r27, r1
    621e:	63 9f       	mul	r22, r19
    6220:	aa 27       	eor	r26, r26
    6222:	f0 0d       	add	r31, r0
    6224:	b1 1d       	adc	r27, r1
    6226:	aa 1f       	adc	r26, r26
    6228:	64 9f       	mul	r22, r20
    622a:	66 27       	eor	r22, r22
    622c:	b0 0d       	add	r27, r0
    622e:	a1 1d       	adc	r26, r1
    6230:	66 1f       	adc	r22, r22
    6232:	82 9f       	mul	r24, r18
    6234:	22 27       	eor	r18, r18
    6236:	b0 0d       	add	r27, r0
    6238:	a1 1d       	adc	r26, r1
    623a:	62 1f       	adc	r22, r18
    623c:	73 9f       	mul	r23, r19
    623e:	b0 0d       	add	r27, r0
    6240:	a1 1d       	adc	r26, r1
    6242:	62 1f       	adc	r22, r18
    6244:	83 9f       	mul	r24, r19
    6246:	a0 0d       	add	r26, r0
    6248:	61 1d       	adc	r22, r1
    624a:	22 1f       	adc	r18, r18
    624c:	74 9f       	mul	r23, r20
    624e:	33 27       	eor	r19, r19
    6250:	a0 0d       	add	r26, r0
    6252:	61 1d       	adc	r22, r1
    6254:	23 1f       	adc	r18, r19
    6256:	84 9f       	mul	r24, r20
    6258:	60 0d       	add	r22, r0
    625a:	21 1d       	adc	r18, r1
    625c:	82 2f       	mov	r24, r18
    625e:	76 2f       	mov	r23, r22
    6260:	6a 2f       	mov	r22, r26
    6262:	11 24       	eor	r1, r1
    6264:	9f 57       	subi	r25, 0x7F	; 127
    6266:	50 40       	sbci	r21, 0x00	; 0
    6268:	8a f0       	brmi	.+34     	; 0x628c <__mulsf3_pse+0x84>
    626a:	e1 f0       	breq	.+56     	; 0x62a4 <__mulsf3_pse+0x9c>
    626c:	88 23       	and	r24, r24
    626e:	4a f0       	brmi	.+18     	; 0x6282 <__mulsf3_pse+0x7a>
    6270:	ee 0f       	add	r30, r30
    6272:	ff 1f       	adc	r31, r31
    6274:	bb 1f       	adc	r27, r27
    6276:	66 1f       	adc	r22, r22
    6278:	77 1f       	adc	r23, r23
    627a:	88 1f       	adc	r24, r24
    627c:	91 50       	subi	r25, 0x01	; 1
    627e:	50 40       	sbci	r21, 0x00	; 0
    6280:	a9 f7       	brne	.-22     	; 0x626c <__mulsf3_pse+0x64>
    6282:	9e 3f       	cpi	r25, 0xFE	; 254
    6284:	51 05       	cpc	r21, r1
    6286:	70 f0       	brcs	.+28     	; 0x62a4 <__mulsf3_pse+0x9c>
    6288:	14 c0       	rjmp	.+40     	; 0x62b2 <__fp_inf>
    628a:	aa cf       	rjmp	.-172    	; 0x61e0 <__fp_szero>
    628c:	5f 3f       	cpi	r21, 0xFF	; 255
    628e:	ec f3       	brlt	.-6      	; 0x628a <__mulsf3_pse+0x82>
    6290:	98 3e       	cpi	r25, 0xE8	; 232
    6292:	dc f3       	brlt	.-10     	; 0x628a <__mulsf3_pse+0x82>
    6294:	86 95       	lsr	r24
    6296:	77 95       	ror	r23
    6298:	67 95       	ror	r22
    629a:	b7 95       	ror	r27
    629c:	f7 95       	ror	r31
    629e:	e7 95       	ror	r30
    62a0:	9f 5f       	subi	r25, 0xFF	; 255
    62a2:	c1 f7       	brne	.-16     	; 0x6294 <__mulsf3_pse+0x8c>
    62a4:	fe 2b       	or	r31, r30
    62a6:	88 0f       	add	r24, r24
    62a8:	91 1d       	adc	r25, r1
    62aa:	96 95       	lsr	r25
    62ac:	87 95       	ror	r24
    62ae:	97 f9       	bld	r25, 7
    62b0:	08 95       	ret

000062b2 <__fp_inf>:
    62b2:	97 f9       	bld	r25, 7
    62b4:	9f 67       	ori	r25, 0x7F	; 127
    62b6:	80 e8       	ldi	r24, 0x80	; 128
    62b8:	70 e0       	ldi	r23, 0x00	; 0
    62ba:	60 e0       	ldi	r22, 0x00	; 0
    62bc:	08 95       	ret

000062be <__fp_nan>:
    62be:	9f ef       	ldi	r25, 0xFF	; 255
    62c0:	80 ec       	ldi	r24, 0xC0	; 192
    62c2:	08 95       	ret

000062c4 <__fp_pscA>:
    62c4:	00 24       	eor	r0, r0
    62c6:	0a 94       	dec	r0
    62c8:	16 16       	cp	r1, r22
    62ca:	17 06       	cpc	r1, r23
    62cc:	18 06       	cpc	r1, r24
    62ce:	09 06       	cpc	r0, r25
    62d0:	08 95       	ret

000062d2 <__fp_pscB>:
    62d2:	00 24       	eor	r0, r0
    62d4:	0a 94       	dec	r0
    62d6:	12 16       	cp	r1, r18
    62d8:	13 06       	cpc	r1, r19
    62da:	14 06       	cpc	r1, r20
    62dc:	05 06       	cpc	r0, r21
    62de:	08 95       	ret

000062e0 <__fp_round>:
    62e0:	09 2e       	mov	r0, r25
    62e2:	03 94       	inc	r0
    62e4:	00 0c       	add	r0, r0
    62e6:	11 f4       	brne	.+4      	; 0x62ec <__fp_round+0xc>
    62e8:	88 23       	and	r24, r24
    62ea:	52 f0       	brmi	.+20     	; 0x6300 <__fp_round+0x20>
    62ec:	bb 0f       	add	r27, r27
    62ee:	40 f4       	brcc	.+16     	; 0x6300 <__fp_round+0x20>
    62f0:	bf 2b       	or	r27, r31
    62f2:	11 f4       	brne	.+4      	; 0x62f8 <__fp_round+0x18>
    62f4:	60 ff       	sbrs	r22, 0
    62f6:	04 c0       	rjmp	.+8      	; 0x6300 <__fp_round+0x20>
    62f8:	6f 5f       	subi	r22, 0xFF	; 255
    62fa:	7f 4f       	sbci	r23, 0xFF	; 255
    62fc:	8f 4f       	sbci	r24, 0xFF	; 255
    62fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6300:	08 95       	ret

00006302 <__udivmodqi4>:
    6302:	99 1b       	sub	r25, r25
    6304:	79 e0       	ldi	r23, 0x09	; 9
    6306:	04 c0       	rjmp	.+8      	; 0x6310 <__udivmodqi4_ep>

00006308 <__udivmodqi4_loop>:
    6308:	99 1f       	adc	r25, r25
    630a:	96 17       	cp	r25, r22
    630c:	08 f0       	brcs	.+2      	; 0x6310 <__udivmodqi4_ep>
    630e:	96 1b       	sub	r25, r22

00006310 <__udivmodqi4_ep>:
    6310:	88 1f       	adc	r24, r24
    6312:	7a 95       	dec	r23
    6314:	c9 f7       	brne	.-14     	; 0x6308 <__udivmodqi4_loop>
    6316:	80 95       	com	r24
    6318:	08 95       	ret

0000631a <__udivmodhi4>:
    631a:	aa 1b       	sub	r26, r26
    631c:	bb 1b       	sub	r27, r27
    631e:	51 e1       	ldi	r21, 0x11	; 17
    6320:	07 c0       	rjmp	.+14     	; 0x6330 <__udivmodhi4_ep>

00006322 <__udivmodhi4_loop>:
    6322:	aa 1f       	adc	r26, r26
    6324:	bb 1f       	adc	r27, r27
    6326:	a6 17       	cp	r26, r22
    6328:	b7 07       	cpc	r27, r23
    632a:	10 f0       	brcs	.+4      	; 0x6330 <__udivmodhi4_ep>
    632c:	a6 1b       	sub	r26, r22
    632e:	b7 0b       	sbc	r27, r23

00006330 <__udivmodhi4_ep>:
    6330:	88 1f       	adc	r24, r24
    6332:	99 1f       	adc	r25, r25
    6334:	5a 95       	dec	r21
    6336:	a9 f7       	brne	.-22     	; 0x6322 <__udivmodhi4_loop>
    6338:	80 95       	com	r24
    633a:	90 95       	com	r25
    633c:	bc 01       	movw	r22, r24
    633e:	cd 01       	movw	r24, r26
    6340:	08 95       	ret

00006342 <__divmodhi4>:
    6342:	97 fb       	bst	r25, 7
    6344:	07 2e       	mov	r0, r23
    6346:	16 f4       	brtc	.+4      	; 0x634c <__divmodhi4+0xa>
    6348:	00 94       	com	r0
    634a:	07 d0       	rcall	.+14     	; 0x635a <__divmodhi4_neg1>
    634c:	77 fd       	sbrc	r23, 7
    634e:	09 d0       	rcall	.+18     	; 0x6362 <__divmodhi4_neg2>
    6350:	0e 94 8d 31 	call	0x631a	; 0x631a <__udivmodhi4>
    6354:	07 fc       	sbrc	r0, 7
    6356:	05 d0       	rcall	.+10     	; 0x6362 <__divmodhi4_neg2>
    6358:	3e f4       	brtc	.+14     	; 0x6368 <__divmodhi4_exit>

0000635a <__divmodhi4_neg1>:
    635a:	90 95       	com	r25
    635c:	81 95       	neg	r24
    635e:	9f 4f       	sbci	r25, 0xFF	; 255
    6360:	08 95       	ret

00006362 <__divmodhi4_neg2>:
    6362:	70 95       	com	r23
    6364:	61 95       	neg	r22
    6366:	7f 4f       	sbci	r23, 0xFF	; 255

00006368 <__divmodhi4_exit>:
    6368:	08 95       	ret

0000636a <__udivmodsi4>:
    636a:	a1 e2       	ldi	r26, 0x21	; 33
    636c:	1a 2e       	mov	r1, r26
    636e:	aa 1b       	sub	r26, r26
    6370:	bb 1b       	sub	r27, r27
    6372:	fd 01       	movw	r30, r26
    6374:	0d c0       	rjmp	.+26     	; 0x6390 <__udivmodsi4_ep>

00006376 <__udivmodsi4_loop>:
    6376:	aa 1f       	adc	r26, r26
    6378:	bb 1f       	adc	r27, r27
    637a:	ee 1f       	adc	r30, r30
    637c:	ff 1f       	adc	r31, r31
    637e:	a2 17       	cp	r26, r18
    6380:	b3 07       	cpc	r27, r19
    6382:	e4 07       	cpc	r30, r20
    6384:	f5 07       	cpc	r31, r21
    6386:	20 f0       	brcs	.+8      	; 0x6390 <__udivmodsi4_ep>
    6388:	a2 1b       	sub	r26, r18
    638a:	b3 0b       	sbc	r27, r19
    638c:	e4 0b       	sbc	r30, r20
    638e:	f5 0b       	sbc	r31, r21

00006390 <__udivmodsi4_ep>:
    6390:	66 1f       	adc	r22, r22
    6392:	77 1f       	adc	r23, r23
    6394:	88 1f       	adc	r24, r24
    6396:	99 1f       	adc	r25, r25
    6398:	1a 94       	dec	r1
    639a:	69 f7       	brne	.-38     	; 0x6376 <__udivmodsi4_loop>
    639c:	60 95       	com	r22
    639e:	70 95       	com	r23
    63a0:	80 95       	com	r24
    63a2:	90 95       	com	r25
    63a4:	9b 01       	movw	r18, r22
    63a6:	ac 01       	movw	r20, r24
    63a8:	bd 01       	movw	r22, r26
    63aa:	cf 01       	movw	r24, r30
    63ac:	08 95       	ret

000063ae <__tablejump2__>:
    63ae:	ee 0f       	add	r30, r30
    63b0:	ff 1f       	adc	r31, r31

000063b2 <__tablejump__>:
    63b2:	05 90       	lpm	r0, Z+
    63b4:	f4 91       	lpm	r31, Z
    63b6:	e0 2d       	mov	r30, r0
    63b8:	09 94       	ijmp

000063ba <strcmp>:
    63ba:	fb 01       	movw	r30, r22
    63bc:	dc 01       	movw	r26, r24
    63be:	8d 91       	ld	r24, X+
    63c0:	01 90       	ld	r0, Z+
    63c2:	80 19       	sub	r24, r0
    63c4:	01 10       	cpse	r0, r1
    63c6:	d9 f3       	breq	.-10     	; 0x63be <strcmp+0x4>
    63c8:	99 0b       	sbc	r25, r25
    63ca:	08 95       	ret

000063cc <__eerd_byte_usb1286>:
    63cc:	f9 99       	sbic	0x1f, 1	; 31
    63ce:	fe cf       	rjmp	.-4      	; 0x63cc <__eerd_byte_usb1286>
    63d0:	92 bd       	out	0x22, r25	; 34
    63d2:	81 bd       	out	0x21, r24	; 33
    63d4:	f8 9a       	sbi	0x1f, 0	; 31
    63d6:	99 27       	eor	r25, r25
    63d8:	80 b5       	in	r24, 0x20	; 32
    63da:	08 95       	ret

000063dc <__eewr_byte_usb1286>:
    63dc:	26 2f       	mov	r18, r22

000063de <__eewr_r18_usb1286>:
    63de:	f9 99       	sbic	0x1f, 1	; 31
    63e0:	fe cf       	rjmp	.-4      	; 0x63de <__eewr_r18_usb1286>
    63e2:	1f ba       	out	0x1f, r1	; 31
    63e4:	92 bd       	out	0x22, r25	; 34
    63e6:	81 bd       	out	0x21, r24	; 33
    63e8:	20 bd       	out	0x20, r18	; 32
    63ea:	0f b6       	in	r0, 0x3f	; 63
    63ec:	f8 94       	cli
    63ee:	fa 9a       	sbi	0x1f, 2	; 31
    63f0:	f9 9a       	sbi	0x1f, 1	; 31
    63f2:	0f be       	out	0x3f, r0	; 63
    63f4:	01 96       	adiw	r24, 0x01	; 1
    63f6:	08 95       	ret

000063f8 <_exit>:
    63f8:	f8 94       	cli

000063fa <__stop_program>:
    63fa:	ff cf       	rjmp	.-2      	; 0x63fa <__stop_program>
