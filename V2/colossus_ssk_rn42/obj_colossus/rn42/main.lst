   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.sendchar_func,"ax",@progbits
  13               	sendchar_func:
  14               	.LFB104:
  15               		.file 1 "rn42/main.c"
   1:rn42/main.c   **** #include <avr/io.h>
   2:rn42/main.c   **** #include <avr/power.h>
   3:rn42/main.c   **** #include <avr/wdt.h>
   4:rn42/main.c   **** #include "lufa.h"
   5:rn42/main.c   **** #include "print.h"
   6:rn42/main.c   **** #include "sendchar.h"
   7:rn42/main.c   **** #include "rn42.h"
   8:rn42/main.c   **** #include "rn42_task.h"
   9:rn42/main.c   **** #include "serial.h"
  10:rn42/main.c   **** #include "keyboard.h"
  11:rn42/main.c   **** #include "keycode.h"
  12:rn42/main.c   **** #include "action.h"
  13:rn42/main.c   **** #include "action_util.h"
  14:rn42/main.c   **** #include "wait.h"
  15:rn42/main.c   **** #include "suspend.h"
  16:rn42/main.c   **** 
  17:rn42/main.c   **** static int8_t sendchar_func(uint8_t c)
  18:rn42/main.c   **** {
  16               		.loc 1 18 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  19:rn42/main.c   ****     sendchar(c);    // LUFA
  23               		.loc 1 19 0
  24 0000 0E94 0000 		call sendchar
  25               	.LVL1:
  20:rn42/main.c   ****     return 0;
  21:rn42/main.c   **** }
  26               		.loc 1 21 0
  27 0004 80E0      		ldi r24,0
  28 0006 0895      		ret
  29               		.cfi_endproc
  30               	.LFE104:
  32               		.section	.text.startup.main,"ax",@progbits
  33               		.weak	main
  35               	main:
  36               	.LFB106:
  22:rn42/main.c   **** 
  23:rn42/main.c   **** static void SetupHardware(void)
  24:rn42/main.c   **** {
  25:rn42/main.c   ****     /* Disable watchdog if enabled by bootloader/fuses */
  26:rn42/main.c   ****     MCUSR &= ~(1 << WDRF);
  27:rn42/main.c   ****     wdt_disable();
  28:rn42/main.c   **** 
  29:rn42/main.c   ****     /* Disable clock division */
  30:rn42/main.c   ****     clock_prescale_set(clock_div_1);
  31:rn42/main.c   **** 
  32:rn42/main.c   ****     // Leonardo needs. Without this USB device is not recognized.
  33:rn42/main.c   ****     USB_Disable();
  34:rn42/main.c   **** 
  35:rn42/main.c   ****     USB_Init();
  36:rn42/main.c   **** 
  37:rn42/main.c   ****     // for Console_Task
  38:rn42/main.c   ****     USB_Device_EnableSOFEvents();
  39:rn42/main.c   ****     print_set_sendchar(sendchar_func);
  40:rn42/main.c   ****    
  41:rn42/main.c   **** 	// RN-42 Power Mosfet
  42:rn42/main.c   ****         DDRD  |= (1<<PD4);
  43:rn42/main.c   ****         PORTD &= ~(1<<PD4);
  44:rn42/main.c   **** 	
  45:rn42/main.c   **** 	// Fast Charge NPN, inital low
  46:rn42/main.c   ****         DDRE  |= (1<<PE4);
  47:rn42/main.c   ****         PORTE &= ~(1<<PE4);
  48:rn42/main.c   **** 	
  49:rn42/main.c   **** 	// USB power detect pin    
  50:rn42/main.c   **** 	DDRB &= ~(1<<4);
  51:rn42/main.c   **** }
  52:rn42/main.c   **** 
  53:rn42/main.c   **** int main(void)  __attribute__ ((weak));
  54:rn42/main.c   **** int main(void)
  55:rn42/main.c   **** {
  37               		.loc 1 55 0
  38               		.cfi_startproc
  39               	/* prologue: function */
  40               	/* frame size = 0 */
  41               	/* stack size = 0 */
  42               	.L__stack_usage = 0
  43               	.LBB31:
  44               	.LBB32:
  26:rn42/main.c   ****     MCUSR &= ~(1 << WDRF);
  45               		.loc 1 26 0
  46 0000 84B7      		in r24,0x34
  47 0002 877F      		andi r24,lo8(-9)
  48 0004 84BF      		out 0x34,r24
  27:rn42/main.c   ****     wdt_disable();
  49               		.loc 1 27 0
  50 0006 88E1      		ldi r24,lo8(24)
  51               	/* #APP */
  52               	 ;  27 "rn42/main.c" 1
  53 0008 0FB6      		in __tmp_reg__, __SREG__
  54 000a F894      		cli
  55 000c 8093 6000 		sts 96, r24
  56 0010 1092 6000 		sts 96, __zero_reg__
  57 0014 0FBE      		out __SREG__,__tmp_reg__
  58               		
  59               	 ;  0 "" 2
  60               	.LVL2:
  61               	/* #NOAPP */
  62               	.LBB33:
  63               	.LBB34:
  64               		.file 2 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h"
   1:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Copyright (c) 2006, 2007, 2008  Eric B. Weddington
   2:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****    All rights reserved.
   3:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
   4:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
   7:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****    * Redistributions in binary form must reproduce the above copyright
  10:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****      notice, this list of conditions and the following disclaimer in
  11:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****      the documentation and/or other materials provided with the
  12:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****      distribution.
  13:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****    * Neither the name of the copyright holders nor the names of
  14:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****      contributors may be used to endorse or promote products derived
  15:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****      from this software without specific prior written permission.
  16:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  17:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  18:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  19:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  20:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  21:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  22:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  23:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  24:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  25:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  26:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  27:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   POSSIBILITY OF SUCH DAMAGE. */
  28:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  29:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* $Id: power.h 2254 2011-09-26 15:06:50Z arcanum $ */
  30:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  31:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #ifndef _AVR_POWER_H_
  32:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define _AVR_POWER_H_   1
  33:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  34:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #include <avr/io.h>
  35:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #include <stdint.h>
  36:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  37:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  38:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /** \file */
  39:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /** \defgroup avr_power <avr/power.h>: Power Reduction Management
  40:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  41:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** \code #include <avr/power.h>\endcode
  42:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  43:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** Many AVRs contain a Power Reduction Register (PRR) or Registers (PRRx) that 
  44:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** allow you to reduce power consumption by disabling or enabling various on-board 
  45:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** peripherals as needed.
  46:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  47:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** There are many macros in this header file that provide an easy interface
  48:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** to enable or disable on-board peripherals to reduce power. See the table below.
  49:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  50:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** \note Not all AVR devices have a Power Reduction Register (for example
  51:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** the ATmega128). On those devices without a Power Reduction Register, these 
  52:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** macros are not available.
  53:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  54:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** \note Not all AVR devices contain the same peripherals (for example, the LCD
  55:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** interface), or they will be named differently (for example, USART and 
  56:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** USART0). Please consult your device's datasheet, or the header file, to 
  57:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** find out which macros are applicable to your device.
  58:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  59:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** */
  60:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  61:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  62:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /** \addtogroup avr_power
  63:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  64:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** \anchor avr_powermacros
  65:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** <small>
  66:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** <center>
  67:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** <table border="3">
  68:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
  69:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td width="10%"><strong>Power Macro</strong></td>
  70:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td width="15%"><strong>Description</strong></td>
  71:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td width="75%"><strong>Applicable for device</strong></td>
  72:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
  73:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  74:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
  75:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_adc_enable()</td>
  76:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Analog to Digital Converter module.</td>
  77:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  78:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
  79:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  80:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
  81:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_adc_disable()</td>
  82:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Analog to Digital Converter module.</td>
  83:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
  84:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
  85:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  86:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
  87:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_lcd_enable()</td>
  88:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the LCD module.</td>
  89:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  90:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
  91:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  92:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
  93:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_lcd_disable().</td>
  94:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the LCD module.</td>
  95:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega169, ATmega169P, ATmega329, ATmega329A, ATmega3290, ATmega3290A, ATmega649, ATmega649
  96:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
  97:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
  98:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
  99:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_pscr_enable()</td>
 100:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Reduced Power Stage Controller module.</td>
 101:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM81</td>
 102:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 103:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 104:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 105:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_pscr_disable()</td>
 106:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Reduced Power Stage Controller module.</td>
 107:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM81</td>
 108:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 109:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 110:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 111:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_psc0_enable()</td>
 112:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 0 module.</td>
 113:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 114:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 115:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 116:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 117:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_psc0_disable()</td>
 118:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 0 module.</td>
 119:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 120:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 121:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 122:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 123:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_psc1_enable()</td>
 124:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 1 module.</td>
 125:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 126:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 127:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 128:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 129:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_psc1_disable()</td>
 130:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 1 module.</td>
 131:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 132:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 133:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 134:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 135:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_psc2_enable()</td>
 136:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Power Stage Controller 2 module.</td>
 137:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 138:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 139:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 140:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 141:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_psc2_disable()</td>
 142:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Power Stage Controller 2 module.</td>
 143:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM1, AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B, AT90PWM81</td>
 144:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 145:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 146:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 147:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_spi_enable()</td>
 148:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Serial Peripheral Interface module.</td>
 149:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 150:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 151:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 152:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 153:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_spi_disable()</td>
 154:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Serial Peripheral Interface module.</td>
 155:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 156:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 157:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 158:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 159:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer0_enable()</td>
 160:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Timer 0 module.</td>
 161:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 162:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 163:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 164:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 165:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer0_disable()</td>
 166:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Timer 0 module.</td>
 167:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 168:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 169:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 170:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 171:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer1_enable()</td>
 172:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Timer 1 module.</td>
 173:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 174:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 175:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 176:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 177:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer1_disable()</td>
 178:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Timer 1 module.</td>
 179:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 180:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 181:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 182:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 183:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer2_enable()</td>
 184:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Timer 2 module.</td>
 185:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 186:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 187:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 188:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 189:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer2_disable()</td>
 190:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Timer 2 module.</td>
 191:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 192:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 193:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 194:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 195:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer3_enable()</td>
 196:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Timer 3 module.</td>
 197:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 198:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 199:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 200:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 201:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer3_disable()</td>
 202:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Timer 3 module.</td>
 203:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 204:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 205:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 206:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 207:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer4_enable()</td>
 208:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Timer 4 module.</td>
 209:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 210:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 211:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 212:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 213:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer4_disable()</td>
 214:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Timer 4 module.</td>
 215:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 216:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 217:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 218:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 219:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer5_enable()</td>
 220:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Timer 5 module.</td>
 221:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 222:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 223:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 224:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 225:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_timer5_disable()</td>
 226:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Timer 5 module.</td>
 227:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561</td>
 228:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 229:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 230:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 231:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_twi_enable()</td>
 232:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Two Wire Interface module.</td>
 233:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 234:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 235:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 236:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 237:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_twi_disable()</td>
 238:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Two Wire Interface module.</td>
 239:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 240:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 241:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 242:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 243:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart_enable()</td>
 244:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the USART module.</td>
 245:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 246:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 247:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 248:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 249:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart_disable()</td>
 250:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the USART module.</td>
 251:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90PWM2, AT90PWM2B, AT90PWM3, AT90PWM3B</td>
 252:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 253:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 254:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 255:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart0_enable()</td>
 256:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the USART 0 module.</td>
 257:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 258:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 259:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 260:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 261:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart0_disable()</td>
 262:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the USART 0 module.</td>
 263:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, ATmega165, ATmega
 264:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 265:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 266:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 267:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart1_enable()</td>
 268:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the USART 1 module.</td>
 269:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 270:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 271:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 272:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 273:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart1_disable()</td>
 274:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the USART 1 module.</td>
 275:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega128RFA1, ATmega2560, ATmega2561, AT90USB646, AT90U
 276:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 277:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 278:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 279:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart2_enable()</td>
 280:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the USART 2 module.</td>
 281:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 282:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 283:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 284:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 285:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart2_disable()</td>
 286:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the USART 2 module.</td>
 287:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 288:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 289:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 290:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 291:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart3_enable()</td>
 292:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the USART 3 module.</td>
 293:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 294:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 295:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 296:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 297:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usart3_disable()</td>
 298:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the USART 3 module.</td>
 299:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega640, ATmega1280, ATmega1281, ATmega2560, ATmega2561</td>
 300:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 301:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 302:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 303:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usb_enable()</td>
 304:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the USB module.</td>
 305:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 306:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 307:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 308:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 309:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usb_disable()</td>
 310:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the USB module.</td>
 311:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>AT90USB646, AT90USB647, AT90USB1286, AT90USB1287</td>
 312:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 313:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 314:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 315:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usi_enable()</td>
 316:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Universal Serial Interface module.</td>
 317:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 318:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 319:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 320:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 321:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_usi_disable()</td>
 322:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Universal Serial Interface module.</td>
 323:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATtiny24, ATtiny44, ATtiny84, ATtiny84A, ATtiny25, ATtiny45, ATtiny85, ATtiny261, ATtiny461
 324:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 325:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 326:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 327:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_vadc_enable()</td>
 328:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable the Voltage ADC module.</td>
 329:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega406</td>
 330:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 331:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 332:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 333:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_vadc_disable()</td>
 334:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable the Voltage ADC module.</td>
 335:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATmega406</td>
 336:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 337:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 338:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 339:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_all_enable()</td>
 340:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Enable all modules.</td>
 341:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 342:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 343:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 344:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   <tr>
 345:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>power_all_disable()</td>
 346:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>Disable all modules.</td>
 347:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     <td>ATxmega6A4, ATxmega32A4, ATxmega64A1, ATxmega64A1U, ATxmega64A3, ATxmegaA1, ATxmegaA1U, ATx
 348:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****   </tr>
 349:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** </table>
 350:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** </center>
 351:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** </small>
 352:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 353:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** @} */
 354:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 355:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** // Xmega A series has AES, EBI and DMA bits
 356:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** // Include any other device on need basis
 357:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 358:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 359:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 360:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 361:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 362:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 363:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 364:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 365:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 366:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 367:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 368:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 369:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_aes_enable()  (PR_PRGEN &= (uint8_t)~(PR_AES_bm))
 370:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_aes_disable() (PR_PRGEN |= (uint8_t)PR_AES_bm)
 371:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 372:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_ebi_enable()  (PR_PRGEN &= (uint8_t)~(PR_EBI_bm))
 373:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_ebi_disable() (PR_PRGEN |= (uint8_t)PR_EBI_bm)
 374:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 375:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_dma_enable()    (PR_PRGEN &= (uint8_t)~(PR_DMA_bm))
 376:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_dma_disable()   (PR_PRGEN |= (uint8_t)PR_DMA_bm)
 377:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 378:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_daca_enable()     (PR_PRPA &= (uint8_t)~(PR_DAC_bm))
 379:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_daca_disable()    (PR_PRPA |= (uint8_t)PR_DAC_bm)
 380:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_dacb_enable()     (PR_PRPB &= (uint8_t)~(PR_DAC_bm))
 381:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_dacb_disable()    (PR_PRPB |= (uint8_t)PR_DAC_bm)
 382:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 383:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartc1_enable()  (PR_PRPC &= (uint8_t)~(PR_USART1_bm))
 384:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartc1_disable() (PR_PRPC |= (uint8_t)PR_USART1_bm)
 385:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartd1_enable()  (PR_PRPD &= (uint8_t)~(PR_USART1_bm))
 386:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartd1_disable() (PR_PRPD |= (uint8_t)PR_USART1_bm)
 387:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usarte1_enable()  (PR_PRPE &= (uint8_t)~(PR_USART1_bm))
 388:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usarte1_disable() (PR_PRPE |= (uint8_t)PR_USART1_bm)
 389:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartf1_enable()  (PR_PRPF &= (uint8_t)~(PR_USART1_bm))
 390:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartf1_disable() (PR_PRPF |= (uint8_t)PR_USART1_bm)
 391:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 392:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
 393:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do { \
 394:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 395:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 396:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 397:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 398:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 399:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 400:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC
 401:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** } while(0)
 402:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 403:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 404:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
 405:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do { \
 406:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_AES_bm|PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 407:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 408:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_DAC_bm|PR_ADC_bm|PR_AC_bm); \
 409:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 410:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 411:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 412:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART1_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0
 413:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** } while(0)
 414:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #endif
 415:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 416:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16A4__) \
 417:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega16D4__) \
 418:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32A4__) \
 419:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 420:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1__) \
 421:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A1U__) \
 422:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64A3__) \
 423:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 424:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1__) \
 425:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A1U__) \
 426:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128A3__) \
 427:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 428:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192A3__) \
 429:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) \
 430:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3__) \
 431:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega256A3B__)
 432:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 433:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 434:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_rtc_enable()  (PR_PRGEN &= (uint8_t)~(PR_RTC_bm))
 435:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_rtc_disable() (PR_PRGEN |= (uint8_t)PR_RTC_bm)
 436:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 437:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_evsys_enable()    (PR_PRGEN &= (uint8_t)~(PR_EVSYS_bm))
 438:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_evsys_disable()   (PR_PRGEN |= (uint8_t)PR_EVSYS_bm)
 439:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 440:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adca_enable()     (PR_PRPA &= (uint8_t)~(PR_ADC_bm))
 441:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adca_disable()    (PR_PRPA |= (uint8_t)PR_ADC_bm)
 442:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adcb_enable()     (PR_PRPB &= (uint8_t)~(PR_ADC_bm))
 443:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adcb_disable()    (PR_PRPB |= (uint8_t)PR_ADC_bm)
 444:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 445:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_aca_enable()      (PR_PRPA &= (uint8_t)~(PR_AC_bm))
 446:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_aca_disable()     (PR_PRPA |= (uint8_t)PR_AC_bm)
 447:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_acb_enable()      (PR_PRPB &= (uint8_t)~(PR_AC_bm))
 448:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_acb_disable()     (PR_PRPB |= (uint8_t)PR_AC_bm)
 449:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 450:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twic_enable()     (PR_PRPC &= (uint8_t)~(PR_TWI_bm))
 451:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twic_disable()    (PR_PRPC |= (uint8_t)PR_TWI_bm)
 452:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twid_enable()     (PR_PRPD &= (uint8_t)~(PR_TWI_bm))
 453:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twid_disable()    (PR_PRPD |= (uint8_t)PR_TWI_bm)
 454:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twie_enable()     (PR_PRPE &= (uint8_t)~(PR_TWI_bm))
 455:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twie_disable()    (PR_PRPE |= (uint8_t)PR_TWI_bm)
 456:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twif_enable()     (PR_PRPF &= (uint8_t)~(PR_TWI_bm))
 457:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twif_disable()    (PR_PRPF |= (uint8_t)PR_TWI_bm)
 458:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 459:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartc0_enable()  (PR_PRPC &= (uint8_t)~(PR_USART0_bm))
 460:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartc0_disable() (PR_PRPC |= (uint8_t)PR_USART0_bm)
 461:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartd0_enable()  (PR_PRPD &= (uint8_t)~(PR_USART0_bm))
 462:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartd0_disable() (PR_PRPD |= (uint8_t)PR_USART0_bm)
 463:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usarte0_enable()  (PR_PRPE &= (uint8_t)~(PR_USART0_bm))
 464:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usarte0_disable() (PR_PRPE |= (uint8_t)PR_USART0_bm)
 465:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartf0_enable()  (PR_PRPF &= (uint8_t)~(PR_USART0_bm))
 466:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usartf0_disable() (PR_PRPF |= (uint8_t)PR_USART0_bm)
 467:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 468:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spic_enable()     (PR_PRPC &= (uint8_t)~(PR_SPI_bm))
 469:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spic_disable()    (PR_PRPC |= (uint8_t)PR_SPI_bm)
 470:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spid_enable()     (PR_PRPD &= (uint8_t)~(PR_SPI_bm))
 471:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spid_disable()    (PR_PRPD |= (uint8_t)PR_SPI_bm)
 472:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spie_enable()     (PR_PRPE &= (uint8_t)~(PR_SPI_bm))
 473:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spie_disable()    (PR_PRPE |= (uint8_t)PR_SPI_bm)
 474:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spif_enable()     (PR_PRPF &= (uint8_t)~(PR_SPI_bm))
 475:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spif_disable()    (PR_PRPF |= (uint8_t)PR_SPI_bm)
 476:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 477:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hiresc_enable()   (PR_PRPC &= (uint8_t)~(PR_HIRES_bm))
 478:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hiresc_disable()  (PR_PRPC |= (uint8_t)PR_HIRES_bm)
 479:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hiresd_enable()   (PR_PRPD &= (uint8_t)~(PR_HIRES_bm))
 480:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hiresd_disable()  (PR_PRPD |= (uint8_t)PR_HIRES_bm)
 481:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hirese_enable()   (PR_PRPE &= (uint8_t)~(PR_HIRES_bm))
 482:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hirese_disable()  (PR_PRPE |= (uint8_t)PR_HIRES_bm)
 483:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hiresf_enable()   (PR_PRPF &= (uint8_t)~(PR_HIRES_bm))
 484:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hiresf_disable()  (PR_PRPF |= (uint8_t)PR_HIRES_bm)
 485:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 486:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc1c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC1_bm))
 487:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc1c_disable()    (PR_PRPC |= (uint8_t)PR_TC1_bm)
 488:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc1d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC1_bm))
 489:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc1d_disable()    (PR_PRPD |= (uint8_t)PR_TC1_bm)
 490:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc1e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC1_bm))
 491:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc1e_disable()    (PR_PRPE |= (uint8_t)PR_TC1_bm)
 492:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc1f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC1_bm))
 493:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc1f_disable()    (PR_PRPF |= (uint8_t)PR_TC1_bm)
 494:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 495:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc0c_enable()     (PR_PRPC &= (uint8_t)~(PR_TC0_bm))
 496:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc0c_disable()    (PR_PRPC |= (uint8_t)PR_TC0_bm)
 497:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc0d_enable()     (PR_PRPD &= (uint8_t)~(PR_TC0_bm))
 498:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc0d_disable()    (PR_PRPD |= (uint8_t)PR_TC0_bm)
 499:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc0e_enable()     (PR_PRPE &= (uint8_t)~(PR_TC0_bm))
 500:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc0e_disable()    (PR_PRPE |= (uint8_t)PR_TC0_bm)
 501:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc0f_enable()     (PR_PRPF &= (uint8_t)~(PR_TC0_bm))
 502:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_tc0f_disable()    (PR_PRPF |= (uint8_t)PR_TC0_bm)
 503:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 504:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #endif
 505:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 506:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #if defined(__AVR_ATxmega16D4__) \
 507:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega32D4__) \
 508:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega64D3__) \
 509:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega128D3__) \
 510:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATxmega192D3__) 
 511:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 512:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
 513:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do { \
 514:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRGEN &= (uint8_t)~(PR_RTC_bm|PR_EVSYS_bm); \
 515:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPA &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 516:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPB &= (uint8_t)~(PR_ADC_bm|PR_AC_bm); \
 517:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPC &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 518:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPD &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 519:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPE &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 520:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPF &= (uint8_t)~(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 521:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** } while(0)
 522:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 523:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 524:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
 525:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do { \
 526:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRGEN|= (uint8_t)(PR_EBI_bm|PR_RTC_bm|PR_EVSYS_bm|PR_DMA_bm); \
 527:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPA |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 528:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPB |= (uint8_t)(PR_ADC_bm|PR_AC_bm); \
 529:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPC |= (uint8_t)(PR_TWI_bm|R_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 530:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPD |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 531:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPE |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 532:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PR_PRPF |= (uint8_t)(PR_TWI_bm|PR_USART0_bm|PR_SPI_bm|PR_HIRES_bm|PR_TC1_bm|PR_TC0_bm); \
 533:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** } while(0)
 534:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 535:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega640__) \
 536:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
 537:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
 538:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
 539:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) 
 540:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 541:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 542:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 543:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 544:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 545:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 546:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 547:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 548:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 549:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 550:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 551:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 552:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 553:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 554:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 555:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 556:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 557:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 558:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 559:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 560:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 561:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 562:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 563:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 564:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 565:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 566:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 567:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 568:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 569:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 570:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 571:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 572:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 573:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 574:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart2_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART2))
 575:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart2_disable()  (PRR1 |= (uint8_t)(1 << PRUSART2))
 576:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 577:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart3_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART3))
 578:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart3_disable()  (PRR1 |= (uint8_t)(1 << PRUSART3))
 579:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 580:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
 581:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 582:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 583:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|
 584:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 585:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 586:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
 587:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 588:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 589:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)|(1<<PRUSART2)|(
 590:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 591:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 592:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 593:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega128RFA1__)
 594:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 595:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 596:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 597:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 598:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 599:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 600:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 601:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 602:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 603:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 604:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 605:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 606:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 607:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 608:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 609:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 610:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 611:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 612:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 613:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 614:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 615:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 616:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer4_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM4))
 617:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer4_disable()  (PRR1 |= (uint8_t)(1 << PRTIM4))
 618:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 619:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer5_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM5))
 620:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer5_disable()  (PRR1 |= (uint8_t)(1 << PRTIM5))
 621:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 622:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 623:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 624:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 625:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 626:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 627:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 628:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
 629:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 630:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
 631:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 632:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 633:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 634:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
 635:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 636:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
 637:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRTIM4)|(1<<PRTIM5)|(1<<PRTIM5)|(1<<PRUSART1)); \
 638:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 639:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 640:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 641:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90USB646__) \
 642:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
 643:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
 644:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__)
 645:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 646:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 647:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 648:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 649:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 650:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 651:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 652:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 653:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 654:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 655:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 656:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 657:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 658:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 659:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 660:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 661:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 662:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 663:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 664:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 665:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 666:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 667:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 668:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 669:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 670:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 671:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 672:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 673:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
 674:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 675:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 676:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 677:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 678:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 679:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
 680:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 681:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 682:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 683:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 684:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 685:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 686:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U4__) \
 687:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__)
 688:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 689:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 690:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 691:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 692:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 693:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 694:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 695:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 696:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 697:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 698:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 699:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 700:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 701:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 702:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 703:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 704:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 705:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 706:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 707:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 708:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 709:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 710:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 711:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 712:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 713:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 714:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 715:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 716:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 717:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 718:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 719:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 720:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
 721:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 722:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<P
 723:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 724:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 725:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 726:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
 727:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 728:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRUSART0)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PR
 729:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 730:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 731:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 732:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 733:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32U6__)
 734:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 735:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 736:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 737:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 738:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 739:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 740:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 741:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 742:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 743:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 744:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 745:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 746:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 747:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 748:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 749:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 750:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 751:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 752:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 753:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 754:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
 755:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
 756:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 757:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
 758:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
 759:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 760:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
 761:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
 762:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 763:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
 764:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 765:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 766:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 767:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 768:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 769:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
 770:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
 771:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)); \
 772:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRTIM3)|(1<<PRUSART1)|(1<<PRUSB)); \
 773:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
 774:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 775:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 776:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM1__)
 777:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 778:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 779:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 780:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 781:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 782:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 783:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 784:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 785:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 786:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 787:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 788:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 789:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 790:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Power Stage Controller 0 */
 791:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 792:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 793:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 794:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Power Stage Controller 1 */
 795:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 796:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 797:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 798:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 799:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 800:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 801:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 802:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
 803:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
 804:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 805:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 806:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM2__) \
 807:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
 808:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
 809:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
 810:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
 811:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__)
 812:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 813:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 814:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 815:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 816:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 817:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 818:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 819:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart_enable()    (PRR &= (uint8_t)~(1 << PRUSART))
 820:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart_disable()   (PRR |= (uint8_t)(1 << PRUSART))
 821:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 822:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
 823:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
 824:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 825:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 826:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 827:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 828:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Power Stage Controller 0 */
 829:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc0_enable()     (PRR &= (uint8_t)~(1 << PRPSC0))
 830:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc0_disable()    (PRR |= (uint8_t)(1 << PRPSC0))
 831:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 832:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Power Stage Controller 1 */
 833:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc1_enable()     (PRR &= (uint8_t)~(1 << PRPSC1))
 834:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc1_disable()    (PRR |= (uint8_t)(1 << PRPSC1))
 835:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 836:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 837:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 838:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 839:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 840:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(
 841:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART)|(1<<PRTIM0)|(1
 842:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 843:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 844:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90PWM81__)
 845:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 846:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 847:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 848:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 849:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 850:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 851:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 852:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 853:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 854:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 855:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Reduced Power Stage Controller */
 856:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_pscr_enable()     (PRR &= (uint8_t)~(1 << PRPSCR))
 857:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_pscr_disable()    (PRR |= (uint8_t)(1 << PRPSCR))
 858:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 859:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Power Stage Controller 2 */
 860:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc2_enable()     (PRR &= (uint8_t)~(1 << PRPSC2))
 861:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc2_disable()    (PRR |= (uint8_t)(1 << PRPSC2))
 862:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 863:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1
 864:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRPSCR)|(1<
 865:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 866:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 867:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega165__) \
 868:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
 869:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
 870:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
 871:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
 872:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
 873:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
 874:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
 875:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
 876:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
 877:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
 878:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
 879:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__)
 880:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 881:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 882:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 883:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 884:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 885:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 886:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 887:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 888:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 889:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 890:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 891:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 892:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 893:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1))
 894:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)))
 895:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 896:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 897:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega169__) \
 898:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
 899:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
 900:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
 901:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
 902:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
 903:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
 904:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
 905:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
 906:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
 907:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290P__) \
 908:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
 909:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
 910:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
 911:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
 912:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
 913:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__)
 914:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 915:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
 916:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
 917:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 918:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
 919:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
 920:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 921:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
 922:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
 923:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 924:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
 925:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
 926:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 927:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_lcd_enable()      (PRR &= (uint8_t)~(1 << PRLCD))
 928:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_lcd_disable()     (PRR |= (uint8_t)(1 << PRLCD))
 929:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 930:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|
 931:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM1)|(
 932:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 933:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 934:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega164A__) \
 935:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
 936:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
 937:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
 938:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324PA__) \
 939:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
 940:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
 941:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__)
 942:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 943:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 944:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 945:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 946:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 947:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 948:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 949:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 950:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 951:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 952:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
 953:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
 954:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 955:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 956:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 957:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 958:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 959:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 960:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 961:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 962:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 963:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 964:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 965:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 966:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 967:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART
 968:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRUSART1
 969:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 970:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 971:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega644__)
 972:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 973:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
 974:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
 975:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 976:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
 977:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
 978:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 979:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
 980:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
 981:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 982:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
 983:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
 984:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 985:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
 986:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
 987:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 988:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
 989:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
 990:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 991:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
 992:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
 993:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 994:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)
 995:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
 996:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 997:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
 998:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega406__)
 999:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1000:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1001:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1002:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1003:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1004:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1005:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1006:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1007:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1008:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1009:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Voltage ADC */
1010:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1011:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1012:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1013:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC))
1014:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)))
1015:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1016:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1017:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega48__) \
1018:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48A__) \
1019:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1020:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1021:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88A__) \
1022:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1023:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88PA__) \
1024:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1025:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168A__) \
1026:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1027:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1028:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1029:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1030:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny88__)
1031:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1032:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1033:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1034:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1035:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1036:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1037:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1038:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR &= (uint8_t)~(1 << PRUSART0))
1039:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR |= (uint8_t)(1 << PRUSART0))
1040:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1041:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1042:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1043:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1044:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1045:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1046:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1047:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR &= (uint8_t)~(1 << PRTIM2))
1048:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR |= (uint8_t)(1 << PRTIM2))
1049:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1050:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR &= (uint8_t)~(1 << PRTWI))
1051:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR |= (uint8_t)(1 << PRTWI))
1052:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1053:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|
1054:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRUSART0)|(1<<PRTIM0)|(
1055:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1056:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1057:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny24__) \
1058:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny24A__) \
1059:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny44__) \
1060:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny44A__) \
1061:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny84__) \
1062:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny84A__) \
1063:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny25__) \
1064:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny45__) \
1065:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny85__) \
1066:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny261__) \
1067:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny261A__) \
1068:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny461__) \
1069:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny461A__) \
1070:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny861__) \
1071:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny861A__) \
1072:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny43U__)
1073:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1074:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1075:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1076:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1077:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1078:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1079:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1080:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1081:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1082:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1083:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Universal Serial Interface */
1084:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1085:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1086:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1087:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1088:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI)))
1089:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1090:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1091:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega1284P__)
1092:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1093:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1094:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR0 &= (uint8_t)~(1 << PRADC))
1095:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR0 |= (uint8_t)(1 << PRADC))
1096:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1097:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1098:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1099:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1100:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1101:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1102:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1103:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1104:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1105:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1106:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1107:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1108:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1109:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1110:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1111:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1112:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_enable()   (PRR1 &= (uint8_t)~(1 << PRTIM3))
1113:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer3_disable()  (PRR1 |= (uint8_t)(1 << PRTIM3))
1114:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1115:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1116:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1117:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1118:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART1))
1119:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR0 |= (uint8_t)(1 << PRUSART1))
1120:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1121:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
1122:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
1123:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRU
1124:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~(1<<PRTIM3); \
1125:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
1126:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1127:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
1128:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
1129:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRADC)|(1<<PRSPI)|(1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRTIM2)|(1<<PRUS
1130:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)(1<<PRTIM3); \
1131:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
1132:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1133:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1134:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega32HVB__) \
1135:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1136:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1137:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__)
1138:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1139:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1140:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1141:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1142:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1143:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1144:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1145:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1146:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1147:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1148:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1149:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /* Voltage ADC */
1150:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_vadc_enable()     (PRR0 &= (uint8_t)~(1 << PRVADC))
1151:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_vadc_disable()    (PRR0 |= (uint8_t)(1 << PRVADC))
1152:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1153:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1154:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1155:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1156:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_vrm_enable()      (PRR0 &= (uint8_t)~(1 << PRVRM))
1157:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_vrm_disable()     (PRR0 |= (uint8_t)(1 << PRVRM))
1158:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1159:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR0 &= (uint8_t)~((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|
1160:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR0 |= (uint8_t)((1<<PRTWI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRVADC)|(
1161:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1162:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1163:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATmega16M1__) \
1164:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1165:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1166:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega64C1__) \
1167:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega64M1__)
1168:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1169:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1170:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1171:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1172:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1173:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1174:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1175:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1176:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1177:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1178:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1179:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1180:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1181:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1182:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1183:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1184:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc_enable()      (PRR &= (uint8_t)~(1 << PRPSC))
1185:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_psc_disable()     (PRR |= (uint8_t)(1 << PRPSC))
1186:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1187:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_can_enable()      (PRR &= (uint8_t)~(1 << PRCAN))
1188:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_can_disable()     (PRR |= (uint8_t)(1 << PRCAN))
1189:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1190:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<
1191:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRLIN)|(1<<PRSPI)|(1<<PRTIM0)|(1<<
1192:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1193:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1194:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny167__) \
1195:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny87__)
1196:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1197:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1198:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()      (PRR &= (uint8_t)~(1 << PRADC))
1199:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()     (PRR |= (uint8_t)(1 << PRADC))
1200:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1201:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usi_enable()      (PRR &= (uint8_t)~(1 << PRUSI))
1202:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usi_disable()     (PRR |= (uint8_t)(1 << PRUSI))
1203:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1204:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1205:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1206:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1207:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1208:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1209:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1210:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR &= (uint8_t)~(1 << PRSPI))
1211:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR |= (uint8_t)(1 << PRSPI))
1212:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1213:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_lin_enable()      (PRR &= (uint8_t)~(1 << PRLIN))
1214:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_lin_disable()     (PRR |= (uint8_t)(1 << PRLIN))
1215:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1216:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1
1217:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRUSI)|(1<<PRTIM0)|(1<<PRTIM1)|(1<
1218:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1219:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1220:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90USB82__) \
1221:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1222:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1223:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1224:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__)
1225:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1226:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1227:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1228:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1229:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1230:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1231:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1232:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1233:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1234:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1235:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1236:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1237:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1238:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_enable()   (PRR1 &= (uint8_t)~(1 << PRUSART1))
1239:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart1_disable()  (PRR1 |= (uint8_t)(1 << PRUSART1))
1240:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1241:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
1242:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
1243:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1244:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSB)|(1<<PRUSART1)); \
1245:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
1246:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1247:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
1248:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
1249:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRSPI)|(1<<PRTIM0)|(1<<PRTIM1)); \
1250:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSB)|(1<<PRUSART1)); \
1251:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
1252:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1253:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1254:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_AT90SCR100__)
1255:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1256:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_enable()   (PRR0 &= (uint8_t)~(1 << PRUSART0))
1257:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usart0_disable()  (PRR0 |= (uint8_t)(1 << PRUSART0))
1258:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1259:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()      (PRR0 &= (uint8_t)~(1 << PRSPI))
1260:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()     (PRR0 |= (uint8_t)(1 << PRSPI))
1261:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1262:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM1))
1263:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR0 |= (uint8_t)(1 << PRTIM1))
1264:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1265:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM0))
1266:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR0 |= (uint8_t)(1 << PRTIM0))
1267:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1268:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_enable()   (PRR0 &= (uint8_t)~(1 << PRTIM2))
1269:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer2_disable()  (PRR0 |= (uint8_t)(1 << PRTIM2))
1270:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1271:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()      (PRR0 &= (uint8_t)~(1 << PRTWI))
1272:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()     (PRR0 |= (uint8_t)(1 << PRTWI))
1273:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1274:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usbh_enable()     (PRR1 &= (uint8_t)~(1 << PRUSBH))
1275:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usbh_disable()    (PRR1 |= (uint8_t)(1 << PRUSBH))
1276:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1277:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_enable()      (PRR1 &= (uint8_t)~(1 << PRUSB))
1278:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_usb_disable()     (PRR1 |= (uint8_t)(1 << PRUSB))
1279:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1280:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hsspi_enable()    (PRR1 &= (uint8_t)~(1 << PRHSSPI))
1281:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_hsspi_disable()   (PRR1 |= (uint8_t)(1 << PRHSSPI))
1282:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1283:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_sci_enable()      (PRR1 &= (uint8_t)~(1 << PRSCI))
1284:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_sci_disable()     (PRR1 |= (uint8_t)(1 << PRSCI))
1285:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1286:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_aes_enable()      (PRR1 &= (uint8_t)~(1 << PRAES))
1287:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_aes_disable()     (PRR1 |= (uint8_t)(1 << PRAES))
1288:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1289:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_kb_enable()       (PRR1 &= (uint8_t)~(1 << PRKB))
1290:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_kb_disable()      (PRR1 |= (uint8_t)(1 << PRKB))
1291:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1292:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable() \
1293:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
1294:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 &= (uint8_t)~((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1295:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 &= (uint8_t)~((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1296:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
1297:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1298:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable() \
1299:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** do{ \
1300:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR0 |= (uint8_t)((1<<PRUSART0)|(1<<PRSPI)|(1<<PRTIM1)|(1<<PRTIM0)|(1<<PRTIM2)|(1<<PRTWI)); \
1301:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     PRR1 |= (uint8_t)((1<<PRUSBH)|(1<<PRUSB)|(1<<PRHSSPI)|(1<<PRSCI)|(1<<PRAES)|(1<<PRKB)); \
1302:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** }while(0)
1303:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1304:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1305:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny4__) \
1306:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny5__) \
1307:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny9__) \
1308:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny10__) \
1309:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny13A__) \
1310:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1311:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1312:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1313:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1314:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1315:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1316:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1317:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)))
1318:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)))
1319:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1320:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1321:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #elif defined(__AVR_ATtiny20__) \
1322:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny40__)
1323:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1324:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_enable()   (PRR &= (uint8_t)~(1 << PRADC))
1325:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_adc_disable()  (PRR |= (uint8_t)(1 << PRADC))
1326:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1327:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_enable()   (PRR &= (uint8_t)~(1 << PRTIM0))
1328:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer0_disable()  (PRR |= (uint8_t)(1 << PRTIM0))
1329:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1330:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_enable()   (PRR &= (uint8_t)~(1 << PRTIM1))
1331:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_timer1_disable()  (PRR |= (uint8_t)(1 << PRTIM1))
1332:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1333:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_enable()   (PRR &= (uint8_t)~(1 << PRSPI))
1334:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_spi_disable()  (PRR |= (uint8_t)(1 << PRSPI))
1335:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1336:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_enable()   (PRR &= (uint8_t)~(1 << PRTWI))
1337:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_twi_disable()  (PRR |= (uint8_t)(1 << PRTWI))
1338:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1339:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_enable()      (PRR &= (uint8_t)~((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1
1340:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #define power_all_disable()     (PRR |= (uint8_t)((1<<PRADC)|(1<<PRTIM0)|(1<<PRTIM1)|(1<<PRSPI)|(1<
1341:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1342:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #endif
1343:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1344:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1345:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #if defined(__AVR_AT90CAN32__) \
1346:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90CAN64__) \
1347:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90CAN128__) \
1348:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM1__) \
1349:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2__) \
1350:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM2B__) \
1351:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3__) \
1352:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM3B__) \
1353:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM216__) \
1354:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90PWM316__) \
1355:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90SCR100__) \
1356:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB646__) \
1357:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB647__) \
1358:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB82__) \
1359:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1286__) \
1360:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB1287__) \
1361:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_AT90USB162__) \
1362:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1280__) \
1363:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1281__) \
1364:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega128RFA1__) \
1365:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega1284P__) \
1366:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega162__) \
1367:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164A__) \
1368:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega164P__) \
1369:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165__) \
1370:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165A__) \
1371:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega165P__) \
1372:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168__) \
1373:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega168P__) \
1374:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169__) \
1375:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169A__) \
1376:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169P__) \
1377:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega169PA__) \
1378:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U4__) \
1379:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2560__) \
1380:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega2561__) \
1381:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324A__) \
1382:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega324P__) \
1383:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325__) \
1384:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega325A__) \
1385:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250__) \
1386:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3250A__) \
1387:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328__) \
1388:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega328P__) \
1389:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329__) \
1390:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329A__) \
1391:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329P__) \
1392:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega329PA__) \
1393:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290__) \
1394:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega3290A__) \
1395:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32C1__) \
1396:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVB__) \
1397:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32HVBREVB__) \
1398:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVB__) \
1399:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16HVBREVB__) \
1400:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32M1__) \
1401:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1402:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U4__) \
1403:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U6__) \
1404:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48__) \
1405:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega48P__) \
1406:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega640__) \
1407:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649P__) \
1408:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644__) \
1409:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644A__) \
1410:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644P__) \
1411:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega644PA__) \
1412:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645__) \
1413:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645A__) \
1414:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega645P__) \
1415:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450__) \
1416:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450A__) \
1417:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6450P__) \
1418:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649__) \
1419:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega649A__) \
1420:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490__) \
1421:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490A__) \
1422:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega6490P__) \
1423:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88__) \
1424:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega88P__) \
1425:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega8U2__) \
1426:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega16U2__) \
1427:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATmega32U2__) \
1428:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny48__) \
1429:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__AVR_ATtiny167__) \
1430:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** || defined(__DOXYGEN__)
1431:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1432:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1433:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1434:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1435:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** Some of the newer AVRs contain a System Clock Prescale Register (CLKPR) that
1436:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** allows you to decrease the system clock frequency and the power consumption
1437:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** when the need for processing power is low. Below are two macros and an
1438:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** enumerated type that can be used to interface to the Clock Prescale Register.
1439:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1440:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** \note Not all AVR devices have a Clock Prescale Register. On those devices
1441:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** without a Clock Prescale Register, these macros are not available.
1442:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** */
1443:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1444:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1445:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1446:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** \code 
1447:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** typedef enum
1448:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** {
1449:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_1 = 0,
1450:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_2 = 1,
1451:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_4 = 2,
1452:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_8 = 3,
1453:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_16 = 4,
1454:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_32 = 5,
1455:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_64 = 6,
1456:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_128 = 7,
1457:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_256 = 8,
1458:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_1_rc = 15, // ATmega128RFA1 only
1459:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** } clock_div_t;
1460:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** \endcode
1461:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** Clock prescaler setting enumerations.
1462:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1463:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** */
1464:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** typedef enum
1465:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** {
1466:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_1 = 0,
1467:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_2 = 1,
1468:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_4 = 2,
1469:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_8 = 3,
1470:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_16 = 4,
1471:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_32 = 5,
1472:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_64 = 6,
1473:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_128 = 7,
1474:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     clock_div_256 = 8
1475:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #if defined(__AVR_ATmega128RFA1__)
1476:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     , clock_div_1_rc = 15
1477:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** #endif
1478:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** } clock_div_t;
1479:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1480:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1481:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));
1482:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1483:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** /** \addtogroup avr_power
1484:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** \code clock_prescale_set(x) \endcode
1485:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1486:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** Set the clock prescaler register select bits, selecting a system clock
1487:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** division setting. This function is inlined, even if compiler
1488:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** optimizations are disabled.
1489:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** 
1490:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** The type of x is clock_div_t.
1491:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** */
1492:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** void clock_prescale_set(clock_div_t __x)
1493:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h **** {
1494:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     uint8_t __tmp = _BV(CLKPCE);
1495:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h ****     __asm__ __volatile__ (
  65               		.loc 2 1495 0
  66 0016 90E0      		ldi r25,0
  67 0018 80E8      		ldi r24,lo8(-128)
  68               	/* #APP */
  69               	 ;  1495 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/power.h" 1
  70 001a 0FB6      		in __tmp_reg__,__SREG__
  71 001c F894      		cli
  72 001e 8093 6100 		sts 97, r24
  73 0022 9093 6100 		sts 97, r25
  74 0026 0FBE      		out __SREG__, __tmp_reg__
  75               	 ;  0 "" 2
  76               	/* #NOAPP */
  77               	.LBE34:
  78               	.LBE33:
  33:rn42/main.c   ****     USB_Disable();
  79               		.loc 1 33 0
  80 0028 0E94 0000 		call USB_Disable
  81               	.LVL3:
  35:rn42/main.c   ****     USB_Init();
  82               		.loc 1 35 0
  83 002c 0E94 0000 		call USB_Init
  84               	.LVL4:
  85               	.LBB35:
  86               	.LBB36:
  87               	.LBB37:
  88               		.file 3 "../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterru
   1:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2014.
   4:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2014  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
  89               		.loc 3 113 0
  90 0030 8091 E200 		lds r24,226
  91 0034 8460      		ori r24,lo8(4)
  92 0036 8093 E200 		sts 226,r24
  93               	.LBE37:
  94               	.LBE36:
  95               	.LBE35:
  39:rn42/main.c   ****     print_set_sendchar(sendchar_func);
  96               		.loc 1 39 0
  97 003a 80E0      		ldi r24,lo8(gs(sendchar_func))
  98 003c 90E0      		ldi r25,hi8(gs(sendchar_func))
  99 003e 0E94 0000 		call print_set_sendchar
 100               	.LVL5:
  42:rn42/main.c   ****         DDRD  |= (1<<PD4);
 101               		.loc 1 42 0
 102 0042 549A      		sbi 0xa,4
  43:rn42/main.c   ****         PORTD &= ~(1<<PD4);
 103               		.loc 1 43 0
 104 0044 5C98      		cbi 0xb,4
  46:rn42/main.c   ****         DDRE  |= (1<<PE4);
 105               		.loc 1 46 0
 106 0046 6C9A      		sbi 0xd,4
  47:rn42/main.c   ****         PORTE &= ~(1<<PE4);
 107               		.loc 1 47 0
 108 0048 7498      		cbi 0xe,4
  50:rn42/main.c   **** 	DDRB &= ~(1<<4);
 109               		.loc 1 50 0
 110 004a 2498      		cbi 0x4,4
 111               	.LBE32:
 112               	.LBE31:
  56:rn42/main.c   ****     SetupHardware();
  57:rn42/main.c   ****     sei();
 113               		.loc 1 57 0
 114               	/* #APP */
 115               	 ;  57 "rn42/main.c" 1
 116 004c 7894      		sei
 117               	 ;  0 "" 2
 118               	/* #NOAPP */
 119 004e 8FEF      		ldi r24,lo8(-1)
 120 0050 00C0      		rjmp .L3
 121               	.L5:
 122               	.LVL6:
 123               	.LBB38:
 124               	.LBB39:
 125               		.file 4 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h"
   1:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
   6:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
   9:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  12:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  17:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  21:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  33:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  35:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  38:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  41:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  42:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  46:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \code
  49:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  54:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     used.
  58:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  59:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  68:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  77:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  81:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** */
  82:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  83:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  87:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  88:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  93:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  94:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  97:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  98:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
 103:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 104:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /**
 105:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 107:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 109:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 112:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 114:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 120:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 125:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 129:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 132:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 140:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****  */
 141:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** void
 142:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** {
 144:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 153:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 156:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 159:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 164:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 126               		.loc 4 164 0
 127 0052 EFE3      		ldi r30,lo8(7999)
 128 0054 FFE1      		ldi r31,hi8(7999)
 129 0056 3197      		1: sbiw r30,1
 130 0058 01F4      		brne 1b
 131 005a 00C0      		rjmp .
 132 005c 0000      		nop
 133               	.LBE39:
 134               	.LBE38:
  58:rn42/main.c   **** 
  59:rn42/main.c   ****     /* wait for USB startup to get ready for debug output */
  60:rn42/main.c   ****     uint8_t timeout = 255;  // timeout when USB is not available(Bluetooth)
  61:rn42/main.c   ****     while (timeout-- && USB_DeviceState != DEVICE_STATE_Configured) {
 135               		.loc 1 61 0
 136 005e 8823      		tst r24
 137 0060 01F0      		breq .L4
 138               	.LVL7:
 139               	.L3:
 140               		.loc 1 61 0 is_stmt 0 discriminator 2
 141 0062 9091 0000 		lds r25,USB_DeviceState
 142 0066 8150      		subi r24,lo8(-(-1))
 143 0068 9430      		cpi r25,lo8(4)
 144 006a 01F4      		brne .L5
 145               	.L4:
  62:rn42/main.c   ****         wait_ms(4);
  63:rn42/main.c   **** #if defined(INTERRUPT_CONTROL_ENDPOINT)
  64:rn42/main.c   ****         ;
  65:rn42/main.c   **** #else
  66:rn42/main.c   ****         USB_USBTask();
  67:rn42/main.c   **** #endif
  68:rn42/main.c   ****     }
  69:rn42/main.c   ****     print("\nUSB init\n");
 146               		.loc 1 69 0 is_stmt 1
 147 006c 80E0      		ldi r24,lo8(__c.4579)
 148 006e 90E0      		ldi r25,hi8(__c.4579)
 149 0070 0E94 0000 		call xputs
 150               	.LVL8:
  70:rn42/main.c   **** 
  71:rn42/main.c   ****     rn42_init();
 151               		.loc 1 71 0
 152 0074 0E94 0000 		call rn42_init
 153               	.LVL9:
  72:rn42/main.c   ****     rn42_task_init();
 154               		.loc 1 72 0
 155 0078 0E94 0000 		call rn42_task_init
 156               	.LVL10:
  73:rn42/main.c   ****     print("RN-42 init\n");
 157               		.loc 1 73 0
 158 007c 80E0      		ldi r24,lo8(__c.4581)
 159 007e 90E0      		ldi r25,hi8(__c.4581)
 160 0080 0E94 0000 		call xputs
 161               	.LVL11:
  74:rn42/main.c   **** 
  75:rn42/main.c   ****     /* init modules */
  76:rn42/main.c   ****     keyboard_init();
 162               		.loc 1 76 0
 163 0084 0E94 0000 		call keyboard_init
 164               	.LVL12:
  77:rn42/main.c   **** 
  78:rn42/main.c   ****     if (!(PINB & (1<<4))) {
 165               		.loc 1 78 0
 166 0088 1C99      		sbic 0x3,4
 167 008a 00C0      		rjmp .L6
  79:rn42/main.c   ****         host_set_driver(&rn42_driver);
 168               		.loc 1 79 0
 169 008c 80E0      		ldi r24,lo8(rn42_driver)
 170 008e 90E0      		ldi r25,hi8(rn42_driver)
 171 0090 0E94 0000 		call host_set_driver
 172               	.LVL13:
 173 0094 00C0      		rjmp .L7
 174               	.L6:
  80:rn42/main.c   ****     } else {
  81:rn42/main.c   ****         PORTD |= (1<<PD4);
 175               		.loc 1 81 0
 176 0096 5C9A      		sbi 0xb,4
  82:rn42/main.c   ****         host_set_driver(&lufa_driver);
 177               		.loc 1 82 0
 178 0098 80E0      		ldi r24,lo8(lufa_driver)
 179 009a 90E0      		ldi r25,hi8(lufa_driver)
 180 009c 0E94 0000 		call host_set_driver
 181               	.LVL14:
  83:rn42/main.c   **** 	      if (USB_DeviceState != DEVICE_STATE_Configured) {
 182               		.loc 1 83 0
 183 00a0 8091 0000 		lds r24,USB_DeviceState
 184 00a4 8430      		cpi r24,lo8(4)
 185 00a6 01F0      		breq .L7
  84:rn42/main.c   **** 		    // USB plugged in, but not configured: assuming charger/fast charge.
  85:rn42/main.c   **** 		    // TODO: Key combo to activate BT module and switch driver.
  86:rn42/main.c   **** 		    PORTE |= (1<<PE4);
 186               		.loc 1 86 0
 187 00a8 749A      		sbi 0xe,4
 188               	.L7:
  87:rn42/main.c   **** 		} else {
  88:rn42/main.c   **** 	      }
  89:rn42/main.c   ****     }
  90:rn42/main.c   **** 
  91:rn42/main.c   **** #ifdef SLEEP_LED_ENABLE
  92:rn42/main.c   ****     sleep_led_init();
  93:rn42/main.c   **** #endif
  94:rn42/main.c   **** 
  95:rn42/main.c   ****     print("Keyboard start\n");
 189               		.loc 1 95 0
 190 00aa 80E0      		ldi r24,lo8(__c.4583)
 191 00ac 90E0      		ldi r25,hi8(__c.4583)
 192 00ae 0E94 0000 		call xputs
 193               	.LVL15:
 194 00b2 00C0      		rjmp .L28
 195               	.L13:
 196               	.LBB40:
  96:rn42/main.c   ****     while (1) {
  97:rn42/main.c   ****         while (rn42_rts() && // RN42 is off
  98:rn42/main.c   ****                 USB_DeviceState == DEVICE_STATE_Suspended) {
  99:rn42/main.c   ****             print("[s]");
 197               		.loc 1 99 0
 198 00b4 80E0      		ldi r24,lo8(__c.4585)
 199 00b6 90E0      		ldi r25,hi8(__c.4585)
 200 00b8 0E94 0000 		call xputs
 201               	.LVL16:
 100:rn42/main.c   ****             matrix_power_down();
 202               		.loc 1 100 0
 203 00bc 0E94 0000 		call matrix_power_down
 204               	.LVL17:
 101:rn42/main.c   ****             suspend_power_down();
 205               		.loc 1 101 0
 206 00c0 0E94 0000 		call suspend_power_down
 207               	.LVL18:
 102:rn42/main.c   ****             suspend_power_down();
 208               		.loc 1 102 0
 209 00c4 0E94 0000 		call suspend_power_down
 210               	.LVL19:
 103:rn42/main.c   ****             suspend_power_down();
 211               		.loc 1 103 0
 212 00c8 0E94 0000 		call suspend_power_down
 213               	.LVL20:
 104:rn42/main.c   ****             suspend_power_down();
 214               		.loc 1 104 0
 215 00cc 0E94 0000 		call suspend_power_down
 216               	.LVL21:
 105:rn42/main.c   ****             suspend_power_down();
 217               		.loc 1 105 0
 218 00d0 0E94 0000 		call suspend_power_down
 219               	.LVL22:
 106:rn42/main.c   ****             suspend_power_down();
 220               		.loc 1 106 0
 221 00d4 0E94 0000 		call suspend_power_down
 222               	.LVL23:
 107:rn42/main.c   ****             suspend_power_down();
 223               		.loc 1 107 0
 224 00d8 0E94 0000 		call suspend_power_down
 225               	.LVL24:
 108:rn42/main.c   ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 226               		.loc 1 108 0
 227 00dc 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 228 00e0 8823      		tst r24
 229 00e2 01F0      		breq .L28
 230               		.loc 1 108 0 is_stmt 0 discriminator 1
 231 00e4 0E94 0000 		call suspend_wakeup_condition
 232               	.LVL25:
 233 00e8 8111      		cpse r24,__zero_reg__
 109:rn42/main.c   ****                     USB_Device_SendRemoteWakeup();
 234               		.loc 1 109 0 is_stmt 1
 235 00ea 0E94 0000 		call USB_Device_SendRemoteWakeup
 236               	.LVL26:
 237               	.L28:
 238               	.LBE40:
  97:rn42/main.c   ****         while (rn42_rts() && // RN42 is off
 239               		.loc 1 97 0 discriminator 1
 240 00ee 0E94 0000 		call rn42_rts
 241               	.LVL27:
 242 00f2 8823      		tst r24
 243 00f4 01F0      		breq .L12
  98:rn42/main.c   ****                 USB_DeviceState == DEVICE_STATE_Suspended) {
 244               		.loc 1 98 0 discriminator 2
 245 00f6 8091 0000 		lds r24,USB_DeviceState
  97:rn42/main.c   ****         while (rn42_rts() && // RN42 is off
 246               		.loc 1 97 0 discriminator 2
 247 00fa 8530      		cpi r24,lo8(5)
 248 00fc 01F0      		breq .L13
 249               	.L12:
 110:rn42/main.c   ****             }
 111:rn42/main.c   ****         }
 112:rn42/main.c   **** 
 113:rn42/main.c   ****         keyboard_task();
 250               		.loc 1 113 0
 251 00fe 0E94 0000 		call keyboard_task
 252               	.LVL28:
 114:rn42/main.c   **** 
 115:rn42/main.c   **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
 116:rn42/main.c   ****         USB_USBTask();
 117:rn42/main.c   **** #endif
 118:rn42/main.c   **** 
 119:rn42/main.c   ****         rn42_task();
 253               		.loc 1 119 0
 254 0102 0E94 0000 		call rn42_task
 255               	.LVL29:
 120:rn42/main.c   ****     }
 256               		.loc 1 120 0
 257 0106 00C0      		rjmp .L28
 258               		.cfi_endproc
 259               	.LFE106:
 261               		.comm	rn42_config_driver,10,1
 262               		.comm	rn42_driver,10,1
 263               		.section	.progmem.data.__c.4579,"a",@progbits
 266               	__c.4579:
 267 0000 0A55 5342 		.string	"\nUSB init\n"
 267      2069 6E69 
 267      740A 00
 268               		.section	.progmem.data.__c.4581,"a",@progbits
 271               	__c.4581:
 272 0000 524E 2D34 		.string	"RN-42 init\n"
 272      3220 696E 
 272      6974 0A00 
 273               		.section	.progmem.data.__c.4583,"a",@progbits
 276               	__c.4583:
 277 0000 4B65 7962 		.string	"Keyboard start\n"
 277      6F61 7264 
 277      2073 7461 
 277      7274 0A00 
 278               		.section	.progmem.data.__c.4585,"a",@progbits
 281               	__c.4585:
 282 0000 5B73 5D00 		.string	"[s]"
 283               		.text
 284               	.Letext0:
 285               		.file 5 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/stdint.h"
 286               		.file 6 "../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 287               		.file 7 "../../../../tmk_core/common/report.h"
 288               		.file 8 "../../../../tmk_core/common/host_driver.h"
 289               		.file 9 "../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR
 290               		.file 10 "../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandard
 291               		.file 11 "../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 292               		.file 12 "../../../../tmk_core/protocol/lufa/lufa.h"
 293               		.file 13 "rn42/rn42.h"
 294               		.file 14 "../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/USBController_AVR
 295               		.file 15 "../../../../tmk_core/common/print.h"
 296               		.file 16 "../../../../tmk_core/common/avr/xprintf.h"
 297               		.file 17 "../../../../tmk_core/common/suspend.h"
 298               		.file 18 "rn42/rn42_task.h"
 299               		.file 19 "../../../../tmk_core/common/keyboard.h"
 300               		.file 20 "../../../../tmk_core/common/host.h"
 301               		.file 21 "../../../../tmk_core/common/sendchar.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc4NT5dN.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc4NT5dN.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc4NT5dN.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc4NT5dN.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc4NT5dN.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc4NT5dN.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc4NT5dN.s:13     .text.sendchar_func:0000000000000000 sendchar_func
     /tmp/cc4NT5dN.s:35     .text.startup.main:0000000000000000 main
     /tmp/cc4NT5dN.s:266    .progmem.data.__c.4579:0000000000000000 __c.4579
     /tmp/cc4NT5dN.s:271    .progmem.data.__c.4581:0000000000000000 __c.4581
                            *COM*:000000000000000a rn42_driver
     /tmp/cc4NT5dN.s:276    .progmem.data.__c.4583:0000000000000000 __c.4583
     /tmp/cc4NT5dN.s:281    .progmem.data.__c.4585:0000000000000000 __c.4585
                            *COM*:000000000000000a rn42_config_driver

UNDEFINED SYMBOLS
sendchar
USB_Disable
USB_Init
print_set_sendchar
USB_DeviceState
xputs
rn42_init
rn42_task_init
keyboard_init
host_set_driver
lufa_driver
matrix_power_down
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
rn42_rts
keyboard_task
rn42_task
__do_clear_bss
