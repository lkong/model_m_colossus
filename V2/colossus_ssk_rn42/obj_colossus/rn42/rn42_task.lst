   1               		.file	"rn42_task.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.status_led,"ax",@progbits
  13               	status_led:
  14               	.LFB104:
  15               		.file 1 "rn42/rn42_task.c"
   1:rn42/rn42_task.c **** #include <stdint.h>
   2:rn42/rn42_task.c **** #include <string.h>
   3:rn42/rn42_task.c **** #include <avr/pgmspace.h>
   4:rn42/rn42_task.c **** #include <avr/eeprom.h>
   5:rn42/rn42_task.c **** #include "keycode.h"
   6:rn42/rn42_task.c **** #include "serial.h"
   7:rn42/rn42_task.c **** #include "host.h"
   8:rn42/rn42_task.c **** #include "action.h"
   9:rn42/rn42_task.c **** #include "action_util.h"
  10:rn42/rn42_task.c **** #include "lufa.h"
  11:rn42/rn42_task.c **** #include "rn42_task.h"
  12:rn42/rn42_task.c **** #include "print.h"
  13:rn42/rn42_task.c **** #include "debug.h"
  14:rn42/rn42_task.c **** #include "timer.h"
  15:rn42/rn42_task.c **** #include "wait.h"
  16:rn42/rn42_task.c **** #include "command.h"
  17:rn42/rn42_task.c **** #include "battery.h"
  18:rn42/rn42_task.c **** 
  19:rn42/rn42_task.c **** static bool config_mode = false;
  20:rn42/rn42_task.c **** static bool force_usb = false;
  21:rn42/rn42_task.c **** 
  22:rn42/rn42_task.c **** static void status_led(bool on)
  23:rn42/rn42_task.c **** {
  16               		.loc 1 23 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  24:rn42/rn42_task.c ****     if (on) {
  25:rn42/rn42_task.c ****         DDRE  |=  (1<<6);
  23               		.loc 1 25 0
  24 0000 6E9A      		sbi 0xd,6
  24:rn42/rn42_task.c ****     if (on) {
  25               		.loc 1 24 0
  26 0002 8823      		tst r24
  27 0004 01F0      		breq .L2
  26:rn42/rn42_task.c ****         PORTE &= ~(1<<6);
  28               		.loc 1 26 0
  29 0006 7698      		cbi 0xe,6
  30 0008 0895      		ret
  31               	.L2:
  27:rn42/rn42_task.c ****     } else {
  28:rn42/rn42_task.c ****         DDRE  |=  (1<<6);
  29:rn42/rn42_task.c ****         PORTE |=  (1<<6);
  32               		.loc 1 29 0
  33 000a 769A      		sbi 0xe,6
  34 000c 0895      		ret
  35               		.cfi_endproc
  36               	.LFE104:
  38               		.section	.text.send_str,"ax",@progbits
  40               	send_str:
  41               	.LFB109:
  30:rn42/rn42_task.c ****     }
  31:rn42/rn42_task.c **** }
  32:rn42/rn42_task.c **** 
  33:rn42/rn42_task.c **** void rn42_task_init(void)
  34:rn42/rn42_task.c **** {
  35:rn42/rn42_task.c ****     battery_init();
  36:rn42/rn42_task.c **** }
  37:rn42/rn42_task.c **** 
  38:rn42/rn42_task.c **** void rn42_task(void)
  39:rn42/rn42_task.c **** {
  40:rn42/rn42_task.c ****     int16_t c;
  41:rn42/rn42_task.c ****     // Raw mode: interpret output report of LED state
  42:rn42/rn42_task.c ****     while ((c = rn42_getc()) != -1) {
  43:rn42/rn42_task.c ****         // LED Out report: 0xFE, 0x02, 0x01, <leds>
  44:rn42/rn42_task.c ****         // To get the report over UART set bit3 with SH, command.
  45:rn42/rn42_task.c ****         static enum {LED_INIT, LED_FE, LED_02, LED_01} state = LED_INIT;
  46:rn42/rn42_task.c ****         switch (state) {
  47:rn42/rn42_task.c ****             case LED_INIT:
  48:rn42/rn42_task.c ****                 if (c == 0xFE) state = LED_FE;
  49:rn42/rn42_task.c ****                 else {
  50:rn42/rn42_task.c ****                     if (0x0 <= c && c <= 0x7f) xprintf("%c", c);
  51:rn42/rn42_task.c ****                     else xprintf(" %02X", c);
  52:rn42/rn42_task.c ****                 }
  53:rn42/rn42_task.c ****                 break;
  54:rn42/rn42_task.c ****             case LED_FE:
  55:rn42/rn42_task.c ****                 if (c == 0x02) state = LED_02;
  56:rn42/rn42_task.c ****                 else           state = LED_INIT;
  57:rn42/rn42_task.c ****                 break;
  58:rn42/rn42_task.c ****             case LED_02:
  59:rn42/rn42_task.c ****                 if (c == 0x01) state = LED_01;
  60:rn42/rn42_task.c ****                 else           state = LED_INIT;
  61:rn42/rn42_task.c ****                 break;
  62:rn42/rn42_task.c ****             case LED_01:
  63:rn42/rn42_task.c ****                 dprintf("LED status: %02X\n", c);
  64:rn42/rn42_task.c ****                 rn42_set_leds(c);
  65:rn42/rn42_task.c ****                 state = LED_INIT;
  66:rn42/rn42_task.c ****                 break;
  67:rn42/rn42_task.c ****             default:
  68:rn42/rn42_task.c ****                 state = LED_INIT;
  69:rn42/rn42_task.c ****         }
  70:rn42/rn42_task.c ****     }
  71:rn42/rn42_task.c **** 
  72:rn42/rn42_task.c **** 
  73:rn42/rn42_task.c **** 
  74:rn42/rn42_task.c ****     static uint16_t prev_timer = 0;
  75:rn42/rn42_task.c ****     uint16_t e = timer_elapsed(prev_timer);
  76:rn42/rn42_task.c ****     if (e > 1000) {
  77:rn42/rn42_task.c ****         /* every second */
  78:rn42/rn42_task.c ****         prev_timer += e/1000*1000;
  79:rn42/rn42_task.c **** 
  80:rn42/rn42_task.c ****         /* Low voltage alert */
  81:rn42/rn42_task.c ****         uint8_t bs = battery_status();
  82:rn42/rn42_task.c ****         if (bs == LOW_VOLTAGE) {
  83:rn42/rn42_task.c ****             battery_led(LED_ON);
  84:rn42/rn42_task.c ****         } else {
  85:rn42/rn42_task.c ****             battery_led(LED_CHARGER);
  86:rn42/rn42_task.c ****         }
  87:rn42/rn42_task.c **** 
  88:rn42/rn42_task.c ****         /* every minute */
  89:rn42/rn42_task.c ****         uint32_t t = timer_read32()/1000;
  90:rn42/rn42_task.c ****         if (t%60 == 0) {
  91:rn42/rn42_task.c ****             uint16_t v = battery_voltage();
  92:rn42/rn42_task.c ****             uint8_t h = t/3600;
  93:rn42/rn42_task.c ****             uint8_t m = t%3600/60;
  94:rn42/rn42_task.c ****             uint8_t s = t%60;
  95:rn42/rn42_task.c ****             dprintf("%02u:%02u:%02u\t%umV\n", h, m, s, v);
  96:rn42/rn42_task.c ****         }
  97:rn42/rn42_task.c ****     }
  98:rn42/rn42_task.c **** 
  99:rn42/rn42_task.c **** 
 100:rn42/rn42_task.c ****     /* Connection monitor */
 101:rn42/rn42_task.c ****     if (!rn42_rts() && rn42_linked()) {
 102:rn42/rn42_task.c ****         status_led(true);
 103:rn42/rn42_task.c ****     } else {
 104:rn42/rn42_task.c ****         status_led(false);
 105:rn42/rn42_task.c ****     }
 106:rn42/rn42_task.c **** }
 107:rn42/rn42_task.c **** 
 108:rn42/rn42_task.c **** 
 109:rn42/rn42_task.c **** 
 110:rn42/rn42_task.c **** /******************************************************************************
 111:rn42/rn42_task.c ****  * Command
 112:rn42/rn42_task.c ****  ******************************************************************************/
 113:rn42/rn42_task.c **** static host_driver_t *prev_driver = &rn42_driver;
 114:rn42/rn42_task.c **** 
 115:rn42/rn42_task.c **** static void print_rn42(void)
 116:rn42/rn42_task.c **** {
 117:rn42/rn42_task.c ****     int16_t c;
 118:rn42/rn42_task.c ****     while ((c = rn42_getc()) != -1) {
 119:rn42/rn42_task.c ****         xprintf("%c", c);
 120:rn42/rn42_task.c ****     }
 121:rn42/rn42_task.c **** }
 122:rn42/rn42_task.c **** 
 123:rn42/rn42_task.c **** static void clear_rn42(void)
 124:rn42/rn42_task.c **** {
 125:rn42/rn42_task.c ****     while (rn42_getc() != -1) ;
 126:rn42/rn42_task.c **** }
 127:rn42/rn42_task.c **** 
 128:rn42/rn42_task.c **** #define SEND_STR(str)       send_str(PSTR(str))
 129:rn42/rn42_task.c **** #define SEND_COMMAND(cmd)   send_command(PSTR(cmd))
 130:rn42/rn42_task.c **** 
 131:rn42/rn42_task.c **** static void send_str(const char *str)
 132:rn42/rn42_task.c **** {
  42               		.loc 1 132 0
  43               		.cfi_startproc
  44               	.LVL1:
  45 0000 EF92      		push r14
  46               	.LCFI0:
  47               		.cfi_def_cfa_offset 3
  48               		.cfi_offset 14, -2
  49 0002 FF92      		push r15
  50               	.LCFI1:
  51               		.cfi_def_cfa_offset 4
  52               		.cfi_offset 15, -3
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 2 */
  56               	.L__stack_usage = 2
  57 0004 7C01      		movw r14,r24
 133:rn42/rn42_task.c ****     uint8_t c;
 134:rn42/rn42_task.c ****     while ((c = pgm_read_byte(str++)))
  58               		.loc 1 134 0
  59 0006 00C0      		rjmp .L5
  60               	.LVL2:
  61               	.L6:
 135:rn42/rn42_task.c ****         rn42_putc(c);
  62               		.loc 1 135 0
  63 0008 0E94 0000 		call rn42_putc
  64               	.LVL3:
  65               	.L5:
  66               	.LBB13:
 134:rn42/rn42_task.c ****     while ((c = pgm_read_byte(str++)))
  67               		.loc 1 134 0 discriminator 1
  68 000c F701      		movw r30,r14
  69               	.LVL4:
  70 000e 8FEF      		ldi r24,-1
  71 0010 E81A      		sub r14,r24
  72 0012 F80A      		sbc r15,r24
  73               	.LVL5:
  74               	/* #APP */
  75               	 ;  134 "rn42/rn42_task.c" 1
  76 0014 8491      		lpm r24, Z
  77               		
  78               	 ;  0 "" 2
  79               	.LVL6:
  80               	/* #NOAPP */
  81               	.LBE13:
  82 0016 8111      		cpse r24,__zero_reg__
  83 0018 00C0      		rjmp .L6
  84               	/* epilogue start */
 136:rn42/rn42_task.c **** }
  85               		.loc 1 136 0
  86 001a FF90      		pop r15
  87 001c EF90      		pop r14
  88               	.LVL7:
  89 001e 0895      		ret
  90               		.cfi_endproc
  91               	.LFE109:
  93               		.section	.text.print_rn42,"ax",@progbits
  95               	print_rn42:
  96               	.LFB107:
 116:rn42/rn42_task.c **** {
  97               		.loc 1 116 0
  98               		.cfi_startproc
  99 0000 EF92      		push r14
 100               	.LCFI2:
 101               		.cfi_def_cfa_offset 3
 102               		.cfi_offset 14, -2
 103 0002 FF92      		push r15
 104               	.LCFI3:
 105               		.cfi_def_cfa_offset 4
 106               		.cfi_offset 15, -3
 107               	/* prologue: function */
 108               	/* frame size = 0 */
 109               	/* stack size = 2 */
 110               	.L__stack_usage = 2
 119:rn42/rn42_task.c ****         xprintf("%c", c);
 111               		.loc 1 119 0
 112 0004 80E0      		ldi r24,lo8(__c.4662)
 113 0006 E82E      		mov r14,r24
 114 0008 80E0      		ldi r24,hi8(__c.4662)
 115 000a F82E      		mov r15,r24
 118:rn42/rn42_task.c ****     while ((c = rn42_getc()) != -1) {
 116               		.loc 1 118 0
 117 000c 00C0      		rjmp .L8
 118               	.LVL8:
 119               	.L9:
 119:rn42/rn42_task.c ****         xprintf("%c", c);
 120               		.loc 1 119 0
 121 000e 9F93      		push r25
 122               	.LCFI4:
 123               		.cfi_def_cfa_offset 5
 124 0010 8F93      		push r24
 125               	.LCFI5:
 126               		.cfi_def_cfa_offset 6
 127 0012 FF92      		push r15
 128               	.LCFI6:
 129               		.cfi_def_cfa_offset 7
 130 0014 EF92      		push r14
 131               	.LCFI7:
 132               		.cfi_def_cfa_offset 8
 133 0016 0E94 0000 		call __xprintf
 134               	.LVL9:
 135 001a 0F90      		pop __tmp_reg__
 136 001c 0F90      		pop __tmp_reg__
 137 001e 0F90      		pop __tmp_reg__
 138 0020 0F90      		pop __tmp_reg__
 139               	.LCFI8:
 140               		.cfi_def_cfa_offset 4
 141               	.L8:
 118:rn42/rn42_task.c ****     while ((c = rn42_getc()) != -1) {
 142               		.loc 1 118 0 discriminator 1
 143 0022 0E94 0000 		call rn42_getc
 144               	.LVL10:
 145 0026 8F3F      		cpi r24,-1
 146 0028 2FEF      		ldi r18,-1
 147 002a 9207      		cpc r25,r18
 148 002c 01F4      		brne .L9
 149               	/* epilogue start */
 121:rn42/rn42_task.c **** }
 150               		.loc 1 121 0
 151 002e FF90      		pop r15
 152 0030 EF90      		pop r14
 153 0032 0895      		ret
 154               		.cfi_endproc
 155               	.LFE107:
 157               		.section	.text.send_command,"ax",@progbits
 159               	send_command:
 160               	.LFB110:
 137:rn42/rn42_task.c **** 
 138:rn42/rn42_task.c **** static const char *send_command(const char *cmd)
 139:rn42/rn42_task.c **** {
 161               		.loc 1 139 0
 162               		.cfi_startproc
 163               	.LVL11:
 164               	/* prologue: function */
 165               	/* frame size = 0 */
 166               	/* stack size = 0 */
 167               	.L__stack_usage = 0
 140:rn42/rn42_task.c ****     static const char *s;
 141:rn42/rn42_task.c ****     send_str(cmd);
 168               		.loc 1 141 0
 169 0000 0E94 0000 		call send_str
 170               	.LVL12:
 171               	.LBB14:
 172               	.LBB15:
 173               		.file 2 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h"
   1:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
   6:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
   9:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  12:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  17:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  21:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  33:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  35:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  38:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  41:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  42:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  46:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \code
  49:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  54:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     used.
  58:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  59:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  68:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  77:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  81:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** */
  82:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  83:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  87:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  88:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  93:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  94:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
  97:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
  98:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #endif
 103:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 104:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** /**
 105:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 107:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 109:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 112:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 114:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 120:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 125:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 129:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 132:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 140:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****  */
 141:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** void
 142:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** {
 144:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 153:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 156:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 159:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 
 164:/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 174               		.loc 2 164 0
 175 0004 2FEF      		ldi r18,lo8(799999)
 176 0006 84E3      		ldi r24,hi8(799999)
 177 0008 9CE0      		ldi r25,hlo8(799999)
 178 000a 2150      		1: subi r18,1
 179 000c 8040      		sbci r24,0
 180 000e 9040      		sbci r25,0
 181 0010 01F4      		brne 1b
 182 0012 00C0      		rjmp .
 183 0014 0000      		nop
 184               	.LBE15:
 185               	.LBE14:
 142:rn42/rn42_task.c ****     wait_ms(500);
 143:rn42/rn42_task.c ****     s = rn42_gets(100);
 186               		.loc 1 143 0
 187 0016 84E6      		ldi r24,lo8(100)
 188 0018 90E0      		ldi r25,0
 189 001a 0E94 0000 		call rn42_gets
 190               	.LVL13:
 191 001e 8093 0000 		sts s.4686,r24
 192 0022 9093 0000 		sts s.4686+1,r25
 144:rn42/rn42_task.c ****     xprintf("%s\r\n", s);
 193               		.loc 1 144 0
 194 0026 9F93      		push r25
 195               	.LCFI9:
 196               		.cfi_def_cfa_offset 3
 197 0028 8F93      		push r24
 198               	.LCFI10:
 199               		.cfi_def_cfa_offset 4
 200 002a 80E0      		ldi r24,lo8(__c.4687)
 201 002c 90E0      		ldi r25,hi8(__c.4687)
 202 002e 9F93      		push r25
 203               	.LCFI11:
 204               		.cfi_def_cfa_offset 5
 205 0030 8F93      		push r24
 206               	.LCFI12:
 207               		.cfi_def_cfa_offset 6
 208 0032 0E94 0000 		call __xprintf
 209               	.LVL14:
 145:rn42/rn42_task.c ****     print_rn42();
 210               		.loc 1 145 0
 211 0036 0E94 0000 		call print_rn42
 212               	.LVL15:
 146:rn42/rn42_task.c ****     return s;
 213               		.loc 1 146 0
 214 003a 0F90      		pop __tmp_reg__
 215 003c 0F90      		pop __tmp_reg__
 216 003e 0F90      		pop __tmp_reg__
 217 0040 0F90      		pop __tmp_reg__
 218               	.LCFI13:
 219               		.cfi_def_cfa_offset 2
 147:rn42/rn42_task.c **** }
 220               		.loc 1 147 0
 221 0042 8091 0000 		lds r24,s.4686
 222 0046 9091 0000 		lds r25,s.4686+1
 223 004a 0895      		ret
 224               		.cfi_endproc
 225               	.LFE110:
 227               		.section	.text.get_link,"ax",@progbits
 229               	get_link:
 230               	.LFB116:
 148:rn42/rn42_task.c **** 
 149:rn42/rn42_task.c **** static void enter_command_mode(void)
 150:rn42/rn42_task.c **** {
 151:rn42/rn42_task.c ****     prev_driver = host_get_driver();
 152:rn42/rn42_task.c ****     clear_keyboard();
 153:rn42/rn42_task.c ****     host_set_driver(&rn42_config_driver);   // null driver; not to send a key to host
 154:rn42/rn42_task.c ****     rn42_disconnect();
 155:rn42/rn42_task.c ****     //while (rn42_linked()) ;
 156:rn42/rn42_task.c **** 
 157:rn42/rn42_task.c ****     print("Entering config mode ...\n");
 158:rn42/rn42_task.c ****     wait_ms(1100);          // need 1 sec
 159:rn42/rn42_task.c ****     SEND_COMMAND("$$$");
 160:rn42/rn42_task.c ****     wait_ms(600);           // need 1 sec
 161:rn42/rn42_task.c ****     print_rn42();
 162:rn42/rn42_task.c ****     const char *s = SEND_COMMAND("v\r\n");
 163:rn42/rn42_task.c ****     if (strncmp("v", s, 1) != 0) SEND_COMMAND("+\r\n"); // local echo on
 164:rn42/rn42_task.c **** }
 165:rn42/rn42_task.c **** 
 166:rn42/rn42_task.c **** static void exit_command_mode(void)
 167:rn42/rn42_task.c **** {
 168:rn42/rn42_task.c ****     print("Exiting config mode ...\n");
 169:rn42/rn42_task.c ****     SEND_COMMAND("---\r\n");    // exit
 170:rn42/rn42_task.c **** 
 171:rn42/rn42_task.c ****     rn42_autoconnect();
 172:rn42/rn42_task.c ****     clear_keyboard();
 173:rn42/rn42_task.c ****     host_set_driver(prev_driver);
 174:rn42/rn42_task.c **** }
 175:rn42/rn42_task.c **** 
 176:rn42/rn42_task.c **** static void init_rn42(void)
 177:rn42/rn42_task.c **** {
 178:rn42/rn42_task.c ****     // RN-42 configure
 179:rn42/rn42_task.c ****     // Should probably put in a baud rate setting..? Maybe?
 180:rn42/rn42_task.c ****     // only remembering 4 pairings?
 181:rn42/rn42_task.c ****     if (!config_mode) enter_command_mode();
 182:rn42/rn42_task.c ****     SEND_COMMAND("SF,1\r\n");  // factory defaults
 183:rn42/rn42_task.c ****     SEND_COMMAND("S-,TmkBT\r\n"); //sets the serialized "friendly name"
 184:rn42/rn42_task.c ****     SEND_COMMAND("SS,Keyboard/Mouse\r\n"); // sets "service name"
 185:rn42/rn42_task.c ****     SEND_COMMAND("SM,4\r\n");  // auto connect(DTR) - use gpio 6 to make and break connections
 186:rn42/rn42_task.c ****     SEND_COMMAND("SW,8000\r\n");   // Sniff disable - deep sleep setting READ MORE
 187:rn42/rn42_task.c ****     SEND_COMMAND("S~,6\r\n");   // HID profile
 188:rn42/rn42_task.c ****     SEND_COMMAND("SH,003C\r\n");   // combo device, out-report, 4-reconnect. binary: 111100
 189:rn42/rn42_task.c ****     SEND_COMMAND("SY,FFF4\r\n");   // transmit power -12
 190:rn42/rn42_task.c ****     SEND_COMMAND("R,1\r\n");	// reboot module
 191:rn42/rn42_task.c ****     if (!config_mode) exit_command_mode();
 192:rn42/rn42_task.c **** }
 193:rn42/rn42_task.c **** 
 194:rn42/rn42_task.c **** 
 195:rn42/rn42_task.c **** // Switching connections
 196:rn42/rn42_task.c **** // NOTE: Remote Address doesn't work in the way manual says.
 197:rn42/rn42_task.c **** // EEPROM address for link store
 198:rn42/rn42_task.c **** #define RN42_LINK0  (uint8_t *)128
 199:rn42/rn42_task.c **** #define RN42_LINK1  (uint8_t *)140
 200:rn42/rn42_task.c **** #define RN42_LINK2  (uint8_t *)152
 201:rn42/rn42_task.c **** #define RN42_LINK3  (uint8_t *)164
 202:rn42/rn42_task.c **** static void store_link(uint8_t *eeaddr)
 203:rn42/rn42_task.c **** {
 204:rn42/rn42_task.c ****     enter_command_mode();
 205:rn42/rn42_task.c ****     SEND_STR("GR\r\n"); // remote address
 206:rn42/rn42_task.c ****     const char *s = rn42_gets(500);
 207:rn42/rn42_task.c ****     if (strcmp("GR", s) == 0) s = rn42_gets(500);   // ignore local echo
 208:rn42/rn42_task.c ****     xprintf("%s(%d)\r\n", s, strlen(s));
 209:rn42/rn42_task.c ****     if (strlen(s) == 12) {
 210:rn42/rn42_task.c ****         for (int i = 0; i < 12; i++) {
 211:rn42/rn42_task.c ****             eeprom_write_byte(eeaddr+i, *(s+i));
 212:rn42/rn42_task.c ****             dprintf("%c ", *(s+i));
 213:rn42/rn42_task.c ****         }
 214:rn42/rn42_task.c ****         dprint("\r\n");
 215:rn42/rn42_task.c ****     }
 216:rn42/rn42_task.c ****     exit_command_mode();
 217:rn42/rn42_task.c **** }
 218:rn42/rn42_task.c **** 
 219:rn42/rn42_task.c **** static void restore_link(const uint8_t *eeaddr)
 220:rn42/rn42_task.c **** {
 221:rn42/rn42_task.c ****     enter_command_mode();
 222:rn42/rn42_task.c ****     SEND_COMMAND("SR,Z\r\n");   // remove remote address
 223:rn42/rn42_task.c ****     SEND_STR("SR,");            // set remote address from EEPROM
 224:rn42/rn42_task.c ****     for (int i = 0; i < 12; i++) {
 225:rn42/rn42_task.c ****         uint8_t c = eeprom_read_byte(eeaddr+i);
 226:rn42/rn42_task.c ****         rn42_putc(c);
 227:rn42/rn42_task.c ****         dprintf("%c ", c);
 228:rn42/rn42_task.c ****     }
 229:rn42/rn42_task.c ****     dprintf("\r\n");
 230:rn42/rn42_task.c ****     SEND_COMMAND("\r\n");
 231:rn42/rn42_task.c ****     SEND_COMMAND("R,1\r\n");    // reboot
 232:rn42/rn42_task.c ****     exit_command_mode();
 233:rn42/rn42_task.c **** }
 234:rn42/rn42_task.c **** 
 235:rn42/rn42_task.c **** static const char *get_link(uint8_t * eeaddr)
 236:rn42/rn42_task.c **** {
 231               		.loc 1 236 0
 232               		.cfi_startproc
 233               	.LVL16:
 234 0000 AF92      		push r10
 235               	.LCFI14:
 236               		.cfi_def_cfa_offset 3
 237               		.cfi_offset 10, -2
 238 0002 BF92      		push r11
 239               	.LCFI15:
 240               		.cfi_def_cfa_offset 4
 241               		.cfi_offset 11, -3
 242 0004 CF92      		push r12
 243               	.LCFI16:
 244               		.cfi_def_cfa_offset 5
 245               		.cfi_offset 12, -4
 246 0006 DF92      		push r13
 247               	.LCFI17:
 248               		.cfi_def_cfa_offset 6
 249               		.cfi_offset 13, -5
 250 0008 EF92      		push r14
 251               	.LCFI18:
 252               		.cfi_def_cfa_offset 7
 253               		.cfi_offset 14, -6
 254 000a FF92      		push r15
 255               	.LCFI19:
 256               		.cfi_def_cfa_offset 8
 257               		.cfi_offset 15, -7
 258               	/* prologue: function */
 259               	/* frame size = 0 */
 260               	/* stack size = 6 */
 261               	.L__stack_usage = 6
 262 000c 5C01      		movw r10,r24
 263               	.LVL17:
 264 000e 90E0      		ldi r25,lo8(s.4768)
 265 0010 C92E      		mov r12,r25
 266 0012 90E0      		ldi r25,hi8(s.4768)
 267 0014 D92E      		mov r13,r25
 237:rn42/rn42_task.c ****     static char s[13];
 238:rn42/rn42_task.c ****     for (int i = 0; i < 12; i++) {
 268               		.loc 1 238 0
 269 0016 E12C      		mov r14,__zero_reg__
 270 0018 F12C      		mov r15,__zero_reg__
 271               	.LVL18:
 272               	.L12:
 273               	.LBB16:
 274               	.LBB17:
 239:rn42/rn42_task.c ****         uint8_t c = eeprom_read_byte(eeaddr+i);
 275               		.loc 1 239 0 discriminator 2
 276 001a C501      		movw r24,r10
 277 001c 8E0D      		add r24,r14
 278 001e 9F1D      		adc r25,r15
 279 0020 0E94 0000 		call __eerd_byte_usb1286
 280               	.LVL19:
 240:rn42/rn42_task.c ****         s[i] = c;
 281               		.loc 1 240 0 discriminator 2
 282 0024 F601      		movw r30,r12
 283 0026 8193      		st Z+,r24
 284 0028 6F01      		movw r12,r30
 285               	.LBE17:
 238:rn42/rn42_task.c ****     for (int i = 0; i < 12; i++) {
 286               		.loc 1 238 0 discriminator 2
 287 002a FFEF      		ldi r31,-1
 288 002c EF1A      		sub r14,r31
 289 002e FF0A      		sbc r15,r31
 290               	.LVL20:
 291 0030 8CE0      		ldi r24,12
 292 0032 E816      		cp r14,r24
 293 0034 F104      		cpc r15,__zero_reg__
 294               	.LVL21:
 295 0036 01F4      		brne .L12
 296               	.LBE16:
 241:rn42/rn42_task.c ****     }
 242:rn42/rn42_task.c ****     s[12] = '\0';
 297               		.loc 1 242 0
 298 0038 1092 0000 		sts s.4768+12,__zero_reg__
 243:rn42/rn42_task.c ****     return s;
 244:rn42/rn42_task.c **** }
 299               		.loc 1 244 0
 300 003c 80E0      		ldi r24,lo8(s.4768)
 301 003e 90E0      		ldi r25,hi8(s.4768)
 302               	/* epilogue start */
 303 0040 FF90      		pop r15
 304 0042 EF90      		pop r14
 305               	.LVL22:
 306 0044 DF90      		pop r13
 307 0046 CF90      		pop r12
 308               	.LVL23:
 309 0048 BF90      		pop r11
 310 004a AF90      		pop r10
 311               	.LVL24:
 312 004c 0895      		ret
 313               		.cfi_endproc
 314               	.LFE116:
 316               		.section	.text.enter_command_mode,"ax",@progbits
 318               	enter_command_mode:
 319               	.LFB111:
 150:rn42/rn42_task.c **** {
 320               		.loc 1 150 0
 321               		.cfi_startproc
 322               	/* prologue: function */
 323               	/* frame size = 0 */
 324               	/* stack size = 0 */
 325               	.L__stack_usage = 0
 151:rn42/rn42_task.c ****     prev_driver = host_get_driver();
 326               		.loc 1 151 0
 327 0000 0E94 0000 		call host_get_driver
 328               	.LVL25:
 329 0004 9093 0000 		sts prev_driver+1,r25
 330 0008 8093 0000 		sts prev_driver,r24
 152:rn42/rn42_task.c ****     clear_keyboard();
 331               		.loc 1 152 0
 332 000c 0E94 0000 		call clear_keyboard
 333               	.LVL26:
 153:rn42/rn42_task.c ****     host_set_driver(&rn42_config_driver);   // null driver; not to send a key to host
 334               		.loc 1 153 0
 335 0010 80E0      		ldi r24,lo8(rn42_config_driver)
 336 0012 90E0      		ldi r25,hi8(rn42_config_driver)
 337 0014 0E94 0000 		call host_set_driver
 338               	.LVL27:
 154:rn42/rn42_task.c ****     rn42_disconnect();
 339               		.loc 1 154 0
 340 0018 0E94 0000 		call rn42_disconnect
 341               	.LVL28:
 157:rn42/rn42_task.c ****     print("Entering config mode ...\n");
 342               		.loc 1 157 0
 343 001c 80E0      		ldi r24,lo8(__c.4692)
 344 001e 90E0      		ldi r25,hi8(__c.4692)
 345 0020 0E94 0000 		call xputs
 346               	.LVL29:
 347               	.LBB18:
 348               	.LBB19:
 349               		.loc 2 164 0
 350 0024 2FEF      		ldi r18,lo8(1759999)
 351 0026 8AED      		ldi r24,hi8(1759999)
 352 0028 9AE1      		ldi r25,hlo8(1759999)
 353 002a 2150      		1: subi r18,1
 354 002c 8040      		sbci r24,0
 355 002e 9040      		sbci r25,0
 356 0030 01F4      		brne 1b
 357 0032 00C0      		rjmp .
 358 0034 0000      		nop
 359               	.LBE19:
 360               	.LBE18:
 159:rn42/rn42_task.c ****     SEND_COMMAND("$$$");
 361               		.loc 1 159 0
 362 0036 80E0      		ldi r24,lo8(__c.4694)
 363 0038 90E0      		ldi r25,hi8(__c.4694)
 364 003a 0E94 0000 		call send_command
 365               	.LVL30:
 366               	.LBB20:
 367               	.LBB21:
 368               		.loc 2 164 0
 369 003e EFEF      		ldi r30,lo8(959999)
 370 0040 F5EA      		ldi r31,hi8(959999)
 371 0042 2EE0      		ldi r18,hlo8(959999)
 372 0044 E150      		1: subi r30,1
 373 0046 F040      		sbci r31,0
 374 0048 2040      		sbci r18,0
 375 004a 01F4      		brne 1b
 376 004c 00C0      		rjmp .
 377 004e 0000      		nop
 378               	.LBE21:
 379               	.LBE20:
 161:rn42/rn42_task.c ****     print_rn42();
 380               		.loc 1 161 0
 381 0050 0E94 0000 		call print_rn42
 382               	.LVL31:
 162:rn42/rn42_task.c ****     const char *s = SEND_COMMAND("v\r\n");
 383               		.loc 1 162 0
 384 0054 80E0      		ldi r24,lo8(__c.4697)
 385 0056 90E0      		ldi r25,hi8(__c.4697)
 386 0058 0E94 0000 		call send_command
 387               	.LVL32:
 163:rn42/rn42_task.c ****     if (strncmp("v", s, 1) != 0) SEND_COMMAND("+\r\n"); // local echo on
 388               		.loc 1 163 0
 389 005c FC01      		movw r30,r24
 390 005e 8081      		ld r24,Z
 391               	.LVL33:
 392 0060 8637      		cpi r24,lo8(118)
 393 0062 01F0      		breq .L14
 163:rn42/rn42_task.c ****     if (strncmp("v", s, 1) != 0) SEND_COMMAND("+\r\n"); // local echo on
 394               		.loc 1 163 0 is_stmt 0 discriminator 1
 395 0064 80E0      		ldi r24,lo8(__c.4699)
 396 0066 90E0      		ldi r25,hi8(__c.4699)
 397 0068 0C94 0000 		jmp send_command
 398               	.LVL34:
 399               	.L14:
 400 006c 0895      		ret
 401               		.cfi_endproc
 402               	.LFE111:
 404               		.section	.text.exit_command_mode,"ax",@progbits
 406               	exit_command_mode:
 407               	.LFB112:
 167:rn42/rn42_task.c **** {
 408               		.loc 1 167 0 is_stmt 1
 409               		.cfi_startproc
 410               	/* prologue: function */
 411               	/* frame size = 0 */
 412               	/* stack size = 0 */
 413               	.L__stack_usage = 0
 168:rn42/rn42_task.c ****     print("Exiting config mode ...\n");
 414               		.loc 1 168 0
 415 0000 80E0      		ldi r24,lo8(__c.4704)
 416 0002 90E0      		ldi r25,hi8(__c.4704)
 417 0004 0E94 0000 		call xputs
 418               	.LVL35:
 169:rn42/rn42_task.c ****     SEND_COMMAND("---\r\n");    // exit
 419               		.loc 1 169 0
 420 0008 80E0      		ldi r24,lo8(__c.4706)
 421 000a 90E0      		ldi r25,hi8(__c.4706)
 422 000c 0E94 0000 		call send_command
 423               	.LVL36:
 171:rn42/rn42_task.c ****     rn42_autoconnect();
 424               		.loc 1 171 0
 425 0010 0E94 0000 		call rn42_autoconnect
 426               	.LVL37:
 172:rn42/rn42_task.c ****     clear_keyboard();
 427               		.loc 1 172 0
 428 0014 0E94 0000 		call clear_keyboard
 429               	.LVL38:
 173:rn42/rn42_task.c ****     host_set_driver(prev_driver);
 430               		.loc 1 173 0
 431 0018 8091 0000 		lds r24,prev_driver
 432 001c 9091 0000 		lds r25,prev_driver+1
 433 0020 0C94 0000 		jmp host_set_driver
 434               	.LVL39:
 435               		.cfi_endproc
 436               	.LFE112:
 438               		.section	.rodata.str1.1,"aMS",@progbits,1
 439               	.LC0:
 440 0000 4752 00   		.string	"GR"
 441               		.section	.text.store_link,"ax",@progbits
 443               	store_link:
 444               	.LFB114:
 203:rn42/rn42_task.c **** {
 445               		.loc 1 203 0
 446               		.cfi_startproc
 447               	.LVL40:
 448 0000 8F92      		push r8
 449               	.LCFI20:
 450               		.cfi_def_cfa_offset 3
 451               		.cfi_offset 8, -2
 452 0002 9F92      		push r9
 453               	.LCFI21:
 454               		.cfi_def_cfa_offset 4
 455               		.cfi_offset 9, -3
 456 0004 AF92      		push r10
 457               	.LCFI22:
 458               		.cfi_def_cfa_offset 5
 459               		.cfi_offset 10, -4
 460 0006 BF92      		push r11
 461               	.LCFI23:
 462               		.cfi_def_cfa_offset 6
 463               		.cfi_offset 11, -5
 464 0008 CF92      		push r12
 465               	.LCFI24:
 466               		.cfi_def_cfa_offset 7
 467               		.cfi_offset 12, -6
 468 000a DF92      		push r13
 469               	.LCFI25:
 470               		.cfi_def_cfa_offset 8
 471               		.cfi_offset 13, -7
 472 000c EF92      		push r14
 473               	.LCFI26:
 474               		.cfi_def_cfa_offset 9
 475               		.cfi_offset 14, -8
 476 000e FF92      		push r15
 477               	.LCFI27:
 478               		.cfi_def_cfa_offset 10
 479               		.cfi_offset 15, -9
 480               	/* prologue: function */
 481               	/* frame size = 0 */
 482               	/* stack size = 8 */
 483               	.L__stack_usage = 8
 484 0010 4C01      		movw r8,r24
 204:rn42/rn42_task.c ****     enter_command_mode();
 485               		.loc 1 204 0
 486 0012 0E94 0000 		call enter_command_mode
 487               	.LVL41:
 205:rn42/rn42_task.c ****     SEND_STR("GR\r\n"); // remote address
 488               		.loc 1 205 0
 489 0016 80E0      		ldi r24,lo8(__c.4732)
 490 0018 90E0      		ldi r25,hi8(__c.4732)
 491 001a 0E94 0000 		call send_str
 492               	.LVL42:
 206:rn42/rn42_task.c ****     const char *s = rn42_gets(500);
 493               		.loc 1 206 0
 494 001e 84EF      		ldi r24,lo8(-12)
 495 0020 91E0      		ldi r25,lo8(1)
 496 0022 0E94 0000 		call rn42_gets
 497               	.LVL43:
 498 0026 6C01      		movw r12,r24
 499               	.LVL44:
 207:rn42/rn42_task.c ****     if (strcmp("GR", s) == 0) s = rn42_gets(500);   // ignore local echo
 500               		.loc 1 207 0
 501 0028 BC01      		movw r22,r24
 502 002a 80E0      		ldi r24,lo8(.LC0)
 503 002c 90E0      		ldi r25,hi8(.LC0)
 504               	.LVL45:
 505 002e 0E94 0000 		call strcmp
 506               	.LVL46:
 507 0032 0097      		sbiw r24,0
 508 0034 01F4      		brne .L18
 207:rn42/rn42_task.c ****     if (strcmp("GR", s) == 0) s = rn42_gets(500);   // ignore local echo
 509               		.loc 1 207 0 is_stmt 0 discriminator 1
 510 0036 84EF      		ldi r24,lo8(-12)
 511 0038 91E0      		ldi r25,lo8(1)
 512 003a 0E94 0000 		call rn42_gets
 513               	.LVL47:
 514 003e 6C01      		movw r12,r24
 515               	.LVL48:
 516               	.L18:
 208:rn42/rn42_task.c ****     xprintf("%s(%d)\r\n", s, strlen(s));
 517               		.loc 1 208 0 is_stmt 1
 518 0040 F601      		movw r30,r12
 519               		0:
 520 0042 0190      		ld __tmp_reg__,Z+
 521 0044 0020      		tst __tmp_reg__
 522 0046 01F4      		brne 0b
 523 0048 3197      		sbiw r30,1
 524 004a EC19      		sub r30,r12
 525 004c FD09      		sbc r31,r13
 526 004e FF93      		push r31
 527               	.LCFI28:
 528               		.cfi_def_cfa_offset 11
 529 0050 EF93      		push r30
 530               	.LCFI29:
 531               		.cfi_def_cfa_offset 12
 532 0052 DF92      		push r13
 533               	.LCFI30:
 534               		.cfi_def_cfa_offset 13
 535 0054 CF92      		push r12
 536               	.LCFI31:
 537               		.cfi_def_cfa_offset 14
 538 0056 20E0      		ldi r18,lo8(__c.4735)
 539 0058 30E0      		ldi r19,hi8(__c.4735)
 540 005a 3F93      		push r19
 541               	.LCFI32:
 542               		.cfi_def_cfa_offset 15
 543 005c 2F93      		push r18
 544               	.LCFI33:
 545               		.cfi_def_cfa_offset 16
 546 005e 0E94 0000 		call __xprintf
 547               	.LVL49:
 209:rn42/rn42_task.c ****     if (strlen(s) == 12) {
 548               		.loc 1 209 0
 549 0062 D601      		movw r26,r12
 550               		0:
 551 0064 0D90      		ld __tmp_reg__,X+
 552 0066 0020      		tst __tmp_reg__
 553 0068 01F4      		brne 0b
 554 006a 1D97      		sbiw r26,13
 555 006c 0F90      		pop __tmp_reg__
 556 006e 0F90      		pop __tmp_reg__
 557 0070 0F90      		pop __tmp_reg__
 558 0072 0F90      		pop __tmp_reg__
 559 0074 0F90      		pop __tmp_reg__
 560 0076 0F90      		pop __tmp_reg__
 561               	.LCFI34:
 562               		.cfi_def_cfa_offset 10
 563 0078 AC15      		cp r26,r12
 564 007a BD05      		cpc r27,r13
 565 007c 01F4      		brne .L20
 566 007e 7601      		movw r14,r12
 567 0080 C12C      		mov r12,__zero_reg__
 568 0082 D12C      		mov r13,__zero_reg__
 569               	.LVL50:
 570               	.LBB22:
 212:rn42/rn42_task.c ****             dprintf("%c ", *(s+i));
 571               		.loc 1 212 0
 572 0084 20E0      		ldi r18,lo8(__c.4738)
 573 0086 A22E      		mov r10,r18
 574 0088 20E0      		ldi r18,hi8(__c.4738)
 575 008a B22E      		mov r11,r18
 576               	.L22:
 211:rn42/rn42_task.c ****             eeprom_write_byte(eeaddr+i, *(s+i));
 577               		.loc 1 211 0
 578 008c F701      		movw r30,r14
 579 008e 6081      		ld r22,Z
 580 0090 C401      		movw r24,r8
 581 0092 8C0D      		add r24,r12
 582 0094 9D1D      		adc r25,r13
 583 0096 0E94 0000 		call __eewr_byte_usb1286
 584               	.LVL51:
 212:rn42/rn42_task.c ****             dprintf("%c ", *(s+i));
 585               		.loc 1 212 0
 586 009a 8091 0000 		lds r24,debug_config
 587 009e 80FF      		sbrs r24,0
 588 00a0 00C0      		rjmp .L21
 212:rn42/rn42_task.c ****             dprintf("%c ", *(s+i));
 589               		.loc 1 212 0 is_stmt 0 discriminator 1
 590 00a2 F701      		movw r30,r14
 591 00a4 8081      		ld r24,Z
 592 00a6 1F92      		push __zero_reg__
 593               	.LCFI35:
 594               		.cfi_def_cfa_offset 11
 595 00a8 8F93      		push r24
 596               	.LCFI36:
 597               		.cfi_def_cfa_offset 12
 598 00aa BF92      		push r11
 599               	.LCFI37:
 600               		.cfi_def_cfa_offset 13
 601 00ac AF92      		push r10
 602               	.LCFI38:
 603               		.cfi_def_cfa_offset 14
 604 00ae 0E94 0000 		call __xprintf
 605               	.LVL52:
 606 00b2 0F90      		pop __tmp_reg__
 607 00b4 0F90      		pop __tmp_reg__
 608 00b6 0F90      		pop __tmp_reg__
 609 00b8 0F90      		pop __tmp_reg__
 610               	.LCFI39:
 611               		.cfi_def_cfa_offset 10
 612               	.L21:
 210:rn42/rn42_task.c ****         for (int i = 0; i < 12; i++) {
 613               		.loc 1 210 0 is_stmt 1
 614 00ba FFEF      		ldi r31,-1
 615 00bc CF1A      		sub r12,r31
 616 00be DF0A      		sbc r13,r31
 617               	.LVL53:
 618 00c0 8FEF      		ldi r24,-1
 619 00c2 E81A      		sub r14,r24
 620 00c4 F80A      		sbc r15,r24
 621 00c6 ECE0      		ldi r30,12
 622 00c8 CE16      		cp r12,r30
 623 00ca D104      		cpc r13,__zero_reg__
 624 00cc 01F4      		brne .L22
 625               	.LBE22:
 214:rn42/rn42_task.c ****         dprint("\r\n");
 626               		.loc 1 214 0
 627 00ce 8091 0000 		lds r24,debug_config
 628 00d2 80FF      		sbrs r24,0
 629 00d4 00C0      		rjmp .L20
 214:rn42/rn42_task.c ****         dprint("\r\n");
 630               		.loc 1 214 0 is_stmt 0 discriminator 1
 631 00d6 80E0      		ldi r24,lo8(__c.4743)
 632 00d8 90E0      		ldi r25,hi8(__c.4743)
 633 00da 0E94 0000 		call xputs
 634               	.LVL54:
 635               	.L20:
 636               	/* epilogue start */
 217:rn42/rn42_task.c **** }
 637               		.loc 1 217 0 is_stmt 1
 638 00de FF90      		pop r15
 639 00e0 EF90      		pop r14
 640 00e2 DF90      		pop r13
 641 00e4 CF90      		pop r12
 642 00e6 BF90      		pop r11
 643 00e8 AF90      		pop r10
 644 00ea 9F90      		pop r9
 645 00ec 8F90      		pop r8
 646               	.LVL55:
 216:rn42/rn42_task.c ****     exit_command_mode();
 647               		.loc 1 216 0
 648 00ee 0C94 0000 		jmp exit_command_mode
 649               	.LVL56:
 650               		.cfi_endproc
 651               	.LFE114:
 653               		.section	.text.restore_link,"ax",@progbits
 655               	restore_link:
 656               	.LFB115:
 220:rn42/rn42_task.c **** {
 657               		.loc 1 220 0
 658               		.cfi_startproc
 659               	.LVL57:
 660 0000 AF92      		push r10
 661               	.LCFI40:
 662               		.cfi_def_cfa_offset 3
 663               		.cfi_offset 10, -2
 664 0002 BF92      		push r11
 665               	.LCFI41:
 666               		.cfi_def_cfa_offset 4
 667               		.cfi_offset 11, -3
 668 0004 CF92      		push r12
 669               	.LCFI42:
 670               		.cfi_def_cfa_offset 5
 671               		.cfi_offset 12, -4
 672 0006 DF92      		push r13
 673               	.LCFI43:
 674               		.cfi_def_cfa_offset 6
 675               		.cfi_offset 13, -5
 676 0008 EF92      		push r14
 677               	.LCFI44:
 678               		.cfi_def_cfa_offset 7
 679               		.cfi_offset 14, -6
 680 000a FF92      		push r15
 681               	.LCFI45:
 682               		.cfi_def_cfa_offset 8
 683               		.cfi_offset 15, -7
 684 000c CF93      		push r28
 685               	.LCFI46:
 686               		.cfi_def_cfa_offset 9
 687               		.cfi_offset 28, -8
 688               	/* prologue: function */
 689               	/* frame size = 0 */
 690               	/* stack size = 7 */
 691               	.L__stack_usage = 7
 692 000e 5C01      		movw r10,r24
 221:rn42/rn42_task.c ****     enter_command_mode();
 693               		.loc 1 221 0
 694 0010 0E94 0000 		call enter_command_mode
 695               	.LVL58:
 222:rn42/rn42_task.c ****     SEND_COMMAND("SR,Z\r\n");   // remove remote address
 696               		.loc 1 222 0
 697 0014 80E0      		ldi r24,lo8(__c.4748)
 698 0016 90E0      		ldi r25,hi8(__c.4748)
 699 0018 0E94 0000 		call send_command
 700               	.LVL59:
 223:rn42/rn42_task.c ****     SEND_STR("SR,");            // set remote address from EEPROM
 701               		.loc 1 223 0
 702 001c 80E0      		ldi r24,lo8(__c.4750)
 703 001e 90E0      		ldi r25,hi8(__c.4750)
 704 0020 0E94 0000 		call send_str
 705               	.LVL60:
 224:rn42/rn42_task.c ****     for (int i = 0; i < 12; i++) {
 706               		.loc 1 224 0
 707 0024 E12C      		mov r14,__zero_reg__
 708 0026 F12C      		mov r15,__zero_reg__
 709               	.LBB23:
 710               	.LBB24:
 227:rn42/rn42_task.c ****         dprintf("%c ", c);
 711               		.loc 1 227 0
 712 0028 30E0      		ldi r19,lo8(__c.4754)
 713 002a C32E      		mov r12,r19
 714 002c 30E0      		ldi r19,hi8(__c.4754)
 715 002e D32E      		mov r13,r19
 716               	.LVL61:
 717               	.L33:
 225:rn42/rn42_task.c ****         uint8_t c = eeprom_read_byte(eeaddr+i);
 718               		.loc 1 225 0
 719 0030 C501      		movw r24,r10
 720 0032 8E0D      		add r24,r14
 721 0034 9F1D      		adc r25,r15
 722 0036 0E94 0000 		call __eerd_byte_usb1286
 723               	.LVL62:
 724 003a C82F      		mov r28,r24
 725               	.LVL63:
 226:rn42/rn42_task.c ****         rn42_putc(c);
 726               		.loc 1 226 0
 727 003c 0E94 0000 		call rn42_putc
 728               	.LVL64:
 227:rn42/rn42_task.c ****         dprintf("%c ", c);
 729               		.loc 1 227 0
 730 0040 8091 0000 		lds r24,debug_config
 731 0044 80FF      		sbrs r24,0
 732 0046 00C0      		rjmp .L32
 227:rn42/rn42_task.c ****         dprintf("%c ", c);
 733               		.loc 1 227 0 is_stmt 0 discriminator 1
 734 0048 1F92      		push __zero_reg__
 735               	.LCFI47:
 736               		.cfi_def_cfa_offset 10
 737 004a CF93      		push r28
 738               	.LCFI48:
 739               		.cfi_def_cfa_offset 11
 740 004c DF92      		push r13
 741               	.LCFI49:
 742               		.cfi_def_cfa_offset 12
 743 004e CF92      		push r12
 744               	.LCFI50:
 745               		.cfi_def_cfa_offset 13
 746 0050 0E94 0000 		call __xprintf
 747               	.LVL65:
 748 0054 0F90      		pop __tmp_reg__
 749 0056 0F90      		pop __tmp_reg__
 750 0058 0F90      		pop __tmp_reg__
 751 005a 0F90      		pop __tmp_reg__
 752               	.LCFI51:
 753               		.cfi_def_cfa_offset 9
 754               	.L32:
 755               	.LBE24:
 224:rn42/rn42_task.c ****     for (int i = 0; i < 12; i++) {
 756               		.loc 1 224 0 is_stmt 1
 757 005c 8FEF      		ldi r24,-1
 758 005e E81A      		sub r14,r24
 759 0060 F80A      		sbc r15,r24
 760               	.LVL66:
 761 0062 8CE0      		ldi r24,12
 762 0064 E816      		cp r14,r24
 763 0066 F104      		cpc r15,__zero_reg__
 764 0068 01F4      		brne .L33
 765               	.LBE23:
 229:rn42/rn42_task.c ****     dprintf("\r\n");
 766               		.loc 1 229 0
 767 006a 8091 0000 		lds r24,debug_config
 768 006e 80FF      		sbrs r24,0
 769 0070 00C0      		rjmp .L34
 229:rn42/rn42_task.c ****     dprintf("\r\n");
 770               		.loc 1 229 0 is_stmt 0 discriminator 1
 771 0072 80E0      		ldi r24,lo8(__c.4759)
 772 0074 90E0      		ldi r25,hi8(__c.4759)
 773 0076 9F93      		push r25
 774               	.LCFI52:
 775               		.cfi_def_cfa_offset 10
 776 0078 8F93      		push r24
 777               	.LCFI53:
 778               		.cfi_def_cfa_offset 11
 779 007a 0E94 0000 		call __xprintf
 780               	.LVL67:
 781 007e 0F90      		pop __tmp_reg__
 782 0080 0F90      		pop __tmp_reg__
 783               	.LCFI54:
 784               		.cfi_def_cfa_offset 9
 785               	.L34:
 230:rn42/rn42_task.c ****     SEND_COMMAND("\r\n");
 786               		.loc 1 230 0 is_stmt 1
 787 0082 80E0      		ldi r24,lo8(__c.4761)
 788 0084 90E0      		ldi r25,hi8(__c.4761)
 789 0086 0E94 0000 		call send_command
 790               	.LVL68:
 231:rn42/rn42_task.c ****     SEND_COMMAND("R,1\r\n");    // reboot
 791               		.loc 1 231 0
 792 008a 80E0      		ldi r24,lo8(__c.4763)
 793 008c 90E0      		ldi r25,hi8(__c.4763)
 794 008e 0E94 0000 		call send_command
 795               	.LVL69:
 796               	/* epilogue start */
 233:rn42/rn42_task.c **** }
 797               		.loc 1 233 0
 798 0092 CF91      		pop r28
 799               	.LVL70:
 800 0094 FF90      		pop r15
 801 0096 EF90      		pop r14
 802               	.LVL71:
 803 0098 DF90      		pop r13
 804 009a CF90      		pop r12
 805 009c BF90      		pop r11
 806 009e AF90      		pop r10
 807               	.LVL72:
 232:rn42/rn42_task.c ****     exit_command_mode();
 808               		.loc 1 232 0
 809 00a0 0C94 0000 		jmp exit_command_mode
 810               	.LVL73:
 811               		.cfi_endproc
 812               	.LFE115:
 814               		.section	.text.rn42_task_init,"ax",@progbits
 815               	.global	rn42_task_init
 817               	rn42_task_init:
 818               	.LFB105:
  34:rn42/rn42_task.c **** {
 819               		.loc 1 34 0
 820               		.cfi_startproc
 821               	/* prologue: function */
 822               	/* frame size = 0 */
 823               	/* stack size = 0 */
 824               	.L__stack_usage = 0
  35:rn42/rn42_task.c ****     battery_init();
 825               		.loc 1 35 0
 826 0000 0C94 0000 		jmp battery_init
 827               	.LVL74:
 828               		.cfi_endproc
 829               	.LFE105:
 831               		.section	.text.rn42_task,"ax",@progbits
 832               	.global	rn42_task
 834               	rn42_task:
 835               	.LFB106:
  39:rn42/rn42_task.c **** {
 836               		.loc 1 39 0
 837               		.cfi_startproc
 838 0000 4F92      		push r4
 839               	.LCFI55:
 840               		.cfi_def_cfa_offset 3
 841               		.cfi_offset 4, -2
 842 0002 5F92      		push r5
 843               	.LCFI56:
 844               		.cfi_def_cfa_offset 4
 845               		.cfi_offset 5, -3
 846 0004 6F92      		push r6
 847               	.LCFI57:
 848               		.cfi_def_cfa_offset 5
 849               		.cfi_offset 6, -4
 850 0006 7F92      		push r7
 851               	.LCFI58:
 852               		.cfi_def_cfa_offset 6
 853               		.cfi_offset 7, -5
 854 0008 8F92      		push r8
 855               	.LCFI59:
 856               		.cfi_def_cfa_offset 7
 857               		.cfi_offset 8, -6
 858 000a 9F92      		push r9
 859               	.LCFI60:
 860               		.cfi_def_cfa_offset 8
 861               		.cfi_offset 9, -7
 862 000c AF92      		push r10
 863               	.LCFI61:
 864               		.cfi_def_cfa_offset 9
 865               		.cfi_offset 10, -8
 866 000e BF92      		push r11
 867               	.LCFI62:
 868               		.cfi_def_cfa_offset 10
 869               		.cfi_offset 11, -9
 870 0010 1F93      		push r17
 871               	.LCFI63:
 872               		.cfi_def_cfa_offset 11
 873               		.cfi_offset 17, -10
 874 0012 CF93      		push r28
 875               	.LCFI64:
 876               		.cfi_def_cfa_offset 12
 877               		.cfi_offset 28, -11
 878 0014 DF93      		push r29
 879               	.LCFI65:
 880               		.cfi_def_cfa_offset 13
 881               		.cfi_offset 29, -12
 882               	/* prologue: function */
 883               	/* frame size = 0 */
 884               	/* stack size = 11 */
 885               	.L__stack_usage = 11
 886               	.LBB25:
  55:rn42/rn42_task.c ****                 if (c == 0x02) state = LED_02;
 887               		.loc 1 55 0
 888 0016 C2E0      		ldi r28,lo8(2)
  51:rn42/rn42_task.c ****                     else xprintf(" %02X", c);
 889               		.loc 1 51 0
 890 0018 50E0      		ldi r21,lo8(__c.4635)
 891 001a 852E      		mov r8,r21
 892 001c 50E0      		ldi r21,hi8(__c.4635)
 893 001e 952E      		mov r9,r21
  50:rn42/rn42_task.c ****                     if (0x0 <= c && c <= 0x7f) xprintf("%c", c);
 894               		.loc 1 50 0
 895 0020 60E0      		ldi r22,lo8(__c.4633)
 896 0022 662E      		mov r6,r22
 897 0024 60E0      		ldi r22,hi8(__c.4633)
 898 0026 762E      		mov r7,r22
  48:rn42/rn42_task.c ****                 if (c == 0xFE) state = LED_FE;
 899               		.loc 1 48 0
 900 0028 D1E0      		ldi r29,lo8(1)
  59:rn42/rn42_task.c ****                 if (c == 0x01) state = LED_01;
 901               		.loc 1 59 0
 902 002a 13E0      		ldi r17,lo8(3)
  63:rn42/rn42_task.c ****                 dprintf("LED status: %02X\n", c);
 903               		.loc 1 63 0
 904 002c 70E0      		ldi r23,lo8(__c.4641)
 905 002e 472E      		mov r4,r23
 906 0030 70E0      		ldi r23,hi8(__c.4641)
 907 0032 572E      		mov r5,r23
 908               	.L73:
 909               	.LBE25:
  42:rn42/rn42_task.c ****     while ((c = rn42_getc()) != -1) {
 910               		.loc 1 42 0
 911 0034 0E94 0000 		call rn42_getc
 912 0038 5C01      		movw r10,r24
 913 003a 8F3F      		cpi r24,-1
 914 003c 2FEF      		ldi r18,-1
 915 003e 9207      		cpc r25,r18
 916 0040 01F4      		brne .+2
 917 0042 00C0      		rjmp .L45
 918               	.LBB26:
  46:rn42/rn42_task.c ****         switch (state) {
 919               		.loc 1 46 0
 920 0044 8091 0000 		lds r24,state.4631
 921 0048 8130      		cpi r24,lo8(1)
 922 004a 01F0      		breq .L48
 923 004c 00F0      		brlo .L47
 924 004e 8230      		cpi r24,lo8(2)
 925 0050 01F0      		breq .L49
 926 0052 8330      		cpi r24,lo8(3)
 927 0054 01F4      		brne .L72
 928 0056 00C0      		rjmp .L50
 929               	.L47:
  48:rn42/rn42_task.c ****                 if (c == 0xFE) state = LED_FE;
 930               		.loc 1 48 0
 931 0058 8EEF      		ldi r24,-2
 932 005a A816      		cp r10,r24
 933 005c B104      		cpc r11,__zero_reg__
 934 005e 01F4      		brne .L51
  48:rn42/rn42_task.c ****                 if (c == 0xFE) state = LED_FE;
 935               		.loc 1 48 0 is_stmt 0 discriminator 1
 936 0060 D093 0000 		sts state.4631,r29
 937 0064 00C0      		rjmp .L73
 938               	.L51:
  50:rn42/rn42_task.c ****                     if (0x0 <= c && c <= 0x7f) xprintf("%c", c);
 939               		.loc 1 50 0 is_stmt 1
 940 0066 90E8      		ldi r25,-128
 941 0068 A916      		cp r10,r25
 942 006a B104      		cpc r11,__zero_reg__
 943 006c 00F4      		brsh .L53
  50:rn42/rn42_task.c ****                     if (0x0 <= c && c <= 0x7f) xprintf("%c", c);
 944               		.loc 1 50 0 is_stmt 0 discriminator 1
 945 006e BF92      		push r11
 946               	.LCFI66:
 947               		.cfi_remember_state
 948               		.cfi_def_cfa_offset 14
 949 0070 AF92      		push r10
 950               	.LCFI67:
 951               		.cfi_def_cfa_offset 15
 952 0072 7F92      		push r7
 953               	.LCFI68:
 954               		.cfi_def_cfa_offset 16
 955 0074 6F92      		push r6
 956               	.LCFI69:
 957               		.cfi_def_cfa_offset 17
 958 0076 00C0      		rjmp .L74
 959               	.L53:
 960               	.LCFI70:
 961               		.cfi_restore_state
  51:rn42/rn42_task.c ****                     else xprintf(" %02X", c);
 962               		.loc 1 51 0 is_stmt 1
 963 0078 BF92      		push r11
 964               	.LCFI71:
 965               		.cfi_def_cfa_offset 14
 966 007a AF92      		push r10
 967               	.LCFI72:
 968               		.cfi_def_cfa_offset 15
 969 007c 9F92      		push r9
 970               	.LCFI73:
 971               		.cfi_def_cfa_offset 16
 972 007e 8F92      		push r8
 973               	.LCFI74:
 974               		.cfi_def_cfa_offset 17
 975               	.L74:
 976 0080 0E94 0000 		call __xprintf
 977 0084 0F90      		pop __tmp_reg__
 978 0086 0F90      		pop __tmp_reg__
 979 0088 0F90      		pop __tmp_reg__
 980 008a 0F90      		pop __tmp_reg__
 981               	.LCFI75:
 982               		.cfi_def_cfa_offset 13
 983 008c 00C0      		rjmp .L73
 984               	.L48:
  55:rn42/rn42_task.c ****                 if (c == 0x02) state = LED_02;
 985               		.loc 1 55 0
 986 008e 22E0      		ldi r18,2
 987 0090 A216      		cp r10,r18
 988 0092 B104      		cpc r11,__zero_reg__
 989 0094 01F4      		brne .L72
  55:rn42/rn42_task.c ****                 if (c == 0x02) state = LED_02;
 990               		.loc 1 55 0 is_stmt 0 discriminator 1
 991 0096 C093 0000 		sts state.4631,r28
 992 009a 00C0      		rjmp .L73
 993               	.L49:
  59:rn42/rn42_task.c ****                 if (c == 0x01) state = LED_01;
 994               		.loc 1 59 0 is_stmt 1
 995 009c AA94      		dec r10
 996 009e AB28      		or r10,r11
 997 00a0 01F4      		brne .L72
  59:rn42/rn42_task.c ****                 if (c == 0x01) state = LED_01;
 998               		.loc 1 59 0 is_stmt 0 discriminator 1
 999 00a2 1093 0000 		sts state.4631,r17
 1000 00a6 00C0      		rjmp .L73
 1001               	.L50:
  63:rn42/rn42_task.c ****                 dprintf("LED status: %02X\n", c);
 1002               		.loc 1 63 0 is_stmt 1
 1003 00a8 8091 0000 		lds r24,debug_config
 1004 00ac 80FF      		sbrs r24,0
 1005 00ae 00C0      		rjmp .L56
  63:rn42/rn42_task.c ****                 dprintf("LED status: %02X\n", c);
 1006               		.loc 1 63 0 is_stmt 0 discriminator 1
 1007 00b0 BF92      		push r11
 1008               	.LCFI76:
 1009               		.cfi_def_cfa_offset 14
 1010 00b2 AF92      		push r10
 1011               	.LCFI77:
 1012               		.cfi_def_cfa_offset 15
 1013 00b4 5F92      		push r5
 1014               	.LCFI78:
 1015               		.cfi_def_cfa_offset 16
 1016 00b6 4F92      		push r4
 1017               	.LCFI79:
 1018               		.cfi_def_cfa_offset 17
 1019 00b8 0E94 0000 		call __xprintf
 1020 00bc 0F90      		pop __tmp_reg__
 1021 00be 0F90      		pop __tmp_reg__
 1022 00c0 0F90      		pop __tmp_reg__
 1023 00c2 0F90      		pop __tmp_reg__
 1024               	.LCFI80:
 1025               		.cfi_def_cfa_offset 13
 1026               	.L56:
  64:rn42/rn42_task.c ****                 rn42_set_leds(c);
 1027               		.loc 1 64 0 is_stmt 1
 1028 00c4 8A2D      		mov r24,r10
 1029 00c6 0E94 0000 		call rn42_set_leds
 1030               	.L72:
  68:rn42/rn42_task.c ****                 state = LED_INIT;
 1031               		.loc 1 68 0
 1032 00ca 1092 0000 		sts state.4631,__zero_reg__
 1033 00ce 00C0      		rjmp .L73
 1034               	.L45:
 1035               	.LBE26:
  75:rn42/rn42_task.c ****     uint16_t e = timer_elapsed(prev_timer);
 1036               		.loc 1 75 0
 1037 00d0 8091 0000 		lds r24,prev_timer.4647
 1038 00d4 9091 0000 		lds r25,prev_timer.4647+1
 1039 00d8 0E94 0000 		call timer_elapsed
  76:rn42/rn42_task.c ****     if (e > 1000) {
 1040               		.loc 1 76 0
 1041 00dc 893E      		cpi r24,-23
 1042 00de 23E0      		ldi r18,3
 1043 00e0 9207      		cpc r25,r18
 1044 00e2 00F4      		brsh .+2
 1045 00e4 00C0      		rjmp .L58
 1046               	.LBB27:
  78:rn42/rn42_task.c ****         prev_timer += e/1000*1000;
 1047               		.loc 1 78 0
 1048 00e6 28EE      		ldi r18,lo8(-24)
 1049 00e8 33E0      		ldi r19,lo8(3)
 1050 00ea B901      		movw r22,r18
 1051 00ec 0E94 0000 		call __udivmodhi4
 1052 00f0 629F      		mul r22,r18
 1053 00f2 A001      		movw r20,r0
 1054 00f4 639F      		mul r22,r19
 1055 00f6 500D      		add r21,r0
 1056 00f8 729F      		mul r23,r18
 1057 00fa 500D      		add r21,r0
 1058 00fc 1124      		clr r1
 1059 00fe 8091 0000 		lds r24,prev_timer.4647
 1060 0102 9091 0000 		lds r25,prev_timer.4647+1
 1061 0106 840F      		add r24,r20
 1062 0108 951F      		adc r25,r21
 1063 010a 9093 0000 		sts prev_timer.4647+1,r25
 1064 010e 8093 0000 		sts prev_timer.4647,r24
  81:rn42/rn42_task.c ****         uint8_t bs = battery_status();
 1065               		.loc 1 81 0
 1066 0112 0E94 0000 		call battery_status
  82:rn42/rn42_task.c ****         if (bs == LOW_VOLTAGE) {
 1067               		.loc 1 82 0
 1068 0116 8330      		cpi r24,lo8(3)
 1069 0118 01F4      		brne .L59
  83:rn42/rn42_task.c ****             battery_led(LED_ON);
 1070               		.loc 1 83 0
 1071 011a 81E0      		ldi r24,lo8(1)
 1072 011c 00C0      		rjmp .L75
 1073               	.L59:
  85:rn42/rn42_task.c ****             battery_led(LED_CHARGER);
 1074               		.loc 1 85 0
 1075 011e 80E0      		ldi r24,0
 1076               	.L75:
 1077 0120 0E94 0000 		call battery_led
  89:rn42/rn42_task.c ****         uint32_t t = timer_read32()/1000;
 1078               		.loc 1 89 0
 1079 0124 0E94 0000 		call timer_read32
 1080 0128 28EE      		ldi r18,lo8(-24)
 1081 012a 33E0      		ldi r19,lo8(3)
 1082 012c 40E0      		ldi r20,0
 1083 012e 50E0      		ldi r21,0
 1084 0130 0E94 0000 		call __udivmodsi4
 1085 0134 2901      		movw r4,r18
 1086 0136 3A01      		movw r6,r20
  90:rn42/rn42_task.c ****         if (t%60 == 0) {
 1087               		.loc 1 90 0
 1088 0138 4CE3      		ldi r20,lo8(60)
 1089 013a 842E      		mov r8,r20
 1090 013c 912C      		mov r9,__zero_reg__
 1091 013e A12C      		mov r10,__zero_reg__
 1092 0140 B12C      		mov r11,__zero_reg__
 1093 0142 C301      		movw r24,r6
 1094 0144 B201      		movw r22,r4
 1095 0146 A501      		movw r20,r10
 1096 0148 9401      		movw r18,r8
 1097 014a 0E94 0000 		call __udivmodsi4
 1098 014e 672B      		or r22,r23
 1099 0150 682B      		or r22,r24
 1100 0152 692B      		or r22,r25
 1101 0154 01F4      		brne .L58
 1102               	.LBB28:
  91:rn42/rn42_task.c ****             uint16_t v = battery_voltage();
 1103               		.loc 1 91 0
 1104 0156 0E94 0000 		call battery_voltage
  95:rn42/rn42_task.c ****             dprintf("%02u:%02u:%02u\t%umV\n", h, m, s, v);
 1105               		.loc 1 95 0
 1106 015a 2091 0000 		lds r18,debug_config
 1107 015e 20FF      		sbrs r18,0
 1108 0160 00C0      		rjmp .L58
  95:rn42/rn42_task.c ****             dprintf("%02u:%02u:%02u\t%umV\n", h, m, s, v);
 1109               		.loc 1 95 0 is_stmt 0 discriminator 1
 1110 0162 9F93      		push r25
 1111               	.LCFI81:
 1112               		.cfi_def_cfa_offset 14
 1113 0164 8F93      		push r24
 1114               	.LCFI82:
 1115               		.cfi_def_cfa_offset 15
 1116 0166 1F92      		push __zero_reg__
 1117               	.LCFI83:
 1118               		.cfi_def_cfa_offset 16
 1119 0168 1F92      		push __zero_reg__
 1120               	.LCFI84:
 1121               		.cfi_def_cfa_offset 17
  93:rn42/rn42_task.c ****             uint8_t m = t%3600/60;
 1122               		.loc 1 93 0 is_stmt 1 discriminator 1
 1123 016a C301      		movw r24,r6
 1124 016c B201      		movw r22,r4
 1125 016e 20E1      		ldi r18,lo8(16)
 1126 0170 3EE0      		ldi r19,lo8(14)
 1127 0172 40E0      		ldi r20,0
 1128 0174 50E0      		ldi r21,0
 1129 0176 0E94 0000 		call __udivmodsi4
 1130 017a 722E      		mov r7,r18
 1131 017c A501      		movw r20,r10
 1132 017e 9401      		movw r18,r8
 1133 0180 0E94 0000 		call __udivmodsi4
  95:rn42/rn42_task.c ****             dprintf("%02u:%02u:%02u\t%umV\n", h, m, s, v);
 1134               		.loc 1 95 0 discriminator 1
 1135 0184 3F93      		push r19
 1136               	.LCFI85:
 1137               		.cfi_def_cfa_offset 18
 1138 0186 2F93      		push r18
 1139               	.LCFI86:
 1140               		.cfi_def_cfa_offset 19
 1141 0188 1F92      		push __zero_reg__
 1142               	.LCFI87:
 1143               		.cfi_def_cfa_offset 20
 1144 018a 7F92      		push r7
 1145               	.LCFI88:
 1146               		.cfi_def_cfa_offset 21
 1147 018c 80E0      		ldi r24,lo8(__c.4655)
 1148 018e 90E0      		ldi r25,hi8(__c.4655)
 1149 0190 9F93      		push r25
 1150               	.LCFI89:
 1151               		.cfi_def_cfa_offset 22
 1152 0192 8F93      		push r24
 1153               	.LCFI90:
 1154               		.cfi_def_cfa_offset 23
 1155 0194 0E94 0000 		call __xprintf
 1156 0198 8DB7      		in r24,__SP_L__
 1157 019a 9EB7      		in r25,__SP_H__
 1158 019c 0A96      		adiw r24,10
 1159 019e 0FB6      		in __tmp_reg__,__SREG__
 1160 01a0 F894      		cli
 1161 01a2 9EBF      		out __SP_H__,r25
 1162 01a4 0FBE      		out __SREG__,__tmp_reg__
 1163 01a6 8DBF      		out __SP_L__,r24
 1164               	.LCFI91:
 1165               		.cfi_def_cfa_offset 13
 1166               	.L58:
 1167               	.LBE28:
 1168               	.LBE27:
 101:rn42/rn42_task.c ****     if (!rn42_rts() && rn42_linked()) {
 1169               		.loc 1 101 0
 1170 01a8 0E94 0000 		call rn42_rts
 1171 01ac 8111      		cpse r24,__zero_reg__
 1172 01ae 00C0      		rjmp .L62
 101:rn42/rn42_task.c ****     if (!rn42_rts() && rn42_linked()) {
 1173               		.loc 1 101 0 is_stmt 0 discriminator 1
 1174 01b0 0E94 0000 		call rn42_linked
 1175 01b4 8823      		tst r24
 1176 01b6 01F0      		breq .L62
 102:rn42/rn42_task.c ****         status_led(true);
 1177               		.loc 1 102 0 is_stmt 1
 1178 01b8 81E0      		ldi r24,lo8(1)
 1179 01ba 00C0      		rjmp .L76
 1180               	.L62:
 104:rn42/rn42_task.c ****         status_led(false);
 1181               		.loc 1 104 0
 1182 01bc 80E0      		ldi r24,0
 1183               	.L76:
 1184               	/* epilogue start */
 106:rn42/rn42_task.c **** }
 1185               		.loc 1 106 0
 1186 01be DF91      		pop r29
 1187 01c0 CF91      		pop r28
 1188 01c2 1F91      		pop r17
 1189 01c4 BF90      		pop r11
 1190 01c6 AF90      		pop r10
 1191 01c8 9F90      		pop r9
 1192 01ca 8F90      		pop r8
 1193 01cc 7F90      		pop r7
 1194 01ce 6F90      		pop r6
 1195 01d0 5F90      		pop r5
 1196 01d2 4F90      		pop r4
 104:rn42/rn42_task.c ****         status_led(false);
 1197               		.loc 1 104 0
 1198 01d4 0C94 0000 		jmp status_led
 1199               		.cfi_endproc
 1200               	.LFE106:
 1202               		.section	.rodata.str1.1
 1203               	.LC1:
 1204 0003 524E 2D34 		.string	"RN-42"
 1204      3200 
 1205               	.LC2:
 1206 0009 4C55 4641 		.string	"LUFA"
 1206      00
 1207               	.LC3:
 1208 000e 4F46 4600 		.string	"OFF"
 1209               	.LC4:
 1210 0012 4F4E 00   		.string	"ON"
 1211               	.LC5:
 1212 0015 434F 4E4E 		.string	"CONN"
 1212      00
 1213               	.LC6:
 1214 001a 506F 7765 		.string	"Powered"
 1214      7265 6400 
 1215               	.LC7:
 1216 0022 556E 6174 		.string	"Unattached"
 1216      7461 6368 
 1216      6564 00
 1217               	.LC8:
 1218 002d 4465 6661 		.string	"Default"
 1218      756C 7400 
 1219               	.LC9:
 1220 0035 4164 6472 		.string	"Addressed"
 1220      6573 7365 
 1220      6400 
 1221               	.LC10:
 1222 003f 436F 6E66 		.string	"Configured"
 1222      6967 7572 
 1222      6564 00
 1223               	.LC11:
 1224 004a 3F00      		.string	"?"
 1225               	.LC12:
 1226 004c 5375 7370 		.string	"Suspended"
 1226      656E 6465 
 1226      6400 
 1227               		.section	.text.command_extra,"ax",@progbits
 1228               	.global	command_extra
 1230               	command_extra:
 1231               	.LFB118:
 245:rn42/rn42_task.c **** 
 246:rn42/rn42_task.c **** 
 247:rn42/rn42_task.c **** static void pairing(void)
 248:rn42/rn42_task.c **** {
 249:rn42/rn42_task.c ****     enter_command_mode();
 250:rn42/rn42_task.c ****     SEND_COMMAND("SR,Z\r\n");   // remove remote address
 251:rn42/rn42_task.c ****     SEND_COMMAND("R,1\r\n");    // reboot
 252:rn42/rn42_task.c ****     exit_command_mode();
 253:rn42/rn42_task.c **** }
 254:rn42/rn42_task.c **** 
 255:rn42/rn42_task.c **** bool command_extra(uint8_t code)
 256:rn42/rn42_task.c **** {
 1232               		.loc 1 256 0
 1233               		.cfi_startproc
 1234               	.LVL75:
 1235 0000 4F92      		push r4
 1236               	.LCFI92:
 1237               		.cfi_def_cfa_offset 3
 1238               		.cfi_offset 4, -2
 1239 0002 5F92      		push r5
 1240               	.LCFI93:
 1241               		.cfi_def_cfa_offset 4
 1242               		.cfi_offset 5, -3
 1243 0004 6F92      		push r6
 1244               	.LCFI94:
 1245               		.cfi_def_cfa_offset 5
 1246               		.cfi_offset 6, -4
 1247 0006 7F92      		push r7
 1248               	.LCFI95:
 1249               		.cfi_def_cfa_offset 6
 1250               		.cfi_offset 7, -5
 1251 0008 8F92      		push r8
 1252               	.LCFI96:
 1253               		.cfi_def_cfa_offset 7
 1254               		.cfi_offset 8, -6
 1255 000a 9F92      		push r9
 1256               	.LCFI97:
 1257               		.cfi_def_cfa_offset 8
 1258               		.cfi_offset 9, -7
 1259 000c AF92      		push r10
 1260               	.LCFI98:
 1261               		.cfi_def_cfa_offset 9
 1262               		.cfi_offset 10, -8
 1263 000e BF92      		push r11
 1264               	.LCFI99:
 1265               		.cfi_def_cfa_offset 10
 1266               		.cfi_offset 11, -9
 1267 0010 CF92      		push r12
 1268               	.LCFI100:
 1269               		.cfi_def_cfa_offset 11
 1270               		.cfi_offset 12, -10
 1271 0012 DF92      		push r13
 1272               	.LCFI101:
 1273               		.cfi_def_cfa_offset 12
 1274               		.cfi_offset 13, -11
 1275 0014 EF92      		push r14
 1276               	.LCFI102:
 1277               		.cfi_def_cfa_offset 13
 1278               		.cfi_offset 14, -12
 1279 0016 FF92      		push r15
 1280               	.LCFI103:
 1281               		.cfi_def_cfa_offset 14
 1282               		.cfi_offset 15, -13
 1283 0018 CF93      		push r28
 1284               	.LCFI104:
 1285               		.cfi_def_cfa_offset 15
 1286               		.cfi_offset 28, -14
 1287 001a DF93      		push r29
 1288               	.LCFI105:
 1289               		.cfi_def_cfa_offset 16
 1290               		.cfi_offset 29, -15
 1291 001c 00D0      		rcall .
 1292 001e 00D0      		rcall .
 1293               	.LCFI106:
 1294               		.cfi_def_cfa_offset 20
 1295 0020 CDB7      		in r28,__SP_L__
 1296 0022 DEB7      		in r29,__SP_H__
 1297               	.LCFI107:
 1298               		.cfi_def_cfa_register 28
 1299               	/* prologue: function */
 1300               	/* frame size = 4 */
 1301               	/* stack size = 18 */
 1302               	.L__stack_usage = 18
 257:rn42/rn42_task.c ****     uint32_t t;
 258:rn42/rn42_task.c ****     uint16_t b;
 259:rn42/rn42_task.c ****     switch (code) {
 1303               		.loc 1 259 0
 1304 0024 8032      		cpi r24,lo8(32)
 1305 0026 01F4      		brne .+2
 1306 0028 00C0      		rjmp .L86
 1307 002a 00F4      		brsh .L94
 1308 002c 8331      		cpi r24,lo8(19)
 1309 002e 01F4      		brne .+2
 1310 0030 00C0      		rjmp .L82
 1311 0032 00F4      		brsh .L95
 1312 0034 8B30      		cpi r24,lo8(11)
 1313 0036 01F0      		breq .L80
 1314 0038 8C30      		cpi r24,lo8(12)
 1315 003a 01F4      		brne .+2
 1316 003c 00C0      		rjmp .L81
 1317 003e 8530      		cpi r24,lo8(5)
 1318 0040 01F0      		breq .+2
 1319 0042 00C0      		rjmp .L78
 1320 0044 00C0      		rjmp .L79
 1321               	.L95:
 1322 0046 8E31      		cpi r24,lo8(30)
 1323 0048 01F4      		brne .+2
 1324 004a 00C0      		rjmp .L84
 1325 004c 00F0      		brlo .+2
 1326 004e 00C0      		rjmp .L85
 1327 0050 8831      		cpi r24,lo8(24)
 1328 0052 01F0      		breq .+2
 1329 0054 00C0      		rjmp .L78
 1330 0056 00C0      		rjmp .L83
 1331               	.L94:
 1332 0058 8B33      		cpi r24,lo8(59)
 1333 005a 01F4      		brne .+2
 1334 005c 00C0      		rjmp .L89
 1335 005e 00F4      		brsh .L96
 1336 0060 8833      		cpi r24,lo8(56)
 1337 0062 01F0      		breq .L80
 1338 0064 8A33      		cpi r24,lo8(58)
 1339 0066 01F4      		brne .+2
 1340 0068 00C0      		rjmp .L88
 1341 006a 8132      		cpi r24,lo8(33)
 1342 006c 01F0      		breq .+2
 1343 006e 00C0      		rjmp .L78
 1344 0070 00C0      		rjmp .L87
 1345               	.L96:
 1346 0072 8D33      		cpi r24,lo8(61)
 1347 0074 01F4      		brne .+2
 1348 0076 00C0      		rjmp .L91
 1349 0078 00F4      		brsh .+2
 1350 007a 00C0      		rjmp .L90
 1351 007c 8734      		cpi r24,lo8(71)
 1352 007e 01F4      		brne .+2
 1353 0080 00C0      		rjmp .L92
 1354 0082 8C34      		cpi r24,lo8(76)
 1355 0084 01F0      		breq .+2
 1356 0086 00C0      		rjmp .L78
 1357 0088 00C0      		rjmp .L93
 1358               	.L80:
 1359               	.LBB81:
 260:rn42/rn42_task.c ****         case KC_H:
 261:rn42/rn42_task.c ****         case KC_SLASH: /* ? */
 262:rn42/rn42_task.c ****             print("\n\n----- Bluetooth RN-42 Help -----\n");
 1360               		.loc 1 262 0
 1361 008a 80E0      		ldi r24,lo8(__c.4788)
 1362 008c 90E0      		ldi r25,hi8(__c.4788)
 1363               	.LVL76:
 1364 008e 0E94 0000 		call xputs
 1365               	.LVL77:
 263:rn42/rn42_task.c ****             print("i:       RN-42 info\n");
 1366               		.loc 1 263 0
 1367 0092 80E0      		ldi r24,lo8(__c.4790)
 1368 0094 90E0      		ldi r25,hi8(__c.4790)
 1369 0096 0E94 0000 		call xputs
 1370               	.LVL78:
 264:rn42/rn42_task.c ****             print("b:       battery voltage\n");
 1371               		.loc 1 264 0
 1372 009a 80E0      		ldi r24,lo8(__c.4792)
 1373 009c 90E0      		ldi r25,hi8(__c.4792)
 1374 009e 0E94 0000 		call xputs
 1375               	.LVL79:
 265:rn42/rn42_task.c ****             print("Del:     enter/exit RN-42 config mode\n");
 1376               		.loc 1 265 0
 1377 00a2 80E0      		ldi r24,lo8(__c.4794)
 1378 00a4 90E0      		ldi r25,hi8(__c.4794)
 1379 00a6 0E94 0000 		call xputs
 1380               	.LVL80:
 266:rn42/rn42_task.c ****             print("Slck:    RN-42 initialize\n");
 1381               		.loc 1 266 0
 1382 00aa 80E0      		ldi r24,lo8(__c.4796)
 1383 00ac 90E0      		ldi r25,hi8(__c.4796)
 1384 00ae 0E94 0000 		call xputs
 1385               	.LVL81:
 267:rn42/rn42_task.c **** 
 268:rn42/rn42_task.c ****             print("1-4:     restore link\n");
 1386               		.loc 1 268 0
 1387 00b2 80E0      		ldi r24,lo8(__c.4798)
 1388 00b4 90E0      		ldi r25,hi8(__c.4798)
 1389 00b6 0E94 0000 		call xputs
 1390               	.LVL82:
 269:rn42/rn42_task.c ****             print("F1-F4:   store link\n");
 1391               		.loc 1 269 0
 1392 00ba 80E0      		ldi r24,lo8(__c.4800)
 1393 00bc 90E0      		ldi r25,hi8(__c.4800)
 1394 00be 0E94 0000 		call xputs
 1395               	.LVL83:
 270:rn42/rn42_task.c **** 
 271:rn42/rn42_task.c ****             print("p:       pairing\n");
 1396               		.loc 1 271 0
 1397 00c2 80E0      		ldi r24,lo8(__c.4802)
 1398 00c4 90E0      		ldi r25,hi8(__c.4802)
 1399 00c6 0E94 0000 		call xputs
 1400               	.LVL84:
 272:rn42/rn42_task.c **** 
 273:rn42/rn42_task.c ****             if (config_mode) {
 1401               		.loc 1 273 0
 1402 00ca 8091 0000 		lds r24,config_mode
 1403 00ce 8111      		cpse r24,__zero_reg__
 1404 00d0 00C0      		rjmp .L130
 1405               	.L97:
 274:rn42/rn42_task.c ****                 return true;
 275:rn42/rn42_task.c ****             } else {
 276:rn42/rn42_task.c ****                 print("u:       toggle Force USB mode\n");
 1406               		.loc 1 276 0
 1407 00d2 80E0      		ldi r24,lo8(__c.4804)
 1408 00d4 90E0      		ldi r25,hi8(__c.4804)
 1409 00d6 0E94 0000 		call xputs
 1410               	.LVL85:
 1411 00da 00C0      		rjmp .L121
 1412               	.LVL86:
 1413               	.L82:
 1414               	.LBB82:
 1415               	.LBB83:
 249:rn42/rn42_task.c ****     enter_command_mode();
 1416               		.loc 1 249 0
 1417 00dc 0E94 0000 		call enter_command_mode
 1418               	.LVL87:
 250:rn42/rn42_task.c ****     SEND_COMMAND("SR,Z\r\n");   // remove remote address
 1419               		.loc 1 250 0
 1420 00e0 80E0      		ldi r24,lo8(__c.4777)
 1421 00e2 90E0      		ldi r25,hi8(__c.4777)
 1422 00e4 0E94 0000 		call send_command
 1423               	.LVL88:
 251:rn42/rn42_task.c ****     SEND_COMMAND("R,1\r\n");    // reboot
 1424               		.loc 1 251 0
 1425 00e8 80E0      		ldi r24,lo8(__c.4779)
 1426 00ea 90E0      		ldi r25,hi8(__c.4779)
 1427 00ec 0E94 0000 		call send_command
 1428               	.LVL89:
 1429 00f0 00C0      		rjmp .L131
 1430               	.LVL90:
 1431               	.L88:
 1432               	.LBE83:
 1433               	.LBE82:
 277:rn42/rn42_task.c ****                 return false;   // to display default command help
 278:rn42/rn42_task.c ****             }
 279:rn42/rn42_task.c ****         case KC_P:
 280:rn42/rn42_task.c ****             pairing();
 281:rn42/rn42_task.c ****             return true;
 282:rn42/rn42_task.c **** 
 283:rn42/rn42_task.c ****         /* Store link address to EEPROM */
 284:rn42/rn42_task.c ****         case KC_F1:
 285:rn42/rn42_task.c ****             store_link(RN42_LINK0);
 1434               		.loc 1 285 0
 1435 00f2 80E8      		ldi r24,lo8(-128)
 1436 00f4 90E0      		ldi r25,0
 1437               	.LVL91:
 1438 00f6 00C0      		rjmp .L132
 1439               	.LVL92:
 1440               	.L89:
 286:rn42/rn42_task.c ****             return true;
 287:rn42/rn42_task.c ****         case KC_F2:
 288:rn42/rn42_task.c ****             store_link(RN42_LINK1);
 1441               		.loc 1 288 0
 1442 00f8 8CE8      		ldi r24,lo8(-116)
 1443 00fa 90E0      		ldi r25,0
 1444               	.LVL93:
 1445 00fc 00C0      		rjmp .L132
 1446               	.LVL94:
 1447               	.L90:
 289:rn42/rn42_task.c ****             return true;
 290:rn42/rn42_task.c ****         case KC_F3:
 291:rn42/rn42_task.c ****             store_link(RN42_LINK2);
 1448               		.loc 1 291 0
 1449 00fe 88E9      		ldi r24,lo8(-104)
 1450 0100 90E0      		ldi r25,0
 1451               	.LVL95:
 1452 0102 00C0      		rjmp .L132
 1453               	.LVL96:
 1454               	.L91:
 292:rn42/rn42_task.c ****             return true;
 293:rn42/rn42_task.c ****         case KC_F4:
 294:rn42/rn42_task.c ****             store_link(RN42_LINK3);
 1455               		.loc 1 294 0
 1456 0104 84EA      		ldi r24,lo8(-92)
 1457 0106 90E0      		ldi r25,0
 1458               	.LVL97:
 1459               	.L132:
 1460 0108 0E94 0000 		call store_link
 1461               	.LVL98:
 1462 010c 00C0      		rjmp .L130
 1463               	.LVL99:
 1464               	.L84:
 295:rn42/rn42_task.c ****             return true;
 296:rn42/rn42_task.c ****         /* Restore link address to EEPROM */
 297:rn42/rn42_task.c ****         case KC_1:
 298:rn42/rn42_task.c ****             restore_link(RN42_LINK0);
 1465               		.loc 1 298 0
 1466 010e 80E8      		ldi r24,lo8(-128)
 1467 0110 90E0      		ldi r25,0
 1468               	.LVL100:
 1469 0112 00C0      		rjmp .L133
 1470               	.LVL101:
 1471               	.L85:
 299:rn42/rn42_task.c ****             return true;
 300:rn42/rn42_task.c ****         case KC_2:
 301:rn42/rn42_task.c ****             restore_link(RN42_LINK1);
 1472               		.loc 1 301 0
 1473 0114 8CE8      		ldi r24,lo8(-116)
 1474 0116 90E0      		ldi r25,0
 1475               	.LVL102:
 1476 0118 00C0      		rjmp .L133
 1477               	.LVL103:
 1478               	.L86:
 302:rn42/rn42_task.c ****             return true;
 303:rn42/rn42_task.c ****         case KC_3:
 304:rn42/rn42_task.c ****             restore_link(RN42_LINK2);
 1479               		.loc 1 304 0
 1480 011a 88E9      		ldi r24,lo8(-104)
 1481 011c 90E0      		ldi r25,0
 1482               	.LVL104:
 1483 011e 00C0      		rjmp .L133
 1484               	.LVL105:
 1485               	.L87:
 305:rn42/rn42_task.c ****             return true;
 306:rn42/rn42_task.c ****         case KC_4:
 307:rn42/rn42_task.c ****             restore_link(RN42_LINK3);
 1486               		.loc 1 307 0
 1487 0120 84EA      		ldi r24,lo8(-92)
 1488 0122 90E0      		ldi r25,0
 1489               	.LVL106:
 1490               	.L133:
 1491 0124 0E94 0000 		call restore_link
 1492               	.LVL107:
 1493 0128 00C0      		rjmp .L130
 1494               	.LVL108:
 1495               	.L81:
 308:rn42/rn42_task.c ****             return true;
 309:rn42/rn42_task.c **** 
 310:rn42/rn42_task.c ****         case KC_I:
 311:rn42/rn42_task.c ****             print("\n----- RN-42 info -----\n");
 1496               		.loc 1 311 0
 1497 012a 80E0      		ldi r24,lo8(__c.4816)
 1498 012c 90E0      		ldi r25,hi8(__c.4816)
 1499               	.LVL109:
 1500 012e 0E94 0000 		call xputs
 1501               	.LVL110:
 312:rn42/rn42_task.c ****             xprintf("protocol: %s\n", (host_get_driver() == &rn42_driver) ? "RN-42" : "LUFA");
 1502               		.loc 1 312 0
 1503 0132 0E94 0000 		call host_get_driver
 1504               	.LVL111:
 1505 0136 8050      		subi r24,lo8(rn42_driver)
 1506 0138 9040      		sbci r25,hi8(rn42_driver)
 1507 013a 01F4      		brne .L112
 1508 013c 80E0      		ldi r24,lo8(.LC1)
 1509 013e 90E0      		ldi r25,hi8(.LC1)
 1510 0140 00C0      		rjmp .L99
 1511               	.L112:
 1512 0142 80E0      		ldi r24,lo8(.LC2)
 1513 0144 90E0      		ldi r25,hi8(.LC2)
 1514               	.L99:
 1515               		.loc 1 312 0 is_stmt 0 discriminator 3
 1516 0146 9F93      		push r25
 1517 0148 8F93      		push r24
 1518 014a 80E0      		ldi r24,lo8(__c.4818)
 1519 014c 90E0      		ldi r25,hi8(__c.4818)
 1520 014e 9F93      		push r25
 1521 0150 8F93      		push r24
 1522 0152 0E94 0000 		call __xprintf
 1523               	.LVL112:
 313:rn42/rn42_task.c ****             xprintf("force_usb: %X\n", force_usb);
 1524               		.loc 1 313 0 is_stmt 1 discriminator 3
 1525 0156 8091 0000 		lds r24,force_usb
 1526 015a 1F92      		push __zero_reg__
 1527 015c 8F93      		push r24
 1528 015e 80E0      		ldi r24,lo8(__c.4820)
 1529 0160 90E0      		ldi r25,hi8(__c.4820)
 1530 0162 9F93      		push r25
 1531 0164 8F93      		push r24
 1532 0166 0E94 0000 		call __xprintf
 1533               	.LVL113:
 314:rn42/rn42_task.c ****             xprintf("rn42: %s\n", rn42_rts() ? "OFF" : (rn42_linked() ? "CONN" : "ON"));
 1534               		.loc 1 314 0 discriminator 3
 1535 016a 0E94 0000 		call rn42_rts
 1536               	.LVL114:
 1537 016e 0FB6      		in __tmp_reg__,__SREG__
 1538 0170 F894      		cli
 1539 0172 DEBF      		out __SP_H__,r29
 1540 0174 0FBE      		out __SREG__,__tmp_reg__
 1541 0176 CDBF      		out __SP_L__,r28
 1542 0178 8111      		cpse r24,__zero_reg__
 1543 017a 00C0      		rjmp .L113
 1544               		.loc 1 314 0 is_stmt 0 discriminator 2
 1545 017c 0E94 0000 		call rn42_linked
 1546               	.LVL115:
 1547 0180 8823      		tst r24
 1548 0182 01F0      		breq .L114
 1549               		.loc 1 314 0
 1550 0184 80E0      		ldi r24,lo8(.LC5)
 1551 0186 90E0      		ldi r25,hi8(.LC5)
 1552 0188 00C0      		rjmp .L100
 1553               	.L113:
 1554 018a 80E0      		ldi r24,lo8(.LC3)
 1555 018c 90E0      		ldi r25,hi8(.LC3)
 1556 018e 00C0      		rjmp .L100
 1557               	.L114:
 1558 0190 80E0      		ldi r24,lo8(.LC4)
 1559 0192 90E0      		ldi r25,hi8(.LC4)
 1560               	.L100:
 1561               		.loc 1 314 0 discriminator 6
 1562 0194 9F93      		push r25
 1563 0196 8F93      		push r24
 1564 0198 80E0      		ldi r24,lo8(__c.4822)
 1565 019a 90E0      		ldi r25,hi8(__c.4822)
 1566 019c 9F93      		push r25
 1567 019e 8F93      		push r24
 1568 01a0 0E94 0000 		call __xprintf
 1569               	.LVL116:
 315:rn42/rn42_task.c ****             xprintf("rn42_autoconnecting(): %X\n", rn42_autoconnecting());
 1570               		.loc 1 315 0 is_stmt 1 discriminator 6
 1571 01a4 0E94 0000 		call rn42_autoconnecting
 1572               	.LVL117:
 1573 01a8 1F92      		push __zero_reg__
 1574 01aa 8F93      		push r24
 1575 01ac 80E0      		ldi r24,lo8(__c.4824)
 1576 01ae 90E0      		ldi r25,hi8(__c.4824)
 1577 01b0 9F93      		push r25
 1578 01b2 8F93      		push r24
 1579 01b4 0E94 0000 		call __xprintf
 1580               	.LVL118:
 316:rn42/rn42_task.c ****             xprintf("config_mode: %X\n", config_mode);
 1581               		.loc 1 316 0 discriminator 6
 1582 01b8 8091 0000 		lds r24,config_mode
 1583 01bc 1F92      		push __zero_reg__
 1584 01be 8F93      		push r24
 1585 01c0 80E0      		ldi r24,lo8(__c.4826)
 1586 01c2 90E0      		ldi r25,hi8(__c.4826)
 1587 01c4 9F93      		push r25
 1588 01c6 8F93      		push r24
 1589 01c8 0E94 0000 		call __xprintf
 1590               	.LVL119:
 317:rn42/rn42_task.c ****             xprintf("USB State: %s\n",
 1591               		.loc 1 317 0 discriminator 6
 1592 01cc 8091 0000 		lds r24,USB_DeviceState
 1593 01d0 0FB6      		in __tmp_reg__,__SREG__
 1594 01d2 F894      		cli
 1595 01d4 DEBF      		out __SP_H__,r29
 1596 01d6 0FBE      		out __SREG__,__tmp_reg__
 1597 01d8 CDBF      		out __SP_L__,r28
 1598 01da 8823      		tst r24
 1599 01dc 01F0      		breq .L115
 1600               		.loc 1 317 0 is_stmt 0 discriminator 1
 1601 01de 8091 0000 		lds r24,USB_DeviceState
 1602 01e2 8130      		cpi r24,lo8(1)
 1603 01e4 01F0      		breq .L116
 1604               		.loc 1 317 0 discriminator 3
 1605 01e6 8091 0000 		lds r24,USB_DeviceState
 1606 01ea 8230      		cpi r24,lo8(2)
 1607 01ec 01F0      		breq .L117
 1608               		.loc 1 317 0 discriminator 5
 1609 01ee 8091 0000 		lds r24,USB_DeviceState
 1610 01f2 8330      		cpi r24,lo8(3)
 1611 01f4 01F0      		breq .L118
 1612               		.loc 1 317 0 discriminator 7
 1613 01f6 8091 0000 		lds r24,USB_DeviceState
 1614 01fa 8430      		cpi r24,lo8(4)
 1615 01fc 01F0      		breq .L119
 1616               		.loc 1 317 0 discriminator 9
 1617 01fe 8091 0000 		lds r24,USB_DeviceState
 1618 0202 8530      		cpi r24,lo8(5)
 1619 0204 01F4      		brne .L120
 1620               		.loc 1 317 0
 1621 0206 80E0      		ldi r24,lo8(.LC12)
 1622 0208 90E0      		ldi r25,hi8(.LC12)
 1623 020a 00C0      		rjmp .L101
 1624               	.L115:
 1625 020c 80E0      		ldi r24,lo8(.LC7)
 1626 020e 90E0      		ldi r25,hi8(.LC7)
 1627 0210 00C0      		rjmp .L101
 1628               	.L116:
 1629 0212 80E0      		ldi r24,lo8(.LC6)
 1630 0214 90E0      		ldi r25,hi8(.LC6)
 1631 0216 00C0      		rjmp .L101
 1632               	.L117:
 1633 0218 80E0      		ldi r24,lo8(.LC8)
 1634 021a 90E0      		ldi r25,hi8(.LC8)
 1635 021c 00C0      		rjmp .L101
 1636               	.L118:
 1637 021e 80E0      		ldi r24,lo8(.LC9)
 1638 0220 90E0      		ldi r25,hi8(.LC9)
 1639 0222 00C0      		rjmp .L101
 1640               	.L119:
 1641 0224 80E0      		ldi r24,lo8(.LC10)
 1642 0226 90E0      		ldi r25,hi8(.LC10)
 1643 0228 00C0      		rjmp .L101
 1644               	.L120:
 1645 022a 80E0      		ldi r24,lo8(.LC11)
 1646 022c 90E0      		ldi r25,hi8(.LC11)
 1647               	.L101:
 1648               		.loc 1 317 0 discriminator 18
 1649 022e 9F93      		push r25
 1650 0230 8F93      		push r24
 1651 0232 80E0      		ldi r24,lo8(__c.4828)
 1652 0234 90E0      		ldi r25,hi8(__c.4828)
 1653 0236 9F93      		push r25
 1654 0238 8F93      		push r24
 1655 023a 0E94 0000 		call __xprintf
 1656               	.LVL120:
 318:rn42/rn42_task.c ****                     (USB_DeviceState == DEVICE_STATE_Unattached) ? "Unattached" :
 319:rn42/rn42_task.c ****                     (USB_DeviceState == DEVICE_STATE_Powered) ? "Powered" :
 320:rn42/rn42_task.c ****                     (USB_DeviceState == DEVICE_STATE_Default) ? "Default" :
 321:rn42/rn42_task.c ****                     (USB_DeviceState == DEVICE_STATE_Addressed) ? "Addressed" :
 322:rn42/rn42_task.c ****                     (USB_DeviceState == DEVICE_STATE_Configured) ? "Configured" :
 323:rn42/rn42_task.c ****                     (USB_DeviceState == DEVICE_STATE_Suspended) ? "Suspended" : "?");
 324:rn42/rn42_task.c ****             xprintf("battery: ");
 1657               		.loc 1 324 0 is_stmt 1 discriminator 18
 1658 023e 80E0      		ldi r24,lo8(__c.4830)
 1659 0240 90E0      		ldi r25,hi8(__c.4830)
 1660 0242 9F93      		push r25
 1661 0244 8F93      		push r24
 1662 0246 0E94 0000 		call __xprintf
 1663               	.LVL121:
 325:rn42/rn42_task.c ****             switch (battery_status()) {
 1664               		.loc 1 325 0 discriminator 18
 1665 024a 0E94 0000 		call battery_status
 1666               	.LVL122:
 1667 024e 0F90      		pop __tmp_reg__
 1668 0250 0F90      		pop __tmp_reg__
 1669 0252 0F90      		pop __tmp_reg__
 1670 0254 0F90      		pop __tmp_reg__
 1671 0256 0F90      		pop __tmp_reg__
 1672 0258 0F90      		pop __tmp_reg__
 1673 025a 8130      		cpi r24,lo8(1)
 1674 025c 01F0      		breq .L104
 1675 025e 00F0      		brlo .L103
 1676 0260 8230      		cpi r24,lo8(2)
 1677 0262 01F0      		breq .L105
 1678 0264 8330      		cpi r24,lo8(3)
 1679 0266 01F4      		brne .L128
 1680 0268 00C0      		rjmp .L106
 1681               	.L103:
 326:rn42/rn42_task.c ****                 case FULL_CHARGED:  xprintf("FULL"); break;
 1682               		.loc 1 326 0
 1683 026a 80E0      		ldi r24,lo8(__c.4833)
 1684 026c 90E0      		ldi r25,hi8(__c.4833)
 1685 026e 00C0      		rjmp .L129
 1686               	.L104:
 327:rn42/rn42_task.c ****                 case CHARGING:      xprintf("CHARG"); break;
 1687               		.loc 1 327 0
 1688 0270 80E0      		ldi r24,lo8(__c.4837)
 1689 0272 90E0      		ldi r25,hi8(__c.4837)
 1690 0274 00C0      		rjmp .L129
 1691               	.L105:
 328:rn42/rn42_task.c ****                 case DISCHARGING:   xprintf("DISCHG"); break;
 1692               		.loc 1 328 0
 1693 0276 80E0      		ldi r24,lo8(__c.4840)
 1694 0278 90E0      		ldi r25,hi8(__c.4840)
 1695 027a 00C0      		rjmp .L129
 1696               	.L106:
 329:rn42/rn42_task.c ****                 case LOW_VOLTAGE:   xprintf("LOW"); break;
 1697               		.loc 1 329 0
 1698 027c 80E0      		ldi r24,lo8(__c.4843)
 1699 027e 90E0      		ldi r25,hi8(__c.4843)
 1700 0280 00C0      		rjmp .L129
 1701               	.L128:
 330:rn42/rn42_task.c ****                 default:            xprintf("?"); break;
 1702               		.loc 1 330 0
 1703 0282 80E0      		ldi r24,lo8(__c.4846)
 1704 0284 90E0      		ldi r25,hi8(__c.4846)
 1705               	.L129:
 1706 0286 9F93      		push r25
 1707 0288 8F93      		push r24
 1708 028a 0E94 0000 		call __xprintf
 1709               	.LVL123:
 1710 028e 0F90      		pop __tmp_reg__
 1711 0290 0F90      		pop __tmp_reg__
 331:rn42/rn42_task.c ****             };
 332:rn42/rn42_task.c ****             xprintf("\n");
 1712               		.loc 1 332 0
 1713 0292 80E0      		ldi r24,lo8(__c.4848)
 1714 0294 90E0      		ldi r25,hi8(__c.4848)
 1715 0296 9F93      		push r25
 1716 0298 8F93      		push r24
 1717 029a 0E94 0000 		call __xprintf
 1718               	.LVL124:
 333:rn42/rn42_task.c ****             xprintf("RemoteWakeupEnabled: %X\n", USB_Device_RemoteWakeupEnabled);
 1719               		.loc 1 333 0
 1720 029e 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 1721 02a2 1F92      		push __zero_reg__
 1722 02a4 8F93      		push r24
 1723 02a6 80E0      		ldi r24,lo8(__c.4850)
 1724 02a8 90E0      		ldi r25,hi8(__c.4850)
 1725 02aa 9F93      		push r25
 1726 02ac 8F93      		push r24
 1727 02ae 0E94 0000 		call __xprintf
 1728               	.LVL125:
 334:rn42/rn42_task.c ****             xprintf("VBUS: %X\n", USBSTA&(1<<VBUS));
 1729               		.loc 1 334 0
 1730 02b2 8091 D900 		lds r24,217
 1731 02b6 8170      		andi r24,lo8(1)
 1732 02b8 1F92      		push __zero_reg__
 1733 02ba 8F93      		push r24
 1734 02bc 80E0      		ldi r24,lo8(__c.4852)
 1735 02be 90E0      		ldi r25,hi8(__c.4852)
 1736 02c0 9F93      		push r25
 1737 02c2 8F93      		push r24
 1738 02c4 0E94 0000 		call __xprintf
 1739               	.LVL126:
 335:rn42/rn42_task.c ****             t = timer_read32()/1000;
 1740               		.loc 1 335 0
 1741 02c8 0E94 0000 		call timer_read32
 1742               	.LVL127:
 1743 02cc 28EE      		ldi r18,lo8(-24)
 1744 02ce 33E0      		ldi r19,lo8(3)
 1745 02d0 40E0      		ldi r20,0
 1746 02d2 50E0      		ldi r21,0
 1747 02d4 0E94 0000 		call __udivmodsi4
 1748 02d8 6901      		movw r12,r18
 1749 02da 7A01      		movw r14,r20
 1750               	.LVL128:
 336:rn42/rn42_task.c ****             uint8_t d = t/3600/24;
 337:rn42/rn42_task.c ****             uint8_t h = t/3600;
 338:rn42/rn42_task.c ****             uint8_t m = t%3600/60;
 339:rn42/rn42_task.c ****             uint8_t s = t%60;
 1751               		.loc 1 339 0
 1752 02dc FCE3      		ldi r31,lo8(60)
 1753 02de 8F2E      		mov r8,r31
 1754 02e0 912C      		mov r9,__zero_reg__
 1755 02e2 A12C      		mov r10,__zero_reg__
 1756 02e4 B12C      		mov r11,__zero_reg__
 1757 02e6 CA01      		movw r24,r20
 1758 02e8 B901      		movw r22,r18
 1759 02ea A501      		movw r20,r10
 1760 02ec 9401      		movw r18,r8
 1761 02ee 0E94 0000 		call __udivmodsi4
 340:rn42/rn42_task.c ****             xprintf("uptime: %02u %02u:%02u:%02u\n", d, h, m, s);
 1762               		.loc 1 340 0
 1763 02f2 7F93      		push r23
 1764 02f4 6F93      		push r22
 338:rn42/rn42_task.c ****             uint8_t m = t%3600/60;
 1765               		.loc 1 338 0
 1766 02f6 C701      		movw r24,r14
 1767 02f8 B601      		movw r22,r12
 1768 02fa 20E1      		ldi r18,lo8(16)
 1769 02fc 3EE0      		ldi r19,lo8(14)
 1770 02fe 40E0      		ldi r20,0
 1771 0300 50E0      		ldi r21,0
 1772 0302 0E94 0000 		call __udivmodsi4
 1773 0306 722E      		mov r7,r18
 1774 0308 A501      		movw r20,r10
 1775 030a 9401      		movw r18,r8
 1776 030c 0E94 0000 		call __udivmodsi4
 1777               		.loc 1 340 0
 1778 0310 3F93      		push r19
 1779 0312 2F93      		push r18
 1780 0314 1F92      		push __zero_reg__
 1781 0316 7F92      		push r7
 336:rn42/rn42_task.c ****             uint8_t d = t/3600/24;
 1782               		.loc 1 336 0
 1783 0318 C701      		movw r24,r14
 1784 031a B601      		movw r22,r12
 1785 031c 20E8      		ldi r18,lo8(-128)
 1786 031e 31E5      		ldi r19,lo8(81)
 1787 0320 41E0      		ldi r20,lo8(1)
 1788 0322 50E0      		ldi r21,0
 1789 0324 0E94 0000 		call __udivmodsi4
 1790               		.loc 1 340 0
 1791 0328 3F93      		push r19
 1792 032a 2F93      		push r18
 1793 032c 80E0      		ldi r24,lo8(__c.4858)
 1794 032e 90E0      		ldi r25,hi8(__c.4858)
 1795 0330 9F93      		push r25
 1796 0332 8F93      		push r24
 1797 0334 0E94 0000 		call __xprintf
 1798               	.LVL129:
 341:rn42/rn42_task.c **** 
 342:rn42/rn42_task.c ****             xprintf("LINK0: %s\r\n", get_link(RN42_LINK0));
 1799               		.loc 1 342 0
 1800 0338 80E8      		ldi r24,lo8(-128)
 1801 033a 90E0      		ldi r25,0
 1802 033c 0E94 0000 		call get_link
 1803               	.LVL130:
 1804 0340 9F93      		push r25
 1805 0342 8F93      		push r24
 1806 0344 80E0      		ldi r24,lo8(__c.4860)
 1807 0346 90E0      		ldi r25,hi8(__c.4860)
 1808 0348 9F93      		push r25
 1809 034a 8F93      		push r24
 1810 034c 0E94 0000 		call __xprintf
 1811               	.LVL131:
 343:rn42/rn42_task.c ****             xprintf("LINK1: %s\r\n", get_link(RN42_LINK1));
 1812               		.loc 1 343 0
 1813 0350 8CE8      		ldi r24,lo8(-116)
 1814 0352 90E0      		ldi r25,0
 1815 0354 0E94 0000 		call get_link
 1816               	.LVL132:
 1817 0358 9F93      		push r25
 1818 035a 8F93      		push r24
 1819 035c 80E0      		ldi r24,lo8(__c.4862)
 1820 035e 90E0      		ldi r25,hi8(__c.4862)
 1821 0360 9F93      		push r25
 1822 0362 8F93      		push r24
 1823 0364 0E94 0000 		call __xprintf
 1824               	.LVL133:
 344:rn42/rn42_task.c ****             xprintf("LINK2: %s\r\n", get_link(RN42_LINK2));
 1825               		.loc 1 344 0
 1826 0368 88E9      		ldi r24,lo8(-104)
 1827 036a 90E0      		ldi r25,0
 1828 036c 0E94 0000 		call get_link
 1829               	.LVL134:
 1830 0370 9F93      		push r25
 1831 0372 8F93      		push r24
 1832 0374 80E0      		ldi r24,lo8(__c.4864)
 1833 0376 90E0      		ldi r25,hi8(__c.4864)
 1834 0378 9F93      		push r25
 1835 037a 8F93      		push r24
 1836 037c 0E94 0000 		call __xprintf
 1837               	.LVL135:
 345:rn42/rn42_task.c ****             xprintf("LINK3: %s\r\n", get_link(RN42_LINK3));
 1838               		.loc 1 345 0
 1839 0380 0FB6      		in __tmp_reg__,__SREG__
 1840 0382 F894      		cli
 1841 0384 DEBF      		out __SP_H__,r29
 1842 0386 0FBE      		out __SREG__,__tmp_reg__
 1843 0388 CDBF      		out __SP_L__,r28
 1844 038a 84EA      		ldi r24,lo8(-92)
 1845 038c 90E0      		ldi r25,0
 1846 038e 0E94 0000 		call get_link
 1847               	.LVL136:
 1848 0392 9F93      		push r25
 1849 0394 8F93      		push r24
 1850 0396 80E0      		ldi r24,lo8(__c.4866)
 1851 0398 90E0      		ldi r25,hi8(__c.4866)
 1852 039a 9F93      		push r25
 1853 039c 8F93      		push r24
 1854 039e 0E94 0000 		call __xprintf
 1855               	.LVL137:
 346:rn42/rn42_task.c **** 
 347:rn42/rn42_task.c ****             return true;
 1856               		.loc 1 347 0
 1857 03a2 0F90      		pop __tmp_reg__
 1858 03a4 0F90      		pop __tmp_reg__
 1859 03a6 0F90      		pop __tmp_reg__
 1860 03a8 0F90      		pop __tmp_reg__
 1861 03aa 00C0      		rjmp .L130
 1862               	.LVL138:
 1863               	.L79:
 348:rn42/rn42_task.c ****         case KC_B:
 349:rn42/rn42_task.c ****             // battery monitor
 350:rn42/rn42_task.c ****             t = timer_read32()/1000;
 1864               		.loc 1 350 0
 1865 03ac 0E94 0000 		call timer_read32
 1866               	.LVL139:
 1867 03b0 28EE      		ldi r18,lo8(-24)
 1868 03b2 33E0      		ldi r19,lo8(3)
 1869 03b4 40E0      		ldi r20,0
 1870 03b6 50E0      		ldi r21,0
 1871 03b8 0E94 0000 		call __udivmodsi4
 1872 03bc 2901      		movw r4,r18
 1873 03be 3A01      		movw r6,r20
 1874               	.LVL140:
 351:rn42/rn42_task.c ****             b = battery_voltage();
 1875               		.loc 1 351 0
 1876 03c0 0E94 0000 		call battery_voltage
 1877               	.LVL141:
 352:rn42/rn42_task.c ****             xprintf("BAT: %umV\t", b);
 1878               		.loc 1 352 0
 1879 03c4 9F93      		push r25
 1880 03c6 8F93      		push r24
 1881 03c8 80E0      		ldi r24,lo8(__c.4869)
 1882 03ca 90E0      		ldi r25,hi8(__c.4869)
 1883               	.LVL142:
 1884 03cc 9F93      		push r25
 1885               	.LVL143:
 1886 03ce 8F93      		push r24
 1887               	.LVL144:
 1888 03d0 0E94 0000 		call __xprintf
 1889               	.LVL145:
 353:rn42/rn42_task.c ****             xprintf("%02u:",   t/3600);
 1890               		.loc 1 353 0
 1891 03d4 C301      		movw r24,r6
 1892 03d6 B201      		movw r22,r4
 1893 03d8 20E1      		ldi r18,lo8(16)
 1894 03da 3EE0      		ldi r19,lo8(14)
 1895 03dc 40E0      		ldi r20,0
 1896 03de 50E0      		ldi r21,0
 1897 03e0 0E94 0000 		call __udivmodsi4
 1898 03e4 5F93      		push r21
 1899 03e6 4F93      		push r20
 1900 03e8 3F93      		push r19
 1901 03ea 2F93      		push r18
 1902 03ec 20E0      		ldi r18,lo8(__c.4871)
 1903 03ee 30E0      		ldi r19,hi8(__c.4871)
 1904 03f0 3F93      		push r19
 1905 03f2 2F93      		push r18
 1906 03f4 6983      		std Y+1,r22
 1907 03f6 7A83      		std Y+2,r23
 1908 03f8 8B83      		std Y+3,r24
 1909 03fa 9C83      		std Y+4,r25
 1910 03fc 0E94 0000 		call __xprintf
 1911               	.LVL146:
 354:rn42/rn42_task.c ****             xprintf("%02u:",   t%3600/60);
 1912               		.loc 1 354 0
 1913 0400 ECE3      		ldi r30,lo8(60)
 1914 0402 8E2E      		mov r8,r30
 1915 0404 912C      		mov r9,__zero_reg__
 1916 0406 A12C      		mov r10,__zero_reg__
 1917 0408 B12C      		mov r11,__zero_reg__
 1918 040a 6981      		ldd r22,Y+1
 1919 040c 7A81      		ldd r23,Y+2
 1920 040e 8B81      		ldd r24,Y+3
 1921 0410 9C81      		ldd r25,Y+4
 1922 0412 A501      		movw r20,r10
 1923 0414 9401      		movw r18,r8
 1924 0416 0E94 0000 		call __udivmodsi4
 1925 041a 5F93      		push r21
 1926 041c 4F93      		push r20
 1927 041e 3F93      		push r19
 1928 0420 2F93      		push r18
 1929 0422 80E0      		ldi r24,lo8(__c.4873)
 1930 0424 90E0      		ldi r25,hi8(__c.4873)
 1931 0426 9F93      		push r25
 1932 0428 8F93      		push r24
 1933 042a 0E94 0000 		call __xprintf
 1934               	.LVL147:
 355:rn42/rn42_task.c ****             xprintf("%02u\n",  t%60);
 1935               		.loc 1 355 0
 1936 042e C301      		movw r24,r6
 1937 0430 B201      		movw r22,r4
 1938 0432 A501      		movw r20,r10
 1939 0434 9401      		movw r18,r8
 1940 0436 0E94 0000 		call __udivmodsi4
 1941 043a 9F93      		push r25
 1942 043c 8F93      		push r24
 1943 043e 7F93      		push r23
 1944 0440 6F93      		push r22
 1945 0442 80E0      		ldi r24,lo8(__c.4875)
 1946 0444 90E0      		ldi r25,hi8(__c.4875)
 1947 0446 9F93      		push r25
 1948 0448 8F93      		push r24
 1949 044a 0E94 0000 		call __xprintf
 1950               	.LVL148:
 356:rn42/rn42_task.c ****             return true;
 1951               		.loc 1 356 0
 1952 044e 0FB6      		in __tmp_reg__,__SREG__
 1953 0450 F894      		cli
 1954 0452 DEBF      		out __SP_H__,r29
 1955 0454 0FBE      		out __SREG__,__tmp_reg__
 1956 0456 CDBF      		out __SP_L__,r28
 1957 0458 00C0      		rjmp .L130
 1958               	.LVL149:
 1959               	.L83:
 357:rn42/rn42_task.c ****         case KC_U:
 358:rn42/rn42_task.c ****             if (config_mode) return false;
 1960               		.loc 1 358 0
 1961 045a 8091 0000 		lds r24,config_mode
 1962               	.LVL150:
 1963 045e 8111      		cpse r24,__zero_reg__
 1964 0460 00C0      		rjmp .L121
 359:rn42/rn42_task.c ****             if (force_usb) {
 1965               		.loc 1 359 0
 1966 0462 8091 0000 		lds r24,force_usb
 1967 0466 8823      		tst r24
 1968 0468 01F0      		breq .L108
 360:rn42/rn42_task.c ****                 print("Auto mode\n");
 1969               		.loc 1 360 0
 1970 046a 80E0      		ldi r24,lo8(__c.4878)
 1971 046c 90E0      		ldi r25,hi8(__c.4878)
 1972 046e 0E94 0000 		call xputs
 1973               	.LVL151:
 361:rn42/rn42_task.c ****                 force_usb = false;
 1974               		.loc 1 361 0
 1975 0472 1092 0000 		sts force_usb,__zero_reg__
 1976 0476 00C0      		rjmp .L130
 1977               	.L108:
 362:rn42/rn42_task.c ****             } else {
 363:rn42/rn42_task.c ****                 print("USB mode\n");
 1978               		.loc 1 363 0
 1979 0478 80E0      		ldi r24,lo8(__c.4880)
 1980 047a 90E0      		ldi r25,hi8(__c.4880)
 1981 047c 0E94 0000 		call xputs
 1982               	.LVL152:
 364:rn42/rn42_task.c ****                 force_usb = true;
 1983               		.loc 1 364 0
 1984 0480 81E0      		ldi r24,lo8(1)
 1985 0482 8093 0000 		sts force_usb,r24
 365:rn42/rn42_task.c ****                 clear_keyboard();
 1986               		.loc 1 365 0
 1987 0486 0E94 0000 		call clear_keyboard
 1988               	.LVL153:
 366:rn42/rn42_task.c ****                 host_set_driver(&lufa_driver);
 1989               		.loc 1 366 0
 1990 048a 80E0      		ldi r24,lo8(lufa_driver)
 1991 048c 90E0      		ldi r25,hi8(lufa_driver)
 1992 048e 0E94 0000 		call host_set_driver
 1993               	.LVL154:
 1994 0492 00C0      		rjmp .L130
 1995               	.LVL155:
 1996               	.L93:
 367:rn42/rn42_task.c ****             }
 368:rn42/rn42_task.c ****             return true;
 369:rn42/rn42_task.c ****         case KC_DELETE:
 370:rn42/rn42_task.c ****             /* RN-42 Command mode */
 371:rn42/rn42_task.c ****             if (rn42_autoconnecting()) {
 1997               		.loc 1 371 0
 1998 0494 0E94 0000 		call rn42_autoconnecting
 1999               	.LVL156:
 2000 0498 8823      		tst r24
 2001 049a 01F0      		breq .L109
 372:rn42/rn42_task.c ****                 enter_command_mode();
 2002               		.loc 1 372 0
 2003 049c 0E94 0000 		call enter_command_mode
 2004               	.LVL157:
 373:rn42/rn42_task.c **** 
 374:rn42/rn42_task.c ****                 command_state = CONSOLE;
 2005               		.loc 1 374 0
 2006 04a0 81E0      		ldi r24,lo8(1)
 2007 04a2 8093 0000 		sts command_state,r24
 375:rn42/rn42_task.c ****                 config_mode = true;
 2008               		.loc 1 375 0
 2009 04a6 8093 0000 		sts config_mode,r24
 2010 04aa 00C0      		rjmp .L98
 2011               	.L109:
 376:rn42/rn42_task.c ****             } else {
 377:rn42/rn42_task.c ****                 exit_command_mode();
 2012               		.loc 1 377 0
 2013 04ac 0E94 0000 		call exit_command_mode
 2014               	.LVL158:
 378:rn42/rn42_task.c **** 
 379:rn42/rn42_task.c ****                 command_state = ONESHOT;
 2015               		.loc 1 379 0
 2016 04b0 1092 0000 		sts command_state,__zero_reg__
 380:rn42/rn42_task.c ****                 config_mode = false;
 2017               		.loc 1 380 0
 2018 04b4 1092 0000 		sts config_mode,__zero_reg__
 2019 04b8 00C0      		rjmp .L130
 2020               	.LVL159:
 2021               	.L92:
 2022               	.LBB84:
 2023               	.LBB85:
 181:rn42/rn42_task.c ****     if (!config_mode) enter_command_mode();
 2024               		.loc 1 181 0
 2025 04ba 8091 0000 		lds r24,config_mode
 2026               	.LVL160:
 2027 04be 8111      		cpse r24,__zero_reg__
 2028 04c0 00C0      		rjmp .L110
 2029 04c2 0E94 0000 		call enter_command_mode
 2030               	.LVL161:
 2031               	.L110:
 182:rn42/rn42_task.c ****     SEND_COMMAND("SF,1\r\n");  // factory defaults
 2032               		.loc 1 182 0
 2033 04c6 80E0      		ldi r24,lo8(__c.4711)
 2034 04c8 90E0      		ldi r25,hi8(__c.4711)
 2035 04ca 0E94 0000 		call send_command
 2036               	.LVL162:
 183:rn42/rn42_task.c ****     SEND_COMMAND("S-,TmkBT\r\n"); //sets the serialized "friendly name"
 2037               		.loc 1 183 0
 2038 04ce 80E0      		ldi r24,lo8(__c.4713)
 2039 04d0 90E0      		ldi r25,hi8(__c.4713)
 2040 04d2 0E94 0000 		call send_command
 2041               	.LVL163:
 184:rn42/rn42_task.c ****     SEND_COMMAND("SS,Keyboard/Mouse\r\n"); // sets "service name"
 2042               		.loc 1 184 0
 2043 04d6 80E0      		ldi r24,lo8(__c.4715)
 2044 04d8 90E0      		ldi r25,hi8(__c.4715)
 2045 04da 0E94 0000 		call send_command
 2046               	.LVL164:
 185:rn42/rn42_task.c ****     SEND_COMMAND("SM,4\r\n");  // auto connect(DTR) - use gpio 6 to make and break connections
 2047               		.loc 1 185 0
 2048 04de 80E0      		ldi r24,lo8(__c.4717)
 2049 04e0 90E0      		ldi r25,hi8(__c.4717)
 2050 04e2 0E94 0000 		call send_command
 2051               	.LVL165:
 186:rn42/rn42_task.c ****     SEND_COMMAND("SW,8000\r\n");   // Sniff disable - deep sleep setting READ MORE
 2052               		.loc 1 186 0
 2053 04e6 80E0      		ldi r24,lo8(__c.4719)
 2054 04e8 90E0      		ldi r25,hi8(__c.4719)
 2055 04ea 0E94 0000 		call send_command
 2056               	.LVL166:
 187:rn42/rn42_task.c ****     SEND_COMMAND("S~,6\r\n");   // HID profile
 2057               		.loc 1 187 0
 2058 04ee 80E0      		ldi r24,lo8(__c.4721)
 2059 04f0 90E0      		ldi r25,hi8(__c.4721)
 2060 04f2 0E94 0000 		call send_command
 2061               	.LVL167:
 188:rn42/rn42_task.c ****     SEND_COMMAND("SH,003C\r\n");   // combo device, out-report, 4-reconnect. binary: 111100
 2062               		.loc 1 188 0
 2063 04f6 80E0      		ldi r24,lo8(__c.4723)
 2064 04f8 90E0      		ldi r25,hi8(__c.4723)
 2065 04fa 0E94 0000 		call send_command
 2066               	.LVL168:
 189:rn42/rn42_task.c ****     SEND_COMMAND("SY,FFF4\r\n");   // transmit power -12
 2067               		.loc 1 189 0
 2068 04fe 80E0      		ldi r24,lo8(__c.4725)
 2069 0500 90E0      		ldi r25,hi8(__c.4725)
 2070 0502 0E94 0000 		call send_command
 2071               	.LVL169:
 190:rn42/rn42_task.c ****     SEND_COMMAND("R,1\r\n");	// reboot module
 2072               		.loc 1 190 0
 2073 0506 80E0      		ldi r24,lo8(__c.4727)
 2074 0508 90E0      		ldi r25,hi8(__c.4727)
 2075 050a 0E94 0000 		call send_command
 2076               	.LVL170:
 191:rn42/rn42_task.c ****     if (!config_mode) exit_command_mode();
 2077               		.loc 1 191 0
 2078 050e 8091 0000 		lds r24,config_mode
 2079 0512 8111      		cpse r24,__zero_reg__
 2080 0514 00C0      		rjmp .L130
 2081               	.L131:
 2082 0516 0E94 0000 		call exit_command_mode
 2083               	.LVL171:
 2084               	.L130:
 381:rn42/rn42_task.c ****             }
 382:rn42/rn42_task.c ****             return true;
 383:rn42/rn42_task.c ****         case KC_SCROLLLOCK:
 384:rn42/rn42_task.c ****             init_rn42();
 385:rn42/rn42_task.c ****             return true;
 2085               		.loc 1 385 0
 2086 051a 81E0      		ldi r24,lo8(1)
 2087 051c 00C0      		rjmp .L98
 2088               	.LVL172:
 2089               	.L78:
 2090               	.LBE85:
 2091               	.LBE84:
 386:rn42/rn42_task.c ****         default:
 387:rn42/rn42_task.c ****             if (config_mode)
 2092               		.loc 1 387 0
 2093 051e 8091 0000 		lds r24,config_mode
 2094               	.LVL173:
 2095 0522 00C0      		rjmp .L98
 2096               	.L121:
 358:rn42/rn42_task.c ****             if (config_mode) return false;
 2097               		.loc 1 358 0
 2098 0524 80E0      		ldi r24,0
 2099               	.L98:
 2100               	/* epilogue start */
 2101               	.LBE81:
 388:rn42/rn42_task.c ****                 return true;
 389:rn42/rn42_task.c ****             else
 390:rn42/rn42_task.c ****                 return false;   // yield to default command
 391:rn42/rn42_task.c ****     }
 392:rn42/rn42_task.c ****     return true;
 393:rn42/rn42_task.c **** }
 2102               		.loc 1 393 0
 2103 0526 0F90      		pop __tmp_reg__
 2104 0528 0F90      		pop __tmp_reg__
 2105 052a 0F90      		pop __tmp_reg__
 2106 052c 0F90      		pop __tmp_reg__
 2107 052e DF91      		pop r29
 2108 0530 CF91      		pop r28
 2109 0532 FF90      		pop r15
 2110 0534 EF90      		pop r14
 2111 0536 DF90      		pop r13
 2112 0538 CF90      		pop r12
 2113 053a BF90      		pop r11
 2114 053c AF90      		pop r10
 2115 053e 9F90      		pop r9
 2116 0540 8F90      		pop r8
 2117 0542 7F90      		pop r7
 2118 0544 6F90      		pop r6
 2119 0546 5F90      		pop r5
 2120 0548 4F90      		pop r4
 2121 054a 0895      		ret
 2122               		.cfi_endproc
 2123               	.LFE118:
 2125               		.section	.text.command_console_extra,"ax",@progbits
 2126               	.global	command_console_extra
 2128               	command_console_extra:
 2129               	.LFB119:
 394:rn42/rn42_task.c **** 
 395:rn42/rn42_task.c **** /*
 396:rn42/rn42_task.c ****  * RN-42 Command mode
 397:rn42/rn42_task.c ****  * sends charactors to the module
 398:rn42/rn42_task.c ****  */
 399:rn42/rn42_task.c **** static uint8_t code2asc(uint8_t code);
 400:rn42/rn42_task.c **** bool command_console_extra(uint8_t code)
 401:rn42/rn42_task.c **** {
 2130               		.loc 1 401 0
 2131               		.cfi_startproc
 2132               	.LVL174:
 2133 0000 CF93      		push r28
 2134               	.LCFI108:
 2135               		.cfi_def_cfa_offset 3
 2136               		.cfi_offset 28, -2
 2137               	/* prologue: function */
 2138               	/* frame size = 0 */
 2139               	/* stack size = 1 */
 2140               	.L__stack_usage = 1
 2141 0002 C82F      		mov r28,r24
 2142               	.LVL175:
 2143               	.LBB88:
 2144               	.LBB89:
 402:rn42/rn42_task.c ****     rn42_putc(code2asc(code));
 403:rn42/rn42_task.c ****     return true;
 404:rn42/rn42_task.c **** }
 405:rn42/rn42_task.c **** 
 406:rn42/rn42_task.c **** // convert keycode into ascii charactor
 407:rn42/rn42_task.c **** static uint8_t code2asc(uint8_t code)
 408:rn42/rn42_task.c **** {
 409:rn42/rn42_task.c ****     bool shifted = (get_mods() & (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RCTL))) ? true : false;
 2145               		.loc 1 409 0
 2146 0004 0E94 0000 		call get_mods
 2147               	.LVL176:
 2148               	.LBE89:
 2149 0008 8271      		andi r24,lo8(18)
 2150               	.LBB90:
 2151 000a 21E0      		ldi r18,lo8(1)
 2152 000c 01F4      		brne .L135
 2153 000e 20E0      		ldi r18,0
 2154               	.L135:
 2155               	.LVL177:
 410:rn42/rn42_task.c ****     switch (code) {
 2156               		.loc 1 410 0
 2157 0010 8C2F      		mov r24,r28
 2158 0012 90E0      		ldi r25,0
 2159 0014 FC01      		movw r30,r24
 2160 0016 3497      		sbiw r30,4
 2161 0018 E934      		cpi r30,73
 2162 001a F105      		cpc r31,__zero_reg__
 2163 001c 00F0      		brlo .+2
 2164 001e 00C0      		rjmp .L136
 2165               	.LVL178:
 2166 0020 E050      		subi r30,lo8(-(gs(.L191)))
 2167 0022 F040      		sbci r31,hi8(-(gs(.L191)))
 2168 0024 0C94 0000 		jmp __tablejump2__
 2169               		.section	.progmem.gcc_sw_table.command_console_extra,"a",@progbits
 2170               		.p2align	1
 2171               	.L191:
 2172 0000 0000      		.word gs(.L137)
 2173 0002 0000      		.word gs(.L138)
 2174 0004 0000      		.word gs(.L139)
 2175 0006 0000      		.word gs(.L140)
 2176 0008 0000      		.word gs(.L141)
 2177 000a 0000      		.word gs(.L142)
 2178 000c 0000      		.word gs(.L143)
 2179 000e 0000      		.word gs(.L144)
 2180 0010 0000      		.word gs(.L145)
 2181 0012 0000      		.word gs(.L146)
 2182 0014 0000      		.word gs(.L147)
 2183 0016 0000      		.word gs(.L148)
 2184 0018 0000      		.word gs(.L149)
 2185 001a 0000      		.word gs(.L150)
 2186 001c 0000      		.word gs(.L151)
 2187 001e 0000      		.word gs(.L152)
 2188 0020 0000      		.word gs(.L153)
 2189 0022 0000      		.word gs(.L154)
 2190 0024 0000      		.word gs(.L155)
 2191 0026 0000      		.word gs(.L156)
 2192 0028 0000      		.word gs(.L157)
 2193 002a 0000      		.word gs(.L158)
 2194 002c 0000      		.word gs(.L159)
 2195 002e 0000      		.word gs(.L160)
 2196 0030 0000      		.word gs(.L161)
 2197 0032 0000      		.word gs(.L162)
 2198 0034 0000      		.word gs(.L163)
 2199 0036 0000      		.word gs(.L164)
 2200 0038 0000      		.word gs(.L165)
 2201 003a 0000      		.word gs(.L166)
 2202 003c 0000      		.word gs(.L167)
 2203 003e 0000      		.word gs(.L168)
 2204 0040 0000      		.word gs(.L169)
 2205 0042 0000      		.word gs(.L170)
 2206 0044 0000      		.word gs(.L171)
 2207 0046 0000      		.word gs(.L172)
 2208 0048 0000      		.word gs(.L173)
 2209 004a 0000      		.word gs(.L193)
 2210 004c 0000      		.word gs(.L175)
 2211 004e 0000      		.word gs(.L176)
 2212 0050 0000      		.word gs(.L177)
 2213 0052 0000      		.word gs(.L178)
 2214 0054 0000      		.word gs(.L179)
 2215 0056 0000      		.word gs(.L180)
 2216 0058 0000      		.word gs(.L181)
 2217 005a 0000      		.word gs(.L182)
 2218 005c 0000      		.word gs(.L183)
 2219 005e 0000      		.word gs(.L184)
 2220 0060 0000      		.word gs(.L185)
 2221 0062 0000      		.word gs(.L186)
 2222 0064 0000      		.word gs(.L187)
 2223 0066 0000      		.word gs(.L188)
 2224 0068 0000      		.word gs(.L189)
 2225 006a 0000      		.word gs(.L136)
 2226 006c 0000      		.word gs(.L136)
 2227 006e 0000      		.word gs(.L136)
 2228 0070 0000      		.word gs(.L136)
 2229 0072 0000      		.word gs(.L136)
 2230 0074 0000      		.word gs(.L136)
 2231 0076 0000      		.word gs(.L136)
 2232 0078 0000      		.word gs(.L136)
 2233 007a 0000      		.word gs(.L136)
 2234 007c 0000      		.word gs(.L136)
 2235 007e 0000      		.word gs(.L136)
 2236 0080 0000      		.word gs(.L136)
 2237 0082 0000      		.word gs(.L136)
 2238 0084 0000      		.word gs(.L136)
 2239 0086 0000      		.word gs(.L136)
 2240 0088 0000      		.word gs(.L136)
 2241 008a 0000      		.word gs(.L136)
 2242 008c 0000      		.word gs(.L136)
 2243 008e 0000      		.word gs(.L136)
 2244 0090 0000      		.word gs(.L190)
 2245               		.section	.text.command_console_extra
 2246               	.L173:
 411:rn42/rn42_task.c ****         case KC_A: return (shifted ? 'A' : 'a');
 412:rn42/rn42_task.c ****         case KC_B: return (shifted ? 'B' : 'b');
 413:rn42/rn42_task.c ****         case KC_C: return (shifted ? 'C' : 'c');
 414:rn42/rn42_task.c ****         case KC_D: return (shifted ? 'D' : 'd');
 415:rn42/rn42_task.c ****         case KC_E: return (shifted ? 'E' : 'e');
 416:rn42/rn42_task.c ****         case KC_F: return (shifted ? 'F' : 'f');
 417:rn42/rn42_task.c ****         case KC_G: return (shifted ? 'G' : 'g');
 418:rn42/rn42_task.c ****         case KC_H: return (shifted ? 'H' : 'h');
 419:rn42/rn42_task.c ****         case KC_I: return (shifted ? 'I' : 'i');
 420:rn42/rn42_task.c ****         case KC_J: return (shifted ? 'J' : 'j');
 421:rn42/rn42_task.c ****         case KC_K: return (shifted ? 'K' : 'k');
 422:rn42/rn42_task.c ****         case KC_L: return (shifted ? 'L' : 'l');
 423:rn42/rn42_task.c ****         case KC_M: return (shifted ? 'M' : 'm');
 424:rn42/rn42_task.c ****         case KC_N: return (shifted ? 'N' : 'n');
 425:rn42/rn42_task.c ****         case KC_O: return (shifted ? 'O' : 'o');
 426:rn42/rn42_task.c ****         case KC_P: return (shifted ? 'P' : 'p');
 427:rn42/rn42_task.c ****         case KC_Q: return (shifted ? 'Q' : 'q');
 428:rn42/rn42_task.c ****         case KC_R: return (shifted ? 'R' : 'r');
 429:rn42/rn42_task.c ****         case KC_S: return (shifted ? 'S' : 's');
 430:rn42/rn42_task.c ****         case KC_T: return (shifted ? 'T' : 't');
 431:rn42/rn42_task.c ****         case KC_U: return (shifted ? 'U' : 'u');
 432:rn42/rn42_task.c ****         case KC_V: return (shifted ? 'V' : 'v');
 433:rn42/rn42_task.c ****         case KC_W: return (shifted ? 'W' : 'w');
 434:rn42/rn42_task.c ****         case KC_X: return (shifted ? 'X' : 'x');
 435:rn42/rn42_task.c ****         case KC_Y: return (shifted ? 'Y' : 'y');
 436:rn42/rn42_task.c ****         case KC_Z: return (shifted ? 'Z' : 'z');
 437:rn42/rn42_task.c ****         case KC_1: return (shifted ? '!' : '1');
 438:rn42/rn42_task.c ****         case KC_2: return (shifted ? '@' : '2');
 439:rn42/rn42_task.c ****         case KC_3: return (shifted ? '#' : '3');
 440:rn42/rn42_task.c ****         case KC_4: return (shifted ? '$' : '4');
 441:rn42/rn42_task.c ****         case KC_5: return (shifted ? '%' : '5');
 442:rn42/rn42_task.c ****         case KC_6: return (shifted ? '^' : '6');
 443:rn42/rn42_task.c ****         case KC_7: return (shifted ? '&' : '7');
 444:rn42/rn42_task.c ****         case KC_8: return (shifted ? '*' : '8');
 445:rn42/rn42_task.c ****         case KC_9: return (shifted ? '(' : '9');
 446:rn42/rn42_task.c ****         case KC_0: return (shifted ? ')' : '0');
 447:rn42/rn42_task.c ****         case KC_ENTER: return '\n';
 2247               		.loc 1 447 0
 2248 0028 8AE0      		ldi r24,lo8(10)
 2249               	.LVL179:
 2250 002a 00C0      		rjmp .L174
 2251               	.LVL180:
 2252               	.L137:
 411:rn42/rn42_task.c ****         case KC_A: return (shifted ? 'A' : 'a');
 2253               		.loc 1 411 0
 2254 002c 2223      		tst r18
 2255 002e 01F4      		brne .+2
 2256 0030 00C0      		rjmp .L194
 2257 0032 81E4      		ldi r24,lo8(65)
 2258               	.LVL181:
 2259 0034 00C0      		rjmp .L174
 2260               	.LVL182:
 2261               	.L138:
 412:rn42/rn42_task.c ****         case KC_B: return (shifted ? 'B' : 'b');
 2262               		.loc 1 412 0
 2263 0036 2223      		tst r18
 2264 0038 01F4      		brne .+2
 2265 003a 00C0      		rjmp .L195
 2266 003c 82E4      		ldi r24,lo8(66)
 2267               	.LVL183:
 2268 003e 00C0      		rjmp .L174
 2269               	.LVL184:
 2270               	.L139:
 413:rn42/rn42_task.c ****         case KC_C: return (shifted ? 'C' : 'c');
 2271               		.loc 1 413 0
 2272 0040 2223      		tst r18
 2273 0042 01F4      		brne .+2
 2274 0044 00C0      		rjmp .L196
 2275 0046 83E4      		ldi r24,lo8(67)
 2276               	.LVL185:
 2277 0048 00C0      		rjmp .L174
 2278               	.LVL186:
 2279               	.L140:
 414:rn42/rn42_task.c ****         case KC_D: return (shifted ? 'D' : 'd');
 2280               		.loc 1 414 0
 2281 004a 2223      		tst r18
 2282 004c 01F4      		brne .+2
 2283 004e 00C0      		rjmp .L197
 2284 0050 84E4      		ldi r24,lo8(68)
 2285               	.LVL187:
 2286 0052 00C0      		rjmp .L174
 2287               	.LVL188:
 2288               	.L141:
 415:rn42/rn42_task.c ****         case KC_E: return (shifted ? 'E' : 'e');
 2289               		.loc 1 415 0
 2290 0054 2223      		tst r18
 2291 0056 01F4      		brne .+2
 2292 0058 00C0      		rjmp .L198
 2293 005a 85E4      		ldi r24,lo8(69)
 2294               	.LVL189:
 2295 005c 00C0      		rjmp .L174
 2296               	.LVL190:
 2297               	.L142:
 416:rn42/rn42_task.c ****         case KC_F: return (shifted ? 'F' : 'f');
 2298               		.loc 1 416 0
 2299 005e 2223      		tst r18
 2300 0060 01F4      		brne .+2
 2301 0062 00C0      		rjmp .L199
 2302 0064 86E4      		ldi r24,lo8(70)
 2303               	.LVL191:
 2304 0066 00C0      		rjmp .L174
 2305               	.LVL192:
 2306               	.L143:
 417:rn42/rn42_task.c ****         case KC_G: return (shifted ? 'G' : 'g');
 2307               		.loc 1 417 0
 2308 0068 2223      		tst r18
 2309 006a 01F4      		brne .+2
 2310 006c 00C0      		rjmp .L200
 2311 006e 87E4      		ldi r24,lo8(71)
 2312               	.LVL193:
 2313 0070 00C0      		rjmp .L174
 2314               	.LVL194:
 2315               	.L144:
 418:rn42/rn42_task.c ****         case KC_H: return (shifted ? 'H' : 'h');
 2316               		.loc 1 418 0
 2317 0072 2223      		tst r18
 2318 0074 01F4      		brne .+2
 2319 0076 00C0      		rjmp .L201
 2320 0078 88E4      		ldi r24,lo8(72)
 2321               	.LVL195:
 2322 007a 00C0      		rjmp .L174
 2323               	.LVL196:
 2324               	.L145:
 419:rn42/rn42_task.c ****         case KC_I: return (shifted ? 'I' : 'i');
 2325               		.loc 1 419 0
 2326 007c 2223      		tst r18
 2327 007e 01F4      		brne .+2
 2328 0080 00C0      		rjmp .L202
 2329 0082 89E4      		ldi r24,lo8(73)
 2330               	.LVL197:
 2331 0084 00C0      		rjmp .L174
 2332               	.LVL198:
 2333               	.L146:
 420:rn42/rn42_task.c ****         case KC_J: return (shifted ? 'J' : 'j');
 2334               		.loc 1 420 0
 2335 0086 2223      		tst r18
 2336 0088 01F4      		brne .+2
 2337 008a 00C0      		rjmp .L203
 2338 008c 8AE4      		ldi r24,lo8(74)
 2339               	.LVL199:
 2340 008e 00C0      		rjmp .L174
 2341               	.LVL200:
 2342               	.L147:
 421:rn42/rn42_task.c ****         case KC_K: return (shifted ? 'K' : 'k');
 2343               		.loc 1 421 0
 2344 0090 2223      		tst r18
 2345 0092 01F4      		brne .+2
 2346 0094 00C0      		rjmp .L204
 2347 0096 8BE4      		ldi r24,lo8(75)
 2348               	.LVL201:
 2349 0098 00C0      		rjmp .L174
 2350               	.LVL202:
 2351               	.L148:
 422:rn42/rn42_task.c ****         case KC_L: return (shifted ? 'L' : 'l');
 2352               		.loc 1 422 0
 2353 009a 2223      		tst r18
 2354 009c 01F4      		brne .+2
 2355 009e 00C0      		rjmp .L205
 2356 00a0 8CE4      		ldi r24,lo8(76)
 2357               	.LVL203:
 2358 00a2 00C0      		rjmp .L174
 2359               	.LVL204:
 2360               	.L149:
 423:rn42/rn42_task.c ****         case KC_M: return (shifted ? 'M' : 'm');
 2361               		.loc 1 423 0
 2362 00a4 2223      		tst r18
 2363 00a6 01F4      		brne .+2
 2364 00a8 00C0      		rjmp .L206
 2365 00aa 8DE4      		ldi r24,lo8(77)
 2366               	.LVL205:
 2367 00ac 00C0      		rjmp .L174
 2368               	.LVL206:
 2369               	.L150:
 424:rn42/rn42_task.c ****         case KC_N: return (shifted ? 'N' : 'n');
 2370               		.loc 1 424 0
 2371 00ae 2223      		tst r18
 2372 00b0 01F4      		brne .+2
 2373 00b2 00C0      		rjmp .L207
 2374 00b4 8EE4      		ldi r24,lo8(78)
 2375               	.LVL207:
 2376 00b6 00C0      		rjmp .L174
 2377               	.LVL208:
 2378               	.L151:
 425:rn42/rn42_task.c ****         case KC_O: return (shifted ? 'O' : 'o');
 2379               		.loc 1 425 0
 2380 00b8 2223      		tst r18
 2381 00ba 01F4      		brne .+2
 2382 00bc 00C0      		rjmp .L208
 2383 00be 8FE4      		ldi r24,lo8(79)
 2384               	.LVL209:
 2385 00c0 00C0      		rjmp .L174
 2386               	.LVL210:
 2387               	.L152:
 426:rn42/rn42_task.c ****         case KC_P: return (shifted ? 'P' : 'p');
 2388               		.loc 1 426 0
 2389 00c2 2223      		tst r18
 2390 00c4 01F4      		brne .+2
 2391 00c6 00C0      		rjmp .L209
 2392 00c8 80E5      		ldi r24,lo8(80)
 2393               	.LVL211:
 2394 00ca 00C0      		rjmp .L174
 2395               	.LVL212:
 2396               	.L153:
 427:rn42/rn42_task.c ****         case KC_Q: return (shifted ? 'Q' : 'q');
 2397               		.loc 1 427 0
 2398 00cc 2223      		tst r18
 2399 00ce 01F4      		brne .+2
 2400 00d0 00C0      		rjmp .L210
 2401 00d2 81E5      		ldi r24,lo8(81)
 2402               	.LVL213:
 2403 00d4 00C0      		rjmp .L174
 2404               	.LVL214:
 2405               	.L154:
 428:rn42/rn42_task.c ****         case KC_R: return (shifted ? 'R' : 'r');
 2406               		.loc 1 428 0
 2407 00d6 2223      		tst r18
 2408 00d8 01F4      		brne .+2
 2409 00da 00C0      		rjmp .L211
 2410 00dc 82E5      		ldi r24,lo8(82)
 2411               	.LVL215:
 2412 00de 00C0      		rjmp .L174
 2413               	.LVL216:
 2414               	.L155:
 429:rn42/rn42_task.c ****         case KC_S: return (shifted ? 'S' : 's');
 2415               		.loc 1 429 0
 2416 00e0 2223      		tst r18
 2417 00e2 01F4      		brne .+2
 2418 00e4 00C0      		rjmp .L212
 2419 00e6 83E5      		ldi r24,lo8(83)
 2420               	.LVL217:
 2421 00e8 00C0      		rjmp .L174
 2422               	.LVL218:
 2423               	.L156:
 430:rn42/rn42_task.c ****         case KC_T: return (shifted ? 'T' : 't');
 2424               		.loc 1 430 0
 2425 00ea 2223      		tst r18
 2426 00ec 01F4      		brne .+2
 2427 00ee 00C0      		rjmp .L213
 2428 00f0 84E5      		ldi r24,lo8(84)
 2429               	.LVL219:
 2430 00f2 00C0      		rjmp .L174
 2431               	.LVL220:
 2432               	.L157:
 431:rn42/rn42_task.c ****         case KC_U: return (shifted ? 'U' : 'u');
 2433               		.loc 1 431 0
 2434 00f4 2223      		tst r18
 2435 00f6 01F4      		brne .+2
 2436 00f8 00C0      		rjmp .L214
 2437 00fa 85E5      		ldi r24,lo8(85)
 2438               	.LVL221:
 2439 00fc 00C0      		rjmp .L174
 2440               	.LVL222:
 2441               	.L158:
 432:rn42/rn42_task.c ****         case KC_V: return (shifted ? 'V' : 'v');
 2442               		.loc 1 432 0
 2443 00fe 2223      		tst r18
 2444 0100 01F4      		brne .+2
 2445 0102 00C0      		rjmp .L215
 2446 0104 86E5      		ldi r24,lo8(86)
 2447               	.LVL223:
 2448 0106 00C0      		rjmp .L174
 2449               	.LVL224:
 2450               	.L159:
 433:rn42/rn42_task.c ****         case KC_W: return (shifted ? 'W' : 'w');
 2451               		.loc 1 433 0
 2452 0108 2223      		tst r18
 2453 010a 01F4      		brne .+2
 2454 010c 00C0      		rjmp .L216
 2455 010e 87E5      		ldi r24,lo8(87)
 2456               	.LVL225:
 2457 0110 00C0      		rjmp .L174
 2458               	.LVL226:
 2459               	.L160:
 434:rn42/rn42_task.c ****         case KC_X: return (shifted ? 'X' : 'x');
 2460               		.loc 1 434 0
 2461 0112 2223      		tst r18
 2462 0114 01F4      		brne .+2
 2463 0116 00C0      		rjmp .L217
 2464 0118 88E5      		ldi r24,lo8(88)
 2465               	.LVL227:
 2466 011a 00C0      		rjmp .L174
 2467               	.LVL228:
 2468               	.L161:
 435:rn42/rn42_task.c ****         case KC_Y: return (shifted ? 'Y' : 'y');
 2469               		.loc 1 435 0
 2470 011c 2223      		tst r18
 2471 011e 01F4      		brne .+2
 2472 0120 00C0      		rjmp .L218
 2473 0122 89E5      		ldi r24,lo8(89)
 2474               	.LVL229:
 2475 0124 00C0      		rjmp .L174
 2476               	.LVL230:
 2477               	.L162:
 436:rn42/rn42_task.c ****         case KC_Z: return (shifted ? 'Z' : 'z');
 2478               		.loc 1 436 0
 2479 0126 2223      		tst r18
 2480 0128 01F4      		brne .+2
 2481 012a 00C0      		rjmp .L219
 2482 012c 8AE5      		ldi r24,lo8(90)
 2483               	.LVL231:
 2484 012e 00C0      		rjmp .L174
 2485               	.LVL232:
 2486               	.L163:
 437:rn42/rn42_task.c ****         case KC_1: return (shifted ? '!' : '1');
 2487               		.loc 1 437 0
 2488 0130 2223      		tst r18
 2489 0132 01F4      		brne .+2
 2490 0134 00C0      		rjmp .L220
 2491 0136 81E2      		ldi r24,lo8(33)
 2492               	.LVL233:
 2493 0138 00C0      		rjmp .L174
 2494               	.LVL234:
 2495               	.L164:
 438:rn42/rn42_task.c ****         case KC_2: return (shifted ? '@' : '2');
 2496               		.loc 1 438 0
 2497 013a 2223      		tst r18
 2498 013c 01F4      		brne .+2
 2499 013e 00C0      		rjmp .L221
 2500 0140 80E4      		ldi r24,lo8(64)
 2501               	.LVL235:
 2502 0142 00C0      		rjmp .L174
 2503               	.LVL236:
 2504               	.L165:
 439:rn42/rn42_task.c ****         case KC_3: return (shifted ? '#' : '3');
 2505               		.loc 1 439 0
 2506 0144 2223      		tst r18
 2507 0146 01F4      		brne .+2
 2508 0148 00C0      		rjmp .L222
 2509 014a 83E2      		ldi r24,lo8(35)
 2510               	.LVL237:
 2511 014c 00C0      		rjmp .L174
 2512               	.LVL238:
 2513               	.L166:
 440:rn42/rn42_task.c ****         case KC_4: return (shifted ? '$' : '4');
 2514               		.loc 1 440 0
 2515 014e 2223      		tst r18
 2516 0150 01F4      		brne .+2
 2517 0152 00C0      		rjmp .L223
 2518 0154 84E2      		ldi r24,lo8(36)
 2519               	.LVL239:
 2520 0156 00C0      		rjmp .L174
 2521               	.LVL240:
 2522               	.L167:
 441:rn42/rn42_task.c ****         case KC_5: return (shifted ? '%' : '5');
 2523               		.loc 1 441 0
 2524 0158 2223      		tst r18
 2525 015a 01F4      		brne .+2
 2526 015c 00C0      		rjmp .L224
 2527 015e 85E2      		ldi r24,lo8(37)
 2528               	.LVL241:
 2529 0160 00C0      		rjmp .L174
 2530               	.LVL242:
 2531               	.L168:
 442:rn42/rn42_task.c ****         case KC_6: return (shifted ? '^' : '6');
 2532               		.loc 1 442 0
 2533 0162 2223      		tst r18
 2534 0164 01F4      		brne .+2
 2535 0166 00C0      		rjmp .L225
 2536 0168 8EE5      		ldi r24,lo8(94)
 2537               	.LVL243:
 2538 016a 00C0      		rjmp .L174
 2539               	.LVL244:
 2540               	.L169:
 443:rn42/rn42_task.c ****         case KC_7: return (shifted ? '&' : '7');
 2541               		.loc 1 443 0
 2542 016c 2223      		tst r18
 2543 016e 01F4      		brne .+2
 2544 0170 00C0      		rjmp .L226
 2545 0172 86E2      		ldi r24,lo8(38)
 2546               	.LVL245:
 2547 0174 00C0      		rjmp .L174
 2548               	.LVL246:
 2549               	.L170:
 444:rn42/rn42_task.c ****         case KC_8: return (shifted ? '*' : '8');
 2550               		.loc 1 444 0
 2551 0176 2223      		tst r18
 2552 0178 01F4      		brne .+2
 2553 017a 00C0      		rjmp .L227
 2554 017c 8AE2      		ldi r24,lo8(42)
 2555               	.LVL247:
 2556 017e 00C0      		rjmp .L174
 2557               	.LVL248:
 2558               	.L171:
 445:rn42/rn42_task.c ****         case KC_9: return (shifted ? '(' : '9');
 2559               		.loc 1 445 0
 2560 0180 2223      		tst r18
 2561 0182 01F4      		brne .+2
 2562 0184 00C0      		rjmp .L228
 2563 0186 88E2      		ldi r24,lo8(40)
 2564               	.LVL249:
 2565 0188 00C0      		rjmp .L174
 2566               	.LVL250:
 2567               	.L172:
 446:rn42/rn42_task.c ****         case KC_0: return (shifted ? ')' : '0');
 2568               		.loc 1 446 0
 2569 018a 2223      		tst r18
 2570 018c 01F4      		brne .+2
 2571 018e 00C0      		rjmp .L229
 2572 0190 89E2      		ldi r24,lo8(41)
 2573               	.LVL251:
 2574 0192 00C0      		rjmp .L174
 2575               	.LVL252:
 2576               	.L175:
 448:rn42/rn42_task.c ****         case KC_ESCAPE: return 0x1B;
 449:rn42/rn42_task.c ****         case KC_BSPACE: return '\b';
 2577               		.loc 1 449 0
 2578 0194 88E0      		ldi r24,lo8(8)
 2579               	.LVL253:
 2580 0196 00C0      		rjmp .L174
 2581               	.LVL254:
 2582               	.L176:
 450:rn42/rn42_task.c ****         case KC_TAB: return '\t';
 2583               		.loc 1 450 0
 2584 0198 89E0      		ldi r24,lo8(9)
 2585               	.LVL255:
 2586 019a 00C0      		rjmp .L174
 2587               	.LVL256:
 2588               	.L177:
 451:rn42/rn42_task.c ****         case KC_SPACE: return ' ';
 2589               		.loc 1 451 0
 2590 019c 80E2      		ldi r24,lo8(32)
 2591               	.LVL257:
 2592 019e 00C0      		rjmp .L174
 2593               	.LVL258:
 2594               	.L178:
 452:rn42/rn42_task.c ****         case KC_MINUS: return (shifted ? '_' : '-');
 2595               		.loc 1 452 0
 2596 01a0 2223      		tst r18
 2597 01a2 01F4      		brne .+2
 2598 01a4 00C0      		rjmp .L230
 2599 01a6 8FE5      		ldi r24,lo8(95)
 2600               	.LVL259:
 2601 01a8 00C0      		rjmp .L174
 2602               	.LVL260:
 2603               	.L179:
 453:rn42/rn42_task.c ****         case KC_EQUAL: return (shifted ? '+' : '=');
 2604               		.loc 1 453 0
 2605 01aa 2223      		tst r18
 2606 01ac 01F4      		brne .+2
 2607 01ae 00C0      		rjmp .L231
 2608 01b0 8BE2      		ldi r24,lo8(43)
 2609               	.LVL261:
 2610 01b2 00C0      		rjmp .L174
 2611               	.LVL262:
 2612               	.L180:
 454:rn42/rn42_task.c ****         case KC_LBRACKET: return (shifted ? '{' : '[');
 2613               		.loc 1 454 0
 2614 01b4 2223      		tst r18
 2615 01b6 01F4      		brne .+2
 2616 01b8 00C0      		rjmp .L232
 2617 01ba 8BE7      		ldi r24,lo8(123)
 2618               	.LVL263:
 2619 01bc 00C0      		rjmp .L174
 2620               	.LVL264:
 2621               	.L181:
 455:rn42/rn42_task.c ****         case KC_RBRACKET: return (shifted ? '}' : ']');
 2622               		.loc 1 455 0
 2623 01be 2223      		tst r18
 2624 01c0 01F4      		brne .+2
 2625 01c2 00C0      		rjmp .L233
 2626 01c4 8DE7      		ldi r24,lo8(125)
 2627               	.LVL265:
 2628 01c6 00C0      		rjmp .L174
 2629               	.LVL266:
 2630               	.L182:
 456:rn42/rn42_task.c ****         case KC_BSLASH: return (shifted ? '|' : '\\');
 2631               		.loc 1 456 0
 2632 01c8 2223      		tst r18
 2633 01ca 01F4      		brne .+2
 2634 01cc 00C0      		rjmp .L234
 2635               	.L192:
 2636 01ce 8CE7      		ldi r24,lo8(124)
 2637               	.LVL267:
 2638 01d0 00C0      		rjmp .L174
 2639               	.LVL268:
 2640               	.L183:
 457:rn42/rn42_task.c ****         case KC_NONUS_HASH: return (shifted ? '|' : '\\');
 2641               		.loc 1 457 0
 2642 01d2 2111      		cpse r18,__zero_reg__
 2643 01d4 00C0      		rjmp .L192
 456:rn42/rn42_task.c ****         case KC_BSLASH: return (shifted ? '|' : '\\');
 2644               		.loc 1 456 0
 2645 01d6 8CE5      		ldi r24,lo8(92)
 2646               	.LVL269:
 2647 01d8 00C0      		rjmp .L174
 2648               	.LVL270:
 2649               	.L184:
 458:rn42/rn42_task.c ****         case KC_SCOLON: return (shifted ? ':' : ';');
 2650               		.loc 1 458 0
 2651 01da 2223      		tst r18
 2652 01dc 01F4      		brne .+2
 2653 01de 00C0      		rjmp .L235
 2654 01e0 8AE3      		ldi r24,lo8(58)
 2655               	.LVL271:
 2656 01e2 00C0      		rjmp .L174
 2657               	.LVL272:
 2658               	.L185:
 459:rn42/rn42_task.c ****         case KC_QUOTE: return (shifted ? '"' : '\'');
 2659               		.loc 1 459 0
 2660 01e4 2223      		tst r18
 2661 01e6 01F4      		brne .+2
 2662 01e8 00C0      		rjmp .L236
 2663 01ea 82E2      		ldi r24,lo8(34)
 2664               	.LVL273:
 2665 01ec 00C0      		rjmp .L174
 2666               	.LVL274:
 2667               	.L186:
 460:rn42/rn42_task.c ****         case KC_GRAVE: return (shifted ? '~' : '`');
 2668               		.loc 1 460 0
 2669 01ee 2223      		tst r18
 2670 01f0 01F4      		brne .+2
 2671 01f2 00C0      		rjmp .L237
 2672 01f4 8EE7      		ldi r24,lo8(126)
 2673               	.LVL275:
 2674 01f6 00C0      		rjmp .L174
 2675               	.LVL276:
 2676               	.L187:
 461:rn42/rn42_task.c ****         case KC_COMMA: return (shifted ? '<' : ',');
 2677               		.loc 1 461 0
 2678 01f8 2223      		tst r18
 2679 01fa 01F4      		brne .+2
 2680 01fc 00C0      		rjmp .L238
 2681 01fe 8CE3      		ldi r24,lo8(60)
 2682               	.LVL277:
 2683 0200 00C0      		rjmp .L174
 2684               	.LVL278:
 2685               	.L188:
 462:rn42/rn42_task.c ****         case KC_DOT: return (shifted ? '>' : '.');
 2686               		.loc 1 462 0
 2687 0202 2223      		tst r18
 2688 0204 01F4      		brne .+2
 2689 0206 00C0      		rjmp .L239
 2690 0208 8EE3      		ldi r24,lo8(62)
 2691               	.LVL279:
 2692 020a 00C0      		rjmp .L174
 2693               	.LVL280:
 2694               	.L189:
 463:rn42/rn42_task.c ****         case KC_SLASH: return (shifted ? '?' : '/');
 2695               		.loc 1 463 0
 2696 020c 2223      		tst r18
 2697 020e 01F4      		brne .+2
 2698 0210 00C0      		rjmp .L240
 2699 0212 8FE3      		ldi r24,lo8(63)
 2700               	.LVL281:
 2701 0214 00C0      		rjmp .L174
 2702               	.LVL282:
 2703               	.L190:
 464:rn42/rn42_task.c ****         case KC_DELETE: return '\0';    // Delete to disconnect
 2704               		.loc 1 464 0
 2705 0216 80E0      		ldi r24,0
 2706               	.LVL283:
 2707 0218 00C0      		rjmp .L174
 2708               	.LVL284:
 2709               	.L136:
 465:rn42/rn42_task.c ****         default: return ' ';
 2710               		.loc 1 465 0
 2711 021a 80E2      		ldi r24,lo8(32)
 2712               	.LVL285:
 2713 021c 00C0      		rjmp .L174
 2714               	.LVL286:
 2715               	.L193:
 448:rn42/rn42_task.c ****         case KC_ESCAPE: return 0x1B;
 2716               		.loc 1 448 0
 2717 021e 8BE1      		ldi r24,lo8(27)
 2718               	.LVL287:
 2719 0220 00C0      		rjmp .L174
 2720               	.LVL288:
 2721               	.L194:
 411:rn42/rn42_task.c ****         case KC_A: return (shifted ? 'A' : 'a');
 2722               		.loc 1 411 0
 2723 0222 81E6      		ldi r24,lo8(97)
 2724               	.LVL289:
 2725 0224 00C0      		rjmp .L174
 2726               	.LVL290:
 2727               	.L195:
 412:rn42/rn42_task.c ****         case KC_B: return (shifted ? 'B' : 'b');
 2728               		.loc 1 412 0
 2729 0226 82E6      		ldi r24,lo8(98)
 2730               	.LVL291:
 2731 0228 00C0      		rjmp .L174
 2732               	.LVL292:
 2733               	.L196:
 413:rn42/rn42_task.c ****         case KC_C: return (shifted ? 'C' : 'c');
 2734               		.loc 1 413 0
 2735 022a 83E6      		ldi r24,lo8(99)
 2736               	.LVL293:
 2737 022c 00C0      		rjmp .L174
 2738               	.LVL294:
 2739               	.L197:
 414:rn42/rn42_task.c ****         case KC_D: return (shifted ? 'D' : 'd');
 2740               		.loc 1 414 0
 2741 022e 84E6      		ldi r24,lo8(100)
 2742               	.LVL295:
 2743 0230 00C0      		rjmp .L174
 2744               	.LVL296:
 2745               	.L198:
 415:rn42/rn42_task.c ****         case KC_E: return (shifted ? 'E' : 'e');
 2746               		.loc 1 415 0
 2747 0232 85E6      		ldi r24,lo8(101)
 2748               	.LVL297:
 2749 0234 00C0      		rjmp .L174
 2750               	.LVL298:
 2751               	.L199:
 416:rn42/rn42_task.c ****         case KC_F: return (shifted ? 'F' : 'f');
 2752               		.loc 1 416 0
 2753 0236 86E6      		ldi r24,lo8(102)
 2754               	.LVL299:
 2755 0238 00C0      		rjmp .L174
 2756               	.LVL300:
 2757               	.L200:
 417:rn42/rn42_task.c ****         case KC_G: return (shifted ? 'G' : 'g');
 2758               		.loc 1 417 0
 2759 023a 87E6      		ldi r24,lo8(103)
 2760               	.LVL301:
 2761 023c 00C0      		rjmp .L174
 2762               	.LVL302:
 2763               	.L201:
 418:rn42/rn42_task.c ****         case KC_H: return (shifted ? 'H' : 'h');
 2764               		.loc 1 418 0
 2765 023e 88E6      		ldi r24,lo8(104)
 2766               	.LVL303:
 2767 0240 00C0      		rjmp .L174
 2768               	.LVL304:
 2769               	.L202:
 419:rn42/rn42_task.c ****         case KC_I: return (shifted ? 'I' : 'i');
 2770               		.loc 1 419 0
 2771 0242 89E6      		ldi r24,lo8(105)
 2772               	.LVL305:
 2773 0244 00C0      		rjmp .L174
 2774               	.LVL306:
 2775               	.L203:
 420:rn42/rn42_task.c ****         case KC_J: return (shifted ? 'J' : 'j');
 2776               		.loc 1 420 0
 2777 0246 8AE6      		ldi r24,lo8(106)
 2778               	.LVL307:
 2779 0248 00C0      		rjmp .L174
 2780               	.LVL308:
 2781               	.L204:
 421:rn42/rn42_task.c ****         case KC_K: return (shifted ? 'K' : 'k');
 2782               		.loc 1 421 0
 2783 024a 8BE6      		ldi r24,lo8(107)
 2784               	.LVL309:
 2785 024c 00C0      		rjmp .L174
 2786               	.LVL310:
 2787               	.L205:
 422:rn42/rn42_task.c ****         case KC_L: return (shifted ? 'L' : 'l');
 2788               		.loc 1 422 0
 2789 024e 8CE6      		ldi r24,lo8(108)
 2790               	.LVL311:
 2791 0250 00C0      		rjmp .L174
 2792               	.LVL312:
 2793               	.L206:
 423:rn42/rn42_task.c ****         case KC_M: return (shifted ? 'M' : 'm');
 2794               		.loc 1 423 0
 2795 0252 8DE6      		ldi r24,lo8(109)
 2796               	.LVL313:
 2797 0254 00C0      		rjmp .L174
 2798               	.LVL314:
 2799               	.L207:
 424:rn42/rn42_task.c ****         case KC_N: return (shifted ? 'N' : 'n');
 2800               		.loc 1 424 0
 2801 0256 8EE6      		ldi r24,lo8(110)
 2802               	.LVL315:
 2803 0258 00C0      		rjmp .L174
 2804               	.LVL316:
 2805               	.L208:
 425:rn42/rn42_task.c ****         case KC_O: return (shifted ? 'O' : 'o');
 2806               		.loc 1 425 0
 2807 025a 8FE6      		ldi r24,lo8(111)
 2808               	.LVL317:
 2809 025c 00C0      		rjmp .L174
 2810               	.LVL318:
 2811               	.L209:
 426:rn42/rn42_task.c ****         case KC_P: return (shifted ? 'P' : 'p');
 2812               		.loc 1 426 0
 2813 025e 80E7      		ldi r24,lo8(112)
 2814               	.LVL319:
 2815 0260 00C0      		rjmp .L174
 2816               	.LVL320:
 2817               	.L210:
 427:rn42/rn42_task.c ****         case KC_Q: return (shifted ? 'Q' : 'q');
 2818               		.loc 1 427 0
 2819 0262 81E7      		ldi r24,lo8(113)
 2820               	.LVL321:
 2821 0264 00C0      		rjmp .L174
 2822               	.LVL322:
 2823               	.L211:
 428:rn42/rn42_task.c ****         case KC_R: return (shifted ? 'R' : 'r');
 2824               		.loc 1 428 0
 2825 0266 82E7      		ldi r24,lo8(114)
 2826               	.LVL323:
 2827 0268 00C0      		rjmp .L174
 2828               	.LVL324:
 2829               	.L212:
 429:rn42/rn42_task.c ****         case KC_S: return (shifted ? 'S' : 's');
 2830               		.loc 1 429 0
 2831 026a 83E7      		ldi r24,lo8(115)
 2832               	.LVL325:
 2833 026c 00C0      		rjmp .L174
 2834               	.LVL326:
 2835               	.L213:
 430:rn42/rn42_task.c ****         case KC_T: return (shifted ? 'T' : 't');
 2836               		.loc 1 430 0
 2837 026e 84E7      		ldi r24,lo8(116)
 2838               	.LVL327:
 2839 0270 00C0      		rjmp .L174
 2840               	.LVL328:
 2841               	.L214:
 431:rn42/rn42_task.c ****         case KC_U: return (shifted ? 'U' : 'u');
 2842               		.loc 1 431 0
 2843 0272 85E7      		ldi r24,lo8(117)
 2844               	.LVL329:
 2845 0274 00C0      		rjmp .L174
 2846               	.LVL330:
 2847               	.L215:
 432:rn42/rn42_task.c ****         case KC_V: return (shifted ? 'V' : 'v');
 2848               		.loc 1 432 0
 2849 0276 86E7      		ldi r24,lo8(118)
 2850               	.LVL331:
 2851 0278 00C0      		rjmp .L174
 2852               	.LVL332:
 2853               	.L216:
 433:rn42/rn42_task.c ****         case KC_W: return (shifted ? 'W' : 'w');
 2854               		.loc 1 433 0
 2855 027a 87E7      		ldi r24,lo8(119)
 2856               	.LVL333:
 2857 027c 00C0      		rjmp .L174
 2858               	.LVL334:
 2859               	.L217:
 434:rn42/rn42_task.c ****         case KC_X: return (shifted ? 'X' : 'x');
 2860               		.loc 1 434 0
 2861 027e 88E7      		ldi r24,lo8(120)
 2862               	.LVL335:
 2863 0280 00C0      		rjmp .L174
 2864               	.LVL336:
 2865               	.L218:
 435:rn42/rn42_task.c ****         case KC_Y: return (shifted ? 'Y' : 'y');
 2866               		.loc 1 435 0
 2867 0282 89E7      		ldi r24,lo8(121)
 2868               	.LVL337:
 2869 0284 00C0      		rjmp .L174
 2870               	.LVL338:
 2871               	.L219:
 436:rn42/rn42_task.c ****         case KC_Z: return (shifted ? 'Z' : 'z');
 2872               		.loc 1 436 0
 2873 0286 8AE7      		ldi r24,lo8(122)
 2874               	.LVL339:
 2875 0288 00C0      		rjmp .L174
 2876               	.LVL340:
 2877               	.L220:
 437:rn42/rn42_task.c ****         case KC_1: return (shifted ? '!' : '1');
 2878               		.loc 1 437 0
 2879 028a 81E3      		ldi r24,lo8(49)
 2880               	.LVL341:
 2881 028c 00C0      		rjmp .L174
 2882               	.LVL342:
 2883               	.L221:
 438:rn42/rn42_task.c ****         case KC_2: return (shifted ? '@' : '2');
 2884               		.loc 1 438 0
 2885 028e 82E3      		ldi r24,lo8(50)
 2886               	.LVL343:
 2887 0290 00C0      		rjmp .L174
 2888               	.LVL344:
 2889               	.L222:
 439:rn42/rn42_task.c ****         case KC_3: return (shifted ? '#' : '3');
 2890               		.loc 1 439 0
 2891 0292 83E3      		ldi r24,lo8(51)
 2892               	.LVL345:
 2893 0294 00C0      		rjmp .L174
 2894               	.LVL346:
 2895               	.L223:
 440:rn42/rn42_task.c ****         case KC_4: return (shifted ? '$' : '4');
 2896               		.loc 1 440 0
 2897 0296 84E3      		ldi r24,lo8(52)
 2898               	.LVL347:
 2899 0298 00C0      		rjmp .L174
 2900               	.LVL348:
 2901               	.L224:
 441:rn42/rn42_task.c ****         case KC_5: return (shifted ? '%' : '5');
 2902               		.loc 1 441 0
 2903 029a 85E3      		ldi r24,lo8(53)
 2904               	.LVL349:
 2905 029c 00C0      		rjmp .L174
 2906               	.LVL350:
 2907               	.L225:
 442:rn42/rn42_task.c ****         case KC_6: return (shifted ? '^' : '6');
 2908               		.loc 1 442 0
 2909 029e 86E3      		ldi r24,lo8(54)
 2910               	.LVL351:
 2911 02a0 00C0      		rjmp .L174
 2912               	.LVL352:
 2913               	.L226:
 443:rn42/rn42_task.c ****         case KC_7: return (shifted ? '&' : '7');
 2914               		.loc 1 443 0
 2915 02a2 87E3      		ldi r24,lo8(55)
 2916               	.LVL353:
 2917 02a4 00C0      		rjmp .L174
 2918               	.LVL354:
 2919               	.L227:
 444:rn42/rn42_task.c ****         case KC_8: return (shifted ? '*' : '8');
 2920               		.loc 1 444 0
 2921 02a6 88E3      		ldi r24,lo8(56)
 2922               	.LVL355:
 2923 02a8 00C0      		rjmp .L174
 2924               	.LVL356:
 2925               	.L228:
 445:rn42/rn42_task.c ****         case KC_9: return (shifted ? '(' : '9');
 2926               		.loc 1 445 0
 2927 02aa 89E3      		ldi r24,lo8(57)
 2928               	.LVL357:
 2929 02ac 00C0      		rjmp .L174
 2930               	.LVL358:
 2931               	.L229:
 446:rn42/rn42_task.c ****         case KC_0: return (shifted ? ')' : '0');
 2932               		.loc 1 446 0
 2933 02ae 80E3      		ldi r24,lo8(48)
 2934               	.LVL359:
 2935 02b0 00C0      		rjmp .L174
 2936               	.LVL360:
 2937               	.L230:
 452:rn42/rn42_task.c ****         case KC_MINUS: return (shifted ? '_' : '-');
 2938               		.loc 1 452 0
 2939 02b2 8DE2      		ldi r24,lo8(45)
 2940               	.LVL361:
 2941 02b4 00C0      		rjmp .L174
 2942               	.LVL362:
 2943               	.L231:
 453:rn42/rn42_task.c ****         case KC_EQUAL: return (shifted ? '+' : '=');
 2944               		.loc 1 453 0
 2945 02b6 8DE3      		ldi r24,lo8(61)
 2946               	.LVL363:
 2947 02b8 00C0      		rjmp .L174
 2948               	.LVL364:
 2949               	.L232:
 454:rn42/rn42_task.c ****         case KC_LBRACKET: return (shifted ? '{' : '[');
 2950               		.loc 1 454 0
 2951 02ba 8BE5      		ldi r24,lo8(91)
 2952               	.LVL365:
 2953 02bc 00C0      		rjmp .L174
 2954               	.LVL366:
 2955               	.L233:
 455:rn42/rn42_task.c ****         case KC_RBRACKET: return (shifted ? '}' : ']');
 2956               		.loc 1 455 0
 2957 02be 8DE5      		ldi r24,lo8(93)
 2958               	.LVL367:
 2959 02c0 00C0      		rjmp .L174
 2960               	.LVL368:
 2961               	.L234:
 456:rn42/rn42_task.c ****         case KC_BSLASH: return (shifted ? '|' : '\\');
 2962               		.loc 1 456 0
 2963 02c2 8CE5      		ldi r24,lo8(92)
 2964               	.LVL369:
 2965 02c4 00C0      		rjmp .L174
 2966               	.LVL370:
 2967               	.L235:
 458:rn42/rn42_task.c ****         case KC_SCOLON: return (shifted ? ':' : ';');
 2968               		.loc 1 458 0
 2969 02c6 8BE3      		ldi r24,lo8(59)
 2970               	.LVL371:
 2971 02c8 00C0      		rjmp .L174
 2972               	.LVL372:
 2973               	.L236:
 459:rn42/rn42_task.c ****         case KC_QUOTE: return (shifted ? '"' : '\'');
 2974               		.loc 1 459 0
 2975 02ca 87E2      		ldi r24,lo8(39)
 2976               	.LVL373:
 2977 02cc 00C0      		rjmp .L174
 2978               	.LVL374:
 2979               	.L237:
 460:rn42/rn42_task.c ****         case KC_GRAVE: return (shifted ? '~' : '`');
 2980               		.loc 1 460 0
 2981 02ce 80E6      		ldi r24,lo8(96)
 2982               	.LVL375:
 2983 02d0 00C0      		rjmp .L174
 2984               	.LVL376:
 2985               	.L238:
 461:rn42/rn42_task.c ****         case KC_COMMA: return (shifted ? '<' : ',');
 2986               		.loc 1 461 0
 2987 02d2 8CE2      		ldi r24,lo8(44)
 2988               	.LVL377:
 2989 02d4 00C0      		rjmp .L174
 2990               	.LVL378:
 2991               	.L239:
 462:rn42/rn42_task.c ****         case KC_DOT: return (shifted ? '>' : '.');
 2992               		.loc 1 462 0
 2993 02d6 8EE2      		ldi r24,lo8(46)
 2994               	.LVL379:
 2995 02d8 00C0      		rjmp .L174
 2996               	.LVL380:
 2997               	.L240:
 463:rn42/rn42_task.c ****         case KC_SLASH: return (shifted ? '?' : '/');
 2998               		.loc 1 463 0
 2999 02da 8FE2      		ldi r24,lo8(47)
 3000               	.LVL381:
 3001               	.L174:
 3002               	.LBE90:
 3003               	.LBE88:
 402:rn42/rn42_task.c ****     rn42_putc(code2asc(code));
 3004               		.loc 1 402 0
 3005 02dc 0E94 0000 		call rn42_putc
 3006               	.LVL382:
 404:rn42/rn42_task.c **** }
 3007               		.loc 1 404 0
 3008 02e0 81E0      		ldi r24,lo8(1)
 3009               	/* epilogue start */
 3010 02e2 CF91      		pop r28
 3011               	.LVL383:
 3012 02e4 0895      		ret
 3013               		.cfi_endproc
 3014               	.LFE119:
 3016               		.comm	rn42_config_driver,10,1
 3017               		.comm	rn42_driver,10,1
 3018               		.section	.bss.state.4631,"aw",@nobits
 3021               	state.4631:
 3022 0000 00        		.zero	1
 3023               		.section	.progmem.data.__c.4633,"a",@progbits
 3026               	__c.4633:
 3027 0000 2563 00   		.string	"%c"
 3028               		.section	.progmem.data.__c.4635,"a",@progbits
 3031               	__c.4635:
 3032 0000 2025 3032 		.string	" %02X"
 3032      5800 
 3033               		.section	.progmem.data.__c.4641,"a",@progbits
 3036               	__c.4641:
 3037 0000 4C45 4420 		.string	"LED status: %02X\n"
 3037      7374 6174 
 3037      7573 3A20 
 3037      2530 3258 
 3037      0A00 
 3038               		.section	.bss.prev_timer.4647,"aw",@nobits
 3041               	prev_timer.4647:
 3042 0000 0000      		.zero	2
 3043               		.section	.progmem.data.__c.4655,"a",@progbits
 3046               	__c.4655:
 3047 0000 2530 3275 		.string	"%02u:%02u:%02u\t%umV\n"
 3047      3A25 3032 
 3047      753A 2530 
 3047      3275 0925 
 3047      756D 560A 
 3048               		.section	.progmem.data.__c.4788,"a",@progbits
 3051               	__c.4788:
 3052 0000 0A0A 2D2D 		.string	"\n\n----- Bluetooth RN-42 Help -----\n"
 3052      2D2D 2D20 
 3052      426C 7565 
 3052      746F 6F74 
 3052      6820 524E 
 3053               		.section	.progmem.data.__c.4790,"a",@progbits
 3056               	__c.4790:
 3057 0000 693A 2020 		.string	"i:       RN-42 info\n"
 3057      2020 2020 
 3057      2052 4E2D 
 3057      3432 2069 
 3057      6E66 6F0A 
 3058               		.section	.progmem.data.__c.4792,"a",@progbits
 3061               	__c.4792:
 3062 0000 623A 2020 		.string	"b:       battery voltage\n"
 3062      2020 2020 
 3062      2062 6174 
 3062      7465 7279 
 3062      2076 6F6C 
 3063               		.section	.progmem.data.__c.4794,"a",@progbits
 3066               	__c.4794:
 3067 0000 4465 6C3A 		.string	"Del:     enter/exit RN-42 config mode\n"
 3067      2020 2020 
 3067      2065 6E74 
 3067      6572 2F65 
 3067      7869 7420 
 3068               		.section	.progmem.data.__c.4796,"a",@progbits
 3071               	__c.4796:
 3072 0000 536C 636B 		.string	"Slck:    RN-42 initialize\n"
 3072      3A20 2020 
 3072      2052 4E2D 
 3072      3432 2069 
 3072      6E69 7469 
 3073               		.section	.progmem.data.__c.4798,"a",@progbits
 3076               	__c.4798:
 3077 0000 312D 343A 		.string	"1-4:     restore link\n"
 3077      2020 2020 
 3077      2072 6573 
 3077      746F 7265 
 3077      206C 696E 
 3078               		.section	.progmem.data.__c.4800,"a",@progbits
 3081               	__c.4800:
 3082 0000 4631 2D46 		.string	"F1-F4:   store link\n"
 3082      343A 2020 
 3082      2073 746F 
 3082      7265 206C 
 3082      696E 6B0A 
 3083               		.section	.progmem.data.__c.4802,"a",@progbits
 3086               	__c.4802:
 3087 0000 703A 2020 		.string	"p:       pairing\n"
 3087      2020 2020 
 3087      2070 6169 
 3087      7269 6E67 
 3087      0A00 
 3088               		.section	.bss.config_mode,"aw",@nobits
 3091               	config_mode:
 3092 0000 00        		.zero	1
 3093               		.section	.progmem.data.__c.4804,"a",@progbits
 3096               	__c.4804:
 3097 0000 753A 2020 		.string	"u:       toggle Force USB mode\n"
 3097      2020 2020 
 3097      2074 6F67 
 3097      676C 6520 
 3097      466F 7263 
 3098               		.section	.progmem.data.__c.4816,"a",@progbits
 3101               	__c.4816:
 3102 0000 0A2D 2D2D 		.string	"\n----- RN-42 info -----\n"
 3102      2D2D 2052 
 3102      4E2D 3432 
 3102      2069 6E66 
 3102      6F20 2D2D 
 3103               		.section	.progmem.data.__c.4818,"a",@progbits
 3106               	__c.4818:
 3107 0000 7072 6F74 		.string	"protocol: %s\n"
 3107      6F63 6F6C 
 3107      3A20 2573 
 3107      0A00 
 3108               		.section	.bss.force_usb,"aw",@nobits
 3111               	force_usb:
 3112 0000 00        		.zero	1
 3113               		.section	.progmem.data.__c.4820,"a",@progbits
 3116               	__c.4820:
 3117 0000 666F 7263 		.string	"force_usb: %X\n"
 3117      655F 7573 
 3117      623A 2025 
 3117      580A 00
 3118               		.section	.progmem.data.__c.4822,"a",@progbits
 3121               	__c.4822:
 3122 0000 726E 3432 		.string	"rn42: %s\n"
 3122      3A20 2573 
 3122      0A00 
 3123               		.section	.progmem.data.__c.4824,"a",@progbits
 3126               	__c.4824:
 3127 0000 726E 3432 		.string	"rn42_autoconnecting(): %X\n"
 3127      5F61 7574 
 3127      6F63 6F6E 
 3127      6E65 6374 
 3127      696E 6728 
 3128               		.section	.progmem.data.__c.4826,"a",@progbits
 3131               	__c.4826:
 3132 0000 636F 6E66 		.string	"config_mode: %X\n"
 3132      6967 5F6D 
 3132      6F64 653A 
 3132      2025 580A 
 3132      00
 3133               		.section	.progmem.data.__c.4828,"a",@progbits
 3136               	__c.4828:
 3137 0000 5553 4220 		.string	"USB State: %s\n"
 3137      5374 6174 
 3137      653A 2025 
 3137      730A 00
 3138               		.section	.progmem.data.__c.4830,"a",@progbits
 3141               	__c.4830:
 3142 0000 6261 7474 		.string	"battery: "
 3142      6572 793A 
 3142      2000 
 3143               		.section	.progmem.data.__c.4833,"a",@progbits
 3146               	__c.4833:
 3147 0000 4655 4C4C 		.string	"FULL"
 3147      00
 3148               		.section	.progmem.data.__c.4837,"a",@progbits
 3151               	__c.4837:
 3152 0000 4348 4152 		.string	"CHARG"
 3152      4700 
 3153               		.section	.progmem.data.__c.4840,"a",@progbits
 3156               	__c.4840:
 3157 0000 4449 5343 		.string	"DISCHG"
 3157      4847 00
 3158               		.section	.progmem.data.__c.4843,"a",@progbits
 3161               	__c.4843:
 3162 0000 4C4F 5700 		.string	"LOW"
 3163               		.section	.progmem.data.__c.4846,"a",@progbits
 3166               	__c.4846:
 3167 0000 3F00      		.string	"?"
 3168               		.section	.progmem.data.__c.4848,"a",@progbits
 3171               	__c.4848:
 3172 0000 0A00      		.string	"\n"
 3173               		.section	.progmem.data.__c.4850,"a",@progbits
 3176               	__c.4850:
 3177 0000 5265 6D6F 		.string	"RemoteWakeupEnabled: %X\n"
 3177      7465 5761 
 3177      6B65 7570 
 3177      456E 6162 
 3177      6C65 643A 
 3178               		.section	.progmem.data.__c.4852,"a",@progbits
 3181               	__c.4852:
 3182 0000 5642 5553 		.string	"VBUS: %X\n"
 3182      3A20 2558 
 3182      0A00 
 3183               		.section	.progmem.data.__c.4858,"a",@progbits
 3186               	__c.4858:
 3187 0000 7570 7469 		.string	"uptime: %02u %02u:%02u:%02u\n"
 3187      6D65 3A20 
 3187      2530 3275 
 3187      2025 3032 
 3187      753A 2530 
 3188               		.section	.progmem.data.__c.4860,"a",@progbits
 3191               	__c.4860:
 3192 0000 4C49 4E4B 		.string	"LINK0: %s\r\n"
 3192      303A 2025 
 3192      730D 0A00 
 3193               		.section	.progmem.data.__c.4862,"a",@progbits
 3196               	__c.4862:
 3197 0000 4C49 4E4B 		.string	"LINK1: %s\r\n"
 3197      313A 2025 
 3197      730D 0A00 
 3198               		.section	.progmem.data.__c.4864,"a",@progbits
 3201               	__c.4864:
 3202 0000 4C49 4E4B 		.string	"LINK2: %s\r\n"
 3202      323A 2025 
 3202      730D 0A00 
 3203               		.section	.progmem.data.__c.4866,"a",@progbits
 3206               	__c.4866:
 3207 0000 4C49 4E4B 		.string	"LINK3: %s\r\n"
 3207      333A 2025 
 3207      730D 0A00 
 3208               		.section	.progmem.data.__c.4869,"a",@progbits
 3211               	__c.4869:
 3212 0000 4241 543A 		.string	"BAT: %umV\t"
 3212      2025 756D 
 3212      5609 00
 3213               		.section	.progmem.data.__c.4871,"a",@progbits
 3216               	__c.4871:
 3217 0000 2530 3275 		.string	"%02u:"
 3217      3A00 
 3218               		.section	.progmem.data.__c.4873,"a",@progbits
 3221               	__c.4873:
 3222 0000 2530 3275 		.string	"%02u:"
 3222      3A00 
 3223               		.section	.progmem.data.__c.4875,"a",@progbits
 3226               	__c.4875:
 3227 0000 2530 3275 		.string	"%02u\n"
 3227      0A00 
 3228               		.section	.progmem.data.__c.4878,"a",@progbits
 3231               	__c.4878:
 3232 0000 4175 746F 		.string	"Auto mode\n"
 3232      206D 6F64 
 3232      650A 00
 3233               		.section	.progmem.data.__c.4880,"a",@progbits
 3236               	__c.4880:
 3237 0000 5553 4220 		.string	"USB mode\n"
 3237      6D6F 6465 
 3237      0A00 
 3238               		.section	.progmem.data.__c.4777,"a",@progbits
 3241               	__c.4777:
 3242 0000 5352 2C5A 		.string	"SR,Z\r\n"
 3242      0D0A 00
 3243               		.section	.progmem.data.__c.4779,"a",@progbits
 3246               	__c.4779:
 3247 0000 522C 310D 		.string	"R,1\r\n"
 3247      0A00 
 3248               		.section	.bss.s.4686,"aw",@nobits
 3251               	s.4686:
 3252 0000 0000      		.zero	2
 3253               		.section	.progmem.data.__c.4687,"a",@progbits
 3256               	__c.4687:
 3257 0000 2573 0D0A 		.string	"%s\r\n"
 3257      00
 3258               		.section	.progmem.data.__c.4662,"a",@progbits
 3261               	__c.4662:
 3262 0000 2563 00   		.string	"%c"
 3263               		.section	.progmem.data.__c.4732,"a",@progbits
 3266               	__c.4732:
 3267 0000 4752 0D0A 		.string	"GR\r\n"
 3267      00
 3268               		.section	.progmem.data.__c.4735,"a",@progbits
 3271               	__c.4735:
 3272 0000 2573 2825 		.string	"%s(%d)\r\n"
 3272      6429 0D0A 
 3272      00
 3273               		.section	.progmem.data.__c.4738,"a",@progbits
 3276               	__c.4738:
 3277 0000 2563 2000 		.string	"%c "
 3278               		.section	.progmem.data.__c.4743,"a",@progbits
 3281               	__c.4743:
 3282 0000 0D0A 00   		.string	"\r\n"
 3283               		.section	.progmem.data.__c.4748,"a",@progbits
 3286               	__c.4748:
 3287 0000 5352 2C5A 		.string	"SR,Z\r\n"
 3287      0D0A 00
 3288               		.section	.progmem.data.__c.4750,"a",@progbits
 3291               	__c.4750:
 3292 0000 5352 2C00 		.string	"SR,"
 3293               		.section	.progmem.data.__c.4754,"a",@progbits
 3296               	__c.4754:
 3297 0000 2563 2000 		.string	"%c "
 3298               		.section	.progmem.data.__c.4759,"a",@progbits
 3301               	__c.4759:
 3302 0000 0D0A 00   		.string	"\r\n"
 3303               		.section	.progmem.data.__c.4761,"a",@progbits
 3306               	__c.4761:
 3307 0000 0D0A 00   		.string	"\r\n"
 3308               		.section	.progmem.data.__c.4763,"a",@progbits
 3311               	__c.4763:
 3312 0000 522C 310D 		.string	"R,1\r\n"
 3312      0A00 
 3313               		.section	.bss.s.4768,"aw",@nobits
 3316               	s.4768:
 3317 0000 0000 0000 		.zero	13
 3317      0000 0000 
 3317      0000 0000 
 3317      00
 3318               		.section	.data.prev_driver,"aw",@progbits
 3321               	prev_driver:
 3322 0000 0000      		.word	rn42_driver
 3323               		.section	.progmem.data.__c.4692,"a",@progbits
 3326               	__c.4692:
 3327 0000 456E 7465 		.string	"Entering config mode ...\n"
 3327      7269 6E67 
 3327      2063 6F6E 
 3327      6669 6720 
 3327      6D6F 6465 
 3328               		.section	.progmem.data.__c.4694,"a",@progbits
 3331               	__c.4694:
 3332 0000 2424 2400 		.string	"$$$"
 3333               		.section	.progmem.data.__c.4697,"a",@progbits
 3336               	__c.4697:
 3337 0000 760D 0A00 		.string	"v\r\n"
 3338               		.section	.progmem.data.__c.4699,"a",@progbits
 3341               	__c.4699:
 3342 0000 2B0D 0A00 		.string	"+\r\n"
 3343               		.section	.progmem.data.__c.4704,"a",@progbits
 3346               	__c.4704:
 3347 0000 4578 6974 		.string	"Exiting config mode ...\n"
 3347      696E 6720 
 3347      636F 6E66 
 3347      6967 206D 
 3347      6F64 6520 
 3348               		.section	.progmem.data.__c.4706,"a",@progbits
 3351               	__c.4706:
 3352 0000 2D2D 2D0D 		.string	"---\r\n"
 3352      0A00 
 3353               		.section	.progmem.data.__c.4711,"a",@progbits
 3356               	__c.4711:
 3357 0000 5346 2C31 		.string	"SF,1\r\n"
 3357      0D0A 00
 3358               		.section	.progmem.data.__c.4713,"a",@progbits
 3361               	__c.4713:
 3362 0000 532D 2C54 		.string	"S-,TmkBT\r\n"
 3362      6D6B 4254 
 3362      0D0A 00
 3363               		.section	.progmem.data.__c.4715,"a",@progbits
 3366               	__c.4715:
 3367 0000 5353 2C4B 		.string	"SS,Keyboard/Mouse\r\n"
 3367      6579 626F 
 3367      6172 642F 
 3367      4D6F 7573 
 3367      650D 0A00 
 3368               		.section	.progmem.data.__c.4717,"a",@progbits
 3371               	__c.4717:
 3372 0000 534D 2C34 		.string	"SM,4\r\n"
 3372      0D0A 00
 3373               		.section	.progmem.data.__c.4719,"a",@progbits
 3376               	__c.4719:
 3377 0000 5357 2C38 		.string	"SW,8000\r\n"
 3377      3030 300D 
 3377      0A00 
 3378               		.section	.progmem.data.__c.4721,"a",@progbits
 3381               	__c.4721:
 3382 0000 537E 2C36 		.string	"S~,6\r\n"
 3382      0D0A 00
 3383               		.section	.progmem.data.__c.4723,"a",@progbits
 3386               	__c.4723:
 3387 0000 5348 2C30 		.string	"SH,003C\r\n"
 3387      3033 430D 
 3387      0A00 
 3388               		.section	.progmem.data.__c.4725,"a",@progbits
 3391               	__c.4725:
 3392 0000 5359 2C46 		.string	"SY,FFF4\r\n"
 3392      4646 340D 
 3392      0A00 
 3393               		.section	.progmem.data.__c.4727,"a",@progbits
 3396               	__c.4727:
 3397 0000 522C 310D 		.string	"R,1\r\n"
 3397      0A00 
 3398               		.text
 3399               	.Letext0:
 3400               		.file 3 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/stdint.h"
 3401               		.file 4 "../../../../tmk_core/common/report.h"
 3402               		.file 5 "../../../../tmk_core/common/host_driver.h"
 3403               		.file 6 "../../../../tmk_core/common/keycode.h"
 3404               		.file 7 "../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 3405               		.file 8 "../../../../tmk_core/common/debug.h"
 3406               		.file 9 "../../../../tmk_core/common/command.h"
 3407               		.file 10 "rn42/battery.h"
 3408               		.file 11 "../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/AVR8/../DeviceStandard
 3409               		.file 12 "../../../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 3410               		.file 13 "../../../../tmk_core/protocol/lufa/lufa.h"
 3411               		.file 14 "rn42/rn42.h"
 3412               		.file 15 "../../../../tmk_core/common/avr/xprintf.h"
 3413               		.file 16 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/avr/eeprom.h"
 3414               		.file 17 "../../../../tmk_core/common/host.h"
 3415               		.file 18 "../../../../tmk_core/common/action.h"
 3416               		.file 19 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/string.h"
 3417               		.file 20 "../../../../tmk_core/common/timer.h"
 3418               		.file 21 "../../../../tmk_core/common/action_util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 rn42_task.c
     /tmp/ccxqftgq.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccxqftgq.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccxqftgq.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccxqftgq.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccxqftgq.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccxqftgq.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccxqftgq.s:13     .text.status_led:0000000000000000 status_led
     /tmp/ccxqftgq.s:40     .text.send_str:0000000000000000 send_str
     /tmp/ccxqftgq.s:95     .text.print_rn42:0000000000000000 print_rn42
     /tmp/ccxqftgq.s:3261   .progmem.data.__c.4662:0000000000000000 __c.4662
     /tmp/ccxqftgq.s:159    .text.send_command:0000000000000000 send_command
     /tmp/ccxqftgq.s:3251   .bss.s.4686:0000000000000000 s.4686
     /tmp/ccxqftgq.s:3256   .progmem.data.__c.4687:0000000000000000 __c.4687
     /tmp/ccxqftgq.s:229    .text.get_link:0000000000000000 get_link
     /tmp/ccxqftgq.s:3316   .bss.s.4768:0000000000000000 s.4768
     /tmp/ccxqftgq.s:318    .text.enter_command_mode:0000000000000000 enter_command_mode
     /tmp/ccxqftgq.s:3321   .data.prev_driver:0000000000000000 prev_driver
                            *COM*:000000000000000a rn42_config_driver
     /tmp/ccxqftgq.s:3326   .progmem.data.__c.4692:0000000000000000 __c.4692
     /tmp/ccxqftgq.s:3331   .progmem.data.__c.4694:0000000000000000 __c.4694
     /tmp/ccxqftgq.s:3336   .progmem.data.__c.4697:0000000000000000 __c.4697
     /tmp/ccxqftgq.s:3341   .progmem.data.__c.4699:0000000000000000 __c.4699
     /tmp/ccxqftgq.s:406    .text.exit_command_mode:0000000000000000 exit_command_mode
     /tmp/ccxqftgq.s:3346   .progmem.data.__c.4704:0000000000000000 __c.4704
     /tmp/ccxqftgq.s:3351   .progmem.data.__c.4706:0000000000000000 __c.4706
     /tmp/ccxqftgq.s:443    .text.store_link:0000000000000000 store_link
     /tmp/ccxqftgq.s:3266   .progmem.data.__c.4732:0000000000000000 __c.4732
     /tmp/ccxqftgq.s:3271   .progmem.data.__c.4735:0000000000000000 __c.4735
     /tmp/ccxqftgq.s:3276   .progmem.data.__c.4738:0000000000000000 __c.4738
     /tmp/ccxqftgq.s:3281   .progmem.data.__c.4743:0000000000000000 __c.4743
     /tmp/ccxqftgq.s:655    .text.restore_link:0000000000000000 restore_link
     /tmp/ccxqftgq.s:3286   .progmem.data.__c.4748:0000000000000000 __c.4748
     /tmp/ccxqftgq.s:3291   .progmem.data.__c.4750:0000000000000000 __c.4750
     /tmp/ccxqftgq.s:3296   .progmem.data.__c.4754:0000000000000000 __c.4754
     /tmp/ccxqftgq.s:3301   .progmem.data.__c.4759:0000000000000000 __c.4759
     /tmp/ccxqftgq.s:3306   .progmem.data.__c.4761:0000000000000000 __c.4761
     /tmp/ccxqftgq.s:3311   .progmem.data.__c.4763:0000000000000000 __c.4763
     /tmp/ccxqftgq.s:817    .text.rn42_task_init:0000000000000000 rn42_task_init
     /tmp/ccxqftgq.s:834    .text.rn42_task:0000000000000000 rn42_task
     /tmp/ccxqftgq.s:3031   .progmem.data.__c.4635:0000000000000000 __c.4635
     /tmp/ccxqftgq.s:3026   .progmem.data.__c.4633:0000000000000000 __c.4633
     /tmp/ccxqftgq.s:3036   .progmem.data.__c.4641:0000000000000000 __c.4641
     /tmp/ccxqftgq.s:3021   .bss.state.4631:0000000000000000 state.4631
     /tmp/ccxqftgq.s:3041   .bss.prev_timer.4647:0000000000000000 prev_timer.4647
     /tmp/ccxqftgq.s:3046   .progmem.data.__c.4655:0000000000000000 __c.4655
     /tmp/ccxqftgq.s:1230   .text.command_extra:0000000000000000 command_extra
     /tmp/ccxqftgq.s:3051   .progmem.data.__c.4788:0000000000000000 __c.4788
     /tmp/ccxqftgq.s:3056   .progmem.data.__c.4790:0000000000000000 __c.4790
     /tmp/ccxqftgq.s:3061   .progmem.data.__c.4792:0000000000000000 __c.4792
     /tmp/ccxqftgq.s:3066   .progmem.data.__c.4794:0000000000000000 __c.4794
     /tmp/ccxqftgq.s:3071   .progmem.data.__c.4796:0000000000000000 __c.4796
     /tmp/ccxqftgq.s:3076   .progmem.data.__c.4798:0000000000000000 __c.4798
     /tmp/ccxqftgq.s:3081   .progmem.data.__c.4800:0000000000000000 __c.4800
     /tmp/ccxqftgq.s:3086   .progmem.data.__c.4802:0000000000000000 __c.4802
     /tmp/ccxqftgq.s:3091   .bss.config_mode:0000000000000000 config_mode
     /tmp/ccxqftgq.s:3096   .progmem.data.__c.4804:0000000000000000 __c.4804
     /tmp/ccxqftgq.s:3241   .progmem.data.__c.4777:0000000000000000 __c.4777
     /tmp/ccxqftgq.s:3246   .progmem.data.__c.4779:0000000000000000 __c.4779
     /tmp/ccxqftgq.s:3101   .progmem.data.__c.4816:0000000000000000 __c.4816
                            *COM*:000000000000000a rn42_driver
     /tmp/ccxqftgq.s:3106   .progmem.data.__c.4818:0000000000000000 __c.4818
     /tmp/ccxqftgq.s:3111   .bss.force_usb:0000000000000000 force_usb
     /tmp/ccxqftgq.s:3116   .progmem.data.__c.4820:0000000000000000 __c.4820
     /tmp/ccxqftgq.s:3121   .progmem.data.__c.4822:0000000000000000 __c.4822
     /tmp/ccxqftgq.s:3126   .progmem.data.__c.4824:0000000000000000 __c.4824
     /tmp/ccxqftgq.s:3131   .progmem.data.__c.4826:0000000000000000 __c.4826
     /tmp/ccxqftgq.s:3136   .progmem.data.__c.4828:0000000000000000 __c.4828
     /tmp/ccxqftgq.s:3141   .progmem.data.__c.4830:0000000000000000 __c.4830
     /tmp/ccxqftgq.s:3146   .progmem.data.__c.4833:0000000000000000 __c.4833
     /tmp/ccxqftgq.s:3151   .progmem.data.__c.4837:0000000000000000 __c.4837
     /tmp/ccxqftgq.s:3156   .progmem.data.__c.4840:0000000000000000 __c.4840
     /tmp/ccxqftgq.s:3161   .progmem.data.__c.4843:0000000000000000 __c.4843
     /tmp/ccxqftgq.s:3166   .progmem.data.__c.4846:0000000000000000 __c.4846
     /tmp/ccxqftgq.s:3171   .progmem.data.__c.4848:0000000000000000 __c.4848
     /tmp/ccxqftgq.s:3176   .progmem.data.__c.4850:0000000000000000 __c.4850
     /tmp/ccxqftgq.s:3181   .progmem.data.__c.4852:0000000000000000 __c.4852
     /tmp/ccxqftgq.s:3186   .progmem.data.__c.4858:0000000000000000 __c.4858
     /tmp/ccxqftgq.s:3191   .progmem.data.__c.4860:0000000000000000 __c.4860
     /tmp/ccxqftgq.s:3196   .progmem.data.__c.4862:0000000000000000 __c.4862
     /tmp/ccxqftgq.s:3201   .progmem.data.__c.4864:0000000000000000 __c.4864
     /tmp/ccxqftgq.s:3206   .progmem.data.__c.4866:0000000000000000 __c.4866
     /tmp/ccxqftgq.s:3211   .progmem.data.__c.4869:0000000000000000 __c.4869
     /tmp/ccxqftgq.s:3216   .progmem.data.__c.4871:0000000000000000 __c.4871
     /tmp/ccxqftgq.s:3221   .progmem.data.__c.4873:0000000000000000 __c.4873
     /tmp/ccxqftgq.s:3226   .progmem.data.__c.4875:0000000000000000 __c.4875
     /tmp/ccxqftgq.s:3231   .progmem.data.__c.4878:0000000000000000 __c.4878
     /tmp/ccxqftgq.s:3236   .progmem.data.__c.4880:0000000000000000 __c.4880
     /tmp/ccxqftgq.s:3356   .progmem.data.__c.4711:0000000000000000 __c.4711
     /tmp/ccxqftgq.s:3361   .progmem.data.__c.4713:0000000000000000 __c.4713
     /tmp/ccxqftgq.s:3366   .progmem.data.__c.4715:0000000000000000 __c.4715
     /tmp/ccxqftgq.s:3371   .progmem.data.__c.4717:0000000000000000 __c.4717
     /tmp/ccxqftgq.s:3376   .progmem.data.__c.4719:0000000000000000 __c.4719
     /tmp/ccxqftgq.s:3381   .progmem.data.__c.4721:0000000000000000 __c.4721
     /tmp/ccxqftgq.s:3386   .progmem.data.__c.4723:0000000000000000 __c.4723
     /tmp/ccxqftgq.s:3391   .progmem.data.__c.4725:0000000000000000 __c.4725
     /tmp/ccxqftgq.s:3396   .progmem.data.__c.4727:0000000000000000 __c.4727
     /tmp/ccxqftgq.s:2128   .text.command_console_extra:0000000000000000 command_console_extra

UNDEFINED SYMBOLS
rn42_putc
__xprintf
rn42_getc
rn42_gets
__eerd_byte_usb1286
host_get_driver
clear_keyboard
host_set_driver
rn42_disconnect
xputs
rn42_autoconnect
strcmp
__eewr_byte_usb1286
debug_config
battery_init
rn42_set_leds
timer_elapsed
__udivmodhi4
battery_status
battery_led
timer_read32
__udivmodsi4
battery_voltage
rn42_rts
rn42_linked
rn42_autoconnecting
USB_DeviceState
USB_Device_RemoteWakeupEnabled
lufa_driver
command_state
get_mods
__tablejump2__
__do_copy_data
__do_clear_bss
