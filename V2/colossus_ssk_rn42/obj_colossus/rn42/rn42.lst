   1               		.file	"rn42.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.keyboard_leds,"ax",@progbits
  13               	keyboard_leds:
  14               	.LFB19:
  15               		.file 1 "rn42/rn42.c"
   1:rn42/rn42.c   **** #include <avr/io.h>
   2:rn42/rn42.c   **** #include "host.h"
   3:rn42/rn42.c   **** #include "host_driver.h"
   4:rn42/rn42.c   **** #include "serial.h"
   5:rn42/rn42.c   **** #include "rn42.h"
   6:rn42/rn42.c   **** #include "print.h"
   7:rn42/rn42.c   **** #include "timer.h"
   8:rn42/rn42.c   **** #include "wait.h"
   9:rn42/rn42.c   **** 
  10:rn42/rn42.c   **** 
  11:rn42/rn42.c   **** /* Host driver */
  12:rn42/rn42.c   **** static uint8_t keyboard_leds(void);
  13:rn42/rn42.c   **** static void send_keyboard(report_keyboard_t *report);
  14:rn42/rn42.c   **** static void send_mouse(report_mouse_t *report);
  15:rn42/rn42.c   **** static void send_system(uint16_t data);
  16:rn42/rn42.c   **** static void send_consumer(uint16_t data);
  17:rn42/rn42.c   **** 
  18:rn42/rn42.c   **** host_driver_t rn42_driver = {
  19:rn42/rn42.c   ****     keyboard_leds,
  20:rn42/rn42.c   ****     send_keyboard,
  21:rn42/rn42.c   ****     send_mouse,
  22:rn42/rn42.c   ****     send_system,
  23:rn42/rn42.c   ****     send_consumer
  24:rn42/rn42.c   **** };
  25:rn42/rn42.c   **** 
  26:rn42/rn42.c   **** 
  27:rn42/rn42.c   **** void rn42_init(void)
  28:rn42/rn42.c   **** {
  29:rn42/rn42.c   ****     // PF7: BT connection control GPIO6 (high: connect, low: disconnect)
  30:rn42/rn42.c   ****     rn42_autoconnect();
  31:rn42/rn42.c   **** 
  32:rn42/rn42.c   ****     // PF6: linked(input without pull-up) GPIO2
  33:rn42/rn42.c   ****     DDRD  &= ~(1<<6);
  34:rn42/rn42.c   ****     PORTD |=  (1<<6);
  35:rn42/rn42.c   **** 
  36:rn42/rn42.c   ****     // PF1: RTS(low: allowed to send, high: not allowed)
  37:rn42/rn42.c   ****     DDRD &= ~(1<<0);
  38:rn42/rn42.c   ****     PORTD &= ~(1<<0);
  39:rn42/rn42.c   **** 
  40:rn42/rn42.c   ****     // PD5: CTS(low: allow to send, high:not allow)
  41:rn42/rn42.c   ****     DDRD |= (1<<1);
  42:rn42/rn42.c   ****     PORTD &= ~(1<<1);
  43:rn42/rn42.c   **** 
  44:rn42/rn42.c   ****     serial_init();
  45:rn42/rn42.c   **** }
  46:rn42/rn42.c   **** 
  47:rn42/rn42.c   **** int16_t rn42_getc(void)
  48:rn42/rn42.c   **** {
  49:rn42/rn42.c   ****     return serial_recv2();
  50:rn42/rn42.c   **** }
  51:rn42/rn42.c   **** 
  52:rn42/rn42.c   **** const char *rn42_gets(uint16_t timeout)
  53:rn42/rn42.c   **** {
  54:rn42/rn42.c   ****     static char s[24];
  55:rn42/rn42.c   ****     uint16_t t = timer_read();
  56:rn42/rn42.c   ****     uint8_t i = 0;
  57:rn42/rn42.c   ****     int16_t c;
  58:rn42/rn42.c   ****     while (i < 23 && timer_elapsed(t) < timeout) {
  59:rn42/rn42.c   ****         if ((c = rn42_getc()) != -1) {
  60:rn42/rn42.c   ****             if ((char)c == '\r') continue;
  61:rn42/rn42.c   ****             if ((char)c == '\n') break;
  62:rn42/rn42.c   ****             s[i++] = c;
  63:rn42/rn42.c   ****         }
  64:rn42/rn42.c   ****     }
  65:rn42/rn42.c   ****     s[i] = '\0';
  66:rn42/rn42.c   ****     return s;
  67:rn42/rn42.c   **** }
  68:rn42/rn42.c   **** 
  69:rn42/rn42.c   **** void rn42_putc(uint8_t c)
  70:rn42/rn42.c   **** {
  71:rn42/rn42.c   ****     serial_send(c);
  72:rn42/rn42.c   **** }
  73:rn42/rn42.c   **** 
  74:rn42/rn42.c   **** void rn42_puts(char *s)
  75:rn42/rn42.c   **** {
  76:rn42/rn42.c   ****     while (*s)
  77:rn42/rn42.c   **** 	serial_send(*s++);
  78:rn42/rn42.c   **** }
  79:rn42/rn42.c   **** 
  80:rn42/rn42.c   **** bool rn42_autoconnecting(void)
  81:rn42/rn42.c   **** {
  82:rn42/rn42.c   ****     // GPIO6 for control connection(high: auto connect, low: disconnect)
  83:rn42/rn42.c   ****     // Note that this needs config: SM,4(Auto-Connect DTR Mode)
  84:rn42/rn42.c   ****     return (PORTD & (1<<7) ? true : false);
  85:rn42/rn42.c   **** }
  86:rn42/rn42.c   **** 
  87:rn42/rn42.c   **** void rn42_autoconnect(void)
  88:rn42/rn42.c   **** {
  89:rn42/rn42.c   ****     // hi to auto connect
  90:rn42/rn42.c   ****     DDRD |= (1<<7);
  91:rn42/rn42.c   ****     PORTD |= (1<<7);
  92:rn42/rn42.c   **** }
  93:rn42/rn42.c   **** 
  94:rn42/rn42.c   **** void rn42_disconnect(void)
  95:rn42/rn42.c   **** {
  96:rn42/rn42.c   ****     // low to disconnect
  97:rn42/rn42.c   ****     DDRD |= (1<<7);
  98:rn42/rn42.c   ****     PORTD &= ~(1<<7);
  99:rn42/rn42.c   **** }
 100:rn42/rn42.c   **** 
 101:rn42/rn42.c   **** bool rn42_rts(void)
 102:rn42/rn42.c   **** {
 103:rn42/rn42.c   ****     // low when RN-42 is powered and ready to receive
 104:rn42/rn42.c   ****     return PIND&(1<<0);
 105:rn42/rn42.c   **** }
 106:rn42/rn42.c   **** 
 107:rn42/rn42.c   **** void rn42_cts_hi(void)
 108:rn42/rn42.c   **** {
 109:rn42/rn42.c   ****     // not allow to send
 110:rn42/rn42.c   ****     PORTD |= (1<<1);
 111:rn42/rn42.c   **** }
 112:rn42/rn42.c   **** 
 113:rn42/rn42.c   **** void rn42_cts_lo(void)
 114:rn42/rn42.c   **** {
 115:rn42/rn42.c   ****     // allow to send
 116:rn42/rn42.c   ****     PORTD &= ~(1<<1);
 117:rn42/rn42.c   **** }
 118:rn42/rn42.c   **** 
 119:rn42/rn42.c   **** bool rn42_linked(void)
 120:rn42/rn42.c   **** {
 121:rn42/rn42.c   ****     // RN-42 GPIO2
 122:rn42/rn42.c   ****     //   Hi-Z:  Not powered
 123:rn42/rn42.c   ****     //   High:  Linked
 124:rn42/rn42.c   ****     //   Low:   Connecting
 125:rn42/rn42.c   ****     return PINB&(1<<6);
 126:rn42/rn42.c   **** }
 127:rn42/rn42.c   **** 
 128:rn42/rn42.c   **** 
 129:rn42/rn42.c   **** static uint8_t leds = 0;
 130:rn42/rn42.c   **** static uint8_t keyboard_leds(void) { return leds; }
  16               		.loc 1 130 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               		.loc 1 130 0
  23 0000 8091 0000 		lds r24,leds
  24 0004 0895      		ret
  25               		.cfi_endproc
  26               	.LFE19:
  28               		.section	.text.send_system,"ax",@progbits
  30               	send_system:
  31               	.LFB23:
 131:rn42/rn42.c   **** void rn42_set_leds(uint8_t l) { leds = l; }
 132:rn42/rn42.c   **** 
 133:rn42/rn42.c   **** static void send_keyboard(report_keyboard_t *report)
 134:rn42/rn42.c   **** {
 135:rn42/rn42.c   ****     // wake from deep sleep
 136:rn42/rn42.c   **** /*
 137:rn42/rn42.c   ****     PORTD |= (1<<5);    // high
 138:rn42/rn42.c   ****     wait_ms(5);
 139:rn42/rn42.c   ****     PORTD &= ~(1<<5);   // low
 140:rn42/rn42.c   **** */
 141:rn42/rn42.c   **** 
 142:rn42/rn42.c   ****     serial_send(0xFD);  // Raw report mode
 143:rn42/rn42.c   ****     serial_send(9);     // length
 144:rn42/rn42.c   ****     serial_send(1);     // descriptor type
 145:rn42/rn42.c   ****     serial_send(report->mods);
 146:rn42/rn42.c   ****     serial_send(0x00);
 147:rn42/rn42.c   ****     serial_send(report->keys[0]);
 148:rn42/rn42.c   ****     serial_send(report->keys[1]);
 149:rn42/rn42.c   ****     serial_send(report->keys[2]);
 150:rn42/rn42.c   ****     serial_send(report->keys[3]);
 151:rn42/rn42.c   ****     serial_send(report->keys[4]);
 152:rn42/rn42.c   ****     serial_send(report->keys[5]);
 153:rn42/rn42.c   **** }
 154:rn42/rn42.c   **** 
 155:rn42/rn42.c   **** static void send_mouse(report_mouse_t *report)
 156:rn42/rn42.c   **** {
 157:rn42/rn42.c   ****     // wake from deep sleep
 158:rn42/rn42.c   **** /*
 159:rn42/rn42.c   ****     PORTD |= (1<<5);    // high
 160:rn42/rn42.c   ****     wait_ms(5);
 161:rn42/rn42.c   ****     PORTD &= ~(1<<5);   // low
 162:rn42/rn42.c   **** */
 163:rn42/rn42.c   **** 
 164:rn42/rn42.c   ****     serial_send(0xFD);  // Raw report mode
 165:rn42/rn42.c   ****     serial_send(5);     // length
 166:rn42/rn42.c   ****     serial_send(2);     // descriptor type
 167:rn42/rn42.c   ****     serial_send(report->buttons);
 168:rn42/rn42.c   ****     serial_send(report->x);
 169:rn42/rn42.c   ****     serial_send(report->y);
 170:rn42/rn42.c   ****     serial_send(report->v);
 171:rn42/rn42.c   **** }
 172:rn42/rn42.c   **** 
 173:rn42/rn42.c   **** static void send_system(uint16_t data)
 174:rn42/rn42.c   **** {
  32               		.loc 1 174 0
  33               		.cfi_startproc
  34               	.LVL0:
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 0 */
  38               	.L__stack_usage = 0
  39 0000 0895      		ret
  40               		.cfi_endproc
  41               	.LFE23:
  43               		.section	.text.config_keyboard_leds,"ax",@progbits
  45               	config_keyboard_leds:
  46               	.LFB26:
 175:rn42/rn42.c   ****     // Table 5-6 of RN-BT-DATA-UB
 176:rn42/rn42.c   ****     // 81,82,83 scan codes can be used?
 177:rn42/rn42.c   **** }
 178:rn42/rn42.c   **** 
 179:rn42/rn42.c   **** 
 180:rn42/rn42.c   **** static uint16_t usage2bits(uint16_t usage)
 181:rn42/rn42.c   **** {
 182:rn42/rn42.c   ****     switch (usage) {
 183:rn42/rn42.c   ****         //case AC_HOME:                 return 0x01;
 184:rn42/rn42.c   ****         //case AL_EMAIL:                return 0x02;
 185:rn42/rn42.c   ****         //case AC_SEARCH:               return 0x04;
 186:rn42/rn42.c   ****         //case AL_KBD_LAYOUT:           return 0x08;  // Apple virtual keybaord toggle
 187:rn42/rn42.c   ****         case AUDIO_VOL_UP:            return 0x10;
 188:rn42/rn42.c   ****         case AUDIO_VOL_DOWN:          return 0x20;
 189:rn42/rn42.c   ****         case AUDIO_MUTE:              return 0x40;
 190:rn42/rn42.c   ****         case TRANSPORT_PLAY_PAUSE:    return 0x80;
 191:rn42/rn42.c   ****         case TRANSPORT_NEXT_TRACK:    return 0x100;
 192:rn42/rn42.c   ****         case TRANSPORT_PREV_TRACK:    return 0x200;
 193:rn42/rn42.c   ****         case TRANSPORT_STOP:          return 0x400;
 194:rn42/rn42.c   ****         case TRANSPORT_STOP_EJECT:    return 0x800;
 195:rn42/rn42.c   ****         case TRANSPORT_FAST_FORWARD:  return 0x1000;
 196:rn42/rn42.c   ****         case TRANSPORT_REWIND:        return 0x2000;
 197:rn42/rn42.c   ****         //case return 0x4000;   // Stop/eject
 198:rn42/rn42.c   ****         //case return 0x8000;   // Internet browser
 199:rn42/rn42.c   ****     };
 200:rn42/rn42.c   ****     return 0;
 201:rn42/rn42.c   **** }
 202:rn42/rn42.c   **** 
 203:rn42/rn42.c   **** static void send_consumer(uint16_t data)
 204:rn42/rn42.c   **** {
 205:rn42/rn42.c   ****     uint16_t bits = usage2bits(data);
 206:rn42/rn42.c   ****     serial_send(0xFD);  // Raw report mode
 207:rn42/rn42.c   ****     serial_send(3);     // length
 208:rn42/rn42.c   ****     serial_send(3);     // descriptor type
 209:rn42/rn42.c   ****     serial_send(bits&0xFF);
 210:rn42/rn42.c   ****     serial_send((bits>>8)&0xFF);
 211:rn42/rn42.c   **** }
 212:rn42/rn42.c   **** 
 213:rn42/rn42.c   **** 
 214:rn42/rn42.c   **** /* Null driver for config_mode */
 215:rn42/rn42.c   **** static uint8_t config_keyboard_leds(void);
 216:rn42/rn42.c   **** static void config_send_keyboard(report_keyboard_t *report);
 217:rn42/rn42.c   **** static void config_send_mouse(report_mouse_t *report);
 218:rn42/rn42.c   **** static void config_send_system(uint16_t data);
 219:rn42/rn42.c   **** static void config_send_consumer(uint16_t data);
 220:rn42/rn42.c   **** 
 221:rn42/rn42.c   **** host_driver_t rn42_config_driver = {
 222:rn42/rn42.c   ****     config_keyboard_leds,
 223:rn42/rn42.c   ****     config_send_keyboard,
 224:rn42/rn42.c   ****     config_send_mouse,
 225:rn42/rn42.c   ****     config_send_system,
 226:rn42/rn42.c   ****     config_send_consumer
 227:rn42/rn42.c   **** };
 228:rn42/rn42.c   **** 
 229:rn42/rn42.c   **** static uint8_t config_keyboard_leds(void) { return leds; }
  47               		.loc 1 229 0
  48               		.cfi_startproc
  49               	/* prologue: function */
  50               	/* frame size = 0 */
  51               	/* stack size = 0 */
  52               	.L__stack_usage = 0
  53               		.loc 1 229 0
  54 0000 8091 0000 		lds r24,leds
  55 0004 0895      		ret
  56               		.cfi_endproc
  57               	.LFE26:
  59               		.section	.text.config_send_keyboard,"ax",@progbits
  61               	config_send_keyboard:
  62               	.LFB27:
 230:rn42/rn42.c   **** static void config_send_keyboard(report_keyboard_t *report) {}
  63               		.loc 1 230 0
  64               		.cfi_startproc
  65               	.LVL1:
  66               	/* prologue: function */
  67               	/* frame size = 0 */
  68               	/* stack size = 0 */
  69               	.L__stack_usage = 0
  70 0000 0895      		ret
  71               		.cfi_endproc
  72               	.LFE27:
  74               		.section	.text.config_send_mouse,"ax",@progbits
  76               	config_send_mouse:
  77               	.LFB28:
 231:rn42/rn42.c   **** static void config_send_mouse(report_mouse_t *report) {}
  78               		.loc 1 231 0
  79               		.cfi_startproc
  80               	.LVL2:
  81               	/* prologue: function */
  82               	/* frame size = 0 */
  83               	/* stack size = 0 */
  84               	.L__stack_usage = 0
  85 0000 0895      		ret
  86               		.cfi_endproc
  87               	.LFE28:
  89               		.section	.text.config_send_system,"ax",@progbits
  91               	config_send_system:
  92               	.LFB29:
 232:rn42/rn42.c   **** static void config_send_system(uint16_t data) {}
  93               		.loc 1 232 0
  94               		.cfi_startproc
  95               	.LVL3:
  96               	/* prologue: function */
  97               	/* frame size = 0 */
  98               	/* stack size = 0 */
  99               	.L__stack_usage = 0
 100 0000 0895      		ret
 101               		.cfi_endproc
 102               	.LFE29:
 104               		.section	.text.config_send_consumer,"ax",@progbits
 106               	config_send_consumer:
 107               	.LFB30:
 233:rn42/rn42.c   **** static void config_send_consumer(uint16_t data) {}
 108               		.loc 1 233 0
 109               		.cfi_startproc
 110               	.LVL4:
 111               	/* prologue: function */
 112               	/* frame size = 0 */
 113               	/* stack size = 0 */
 114               	.L__stack_usage = 0
 115 0000 0895      		ret
 116               		.cfi_endproc
 117               	.LFE30:
 119               		.section	.text.send_consumer,"ax",@progbits
 121               	send_consumer:
 122               	.LFB25:
 204:rn42/rn42.c   **** {
 123               		.loc 1 204 0
 124               		.cfi_startproc
 125               	.LVL5:
 204:rn42/rn42.c   **** {
 126               		.loc 1 204 0
 127 0000 EF92      		push r14
 128               	.LCFI0:
 129               		.cfi_def_cfa_offset 3
 130               		.cfi_offset 14, -2
 131 0002 FF92      		push r15
 132               	.LCFI1:
 133               		.cfi_def_cfa_offset 4
 134               		.cfi_offset 15, -3
 135               	/* prologue: function */
 136               	/* frame size = 0 */
 137               	/* stack size = 2 */
 138               	.L__stack_usage = 2
 139               	.LVL6:
 140 0004 835B      		subi r24,-77
 141 0006 9109      		sbc r25,__zero_reg__
 142               	.LVL7:
 143 0008 8833      		cpi r24,56
 144 000a 9105      		cpc r25,__zero_reg__
 145 000c 00F4      		brsh .L10
 146 000e FC01      		movw r30,r24
 147 0010 EE0F      		lsl r30
 148 0012 FF1F      		rol r31
 149               	.LVL8:
 150 0014 E050      		subi r30,lo8(-(CSWTCH.4))
 151 0016 F040      		sbci r31,hi8(-(CSWTCH.4))
 152 0018 E080      		ld r14,Z
 153 001a F180      		ldd r15,Z+1
 154 001c 00C0      		rjmp .L9
 155               	.L10:
 156 001e E12C      		mov r14,__zero_reg__
 157 0020 F12C      		mov r15,__zero_reg__
 158               	.L9:
 206:rn42/rn42.c   ****     serial_send(0xFD);  // Raw report mode
 159               		.loc 1 206 0
 160 0022 8DEF      		ldi r24,lo8(-3)
 161 0024 0E94 0000 		call serial_send
 162               	.LVL9:
 207:rn42/rn42.c   ****     serial_send(3);     // length
 163               		.loc 1 207 0
 164 0028 83E0      		ldi r24,lo8(3)
 165 002a 0E94 0000 		call serial_send
 166               	.LVL10:
 208:rn42/rn42.c   ****     serial_send(3);     // descriptor type
 167               		.loc 1 208 0
 168 002e 83E0      		ldi r24,lo8(3)
 169 0030 0E94 0000 		call serial_send
 170               	.LVL11:
 209:rn42/rn42.c   ****     serial_send(bits&0xFF);
 171               		.loc 1 209 0
 172 0034 8E2D      		mov r24,r14
 173 0036 0E94 0000 		call serial_send
 174               	.LVL12:
 210:rn42/rn42.c   ****     serial_send((bits>>8)&0xFF);
 175               		.loc 1 210 0
 176 003a 8F2D      		mov r24,r15
 177               	/* epilogue start */
 211:rn42/rn42.c   **** }
 178               		.loc 1 211 0
 179 003c FF90      		pop r15
 180 003e EF90      		pop r14
 210:rn42/rn42.c   ****     serial_send((bits>>8)&0xFF);
 181               		.loc 1 210 0
 182 0040 0C94 0000 		jmp serial_send
 183               	.LVL13:
 184               		.cfi_endproc
 185               	.LFE25:
 187               		.section	.text.send_mouse,"ax",@progbits
 189               	send_mouse:
 190               	.LFB22:
 156:rn42/rn42.c   **** {
 191               		.loc 1 156 0
 192               		.cfi_startproc
 193               	.LVL14:
 194 0000 EF92      		push r14
 195               	.LCFI2:
 196               		.cfi_def_cfa_offset 3
 197               		.cfi_offset 14, -2
 198 0002 FF92      		push r15
 199               	.LCFI3:
 200               		.cfi_def_cfa_offset 4
 201               		.cfi_offset 15, -3
 202               	/* prologue: function */
 203               	/* frame size = 0 */
 204               	/* stack size = 2 */
 205               	.L__stack_usage = 2
 206 0004 7C01      		movw r14,r24
 164:rn42/rn42.c   ****     serial_send(0xFD);  // Raw report mode
 207               		.loc 1 164 0
 208 0006 8DEF      		ldi r24,lo8(-3)
 209               	.LVL15:
 210 0008 0E94 0000 		call serial_send
 211               	.LVL16:
 165:rn42/rn42.c   ****     serial_send(5);     // length
 212               		.loc 1 165 0
 213 000c 85E0      		ldi r24,lo8(5)
 214 000e 0E94 0000 		call serial_send
 215               	.LVL17:
 166:rn42/rn42.c   ****     serial_send(2);     // descriptor type
 216               		.loc 1 166 0
 217 0012 82E0      		ldi r24,lo8(2)
 218 0014 0E94 0000 		call serial_send
 219               	.LVL18:
 167:rn42/rn42.c   ****     serial_send(report->buttons);
 220               		.loc 1 167 0
 221 0018 F701      		movw r30,r14
 222 001a 8081      		ld r24,Z
 223 001c 0E94 0000 		call serial_send
 224               	.LVL19:
 168:rn42/rn42.c   ****     serial_send(report->x);
 225               		.loc 1 168 0
 226 0020 F701      		movw r30,r14
 227 0022 8181      		ldd r24,Z+1
 228 0024 0E94 0000 		call serial_send
 229               	.LVL20:
 169:rn42/rn42.c   ****     serial_send(report->y);
 230               		.loc 1 169 0
 231 0028 F701      		movw r30,r14
 232 002a 8281      		ldd r24,Z+2
 233 002c 0E94 0000 		call serial_send
 234               	.LVL21:
 170:rn42/rn42.c   ****     serial_send(report->v);
 235               		.loc 1 170 0
 236 0030 F701      		movw r30,r14
 237 0032 8381      		ldd r24,Z+3
 238               	/* epilogue start */
 171:rn42/rn42.c   **** }
 239               		.loc 1 171 0
 240 0034 FF90      		pop r15
 241 0036 EF90      		pop r14
 242               	.LVL22:
 170:rn42/rn42.c   ****     serial_send(report->v);
 243               		.loc 1 170 0
 244 0038 0C94 0000 		jmp serial_send
 245               	.LVL23:
 246               		.cfi_endproc
 247               	.LFE22:
 249               		.section	.text.send_keyboard,"ax",@progbits
 251               	send_keyboard:
 252               	.LFB21:
 134:rn42/rn42.c   **** {
 253               		.loc 1 134 0
 254               		.cfi_startproc
 255               	.LVL24:
 256 0000 EF92      		push r14
 257               	.LCFI4:
 258               		.cfi_def_cfa_offset 3
 259               		.cfi_offset 14, -2
 260 0002 FF92      		push r15
 261               	.LCFI5:
 262               		.cfi_def_cfa_offset 4
 263               		.cfi_offset 15, -3
 264               	/* prologue: function */
 265               	/* frame size = 0 */
 266               	/* stack size = 2 */
 267               	.L__stack_usage = 2
 268 0004 7C01      		movw r14,r24
 142:rn42/rn42.c   ****     serial_send(0xFD);  // Raw report mode
 269               		.loc 1 142 0
 270 0006 8DEF      		ldi r24,lo8(-3)
 271               	.LVL25:
 272 0008 0E94 0000 		call serial_send
 273               	.LVL26:
 143:rn42/rn42.c   ****     serial_send(9);     // length
 274               		.loc 1 143 0
 275 000c 89E0      		ldi r24,lo8(9)
 276 000e 0E94 0000 		call serial_send
 277               	.LVL27:
 144:rn42/rn42.c   ****     serial_send(1);     // descriptor type
 278               		.loc 1 144 0
 279 0012 81E0      		ldi r24,lo8(1)
 280 0014 0E94 0000 		call serial_send
 281               	.LVL28:
 145:rn42/rn42.c   ****     serial_send(report->mods);
 282               		.loc 1 145 0
 283 0018 F701      		movw r30,r14
 284 001a 8081      		ld r24,Z
 285 001c 0E94 0000 		call serial_send
 286               	.LVL29:
 146:rn42/rn42.c   ****     serial_send(0x00);
 287               		.loc 1 146 0
 288 0020 80E0      		ldi r24,0
 289 0022 0E94 0000 		call serial_send
 290               	.LVL30:
 147:rn42/rn42.c   ****     serial_send(report->keys[0]);
 291               		.loc 1 147 0
 292 0026 F701      		movw r30,r14
 293 0028 8281      		ldd r24,Z+2
 294 002a 0E94 0000 		call serial_send
 295               	.LVL31:
 148:rn42/rn42.c   ****     serial_send(report->keys[1]);
 296               		.loc 1 148 0
 297 002e F701      		movw r30,r14
 298 0030 8381      		ldd r24,Z+3
 299 0032 0E94 0000 		call serial_send
 300               	.LVL32:
 149:rn42/rn42.c   ****     serial_send(report->keys[2]);
 301               		.loc 1 149 0
 302 0036 F701      		movw r30,r14
 303 0038 8481      		ldd r24,Z+4
 304 003a 0E94 0000 		call serial_send
 305               	.LVL33:
 150:rn42/rn42.c   ****     serial_send(report->keys[3]);
 306               		.loc 1 150 0
 307 003e F701      		movw r30,r14
 308 0040 8581      		ldd r24,Z+5
 309 0042 0E94 0000 		call serial_send
 310               	.LVL34:
 151:rn42/rn42.c   ****     serial_send(report->keys[4]);
 311               		.loc 1 151 0
 312 0046 F701      		movw r30,r14
 313 0048 8681      		ldd r24,Z+6
 314 004a 0E94 0000 		call serial_send
 315               	.LVL35:
 152:rn42/rn42.c   ****     serial_send(report->keys[5]);
 316               		.loc 1 152 0
 317 004e F701      		movw r30,r14
 318 0050 8781      		ldd r24,Z+7
 319               	/* epilogue start */
 153:rn42/rn42.c   **** }
 320               		.loc 1 153 0
 321 0052 FF90      		pop r15
 322 0054 EF90      		pop r14
 323               	.LVL36:
 152:rn42/rn42.c   ****     serial_send(report->keys[5]);
 324               		.loc 1 152 0
 325 0056 0C94 0000 		jmp serial_send
 326               	.LVL37:
 327               		.cfi_endproc
 328               	.LFE21:
 330               		.section	.text.rn42_getc,"ax",@progbits
 331               	.global	rn42_getc
 333               	rn42_getc:
 334               	.LFB8:
  48:rn42/rn42.c   **** {
 335               		.loc 1 48 0
 336               		.cfi_startproc
 337               	/* prologue: function */
 338               	/* frame size = 0 */
 339               	/* stack size = 0 */
 340               	.L__stack_usage = 0
  49:rn42/rn42.c   ****     return serial_recv2();
 341               		.loc 1 49 0
 342 0000 0C94 0000 		jmp serial_recv2
 343               	.LVL38:
 344               		.cfi_endproc
 345               	.LFE8:
 347               		.section	.text.rn42_gets,"ax",@progbits
 348               	.global	rn42_gets
 350               	rn42_gets:
 351               	.LFB9:
  53:rn42/rn42.c   **** {
 352               		.loc 1 53 0
 353               		.cfi_startproc
 354               	.LVL39:
 355 0000 CF92      		push r12
 356               	.LCFI6:
 357               		.cfi_def_cfa_offset 3
 358               		.cfi_offset 12, -2
 359 0002 DF92      		push r13
 360               	.LCFI7:
 361               		.cfi_def_cfa_offset 4
 362               		.cfi_offset 13, -3
 363 0004 EF92      		push r14
 364               	.LCFI8:
 365               		.cfi_def_cfa_offset 5
 366               		.cfi_offset 14, -4
 367 0006 FF92      		push r15
 368               	.LCFI9:
 369               		.cfi_def_cfa_offset 6
 370               		.cfi_offset 15, -5
 371 0008 CF93      		push r28
 372               	.LCFI10:
 373               		.cfi_def_cfa_offset 7
 374               		.cfi_offset 28, -6
 375               	/* prologue: function */
 376               	/* frame size = 0 */
 377               	/* stack size = 5 */
 378               	.L__stack_usage = 5
 379 000a 7C01      		movw r14,r24
  55:rn42/rn42.c   ****     uint16_t t = timer_read();
 380               		.loc 1 55 0
 381 000c 0E94 0000 		call timer_read
 382               	.LVL40:
 383 0010 6C01      		movw r12,r24
 384               	.LVL41:
  56:rn42/rn42.c   ****     uint8_t i = 0;
 385               		.loc 1 56 0
 386 0012 C0E0      		ldi r28,0
 387 0014 00C0      		rjmp .L15
 388               	.LVL42:
 389               	.L18:
  59:rn42/rn42.c   ****         if ((c = rn42_getc()) != -1) {
 390               		.loc 1 59 0
 391 0016 0E94 0000 		call rn42_getc
 392               	.LVL43:
 393 001a 9C01      		movw r18,r24
 394               	.LVL44:
 395 001c 2F3F      		cpi r18,-1
 396 001e 8FEF      		ldi r24,-1
 397 0020 3807      		cpc r19,r24
 398 0022 01F0      		breq .L16
  60:rn42/rn42.c   ****             if ((char)c == '\r') continue;
 399               		.loc 1 60 0
 400 0024 2D30      		cpi r18,lo8(13)
 401 0026 01F0      		breq .L16
  61:rn42/rn42.c   ****             if ((char)c == '\n') break;
 402               		.loc 1 61 0
 403 0028 2A30      		cpi r18,lo8(10)
 404 002a 01F0      		breq .L17
  62:rn42/rn42.c   ****             s[i++] = c;
 405               		.loc 1 62 0
 406 002c AC2F      		mov r26,r28
 407 002e B0E0      		ldi r27,0
 408 0030 A050      		subi r26,lo8(-(s.2077))
 409 0032 B040      		sbci r27,hi8(-(s.2077))
 410 0034 2C93      		st X,r18
 411 0036 CF5F      		subi r28,lo8(-(1))
 412               	.LVL45:
 413               	.L16:
  58:rn42/rn42.c   ****     while (i < 23 && timer_elapsed(t) < timeout) {
 414               		.loc 1 58 0 discriminator 1
 415 0038 C731      		cpi r28,lo8(23)
 416 003a 00F4      		brsh .L17
 417               	.LVL46:
 418               	.L15:
  58:rn42/rn42.c   ****     while (i < 23 && timer_elapsed(t) < timeout) {
 419               		.loc 1 58 0 is_stmt 0 discriminator 2
 420 003c C601      		movw r24,r12
 421 003e 0E94 0000 		call timer_elapsed
 422               	.LVL47:
 423 0042 8E15      		cp r24,r14
 424 0044 9F05      		cpc r25,r15
 425 0046 00F0      		brlo .L18
 426               	.L17:
  65:rn42/rn42.c   ****     s[i] = '\0';
 427               		.loc 1 65 0 is_stmt 1
 428 0048 EC2F      		mov r30,r28
 429 004a F0E0      		ldi r31,0
 430 004c E050      		subi r30,lo8(-(s.2077))
 431 004e F040      		sbci r31,hi8(-(s.2077))
 432 0050 1082      		st Z,__zero_reg__
  67:rn42/rn42.c   **** }
 433               		.loc 1 67 0
 434 0052 80E0      		ldi r24,lo8(s.2077)
 435 0054 90E0      		ldi r25,hi8(s.2077)
 436               	/* epilogue start */
 437 0056 CF91      		pop r28
 438 0058 FF90      		pop r15
 439 005a EF90      		pop r14
 440               	.LVL48:
 441 005c DF90      		pop r13
 442 005e CF90      		pop r12
 443               	.LVL49:
 444 0060 0895      		ret
 445               		.cfi_endproc
 446               	.LFE9:
 448               		.section	.text.rn42_putc,"ax",@progbits
 449               	.global	rn42_putc
 451               	rn42_putc:
 452               	.LFB10:
  70:rn42/rn42.c   **** {
 453               		.loc 1 70 0
 454               		.cfi_startproc
 455               	.LVL50:
 456               	/* prologue: function */
 457               	/* frame size = 0 */
 458               	/* stack size = 0 */
 459               	.L__stack_usage = 0
  71:rn42/rn42.c   ****     serial_send(c);
 460               		.loc 1 71 0
 461 0000 0C94 0000 		jmp serial_send
 462               	.LVL51:
 463               		.cfi_endproc
 464               	.LFE10:
 466               		.section	.text.rn42_puts,"ax",@progbits
 467               	.global	rn42_puts
 469               	rn42_puts:
 470               	.LFB11:
  75:rn42/rn42.c   **** {
 471               		.loc 1 75 0
 472               		.cfi_startproc
 473               	.LVL52:
 474 0000 EF92      		push r14
 475               	.LCFI11:
 476               		.cfi_def_cfa_offset 3
 477               		.cfi_offset 14, -2
 478 0002 FF92      		push r15
 479               	.LCFI12:
 480               		.cfi_def_cfa_offset 4
 481               		.cfi_offset 15, -3
 482               	/* prologue: function */
 483               	/* frame size = 0 */
 484               	/* stack size = 2 */
 485               	.L__stack_usage = 2
 486 0004 7C01      		movw r14,r24
  76:rn42/rn42.c   ****     while (*s)
 487               		.loc 1 76 0
 488 0006 00C0      		rjmp .L30
 489               	.LVL53:
 490               	.L31:
  77:rn42/rn42.c   **** 	serial_send(*s++);
 491               		.loc 1 77 0
 492 0008 0E94 0000 		call serial_send
 493               	.LVL54:
 494               	.L30:
  76:rn42/rn42.c   ****     while (*s)
 495               		.loc 1 76 0 discriminator 1
 496 000c F701      		movw r30,r14
 497 000e 8191      		ld r24,Z+
 498 0010 7F01      		movw r14,r30
 499 0012 8111      		cpse r24,__zero_reg__
 500 0014 00C0      		rjmp .L31
 501               	/* epilogue start */
  78:rn42/rn42.c   **** }
 502               		.loc 1 78 0
 503 0016 FF90      		pop r15
 504 0018 EF90      		pop r14
 505 001a 0895      		ret
 506               		.cfi_endproc
 507               	.LFE11:
 509               		.section	.text.rn42_autoconnecting,"ax",@progbits
 510               	.global	rn42_autoconnecting
 512               	rn42_autoconnecting:
 513               	.LFB12:
  81:rn42/rn42.c   **** {
 514               		.loc 1 81 0
 515               		.cfi_startproc
 516               	/* prologue: function */
 517               	/* frame size = 0 */
 518               	/* stack size = 0 */
 519               	.L__stack_usage = 0
  84:rn42/rn42.c   ****     return (PORTD & (1<<7) ? true : false);
 520               		.loc 1 84 0
 521 0000 8BB1      		in r24,0xb
  85:rn42/rn42.c   **** }
 522               		.loc 1 85 0
 523 0002 881F      		rol r24
 524 0004 8827      		clr r24
 525 0006 881F      		rol r24
 526 0008 0895      		ret
 527               		.cfi_endproc
 528               	.LFE12:
 530               		.section	.text.rn42_autoconnect,"ax",@progbits
 531               	.global	rn42_autoconnect
 533               	rn42_autoconnect:
 534               	.LFB13:
  88:rn42/rn42.c   **** {
 535               		.loc 1 88 0
 536               		.cfi_startproc
 537               	/* prologue: function */
 538               	/* frame size = 0 */
 539               	/* stack size = 0 */
 540               	.L__stack_usage = 0
  90:rn42/rn42.c   ****     DDRD |= (1<<7);
 541               		.loc 1 90 0
 542 0000 579A      		sbi 0xa,7
  91:rn42/rn42.c   ****     PORTD |= (1<<7);
 543               		.loc 1 91 0
 544 0002 5F9A      		sbi 0xb,7
 545 0004 0895      		ret
 546               		.cfi_endproc
 547               	.LFE13:
 549               		.section	.text.rn42_init,"ax",@progbits
 550               	.global	rn42_init
 552               	rn42_init:
 553               	.LFB7:
  28:rn42/rn42.c   **** {
 554               		.loc 1 28 0
 555               		.cfi_startproc
 556               	/* prologue: function */
 557               	/* frame size = 0 */
 558               	/* stack size = 0 */
 559               	.L__stack_usage = 0
  30:rn42/rn42.c   ****     rn42_autoconnect();
 560               		.loc 1 30 0
 561 0000 0E94 0000 		call rn42_autoconnect
 562               	.LVL55:
  33:rn42/rn42.c   ****     DDRD  &= ~(1<<6);
 563               		.loc 1 33 0
 564 0004 5698      		cbi 0xa,6
  34:rn42/rn42.c   ****     PORTD |=  (1<<6);
 565               		.loc 1 34 0
 566 0006 5E9A      		sbi 0xb,6
  37:rn42/rn42.c   ****     DDRD &= ~(1<<0);
 567               		.loc 1 37 0
 568 0008 5098      		cbi 0xa,0
  38:rn42/rn42.c   ****     PORTD &= ~(1<<0);
 569               		.loc 1 38 0
 570 000a 5898      		cbi 0xb,0
  41:rn42/rn42.c   ****     DDRD |= (1<<1);
 571               		.loc 1 41 0
 572 000c 519A      		sbi 0xa,1
  42:rn42/rn42.c   ****     PORTD &= ~(1<<1);
 573               		.loc 1 42 0
 574 000e 5998      		cbi 0xb,1
  44:rn42/rn42.c   ****     serial_init();
 575               		.loc 1 44 0
 576 0010 0C94 0000 		jmp serial_init
 577               	.LVL56:
 578               		.cfi_endproc
 579               	.LFE7:
 581               		.section	.text.rn42_disconnect,"ax",@progbits
 582               	.global	rn42_disconnect
 584               	rn42_disconnect:
 585               	.LFB14:
  95:rn42/rn42.c   **** {
 586               		.loc 1 95 0
 587               		.cfi_startproc
 588               	/* prologue: function */
 589               	/* frame size = 0 */
 590               	/* stack size = 0 */
 591               	.L__stack_usage = 0
  97:rn42/rn42.c   ****     DDRD |= (1<<7);
 592               		.loc 1 97 0
 593 0000 579A      		sbi 0xa,7
  98:rn42/rn42.c   ****     PORTD &= ~(1<<7);
 594               		.loc 1 98 0
 595 0002 5F98      		cbi 0xb,7
 596 0004 0895      		ret
 597               		.cfi_endproc
 598               	.LFE14:
 600               		.section	.text.rn42_rts,"ax",@progbits
 601               	.global	rn42_rts
 603               	rn42_rts:
 604               	.LFB15:
 102:rn42/rn42.c   **** {
 605               		.loc 1 102 0
 606               		.cfi_startproc
 607               	/* prologue: function */
 608               	/* frame size = 0 */
 609               	/* stack size = 0 */
 610               	.L__stack_usage = 0
 104:rn42/rn42.c   ****     return PIND&(1<<0);
 611               		.loc 1 104 0
 612 0000 89B1      		in r24,0x9
 105:rn42/rn42.c   **** }
 613               		.loc 1 105 0
 614 0002 8170      		andi r24,lo8(1)
 615 0004 0895      		ret
 616               		.cfi_endproc
 617               	.LFE15:
 619               		.section	.text.rn42_cts_hi,"ax",@progbits
 620               	.global	rn42_cts_hi
 622               	rn42_cts_hi:
 623               	.LFB16:
 108:rn42/rn42.c   **** {
 624               		.loc 1 108 0
 625               		.cfi_startproc
 626               	/* prologue: function */
 627               	/* frame size = 0 */
 628               	/* stack size = 0 */
 629               	.L__stack_usage = 0
 110:rn42/rn42.c   ****     PORTD |= (1<<1);
 630               		.loc 1 110 0
 631 0000 599A      		sbi 0xb,1
 632 0002 0895      		ret
 633               		.cfi_endproc
 634               	.LFE16:
 636               		.section	.text.rn42_cts_lo,"ax",@progbits
 637               	.global	rn42_cts_lo
 639               	rn42_cts_lo:
 640               	.LFB17:
 114:rn42/rn42.c   **** {
 641               		.loc 1 114 0
 642               		.cfi_startproc
 643               	/* prologue: function */
 644               	/* frame size = 0 */
 645               	/* stack size = 0 */
 646               	.L__stack_usage = 0
 116:rn42/rn42.c   ****     PORTD &= ~(1<<1);
 647               		.loc 1 116 0
 648 0000 5998      		cbi 0xb,1
 649 0002 0895      		ret
 650               		.cfi_endproc
 651               	.LFE17:
 653               		.section	.text.rn42_linked,"ax",@progbits
 654               	.global	rn42_linked
 656               	rn42_linked:
 657               	.LFB18:
 120:rn42/rn42.c   **** {
 658               		.loc 1 120 0
 659               		.cfi_startproc
 660               	/* prologue: function */
 661               	/* frame size = 0 */
 662               	/* stack size = 0 */
 663               	.L__stack_usage = 0
 125:rn42/rn42.c   ****     return PINB&(1<<6);
 664               		.loc 1 125 0
 665 0000 83B1      		in r24,0x3
 126:rn42/rn42.c   **** }
 666               		.loc 1 126 0
 667 0002 86FB      		bst r24,6
 668 0004 8827      		clr r24
 669 0006 80F9      		bld r24,0
 670 0008 0895      		ret
 671               		.cfi_endproc
 672               	.LFE18:
 674               		.section	.text.rn42_set_leds,"ax",@progbits
 675               	.global	rn42_set_leds
 677               	rn42_set_leds:
 678               	.LFB20:
 131:rn42/rn42.c   **** void rn42_set_leds(uint8_t l) { leds = l; }
 679               		.loc 1 131 0
 680               		.cfi_startproc
 681               	.LVL57:
 682               	/* prologue: function */
 683               	/* frame size = 0 */
 684               	/* stack size = 0 */
 685               	.L__stack_usage = 0
 131:rn42/rn42.c   **** void rn42_set_leds(uint8_t l) { leds = l; }
 686               		.loc 1 131 0
 687 0000 8093 0000 		sts leds,r24
 688 0004 0895      		ret
 689               		.cfi_endproc
 690               	.LFE20:
 692               	.global	rn42_config_driver
 693               		.section	.data.rn42_config_driver,"aw",@progbits
 696               	rn42_config_driver:
 697 0000 0000      		.word	gs(config_keyboard_leds)
 698 0002 0000      		.word	gs(config_send_keyboard)
 699 0004 0000      		.word	gs(config_send_mouse)
 700 0006 0000      		.word	gs(config_send_system)
 701 0008 0000      		.word	gs(config_send_consumer)
 702               	.global	rn42_driver
 703               		.section	.data.rn42_driver,"aw",@progbits
 706               	rn42_driver:
 707 0000 0000      		.word	gs(keyboard_leds)
 708 0002 0000      		.word	gs(send_keyboard)
 709 0004 0000      		.word	gs(send_mouse)
 710 0006 0000      		.word	gs(send_system)
 711 0008 0000      		.word	gs(send_consumer)
 712               		.section	.bss.leds,"aw",@nobits
 715               	leds:
 716 0000 00        		.zero	1
 717               		.section	.rodata.CSWTCH.4,"a",@progbits
 720               	CSWTCH.4:
 721 0000 0010      		.word	4096
 722 0002 0020      		.word	8192
 723 0004 0001      		.word	256
 724 0006 0002      		.word	512
 725 0008 0004      		.word	1024
 726 000a 0000      		.word	0
 727 000c 0000      		.word	0
 728 000e 0000      		.word	0
 729 0010 0000      		.word	0
 730 0012 0000      		.word	0
 731 0014 0000      		.word	0
 732 0016 0000      		.word	0
 733 0018 0000      		.word	0
 734 001a 0000      		.word	0
 735 001c 0000      		.word	0
 736 001e 0000      		.word	0
 737 0020 0000      		.word	0
 738 0022 0000      		.word	0
 739 0024 0000      		.word	0
 740 0026 0000      		.word	0
 741 0028 0000      		.word	0
 742 002a 0000      		.word	0
 743 002c 0000      		.word	0
 744 002e 0000      		.word	0
 745 0030 0000      		.word	0
 746 0032 0008      		.word	2048
 747 0034 8000      		.word	128
 748 0036 0000      		.word	0
 749 0038 0000      		.word	0
 750 003a 0000      		.word	0
 751 003c 0000      		.word	0
 752 003e 0000      		.word	0
 753 0040 0000      		.word	0
 754 0042 0000      		.word	0
 755 0044 0000      		.word	0
 756 0046 0000      		.word	0
 757 0048 0000      		.word	0
 758 004a 0000      		.word	0
 759 004c 0000      		.word	0
 760 004e 0000      		.word	0
 761 0050 0000      		.word	0
 762 0052 0000      		.word	0
 763 0054 0000      		.word	0
 764 0056 0000      		.word	0
 765 0058 0000      		.word	0
 766 005a 0000      		.word	0
 767 005c 0000      		.word	0
 768 005e 4000      		.word	64
 769 0060 0000      		.word	0
 770 0062 0000      		.word	0
 771 0064 0000      		.word	0
 772 0066 0000      		.word	0
 773 0068 0000      		.word	0
 774 006a 0000      		.word	0
 775 006c 1000      		.word	16
 776 006e 2000      		.word	32
 777               		.section	.bss.s.2077,"aw",@nobits
 780               	s.2077:
 781 0000 0000 0000 		.zero	24
 781      0000 0000 
 781      0000 0000 
 781      0000 0000 
 781      0000 0000 
 782               		.text
 783               	.Letext0:
 784               		.file 2 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/stdint.h"
 785               		.file 3 "../../../../tmk_core/common/report.h"
 786               		.file 4 "../../../../tmk_core/common/host_driver.h"
 787               		.file 5 "../../../../tmk_core/protocol/serial.h"
 788               		.file 6 "../../../../tmk_core/common/timer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 rn42.c
     /tmp/ccZJ5wTk.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccZJ5wTk.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccZJ5wTk.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccZJ5wTk.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccZJ5wTk.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccZJ5wTk.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccZJ5wTk.s:13     .text.keyboard_leds:0000000000000000 keyboard_leds
     /tmp/ccZJ5wTk.s:715    .bss.leds:0000000000000000 leds
     /tmp/ccZJ5wTk.s:30     .text.send_system:0000000000000000 send_system
     /tmp/ccZJ5wTk.s:45     .text.config_keyboard_leds:0000000000000000 config_keyboard_leds
     /tmp/ccZJ5wTk.s:61     .text.config_send_keyboard:0000000000000000 config_send_keyboard
     /tmp/ccZJ5wTk.s:76     .text.config_send_mouse:0000000000000000 config_send_mouse
     /tmp/ccZJ5wTk.s:91     .text.config_send_system:0000000000000000 config_send_system
     /tmp/ccZJ5wTk.s:106    .text.config_send_consumer:0000000000000000 config_send_consumer
     /tmp/ccZJ5wTk.s:121    .text.send_consumer:0000000000000000 send_consumer
     /tmp/ccZJ5wTk.s:720    .rodata.CSWTCH.4:0000000000000000 CSWTCH.4
     /tmp/ccZJ5wTk.s:189    .text.send_mouse:0000000000000000 send_mouse
     /tmp/ccZJ5wTk.s:251    .text.send_keyboard:0000000000000000 send_keyboard
     /tmp/ccZJ5wTk.s:333    .text.rn42_getc:0000000000000000 rn42_getc
     /tmp/ccZJ5wTk.s:350    .text.rn42_gets:0000000000000000 rn42_gets
     /tmp/ccZJ5wTk.s:780    .bss.s.2077:0000000000000000 s.2077
     /tmp/ccZJ5wTk.s:451    .text.rn42_putc:0000000000000000 rn42_putc
     /tmp/ccZJ5wTk.s:469    .text.rn42_puts:0000000000000000 rn42_puts
     /tmp/ccZJ5wTk.s:512    .text.rn42_autoconnecting:0000000000000000 rn42_autoconnecting
     /tmp/ccZJ5wTk.s:533    .text.rn42_autoconnect:0000000000000000 rn42_autoconnect
     /tmp/ccZJ5wTk.s:552    .text.rn42_init:0000000000000000 rn42_init
     /tmp/ccZJ5wTk.s:584    .text.rn42_disconnect:0000000000000000 rn42_disconnect
     /tmp/ccZJ5wTk.s:603    .text.rn42_rts:0000000000000000 rn42_rts
     /tmp/ccZJ5wTk.s:622    .text.rn42_cts_hi:0000000000000000 rn42_cts_hi
     /tmp/ccZJ5wTk.s:639    .text.rn42_cts_lo:0000000000000000 rn42_cts_lo
     /tmp/ccZJ5wTk.s:656    .text.rn42_linked:0000000000000000 rn42_linked
     /tmp/ccZJ5wTk.s:677    .text.rn42_set_leds:0000000000000000 rn42_set_leds
     /tmp/ccZJ5wTk.s:696    .data.rn42_config_driver:0000000000000000 rn42_config_driver
     /tmp/ccZJ5wTk.s:706    .data.rn42_driver:0000000000000000 rn42_driver

UNDEFINED SYMBOLS
serial_send
serial_recv2
timer_read
timer_elapsed
serial_init
__do_copy_data
__do_clear_bss
