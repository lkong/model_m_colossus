   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.add_key,"ax",@progbits
  12               	.global	add_key
  14               	add_key:
  15               	.LFB2:
  16               		.file 1 "../../../../tmk_core/common/action_util.c"
   1:../../../../tmk_core/common/action_util.c **** /*
   2:../../../../tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../../../tmk_core/common/action_util.c **** 
   4:../../../../tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:../../../../tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:../../../../tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../../../tmk_core/common/action_util.c **** (at your option) any later version.
   8:../../../../tmk_core/common/action_util.c **** 
   9:../../../../tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:../../../../tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../../../tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../../../tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:../../../../tmk_core/common/action_util.c **** 
  14:../../../../tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:../../../../tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../../../tmk_core/common/action_util.c **** */
  17:../../../../tmk_core/common/action_util.c **** #include "host.h"
  18:../../../../tmk_core/common/action_util.c **** #include "report.h"
  19:../../../../tmk_core/common/action_util.c **** #include "debug.h"
  20:../../../../tmk_core/common/action_util.c **** #include "action_util.h"
  21:../../../../tmk_core/common/action_util.c **** #include "timer.h"
  22:../../../../tmk_core/common/action_util.c **** 
  23:../../../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  24:../../../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  25:../../../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  26:../../../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  27:../../../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  28:../../../../tmk_core/common/action_util.c **** #endif
  29:../../../../tmk_core/common/action_util.c **** 
  30:../../../../tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  31:../../../../tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  32:../../../../tmk_core/common/action_util.c **** 
  33:../../../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  34:../../../../tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  35:../../../../tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  36:../../../../tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  37:../../../../tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  38:../../../../tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  39:../../../../tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  40:../../../../tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  41:../../../../tmk_core/common/action_util.c **** #endif
  42:../../../../tmk_core/common/action_util.c **** 
  43:../../../../tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  44:../../../../tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  45:../../../../tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  46:../../../../tmk_core/common/action_util.c **** 
  47:../../../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  48:../../../../tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  49:../../../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  50:../../../../tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  51:../../../../tmk_core/common/action_util.c **** #endif
  52:../../../../tmk_core/common/action_util.c **** #endif
  53:../../../../tmk_core/common/action_util.c **** 
  54:../../../../tmk_core/common/action_util.c **** 
  55:../../../../tmk_core/common/action_util.c **** void send_keyboard_report(void) {
  56:../../../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
  57:../../../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
  58:../../../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  59:../../../../tmk_core/common/action_util.c ****     if (oneshot_mods) {
  60:../../../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  61:../../../../tmk_core/common/action_util.c ****         if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
  62:../../../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
  63:../../../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  64:../../../../tmk_core/common/action_util.c ****         }
  65:../../../../tmk_core/common/action_util.c **** #endif
  66:../../../../tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
  67:../../../../tmk_core/common/action_util.c ****         if (has_anykey()) {
  68:../../../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  69:../../../../tmk_core/common/action_util.c ****         }
  70:../../../../tmk_core/common/action_util.c ****     }
  71:../../../../tmk_core/common/action_util.c **** #endif
  72:../../../../tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
  73:../../../../tmk_core/common/action_util.c **** }
  74:../../../../tmk_core/common/action_util.c **** 
  75:../../../../tmk_core/common/action_util.c **** /* key */
  76:../../../../tmk_core/common/action_util.c **** void add_key(uint8_t key)
  77:../../../../tmk_core/common/action_util.c **** {
  17               		.loc 1 77 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  24               	.LBB4:
  25               	.LBB5:
  78:../../../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  79:../../../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  80:../../../../tmk_core/common/action_util.c ****         add_key_bit(key);
  81:../../../../tmk_core/common/action_util.c ****         return;
  82:../../../../tmk_core/common/action_util.c ****     }
  83:../../../../tmk_core/common/action_util.c **** #endif
  84:../../../../tmk_core/common/action_util.c ****     add_key_byte(key);
  85:../../../../tmk_core/common/action_util.c **** }
  86:../../../../tmk_core/common/action_util.c **** 
  87:../../../../tmk_core/common/action_util.c **** void del_key(uint8_t key)
  88:../../../../tmk_core/common/action_util.c **** {
  89:../../../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  90:../../../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
  91:../../../../tmk_core/common/action_util.c ****         del_key_bit(key);
  92:../../../../tmk_core/common/action_util.c ****         return;
  93:../../../../tmk_core/common/action_util.c ****     }
  94:../../../../tmk_core/common/action_util.c **** #endif
  95:../../../../tmk_core/common/action_util.c ****     del_key_byte(key);
  96:../../../../tmk_core/common/action_util.c **** }
  97:../../../../tmk_core/common/action_util.c **** 
  98:../../../../tmk_core/common/action_util.c **** void clear_keys(void)
  99:../../../../tmk_core/common/action_util.c **** {
 100:../../../../tmk_core/common/action_util.c ****     // not clear mods
 101:../../../../tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 102:../../../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 103:../../../../tmk_core/common/action_util.c ****     }
 104:../../../../tmk_core/common/action_util.c **** }
 105:../../../../tmk_core/common/action_util.c **** 
 106:../../../../tmk_core/common/action_util.c **** 
 107:../../../../tmk_core/common/action_util.c **** /* modifier */
 108:../../../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 109:../../../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 110:../../../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 111:../../../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 112:../../../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 113:../../../../tmk_core/common/action_util.c **** 
 114:../../../../tmk_core/common/action_util.c **** /* weak modifier */
 115:../../../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 116:../../../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 117:../../../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 118:../../../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 119:../../../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 120:../../../../tmk_core/common/action_util.c **** 
 121:../../../../tmk_core/common/action_util.c **** /* Oneshot modifier */
 122:../../../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 123:../../../../tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 124:../../../../tmk_core/common/action_util.c **** {
 125:../../../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 126:../../../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:../../../../tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 128:../../../../tmk_core/common/action_util.c **** #endif
 129:../../../../tmk_core/common/action_util.c **** }
 130:../../../../tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 131:../../../../tmk_core/common/action_util.c **** {
 132:../../../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 133:../../../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 134:../../../../tmk_core/common/action_util.c ****     oneshot_time = 0;
 135:../../../../tmk_core/common/action_util.c **** #endif
 136:../../../../tmk_core/common/action_util.c **** }
 137:../../../../tmk_core/common/action_util.c **** #endif
 138:../../../../tmk_core/common/action_util.c **** 
 139:../../../../tmk_core/common/action_util.c **** 
 140:../../../../tmk_core/common/action_util.c **** 
 141:../../../../tmk_core/common/action_util.c **** 
 142:../../../../tmk_core/common/action_util.c **** /*
 143:../../../../tmk_core/common/action_util.c ****  * inspect keyboard state
 144:../../../../tmk_core/common/action_util.c ****  */
 145:../../../../tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 146:../../../../tmk_core/common/action_util.c **** {
 147:../../../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 148:../../../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 149:../../../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 150:../../../../tmk_core/common/action_util.c ****             cnt++;
 151:../../../../tmk_core/common/action_util.c ****     }
 152:../../../../tmk_core/common/action_util.c ****     return cnt;
 153:../../../../tmk_core/common/action_util.c **** }
 154:../../../../tmk_core/common/action_util.c **** 
 155:../../../../tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 156:../../../../tmk_core/common/action_util.c **** {
 157:../../../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 158:../../../../tmk_core/common/action_util.c **** }
 159:../../../../tmk_core/common/action_util.c **** 
 160:../../../../tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 161:../../../../tmk_core/common/action_util.c **** {
 162:../../../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 163:../../../../tmk_core/common/action_util.c ****     if (keyboard_protocol && keyboard_nkro) {
 164:../../../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 165:../../../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 166:../../../../tmk_core/common/action_util.c ****             ;
 167:../../../../tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 168:../../../../tmk_core/common/action_util.c ****     }
 169:../../../../tmk_core/common/action_util.c **** #endif
 170:../../../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 171:../../../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 172:../../../../tmk_core/common/action_util.c ****     do {
 173:../../../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 174:../../../../tmk_core/common/action_util.c ****             break;
 175:../../../../tmk_core/common/action_util.c ****         }
 176:../../../../tmk_core/common/action_util.c ****         i = RO_INC(i);
 177:../../../../tmk_core/common/action_util.c ****     } while (i != cb_tail);
 178:../../../../tmk_core/common/action_util.c ****     return keyboard_report->keys[i];
 179:../../../../tmk_core/common/action_util.c **** #else
 180:../../../../tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 181:../../../../tmk_core/common/action_util.c **** #endif
 182:../../../../tmk_core/common/action_util.c **** }
 183:../../../../tmk_core/common/action_util.c **** 
 184:../../../../tmk_core/common/action_util.c **** 
 185:../../../../tmk_core/common/action_util.c **** 
 186:../../../../tmk_core/common/action_util.c **** /* local functions */
 187:../../../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code)
 188:../../../../tmk_core/common/action_util.c **** {
 189:../../../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 190:../../../../tmk_core/common/action_util.c ****     int8_t i = cb_head;
 191:../../../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 192:../../../../tmk_core/common/action_util.c ****     if (cb_count) {
 193:../../../../tmk_core/common/action_util.c ****         do {
 194:../../../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 195:../../../../tmk_core/common/action_util.c ****                 return;
 196:../../../../tmk_core/common/action_util.c ****             }
 197:../../../../tmk_core/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 198:../../../../tmk_core/common/action_util.c ****                 empty = i;
 199:../../../../tmk_core/common/action_util.c ****             }
 200:../../../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 201:../../../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 202:../../../../tmk_core/common/action_util.c ****         if (i == cb_tail) {
 203:../../../../tmk_core/common/action_util.c ****             if (cb_tail == cb_head) {
 204:../../../../tmk_core/common/action_util.c ****                 // buffer is full
 205:../../../../tmk_core/common/action_util.c ****                 if (empty == -1) {
 206:../../../../tmk_core/common/action_util.c ****                     // pop head when has no empty space
 207:../../../../tmk_core/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 208:../../../../tmk_core/common/action_util.c ****                     cb_count--;
 209:../../../../tmk_core/common/action_util.c ****                 }
 210:../../../../tmk_core/common/action_util.c ****                 else {
 211:../../../../tmk_core/common/action_util.c ****                     // left shift when has empty space
 212:../../../../tmk_core/common/action_util.c ****                     uint8_t offset = 1;
 213:../../../../tmk_core/common/action_util.c ****                     i = RO_INC(empty);
 214:../../../../tmk_core/common/action_util.c ****                     do {
 215:../../../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 216:../../../../tmk_core/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 217:../../../../tmk_core/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 218:../../../../tmk_core/common/action_util.c ****                             empty = RO_INC(empty);
 219:../../../../tmk_core/common/action_util.c ****                         }
 220:../../../../tmk_core/common/action_util.c ****                         else {
 221:../../../../tmk_core/common/action_util.c ****                             offset++;
 222:../../../../tmk_core/common/action_util.c ****                         }
 223:../../../../tmk_core/common/action_util.c ****                         i = RO_INC(i);
 224:../../../../tmk_core/common/action_util.c ****                     } while (i != cb_tail);
 225:../../../../tmk_core/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 226:../../../../tmk_core/common/action_util.c ****                 }
 227:../../../../tmk_core/common/action_util.c ****             }
 228:../../../../tmk_core/common/action_util.c ****         }
 229:../../../../tmk_core/common/action_util.c ****     }
 230:../../../../tmk_core/common/action_util.c ****     // add to tail
 231:../../../../tmk_core/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 232:../../../../tmk_core/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 233:../../../../tmk_core/common/action_util.c ****     cb_count++;
 234:../../../../tmk_core/common/action_util.c **** #else
 235:../../../../tmk_core/common/action_util.c ****     int8_t i = 0;
 236:../../../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 237:../../../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 238:../../../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  26               		.loc 1 238 0
  27 0000 4091 0000 		lds r20,keyboard_report
  28 0004 5091 0000 		lds r21,keyboard_report+1
  29 0008 20E0      		ldi r18,0
  30 000a 30E0      		ldi r19,0
 236:../../../../tmk_core/common/action_util.c ****     int8_t empty = -1;
  31               		.loc 1 236 0
  32 000c 9FEF      		ldi r25,lo8(-1)
  33               	.LVL1:
  34               	.L4:
  76:../../../../tmk_core/common/action_util.c **** void add_key(uint8_t key)
  35               		.loc 1 76 0
  36 000e FA01      		movw r30,r20
  37 0010 E20F      		add r30,r18
  38 0012 F31F      		adc r31,r19
  39               		.loc 1 238 0
  40 0014 6281      		ldd r22,Z+2
  41 0016 6817      		cp r22,r24
  42 0018 01F0      		breq .L1
 239:../../../../tmk_core/common/action_util.c ****             break;
 240:../../../../tmk_core/common/action_util.c ****         }
 241:../../../../tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
  43               		.loc 1 241 0
  44 001a 9F3F      		cpi r25,lo8(-1)
  45 001c 01F4      		brne .L3
  46 001e 6111      		cpse r22,__zero_reg__
  47 0020 00C0      		rjmp .L3
  48 0022 922F      		mov r25,r18
  49               	.L3:
  50               	.LVL2:
  51 0024 2F5F      		subi r18,-1
  52 0026 3F4F      		sbci r19,-1
 237:../../../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
  53               		.loc 1 237 0
  54 0028 2630      		cpi r18,6
  55 002a 3105      		cpc r19,__zero_reg__
  56 002c 01F4      		brne .L4
  57 002e 00C0      		rjmp .L9
  58               	.L6:
 242:../../../../tmk_core/common/action_util.c ****             empty = i;
 243:../../../../tmk_core/common/action_util.c ****         }
 244:../../../../tmk_core/common/action_util.c ****     }
 245:../../../../tmk_core/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
 246:../../../../tmk_core/common/action_util.c ****         if (empty != -1) {
 247:../../../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
  59               		.loc 1 247 0
  60 0030 FA01      		movw r30,r20
  61 0032 E90F      		add r30,r25
  62 0034 F11D      		adc r31,__zero_reg__
  63 0036 97FD      		sbrc r25,7
  64 0038 FA95      		dec r31
  65 003a 8283      		std Z+2,r24
  66 003c 0895      		ret
  67               	.L9:
 246:../../../../tmk_core/common/action_util.c ****         if (empty != -1) {
  68               		.loc 1 246 0
  69 003e 9F3F      		cpi r25,lo8(-1)
  70 0040 01F4      		brne .L6
  71               	.LVL3:
  72               	.L1:
  73 0042 0895      		ret
  74               	.LBE5:
  75               	.LBE4:
  76               		.cfi_endproc
  77               	.LFE2:
  79               		.section	.text.del_key,"ax",@progbits
  80               	.global	del_key
  82               	del_key:
  83               	.LFB3:
  88:../../../../tmk_core/common/action_util.c **** {
  84               		.loc 1 88 0
  85               		.cfi_startproc
  86               	.LVL4:
  87               	/* prologue: function */
  88               	/* frame size = 0 */
  89               	/* stack size = 0 */
  90               	.L__stack_usage = 0
  91               	.LBB9:
  92               	.LBB10:
 248:../../../../tmk_core/common/action_util.c ****         }
 249:../../../../tmk_core/common/action_util.c ****     }
 250:../../../../tmk_core/common/action_util.c **** #endif
 251:../../../../tmk_core/common/action_util.c **** }
 252:../../../../tmk_core/common/action_util.c **** 
 253:../../../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 254:../../../../tmk_core/common/action_util.c **** {
 255:../../../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 256:../../../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 257:../../../../tmk_core/common/action_util.c ****     if (cb_count) {
 258:../../../../tmk_core/common/action_util.c ****         do {
 259:../../../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 260:../../../../tmk_core/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 261:../../../../tmk_core/common/action_util.c ****                 cb_count--;
 262:../../../../tmk_core/common/action_util.c ****                 if (cb_count == 0) {
 263:../../../../tmk_core/common/action_util.c ****                     // reset head and tail
 264:../../../../tmk_core/common/action_util.c ****                     cb_tail = cb_head = 0;
 265:../../../../tmk_core/common/action_util.c ****                 }
 266:../../../../tmk_core/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 267:../../../../tmk_core/common/action_util.c ****                     // left shift when next to tail
 268:../../../../tmk_core/common/action_util.c ****                     do {
 269:../../../../tmk_core/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 270:../../../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 271:../../../../tmk_core/common/action_util.c ****                             break;
 272:../../../../tmk_core/common/action_util.c ****                         }
 273:../../../../tmk_core/common/action_util.c ****                     } while (cb_tail != cb_head);
 274:../../../../tmk_core/common/action_util.c ****                 }
 275:../../../../tmk_core/common/action_util.c ****                 break;
 276:../../../../tmk_core/common/action_util.c ****             }
 277:../../../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 278:../../../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 279:../../../../tmk_core/common/action_util.c ****     }
 280:../../../../tmk_core/common/action_util.c **** #else
 281:../../../../tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 282:../../../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  93               		.loc 1 282 0
  94 0000 4091 0000 		lds r20,keyboard_report
  95 0004 5091 0000 		lds r21,keyboard_report+1
  96 0008 20E0      		ldi r18,0
  97 000a 30E0      		ldi r19,0
  98               	.LVL5:
  99               	.L12:
  87:../../../../tmk_core/common/action_util.c **** void del_key(uint8_t key)
 100               		.loc 1 87 0
 101 000c FA01      		movw r30,r20
 102 000e E20F      		add r30,r18
 103 0010 F31F      		adc r31,r19
 104               		.loc 1 282 0
 105 0012 9281      		ldd r25,Z+2
 106 0014 9813      		cpse r25,r24
 107 0016 00C0      		rjmp .L11
 283:../../../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 108               		.loc 1 283 0
 109 0018 1282      		std Z+2,__zero_reg__
 110               	.L11:
 111 001a 2F5F      		subi r18,-1
 112 001c 3F4F      		sbci r19,-1
 281:../../../../tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 113               		.loc 1 281 0
 114 001e 2630      		cpi r18,6
 115 0020 3105      		cpc r19,__zero_reg__
 116 0022 01F4      		brne .L12
 117               	/* epilogue start */
 118               	.LBE10:
 119               	.LBE9:
  96:../../../../tmk_core/common/action_util.c **** }
 120               		.loc 1 96 0
 121 0024 0895      		ret
 122               		.cfi_endproc
 123               	.LFE3:
 125               		.section	.text.clear_keys,"ax",@progbits
 126               	.global	clear_keys
 128               	clear_keys:
 129               	.LFB4:
  99:../../../../tmk_core/common/action_util.c **** {
 130               		.loc 1 99 0
 131               		.cfi_startproc
 132               	/* prologue: function */
 133               	/* frame size = 0 */
 134               	/* stack size = 0 */
 135               	.L__stack_usage = 0
 136               	.LVL6:
  99:../../../../tmk_core/common/action_util.c **** {
 137               		.loc 1 99 0
 138 0000 81E0      		ldi r24,lo8(1)
 139 0002 90E0      		ldi r25,0
 140               	.LVL7:
 141               	.L15:
 142               	.LBB11:
 102:../../../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 143               		.loc 1 102 0 discriminator 2
 144 0004 E091 0000 		lds r30,keyboard_report
 145 0008 F091 0000 		lds r31,keyboard_report+1
 146 000c E80F      		add r30,r24
 147 000e F91F      		adc r31,r25
 148 0010 1082      		st Z,__zero_reg__
 149 0012 0196      		adiw r24,1
 101:../../../../tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 150               		.loc 1 101 0 discriminator 2
 151 0014 8830      		cpi r24,8
 152 0016 9105      		cpc r25,__zero_reg__
 153 0018 01F4      		brne .L15
 154               	/* epilogue start */
 155               	.LBE11:
 104:../../../../tmk_core/common/action_util.c **** }
 156               		.loc 1 104 0
 157 001a 0895      		ret
 158               		.cfi_endproc
 159               	.LFE4:
 161               		.section	.text.get_mods,"ax",@progbits
 162               	.global	get_mods
 164               	get_mods:
 165               	.LFB5:
 108:../../../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 166               		.loc 1 108 0
 167               		.cfi_startproc
 168               	/* prologue: function */
 169               	/* frame size = 0 */
 170               	/* stack size = 0 */
 171               	.L__stack_usage = 0
 108:../../../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 172               		.loc 1 108 0
 173 0000 8091 0000 		lds r24,real_mods
 174 0004 0895      		ret
 175               		.cfi_endproc
 176               	.LFE5:
 178               		.section	.text.add_mods,"ax",@progbits
 179               	.global	add_mods
 181               	add_mods:
 182               	.LFB6:
 109:../../../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 183               		.loc 1 109 0
 184               		.cfi_startproc
 185               	.LVL8:
 186               	/* prologue: function */
 187               	/* frame size = 0 */
 188               	/* stack size = 0 */
 189               	.L__stack_usage = 0
 109:../../../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 190               		.loc 1 109 0
 191 0000 9091 0000 		lds r25,real_mods
 192 0004 982B      		or r25,r24
 193 0006 9093 0000 		sts real_mods,r25
 194 000a 0895      		ret
 195               		.cfi_endproc
 196               	.LFE6:
 198               		.section	.text.del_mods,"ax",@progbits
 199               	.global	del_mods
 201               	del_mods:
 202               	.LFB7:
 110:../../../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 203               		.loc 1 110 0
 204               		.cfi_startproc
 205               	.LVL9:
 206               	/* prologue: function */
 207               	/* frame size = 0 */
 208               	/* stack size = 0 */
 209               	.L__stack_usage = 0
 110:../../../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 210               		.loc 1 110 0
 211 0000 8095      		com r24
 212               	.LVL10:
 213 0002 9091 0000 		lds r25,real_mods
 214 0006 9823      		and r25,r24
 215 0008 9093 0000 		sts real_mods,r25
 216 000c 0895      		ret
 217               		.cfi_endproc
 218               	.LFE7:
 220               		.section	.text.set_mods,"ax",@progbits
 221               	.global	set_mods
 223               	set_mods:
 224               	.LFB8:
 111:../../../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 225               		.loc 1 111 0
 226               		.cfi_startproc
 227               	.LVL11:
 228               	/* prologue: function */
 229               	/* frame size = 0 */
 230               	/* stack size = 0 */
 231               	.L__stack_usage = 0
 111:../../../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 232               		.loc 1 111 0
 233 0000 8093 0000 		sts real_mods,r24
 234 0004 0895      		ret
 235               		.cfi_endproc
 236               	.LFE8:
 238               		.section	.text.clear_mods,"ax",@progbits
 239               	.global	clear_mods
 241               	clear_mods:
 242               	.LFB9:
 112:../../../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 243               		.loc 1 112 0
 244               		.cfi_startproc
 245               	/* prologue: function */
 246               	/* frame size = 0 */
 247               	/* stack size = 0 */
 248               	.L__stack_usage = 0
 112:../../../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 249               		.loc 1 112 0
 250 0000 1092 0000 		sts real_mods,__zero_reg__
 251 0004 0895      		ret
 252               		.cfi_endproc
 253               	.LFE9:
 255               		.section	.text.get_weak_mods,"ax",@progbits
 256               	.global	get_weak_mods
 258               	get_weak_mods:
 259               	.LFB10:
 115:../../../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 260               		.loc 1 115 0
 261               		.cfi_startproc
 262               	/* prologue: function */
 263               	/* frame size = 0 */
 264               	/* stack size = 0 */
 265               	.L__stack_usage = 0
 115:../../../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 266               		.loc 1 115 0
 267 0000 8091 0000 		lds r24,weak_mods
 268 0004 0895      		ret
 269               		.cfi_endproc
 270               	.LFE10:
 272               		.section	.text.add_weak_mods,"ax",@progbits
 273               	.global	add_weak_mods
 275               	add_weak_mods:
 276               	.LFB11:
 116:../../../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 277               		.loc 1 116 0
 278               		.cfi_startproc
 279               	.LVL12:
 280               	/* prologue: function */
 281               	/* frame size = 0 */
 282               	/* stack size = 0 */
 283               	.L__stack_usage = 0
 116:../../../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 284               		.loc 1 116 0
 285 0000 9091 0000 		lds r25,weak_mods
 286 0004 982B      		or r25,r24
 287 0006 9093 0000 		sts weak_mods,r25
 288 000a 0895      		ret
 289               		.cfi_endproc
 290               	.LFE11:
 292               		.section	.text.del_weak_mods,"ax",@progbits
 293               	.global	del_weak_mods
 295               	del_weak_mods:
 296               	.LFB12:
 117:../../../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 297               		.loc 1 117 0
 298               		.cfi_startproc
 299               	.LVL13:
 300               	/* prologue: function */
 301               	/* frame size = 0 */
 302               	/* stack size = 0 */
 303               	.L__stack_usage = 0
 117:../../../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 304               		.loc 1 117 0
 305 0000 8095      		com r24
 306               	.LVL14:
 307 0002 9091 0000 		lds r25,weak_mods
 308 0006 9823      		and r25,r24
 309 0008 9093 0000 		sts weak_mods,r25
 310 000c 0895      		ret
 311               		.cfi_endproc
 312               	.LFE12:
 314               		.section	.text.set_weak_mods,"ax",@progbits
 315               	.global	set_weak_mods
 317               	set_weak_mods:
 318               	.LFB13:
 118:../../../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 319               		.loc 1 118 0
 320               		.cfi_startproc
 321               	.LVL15:
 322               	/* prologue: function */
 323               	/* frame size = 0 */
 324               	/* stack size = 0 */
 325               	.L__stack_usage = 0
 118:../../../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 326               		.loc 1 118 0
 327 0000 8093 0000 		sts weak_mods,r24
 328 0004 0895      		ret
 329               		.cfi_endproc
 330               	.LFE13:
 332               		.section	.text.clear_weak_mods,"ax",@progbits
 333               	.global	clear_weak_mods
 335               	clear_weak_mods:
 336               	.LFB14:
 119:../../../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 337               		.loc 1 119 0
 338               		.cfi_startproc
 339               	/* prologue: function */
 340               	/* frame size = 0 */
 341               	/* stack size = 0 */
 342               	.L__stack_usage = 0
 119:../../../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 343               		.loc 1 119 0
 344 0000 1092 0000 		sts weak_mods,__zero_reg__
 345 0004 0895      		ret
 346               		.cfi_endproc
 347               	.LFE14:
 349               		.section	.text.set_oneshot_mods,"ax",@progbits
 350               	.global	set_oneshot_mods
 352               	set_oneshot_mods:
 353               	.LFB15:
 124:../../../../tmk_core/common/action_util.c **** {
 354               		.loc 1 124 0
 355               		.cfi_startproc
 356               	.LVL16:
 357               	/* prologue: function */
 358               	/* frame size = 0 */
 359               	/* stack size = 0 */
 360               	.L__stack_usage = 0
 125:../../../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 361               		.loc 1 125 0
 362 0000 8093 0000 		sts oneshot_mods,r24
 363 0004 0895      		ret
 364               		.cfi_endproc
 365               	.LFE15:
 367               		.section	.text.clear_oneshot_mods,"ax",@progbits
 368               	.global	clear_oneshot_mods
 370               	clear_oneshot_mods:
 371               	.LFB16:
 131:../../../../tmk_core/common/action_util.c **** {
 372               		.loc 1 131 0
 373               		.cfi_startproc
 374               	/* prologue: function */
 375               	/* frame size = 0 */
 376               	/* stack size = 0 */
 377               	.L__stack_usage = 0
 132:../../../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 378               		.loc 1 132 0
 379 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 380 0004 0895      		ret
 381               		.cfi_endproc
 382               	.LFE16:
 384               		.section	.text.has_anykey,"ax",@progbits
 385               	.global	has_anykey
 387               	has_anykey:
 388               	.LFB17:
 146:../../../../tmk_core/common/action_util.c **** {
 389               		.loc 1 146 0
 390               		.cfi_startproc
 391               	/* prologue: function */
 392               	/* frame size = 0 */
 393               	/* stack size = 0 */
 394               	.L__stack_usage = 0
 395               	.LVL17:
 396               	.LBB12:
 149:../../../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 397               		.loc 1 149 0
 398 0000 4091 0000 		lds r20,keyboard_report
 399 0004 5091 0000 		lds r21,keyboard_report+1
 400 0008 20E0      		ldi r18,0
 401 000a 30E0      		ldi r19,0
 147:../../../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 402               		.loc 1 147 0
 403 000c 80E0      		ldi r24,0
 404               	.LVL18:
 405               	.L31:
 145:../../../../tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 406               		.loc 1 145 0
 407 000e FA01      		movw r30,r20
 408 0010 E20F      		add r30,r18
 409 0012 F31F      		adc r31,r19
 149:../../../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 410               		.loc 1 149 0
 411 0014 9181      		ldd r25,Z+1
 412 0016 9111      		cpse r25,__zero_reg__
 150:../../../../tmk_core/common/action_util.c ****             cnt++;
 413               		.loc 1 150 0
 414 0018 8F5F      		subi r24,lo8(-(1))
 415               	.LVL19:
 416               	.L30:
 417 001a 2F5F      		subi r18,-1
 418 001c 3F4F      		sbci r19,-1
 148:../../../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 419               		.loc 1 148 0
 420 001e 2730      		cpi r18,7
 421 0020 3105      		cpc r19,__zero_reg__
 422 0022 01F4      		brne .L31
 423               	/* epilogue start */
 424               	.LBE12:
 153:../../../../tmk_core/common/action_util.c **** }
 425               		.loc 1 153 0
 426 0024 0895      		ret
 427               		.cfi_endproc
 428               	.LFE17:
 430               		.section	.text.send_keyboard_report,"ax",@progbits
 431               	.global	send_keyboard_report
 433               	send_keyboard_report:
 434               	.LFB1:
  55:../../../../tmk_core/common/action_util.c **** void send_keyboard_report(void) {
 435               		.loc 1 55 0
 436               		.cfi_startproc
 437               	/* prologue: function */
 438               	/* frame size = 0 */
 439               	/* stack size = 0 */
 440               	.L__stack_usage = 0
  56:../../../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 441               		.loc 1 56 0
 442 0000 E091 0000 		lds r30,keyboard_report
 443 0004 F091 0000 		lds r31,keyboard_report+1
 444 0008 8091 0000 		lds r24,real_mods
 445 000c 8083      		st Z,r24
  57:../../../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 446               		.loc 1 57 0
 447 000e E091 0000 		lds r30,keyboard_report
 448 0012 F091 0000 		lds r31,keyboard_report+1
 449 0016 8081      		ld r24,Z
 450 0018 9091 0000 		lds r25,weak_mods
 451 001c 892B      		or r24,r25
 452 001e 8083      		st Z,r24
  59:../../../../tmk_core/common/action_util.c ****     if (oneshot_mods) {
 453               		.loc 1 59 0
 454 0020 9091 0000 		lds r25,oneshot_mods
 455 0024 9923      		tst r25
 456 0026 01F0      		breq .L38
  66:../../../../tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 457               		.loc 1 66 0
 458 0028 E091 0000 		lds r30,keyboard_report
 459 002c F091 0000 		lds r31,keyboard_report+1
 460 0030 8081      		ld r24,Z
 461 0032 892B      		or r24,r25
 462 0034 8083      		st Z,r24
  67:../../../../tmk_core/common/action_util.c ****         if (has_anykey()) {
 463               		.loc 1 67 0
 464 0036 0E94 0000 		call has_anykey
 465               	.LVL20:
 466 003a 8111      		cpse r24,__zero_reg__
  68:../../../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
 467               		.loc 1 68 0
 468 003c 0E94 0000 		call clear_oneshot_mods
 469               	.LVL21:
 470               	.L38:
  72:../../../../tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
 471               		.loc 1 72 0
 472 0040 8091 0000 		lds r24,keyboard_report
 473 0044 9091 0000 		lds r25,keyboard_report+1
 474 0048 0C94 0000 		jmp host_keyboard_send
 475               	.LVL22:
 476               		.cfi_endproc
 477               	.LFE1:
 479               		.section	.text.has_anymod,"ax",@progbits
 480               	.global	has_anymod
 482               	has_anymod:
 483               	.LFB18:
 156:../../../../tmk_core/common/action_util.c **** {
 484               		.loc 1 156 0
 485               		.cfi_startproc
 486               	/* prologue: function */
 487               	/* frame size = 0 */
 488               	/* stack size = 0 */
 489               	.L__stack_usage = 0
 157:../../../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 490               		.loc 1 157 0
 491 0000 8091 0000 		lds r24,real_mods
 492 0004 0C94 0000 		jmp bitpop
 493               	.LVL23:
 494               		.cfi_endproc
 495               	.LFE18:
 497               		.section	.text.get_first_key,"ax",@progbits
 498               	.global	get_first_key
 500               	get_first_key:
 501               	.LFB19:
 161:../../../../tmk_core/common/action_util.c **** {
 502               		.loc 1 161 0
 503               		.cfi_startproc
 504               	/* prologue: function */
 505               	/* frame size = 0 */
 506               	/* stack size = 0 */
 507               	.L__stack_usage = 0
 180:../../../../tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 508               		.loc 1 180 0
 509 0000 E091 0000 		lds r30,keyboard_report
 510 0004 F091 0000 		lds r31,keyboard_report+1
 182:../../../../tmk_core/common/action_util.c **** }
 511               		.loc 1 182 0
 512 0008 8281      		ldd r24,Z+2
 513 000a 0895      		ret
 514               		.cfi_endproc
 515               	.LFE19:
 517               	.global	keyboard_report
 518               		.section	.data.keyboard_report,"aw",@progbits
 521               	keyboard_report:
 522 0000 0000      		.word	__compound_literal.0
 523               		.section	.bss.real_mods,"aw",@nobits
 526               	real_mods:
 527 0000 00        		.zero	1
 528               		.section	.bss.weak_mods,"aw",@nobits
 531               	weak_mods:
 532 0000 00        		.zero	1
 533               		.section	.bss.oneshot_mods,"aw",@nobits
 536               	oneshot_mods:
 537 0000 00        		.zero	1
 538               		.section	.bss.__compound_literal.0,"aw",@nobits
 541               	__compound_literal.0:
 542 0000 0000 0000 		.zero	8
 542      0000 0000 
 543               		.text
 544               	.Letext0:
 545               		.file 2 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/stdint.h"
 546               		.file 3 "../../../../tmk_core/common/report.h"
 547               		.file 4 "../../../../tmk_core/common/host.h"
 548               		.file 5 "../../../../tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
     /tmp/cc9E8Vl5.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc9E8Vl5.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc9E8Vl5.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc9E8Vl5.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc9E8Vl5.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc9E8Vl5.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc9E8Vl5.s:14     .text.add_key:0000000000000000 add_key
     /tmp/cc9E8Vl5.s:521    .data.keyboard_report:0000000000000000 keyboard_report
     /tmp/cc9E8Vl5.s:82     .text.del_key:0000000000000000 del_key
     /tmp/cc9E8Vl5.s:128    .text.clear_keys:0000000000000000 clear_keys
     /tmp/cc9E8Vl5.s:164    .text.get_mods:0000000000000000 get_mods
     /tmp/cc9E8Vl5.s:526    .bss.real_mods:0000000000000000 real_mods
     /tmp/cc9E8Vl5.s:181    .text.add_mods:0000000000000000 add_mods
     /tmp/cc9E8Vl5.s:201    .text.del_mods:0000000000000000 del_mods
     /tmp/cc9E8Vl5.s:223    .text.set_mods:0000000000000000 set_mods
     /tmp/cc9E8Vl5.s:241    .text.clear_mods:0000000000000000 clear_mods
     /tmp/cc9E8Vl5.s:258    .text.get_weak_mods:0000000000000000 get_weak_mods
     /tmp/cc9E8Vl5.s:531    .bss.weak_mods:0000000000000000 weak_mods
     /tmp/cc9E8Vl5.s:275    .text.add_weak_mods:0000000000000000 add_weak_mods
     /tmp/cc9E8Vl5.s:295    .text.del_weak_mods:0000000000000000 del_weak_mods
     /tmp/cc9E8Vl5.s:317    .text.set_weak_mods:0000000000000000 set_weak_mods
     /tmp/cc9E8Vl5.s:335    .text.clear_weak_mods:0000000000000000 clear_weak_mods
     /tmp/cc9E8Vl5.s:352    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
     /tmp/cc9E8Vl5.s:536    .bss.oneshot_mods:0000000000000000 oneshot_mods
     /tmp/cc9E8Vl5.s:370    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
     /tmp/cc9E8Vl5.s:387    .text.has_anykey:0000000000000000 has_anykey
     /tmp/cc9E8Vl5.s:433    .text.send_keyboard_report:0000000000000000 send_keyboard_report
     /tmp/cc9E8Vl5.s:482    .text.has_anymod:0000000000000000 has_anymod
     /tmp/cc9E8Vl5.s:500    .text.get_first_key:0000000000000000 get_first_key
     /tmp/cc9E8Vl5.s:541    .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
host_keyboard_send
bitpop
__do_copy_data
__do_clear_bss
