   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.action_exec,"ax",@progbits
  12               	.global	action_exec
  14               	action_exec:
  15               	.LFB4:
  16               		.file 1 "../../../../tmk_core/common/action.c"
   1:../../../../tmk_core/common/action.c **** /*
   2:../../../../tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../../../tmk_core/common/action.c **** 
   4:../../../../tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../../../../tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:../../../../tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../../../tmk_core/common/action.c **** (at your option) any later version.
   8:../../../../tmk_core/common/action.c **** 
   9:../../../../tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:../../../../tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../../../tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../../../tmk_core/common/action.c **** GNU General Public License for more details.
  13:../../../../tmk_core/common/action.c **** 
  14:../../../../tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:../../../../tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../../../tmk_core/common/action.c **** */
  17:../../../../tmk_core/common/action.c **** #include "host.h"
  18:../../../../tmk_core/common/action.c **** #include "keycode.h"
  19:../../../../tmk_core/common/action.c **** #include "keyboard.h"
  20:../../../../tmk_core/common/action.c **** #include "mousekey.h"
  21:../../../../tmk_core/common/action.c **** #include "command.h"
  22:../../../../tmk_core/common/action.c **** #include "led.h"
  23:../../../../tmk_core/common/action.c **** #include "backlight.h"
  24:../../../../tmk_core/common/action.c **** #include "action_layer.h"
  25:../../../../tmk_core/common/action.c **** #include "action_tapping.h"
  26:../../../../tmk_core/common/action.c **** #include "action_macro.h"
  27:../../../../tmk_core/common/action.c **** #include "action_util.h"
  28:../../../../tmk_core/common/action.c **** #include "action.h"
  29:../../../../tmk_core/common/action.c **** #include "hook.h"
  30:../../../../tmk_core/common/action.c **** 
  31:../../../../tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  32:../../../../tmk_core/common/action.c **** #include "debug.h"
  33:../../../../tmk_core/common/action.c **** #else
  34:../../../../tmk_core/common/action.c **** #include "nodebug.h"
  35:../../../../tmk_core/common/action.c **** #endif
  36:../../../../tmk_core/common/action.c **** 
  37:../../../../tmk_core/common/action.c **** 
  38:../../../../tmk_core/common/action.c **** void action_exec(keyevent_t event)
  39:../../../../tmk_core/common/action.c **** {
  17               		.loc 1 39 0
  18               		.cfi_startproc
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27 0004 CDB7      		in r28,__SP_L__
  28 0006 DEB7      		in r29,__SP_H__
  29               	.LCFI2:
  30               		.cfi_def_cfa_register 28
  31 0008 2B97      		sbiw r28,11
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 15
  34 000a 0FB6      		in __tmp_reg__,__SREG__
  35 000c F894      		cli
  36 000e DEBF      		out __SP_H__,r29
  37 0010 0FBE      		out __SREG__,__tmp_reg__
  38 0012 CDBF      		out __SP_L__,r28
  39               	/* prologue: function */
  40               	/* frame size = 11 */
  41               	/* stack size = 13 */
  42               	.L__stack_usage = 13
  43 0014 4F83      		std Y+7,r20
  44 0016 5887      		std Y+8,r21
  45 0018 6987      		std Y+9,r22
  46 001a 7A87      		std Y+10,r23
  47 001c 8B87      		std Y+11,r24
  48               	.LBB4:
  49               	.LBB5:
  50               		.file 2 "../../../../tmk_core/common/keyboard.h"
   1:../../../../tmk_core/common/keyboard.h **** /*
   2:../../../../tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../../../tmk_core/common/keyboard.h **** 
   4:../../../../tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../../../tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../../../tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../../../tmk_core/common/keyboard.h **** (at your option) any later version.
   8:../../../../tmk_core/common/keyboard.h **** 
   9:../../../../tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../../../tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../../../tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../../../tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:../../../../tmk_core/common/keyboard.h **** 
  14:../../../../tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../../../tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../../../tmk_core/common/keyboard.h **** */
  17:../../../../tmk_core/common/keyboard.h **** 
  18:../../../../tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../../../tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:../../../../tmk_core/common/keyboard.h **** 
  21:../../../../tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:../../../../tmk_core/common/keyboard.h **** #include <stdint.h>
  23:../../../../tmk_core/common/keyboard.h **** 
  24:../../../../tmk_core/common/keyboard.h **** 
  25:../../../../tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:../../../../tmk_core/common/keyboard.h **** extern "C" {
  27:../../../../tmk_core/common/keyboard.h **** #endif
  28:../../../../tmk_core/common/keyboard.h **** 
  29:../../../../tmk_core/common/keyboard.h **** /* key matrix position */
  30:../../../../tmk_core/common/keyboard.h **** typedef struct {
  31:../../../../tmk_core/common/keyboard.h ****     uint8_t col;
  32:../../../../tmk_core/common/keyboard.h ****     uint8_t row;
  33:../../../../tmk_core/common/keyboard.h **** } keypos_t;
  34:../../../../tmk_core/common/keyboard.h **** 
  35:../../../../tmk_core/common/keyboard.h **** /* key event */
  36:../../../../tmk_core/common/keyboard.h **** typedef struct {
  37:../../../../tmk_core/common/keyboard.h ****     keypos_t key;
  38:../../../../tmk_core/common/keyboard.h ****     bool     pressed;
  39:../../../../tmk_core/common/keyboard.h ****     uint16_t time;
  40:../../../../tmk_core/common/keyboard.h **** } keyevent_t;
  41:../../../../tmk_core/common/keyboard.h **** 
  42:../../../../tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../../../tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../../../tmk_core/common/keyboard.h **** 
  45:../../../../tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:../../../../tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../../../tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../../../tmk_core/common/keyboard.h ****  */
  49:../../../../tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  51               		.loc 2 49 0
  52 001e 8A85      		ldd r24,Y+10
  53 0020 9B85      		ldd r25,Y+11
  54 0022 892B      		or r24,r25
  55 0024 01F0      		breq .L5
  56 0026 5F3F      		cpi r21,lo8(-1)
  57 0028 01F4      		brne .L6
  58 002a 81E0      		ldi r24,lo8(1)
  59 002c 90E0      		ldi r25,0
  60 002e 4F3F      		cpi r20,lo8(-1)
  61 0030 01F0      		breq .L2
  62 0032 00C0      		rjmp .L6
  63               	.L5:
  64 0034 81E0      		ldi r24,lo8(1)
  65 0036 90E0      		ldi r25,0
  66 0038 00C0      		rjmp .L2
  67               	.L6:
  68 003a 80E0      		ldi r24,0
  69 003c 90E0      		ldi r25,0
  70               	.L2:
  71               	.LBE5:
  72               	.LBE4:
  40:../../../../tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  73               		.loc 1 40 0
  74 003e 80FD      		sbrc r24,0
  75 0040 00C0      		rjmp .L4
  41:../../../../tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  42:../../../../tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  43:../../../../tmk_core/common/action.c ****         hook_matrix_change(event);
  76               		.loc 1 43 0
  77 0042 4F81      		ldd r20,Y+7
  78 0044 5885      		ldd r21,Y+8
  79 0046 6985      		ldd r22,Y+9
  80 0048 7A85      		ldd r23,Y+10
  81 004a 8B85      		ldd r24,Y+11
  82 004c 0E94 0000 		call hook_matrix_change
  83               	.LVL0:
  84               	.L4:
  44:../../../../tmk_core/common/action.c ****     }
  45:../../../../tmk_core/common/action.c **** 
  46:../../../../tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  85               		.loc 1 46 0
  86 0050 DE01      		movw r26,r28
  87 0052 1196      		adiw r26,1
  88 0054 86E0      		ldi r24,lo8(6)
  89 0056 FD01      		movw r30,r26
  90               		0:
  91 0058 1192      		st Z+,__zero_reg__
  92 005a 8A95      		dec r24
  93 005c 01F4      		brne 0b
  94 005e 85E0      		ldi r24,lo8(5)
  95 0060 FE01      		movw r30,r28
  96 0062 3796      		adiw r30,7
  97               		0:
  98 0064 0190      		ld r0,Z+
  99 0066 0D92      		st X+,r0
 100 0068 8A95      		dec r24
 101 006a 01F4      		brne 0b
  47:../../../../tmk_core/common/action.c **** 
  48:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  49:../../../../tmk_core/common/action.c ****     action_tapping_process(record);
 102               		.loc 1 49 0
 103 006c 4981      		ldd r20,Y+1
 104 006e 5A81      		ldd r21,Y+2
 105 0070 6B81      		ldd r22,Y+3
 106 0072 7C81      		ldd r23,Y+4
 107 0074 8D81      		ldd r24,Y+5
 108 0076 9E81      		ldd r25,Y+6
 109 0078 0E94 0000 		call action_tapping_process
 110               	.LVL1:
 111               	/* epilogue start */
  50:../../../../tmk_core/common/action.c **** #else
  51:../../../../tmk_core/common/action.c ****     process_action(&record);
  52:../../../../tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  53:../../../../tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  54:../../../../tmk_core/common/action.c ****     }
  55:../../../../tmk_core/common/action.c **** #endif
  56:../../../../tmk_core/common/action.c **** }
 112               		.loc 1 56 0
 113 007c 2B96      		adiw r28,11
 114 007e 0FB6      		in __tmp_reg__,__SREG__
 115 0080 F894      		cli
 116 0082 DEBF      		out __SP_H__,r29
 117 0084 0FBE      		out __SREG__,__tmp_reg__
 118 0086 CDBF      		out __SP_L__,r28
 119 0088 DF91      		pop r29
 120 008a CF91      		pop r28
 121 008c 0895      		ret
 122               		.cfi_endproc
 123               	.LFE4:
 125               		.section	.text.register_code,"ax",@progbits
 126               	.global	register_code
 128               	register_code:
 129               	.LFB6:
  57:../../../../tmk_core/common/action.c **** 
  58:../../../../tmk_core/common/action.c **** void process_action(keyrecord_t *record)
  59:../../../../tmk_core/common/action.c **** {
  60:../../../../tmk_core/common/action.c ****     keyevent_t event = record->event;
  61:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  62:../../../../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
  63:../../../../tmk_core/common/action.c **** #endif
  64:../../../../tmk_core/common/action.c **** 
  65:../../../../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
  66:../../../../tmk_core/common/action.c **** 
  67:../../../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event.key);
  68:../../../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
  69:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
  70:../../../../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
  71:../../../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  72:../../../../tmk_core/common/action.c **** #endif
  73:../../../../tmk_core/common/action.c ****     dprintln();
  74:../../../../tmk_core/common/action.c **** 
  75:../../../../tmk_core/common/action.c ****     switch (action.kind.id) {
  76:../../../../tmk_core/common/action.c ****         /* Key and Mods */
  77:../../../../tmk_core/common/action.c ****         case ACT_LMODS:
  78:../../../../tmk_core/common/action.c ****         case ACT_RMODS:
  79:../../../../tmk_core/common/action.c ****             {
  80:../../../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  81:../../../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
  82:../../../../tmk_core/common/action.c ****                 if (event.pressed) {
  83:../../../../tmk_core/common/action.c ****                     if (mods) {
  84:../../../../tmk_core/common/action.c ****                         add_weak_mods(mods);
  85:../../../../tmk_core/common/action.c ****                         send_keyboard_report();
  86:../../../../tmk_core/common/action.c ****                     }
  87:../../../../tmk_core/common/action.c ****                     register_code(action.key.code);
  88:../../../../tmk_core/common/action.c ****                 } else {
  89:../../../../tmk_core/common/action.c ****                     unregister_code(action.key.code);
  90:../../../../tmk_core/common/action.c ****                     if (mods) {
  91:../../../../tmk_core/common/action.c ****                         del_weak_mods(mods);
  92:../../../../tmk_core/common/action.c ****                         send_keyboard_report();
  93:../../../../tmk_core/common/action.c ****                     }
  94:../../../../tmk_core/common/action.c ****                 }
  95:../../../../tmk_core/common/action.c ****             }
  96:../../../../tmk_core/common/action.c ****             break;
  97:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  98:../../../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
  99:../../../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 100:../../../../tmk_core/common/action.c ****             {
 101:../../../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 102:../../../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 103:../../../../tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 104:../../../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 105:../../../../tmk_core/common/action.c ****                     case MODS_ONESHOT:
 106:../../../../tmk_core/common/action.c ****                         // Oneshot modifier
 107:../../../../tmk_core/common/action.c ****                         if (event.pressed) {
 108:../../../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 109:../../../../tmk_core/common/action.c ****                                 register_mods(mods);
 110:../../../../tmk_core/common/action.c ****                             }
 111:../../../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 112:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 113:../../../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 114:../../../../tmk_core/common/action.c ****                             }
 115:../../../../tmk_core/common/action.c ****                             else {
 116:../../../../tmk_core/common/action.c ****                                 register_mods(mods);
 117:../../../../tmk_core/common/action.c ****                             }
 118:../../../../tmk_core/common/action.c ****                         } else {
 119:../../../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 120:../../../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 121:../../../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 122:../../../../tmk_core/common/action.c ****                             }
 123:../../../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 124:../../../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 125:../../../../tmk_core/common/action.c ****                             }
 126:../../../../tmk_core/common/action.c ****                             else {
 127:../../../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 128:../../../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 129:../../../../tmk_core/common/action.c ****                             }
 130:../../../../tmk_core/common/action.c ****                         }
 131:../../../../tmk_core/common/action.c ****                         break;
 132:../../../../tmk_core/common/action.c ****     #endif
 133:../../../../tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 134:../../../../tmk_core/common/action.c ****                         if (event.pressed) {
 135:../../../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 136:../../../../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 137:../../../../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods off\n");
 138:../../../../tmk_core/common/action.c ****                                     unregister_mods(mods);
 139:../../../../tmk_core/common/action.c ****                                 } else {
 140:../../../../tmk_core/common/action.c ****                                     dprint("MODS_TAP_TOGGLE: toggle mods on\n");
 141:../../../../tmk_core/common/action.c ****                                     register_mods(mods);
 142:../../../../tmk_core/common/action.c ****                                 }
 143:../../../../tmk_core/common/action.c ****                             }
 144:../../../../tmk_core/common/action.c ****                         } else {
 145:../../../../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 146:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP_TOGGLE: release : unregister_mods\n");
 147:../../../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 148:../../../../tmk_core/common/action.c ****                             }
 149:../../../../tmk_core/common/action.c ****                         }
 150:../../../../tmk_core/common/action.c ****                         break;
 151:../../../../tmk_core/common/action.c ****                     default:
 152:../../../../tmk_core/common/action.c ****                         if (event.pressed) {
 153:../../../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 154:../../../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 155:../../../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 156:../../../../tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 157:../../../../tmk_core/common/action.c ****                                     record->tap.count = 0;
 158:../../../../tmk_core/common/action.c ****                                     register_mods(mods);
 159:../../../../tmk_core/common/action.c ****                                 } else {
 160:../../../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 161:../../../../tmk_core/common/action.c ****                                     register_code(action.key.code);
 162:../../../../tmk_core/common/action.c ****                                 }
 163:../../../../tmk_core/common/action.c ****                             } else {
 164:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 165:../../../../tmk_core/common/action.c ****                                 register_mods(mods);
 166:../../../../tmk_core/common/action.c ****                             }
 167:../../../../tmk_core/common/action.c ****                         } else {
 168:../../../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 169:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 170:../../../../tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 171:../../../../tmk_core/common/action.c ****                             } else {
 172:../../../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 173:../../../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 174:../../../../tmk_core/common/action.c ****                             }
 175:../../../../tmk_core/common/action.c ****                         }
 176:../../../../tmk_core/common/action.c ****                         break;
 177:../../../../tmk_core/common/action.c ****                 }
 178:../../../../tmk_core/common/action.c ****             }
 179:../../../../tmk_core/common/action.c ****             break;
 180:../../../../tmk_core/common/action.c **** #endif
 181:../../../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 182:../../../../tmk_core/common/action.c ****         /* other HID usage */
 183:../../../../tmk_core/common/action.c ****         case ACT_USAGE:
 184:../../../../tmk_core/common/action.c ****             switch (action.usage.page) {
 185:../../../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 186:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 187:../../../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 188:../../../../tmk_core/common/action.c ****                     } else {
 189:../../../../tmk_core/common/action.c ****                         host_system_send(0);
 190:../../../../tmk_core/common/action.c ****                     }
 191:../../../../tmk_core/common/action.c ****                     break;
 192:../../../../tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 193:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 194:../../../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 195:../../../../tmk_core/common/action.c ****                     } else {
 196:../../../../tmk_core/common/action.c ****                         host_consumer_send(0);
 197:../../../../tmk_core/common/action.c ****                     }
 198:../../../../tmk_core/common/action.c ****                     break;
 199:../../../../tmk_core/common/action.c ****             }
 200:../../../../tmk_core/common/action.c ****             break;
 201:../../../../tmk_core/common/action.c **** #endif
 202:../../../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 203:../../../../tmk_core/common/action.c ****         /* Mouse key */
 204:../../../../tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 205:../../../../tmk_core/common/action.c ****             if (event.pressed) {
 206:../../../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 207:../../../../tmk_core/common/action.c ****                 mousekey_send();
 208:../../../../tmk_core/common/action.c ****             } else {
 209:../../../../tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 210:../../../../tmk_core/common/action.c ****                 mousekey_send();
 211:../../../../tmk_core/common/action.c ****             }
 212:../../../../tmk_core/common/action.c ****             break;
 213:../../../../tmk_core/common/action.c **** #endif
 214:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 215:../../../../tmk_core/common/action.c ****         case ACT_LAYER:
 216:../../../../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 217:../../../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 218:../../../../tmk_core/common/action.c ****                 if (!event.pressed) {
 219:../../../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 220:../../../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 221:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 222:../../../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 223:../../../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 224:../../../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 225:../../../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 226:../../../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 227:../../../../tmk_core/common/action.c ****                     }
 228:../../../../tmk_core/common/action.c ****                 }
 229:../../../../tmk_core/common/action.c ****             } else {
 230:../../../../tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 231:../../../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 232:../../../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 233:../../../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 234:../../../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 235:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 236:../../../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 237:../../../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 238:../../../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 239:../../../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 240:../../../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 241:../../../../tmk_core/common/action.c ****                     }
 242:../../../../tmk_core/common/action.c ****                 }
 243:../../../../tmk_core/common/action.c ****             }
 244:../../../../tmk_core/common/action.c ****             break;
 245:../../../../tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 246:../../../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 247:../../../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 248:../../../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 249:../../../../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 250:../../../../tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 251:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 252:../../../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 253:../../../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 254:../../../../tmk_core/common/action.c ****                     } else {
 255:../../../../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 256:../../../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 257:../../../../tmk_core/common/action.c ****                     }
 258:../../../../tmk_core/common/action.c ****                     break;
 259:../../../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 260:../../../../tmk_core/common/action.c ****                     /* tap toggle */
 261:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 262:../../../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 263:../../../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 264:../../../../tmk_core/common/action.c ****                         }
 265:../../../../tmk_core/common/action.c ****                     } else {
 266:../../../../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 267:../../../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 268:../../../../tmk_core/common/action.c ****                         }
 269:../../../../tmk_core/common/action.c ****                     }
 270:../../../../tmk_core/common/action.c ****                     break;
 271:../../../../tmk_core/common/action.c ****                 case OP_ON_OFF:
 272:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 273:../../../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 274:../../../../tmk_core/common/action.c ****                     break;
 275:../../../../tmk_core/common/action.c ****                 case OP_OFF_ON:
 276:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 277:../../../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 278:../../../../tmk_core/common/action.c ****                     break;
 279:../../../../tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 280:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 281:../../../../tmk_core/common/action.c ****                                     layer_clear();
 282:../../../../tmk_core/common/action.c ****                     break;
 283:../../../../tmk_core/common/action.c ****                 default:
 284:../../../../tmk_core/common/action.c ****                     /* tap key */
 285:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 286:../../../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 287:../../../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 288:../../../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 289:../../../../tmk_core/common/action.c ****                         } else {
 290:../../../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 291:../../../../tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 292:../../../../tmk_core/common/action.c ****                         }
 293:../../../../tmk_core/common/action.c ****                     } else {
 294:../../../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 295:../../../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 296:../../../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 297:../../../../tmk_core/common/action.c ****                         } else {
 298:../../../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 299:../../../../tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 300:../../../../tmk_core/common/action.c ****                         }
 301:../../../../tmk_core/common/action.c ****                     }
 302:../../../../tmk_core/common/action.c ****                     break;
 303:../../../../tmk_core/common/action.c ****             }
 304:../../../../tmk_core/common/action.c ****             break;
 305:../../../../tmk_core/common/action.c ****     #endif
 306:../../../../tmk_core/common/action.c **** #endif
 307:../../../../tmk_core/common/action.c ****         /* Extentions */
 308:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 309:../../../../tmk_core/common/action.c ****         case ACT_MACRO:
 310:../../../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 311:../../../../tmk_core/common/action.c ****             break;
 312:../../../../tmk_core/common/action.c **** #endif
 313:../../../../tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 314:../../../../tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 315:../../../../tmk_core/common/action.c ****             if (!event.pressed) {
 316:../../../../tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 317:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 318:../../../../tmk_core/common/action.c ****                         backlight_increase();
 319:../../../../tmk_core/common/action.c ****                         break;
 320:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 321:../../../../tmk_core/common/action.c ****                         backlight_decrease();
 322:../../../../tmk_core/common/action.c ****                         break;
 323:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 324:../../../../tmk_core/common/action.c ****                         backlight_toggle();
 325:../../../../tmk_core/common/action.c ****                         break;
 326:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 327:../../../../tmk_core/common/action.c ****                         backlight_step();
 328:../../../../tmk_core/common/action.c ****                         break;
 329:../../../../tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 330:../../../../tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 331:../../../../tmk_core/common/action.c ****                         break;
 332:../../../../tmk_core/common/action.c ****                 }
 333:../../../../tmk_core/common/action.c ****             }
 334:../../../../tmk_core/common/action.c ****             break;
 335:../../../../tmk_core/common/action.c **** #endif
 336:../../../../tmk_core/common/action.c ****         case ACT_COMMAND:
 337:../../../../tmk_core/common/action.c ****             break;
 338:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 339:../../../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 340:../../../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 341:../../../../tmk_core/common/action.c ****             break;
 342:../../../../tmk_core/common/action.c **** #endif
 343:../../../../tmk_core/common/action.c ****         default:
 344:../../../../tmk_core/common/action.c ****             break;
 345:../../../../tmk_core/common/action.c ****     }
 346:../../../../tmk_core/common/action.c **** }
 347:../../../../tmk_core/common/action.c **** 
 348:../../../../tmk_core/common/action.c **** 
 349:../../../../tmk_core/common/action.c **** 
 350:../../../../tmk_core/common/action.c **** 
 351:../../../../tmk_core/common/action.c **** /*
 352:../../../../tmk_core/common/action.c ****  * Utilities for actions.
 353:../../../../tmk_core/common/action.c ****  */
 354:../../../../tmk_core/common/action.c **** void register_code(uint8_t code)
 355:../../../../tmk_core/common/action.c **** {
 130               		.loc 1 355 0
 131               		.cfi_startproc
 132               	.LVL2:
 133 0000 CF93      		push r28
 134               	.LCFI4:
 135               		.cfi_def_cfa_offset 3
 136               		.cfi_offset 28, -2
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 1 */
 140               	.L__stack_usage = 1
 141 0002 C82F      		mov r28,r24
 356:../../../../tmk_core/common/action.c ****     if (code == KC_NO) {
 142               		.loc 1 356 0
 143 0004 8823      		tst r24
 144 0006 01F4      		brne .+2
 145 0008 00C0      		rjmp .L10
 357:../../../../tmk_core/common/action.c ****         return;
 358:../../../../tmk_core/common/action.c ****     }
 359:../../../../tmk_core/common/action.c **** 
 360:../../../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 361:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 362:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 363:../../../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 364:../../../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 365:../../../../tmk_core/common/action.c **** #endif
 366:../../../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 367:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 368:../../../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 369:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 370:../../../../tmk_core/common/action.c ****     }
 371:../../../../tmk_core/common/action.c **** 
 372:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 373:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 374:../../../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 375:../../../../tmk_core/common/action.c **** #endif
 376:../../../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 377:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 378:../../../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 379:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 380:../../../../tmk_core/common/action.c ****     }
 381:../../../../tmk_core/common/action.c **** 
 382:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 383:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 384:../../../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 385:../../../../tmk_core/common/action.c **** #endif
 386:../../../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 387:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 388:../../../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 389:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 390:../../../../tmk_core/common/action.c ****     }
 391:../../../../tmk_core/common/action.c **** #endif
 392:../../../../tmk_core/common/action.c **** 
 393:../../../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 146               		.loc 1 393 0
 147 000a 8450      		subi r24,lo8(-(-4))
 148               	.LVL3:
 149 000c 813A      		cpi r24,lo8(-95)
 150 000e 00F4      		brsh .L13
 394:../../../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 395:../../../../tmk_core/common/action.c ****         if (command_proc(code)) return;
 151               		.loc 1 395 0
 152 0010 8C2F      		mov r24,r28
 153 0012 0E94 0000 		call command_proc
 154               	.LVL4:
 155 0016 8111      		cpse r24,__zero_reg__
 156 0018 00C0      		rjmp .L10
 396:../../../../tmk_core/common/action.c **** 
 397:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 398:../../../../tmk_core/common/action.c **** /* TODO: remove
 399:../../../../tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 400:../../../../tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 401:../../../../tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 402:../../../../tmk_core/common/action.c **** 
 403:../../../../tmk_core/common/action.c ****             add_key(code);
 404:../../../../tmk_core/common/action.c ****             send_keyboard_report();
 405:../../../../tmk_core/common/action.c **** 
 406:../../../../tmk_core/common/action.c ****             set_mods(tmp_mods);
 407:../../../../tmk_core/common/action.c ****             send_keyboard_report();
 408:../../../../tmk_core/common/action.c ****             oneshot_cancel();
 409:../../../../tmk_core/common/action.c ****         } else 
 410:../../../../tmk_core/common/action.c **** */
 411:../../../../tmk_core/common/action.c **** #endif
 412:../../../../tmk_core/common/action.c ****         {
 413:../../../../tmk_core/common/action.c ****             add_key(code);
 157               		.loc 1 413 0
 158 001a 8C2F      		mov r24,r28
 159 001c 0E94 0000 		call add_key
 160               	.LVL5:
 161 0020 00C0      		rjmp .L42
 162               	.L13:
 414:../../../../tmk_core/common/action.c ****             send_keyboard_report();
 415:../../../../tmk_core/common/action.c ****         }
 416:../../../../tmk_core/common/action.c ****     }
 417:../../../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 163               		.loc 1 417 0
 164 0022 8C2F      		mov r24,r28
 165 0024 805E      		subi r24,lo8(-(32))
 166 0026 8830      		cpi r24,lo8(8)
 167 0028 00F4      		brsh .L15
 418:../../../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 168               		.loc 1 418 0
 169 002a C770      		andi r28,lo8(7)
 170               	.LVL6:
 171 002c 81E0      		ldi r24,lo8(1)
 172 002e 90E0      		ldi r25,0
 173               	.LVL7:
 174 0030 00C0      		rjmp 2f
 175               		1:
 176 0032 880F      		lsl r24
 177               		2:
 178 0034 CA95      		dec r28
 179 0036 02F4      		brpl 1b
 180 0038 0E94 0000 		call add_mods
 181               	.LVL8:
 182               	.L42:
 183               	/* epilogue start */
 419:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 420:../../../../tmk_core/common/action.c ****     }
 421:../../../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 422:../../../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 423:../../../../tmk_core/common/action.c ****     }
 424:../../../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 426:../../../../tmk_core/common/action.c ****     }
 427:../../../../tmk_core/common/action.c **** }
 184               		.loc 1 427 0
 185 003c CF91      		pop r28
 419:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 186               		.loc 1 419 0
 187 003e 0C94 0000 		jmp send_keyboard_report
 188               	.LVL9:
 189               	.L15:
 421:../../../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 190               		.loc 1 421 0
 191 0042 8C2F      		mov r24,r28
 192 0044 855A      		subi r24,lo8(-(91))
 193 0046 8330      		cpi r24,lo8(3)
 194 0048 00F4      		brsh .L16
 422:../../../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 195               		.loc 1 422 0
 196 004a C53A      		cpi r28,lo8(-91)
 197 004c 01F0      		breq .L19
 422:../../../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 198               		.loc 1 422 0 is_stmt 0 discriminator 1
 199 004e C63A      		cpi r28,lo8(-90)
 200 0050 01F4      		brne .L20
 422:../../../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 201               		.loc 1 422 0
 202 0052 82E8      		ldi r24,lo8(-126)
 203 0054 90E0      		ldi r25,0
 204 0056 00C0      		rjmp .L17
 205               	.L19:
 206 0058 81E8      		ldi r24,lo8(-127)
 207 005a 90E0      		ldi r25,0
 208 005c 00C0      		rjmp .L17
 209               	.L20:
 210 005e 83E8      		ldi r24,lo8(-125)
 211 0060 90E0      		ldi r25,0
 212               	.L17:
 213               	/* epilogue start */
 214               		.loc 1 427 0 is_stmt 1 discriminator 9
 215 0062 CF91      		pop r28
 216               	.LVL10:
 422:../../../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 217               		.loc 1 422 0 discriminator 9
 218 0064 0C94 0000 		jmp host_system_send
 219               	.LVL11:
 220               	.L16:
 424:../../../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 221               		.loc 1 424 0
 222 0068 8C2F      		mov r24,r28
 223 006a 885A      		subi r24,lo8(-(88))
 224 006c 8531      		cpi r24,lo8(21)
 225 006e 00F0      		brlo .+2
 226 0070 00C0      		rjmp .L10
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 227               		.loc 1 425 0
 228 0072 C83A      		cpi r28,lo8(-88)
 229 0074 01F0      		breq .L21
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 230               		.loc 1 425 0 is_stmt 0 discriminator 1
 231 0076 C93A      		cpi r28,lo8(-87)
 232 0078 01F0      		breq .L22
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 233               		.loc 1 425 0 discriminator 3
 234 007a CA3A      		cpi r28,lo8(-86)
 235 007c 01F0      		breq .L23
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 236               		.loc 1 425 0 discriminator 5
 237 007e CB3A      		cpi r28,lo8(-85)
 238 0080 01F0      		breq .L24
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 239               		.loc 1 425 0 discriminator 7
 240 0082 CC3A      		cpi r28,lo8(-84)
 241 0084 01F0      		breq .L25
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 242               		.loc 1 425 0 discriminator 9
 243 0086 CD3A      		cpi r28,lo8(-83)
 244 0088 01F0      		breq .L26
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 245               		.loc 1 425 0 discriminator 11
 246 008a CE3A      		cpi r28,lo8(-82)
 247 008c 01F0      		breq .L27
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 248               		.loc 1 425 0 discriminator 13
 249 008e CF3A      		cpi r28,lo8(-81)
 250 0090 01F0      		breq .L28
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 251               		.loc 1 425 0 discriminator 15
 252 0092 C13B      		cpi r28,lo8(-79)
 253 0094 01F0      		breq .L29
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 254               		.loc 1 425 0 discriminator 17
 255 0096 C03B      		cpi r28,lo8(-80)
 256 0098 01F0      		breq .L30
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 257               		.loc 1 425 0 discriminator 19
 258 009a C23B      		cpi r28,lo8(-78)
 259 009c 01F0      		breq .L31
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 260               		.loc 1 425 0 discriminator 21
 261 009e C33B      		cpi r28,lo8(-77)
 262 00a0 01F0      		breq .L32
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 263               		.loc 1 425 0 discriminator 23
 264 00a2 C43B      		cpi r28,lo8(-76)
 265 00a4 01F0      		breq .L33
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 266               		.loc 1 425 0 discriminator 25
 267 00a6 C53B      		cpi r28,lo8(-75)
 268 00a8 01F0      		breq .L34
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 269               		.loc 1 425 0 discriminator 27
 270 00aa C63B      		cpi r28,lo8(-74)
 271 00ac 01F0      		breq .L35
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 272               		.loc 1 425 0 discriminator 29
 273 00ae C73B      		cpi r28,lo8(-73)
 274 00b0 01F0      		breq .L36
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 275               		.loc 1 425 0 discriminator 31
 276 00b2 C83B      		cpi r28,lo8(-72)
 277 00b4 01F0      		breq .L37
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 278               		.loc 1 425 0 discriminator 33
 279 00b6 C93B      		cpi r28,lo8(-71)
 280 00b8 01F0      		breq .L38
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 281               		.loc 1 425 0 discriminator 35
 282 00ba CA3B      		cpi r28,lo8(-70)
 283 00bc 01F0      		breq .L39
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 284               		.loc 1 425 0 discriminator 37
 285 00be CB3B      		cpi r28,lo8(-69)
 286 00c0 01F0      		breq .L40
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 287               		.loc 1 425 0 discriminator 39
 288 00c2 CC3B      		cpi r28,lo8(-68)
 289 00c4 01F0      		breq .+2
 290 00c6 00C0      		rjmp .L41
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 291               		.loc 1 425 0
 292 00c8 8AE2      		ldi r24,lo8(42)
 293 00ca 92E0      		ldi r25,lo8(2)
 294 00cc 00C0      		rjmp .L18
 295               	.L21:
 296 00ce 82EE      		ldi r24,lo8(-30)
 297 00d0 90E0      		ldi r25,0
 298 00d2 00C0      		rjmp .L18
 299               	.L22:
 300 00d4 89EE      		ldi r24,lo8(-23)
 301 00d6 90E0      		ldi r25,0
 302 00d8 00C0      		rjmp .L18
 303               	.L23:
 304 00da 8AEE      		ldi r24,lo8(-22)
 305 00dc 90E0      		ldi r25,0
 306 00de 00C0      		rjmp .L18
 307               	.L24:
 308 00e0 85EB      		ldi r24,lo8(-75)
 309 00e2 90E0      		ldi r25,0
 310 00e4 00C0      		rjmp .L18
 311               	.L25:
 312 00e6 86EB      		ldi r24,lo8(-74)
 313 00e8 90E0      		ldi r25,0
 314 00ea 00C0      		rjmp .L18
 315               	.L26:
 316 00ec 83EB      		ldi r24,lo8(-77)
 317 00ee 90E0      		ldi r25,0
 318 00f0 00C0      		rjmp .L18
 319               	.L27:
 320 00f2 84EB      		ldi r24,lo8(-76)
 321 00f4 90E0      		ldi r25,0
 322 00f6 00C0      		rjmp .L18
 323               	.L28:
 324 00f8 87EB      		ldi r24,lo8(-73)
 325 00fa 90E0      		ldi r25,0
 326 00fc 00C0      		rjmp .L18
 327               	.L29:
 328 00fe 8CEC      		ldi r24,lo8(-52)
 329 0100 90E0      		ldi r25,0
 330 0102 00C0      		rjmp .L18
 331               	.L30:
 332 0104 8DEC      		ldi r24,lo8(-51)
 333 0106 90E0      		ldi r25,0
 334 0108 00C0      		rjmp .L18
 335               	.L31:
 336 010a 83E8      		ldi r24,lo8(-125)
 337 010c 91E0      		ldi r25,lo8(1)
 338 010e 00C0      		rjmp .L18
 339               	.L32:
 340 0110 8AE8      		ldi r24,lo8(-118)
 341 0112 91E0      		ldi r25,lo8(1)
 342 0114 00C0      		rjmp .L18
 343               	.L33:
 344 0116 82E9      		ldi r24,lo8(-110)
 345 0118 91E0      		ldi r25,lo8(1)
 346 011a 00C0      		rjmp .L18
 347               	.L34:
 348 011c 84E9      		ldi r24,lo8(-108)
 349 011e 91E0      		ldi r25,lo8(1)
 350 0120 00C0      		rjmp .L18
 351               	.L35:
 352 0122 81E2      		ldi r24,lo8(33)
 353 0124 92E0      		ldi r25,lo8(2)
 354 0126 00C0      		rjmp .L18
 355               	.L36:
 356 0128 83E2      		ldi r24,lo8(35)
 357 012a 92E0      		ldi r25,lo8(2)
 358 012c 00C0      		rjmp .L18
 359               	.L37:
 360 012e 84E2      		ldi r24,lo8(36)
 361 0130 92E0      		ldi r25,lo8(2)
 362 0132 00C0      		rjmp .L18
 363               	.L38:
 364 0134 85E2      		ldi r24,lo8(37)
 365 0136 92E0      		ldi r25,lo8(2)
 366 0138 00C0      		rjmp .L18
 367               	.L39:
 368 013a 86E2      		ldi r24,lo8(38)
 369 013c 92E0      		ldi r25,lo8(2)
 370 013e 00C0      		rjmp .L18
 371               	.L40:
 372 0140 87E2      		ldi r24,lo8(39)
 373 0142 92E0      		ldi r25,lo8(2)
 374 0144 00C0      		rjmp .L18
 375               	.L41:
 376 0146 80E0      		ldi r24,0
 377 0148 90E0      		ldi r25,0
 378               	.L18:
 379               	/* epilogue start */
 380               		.loc 1 427 0 is_stmt 1 discriminator 63
 381 014a CF91      		pop r28
 382               	.LVL12:
 425:../../../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 383               		.loc 1 425 0 discriminator 63
 384 014c 0C94 0000 		jmp host_consumer_send
 385               	.LVL13:
 386               	.L10:
 387               	/* epilogue start */
 388               		.loc 1 427 0
 389 0150 CF91      		pop r28
 390               	.LVL14:
 391 0152 0895      		ret
 392               		.cfi_endproc
 393               	.LFE6:
 395               		.section	.text.unregister_code,"ax",@progbits
 396               	.global	unregister_code
 398               	unregister_code:
 399               	.LFB7:
 428:../../../../tmk_core/common/action.c **** 
 429:../../../../tmk_core/common/action.c **** void unregister_code(uint8_t code)
 430:../../../../tmk_core/common/action.c **** {
 400               		.loc 1 430 0
 401               		.cfi_startproc
 402               	.LVL15:
 403               	/* prologue: function */
 404               	/* frame size = 0 */
 405               	/* stack size = 0 */
 406               	.L__stack_usage = 0
 431:../../../../tmk_core/common/action.c ****     if (code == KC_NO) {
 407               		.loc 1 431 0
 408 0000 8823      		tst r24
 409 0002 01F0      		breq .L43
 432:../../../../tmk_core/common/action.c ****         return;
 433:../../../../tmk_core/common/action.c ****     }
 434:../../../../tmk_core/common/action.c **** 
 435:../../../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 436:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 437:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 438:../../../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 439:../../../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 440:../../../../tmk_core/common/action.c **** #endif
 441:../../../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 442:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 443:../../../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 444:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 445:../../../../tmk_core/common/action.c ****     }
 446:../../../../tmk_core/common/action.c **** 
 447:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 448:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 449:../../../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 450:../../../../tmk_core/common/action.c **** #endif
 451:../../../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 452:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 453:../../../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 454:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 455:../../../../tmk_core/common/action.c ****     }
 456:../../../../tmk_core/common/action.c **** 
 457:../../../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 458:../../../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 459:../../../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 460:../../../../tmk_core/common/action.c **** #endif
 461:../../../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 462:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 463:../../../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 464:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 465:../../../../tmk_core/common/action.c ****     }
 466:../../../../tmk_core/common/action.c **** #endif
 467:../../../../tmk_core/common/action.c **** 
 468:../../../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 410               		.loc 1 468 0
 411 0004 982F      		mov r25,r24
 412 0006 9450      		subi r25,lo8(-(-4))
 413 0008 913A      		cpi r25,lo8(-95)
 414 000a 00F4      		brsh .L45
 469:../../../../tmk_core/common/action.c ****         del_key(code);
 415               		.loc 1 469 0
 416 000c 0E94 0000 		call del_key
 417               	.LVL16:
 418 0010 00C0      		rjmp .L51
 419               	.LVL17:
 420               	.L45:
 470:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 471:../../../../tmk_core/common/action.c ****     }
 472:../../../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 421               		.loc 1 472 0
 422 0012 982F      		mov r25,r24
 423 0014 905E      		subi r25,lo8(-(32))
 424 0016 9830      		cpi r25,lo8(8)
 425 0018 00F4      		brsh .L46
 473:../../../../tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 426               		.loc 1 473 0
 427 001a 282F      		mov r18,r24
 428 001c 2770      		andi r18,lo8(7)
 429 001e 81E0      		ldi r24,lo8(1)
 430 0020 90E0      		ldi r25,0
 431               	.LVL18:
 432 0022 00C0      		rjmp 2f
 433               		1:
 434 0024 880F      		lsl r24
 435               		2:
 436 0026 2A95      		dec r18
 437 0028 02F4      		brpl 1b
 438 002a 0E94 0000 		call del_mods
 439               	.LVL19:
 440               	.L51:
 474:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 441               		.loc 1 474 0
 442 002e 0C94 0000 		jmp send_keyboard_report
 443               	.LVL20:
 444               	.L46:
 475:../../../../tmk_core/common/action.c ****     }
 476:../../../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 445               		.loc 1 476 0
 446 0032 982F      		mov r25,r24
 447 0034 955A      		subi r25,lo8(-(91))
 448 0036 9330      		cpi r25,lo8(3)
 449 0038 00F4      		brsh .L47
 477:../../../../tmk_core/common/action.c ****         host_system_send(0);
 450               		.loc 1 477 0
 451 003a 80E0      		ldi r24,0
 452 003c 90E0      		ldi r25,0
 453               	.LVL21:
 454 003e 0C94 0000 		jmp host_system_send
 455               	.LVL22:
 456               	.L47:
 478:../../../../tmk_core/common/action.c ****     }
 479:../../../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 457               		.loc 1 479 0
 458 0042 885A      		subi r24,lo8(-(88))
 459               	.LVL23:
 460 0044 8531      		cpi r24,lo8(21)
 461 0046 00F4      		brsh .L43
 480:../../../../tmk_core/common/action.c ****         host_consumer_send(0);
 462               		.loc 1 480 0
 463 0048 80E0      		ldi r24,0
 464 004a 90E0      		ldi r25,0
 465 004c 0C94 0000 		jmp host_consumer_send
 466               	.LVL24:
 467               	.L43:
 468 0050 0895      		ret
 469               		.cfi_endproc
 470               	.LFE7:
 472               		.section	.text.register_mods,"ax",@progbits
 473               	.global	register_mods
 475               	register_mods:
 476               	.LFB8:
 481:../../../../tmk_core/common/action.c ****     }
 482:../../../../tmk_core/common/action.c **** }
 483:../../../../tmk_core/common/action.c **** 
 484:../../../../tmk_core/common/action.c **** void register_mods(uint8_t mods)
 485:../../../../tmk_core/common/action.c **** {
 477               		.loc 1 485 0
 478               		.cfi_startproc
 479               	.LVL25:
 480               	/* prologue: function */
 481               	/* frame size = 0 */
 482               	/* stack size = 0 */
 483               	.L__stack_usage = 0
 486:../../../../tmk_core/common/action.c ****     if (mods) {
 484               		.loc 1 486 0
 485 0000 8823      		tst r24
 486 0002 01F0      		breq .L52
 487:../../../../tmk_core/common/action.c ****         add_mods(mods);
 487               		.loc 1 487 0
 488 0004 0E94 0000 		call add_mods
 489               	.LVL26:
 488:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 490               		.loc 1 488 0
 491 0008 0C94 0000 		jmp send_keyboard_report
 492               	.LVL27:
 493               	.L52:
 494 000c 0895      		ret
 495               		.cfi_endproc
 496               	.LFE8:
 498               		.section	.text.unregister_mods,"ax",@progbits
 499               	.global	unregister_mods
 501               	unregister_mods:
 502               	.LFB9:
 489:../../../../tmk_core/common/action.c ****     }
 490:../../../../tmk_core/common/action.c **** }
 491:../../../../tmk_core/common/action.c **** 
 492:../../../../tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 493:../../../../tmk_core/common/action.c **** {
 503               		.loc 1 493 0
 504               		.cfi_startproc
 505               	.LVL28:
 506               	/* prologue: function */
 507               	/* frame size = 0 */
 508               	/* stack size = 0 */
 509               	.L__stack_usage = 0
 494:../../../../tmk_core/common/action.c ****     if (mods) {
 510               		.loc 1 494 0
 511 0000 8823      		tst r24
 512 0002 01F0      		breq .L54
 495:../../../../tmk_core/common/action.c ****         del_mods(mods);
 513               		.loc 1 495 0
 514 0004 0E94 0000 		call del_mods
 515               	.LVL29:
 496:../../../../tmk_core/common/action.c ****         send_keyboard_report();
 516               		.loc 1 496 0
 517 0008 0C94 0000 		jmp send_keyboard_report
 518               	.LVL30:
 519               	.L54:
 520 000c 0895      		ret
 521               		.cfi_endproc
 522               	.LFE9:
 524               		.section	.text.process_action,"ax",@progbits
 525               	.global	process_action
 527               	process_action:
 528               	.LFB5:
  59:../../../../tmk_core/common/action.c **** {
 529               		.loc 1 59 0
 530               		.cfi_startproc
 531               	.LVL31:
 532 0000 8F92      		push r8
 533               	.LCFI5:
 534               		.cfi_def_cfa_offset 3
 535               		.cfi_offset 8, -2
 536 0002 9F92      		push r9
 537               	.LCFI6:
 538               		.cfi_def_cfa_offset 4
 539               		.cfi_offset 9, -3
 540 0004 AF92      		push r10
 541               	.LCFI7:
 542               		.cfi_def_cfa_offset 5
 543               		.cfi_offset 10, -4
 544 0006 BF92      		push r11
 545               	.LCFI8:
 546               		.cfi_def_cfa_offset 6
 547               		.cfi_offset 11, -5
 548 0008 0F93      		push r16
 549               	.LCFI9:
 550               		.cfi_def_cfa_offset 7
 551               		.cfi_offset 16, -6
 552 000a 1F93      		push r17
 553               	.LCFI10:
 554               		.cfi_def_cfa_offset 8
 555               		.cfi_offset 17, -7
 556 000c CF93      		push r28
 557               	.LCFI11:
 558               		.cfi_def_cfa_offset 9
 559               		.cfi_offset 28, -8
 560 000e DF93      		push r29
 561               	.LCFI12:
 562               		.cfi_def_cfa_offset 10
 563               		.cfi_offset 29, -9
 564 0010 CDB7      		in r28,__SP_L__
 565 0012 DEB7      		in r29,__SP_H__
 566               	.LCFI13:
 567               		.cfi_def_cfa_register 28
 568 0014 2797      		sbiw r28,7
 569               	.LCFI14:
 570               		.cfi_def_cfa_offset 17
 571 0016 0FB6      		in __tmp_reg__,__SREG__
 572 0018 F894      		cli
 573 001a DEBF      		out __SP_H__,r29
 574 001c 0FBE      		out __SREG__,__tmp_reg__
 575 001e CDBF      		out __SP_L__,r28
 576               	/* prologue: function */
 577               	/* frame size = 7 */
 578               	/* stack size = 15 */
 579               	.L__stack_usage = 15
 580 0020 5C01      		movw r10,r24
  60:../../../../tmk_core/common/action.c ****     keyevent_t event = record->event;
 581               		.loc 1 60 0
 582 0022 85E0      		ldi r24,lo8(5)
 583               	.LVL32:
 584 0024 F501      		movw r30,r10
 585 0026 DE01      		movw r26,r28
 586 0028 1196      		adiw r26,1
 587               		0:
 588 002a 0190      		ld r0,Z+
 589 002c 0D92      		st X+,r0
 590 002e 8A95      		dec r24
 591 0030 01F4      		brne 0b
 592 0032 F501      		movw r30,r10
 593 0034 3081      		ld r19,Z
 594 0036 2181      		ldd r18,Z+1
 595 0038 1281      		ldd r17,Z+2
  62:../../../../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 596               		.loc 1 62 0
 597 003a 0581      		ldd r16,Z+5
 598 003c 0295      		swap r16
 599 003e 0F70      		andi r16,lo8(15)
 600               	.LVL33:
 601               	.LBB12:
 602               	.LBB13:
 603               		.loc 2 49 0
 604 0040 8381      		ldd r24,Z+3
 605 0042 9481      		ldd r25,Z+4
 606 0044 892B      		or r24,r25
 607 0046 01F0      		breq .L125
 608 0048 2F3F      		cpi r18,lo8(-1)
 609 004a 01F4      		brne .L126
 610 004c 81E0      		ldi r24,lo8(1)
 611 004e 90E0      		ldi r25,0
 612 0050 3F3F      		cpi r19,lo8(-1)
 613 0052 01F0      		breq .L57
 614 0054 00C0      		rjmp .L126
 615               	.L125:
 616 0056 81E0      		ldi r24,lo8(1)
 617 0058 90E0      		ldi r25,0
 618 005a 00C0      		rjmp .L57
 619               	.L126:
 620 005c 80E0      		ldi r24,0
 621 005e 90E0      		ldi r25,0
 622               	.L57:
 623               	.LBE13:
 624               	.LBE12:
  65:../../../../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
 625               		.loc 1 65 0
 626 0060 80FD      		sbrc r24,0
 627 0062 00C0      		rjmp .L56
  67:../../../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event.key);
 628               		.loc 1 67 0
 629 0064 3983      		std Y+1,r19
 630 0066 2A83      		std Y+2,r18
 631 0068 8981      		ldd r24,Y+1
 632 006a 9A81      		ldd r25,Y+2
 633 006c 0E94 0000 		call layer_switch_get_action
 634               	.LVL34:
  70:../../../../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 635               		.loc 1 70 0
 636 0070 9E83      		std Y+6,r25
 637 0072 8F83      		std Y+7,r24
 638 0074 0E94 0000 		call layer_debug
 639               	.LVL35:
  71:../../../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 640               		.loc 1 71 0
 641 0078 0E94 0000 		call default_layer_debug
 642               	.LVL36:
  75:../../../../tmk_core/common/action.c ****     switch (action.kind.id) {
 643               		.loc 1 75 0
 644 007c 4E81      		ldd r20,Y+6
 645 007e 242F      		mov r18,r20
 646               	.LVL37:
 647 0080 2295      		swap r18
 648 0082 2F70      		andi r18,lo8(15)
 649 0084 30E0      		ldi r19,0
 650 0086 6F81      		ldd r22,Y+7
 651 0088 2530      		cpi r18,5
 652 008a 3105      		cpc r19,__zero_reg__
 653 008c 01F4      		brne .+2
 654 008e 00C0      		rjmp .L64
 655 0090 04F4      		brge .L69
 656 0092 2430      		cpi r18,4
 657 0094 3105      		cpc r19,__zero_reg__
 658 0096 04F0      		brlt .+2
 659 0098 00C0      		rjmp .L63
 660 009a 842F      		mov r24,r20
 661 009c 807F      		andi r24,lo8(-16)
 662 009e 942F      		mov r25,r20
 663 00a0 9F70      		andi r25,lo8(15)
 664 00a2 2230      		cpi r18,2
 665 00a4 3105      		cpc r19,__zero_reg__
 666 00a6 04F0      		brlt .+2
 667 00a8 00C0      		rjmp .L62
 668 00aa 00C0      		rjmp .L150
 669               	.L69:
 670 00ac 2C30      		cpi r18,12
 671 00ae 3105      		cpc r19,__zero_reg__
 672 00b0 04F4      		brge .L70
 673 00b2 2A30      		cpi r18,10
 674 00b4 3105      		cpc r19,__zero_reg__
 675 00b6 04F0      		brlt .+2
 676 00b8 00C0      		rjmp .L66
 677 00ba 2830      		cpi r18,8
 678 00bc 3105      		cpc r19,__zero_reg__
 679 00be 01F0      		breq .+2
 680 00c0 00C0      		rjmp .L56
 681 00c2 00C0      		rjmp .L65
 682               	.L70:
 683 00c4 2C30      		cpi r18,12
 684 00c6 3105      		cpc r19,__zero_reg__
 685 00c8 01F4      		brne .+2
 686 00ca 00C0      		rjmp .L67
 687 00cc 2F30      		cpi r18,15
 688 00ce 3105      		cpc r19,__zero_reg__
 689 00d0 01F0      		breq .+2
 690 00d2 00C0      		rjmp .L56
 691 00d4 00C0      		rjmp .L68
 692               	.L150:
 693               	.LBB14:
  80:../../../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 694               		.loc 1 80 0
 695 00d6 992E      		mov r9,r25
 696 00d8 8111      		cpse r24,__zero_reg__
 697 00da 00C0      		rjmp .L71
 698 00dc 00C0      		rjmp .L72
 699               	.L71:
  80:../../../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 700               		.loc 1 80 0 is_stmt 0 discriminator 2
 701 00de 9294      		swap r9
 702 00e0 90EF      		ldi r25,lo8(-16)
 703 00e2 9922      		and r9,r25
 704               	.L72:
 705               	.LVL38:
  82:../../../../tmk_core/common/action.c ****                 if (event.pressed) {
 706               		.loc 1 82 0 is_stmt 1 discriminator 3
 707 00e4 1123      		tst r17
 708 00e6 01F0      		breq .L73
  83:../../../../tmk_core/common/action.c ****                     if (mods) {
 709               		.loc 1 83 0
 710 00e8 9920      		tst r9
 711 00ea 01F4      		brne .+2
 712 00ec 00C0      		rjmp .L157
  84:../../../../tmk_core/common/action.c ****                         add_weak_mods(mods);
 713               		.loc 1 84 0
 714 00ee 892D      		mov r24,r9
 715 00f0 6F83      		std Y+7,r22
 716 00f2 0E94 0000 		call add_weak_mods
 717               	.LVL39:
  85:../../../../tmk_core/common/action.c ****                         send_keyboard_report();
 718               		.loc 1 85 0
 719 00f6 0E94 0000 		call send_keyboard_report
 720               	.LVL40:
 721 00fa 6F81      		ldd r22,Y+7
 722 00fc 00C0      		rjmp .L157
 723               	.L73:
 724               	.LVL41:
  89:../../../../tmk_core/common/action.c ****                     unregister_code(action.key.code);
 725               		.loc 1 89 0
 726 00fe 862F      		mov r24,r22
 727 0100 0E94 0000 		call unregister_code
 728               	.LVL42:
  90:../../../../tmk_core/common/action.c ****                     if (mods) {
 729               		.loc 1 90 0
 730 0104 9920      		tst r9
 731 0106 01F4      		brne .+2
 732 0108 00C0      		rjmp .L56
  91:../../../../tmk_core/common/action.c ****                         del_weak_mods(mods);
 733               		.loc 1 91 0
 734 010a 892D      		mov r24,r9
 735 010c 0E94 0000 		call del_weak_mods
 736               	.LVL43:
 737               	/* epilogue start */
 738               	.LBE14:
 346:../../../../tmk_core/common/action.c **** }
 739               		.loc 1 346 0
 740 0110 2796      		adiw r28,7
 741 0112 0FB6      		in __tmp_reg__,__SREG__
 742 0114 F894      		cli
 743 0116 DEBF      		out __SP_H__,r29
 744 0118 0FBE      		out __SREG__,__tmp_reg__
 745 011a CDBF      		out __SP_L__,r28
 746 011c DF91      		pop r29
 747 011e CF91      		pop r28
 748 0120 1F91      		pop r17
 749 0122 0F91      		pop r16
 750               	.LVL44:
 751 0124 BF90      		pop r11
 752 0126 AF90      		pop r10
 753               	.LVL45:
 754 0128 9F90      		pop r9
 755               	.LVL46:
 756 012a 8F90      		pop r8
 757               	.LBB15:
  92:../../../../tmk_core/common/action.c ****                         send_keyboard_report();
 758               		.loc 1 92 0
 759 012c 0C94 0000 		jmp send_keyboard_report
 760               	.LVL47:
 761               	.L62:
 762               	.LBE15:
 763               	.LBB16:
 101:../../../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 764               		.loc 1 101 0
 765 0130 992E      		mov r9,r25
 766 0132 8032      		cpi r24,lo8(32)
 767 0134 01F4      		brne .L76
 768 0136 00C0      		rjmp .L77
 769               	.L76:
 101:../../../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 770               		.loc 1 101 0 is_stmt 0 discriminator 2
 771 0138 9294      		swap r9
 772 013a 80EF      		ldi r24,lo8(-16)
 773 013c 9822      		and r9,r24
 774               	.L77:
 775               	.LVL48:
 103:../../../../tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 776               		.loc 1 103 0 is_stmt 1 discriminator 3
 777 013e 6623      		tst r22
 778               	.LVL49:
 779 0140 01F0      		breq .L79
 780 0142 6130      		cpi r22,lo8(1)
 781 0144 01F0      		breq .+2
 782 0146 00C0      		rjmp .L151
 783 0148 00C0      		rjmp .L80
 784               	.L79:
 107:../../../../tmk_core/common/action.c ****                         if (event.pressed) {
 785               		.loc 1 107 0
 786 014a 1123      		tst r17
 787 014c 01F0      		breq .L81
 109:../../../../tmk_core/common/action.c ****                                 register_mods(mods);
 788               		.loc 1 109 0
 789 014e 892D      		mov r24,r9
 108:../../../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 790               		.loc 1 108 0
 791 0150 0111      		cpse r16,__zero_reg__
 792 0152 00C0      		rjmp .L82
 793 0154 00C0      		rjmp .L153
 794               	.L82:
 111:../../../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 795               		.loc 1 111 0
 796 0156 0130      		cpi r16,lo8(1)
 797 0158 01F4      		brne .L153
 798               	/* epilogue start */
 799               	.LBE16:
 346:../../../../tmk_core/common/action.c **** }
 800               		.loc 1 346 0
 801 015a 2796      		adiw r28,7
 802 015c 0FB6      		in __tmp_reg__,__SREG__
 803 015e F894      		cli
 804 0160 DEBF      		out __SP_H__,r29
 805 0162 0FBE      		out __SREG__,__tmp_reg__
 806 0164 CDBF      		out __SP_L__,r28
 807 0166 DF91      		pop r29
 808 0168 CF91      		pop r28
 809 016a 1F91      		pop r17
 810 016c 0F91      		pop r16
 811               	.LVL50:
 812 016e BF90      		pop r11
 813 0170 AF90      		pop r10
 814               	.LVL51:
 815 0172 9F90      		pop r9
 816               	.LVL52:
 817 0174 8F90      		pop r8
 818               	.LBB17:
 113:../../../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 819               		.loc 1 113 0
 820 0176 0C94 0000 		jmp set_oneshot_mods
 821               	.LVL53:
 822               	.L81:
 119:../../../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 823               		.loc 1 119 0
 824 017a 0111      		cpse r16,__zero_reg__
 825 017c 00C0      		rjmp .L84
 826 017e 00C0      		rjmp .L154
 827               	.L84:
 123:../../../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 828               		.loc 1 123 0
 829 0180 0130      		cpi r16,lo8(1)
 830 0182 01F4      		brne .+2
 831 0184 00C0      		rjmp .L56
 832               	.L154:
 127:../../../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 833               		.loc 1 127 0
 834 0186 0E94 0000 		call clear_oneshot_mods
 835               	.LVL54:
 836 018a 00C0      		rjmp .L91
 837               	.LVL55:
 838               	.L80:
 134:../../../../tmk_core/common/action.c ****                         if (event.pressed) {
 839               		.loc 1 134 0
 840 018c 1123      		tst r17
 841 018e 01F0      		breq .L86
 135:../../../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 842               		.loc 1 135 0
 843 0190 0630      		cpi r16,lo8(6)
 844 0192 00F0      		brlo .+2
 845 0194 00C0      		rjmp .L56
 136:../../../../tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 846               		.loc 1 136 0
 847 0196 0E94 0000 		call get_mods
 848               	.LVL56:
 849 019a 8921      		and r24,r9
 850 019c 01F0      		breq .L87
 851 019e 00C0      		rjmp .L91
 852               	.LVL57:
 853               	.L87:
 141:../../../../tmk_core/common/action.c ****                                     register_mods(mods);
 854               		.loc 1 141 0
 855 01a0 892D      		mov r24,r9
 856               	.LVL58:
 857               	.L153:
 858               	/* epilogue start */
 859               	.LBE17:
 346:../../../../tmk_core/common/action.c **** }
 860               		.loc 1 346 0
 861 01a2 2796      		adiw r28,7
 862 01a4 0FB6      		in __tmp_reg__,__SREG__
 863 01a6 F894      		cli
 864 01a8 DEBF      		out __SP_H__,r29
 865 01aa 0FBE      		out __SREG__,__tmp_reg__
 866 01ac CDBF      		out __SP_L__,r28
 867 01ae DF91      		pop r29
 868 01b0 CF91      		pop r28
 869 01b2 1F91      		pop r17
 870 01b4 0F91      		pop r16
 871 01b6 BF90      		pop r11
 872 01b8 AF90      		pop r10
 873               	.LVL59:
 874 01ba 9F90      		pop r9
 875 01bc 8F90      		pop r8
 876               	.LBB18:
 141:../../../../tmk_core/common/action.c ****                                     register_mods(mods);
 877               		.loc 1 141 0
 878 01be 0C94 0000 		jmp register_mods
 879               	.LVL60:
 880               	.L86:
 145:../../../../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 881               		.loc 1 145 0
 882 01c2 0530      		cpi r16,lo8(5)
 883 01c4 00F0      		brlo .+2
 884 01c6 00C0      		rjmp .L56
 885 01c8 00C0      		rjmp .L91
 886               	.L151:
 152:../../../../tmk_core/common/action.c ****                         if (event.pressed) {
 887               		.loc 1 152 0
 888 01ca 1123      		tst r17
 889 01cc 01F0      		breq .L88
 153:../../../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 890               		.loc 1 153 0
 891 01ce 0023      		tst r16
 892 01d0 01F0      		breq .L87
 154:../../../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 893               		.loc 1 154 0
 894 01d2 F501      		movw r30,r10
 895 01d4 8581      		ldd r24,Z+5
 896 01d6 80FF      		sbrs r24,0
 897 01d8 00C0      		rjmp .L157
 157:../../../../tmk_core/common/action.c ****                                     record->tap.count = 0;
 898               		.loc 1 157 0
 899 01da 8F70      		andi r24,lo8(15)
 900 01dc 8583      		std Z+5,r24
 901 01de 00C0      		rjmp .L87
 902               	.L88:
 168:../../../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 903               		.loc 1 168 0
 904 01e0 0111      		cpse r16,__zero_reg__
 905 01e2 00C0      		rjmp .L158
 906               	.L91:
 173:../../../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 907               		.loc 1 173 0
 908 01e4 892D      		mov r24,r9
 909 01e6 00C0      		rjmp .L159
 910               	.LVL61:
 911               	.L63:
 912               	.LBE18:
 184:../../../../tmk_core/common/action.c ****             switch (action.usage.page) {
 913               		.loc 1 184 0
 914 01e8 242F      		mov r18,r20
 915 01ea 2695      		lsr r18
 916 01ec 2695      		lsr r18
 917 01ee 2370      		andi r18,lo8(3)
 918 01f0 30E0      		ldi r19,0
 919 01f2 2115      		cp r18,__zero_reg__
 920 01f4 3105      		cpc r19,__zero_reg__
 921 01f6 01F0      		breq .L92
 922 01f8 2130      		cpi r18,1
 923 01fa 3105      		cpc r19,__zero_reg__
 924 01fc 01F0      		breq .+2
 925 01fe 00C0      		rjmp .L56
 926 0200 00C0      		rjmp .L93
 927               	.L92:
 186:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 928               		.loc 1 186 0
 929 0202 1123      		tst r17
 930 0204 01F0      		breq .L94
 931               	.LVL62:
 187:../../../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 932               		.loc 1 187 0
 933 0206 862F      		mov r24,r22
 934 0208 942F      		mov r25,r20
 935 020a 9370      		andi r25,lo8(3)
 936 020c 00C0      		rjmp .L160
 937               	.LVL63:
 938               	.L94:
 189:../../../../tmk_core/common/action.c ****                         host_system_send(0);
 939               		.loc 1 189 0
 940 020e 80E0      		ldi r24,0
 941 0210 90E0      		ldi r25,0
 942               	.LVL64:
 943               	.L160:
 944               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 945               		.loc 1 346 0
 946 0212 2796      		adiw r28,7
 947 0214 0FB6      		in __tmp_reg__,__SREG__
 948 0216 F894      		cli
 949 0218 DEBF      		out __SP_H__,r29
 950 021a 0FBE      		out __SREG__,__tmp_reg__
 951 021c CDBF      		out __SP_L__,r28
 952 021e DF91      		pop r29
 953 0220 CF91      		pop r28
 954 0222 1F91      		pop r17
 955 0224 0F91      		pop r16
 956               	.LVL65:
 957 0226 BF90      		pop r11
 958 0228 AF90      		pop r10
 959               	.LVL66:
 960 022a 9F90      		pop r9
 961 022c 8F90      		pop r8
 189:../../../../tmk_core/common/action.c ****                         host_system_send(0);
 962               		.loc 1 189 0
 963 022e 0C94 0000 		jmp host_system_send
 964               	.LVL67:
 965               	.L93:
 193:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 966               		.loc 1 193 0
 967 0232 1123      		tst r17
 968 0234 01F0      		breq .L95
 969               	.LVL68:
 194:../../../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 970               		.loc 1 194 0
 971 0236 862F      		mov r24,r22
 972 0238 942F      		mov r25,r20
 973 023a 9370      		andi r25,lo8(3)
 974 023c 00C0      		rjmp .L162
 975               	.LVL69:
 976               	.L95:
 196:../../../../tmk_core/common/action.c ****                         host_consumer_send(0);
 977               		.loc 1 196 0
 978 023e 80E0      		ldi r24,0
 979 0240 90E0      		ldi r25,0
 980               	.LVL70:
 981               	.L162:
 982               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 983               		.loc 1 346 0
 984 0242 2796      		adiw r28,7
 985 0244 0FB6      		in __tmp_reg__,__SREG__
 986 0246 F894      		cli
 987 0248 DEBF      		out __SP_H__,r29
 988 024a 0FBE      		out __SREG__,__tmp_reg__
 989 024c CDBF      		out __SP_L__,r28
 990 024e DF91      		pop r29
 991 0250 CF91      		pop r28
 992 0252 1F91      		pop r17
 993 0254 0F91      		pop r16
 994               	.LVL71:
 995 0256 BF90      		pop r11
 996 0258 AF90      		pop r10
 997               	.LVL72:
 998 025a 9F90      		pop r9
 999 025c 8F90      		pop r8
 196:../../../../tmk_core/common/action.c ****                         host_consumer_send(0);
 1000               		.loc 1 196 0
 1001 025e 0C94 0000 		jmp host_consumer_send
 1002               	.LVL73:
 1003               	.L64:
 206:../../../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1004               		.loc 1 206 0
 1005 0262 862F      		mov r24,r22
 205:../../../../tmk_core/common/action.c ****             if (event.pressed) {
 1006               		.loc 1 205 0
 1007 0264 1123      		tst r17
 1008 0266 01F0      		breq .L96
 206:../../../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1009               		.loc 1 206 0
 1010 0268 0E94 0000 		call mousekey_on
 1011               	.LVL74:
 1012 026c 00C0      		rjmp .L163
 1013               	.LVL75:
 1014               	.L96:
 209:../../../../tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 1015               		.loc 1 209 0
 1016 026e 0E94 0000 		call mousekey_off
 1017               	.LVL76:
 1018               	.L163:
 1019               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1020               		.loc 1 346 0
 1021 0272 2796      		adiw r28,7
 1022 0274 0FB6      		in __tmp_reg__,__SREG__
 1023 0276 F894      		cli
 1024 0278 DEBF      		out __SP_H__,r29
 1025 027a 0FBE      		out __SREG__,__tmp_reg__
 1026 027c CDBF      		out __SP_L__,r28
 1027 027e DF91      		pop r29
 1028 0280 CF91      		pop r28
 1029 0282 1F91      		pop r17
 1030 0284 0F91      		pop r16
 1031               	.LVL77:
 1032 0286 BF90      		pop r11
 1033 0288 AF90      		pop r10
 1034               	.LVL78:
 1035 028a 9F90      		pop r9
 1036 028c 8F90      		pop r8
 210:../../../../tmk_core/common/action.c ****                 mousekey_send();
 1037               		.loc 1 210 0
 1038 028e 0C94 0000 		jmp mousekey_send
 1039               	.LVL79:
 1040               	.L65:
 216:../../../../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 1041               		.loc 1 216 0
 1042 0292 842F      		mov r24,r20
 1043 0294 8370      		andi r24,lo8(3)
 1044 0296 01F0      		breq .+2
 1045 0298 00C0      		rjmp .L97
 218:../../../../tmk_core/common/action.c ****                 if (!event.pressed) {
 1046               		.loc 1 218 0
 1047 029a 1111      		cpse r17,__zero_reg__
 1048 029c 00C0      		rjmp .L56
 1049               	.LVL80:
 1050               	.LBB19:
 219:../../../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1051               		.loc 1 219 0
 1052 029e 262F      		mov r18,r22
 1053 02a0 2295      		swap r18
 1054 02a2 2695      		lsr r18
 1055 02a4 2770      		andi r18,lo8(7)
 1056 02a6 220F      		lsl r18
 1057 02a8 220F      		lsl r18
 220:../../../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1058               		.loc 1 220 0
 1059 02aa 862F      		mov r24,r22
 1060 02ac 8F70      		andi r24,lo8(15)
 1061 02ae 882E      		mov r8,r24
 1062 02b0 912C      		mov r9,__zero_reg__
 1063 02b2 A12C      		mov r10,__zero_reg__
 1064 02b4 B12C      		mov r11,__zero_reg__
 1065               	.LVL81:
 1066 02b6 022E      		mov r0,r18
 1067 02b8 00C0      		rjmp 2f
 1068               		1:
 1069 02ba 880C      		lsl r8
 1070 02bc 991C      		rol r9
 1071 02be AA1C      		rol r10
 1072 02c0 BB1C      		rol r11
 1073               		2:
 1074 02c2 0A94      		dec r0
 1075 02c4 02F4      		brpl 1b
 1076               	.LVL82:
 221:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1077               		.loc 1 221 0
 1078 02c6 64FF      		sbrs r22,4
 1079 02c8 00C0      		rjmp .L127
 221:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1080               		.loc 1 221 0 is_stmt 0 discriminator 1
 1081 02ca 6FE0      		ldi r22,lo8(15)
 1082 02cc 70E0      		ldi r23,0
 1083 02ce 80E0      		ldi r24,0
 1084 02d0 90E0      		ldi r25,0
 1085               	.LVL83:
 1086 02d2 00C0      		rjmp 2f
 1087               		1:
 1088 02d4 660F      		lsl r22
 1089 02d6 771F      		rol r23
 1090 02d8 881F      		rol r24
 1091 02da 991F      		rol r25
 1092               		2:
 1093 02dc 2A95      		dec r18
 1094 02de 02F4      		brpl 1b
 1095 02e0 6095      		com r22
 1096 02e2 7095      		com r23
 1097 02e4 8095      		com r24
 1098 02e6 9095      		com r25
 1099 02e8 00C0      		rjmp .L98
 1100               	.LVL84:
 1101               	.L127:
 221:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1102               		.loc 1 221 0
 1103 02ea 60E0      		ldi r22,0
 1104 02ec 70E0      		ldi r23,0
 1105 02ee CB01      		movw r24,r22
 1106               	.LVL85:
 1107               	.L98:
 222:../../../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1108               		.loc 1 222 0 is_stmt 1 discriminator 3
 1109 02f0 242F      		mov r18,r20
 1110 02f2 2695      		lsr r18
 1111 02f4 2695      		lsr r18
 1112 02f6 2370      		andi r18,lo8(3)
 1113 02f8 422F      		mov r20,r18
 1114               	.LVL86:
 1115 02fa 50E0      		ldi r21,0
 1116 02fc 4230      		cpi r20,2
 1117 02fe 5105      		cpc r21,__zero_reg__
 1118 0300 01F0      		breq .L101
 1119 0302 4330      		cpi r20,3
 1120 0304 5105      		cpc r21,__zero_reg__
 1121 0306 01F0      		breq .L102
 1122 0308 6829      		or r22,r8
 1123 030a 7929      		or r23,r9
 1124 030c 8A29      		or r24,r10
 1125 030e 9B29      		or r25,r11
 1126               	.LVL87:
 1127 0310 4130      		cpi r20,1
 1128 0312 5105      		cpc r21,__zero_reg__
 1129 0314 01F0      		breq .L164
 1130               	/* epilogue start */
 1131               	.LBE19:
 346:../../../../tmk_core/common/action.c **** }
 1132               		.loc 1 346 0
 1133 0316 2796      		adiw r28,7
 1134               	.LVL88:
 1135 0318 0FB6      		in __tmp_reg__,__SREG__
 1136 031a F894      		cli
 1137 031c DEBF      		out __SP_H__,r29
 1138 031e 0FBE      		out __SREG__,__tmp_reg__
 1139 0320 CDBF      		out __SP_L__,r28
 1140 0322 DF91      		pop r29
 1141 0324 CF91      		pop r28
 1142               	.LVL89:
 1143 0326 1F91      		pop r17
 1144 0328 0F91      		pop r16
 1145               	.LVL90:
 1146 032a BF90      		pop r11
 1147 032c AF90      		pop r10
 1148 032e 9F90      		pop r9
 1149 0330 8F90      		pop r8
 1150               	.LVL91:
 1151               	.LBB20:
 223:../../../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1152               		.loc 1 223 0
 1153 0332 0C94 0000 		jmp default_layer_and
 1154               	.LVL92:
 1155               	.L101:
 225:../../../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1156               		.loc 1 225 0
 1157 0336 6829      		or r22,r8
 1158 0338 7929      		or r23,r9
 1159 033a 8A29      		or r24,r10
 1160 033c 9B29      		or r25,r11
 1161               	.LVL93:
 1162               	/* epilogue start */
 1163               	.LBE20:
 346:../../../../tmk_core/common/action.c **** }
 1164               		.loc 1 346 0
 1165 033e 2796      		adiw r28,7
 1166               	.LVL94:
 1167 0340 0FB6      		in __tmp_reg__,__SREG__
 1168 0342 F894      		cli
 1169 0344 DEBF      		out __SP_H__,r29
 1170 0346 0FBE      		out __SREG__,__tmp_reg__
 1171 0348 CDBF      		out __SP_L__,r28
 1172 034a DF91      		pop r29
 1173 034c CF91      		pop r28
 1174               	.LVL95:
 1175 034e 1F91      		pop r17
 1176 0350 0F91      		pop r16
 1177               	.LVL96:
 1178 0352 BF90      		pop r11
 1179 0354 AF90      		pop r10
 1180 0356 9F90      		pop r9
 1181 0358 8F90      		pop r8
 1182               	.LVL97:
 1183               	.LBB21:
 225:../../../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1184               		.loc 1 225 0
 1185 035a 0C94 0000 		jmp default_layer_xor
 1186               	.LVL98:
 1187               	.L102:
 226:../../../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1188               		.loc 1 226 0
 1189 035e 0E94 0000 		call default_layer_and
 1190               	.LVL99:
 1191 0362 C501      		movw r24,r10
 1192 0364 B401      		movw r22,r8
 1193               	.L164:
 1194               	/* epilogue start */
 1195               	.LBE21:
 346:../../../../tmk_core/common/action.c **** }
 1196               		.loc 1 346 0
 1197 0366 2796      		adiw r28,7
 1198 0368 0FB6      		in __tmp_reg__,__SREG__
 1199 036a F894      		cli
 1200 036c DEBF      		out __SP_H__,r29
 1201 036e 0FBE      		out __SREG__,__tmp_reg__
 1202 0370 CDBF      		out __SP_L__,r28
 1203 0372 DF91      		pop r29
 1204 0374 CF91      		pop r28
 1205 0376 1F91      		pop r17
 1206 0378 0F91      		pop r16
 1207               	.LVL100:
 1208 037a BF90      		pop r11
 1209 037c AF90      		pop r10
 1210 037e 9F90      		pop r9
 1211 0380 8F90      		pop r8
 1212               	.LVL101:
 1213               	.LBB22:
 226:../../../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1214               		.loc 1 226 0
 1215 0382 0C94 0000 		jmp default_layer_or
 1216               	.LVL102:
 1217               	.L97:
 1218               	.LBE22:
 231:../../../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1219               		.loc 1 231 0
 1220 0386 1123      		tst r17
 1221 0388 01F0      		breq .L103
 231:../../../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1222               		.loc 1 231 0 is_stmt 0 discriminator 1
 1223 038a 842F      		mov r24,r20
 1224 038c 8170      		andi r24,lo8(1)
 1225 038e 00C0      		rjmp .L104
 1226               	.L103:
 231:../../../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1227               		.loc 1 231 0 discriminator 2
 1228 0390 8695      		lsr r24
 1229               	.L104:
 231:../../../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1230               		.loc 1 231 0 discriminator 3
 1231 0392 8823      		tst r24
 1232 0394 01F4      		brne .+2
 1233 0396 00C0      		rjmp .L56
 1234               	.LVL103:
 1235               	.LBB23:
 233:../../../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1236               		.loc 1 233 0 is_stmt 1
 1237 0398 262F      		mov r18,r22
 1238 039a 2295      		swap r18
 1239 039c 2695      		lsr r18
 1240 039e 2770      		andi r18,lo8(7)
 1241 03a0 220F      		lsl r18
 1242 03a2 220F      		lsl r18
 234:../../../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1243               		.loc 1 234 0
 1244 03a4 862F      		mov r24,r22
 1245 03a6 8F70      		andi r24,lo8(15)
 1246 03a8 882E      		mov r8,r24
 1247 03aa 912C      		mov r9,__zero_reg__
 1248 03ac A12C      		mov r10,__zero_reg__
 1249 03ae B12C      		mov r11,__zero_reg__
 1250               	.LVL104:
 1251 03b0 022E      		mov r0,r18
 1252 03b2 00C0      		rjmp 2f
 1253               		1:
 1254 03b4 880C      		lsl r8
 1255 03b6 991C      		rol r9
 1256 03b8 AA1C      		rol r10
 1257 03ba BB1C      		rol r11
 1258               		2:
 1259 03bc 0A94      		dec r0
 1260 03be 02F4      		brpl 1b
 1261               	.LVL105:
 235:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1262               		.loc 1 235 0
 1263 03c0 64FF      		sbrs r22,4
 1264 03c2 00C0      		rjmp .L128
 235:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1265               		.loc 1 235 0 is_stmt 0 discriminator 1
 1266 03c4 6FE0      		ldi r22,lo8(15)
 1267 03c6 70E0      		ldi r23,0
 1268 03c8 80E0      		ldi r24,0
 1269 03ca 90E0      		ldi r25,0
 1270               	.LVL106:
 1271 03cc 00C0      		rjmp 2f
 1272               		1:
 1273 03ce 660F      		lsl r22
 1274 03d0 771F      		rol r23
 1275 03d2 881F      		rol r24
 1276 03d4 991F      		rol r25
 1277               		2:
 1278 03d6 2A95      		dec r18
 1279 03d8 02F4      		brpl 1b
 1280 03da 6095      		com r22
 1281 03dc 7095      		com r23
 1282 03de 8095      		com r24
 1283 03e0 9095      		com r25
 1284 03e2 00C0      		rjmp .L105
 1285               	.LVL107:
 1286               	.L128:
 235:../../../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1287               		.loc 1 235 0
 1288 03e4 60E0      		ldi r22,0
 1289 03e6 70E0      		ldi r23,0
 1290 03e8 CB01      		movw r24,r22
 1291               	.LVL108:
 1292               	.L105:
 236:../../../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1293               		.loc 1 236 0 is_stmt 1 discriminator 3
 1294 03ea 242F      		mov r18,r20
 1295 03ec 2695      		lsr r18
 1296 03ee 2695      		lsr r18
 1297 03f0 2370      		andi r18,lo8(3)
 1298 03f2 422F      		mov r20,r18
 1299               	.LVL109:
 1300 03f4 50E0      		ldi r21,0
 1301 03f6 4230      		cpi r20,2
 1302 03f8 5105      		cpc r21,__zero_reg__
 1303 03fa 01F0      		breq .L108
 1304 03fc 4330      		cpi r20,3
 1305 03fe 5105      		cpc r21,__zero_reg__
 1306 0400 01F0      		breq .L109
 1307 0402 6829      		or r22,r8
 1308 0404 7929      		or r23,r9
 1309 0406 8A29      		or r24,r10
 1310 0408 9B29      		or r25,r11
 1311               	.LVL110:
 1312 040a 4130      		cpi r20,1
 1313 040c 5105      		cpc r21,__zero_reg__
 1314 040e 01F0      		breq .L161
 1315               	/* epilogue start */
 1316               	.LBE23:
 346:../../../../tmk_core/common/action.c **** }
 1317               		.loc 1 346 0
 1318 0410 2796      		adiw r28,7
 1319               	.LVL111:
 1320 0412 0FB6      		in __tmp_reg__,__SREG__
 1321 0414 F894      		cli
 1322 0416 DEBF      		out __SP_H__,r29
 1323 0418 0FBE      		out __SREG__,__tmp_reg__
 1324 041a CDBF      		out __SP_L__,r28
 1325 041c DF91      		pop r29
 1326 041e CF91      		pop r28
 1327               	.LVL112:
 1328 0420 1F91      		pop r17
 1329 0422 0F91      		pop r16
 1330               	.LVL113:
 1331 0424 BF90      		pop r11
 1332 0426 AF90      		pop r10
 1333 0428 9F90      		pop r9
 1334 042a 8F90      		pop r8
 1335               	.LVL114:
 1336               	.LBB24:
 237:../../../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1337               		.loc 1 237 0
 1338 042c 0C94 0000 		jmp layer_and
 1339               	.LVL115:
 1340               	.L108:
 239:../../../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1341               		.loc 1 239 0
 1342 0430 6829      		or r22,r8
 1343 0432 7929      		or r23,r9
 1344 0434 8A29      		or r24,r10
 1345 0436 9B29      		or r25,r11
 1346               	.LVL116:
 1347               	/* epilogue start */
 1348               	.LBE24:
 346:../../../../tmk_core/common/action.c **** }
 1349               		.loc 1 346 0
 1350 0438 2796      		adiw r28,7
 1351               	.LVL117:
 1352 043a 0FB6      		in __tmp_reg__,__SREG__
 1353 043c F894      		cli
 1354 043e DEBF      		out __SP_H__,r29
 1355 0440 0FBE      		out __SREG__,__tmp_reg__
 1356 0442 CDBF      		out __SP_L__,r28
 1357 0444 DF91      		pop r29
 1358 0446 CF91      		pop r28
 1359               	.LVL118:
 1360 0448 1F91      		pop r17
 1361 044a 0F91      		pop r16
 1362               	.LVL119:
 1363 044c BF90      		pop r11
 1364 044e AF90      		pop r10
 1365 0450 9F90      		pop r9
 1366 0452 8F90      		pop r8
 1367               	.LVL120:
 1368               	.LBB25:
 239:../../../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1369               		.loc 1 239 0
 1370 0454 0C94 0000 		jmp layer_xor
 1371               	.LVL121:
 1372               	.L109:
 240:../../../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1373               		.loc 1 240 0
 1374 0458 0E94 0000 		call layer_and
 1375               	.LVL122:
 1376 045c C501      		movw r24,r10
 1377 045e B401      		movw r22,r8
 1378               	.L161:
 1379               	/* epilogue start */
 1380               	.LBE25:
 346:../../../../tmk_core/common/action.c **** }
 1381               		.loc 1 346 0
 1382 0460 2796      		adiw r28,7
 1383 0462 0FB6      		in __tmp_reg__,__SREG__
 1384 0464 F894      		cli
 1385 0466 DEBF      		out __SP_H__,r29
 1386 0468 0FBE      		out __SREG__,__tmp_reg__
 1387 046a CDBF      		out __SP_L__,r28
 1388 046c DF91      		pop r29
 1389 046e CF91      		pop r28
 1390 0470 1F91      		pop r17
 1391 0472 0F91      		pop r16
 1392               	.LVL123:
 1393 0474 BF90      		pop r11
 1394 0476 AF90      		pop r10
 1395 0478 9F90      		pop r9
 1396 047a 8F90      		pop r8
 1397               	.LVL124:
 1398               	.LBB26:
 240:../../../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1399               		.loc 1 240 0
 1400 047c 0C94 0000 		jmp layer_or
 1401               	.LVL125:
 1402               	.L66:
 1403               	.LBE26:
 248:../../../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1404               		.loc 1 248 0
 1405 0480 603F      		cpi r22,lo8(-16)
 1406 0482 01F0      		breq .L112
 1407               	.LVL126:
 1408 0484 00F4      		brsh .L116
 1409 0486 603E      		cpi r22,lo8(-32)
 1410 0488 00F4      		brsh .+2
 1411 048a 00C0      		rjmp .L110
 1412 048c 00C0      		rjmp .L152
 1413               	.L116:
 1414 048e 623F      		cpi r22,lo8(-14)
 1415 0490 01F4      		brne .+2
 1416 0492 00C0      		rjmp .L114
 1417 0494 00F0      		brlo .L113
 1418 0496 633F      		cpi r22,lo8(-13)
 1419 0498 01F0      		breq .+2
 1420 049a 00C0      		rjmp .L110
 1421 049c 00C0      		rjmp .L115
 1422               	.L152:
 1423 049e 062F      		mov r16,r22
 1424               	.LVL127:
 1425 04a0 0F70      		andi r16,lo8(15)
 1426 04a2 842F      		mov r24,r20
 1427 04a4 8F71      		andi r24,lo8(31)
 251:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 1428               		.loc 1 251 0
 1429 04a6 1123      		tst r17
 1430 04a8 01F0      		breq .L117
 252:../../../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1431               		.loc 1 252 0
 1432 04aa 0E94 0000 		call layer_on
 1433               	.LVL128:
 253:../../../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1434               		.loc 1 253 0
 1435 04ae 802F      		mov r24,r16
 1436 04b0 00C0      		rjmp .L153
 1437               	.LVL129:
 1438               	.L117:
 255:../../../../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 1439               		.loc 1 255 0
 1440 04b2 0E94 0000 		call layer_off
 1441               	.LVL130:
 256:../../../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1442               		.loc 1 256 0
 1443 04b6 802F      		mov r24,r16
 1444               	.LVL131:
 1445               	.L159:
 1446               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1447               		.loc 1 346 0
 1448 04b8 2796      		adiw r28,7
 1449 04ba 0FB6      		in __tmp_reg__,__SREG__
 1450 04bc F894      		cli
 1451 04be DEBF      		out __SP_H__,r29
 1452 04c0 0FBE      		out __SREG__,__tmp_reg__
 1453 04c2 CDBF      		out __SP_L__,r28
 1454 04c4 DF91      		pop r29
 1455 04c6 CF91      		pop r28
 1456 04c8 1F91      		pop r17
 1457 04ca 0F91      		pop r16
 1458 04cc BF90      		pop r11
 1459 04ce AF90      		pop r10
 1460               	.LVL132:
 1461 04d0 9F90      		pop r9
 1462 04d2 8F90      		pop r8
 256:../../../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1463               		.loc 1 256 0
 1464 04d4 0C94 0000 		jmp unregister_mods
 1465               	.LVL133:
 1466               	.L112:
 261:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 1467               		.loc 1 261 0
 1468 04d8 1123      		tst r17
 1469 04da 01F0      		breq .L118
 262:../../../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1470               		.loc 1 262 0
 1471 04dc 0530      		cpi r16,lo8(5)
 1472 04de 00F0      		brlo .+2
 1473 04e0 00C0      		rjmp .L56
 1474               	.L119:
 263:../../../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1475               		.loc 1 263 0
 1476 04e2 842F      		mov r24,r20
 1477 04e4 8F71      		andi r24,lo8(31)
 1478               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1479               		.loc 1 346 0
 1480 04e6 2796      		adiw r28,7
 1481 04e8 0FB6      		in __tmp_reg__,__SREG__
 1482 04ea F894      		cli
 1483 04ec DEBF      		out __SP_H__,r29
 1484 04ee 0FBE      		out __SREG__,__tmp_reg__
 1485 04f0 CDBF      		out __SP_L__,r28
 1486 04f2 DF91      		pop r29
 1487 04f4 CF91      		pop r28
 1488 04f6 1F91      		pop r17
 1489 04f8 0F91      		pop r16
 1490               	.LVL134:
 1491 04fa BF90      		pop r11
 1492 04fc AF90      		pop r10
 1493               	.LVL135:
 1494 04fe 9F90      		pop r9
 1495 0500 8F90      		pop r8
 263:../../../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1496               		.loc 1 263 0
 1497 0502 0C94 0000 		jmp layer_invert
 1498               	.LVL136:
 1499               	.L118:
 266:../../../../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1500               		.loc 1 266 0
 1501 0506 0630      		cpi r16,lo8(6)
 1502 0508 00F0      		brlo .+2
 1503 050a 00C0      		rjmp .L56
 1504 050c 00C0      		rjmp .L119
 1505               	.L113:
 272:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1506               		.loc 1 272 0
 1507 050e 1123      		tst r17
 1508 0510 01F0      		breq .L120
 1509               	.L121:
 272:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1510               		.loc 1 272 0 is_stmt 0 discriminator 1
 1511 0512 842F      		mov r24,r20
 1512 0514 8F71      		andi r24,lo8(31)
 1513               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1514               		.loc 1 346 0 is_stmt 1 discriminator 1
 1515 0516 2796      		adiw r28,7
 1516 0518 0FB6      		in __tmp_reg__,__SREG__
 1517 051a F894      		cli
 1518 051c DEBF      		out __SP_H__,r29
 1519 051e 0FBE      		out __SREG__,__tmp_reg__
 1520 0520 CDBF      		out __SP_L__,r28
 1521 0522 DF91      		pop r29
 1522 0524 CF91      		pop r28
 1523 0526 1F91      		pop r17
 1524 0528 0F91      		pop r16
 1525               	.LVL137:
 1526 052a BF90      		pop r11
 1527 052c AF90      		pop r10
 1528               	.LVL138:
 1529 052e 9F90      		pop r9
 1530 0530 8F90      		pop r8
 272:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1531               		.loc 1 272 0 discriminator 1
 1532 0532 0C94 0000 		jmp layer_on
 1533               	.LVL139:
 1534               	.L120:
 273:../../../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1535               		.loc 1 273 0
 1536 0536 842F      		mov r24,r20
 1537 0538 8F71      		andi r24,lo8(31)
 1538               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1539               		.loc 1 346 0
 1540 053a 2796      		adiw r28,7
 1541 053c 0FB6      		in __tmp_reg__,__SREG__
 1542 053e F894      		cli
 1543 0540 DEBF      		out __SP_H__,r29
 1544 0542 0FBE      		out __SREG__,__tmp_reg__
 1545 0544 CDBF      		out __SP_L__,r28
 1546 0546 DF91      		pop r29
 1547 0548 CF91      		pop r28
 1548 054a 1F91      		pop r17
 1549 054c 0F91      		pop r16
 1550               	.LVL140:
 1551 054e BF90      		pop r11
 1552 0550 AF90      		pop r10
 1553               	.LVL141:
 1554 0552 9F90      		pop r9
 1555 0554 8F90      		pop r8
 273:../../../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1556               		.loc 1 273 0
 1557 0556 0C94 0000 		jmp layer_off
 1558               	.LVL142:
 1559               	.L114:
 276:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 1560               		.loc 1 276 0
 1561 055a 1111      		cpse r17,__zero_reg__
 1562 055c 00C0      		rjmp .L120
 1563 055e 00C0      		rjmp .L121
 1564               	.L115:
 280:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1565               		.loc 1 280 0
 1566 0560 1123      		tst r17
 1567 0562 01F0      		breq .L122
 280:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1568               		.loc 1 280 0 is_stmt 0 discriminator 1
 1569 0564 842F      		mov r24,r20
 1570 0566 8F71      		andi r24,lo8(31)
 1571               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1572               		.loc 1 346 0 is_stmt 1 discriminator 1
 1573 0568 2796      		adiw r28,7
 1574 056a 0FB6      		in __tmp_reg__,__SREG__
 1575 056c F894      		cli
 1576 056e DEBF      		out __SP_H__,r29
 1577 0570 0FBE      		out __SREG__,__tmp_reg__
 1578 0572 CDBF      		out __SP_L__,r28
 1579 0574 DF91      		pop r29
 1580 0576 CF91      		pop r28
 1581 0578 1F91      		pop r17
 1582 057a 0F91      		pop r16
 1583               	.LVL143:
 1584 057c BF90      		pop r11
 1585 057e AF90      		pop r10
 1586               	.LVL144:
 1587 0580 9F90      		pop r9
 1588 0582 8F90      		pop r8
 280:../../../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1589               		.loc 1 280 0 discriminator 1
 1590 0584 0C94 0000 		jmp layer_move
 1591               	.LVL145:
 1592               	.L122:
 1593               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1594               		.loc 1 346 0
 1595 0588 2796      		adiw r28,7
 1596 058a 0FB6      		in __tmp_reg__,__SREG__
 1597 058c F894      		cli
 1598 058e DEBF      		out __SP_H__,r29
 1599 0590 0FBE      		out __SREG__,__tmp_reg__
 1600 0592 CDBF      		out __SP_L__,r28
 1601 0594 DF91      		pop r29
 1602 0596 CF91      		pop r28
 1603 0598 1F91      		pop r17
 1604 059a 0F91      		pop r16
 1605               	.LVL146:
 1606 059c BF90      		pop r11
 1607 059e AF90      		pop r10
 1608               	.LVL147:
 1609 05a0 9F90      		pop r9
 1610 05a2 8F90      		pop r8
 281:../../../../tmk_core/common/action.c ****                                     layer_clear();
 1611               		.loc 1 281 0
 1612 05a4 0C94 0000 		jmp layer_clear
 1613               	.LVL148:
 1614               	.L110:
 285:../../../../tmk_core/common/action.c ****                     if (event.pressed) {
 1615               		.loc 1 285 0
 1616 05a8 1123      		tst r17
 1617 05aa 01F0      		breq .L123
 286:../../../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1618               		.loc 1 286 0
 1619 05ac 0023      		tst r16
 1620 05ae 01F4      		brne .+2
 1621 05b0 00C0      		rjmp .L121
 1622               	.L157:
 288:../../../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1623               		.loc 1 288 0
 1624 05b2 862F      		mov r24,r22
 1625               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1626               		.loc 1 346 0
 1627 05b4 2796      		adiw r28,7
 1628 05b6 0FB6      		in __tmp_reg__,__SREG__
 1629 05b8 F894      		cli
 1630 05ba DEBF      		out __SP_H__,r29
 1631 05bc 0FBE      		out __SREG__,__tmp_reg__
 1632 05be CDBF      		out __SP_L__,r28
 1633 05c0 DF91      		pop r29
 1634 05c2 CF91      		pop r28
 1635 05c4 1F91      		pop r17
 1636 05c6 0F91      		pop r16
 1637               	.LVL149:
 1638 05c8 BF90      		pop r11
 1639 05ca AF90      		pop r10
 1640               	.LVL150:
 1641 05cc 9F90      		pop r9
 1642 05ce 8F90      		pop r8
 288:../../../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1643               		.loc 1 288 0
 1644 05d0 0C94 0000 		jmp register_code
 1645               	.LVL151:
 1646               	.L123:
 294:../../../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1647               		.loc 1 294 0
 1648 05d4 0023      		tst r16
 1649 05d6 01F4      		brne .+2
 1650 05d8 00C0      		rjmp .L120
 1651               	.L158:
 296:../../../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 1652               		.loc 1 296 0
 1653 05da 862F      		mov r24,r22
 1654               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1655               		.loc 1 346 0
 1656 05dc 2796      		adiw r28,7
 1657 05de 0FB6      		in __tmp_reg__,__SREG__
 1658 05e0 F894      		cli
 1659 05e2 DEBF      		out __SP_H__,r29
 1660 05e4 0FBE      		out __SREG__,__tmp_reg__
 1661 05e6 CDBF      		out __SP_L__,r28
 1662 05e8 DF91      		pop r29
 1663 05ea CF91      		pop r28
 1664 05ec 1F91      		pop r17
 1665 05ee 0F91      		pop r16
 1666               	.LVL152:
 1667 05f0 BF90      		pop r11
 1668 05f2 AF90      		pop r10
 1669               	.LVL153:
 1670 05f4 9F90      		pop r9
 1671 05f6 8F90      		pop r8
 296:../../../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 1672               		.loc 1 296 0
 1673 05f8 0C94 0000 		jmp unregister_code
 1674               	.LVL154:
 1675               	.L67:
 310:../../../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1676               		.loc 1 310 0
 1677 05fc 4F70      		andi r20,lo8(15)
 1678 05fe C501      		movw r24,r10
 1679 0600 0E94 0000 		call action_get_macro
 1680               	.LVL155:
 1681               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1682               		.loc 1 346 0
 1683 0604 2796      		adiw r28,7
 1684 0606 0FB6      		in __tmp_reg__,__SREG__
 1685 0608 F894      		cli
 1686 060a DEBF      		out __SP_H__,r29
 1687 060c 0FBE      		out __SREG__,__tmp_reg__
 1688 060e CDBF      		out __SP_L__,r28
 1689 0610 DF91      		pop r29
 1690 0612 CF91      		pop r28
 1691 0614 1F91      		pop r17
 1692 0616 0F91      		pop r16
 1693               	.LVL156:
 1694 0618 BF90      		pop r11
 1695 061a AF90      		pop r10
 1696               	.LVL157:
 1697 061c 9F90      		pop r9
 1698 061e 8F90      		pop r8
 310:../../../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1699               		.loc 1 310 0
 1700 0620 0C94 0000 		jmp action_macro_play
 1701               	.LVL158:
 1702               	.L68:
 340:../../../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1703               		.loc 1 340 0
 1704 0624 4F70      		andi r20,lo8(15)
 1705 0626 C501      		movw r24,r10
 1706               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1707               		.loc 1 346 0
 1708 0628 2796      		adiw r28,7
 1709 062a 0FB6      		in __tmp_reg__,__SREG__
 1710 062c F894      		cli
 1711 062e DEBF      		out __SP_H__,r29
 1712 0630 0FBE      		out __SREG__,__tmp_reg__
 1713 0632 CDBF      		out __SP_L__,r28
 1714 0634 DF91      		pop r29
 1715 0636 CF91      		pop r28
 1716 0638 1F91      		pop r17
 1717 063a 0F91      		pop r16
 1718               	.LVL159:
 1719 063c BF90      		pop r11
 1720 063e AF90      		pop r10
 1721               	.LVL160:
 1722 0640 9F90      		pop r9
 1723 0642 8F90      		pop r8
 340:../../../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1724               		.loc 1 340 0
 1725 0644 0C94 0000 		jmp action_function
 1726               	.LVL161:
 1727               	.L56:
 1728               	/* epilogue start */
 346:../../../../tmk_core/common/action.c **** }
 1729               		.loc 1 346 0
 1730 0648 2796      		adiw r28,7
 1731 064a 0FB6      		in __tmp_reg__,__SREG__
 1732 064c F894      		cli
 1733 064e DEBF      		out __SP_H__,r29
 1734 0650 0FBE      		out __SREG__,__tmp_reg__
 1735 0652 CDBF      		out __SP_L__,r28
 1736 0654 DF91      		pop r29
 1737 0656 CF91      		pop r28
 1738 0658 1F91      		pop r17
 1739 065a 0F91      		pop r16
 1740               	.LVL162:
 1741 065c BF90      		pop r11
 1742 065e AF90      		pop r10
 1743               	.LVL163:
 1744 0660 9F90      		pop r9
 1745 0662 8F90      		pop r8
 1746 0664 0895      		ret
 1747               		.cfi_endproc
 1748               	.LFE5:
 1750               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1751               	.global	clear_keyboard_but_mods
 1753               	clear_keyboard_but_mods:
 1754               	.LFB11:
 497:../../../../tmk_core/common/action.c ****     }
 498:../../../../tmk_core/common/action.c **** }
 499:../../../../tmk_core/common/action.c **** 
 500:../../../../tmk_core/common/action.c **** void clear_keyboard(void)
 501:../../../../tmk_core/common/action.c **** {
 502:../../../../tmk_core/common/action.c ****     clear_mods();
 503:../../../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 504:../../../../tmk_core/common/action.c **** }
 505:../../../../tmk_core/common/action.c **** 
 506:../../../../tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 507:../../../../tmk_core/common/action.c **** {
 1755               		.loc 1 507 0
 1756               		.cfi_startproc
 1757               	/* prologue: function */
 1758               	/* frame size = 0 */
 1759               	/* stack size = 0 */
 1760               	.L__stack_usage = 0
 508:../../../../tmk_core/common/action.c ****     clear_weak_mods();
 1761               		.loc 1 508 0
 1762 0000 0E94 0000 		call clear_weak_mods
 1763               	.LVL164:
 509:../../../../tmk_core/common/action.c ****     clear_keys();
 1764               		.loc 1 509 0
 1765 0004 0E94 0000 		call clear_keys
 1766               	.LVL165:
 510:../../../../tmk_core/common/action.c ****     send_keyboard_report();
 1767               		.loc 1 510 0
 1768 0008 0E94 0000 		call send_keyboard_report
 1769               	.LVL166:
 511:../../../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 512:../../../../tmk_core/common/action.c ****     mousekey_clear();
 1770               		.loc 1 512 0
 1771 000c 0E94 0000 		call mousekey_clear
 1772               	.LVL167:
 513:../../../../tmk_core/common/action.c ****     mousekey_send();
 1773               		.loc 1 513 0
 1774 0010 0E94 0000 		call mousekey_send
 1775               	.LVL168:
 514:../../../../tmk_core/common/action.c **** #endif
 515:../../../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 516:../../../../tmk_core/common/action.c ****     host_system_send(0);
 1776               		.loc 1 516 0
 1777 0014 80E0      		ldi r24,0
 1778 0016 90E0      		ldi r25,0
 1779 0018 0E94 0000 		call host_system_send
 1780               	.LVL169:
 517:../../../../tmk_core/common/action.c ****     host_consumer_send(0);
 1781               		.loc 1 517 0
 1782 001c 80E0      		ldi r24,0
 1783 001e 90E0      		ldi r25,0
 1784 0020 0C94 0000 		jmp host_consumer_send
 1785               	.LVL170:
 1786               		.cfi_endproc
 1787               	.LFE11:
 1789               		.section	.text.clear_keyboard,"ax",@progbits
 1790               	.global	clear_keyboard
 1792               	clear_keyboard:
 1793               	.LFB10:
 501:../../../../tmk_core/common/action.c **** {
 1794               		.loc 1 501 0
 1795               		.cfi_startproc
 1796               	/* prologue: function */
 1797               	/* frame size = 0 */
 1798               	/* stack size = 0 */
 1799               	.L__stack_usage = 0
 502:../../../../tmk_core/common/action.c ****     clear_mods();
 1800               		.loc 1 502 0
 1801 0000 0E94 0000 		call clear_mods
 1802               	.LVL171:
 503:../../../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1803               		.loc 1 503 0
 1804 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1805               	.LVL172:
 1806               		.cfi_endproc
 1807               	.LFE10:
 1809               		.section	.text.is_tap_key,"ax",@progbits
 1810               	.global	is_tap_key
 1812               	is_tap_key:
 1813               	.LFB12:
 518:../../../../tmk_core/common/action.c **** #endif
 519:../../../../tmk_core/common/action.c **** }
 520:../../../../tmk_core/common/action.c **** 
 521:../../../../tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 522:../../../../tmk_core/common/action.c **** {
 1814               		.loc 1 522 0
 1815               		.cfi_startproc
 1816               	.LVL173:
 1817               	/* prologue: function */
 1818               	/* frame size = 0 */
 1819               	/* stack size = 0 */
 1820               	.L__stack_usage = 0
 523:../../../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1821               		.loc 1 523 0
 1822 0000 0E94 0000 		call layer_switch_get_action
 1823               	.LVL174:
 524:../../../../tmk_core/common/action.c **** 
 525:../../../../tmk_core/common/action.c ****     switch (action.kind.id) {
 1824               		.loc 1 525 0
 1825 0004 292F      		mov r18,r25
 1826 0006 2295      		swap r18
 1827 0008 2F70      		andi r18,lo8(15)
 1828 000a 30E0      		ldi r19,0
 1829 000c 2C30      		cpi r18,12
 1830 000e 3105      		cpc r19,__zero_reg__
 1831 0010 04F4      		brge .L171
 1832 0012 2A30      		cpi r18,10
 1833 0014 3105      		cpc r19,__zero_reg__
 1834 0016 04F4      		brge .L169
 1835 0018 2250      		subi r18,2
 1836 001a 3109      		sbc r19,__zero_reg__
 1837 001c 2230      		cpi r18,2
 1838 001e 3105      		cpc r19,__zero_reg__
 1839 0020 00F4      		brsh .L184
 1840 0022 00C0      		rjmp .L169
 1841               	.L171:
 1842 0024 2C30      		cpi r18,12
 1843 0026 3105      		cpc r19,__zero_reg__
 1844 0028 01F0      		breq .L170
 1845 002a 2F30      		cpi r18,15
 1846 002c 3105      		cpc r19,__zero_reg__
 1847 002e 01F4      		brne .L184
 1848 0030 00C0      		rjmp .L170
 1849               	.L169:
 526:../../../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 527:../../../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 528:../../../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 529:../../../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 530:../../../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1850               		.loc 1 530 0
 1851 0032 803E      		cpi r24,lo8(-32)
 1852               	.LVL175:
 1853 0034 00F0      		brlo .L172
 1854 0036 803F      		cpi r24,lo8(-16)
 1855 0038 01F4      		brne .L184
 1856               	.L172:
 531:../../../../tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 532:../../../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 533:../../../../tmk_core/common/action.c ****                     return true;
 1857               		.loc 1 533 0
 1858 003a 81E0      		ldi r24,lo8(1)
 1859               	.LVL176:
 1860 003c 0895      		ret
 1861               	.L170:
 534:../../../../tmk_core/common/action.c ****             }
 535:../../../../tmk_core/common/action.c ****             return false;
 536:../../../../tmk_core/common/action.c ****         case ACT_MACRO:
 537:../../../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 538:../../../../tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1862               		.loc 1 538 0
 1863 003e 93FB      		bst r25,3
 1864 0040 8827      		clr r24
 1865 0042 80F9      		bld r24,0
 1866 0044 0895      		ret
 1867               	.LVL177:
 1868               	.L184:
 535:../../../../tmk_core/common/action.c ****             return false;
 1869               		.loc 1 535 0
 1870 0046 80E0      		ldi r24,0
 1871               	.LVL178:
 539:../../../../tmk_core/common/action.c ****             return false;
 540:../../../../tmk_core/common/action.c ****     }
 541:../../../../tmk_core/common/action.c ****     return false;
 542:../../../../tmk_core/common/action.c **** }
 1872               		.loc 1 542 0
 1873 0048 0895      		ret
 1874               		.cfi_endproc
 1875               	.LFE12:
 1877               		.section	.text.debug_event,"ax",@progbits
 1878               	.global	debug_event
 1880               	debug_event:
 1881               	.LFB13:
 543:../../../../tmk_core/common/action.c **** 
 544:../../../../tmk_core/common/action.c **** 
 545:../../../../tmk_core/common/action.c **** /*
 546:../../../../tmk_core/common/action.c ****  * debug print
 547:../../../../tmk_core/common/action.c ****  */
 548:../../../../tmk_core/common/action.c **** void debug_event(keyevent_t event)
 549:../../../../tmk_core/common/action.c **** {
 1882               		.loc 1 549 0
 1883               		.cfi_startproc
 1884 0000 CF93      		push r28
 1885               	.LCFI15:
 1886               		.cfi_def_cfa_offset 3
 1887               		.cfi_offset 28, -2
 1888 0002 DF93      		push r29
 1889               	.LCFI16:
 1890               		.cfi_def_cfa_offset 4
 1891               		.cfi_offset 29, -3
 1892 0004 00D0      		rcall .
 1893 0006 00D0      		rcall .
 1894 0008 1F92      		push __zero_reg__
 1895               	.LCFI17:
 1896               		.cfi_def_cfa_offset 9
 1897 000a CDB7      		in r28,__SP_L__
 1898 000c DEB7      		in r29,__SP_H__
 1899               	.LCFI18:
 1900               		.cfi_def_cfa_register 28
 1901               	/* prologue: function */
 1902               	/* frame size = 5 */
 1903               	/* stack size = 7 */
 1904               	.L__stack_usage = 7
 1905               	/* epilogue start */
 550:../../../../tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 551:../../../../tmk_core/common/action.c **** }
 1906               		.loc 1 551 0
 1907 000e 0F90      		pop __tmp_reg__
 1908 0010 0F90      		pop __tmp_reg__
 1909 0012 0F90      		pop __tmp_reg__
 1910 0014 0F90      		pop __tmp_reg__
 1911 0016 0F90      		pop __tmp_reg__
 1912 0018 DF91      		pop r29
 1913 001a CF91      		pop r28
 1914 001c 0895      		ret
 1915               		.cfi_endproc
 1916               	.LFE13:
 1918               		.section	.text.debug_record,"ax",@progbits
 1919               	.global	debug_record
 1921               	debug_record:
 1922               	.LFB14:
 552:../../../../tmk_core/common/action.c **** 
 553:../../../../tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 554:../../../../tmk_core/common/action.c **** {
 1923               		.loc 1 554 0
 1924               		.cfi_startproc
 1925 0000 CF93      		push r28
 1926               	.LCFI19:
 1927               		.cfi_def_cfa_offset 3
 1928               		.cfi_offset 28, -2
 1929 0002 DF93      		push r29
 1930               	.LCFI20:
 1931               		.cfi_def_cfa_offset 4
 1932               		.cfi_offset 29, -3
 1933 0004 00D0      		rcall .
 1934 0006 00D0      		rcall .
 1935 0008 00D0      		rcall .
 1936               	.LCFI21:
 1937               		.cfi_def_cfa_offset 10
 1938 000a CDB7      		in r28,__SP_L__
 1939 000c DEB7      		in r29,__SP_H__
 1940               	.LCFI22:
 1941               		.cfi_def_cfa_register 28
 1942               	/* prologue: function */
 1943               	/* frame size = 6 */
 1944               	/* stack size = 8 */
 1945               	.L__stack_usage = 8
 1946               	/* epilogue start */
 555:../../../../tmk_core/common/action.c ****     debug_event(record.event);
 556:../../../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 557:../../../../tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 558:../../../../tmk_core/common/action.c **** #endif
 559:../../../../tmk_core/common/action.c **** }
 1947               		.loc 1 559 0
 1948 000e 2696      		adiw r28,6
 1949 0010 0FB6      		in __tmp_reg__,__SREG__
 1950 0012 F894      		cli
 1951 0014 DEBF      		out __SP_H__,r29
 1952 0016 0FBE      		out __SREG__,__tmp_reg__
 1953 0018 CDBF      		out __SP_L__,r28
 1954 001a DF91      		pop r29
 1955 001c CF91      		pop r28
 1956 001e 0895      		ret
 1957               		.cfi_endproc
 1958               	.LFE14:
 1960               		.section	.text.debug_action,"ax",@progbits
 1961               	.global	debug_action
 1963               	debug_action:
 1964               	.LFB15:
 560:../../../../tmk_core/common/action.c **** 
 561:../../../../tmk_core/common/action.c **** void debug_action(action_t action)
 562:../../../../tmk_core/common/action.c **** {
 1965               		.loc 1 562 0
 1966               		.cfi_startproc
 1967               	.LVL179:
 1968               	/* prologue: function */
 1969               	/* frame size = 0 */
 1970               	/* stack size = 0 */
 1971               	.L__stack_usage = 0
 1972 0000 0895      		ret
 1973               		.cfi_endproc
 1974               	.LFE15:
 1976               		.text
 1977               	.Letext0:
 1978               		.file 3 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/stdint.h"
 1979               		.file 4 "../../../../tmk_core/common/keycode.h"
 1980               		.file 5 "../../../../tmk_core/common/action_code.h"
 1981               		.file 6 "../../../../tmk_core/common/action_macro.h"
 1982               		.file 7 "../../../../tmk_core/common/action.h"
 1983               		.file 8 "../../../../tmk_core/common/hook.h"
 1984               		.file 9 "../../../../tmk_core/common/action_tapping.h"
 1985               		.file 10 "../../../../tmk_core/common/action_util.h"
 1986               		.file 11 "../../../../tmk_core/common/host.h"
 1987               		.file 12 "../../../../tmk_core/common/action_layer.h"
 1988               		.file 13 "../../../../tmk_core/common/command.h"
 1989               		.file 14 "../../../../tmk_core/common/mousekey.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action.c
     /tmp/ccAe3QAy.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccAe3QAy.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccAe3QAy.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccAe3QAy.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccAe3QAy.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccAe3QAy.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccAe3QAy.s:14     .text.action_exec:0000000000000000 action_exec
     /tmp/ccAe3QAy.s:128    .text.register_code:0000000000000000 register_code
     /tmp/ccAe3QAy.s:398    .text.unregister_code:0000000000000000 unregister_code
     /tmp/ccAe3QAy.s:475    .text.register_mods:0000000000000000 register_mods
     /tmp/ccAe3QAy.s:501    .text.unregister_mods:0000000000000000 unregister_mods
     /tmp/ccAe3QAy.s:527    .text.process_action:0000000000000000 process_action
     /tmp/ccAe3QAy.s:1753   .text.clear_keyboard_but_mods:0000000000000000 clear_keyboard_but_mods
     /tmp/ccAe3QAy.s:1792   .text.clear_keyboard:0000000000000000 clear_keyboard
     /tmp/ccAe3QAy.s:1812   .text.is_tap_key:0000000000000000 is_tap_key
     /tmp/ccAe3QAy.s:1880   .text.debug_event:0000000000000000 debug_event
     /tmp/ccAe3QAy.s:1921   .text.debug_record:0000000000000000 debug_record
     /tmp/ccAe3QAy.s:1963   .text.debug_action:0000000000000000 debug_action

UNDEFINED SYMBOLS
hook_matrix_change
action_tapping_process
command_proc
add_key
add_mods
send_keyboard_report
host_system_send
host_consumer_send
del_key
del_mods
layer_switch_get_action
layer_debug
default_layer_debug
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
get_mods
mousekey_on
mousekey_off
mousekey_send
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
clear_weak_mods
clear_keys
mousekey_clear
clear_mods
