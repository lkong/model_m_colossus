   1               		.file	"keymap.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.action_function,"ax",@progbits
  12               	.global	action_function
  14               	action_function:
  15               	.LFB10:
  16               		.file 1 "keymap.c"
   1:keymap.c      **** #include "keymap_common.h"
   2:keymap.c      **** #include "led.h"
   3:keymap.c      **** #include "keyboard.h"
   4:keymap.c      **** #include "action_layer.h"
   5:keymap.c      **** #include <util/delay.h>
   6:keymap.c      **** #include <avr/io.h>
   7:keymap.c      **** #include "host.h"
   8:keymap.c      **** #include "bootloader.h"
   9:keymap.c      **** 
  10:keymap.c      **** /* Phosphorglow's Layout
  11:keymap.c      ****  * 
  12:keymap.c      ****  * Holding shift and pressing Scroll Lock/Number Lock enables/disables the integrated number pad.
  13:keymap.c      ****  * Pressing Scroll Lock/Number Lock without shift while the number pad is enabled switches between 
  14:keymap.c      ****  * and cursor keys by turning Number Lock on or off through the host OS.
  15:keymap.c      ****  * 
  16:keymap.c      ****  * 
  17:keymap.c      ****  * Holding Caps Lock enables the mouse and media controls layer.
  18:keymap.c      ****  * 
  19:keymap.c      ****  * 
  20:keymap.c      ****  */
  21:keymap.c      **** 
  22:keymap.c      **** const uint8_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
  23:keymap.c      ****     /* Keymap 0: Default Layer
  24:keymap.c      ****      * ,-------------------------------------------------------------------------------------.
  25:keymap.c      ****      * |Esc| | F1| F2| F3| F4|  |F5| F6| F7| F8|  |F9| F10| F11| F12|   PSCR|  SCRL|  PAUS|  |
  26:keymap.c      ****      * |-------------------------------------------------------------------------------------|
  27:keymap.c      ****      * |-------------------------------------------------------------------------------------|
  28:keymap.c      ****      * |`  |  1|  2|  3|  4|  5|  6|  7|  8|  9|  0|  -|  =|  Bspc\|	 INS|  HOME|  PGUP|  |
  29:keymap.c      ****      * |-------------------------------------------------------------------------------------|
  30:keymap.c      ****      * |Tab  |  Q|  W|  E|  R|  T|  Y|  U|  I|  O|  P|  [|  ]|    \|	 DEL|   END|  PGDN|  |
  31:keymap.c      ****      * |-------------------------------------------------------------------------------------|
  32:keymap.c      ****      * |Caps  |  A|  S|  D|  F|  G|  H|  J|  K|  L|  ;|  '|Return  |                         |
  33:keymap.c      ****      * |-------------------------------------------------------------------------------------|
  34:keymap.c      ****      * |Shift   |  Z|  X|  C|  V|  B|  N|  M|  ,|  .|  /|Shift     |	        UP |         |
  35:keymap.c      ****      * |-------------------------------------------------------------------------------------|
  36:keymap.c      ****      * |Ctrl|    |Alt |            Space          |Alt |    |Ctrl  |	LEFT| DOWN | RIGHT|  |
  37:keymap.c      ****      * `-------------------------------------------------------------------------------------'
  38:keymap.c      ****      */
  39:keymap.c      ****         /* Layer 3: Mouse and Media, etc. 
  40:keymap.c      ****         * ,-------------------------------------------------------------------------------------.
  41:keymap.c      ****         * |   | |   |   |   |   |  |  |   |   |   |  |  |MPLY|MPRV|MNXT|       |      |      |  |
  42:keymap.c      ****         * |-------------------------------------------------------------------------------------|
  43:keymap.c      ****         * |-------------------------------------------------------------------------------------|
  44:keymap.c      ****         * |   |   |   |   |   |   |   |   |   |   |   |   |   |       |	   BTN1|  MS_U|  BTN2|  |
  45:keymap.c      ****         * |-------------------------------------------------------------------------------------|
  46:keymap.c      ****         * |     |   |   |   |   |   |   |   |   |   |   |   |   |     |	   MS_L|  MS_D|  MS_R|  |
  47:keymap.c      ****         * |-------------------------------------------------------------------------------------|
  48:keymap.c      ****         * |    |    |    |    |   |   |   |   |   |   |   |   |       |                         |
  49:keymap.c      ****         * |-------------------------------------------------------------------------------------|
  50:keymap.c      ****         * |        |   |   |   |   |   |   |   |   |   |   |          |	              |         |
  51:keymap.c      ****         * |-------------------------------------------------------------------------------------|
  52:keymap.c      ****         * |    |    |    |                           |    |    |      |	   VOLD|  MUTE|  VOLU|  |
  53:keymap.c      ****         * `-------------------------------------------------------------------------------------'
  54:keymap.c      ****         */
  55:keymap.c      ****     
  56:keymap.c      ****     /* Keymap Template
  57:keymap.c      ****      * ,-------------------------------------------------------------------------------------.
  58:keymap.c      ****      * |   | |   |   |   |   |  |  |   |   |   |  |  |    |    |    |       |      |      |  |
  59:keymap.c      ****      * |-------------------------------------------------------------------------------------|
  60:keymap.c      ****      * |-------------------------------------------------------------------------------------|
  61:keymap.c      ****      * |   |   |   |   |   |   |   |   |   |   |   |   |   |       |	    |      |      |  |
  62:keymap.c      ****      * |-------------------------------------------------------------------------------------|
  63:keymap.c      ****      * |     |   |   |   |   |   |   |   |   |   |   |   |   |     |	    |      |      |  |
  64:keymap.c      ****      * |-------------------------------------------------------------------------------------|
  65:keymap.c      ****      * |      |   |   |   |   |   |   |   |   |   |   |   |        |                         |
  66:keymap.c      ****      * |-------------------------------------------------------------------------------------|
  67:keymap.c      ****      * |        |   |   |   |   |   |   |   |   |   |   |          |	           |         |
  68:keymap.c      ****      * |-------------------------------------------------------------------------------------|
  69:keymap.c      ****      * |    |    |    |                           |    |    |      |	    |      |      |  |
  70:keymap.c      ****      * `-------------------------------------------------------------------------------------'
  71:keymap.c      ****      */
  72:keymap.c      ****     
  73:keymap.c      ****     KEYMAP( \
  74:keymap.c      ****         /* Layer 0: Default */
  75:keymap.c      **** 	ESC,        F1,  F2,  F3,  F4,  F5,  F6,  F7,  F8,   F9,   F10,   F11,   F12,         SLCK,  FN1, 
  76:keymap.c      ****         GRV,  1,    2,   3,   4,   5,   6,   7,   8,   9,    0,    MINS,  EQL,   BSLS, BSPC,  INS, 
  77:keymap.c      ****         TAB,  Q,    W,   E,   R,   T,   Y,   U,   I,   O,    P,    LBRC,  RBRC,  BSLS,        DEL, 
  78:keymap.c      ****         FN3,  A,    S,   D,   F,   G,   H,   J,   K,   L,    SCLN, QUOT,  BSLS,  ENT, \
  79:keymap.c      ****         LSFT, NUBS, Z,   X,   C,   V,   B,   N,   M,   COMM, DOT,  SLSH,  RSFT,  RSFT,             
  80:keymap.c      ****         LCTL,       LALT,                    SPC,                  RALT,         RCTL,        LEFT,
  81:keymap.c      **** 
  82:keymap.c      **** 	/* Layer 1: Number Pad */        
  83:keymap.c      ****     KEYMAP( \
  84:keymap.c      ****         TRNS,       TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS,        TRNS,
  85:keymap.c      ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,P7,  P8,  P9,   TRNS, PMNS,  PPLS,  TRNS, TRNS,  TRNS,
  86:keymap.c      ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,P4,  P5,  P6,   TRNS, TRNS,  TRNS,  TRNS,        TRNS,
  87:keymap.c      ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,P1,  P2,  P3,   PAST, TRNS,  TRNS,  PENT, \
  88:keymap.c      ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,P0,  PCMM, PDOT, PSLS,  TRNS,  TRNS,             
  89:keymap.c      ****         TRNS,       TRNS,                    TRNS,                 TRNS,         TRNS,        TRNS,
  90:keymap.c      **** 
  91:keymap.c      ****     KEYMAP( \
  92:keymap.c      ****         TRNS,       TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS,        TRNS,
  93:keymap.c      ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS, TRNS,  BTN1,
  94:keymap.c      ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS,        MS_L,
  95:keymap.c      ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS, \
  96:keymap.c      ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS,             
  97:keymap.c      ****         TRNS,       TRNS,                    TRNS,                 TRNS,         FN4,         TRNS,
  98:keymap.c      **** 
  99:keymap.c      ****           /* Layer 3: Hold Caps Lock: Volume, Media, L/R GUI.  */
 100:keymap.c      ****     KEYMAP( \
 101:keymap.c      ****         TRNS,       TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, MPLY,  MPRV,  MNXT,        TRNS,
 102:keymap.c      ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS, TRNS,  TRNS,
 103:keymap.c      ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS,        TRNS,
 104:keymap.c      ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS, \
 105:keymap.c      ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS,             
 106:keymap.c      ****         TRNS,       LGUI,                    TRNS,                 RGUI,         TRNS,        VOLD,
 107:keymap.c      ****           
 108:keymap.c      **** 	/* Layer 4: Mouse Scroll (Home/End when Right Control Held) */
 109:keymap.c      ****     KEYMAP( \
 110:keymap.c      ****         TRNS,       TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS,        TRNS,
 111:keymap.c      ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS, TRNS,  TRNS,
 112:keymap.c      ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS,        TRNS,
 113:keymap.c      ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS, \
 114:keymap.c      ****         TRNS, TRNS, TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS,TRNS, TRNS, TRNS,  TRNS,  TRNS,             
 115:keymap.c      ****         TRNS,       TRNS,                    TRNS,                 TRNS,         TRNS,        TRNS,
 116:keymap.c      **** };
 117:keymap.c      **** 
 118:keymap.c      **** /*
 119:keymap.c      **** * user defined action function
 120:keymap.c      **** */
 121:keymap.c      **** enum function_id {
 122:keymap.c      ****     SHIFT_NUM, // Shift + SCRL -> Number Pad Layer On
 123:keymap.c      ****     SHIFT_NUM1, // Shift + Num -> Number Pad Layer Off
 124:keymap.c      ****     PAUS_BOOT, // Caps Lock + Right Shift + Pause = DFU
 125:keymap.c      **** };
 126:keymap.c      **** 
 127:keymap.c      **** void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
 128:keymap.c      **** {
  17               		.loc 1 128 0
  18               		.cfi_startproc
  19               	.LVL0:
  20 0000 CF92      		push r12
  21               	.LCFI0:
  22               		.cfi_def_cfa_offset 3
  23               		.cfi_offset 12, -2
  24 0002 DF92      		push r13
  25               	.LCFI1:
  26               		.cfi_def_cfa_offset 4
  27               		.cfi_offset 13, -3
  28 0004 EF92      		push r14
  29               	.LCFI2:
  30               		.cfi_def_cfa_offset 5
  31               		.cfi_offset 14, -4
  32 0006 FF92      		push r15
  33               	.LCFI3:
  34               		.cfi_def_cfa_offset 6
  35               		.cfi_offset 15, -5
  36 0008 CF93      		push r28
  37               	.LCFI4:
  38               		.cfi_def_cfa_offset 7
  39               		.cfi_offset 28, -6
  40               	/* prologue: function */
  41               	/* frame size = 0 */
  42               	/* stack size = 5 */
  43               	.L__stack_usage = 5
  44 000a 6C01      		movw r12,r24
  45 000c C62F      		mov r28,r22
 129:keymap.c      ****     if (record->event.pressed) dprint("P"); else dprint("R");
  46               		.loc 1 129 0
  47 000e FC01      		movw r30,r24
  48 0010 9281      		ldd r25,Z+2
  49 0012 8091 0000 		lds r24,debug_config
  50               	.LVL1:
  51 0016 9923      		tst r25
  52 0018 01F0      		breq .L2
  53               		.loc 1 129 0 is_stmt 0 discriminator 1
  54 001a 80FF      		sbrs r24,0
  55 001c 00C0      		rjmp .L3
  56 001e 80E0      		ldi r24,lo8(__c.2266)
  57 0020 90E0      		ldi r25,hi8(__c.2266)
  58 0022 00C0      		rjmp .L30
  59               	.L2:
  60               		.loc 1 129 0 discriminator 2
  61 0024 80FF      		sbrs r24,0
  62 0026 00C0      		rjmp .L3
  63               		.loc 1 129 0 discriminator 1
  64 0028 80E0      		ldi r24,lo8(__c.2268)
  65 002a 90E0      		ldi r25,hi8(__c.2268)
  66               	.L30:
  67 002c 0E94 0000 		call xputs
  68               	.LVL2:
  69               	.L3:
 130:keymap.c      ****     if (record->tap.interrupted) dprint("i");
  70               		.loc 1 130 0 is_stmt 1
  71 0030 F601      		movw r30,r12
  72 0032 8581      		ldd r24,Z+5
  73 0034 80FF      		sbrs r24,0
  74 0036 00C0      		rjmp .L4
  75               		.loc 1 130 0 is_stmt 0 discriminator 1
  76 0038 8091 0000 		lds r24,debug_config
  77 003c 80FF      		sbrs r24,0
  78 003e 00C0      		rjmp .L4
  79 0040 80E0      		ldi r24,lo8(__c.2270)
  80 0042 90E0      		ldi r25,hi8(__c.2270)
  81 0044 0E94 0000 		call xputs
  82               	.LVL3:
  83               	.L4:
 131:keymap.c      **** 
 132:keymap.c      **** #   define MODS_SHIFT_MASK   (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT))
 133:keymap.c      ****     static uint8_t shift_mod;
 134:keymap.c      **** 
 135:keymap.c      **** #   define MODS_MASK_1   (MOD_BIT(KC_LALT))
 136:keymap.c      **** #   define MODS_MASK_2   (MOD_BIT(KC_RALT))    
 137:keymap.c      ****     static uint8_t lalt_ralt_mods;    
 138:keymap.c      ****     
 139:keymap.c      ****     switch (id) {
  84               		.loc 1 139 0 is_stmt 1
  85 0048 C130      		cpi r28,lo8(1)
  86 004a 01F0      		breq .L7
  87 004c 00F0      		brlo .L6
  88 004e C230      		cpi r28,lo8(2)
  89 0050 01F0      		breq .+2
  90 0052 00C0      		rjmp .L1
  91 0054 00C0      		rjmp .L8
  92               	.L6:
  93               	.LBB2:
 140:keymap.c      ****         // Shift + Scroll Lock -> Number Pad Layer On
 141:keymap.c      ****         case SHIFT_NUM:
 142:keymap.c      ****             shift_mod = get_mods()&MODS_SHIFT_MASK;
  94               		.loc 1 142 0
  95 0056 0E94 0000 		call get_mods
  96               	.LVL4:
  97 005a 8272      		andi r24,34
  98 005c 9927      		clr r25
  99 005e 8093 0000 		sts shift_mod.2272,r24
 143:keymap.c      ****             if (record->event.pressed) {
 100               		.loc 1 143 0
 101 0062 F601      		movw r30,r12
 102 0064 3281      		ldd r19,Z+2
 103 0066 3323      		tst r19
 104 0068 01F4      		brne .+2
 105 006a 00C0      		rjmp .L1
 144:keymap.c      ****                 if (shift_mod) {
 106               		.loc 1 144 0
 107 006c 8111      		cpse r24,__zero_reg__
 108 006e 00C0      		rjmp .L31
 109               	.L10:
 110               	.LBB3:
 145:keymap.c      **** 		    layer_invert(1); // toggle number pad layer
 146:keymap.c      **** 		    DDR_NUMLAYER ^= (1<<BIT_NUMLAYER);	    
 147:keymap.c      ****                 } else {
 148:keymap.c      ****                     del_mods(shift_mod); // remove shift
 111               		.loc 1 148 0
 112 0070 0E94 0000 		call del_mods
 113               	.LVL5:
 149:keymap.c      ****                     layer_invert(2); // toggle layer
 114               		.loc 1 149 0
 115 0074 82E0      		ldi r24,lo8(2)
 116 0076 0E94 0000 		call layer_invert
 117               	.LVL6:
 150:keymap.c      **** 		    DDR_EXTRA_LAYER ^= (1<<BIT_EXTRA_LAYER);
 118               		.loc 1 150 0
 119 007a 8DB1      		in r24,0xd
 120 007c 92E0      		ldi r25,lo8(2)
 121 007e 8927      		eor r24,r25
 122 0080 8DB9      		out 0xd,r24
 123 0082 00C0      		rjmp .L32
 124               	.L7:
 125               	.LBE3:
 151:keymap.c      **** 		    // ...because, come on, who uses scroll lock...?
 152:keymap.c      **** 		    //add_key(KC_SLCK);
 153:keymap.c      ****                     //send_keyboard_report(); // send Scroll Lock
 154:keymap.c      ****                     add_mods(shift_mod); // return shift but not sent
 155:keymap.c      ****                 }
 156:keymap.c      ****             } else {
 157:keymap.c      ****                 if (shift_mod) {
 158:keymap.c      ****                 } else {
 159:keymap.c      ****                     //del_key(KC_SLCK);
 160:keymap.c      ****                     //send_keyboard_report();
 161:keymap.c      ****                 }
 162:keymap.c      ****             }
 163:keymap.c      ****             break;
 164:keymap.c      **** 	    
 165:keymap.c      **** 	// Shift + Scroll Lock -> Number Pad Layer Off
 166:keymap.c      ****         case SHIFT_NUM1:
 167:keymap.c      ****             shift_mod = get_mods()&MODS_SHIFT_MASK;
 126               		.loc 1 167 0
 127 0084 0E94 0000 		call get_mods
 128               	.LVL7:
 129 0088 8272      		andi r24,34
 130 008a 9927      		clr r25
 131 008c 8093 0000 		sts shift_mod.2272,r24
 168:keymap.c      ****             if (record->event.pressed) {
 132               		.loc 1 168 0
 133 0090 F601      		movw r30,r12
 134 0092 3281      		ldd r19,Z+2
 135 0094 3323      		tst r19
 136 0096 01F0      		breq .L11
 169:keymap.c      ****                 if (shift_mod) {
 137               		.loc 1 169 0
 138 0098 8823      		tst r24
 139 009a 01F0      		breq .L12
 140               	.L31:
 170:keymap.c      **** 		    layer_invert(1); // toggle number pad layer
 141               		.loc 1 170 0
 142 009c 81E0      		ldi r24,lo8(1)
 143 009e 0E94 0000 		call layer_invert
 144               	.LVL8:
 171:keymap.c      **** 		    DDR_NUMLAYER ^= (1<<BIT_NUMLAYER);
 145               		.loc 1 171 0
 146 00a2 87B1      		in r24,0x7
 147 00a4 92E0      		ldi r25,lo8(2)
 148 00a6 8927      		eor r24,r25
 149 00a8 87B9      		out 0x7,r24
 150 00aa 00C0      		rjmp .L1
 151               	.L12:
 152               	.LBB4:
 172:keymap.c      ****                 } else {
 173:keymap.c      ****                     del_mods(shift_mod); // remove shift
 153               		.loc 1 173 0
 154 00ac 0E94 0000 		call del_mods
 155               	.LVL9:
 174:keymap.c      ****                     add_key(KC_NLCK);
 156               		.loc 1 174 0
 157 00b0 83E5      		ldi r24,lo8(83)
 158 00b2 90E0      		ldi r25,0
 159 00b4 0E94 0000 		call add_key
 160               	.LVL10:
 175:keymap.c      ****                     send_keyboard_report(); // send Num Lock (toggles number pad in OS between numb
 161               		.loc 1 175 0
 162 00b8 0E94 0000 		call send_keyboard_report
 163               	.LVL11:
 164               	.L32:
 176:keymap.c      ****                     add_mods(shift_mod); // return shift but not sent
 165               		.loc 1 176 0
 166 00bc 8091 0000 		lds r24,shift_mod.2272
 167               	.L34:
 168 00c0 90E0      		ldi r25,0
 169               	/* epilogue start */
 170               	.LBE4:
 171               	.LBE2:
 177:keymap.c      ****                 }
 178:keymap.c      ****             } else {
 179:keymap.c      ****                 if (shift_mod) {
 180:keymap.c      ****                 } else {
 181:keymap.c      ****                     del_key(KC_NLCK);
 182:keymap.c      ****                     send_keyboard_report();
 183:keymap.c      ****                 }
 184:keymap.c      ****             }
 185:keymap.c      ****             break;
 186:keymap.c      **** 	    
 187:keymap.c      ****         // Left ALT + Right ALT + Pause = DFU
 188:keymap.c      ****         case PAUS_BOOT:
 189:keymap.c      ****             lalt_ralt_mods = get_mods()&MODS_MASK_1 && get_mods()&MODS_MASK_2;
 190:keymap.c      ****             if (record->event.pressed) {
 191:keymap.c      ****                 if (lalt_ralt_mods) {
 192:keymap.c      **** 		    del_mods(lalt_ralt_mods);
 193:keymap.c      **** 		    send_keyboard_report();
 194:keymap.c      **** 		    bootloader_jump(); 
 195:keymap.c      ****                 } else {
 196:keymap.c      ****                     del_mods(lalt_ralt_mods); // remove shift
 197:keymap.c      ****                     add_key(KC_PAUS);
 198:keymap.c      ****                     send_keyboard_report(); // send Scroll Lock
 199:keymap.c      ****                     add_mods(lalt_ralt_mods); // return shift but not sent
 200:keymap.c      ****                 }
 201:keymap.c      ****             } else {
 202:keymap.c      ****                 if (lalt_ralt_mods) {                   
 203:keymap.c      ****                 } else {
 204:keymap.c      ****                     del_key(KC_PAUS);
 205:keymap.c      ****                     send_keyboard_report();
 206:keymap.c      ****                 }
 207:keymap.c      ****             }
 208:keymap.c      ****             break;	    
 209:keymap.c      ****     }
 210:keymap.c      **** };
 172               		.loc 1 210 0
 173 00c2 CF91      		pop r28
 174               	.LVL12:
 175 00c4 FF90      		pop r15
 176 00c6 EF90      		pop r14
 177 00c8 DF90      		pop r13
 178 00ca CF90      		pop r12
 179               	.LVL13:
 180               	.LBB12:
 181               	.LBB5:
 176:keymap.c      ****                     add_mods(shift_mod); // return shift but not sent
 182               		.loc 1 176 0
 183 00cc 0C94 0000 		jmp add_mods
 184               	.LVL14:
 185               	.L11:
 186               	.LBE5:
 179:keymap.c      ****                 if (shift_mod) {
 187               		.loc 1 179 0
 188 00d0 8111      		cpse r24,__zero_reg__
 189 00d2 00C0      		rjmp .L1
 190               	.LBB6:
 181:keymap.c      ****                     del_key(KC_NLCK);
 191               		.loc 1 181 0
 192 00d4 83E5      		ldi r24,lo8(83)
 193 00d6 90E0      		ldi r25,0
 194 00d8 00C0      		rjmp .L33
 195               	.L8:
 196               	.LBE6:
 189:keymap.c      ****             lalt_ralt_mods = get_mods()&MODS_MASK_1 && get_mods()&MODS_MASK_2;
 197               		.loc 1 189 0
 198 00da 0E94 0000 		call get_mods
 199               	.LVL15:
 200 00de 82FF      		sbrs r24,2
 201 00e0 00C0      		rjmp .L17
 189:keymap.c      ****             lalt_ralt_mods = get_mods()&MODS_MASK_1 && get_mods()&MODS_MASK_2;
 202               		.loc 1 189 0 is_stmt 0 discriminator 1
 203 00e2 0E94 0000 		call get_mods
 204               	.LVL16:
 205 00e6 86FB      		bst r24,6
 206 00e8 EE24      		clr r14
 207 00ea E0F8      		bld r14,0
 208 00ec F12C      		mov r15,__zero_reg__
 209 00ee 00C0      		rjmp .L14
 210               	.L17:
 189:keymap.c      ****             lalt_ralt_mods = get_mods()&MODS_MASK_1 && get_mods()&MODS_MASK_2;
 211               		.loc 1 189 0
 212 00f0 E12C      		mov r14,__zero_reg__
 213 00f2 F12C      		mov r15,__zero_reg__
 214               	.L14:
 189:keymap.c      ****             lalt_ralt_mods = get_mods()&MODS_MASK_1 && get_mods()&MODS_MASK_2;
 215               		.loc 1 189 0 discriminator 4
 216 00f4 E092 0000 		sts lalt_ralt_mods.2273,r14
 190:keymap.c      ****             if (record->event.pressed) {
 217               		.loc 1 190 0 is_stmt 1 discriminator 4
 218 00f8 F601      		movw r30,r12
 219 00fa 9281      		ldd r25,Z+2
 220 00fc 9923      		tst r25
 221 00fe 01F0      		breq .L15
 191:keymap.c      ****                 if (lalt_ralt_mods) {
 222               		.loc 1 191 0
 223 0100 EE20      		tst r14
 224 0102 01F0      		breq .L16
 225               	.LBB7:
 192:keymap.c      **** 		    del_mods(lalt_ralt_mods);
 226               		.loc 1 192 0
 227 0104 C701      		movw r24,r14
 228 0106 0E94 0000 		call del_mods
 229               	.LVL17:
 193:keymap.c      **** 		    send_keyboard_report();
 230               		.loc 1 193 0
 231 010a 0E94 0000 		call send_keyboard_report
 232               	.LVL18:
 233               	/* epilogue start */
 234               	.LBE7:
 235               	.LBE12:
 236               		.loc 1 210 0
 237 010e CF91      		pop r28
 238               	.LVL19:
 239 0110 FF90      		pop r15
 240 0112 EF90      		pop r14
 241 0114 DF90      		pop r13
 242 0116 CF90      		pop r12
 243               	.LVL20:
 244               	.LBB13:
 245               	.LBB8:
 194:keymap.c      **** 		    bootloader_jump(); 
 246               		.loc 1 194 0
 247 0118 0C94 0000 		jmp bootloader_jump
 248               	.LVL21:
 249               	.L16:
 250               	.LBE8:
 251               	.LBB9:
 196:keymap.c      ****                     del_mods(lalt_ralt_mods); // remove shift
 252               		.loc 1 196 0
 253 011c C701      		movw r24,r14
 254 011e 0E94 0000 		call del_mods
 255               	.LVL22:
 197:keymap.c      ****                     add_key(KC_PAUS);
 256               		.loc 1 197 0
 257 0122 88E4      		ldi r24,lo8(72)
 258 0124 90E0      		ldi r25,0
 259 0126 0E94 0000 		call add_key
 260               	.LVL23:
 198:keymap.c      ****                     send_keyboard_report(); // send Scroll Lock
 261               		.loc 1 198 0
 262 012a 0E94 0000 		call send_keyboard_report
 263               	.LVL24:
 199:keymap.c      ****                     add_mods(lalt_ralt_mods); // return shift but not sent
 264               		.loc 1 199 0
 265 012e 8091 0000 		lds r24,lalt_ralt_mods.2273
 266 0132 00C0      		rjmp .L34
 267               	.L15:
 268               	.LBE9:
 202:keymap.c      ****                 if (lalt_ralt_mods) {                   
 269               		.loc 1 202 0
 270 0134 E110      		cpse r14,__zero_reg__
 271 0136 00C0      		rjmp .L1
 272               	.LBB10:
 204:keymap.c      ****                     del_key(KC_PAUS);
 273               		.loc 1 204 0
 274 0138 88E4      		ldi r24,lo8(72)
 275 013a 90E0      		ldi r25,0
 276               	.L33:
 277 013c 0E94 0000 		call del_key
 278               	.LVL25:
 279               	/* epilogue start */
 280               	.LBE10:
 281               	.LBE13:
 282               		.loc 1 210 0
 283 0140 CF91      		pop r28
 284               	.LVL26:
 285 0142 FF90      		pop r15
 286 0144 EF90      		pop r14
 287 0146 DF90      		pop r13
 288 0148 CF90      		pop r12
 289               	.LVL27:
 290               	.LBB14:
 291               	.LBB11:
 205:keymap.c      ****                     send_keyboard_report();
 292               		.loc 1 205 0
 293 014a 0C94 0000 		jmp send_keyboard_report
 294               	.LVL28:
 295               	.L1:
 296               	/* epilogue start */
 297               	.LBE11:
 298               	.LBE14:
 299               		.loc 1 210 0
 300 014e CF91      		pop r28
 301               	.LVL29:
 302 0150 FF90      		pop r15
 303 0152 EF90      		pop r14
 304 0154 DF90      		pop r13
 305 0156 CF90      		pop r12
 306               	.LVL30:
 307 0158 0895      		ret
 308               		.cfi_endproc
 309               	.LFE10:
 311               	.global	fn_actions
 312               		.section	.progmem.data.fn_actions,"a",@progbits
 315               	fn_actions:
 316 0000 02F0      		.word	-4094
 317 0002 00F0      		.word	-4096
 318 0004 01F0      		.word	-4095
 319 0006 39A3      		.word	-23751
 320 0008 F1A4      		.word	-23311
 321               	.global	keymaps
 322               		.section	.progmem.data.keymaps,"a",@progbits
 325               	keymaps:
 326 0000 00        		.byte	0
 327 0001 00        		.byte	0
 328 0002 00        		.byte	0
 329 0003 00        		.byte	0
 330 0004 00        		.byte	0
 331 0005 05        		.byte	5
 332 0006 2C        		.byte	44
 333 0007 11        		.byte	17
 334 0008 E5        		.byte	-27
 335 0009 00        		.byte	0
 336 000a 38        		.byte	56
 337 000b 51        		.byte	81
 338 000c 4F        		.byte	79
 339 000d 00        		.byte	0
 340 000e 50        		.byte	80
 341 000f E6        		.byte	-26
 342 0010 E4        		.byte	-28
 343 0011 E5        		.byte	-27
 344 0012 1D        		.byte	29
 345 0013 1B        		.byte	27
 346 0014 06        		.byte	6
 347 0015 19        		.byte	25
 348 0016 28        		.byte	40
 349 0017 10        		.byte	16
 350 0018 36        		.byte	54
 351 0019 37        		.byte	55
 352 001a 31        		.byte	49
 353 001b 00        		.byte	0
 354 001c 00        		.byte	0
 355 001d 00        		.byte	0
 356 001e C0        		.byte	-64
 357 001f 00        		.byte	0
 358 0020 00        		.byte	0
 359 0021 00        		.byte	0
 360 0022 04        		.byte	4
 361 0023 16        		.byte	22
 362 0024 07        		.byte	7
 363 0025 09        		.byte	9
 364 0026 31        		.byte	49
 365 0027 0D        		.byte	13
 366 0028 0E        		.byte	14
 367 0029 0F        		.byte	15
 368 002a 33        		.byte	51
 369 002b 00        		.byte	0
 370 002c 00        		.byte	0
 371 002d 00        		.byte	0
 372 002e 00        		.byte	0
 373 002f 00        		.byte	0
 374 0030 00        		.byte	0
 375 0031 00        		.byte	0
 376 0032 14        		.byte	20
 377 0033 1A        		.byte	26
 378 0034 08        		.byte	8
 379 0035 15        		.byte	21
 380 0036 31        		.byte	49
 381 0037 18        		.byte	24
 382 0038 0C        		.byte	12
 383 0039 12        		.byte	18
 384 003a 13        		.byte	19
 385 003b 00        		.byte	0
 386 003c 00        		.byte	0
 387 003d 00        		.byte	0
 388 003e 00        		.byte	0
 389 003f C1        		.byte	-63
 390 0040 00        		.byte	0
 391 0041 00        		.byte	0
 392 0042 1E        		.byte	30
 393 0043 1F        		.byte	31
 394 0044 20        		.byte	32
 395 0045 21        		.byte	33
 396 0046 43        		.byte	67
 397 0047 24        		.byte	36
 398 0048 25        		.byte	37
 399 0049 26        		.byte	38
 400 004a 27        		.byte	39
 401 004b 44        		.byte	68
 402 004c 45        		.byte	69
 403 004d 4E        		.byte	78
 404 004e 4D        		.byte	77
 405 004f 47        		.byte	71
 406 0050 E0        		.byte	-32
 407 0051 00        		.byte	0
 408 0052 35        		.byte	53
 409 0053 3A        		.byte	58
 410 0054 3B        		.byte	59
 411 0055 22        		.byte	34
 412 0056 42        		.byte	66
 413 0057 23        		.byte	35
 414 0058 2E        		.byte	46
 415 0059 41        		.byte	65
 416 005a 2D        		.byte	45
 417 005b 4C        		.byte	76
 418 005c 49        		.byte	73
 419 005d 4B        		.byte	75
 420 005e 4A        		.byte	74
 421 005f 00        		.byte	0
 422 0060 00        		.byte	0
 423 0061 E1        		.byte	-31
 424 0062 2B        		.byte	43
 425 0063 C3        		.byte	-61
 426 0064 3C        		.byte	60
 427 0065 17        		.byte	23
 428 0066 2A        		.byte	42
 429 0067 1C        		.byte	28
 430 0068 30        		.byte	48
 431 0069 40        		.byte	64
 432 006a 2F        		.byte	47
 433 006b 00        		.byte	0
 434 006c 00        		.byte	0
 435 006d 00        		.byte	0
 436 006e 00        		.byte	0
 437 006f 00        		.byte	0
 438 0070 00        		.byte	0
 439 0071 00        		.byte	0
 440 0072 29        		.byte	41
 441 0073 64        		.byte	100
 442 0074 3D        		.byte	61
 443 0075 0A        		.byte	10
 444 0076 3E        		.byte	62
 445 0077 0B        		.byte	11
 446 0078 3F        		.byte	63
 447 0079 00        		.byte	0
 448 007a 34        		.byte	52
 449 007b 00        		.byte	0
 450 007c 00        		.byte	0
 451 007d 00        		.byte	0
 452 007e 52        		.byte	82
 453 007f E2        		.byte	-30
 454 0080 00        		.byte	0
 455 0081 00        		.byte	0
 456 0082 00        		.byte	0
 457 0083 00        		.byte	0
 458 0084 00        		.byte	0
 459 0085 01        		.byte	1
 460 0086 01        		.byte	1
 461 0087 01        		.byte	1
 462 0088 01        		.byte	1
 463 0089 00        		.byte	0
 464 008a 54        		.byte	84
 465 008b 01        		.byte	1
 466 008c 01        		.byte	1
 467 008d 00        		.byte	0
 468 008e 01        		.byte	1
 469 008f 01        		.byte	1
 470 0090 01        		.byte	1
 471 0091 01        		.byte	1
 472 0092 01        		.byte	1
 473 0093 01        		.byte	1
 474 0094 01        		.byte	1
 475 0095 01        		.byte	1
 476 0096 58        		.byte	88
 477 0097 62        		.byte	98
 478 0098 85        		.byte	-123
 479 0099 63        		.byte	99
 480 009a 01        		.byte	1
 481 009b 00        		.byte	0
 482 009c 00        		.byte	0
 483 009d 00        		.byte	0
 484 009e 01        		.byte	1
 485 009f 00        		.byte	0
 486 00a0 00        		.byte	0
 487 00a1 00        		.byte	0
 488 00a2 01        		.byte	1
 489 00a3 01        		.byte	1
 490 00a4 01        		.byte	1
 491 00a5 01        		.byte	1
 492 00a6 01        		.byte	1
 493 00a7 59        		.byte	89
 494 00a8 5A        		.byte	90
 495 00a9 5B        		.byte	91
 496 00aa 55        		.byte	85
 497 00ab 00        		.byte	0
 498 00ac 00        		.byte	0
 499 00ad 00        		.byte	0
 500 00ae 00        		.byte	0
 501 00af 00        		.byte	0
 502 00b0 00        		.byte	0
 503 00b1 00        		.byte	0
 504 00b2 01        		.byte	1
 505 00b3 01        		.byte	1
 506 00b4 01        		.byte	1
 507 00b5 01        		.byte	1
 508 00b6 01        		.byte	1
 509 00b7 5C        		.byte	92
 510 00b8 5D        		.byte	93
 511 00b9 5E        		.byte	94
 512 00ba 01        		.byte	1
 513 00bb 00        		.byte	0
 514 00bc 00        		.byte	0
 515 00bd 00        		.byte	0
 516 00be 00        		.byte	0
 517 00bf C2        		.byte	-62
 518 00c0 00        		.byte	0
 519 00c1 00        		.byte	0
 520 00c2 01        		.byte	1
 521 00c3 01        		.byte	1
 522 00c4 01        		.byte	1
 523 00c5 01        		.byte	1
 524 00c6 01        		.byte	1
 525 00c7 5F        		.byte	95
 526 00c8 60        		.byte	96
 527 00c9 61        		.byte	97
 528 00ca 01        		.byte	1
 529 00cb 01        		.byte	1
 530 00cc 01        		.byte	1
 531 00cd 01        		.byte	1
 532 00ce 01        		.byte	1
 533 00cf 01        		.byte	1
 534 00d0 01        		.byte	1
 535 00d1 00        		.byte	0
 536 00d2 01        		.byte	1
 537 00d3 01        		.byte	1
 538 00d4 01        		.byte	1
 539 00d5 01        		.byte	1
 540 00d6 01        		.byte	1
 541 00d7 01        		.byte	1
 542 00d8 57        		.byte	87
 543 00d9 01        		.byte	1
 544 00da 56        		.byte	86
 545 00db 01        		.byte	1
 546 00dc 01        		.byte	1
 547 00dd 01        		.byte	1
 548 00de 01        		.byte	1
 549 00df 00        		.byte	0
 550 00e0 00        		.byte	0
 551 00e1 01        		.byte	1
 552 00e2 01        		.byte	1
 553 00e3 01        		.byte	1
 554 00e4 01        		.byte	1
 555 00e5 01        		.byte	1
 556 00e6 01        		.byte	1
 557 00e7 01        		.byte	1
 558 00e8 01        		.byte	1
 559 00e9 01        		.byte	1
 560 00ea 01        		.byte	1
 561 00eb 00        		.byte	0
 562 00ec 00        		.byte	0
 563 00ed 00        		.byte	0
 564 00ee 00        		.byte	0
 565 00ef 00        		.byte	0
 566 00f0 00        		.byte	0
 567 00f1 00        		.byte	0
 568 00f2 01        		.byte	1
 569 00f3 01        		.byte	1
 570 00f4 01        		.byte	1
 571 00f5 01        		.byte	1
 572 00f6 01        		.byte	1
 573 00f7 01        		.byte	1
 574 00f8 01        		.byte	1
 575 00f9 00        		.byte	0
 576 00fa 01        		.byte	1
 577 00fb 00        		.byte	0
 578 00fc 00        		.byte	0
 579 00fd 00        		.byte	0
 580 00fe 01        		.byte	1
 581 00ff 01        		.byte	1
 582 0100 00        		.byte	0
 583 0101 00        		.byte	0
 584 0102 00        		.byte	0
 585 0103 00        		.byte	0
 586 0104 00        		.byte	0
 587 0105 01        		.byte	1
 588 0106 01        		.byte	1
 589 0107 01        		.byte	1
 590 0108 01        		.byte	1
 591 0109 00        		.byte	0
 592 010a 01        		.byte	1
 593 010b 01        		.byte	1
 594 010c 01        		.byte	1
 595 010d 00        		.byte	0
 596 010e 01        		.byte	1
 597 010f 01        		.byte	1
 598 0110 C4        		.byte	-60
 599 0111 01        		.byte	1
 600 0112 01        		.byte	1
 601 0113 01        		.byte	1
 602 0114 01        		.byte	1
 603 0115 01        		.byte	1
 604 0116 01        		.byte	1
 605 0117 01        		.byte	1
 606 0118 01        		.byte	1
 607 0119 01        		.byte	1
 608 011a 01        		.byte	1
 609 011b 00        		.byte	0
 610 011c 00        		.byte	0
 611 011d 00        		.byte	0
 612 011e 01        		.byte	1
 613 011f 00        		.byte	0
 614 0120 00        		.byte	0
 615 0121 00        		.byte	0
 616 0122 01        		.byte	1
 617 0123 01        		.byte	1
 618 0124 01        		.byte	1
 619 0125 01        		.byte	1
 620 0126 01        		.byte	1
 621 0127 01        		.byte	1
 622 0128 01        		.byte	1
 623 0129 01        		.byte	1
 624 012a 01        		.byte	1
 625 012b 00        		.byte	0
 626 012c 00        		.byte	0
 627 012d 00        		.byte	0
 628 012e 00        		.byte	0
 629 012f 00        		.byte	0
 630 0130 00        		.byte	0
 631 0131 00        		.byte	0
 632 0132 01        		.byte	1
 633 0133 01        		.byte	1
 634 0134 01        		.byte	1
 635 0135 01        		.byte	1
 636 0136 01        		.byte	1
 637 0137 01        		.byte	1
 638 0138 01        		.byte	1
 639 0139 01        		.byte	1
 640 013a 01        		.byte	1
 641 013b 00        		.byte	0
 642 013c 00        		.byte	0
 643 013d 00        		.byte	0
 644 013e 00        		.byte	0
 645 013f 01        		.byte	1
 646 0140 00        		.byte	0
 647 0141 00        		.byte	0
 648 0142 01        		.byte	1
 649 0143 01        		.byte	1
 650 0144 01        		.byte	1
 651 0145 01        		.byte	1
 652 0146 01        		.byte	1
 653 0147 01        		.byte	1
 654 0148 01        		.byte	1
 655 0149 01        		.byte	1
 656 014a 01        		.byte	1
 657 014b 01        		.byte	1
 658 014c 01        		.byte	1
 659 014d F3        		.byte	-13
 660 014e F1        		.byte	-15
 661 014f 01        		.byte	1
 662 0150 01        		.byte	1
 663 0151 00        		.byte	0
 664 0152 01        		.byte	1
 665 0153 01        		.byte	1
 666 0154 01        		.byte	1
 667 0155 01        		.byte	1
 668 0156 01        		.byte	1
 669 0157 01        		.byte	1
 670 0158 01        		.byte	1
 671 0159 01        		.byte	1
 672 015a 01        		.byte	1
 673 015b F2        		.byte	-14
 674 015c F4        		.byte	-12
 675 015d F5        		.byte	-11
 676 015e F0        		.byte	-16
 677 015f 00        		.byte	0
 678 0160 00        		.byte	0
 679 0161 01        		.byte	1
 680 0162 01        		.byte	1
 681 0163 01        		.byte	1
 682 0164 01        		.byte	1
 683 0165 01        		.byte	1
 684 0166 01        		.byte	1
 685 0167 01        		.byte	1
 686 0168 01        		.byte	1
 687 0169 01        		.byte	1
 688 016a 01        		.byte	1
 689 016b 00        		.byte	0
 690 016c 00        		.byte	0
 691 016d 00        		.byte	0
 692 016e 00        		.byte	0
 693 016f 00        		.byte	0
 694 0170 00        		.byte	0
 695 0171 00        		.byte	0
 696 0172 01        		.byte	1
 697 0173 01        		.byte	1
 698 0174 01        		.byte	1
 699 0175 01        		.byte	1
 700 0176 01        		.byte	1
 701 0177 01        		.byte	1
 702 0178 01        		.byte	1
 703 0179 00        		.byte	0
 704 017a 01        		.byte	1
 705 017b 00        		.byte	0
 706 017c 00        		.byte	0
 707 017d 00        		.byte	0
 708 017e 01        		.byte	1
 709 017f 01        		.byte	1
 710 0180 00        		.byte	0
 711 0181 00        		.byte	0
 712 0182 00        		.byte	0
 713 0183 00        		.byte	0
 714 0184 00        		.byte	0
 715 0185 01        		.byte	1
 716 0186 01        		.byte	1
 717 0187 01        		.byte	1
 718 0188 01        		.byte	1
 719 0189 00        		.byte	0
 720 018a 01        		.byte	1
 721 018b A8        		.byte	-88
 722 018c A9        		.byte	-87
 723 018d 00        		.byte	0
 724 018e AA        		.byte	-86
 725 018f E7        		.byte	-25
 726 0190 01        		.byte	1
 727 0191 01        		.byte	1
 728 0192 01        		.byte	1
 729 0193 01        		.byte	1
 730 0194 01        		.byte	1
 731 0195 01        		.byte	1
 732 0196 01        		.byte	1
 733 0197 01        		.byte	1
 734 0198 01        		.byte	1
 735 0199 01        		.byte	1
 736 019a 01        		.byte	1
 737 019b 00        		.byte	0
 738 019c 00        		.byte	0
 739 019d 00        		.byte	0
 740 019e C5        		.byte	-59
 741 019f 00        		.byte	0
 742 01a0 00        		.byte	0
 743 01a1 00        		.byte	0
 744 01a2 01        		.byte	1
 745 01a3 01        		.byte	1
 746 01a4 01        		.byte	1
 747 01a5 01        		.byte	1
 748 01a6 01        		.byte	1
 749 01a7 01        		.byte	1
 750 01a8 01        		.byte	1
 751 01a9 01        		.byte	1
 752 01aa 01        		.byte	1
 753 01ab 00        		.byte	0
 754 01ac 00        		.byte	0
 755 01ad 00        		.byte	0
 756 01ae 00        		.byte	0
 757 01af 00        		.byte	0
 758 01b0 00        		.byte	0
 759 01b1 00        		.byte	0
 760 01b2 01        		.byte	1
 761 01b3 01        		.byte	1
 762 01b4 01        		.byte	1
 763 01b5 01        		.byte	1
 764 01b6 01        		.byte	1
 765 01b7 01        		.byte	1
 766 01b8 01        		.byte	1
 767 01b9 01        		.byte	1
 768 01ba 01        		.byte	1
 769 01bb 00        		.byte	0
 770 01bc 00        		.byte	0
 771 01bd 00        		.byte	0
 772 01be 00        		.byte	0
 773 01bf 01        		.byte	1
 774 01c0 00        		.byte	0
 775 01c1 00        		.byte	0
 776 01c2 01        		.byte	1
 777 01c3 01        		.byte	1
 778 01c4 01        		.byte	1
 779 01c5 01        		.byte	1
 780 01c6 B0        		.byte	-80
 781 01c7 01        		.byte	1
 782 01c8 01        		.byte	1
 783 01c9 01        		.byte	1
 784 01ca 01        		.byte	1
 785 01cb AC        		.byte	-84
 786 01cc AB        		.byte	-85
 787 01cd 01        		.byte	1
 788 01ce 01        		.byte	1
 789 01cf 01        		.byte	1
 790 01d0 01        		.byte	1
 791 01d1 00        		.byte	0
 792 01d2 01        		.byte	1
 793 01d3 01        		.byte	1
 794 01d4 01        		.byte	1
 795 01d5 01        		.byte	1
 796 01d6 01        		.byte	1
 797 01d7 01        		.byte	1
 798 01d8 01        		.byte	1
 799 01d9 01        		.byte	1
 800 01da 01        		.byte	1
 801 01db 01        		.byte	1
 802 01dc 01        		.byte	1
 803 01dd 01        		.byte	1
 804 01de 01        		.byte	1
 805 01df 00        		.byte	0
 806 01e0 00        		.byte	0
 807 01e1 01        		.byte	1
 808 01e2 01        		.byte	1
 809 01e3 01        		.byte	1
 810 01e4 01        		.byte	1
 811 01e5 01        		.byte	1
 812 01e6 01        		.byte	1
 813 01e7 01        		.byte	1
 814 01e8 01        		.byte	1
 815 01e9 01        		.byte	1
 816 01ea 01        		.byte	1
 817 01eb 00        		.byte	0
 818 01ec 00        		.byte	0
 819 01ed 00        		.byte	0
 820 01ee 00        		.byte	0
 821 01ef 00        		.byte	0
 822 01f0 00        		.byte	0
 823 01f1 00        		.byte	0
 824 01f2 01        		.byte	1
 825 01f3 01        		.byte	1
 826 01f4 01        		.byte	1
 827 01f5 01        		.byte	1
 828 01f6 01        		.byte	1
 829 01f7 01        		.byte	1
 830 01f8 01        		.byte	1
 831 01f9 00        		.byte	0
 832 01fa 01        		.byte	1
 833 01fb 00        		.byte	0
 834 01fc 00        		.byte	0
 835 01fd 00        		.byte	0
 836 01fe 01        		.byte	1
 837 01ff E3        		.byte	-29
 838 0200 00        		.byte	0
 839 0201 00        		.byte	0
 840 0202 00        		.byte	0
 841 0203 00        		.byte	0
 842 0204 00        		.byte	0
 843 0205 01        		.byte	1
 844 0206 01        		.byte	1
 845 0207 01        		.byte	1
 846 0208 01        		.byte	1
 847 0209 00        		.byte	0
 848 020a 01        		.byte	1
 849 020b 01        		.byte	1
 850 020c 01        		.byte	1
 851 020d 00        		.byte	0
 852 020e 01        		.byte	1
 853 020f 01        		.byte	1
 854 0210 01        		.byte	1
 855 0211 01        		.byte	1
 856 0212 01        		.byte	1
 857 0213 01        		.byte	1
 858 0214 01        		.byte	1
 859 0215 01        		.byte	1
 860 0216 01        		.byte	1
 861 0217 01        		.byte	1
 862 0218 01        		.byte	1
 863 0219 01        		.byte	1
 864 021a 01        		.byte	1
 865 021b 00        		.byte	0
 866 021c 00        		.byte	0
 867 021d 00        		.byte	0
 868 021e 01        		.byte	1
 869 021f 00        		.byte	0
 870 0220 00        		.byte	0
 871 0221 00        		.byte	0
 872 0222 01        		.byte	1
 873 0223 01        		.byte	1
 874 0224 01        		.byte	1
 875 0225 01        		.byte	1
 876 0226 01        		.byte	1
 877 0227 01        		.byte	1
 878 0228 01        		.byte	1
 879 0229 01        		.byte	1
 880 022a 01        		.byte	1
 881 022b 00        		.byte	0
 882 022c 00        		.byte	0
 883 022d 00        		.byte	0
 884 022e 00        		.byte	0
 885 022f 00        		.byte	0
 886 0230 00        		.byte	0
 887 0231 00        		.byte	0
 888 0232 01        		.byte	1
 889 0233 01        		.byte	1
 890 0234 01        		.byte	1
 891 0235 01        		.byte	1
 892 0236 01        		.byte	1
 893 0237 01        		.byte	1
 894 0238 01        		.byte	1
 895 0239 01        		.byte	1
 896 023a 01        		.byte	1
 897 023b 00        		.byte	0
 898 023c 00        		.byte	0
 899 023d 00        		.byte	0
 900 023e 00        		.byte	0
 901 023f 01        		.byte	1
 902 0240 00        		.byte	0
 903 0241 00        		.byte	0
 904 0242 01        		.byte	1
 905 0243 01        		.byte	1
 906 0244 01        		.byte	1
 907 0245 01        		.byte	1
 908 0246 01        		.byte	1
 909 0247 01        		.byte	1
 910 0248 01        		.byte	1
 911 0249 01        		.byte	1
 912 024a 01        		.byte	1
 913 024b 01        		.byte	1
 914 024c 01        		.byte	1
 915 024d 01        		.byte	1
 916 024e FA        		.byte	-6
 917 024f 01        		.byte	1
 918 0250 01        		.byte	1
 919 0251 00        		.byte	0
 920 0252 01        		.byte	1
 921 0253 01        		.byte	1
 922 0254 01        		.byte	1
 923 0255 01        		.byte	1
 924 0256 01        		.byte	1
 925 0257 01        		.byte	1
 926 0258 01        		.byte	1
 927 0259 01        		.byte	1
 928 025a 01        		.byte	1
 929 025b 01        		.byte	1
 930 025c 01        		.byte	1
 931 025d 01        		.byte	1
 932 025e F9        		.byte	-7
 933 025f 00        		.byte	0
 934 0260 00        		.byte	0
 935 0261 01        		.byte	1
 936 0262 01        		.byte	1
 937 0263 01        		.byte	1
 938 0264 01        		.byte	1
 939 0265 01        		.byte	1
 940 0266 01        		.byte	1
 941 0267 01        		.byte	1
 942 0268 01        		.byte	1
 943 0269 01        		.byte	1
 944 026a 01        		.byte	1
 945 026b 00        		.byte	0
 946 026c 00        		.byte	0
 947 026d 00        		.byte	0
 948 026e 00        		.byte	0
 949 026f 00        		.byte	0
 950 0270 00        		.byte	0
 951 0271 00        		.byte	0
 952 0272 01        		.byte	1
 953 0273 01        		.byte	1
 954 0274 01        		.byte	1
 955 0275 01        		.byte	1
 956 0276 01        		.byte	1
 957 0277 01        		.byte	1
 958 0278 01        		.byte	1
 959 0279 00        		.byte	0
 960 027a 01        		.byte	1
 961 027b 00        		.byte	0
 962 027c 00        		.byte	0
 963 027d 00        		.byte	0
 964 027e 01        		.byte	1
 965 027f 01        		.byte	1
 966               		.section	.progmem.data.__c.2266,"a",@progbits
 969               	__c.2266:
 970 0000 5000      		.string	"P"
 971               		.section	.progmem.data.__c.2268,"a",@progbits
 974               	__c.2268:
 975 0000 5200      		.string	"R"
 976               		.section	.progmem.data.__c.2270,"a",@progbits
 979               	__c.2270:
 980 0000 6900      		.string	"i"
 981               		.section	.bss.shift_mod.2272,"aw",@nobits
 984               	shift_mod.2272:
 985 0000 00        		.zero	1
 986               		.section	.bss.lalt_ralt_mods.2273,"aw",@nobits
 989               	lalt_ralt_mods.2273:
 990 0000 00        		.zero	1
 991               		.text
 992               	.Letext0:
 993               		.file 2 "/usr/lib64/gcc/avr/4.7.1/../../../../avr/include/stdint.h"
 994               		.file 3 "../../../../tmk_core/common/keycode.h"
 995               		.file 4 "../../../../tmk_core/common/keyboard.h"
 996               		.file 5 "../../../../tmk_core/common/action_code.h"
 997               		.file 6 "../../../../tmk_core/common/action.h"
 998               		.file 7 "../../../../tmk_core/common/debug.h"
 999               		.file 8 "../../../../tmk_core/common/action_layer.h"
 1000               		.file 9 "../../../../tmk_core/common/avr/xprintf.h"
 1001               		.file 10 "../../../../tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keymap.c
     /tmp/cclomXF5.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cclomXF5.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cclomXF5.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cclomXF5.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cclomXF5.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cclomXF5.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cclomXF5.s:14     .text.action_function:0000000000000000 action_function
     /tmp/cclomXF5.s:969    .progmem.data.__c.2266:0000000000000000 __c.2266
     /tmp/cclomXF5.s:974    .progmem.data.__c.2268:0000000000000000 __c.2268
     /tmp/cclomXF5.s:979    .progmem.data.__c.2270:0000000000000000 __c.2270
     /tmp/cclomXF5.s:984    .bss.shift_mod.2272:0000000000000000 shift_mod.2272
     /tmp/cclomXF5.s:989    .bss.lalt_ralt_mods.2273:0000000000000000 lalt_ralt_mods.2273
     /tmp/cclomXF5.s:315    .progmem.data.fn_actions:0000000000000000 fn_actions
     /tmp/cclomXF5.s:325    .progmem.data.keymaps:0000000000000000 keymaps

UNDEFINED SYMBOLS
debug_config
xputs
get_mods
del_mods
layer_invert
add_key
send_keyboard_report
add_mods
bootloader_jump
del_key
__do_clear_bss
